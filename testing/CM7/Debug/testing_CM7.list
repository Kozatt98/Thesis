
testing_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012d80  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08013018  08013018  00023018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080130a0  080130a0  00030100  2**0
                  CONTENTS
  4 .ARM          00000008  080130a0  080130a0  000230a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080130a8  080130a8  00030100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080130a8  080130a8  000230a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080130ac  080130ac  000230ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  24000000  080130b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000685bc  24000100  080131b0  00030100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240686bc  080131b0  000386bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029e56  00000000  00000000  0003012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ad9  00000000  00000000  00059f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001eb8  00000000  00000000  0005ea60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cf0  00000000  00000000  00060918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004155d  00000000  00000000  00062608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029949  00000000  00000000  000a3b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a4d15  00000000  00000000  000cd4ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002721c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000083f0  00000000  00000000  00272214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000100 	.word	0x24000100
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08013000 	.word	0x08013000

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000104 	.word	0x24000104
 80002d4:	08013000 	.word	0x08013000

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 800070e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000712:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000714:	bf00      	nop
 8000716:	4bb2      	ldr	r3, [pc, #712]	; (80009e0 <main+0x2d8>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x24>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf4      	bgt.n	8000716 <main+0xe>
	if (timeout < 0)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	da01      	bge.n	8000736 <main+0x2e>
	{
		Error_Handler();
 8000732:	f001 faa9 	bl	8001c88 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f001 fe7d 	bl	8002434 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f9d9 	bl	8000af0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800073e:	f000 fa65 	bl	8000c0c <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000742:	4ba7      	ldr	r3, [pc, #668]	; (80009e0 <main+0x2d8>)
 8000744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000748:	4aa5      	ldr	r2, [pc, #660]	; (80009e0 <main+0x2d8>)
 800074a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000752:	4ba3      	ldr	r3, [pc, #652]	; (80009e0 <main+0x2d8>)
 8000754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000760:	2000      	movs	r0, #0
 8000762:	f007 fab9 	bl	8007cd8 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8000766:	2100      	movs	r1, #0
 8000768:	2000      	movs	r0, #0
 800076a:	f007 facf 	bl	8007d0c <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800076e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000772:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000774:	bf00      	nop
 8000776:	4b9a      	ldr	r3, [pc, #616]	; (80009e0 <main+0x2d8>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077e:	2b00      	cmp	r3, #0
 8000780:	d104      	bne.n	800078c <main+0x84>
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	1e5a      	subs	r2, r3, #1
 8000786:	607a      	str	r2, [r7, #4]
 8000788:	2b00      	cmp	r3, #0
 800078a:	dcf4      	bgt.n	8000776 <main+0x6e>
	if (timeout < 0)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b00      	cmp	r3, #0
 8000790:	da01      	bge.n	8000796 <main+0x8e>
	{
		Error_Handler();
 8000792:	f001 fa79 	bl	8001c88 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000796:	f000 fdaf 	bl	80012f8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800079a:	f000 fced 	bl	8001178 <MX_USART3_UART_Init>
  MX_DMA_Init();
 800079e:	f000 fd37 	bl	8001210 <MX_DMA_Init>
  MX_ADC1_Init();
 80007a2:	f000 fa5f 	bl	8000c64 <MX_ADC1_Init>
  MX_TIM1_Init();
 80007a6:	f000 fc33 	bl	8001010 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 80007aa:	f011 fe35 	bl	8012418 <MX_USB_DEVICE_Init>
  MX_ADC3_Init();
 80007ae:	f000 fb3d 	bl	8000e2c <MX_ADC3_Init>
  MX_ADC2_Init();
 80007b2:	f000 fad3 	bl	8000d5c <MX_ADC2_Init>
  MX_TIM16_Init();
 80007b6:	f000 fcb7 	bl	8001128 <MX_TIM16_Init>
  MX_COMP1_Init();
 80007ba:	f000 fb9d 	bl	8000ef8 <MX_COMP1_Init>
  MX_COMP2_Init();
 80007be:	f000 fbc9 	bl	8000f54 <MX_COMP2_Init>
  MX_DAC1_Init();
 80007c2:	f000 fbf3 	bl	8000fac <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007c6:	2102      	movs	r1, #2
 80007c8:	4886      	ldr	r0, [pc, #536]	; (80009e4 <main+0x2dc>)
 80007ca:	f007 fa6a 	bl	8007ca2 <HAL_GPIO_TogglePin>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
 80007ce:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80007d6:	4884      	ldr	r0, [pc, #528]	; (80009e8 <main+0x2e0>)
 80007d8:	f003 fd84 	bl	80042e4 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
 80007dc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80007e4:	4881      	ldr	r0, [pc, #516]	; (80009ec <main+0x2e4>)
 80007e6:	f003 fd7d 	bl	80042e4 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
 80007ea:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80007f2:	487f      	ldr	r0, [pc, #508]	; (80009f0 <main+0x2e8>)
 80007f4:	f003 fd76 	bl	80042e4 <HAL_ADCEx_Calibration_Start>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007f8:	2102      	movs	r1, #2
 80007fa:	487a      	ldr	r0, [pc, #488]	; (80009e4 <main+0x2dc>)
 80007fc:	f007 fa51 	bl	8007ca2 <HAL_GPIO_TogglePin>

	HAL_TIM_Base_Start_IT(&htim16);
 8000800:	487c      	ldr	r0, [pc, #496]	; (80009f4 <main+0x2ec>)
 8000802:	f00b ffdf 	bl	800c7c4 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if (start_flag)
 8000806:	4b7c      	ldr	r3, [pc, #496]	; (80009f8 <main+0x2f0>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d04c      	beq.n	80008a8 <main+0x1a0>
		{
			HAL_ADC_Stop_DMA(&hadc1);
 800080e:	4876      	ldr	r0, [pc, #472]	; (80009e8 <main+0x2e0>)
 8000810:	f002 fbca 	bl	8002fa8 <HAL_ADC_Stop_DMA>
			HAL_ADC_Stop_DMA(&hadc2);
 8000814:	4875      	ldr	r0, [pc, #468]	; (80009ec <main+0x2e4>)
 8000816:	f002 fbc7 	bl	8002fa8 <HAL_ADC_Stop_DMA>
			HAL_ADC_Stop_DMA(&hadc3);
 800081a:	4875      	ldr	r0, [pc, #468]	; (80009f0 <main+0x2e8>)
 800081c:	f002 fbc4 	bl	8002fa8 <HAL_ADC_Stop_DMA>

			HAL_COMP_Stop(&hcomp1);
 8000820:	4876      	ldr	r0, [pc, #472]	; (80009fc <main+0x2f4>)
 8000822:	f004 f847 	bl	80048b4 <HAL_COMP_Stop>
			HAL_COMP_Stop(&hcomp2);
 8000826:	4876      	ldr	r0, [pc, #472]	; (8000a00 <main+0x2f8>)
 8000828:	f004 f844 	bl	80048b4 <HAL_COMP_Stop>

			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800082c:	2100      	movs	r1, #0
 800082e:	4875      	ldr	r0, [pc, #468]	; (8000a04 <main+0x2fc>)
 8000830:	f004 fad0 	bl	8004dd4 <HAL_DAC_Start>

			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000834:	2100      	movs	r1, #0
 8000836:	4874      	ldr	r0, [pc, #464]	; (8000a08 <main+0x300>)
 8000838:	f00c f9a2 	bl	800cb80 <HAL_TIM_PWM_Stop>

			HAL_Delay(500);
 800083c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000840:	f001 fe8a 	bl	8002558 <HAL_Delay>

			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_Buf_A_1, ADC_HALF_BUF_LEN * 2);
 8000844:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000848:	4970      	ldr	r1, [pc, #448]	; (8000a0c <main+0x304>)
 800084a:	4867      	ldr	r0, [pc, #412]	; (80009e8 <main+0x2e0>)
 800084c:	f002 fae8 	bl	8002e20 <HAL_ADC_Start_DMA>
			HAL_ADC_Start_DMA(&hadc2, (uint32_t*) ADC_Buf_B_1, ADC_HALF_BUF_LEN * 2);
 8000850:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000854:	496e      	ldr	r1, [pc, #440]	; (8000a10 <main+0x308>)
 8000856:	4865      	ldr	r0, [pc, #404]	; (80009ec <main+0x2e4>)
 8000858:	f002 fae2 	bl	8002e20 <HAL_ADC_Start_DMA>
			HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC_Buf_C_1, ADC_HALF_BUF_LEN * 2);
 800085c:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000860:	496c      	ldr	r1, [pc, #432]	; (8000a14 <main+0x30c>)
 8000862:	4863      	ldr	r0, [pc, #396]	; (80009f0 <main+0x2e8>)
 8000864:	f002 fadc 	bl	8002e20 <HAL_ADC_Start_DMA>

			HAL_COMP_Start_IT(&hcomp1);
 8000868:	4864      	ldr	r0, [pc, #400]	; (80009fc <main+0x2f4>)
 800086a:	f004 f857 	bl	800491c <HAL_COMP_Start_IT>
			HAL_COMP_Start_IT(&hcomp2);
 800086e:	4864      	ldr	r0, [pc, #400]	; (8000a00 <main+0x2f8>)
 8000870:	f004 f854 	bl	800491c <HAL_COMP_Start_IT>

			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000874:	2100      	movs	r1, #0
 8000876:	4864      	ldr	r0, [pc, #400]	; (8000a08 <main+0x300>)
 8000878:	f00c f874 	bl	800c964 <HAL_TIM_PWM_Start>

			trigger_A_pos = 0;
 800087c:	4b66      	ldr	r3, [pc, #408]	; (8000a18 <main+0x310>)
 800087e:	2200      	movs	r2, #0
 8000880:	801a      	strh	r2, [r3, #0]
			trigger_B_pos = 0;
 8000882:	4b66      	ldr	r3, [pc, #408]	; (8000a1c <main+0x314>)
 8000884:	2200      	movs	r2, #0
 8000886:	801a      	strh	r2, [r3, #0]

			buf_A_pos = 0;
 8000888:	4b65      	ldr	r3, [pc, #404]	; (8000a20 <main+0x318>)
 800088a:	2200      	movs	r2, #0
 800088c:	801a      	strh	r2, [r3, #0]
			buf_B_pos = 0;
 800088e:	4b65      	ldr	r3, [pc, #404]	; (8000a24 <main+0x31c>)
 8000890:	2200      	movs	r2, #0
 8000892:	801a      	strh	r2, [r3, #0]
			buf_C_pos = 0;
 8000894:	4b64      	ldr	r3, [pc, #400]	; (8000a28 <main+0x320>)
 8000896:	2200      	movs	r2, #0
 8000898:	801a      	strh	r2, [r3, #0]

			start_flag = RESET;
 800089a:	4b57      	ldr	r3, [pc, #348]	; (80009f8 <main+0x2f0>)
 800089c:	2200      	movs	r2, #0
 800089e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80008a0:	2101      	movs	r1, #1
 80008a2:	4862      	ldr	r0, [pc, #392]	; (8000a2c <main+0x324>)
 80008a4:	f007 f9fd 	bl	8007ca2 <HAL_GPIO_TogglePin>
		}

		if (trigger_flag)
 80008a8:	4b61      	ldr	r3, [pc, #388]	; (8000a30 <main+0x328>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d02d      	beq.n	800090c <main+0x204>
		{
			if (options->trigger_channel == 1)
 80008b0:	4b60      	ldr	r3, [pc, #384]	; (8000a34 <main+0x32c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	799b      	ldrb	r3, [r3, #6]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d111      	bne.n	80008de <main+0x1d6>
			{
				if (buf_A_quadrant == (trigger_quadrant + 1) & 3)
 80008ba:	4b5f      	ldr	r3, [pc, #380]	; (8000a38 <main+0x330>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	461a      	mov	r2, r3
 80008c0:	4b5e      	ldr	r3, [pc, #376]	; (8000a3c <main+0x334>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	3301      	adds	r3, #1
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d109      	bne.n	80008de <main+0x1d6>
				{
					copy_to_tmp_array();
 80008ca:	f001 f84b 	bl	8001964 <copy_to_tmp_array>
					prepare_data_to_send(trigger_A_pos);
 80008ce:	4b52      	ldr	r3, [pc, #328]	; (8000a18 <main+0x310>)
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f001 f97c 	bl	8001bd0 <prepare_data_to_send>
					ready_to_send_flag = 1;
 80008d8:	4b59      	ldr	r3, [pc, #356]	; (8000a40 <main+0x338>)
 80008da:	2201      	movs	r2, #1
 80008dc:	701a      	strb	r2, [r3, #0]
				}
			}
			if (options->trigger_channel == 2)
 80008de:	4b55      	ldr	r3, [pc, #340]	; (8000a34 <main+0x32c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	799b      	ldrb	r3, [r3, #6]
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	d111      	bne.n	800090c <main+0x204>
			{
				if (buf_B_quadrant == (trigger_quadrant + 1) & 3)
 80008e8:	4b56      	ldr	r3, [pc, #344]	; (8000a44 <main+0x33c>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	461a      	mov	r2, r3
 80008ee:	4b53      	ldr	r3, [pc, #332]	; (8000a3c <main+0x334>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	3301      	adds	r3, #1
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d109      	bne.n	800090c <main+0x204>
				{
					copy_to_tmp_array();
 80008f8:	f001 f834 	bl	8001964 <copy_to_tmp_array>
					prepare_data_to_send(trigger_B_pos);
 80008fc:	4b47      	ldr	r3, [pc, #284]	; (8000a1c <main+0x314>)
 80008fe:	881b      	ldrh	r3, [r3, #0]
 8000900:	4618      	mov	r0, r3
 8000902:	f001 f965 	bl	8001bd0 <prepare_data_to_send>
					ready_to_send_flag = 1;
 8000906:	4b4e      	ldr	r3, [pc, #312]	; (8000a40 <main+0x338>)
 8000908:	2201      	movs	r2, #1
 800090a:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		if (options->changed)
 800090c:	4b49      	ldr	r3, [pc, #292]	; (8000a34 <main+0x32c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	7a1b      	ldrb	r3, [r3, #8]
 8000912:	2b00      	cmp	r3, #0
 8000914:	f43f af77 	beq.w	8000806 <main+0xfe>
		{
			//TODO(Attila): Set everything

			//MUX 1
			HAL_GPIO_WritePin(MUX_1_A_GPIO_Port, MUX_1_A_Pin, !(options->channelA & 1));
 8000918:	4b46      	ldr	r3, [pc, #280]	; (8000a34 <main+0x32c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	2b00      	cmp	r3, #0
 8000924:	bf0c      	ite	eq
 8000926:	2301      	moveq	r3, #1
 8000928:	2300      	movne	r3, #0
 800092a:	b2db      	uxtb	r3, r3
 800092c:	461a      	mov	r2, r3
 800092e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000932:	4845      	ldr	r0, [pc, #276]	; (8000a48 <main+0x340>)
 8000934:	f007 f99c 	bl	8007c70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_1_B_GPIO_Port, MUX_1_B_Pin, !(options->channelA & 2));
 8000938:	4b3e      	ldr	r3, [pc, #248]	; (8000a34 <main+0x32c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	2b00      	cmp	r3, #0
 8000944:	bf0c      	ite	eq
 8000946:	2301      	moveq	r3, #1
 8000948:	2300      	movne	r3, #0
 800094a:	b2db      	uxtb	r3, r3
 800094c:	461a      	mov	r2, r3
 800094e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000952:	483d      	ldr	r0, [pc, #244]	; (8000a48 <main+0x340>)
 8000954:	f007 f98c 	bl	8007c70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_1_C_GPIO_Port, MUX_1_C_Pin, !(options->channelA & 4));
 8000958:	4b36      	ldr	r3, [pc, #216]	; (8000a34 <main+0x32c>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	f003 0304 	and.w	r3, r3, #4
 8000962:	2b00      	cmp	r3, #0
 8000964:	bf0c      	ite	eq
 8000966:	2301      	moveq	r3, #1
 8000968:	2300      	movne	r3, #0
 800096a:	b2db      	uxtb	r3, r3
 800096c:	461a      	mov	r2, r3
 800096e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000972:	4835      	ldr	r0, [pc, #212]	; (8000a48 <main+0x340>)
 8000974:	f007 f97c 	bl	8007c70 <HAL_GPIO_WritePin>

			//MUX 2
			HAL_GPIO_WritePin(MUX_2_A_GPIO_Port, MUX_2_A_Pin, !(options->channelB & 1));
 8000978:	4b2e      	ldr	r3, [pc, #184]	; (8000a34 <main+0x32c>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	785b      	ldrb	r3, [r3, #1]
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	2b00      	cmp	r3, #0
 8000984:	bf0c      	ite	eq
 8000986:	2301      	moveq	r3, #1
 8000988:	2300      	movne	r3, #0
 800098a:	b2db      	uxtb	r3, r3
 800098c:	461a      	mov	r2, r3
 800098e:	2104      	movs	r1, #4
 8000990:	482e      	ldr	r0, [pc, #184]	; (8000a4c <main+0x344>)
 8000992:	f007 f96d 	bl	8007c70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_2_B_GPIO_Port, MUX_2_B_Pin, !(options->channelB & 2));
 8000996:	4b27      	ldr	r3, [pc, #156]	; (8000a34 <main+0x32c>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	785b      	ldrb	r3, [r3, #1]
 800099c:	f003 0302 	and.w	r3, r3, #2
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	bf0c      	ite	eq
 80009a4:	2301      	moveq	r3, #1
 80009a6:	2300      	movne	r3, #0
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	461a      	mov	r2, r3
 80009ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009b0:	4827      	ldr	r0, [pc, #156]	; (8000a50 <main+0x348>)
 80009b2:	f007 f95d 	bl	8007c70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_2_C_GPIO_Port, MUX_2_C_Pin, !(options->channelB & 4));
 80009b6:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <main+0x32c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	785b      	ldrb	r3, [r3, #1]
 80009bc:	f003 0304 	and.w	r3, r3, #4
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	bf0c      	ite	eq
 80009c4:	2301      	moveq	r3, #1
 80009c6:	2300      	movne	r3, #0
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	461a      	mov	r2, r3
 80009cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009d0:	481f      	ldr	r0, [pc, #124]	; (8000a50 <main+0x348>)
 80009d2:	f007 f94d 	bl	8007c70 <HAL_GPIO_WritePin>

			//DAC setting
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, options->trigger_value);
 80009d6:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <main+0x32c>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	889b      	ldrh	r3, [r3, #4]
 80009dc:	e03a      	b.n	8000a54 <main+0x34c>
 80009de:	bf00      	nop
 80009e0:	58024400 	.word	0x58024400
 80009e4:	58021000 	.word	0x58021000
 80009e8:	2400011c 	.word	0x2400011c
 80009ec:	24000180 	.word	0x24000180
 80009f0:	240001e4 	.word	0x240001e4
 80009f4:	24000468 	.word	0x24000468
 80009f8:	24066e63 	.word	0x24066e63
 80009fc:	240003b0 	.word	0x240003b0
 8000a00:	240003dc 	.word	0x240003dc
 8000a04:	24000408 	.word	0x24000408
 8000a08:	2400041c 	.word	0x2400041c
 8000a0c:	240005bc 	.word	0x240005bc
 8000a10:	2400a1fc 	.word	0x2400a1fc
 8000a14:	24013e3c 	.word	0x24013e3c
 8000a18:	24066e5e 	.word	0x24066e5e
 8000a1c:	24066e60 	.word	0x24066e60
 8000a20:	24066e66 	.word	0x24066e66
 8000a24:	24066e68 	.word	0x24066e68
 8000a28:	24066e6a 	.word	0x24066e6a
 8000a2c:	58020400 	.word	0x58020400
 8000a30:	24066e5c 	.word	0x24066e5c
 8000a34:	2406744c 	.word	0x2406744c
 8000a38:	24066e6c 	.word	0x24066e6c
 8000a3c:	24066e62 	.word	0x24066e62
 8000a40:	24066e64 	.word	0x24066e64
 8000a44:	24066e6d 	.word	0x24066e6d
 8000a48:	58020800 	.word	0x58020800
 8000a4c:	58020c00 	.word	0x58020c00
 8000a50:	58021800 	.word	0x58021800
 8000a54:	2200      	movs	r2, #0
 8000a56:	2100      	movs	r1, #0
 8000a58:	4821      	ldr	r0, [pc, #132]	; (8000ae0 <main+0x3d8>)
 8000a5a:	f004 fa0d 	bl	8004e78 <HAL_DAC_SetValue>

			//Trigger Mode
			switch (options->trigger_option)
 8000a5e:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <main+0x3dc>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	78db      	ldrb	r3, [r3, #3]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d002      	beq.n	8000a6e <main+0x366>
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d019      	beq.n	8000aa0 <main+0x398>
 8000a6c:	e02b      	b.n	8000ac6 <main+0x3be>
			{
			case 0:
				hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 8000a6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ae8 <main+0x3e0>)
 8000a70:	2211      	movs	r2, #17
 8000a72:	621a      	str	r2, [r3, #32]
				hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 8000a74:	4b1d      	ldr	r3, [pc, #116]	; (8000aec <main+0x3e4>)
 8000a76:	2211      	movs	r2, #17
 8000a78:	621a      	str	r2, [r3, #32]

				HAL_COMP_Stop_IT(&hcomp1);
 8000a7a:	481b      	ldr	r0, [pc, #108]	; (8000ae8 <main+0x3e0>)
 8000a7c:	f003 ffa0 	bl	80049c0 <HAL_COMP_Stop_IT>
				HAL_COMP_Stop_IT(&hcomp2);
 8000a80:	481a      	ldr	r0, [pc, #104]	; (8000aec <main+0x3e4>)
 8000a82:	f003 ff9d 	bl	80049c0 <HAL_COMP_Stop_IT>

				HAL_COMP_Init(&hcomp1);
 8000a86:	4818      	ldr	r0, [pc, #96]	; (8000ae8 <main+0x3e0>)
 8000a88:	f003 fda0 	bl	80045cc <HAL_COMP_Init>
				HAL_COMP_Init(&hcomp2);
 8000a8c:	4817      	ldr	r0, [pc, #92]	; (8000aec <main+0x3e4>)
 8000a8e:	f003 fd9d 	bl	80045cc <HAL_COMP_Init>

				HAL_COMP_Start(&hcomp1);
 8000a92:	4815      	ldr	r0, [pc, #84]	; (8000ae8 <main+0x3e0>)
 8000a94:	f003 fec4 	bl	8004820 <HAL_COMP_Start>
				HAL_COMP_Start(&hcomp2);
 8000a98:	4814      	ldr	r0, [pc, #80]	; (8000aec <main+0x3e4>)
 8000a9a:	f003 fec1 	bl	8004820 <HAL_COMP_Start>
				break;
 8000a9e:	e019      	b.n	8000ad4 <main+0x3cc>

			case 1:
				hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_FALLING;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <main+0x3e0>)
 8000aa2:	2221      	movs	r2, #33	; 0x21
 8000aa4:	621a      	str	r2, [r3, #32]
				hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_FALLING;
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <main+0x3e4>)
 8000aa8:	2221      	movs	r2, #33	; 0x21
 8000aaa:	621a      	str	r2, [r3, #32]

				HAL_COMP_Init(&hcomp1);
 8000aac:	480e      	ldr	r0, [pc, #56]	; (8000ae8 <main+0x3e0>)
 8000aae:	f003 fd8d 	bl	80045cc <HAL_COMP_Init>
				HAL_COMP_Init(&hcomp2);
 8000ab2:	480e      	ldr	r0, [pc, #56]	; (8000aec <main+0x3e4>)
 8000ab4:	f003 fd8a 	bl	80045cc <HAL_COMP_Init>

				HAL_COMP_Start(&hcomp1);
 8000ab8:	480b      	ldr	r0, [pc, #44]	; (8000ae8 <main+0x3e0>)
 8000aba:	f003 feb1 	bl	8004820 <HAL_COMP_Start>
				HAL_COMP_Start(&hcomp2);
 8000abe:	480b      	ldr	r0, [pc, #44]	; (8000aec <main+0x3e4>)
 8000ac0:	f003 feae 	bl	8004820 <HAL_COMP_Start>
				break;
 8000ac4:	e006      	b.n	8000ad4 <main+0x3cc>

			default:
				HAL_COMP_Stop_IT(&hcomp1);
 8000ac6:	4808      	ldr	r0, [pc, #32]	; (8000ae8 <main+0x3e0>)
 8000ac8:	f003 ff7a 	bl	80049c0 <HAL_COMP_Stop_IT>
				HAL_COMP_Stop_IT(&hcomp2);
 8000acc:	4807      	ldr	r0, [pc, #28]	; (8000aec <main+0x3e4>)
 8000ace:	f003 ff77 	bl	80049c0 <HAL_COMP_Stop_IT>

				break;
 8000ad2:	bf00      	nop
			}
			options->changed = 0;
 8000ad4:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <main+0x3dc>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	721a      	strb	r2, [r3, #8]
		if (start_flag)
 8000adc:	e693      	b.n	8000806 <main+0xfe>
 8000ade:	bf00      	nop
 8000ae0:	24000408 	.word	0x24000408
 8000ae4:	2406744c 	.word	0x2406744c
 8000ae8:	240003b0 	.word	0x240003b0
 8000aec:	240003dc 	.word	0x240003dc

08000af0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b09c      	sub	sp, #112	; 0x70
 8000af4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afa:	224c      	movs	r2, #76	; 0x4c
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f012 fa76 	bl	8012ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	2220      	movs	r2, #32
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f012 fa70 	bl	8012ff0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b10:	2004      	movs	r0, #4
 8000b12:	f008 fbe5 	bl	80092e0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b16:	2300      	movs	r3, #0
 8000b18:	603b      	str	r3, [r7, #0]
 8000b1a:	4b39      	ldr	r3, [pc, #228]	; (8000c00 <SystemClock_Config+0x110>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	4a38      	ldr	r2, [pc, #224]	; (8000c00 <SystemClock_Config+0x110>)
 8000b20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b24:	6193      	str	r3, [r2, #24]
 8000b26:	4b36      	ldr	r3, [pc, #216]	; (8000c00 <SystemClock_Config+0x110>)
 8000b28:	699b      	ldr	r3, [r3, #24]
 8000b2a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	4b34      	ldr	r3, [pc, #208]	; (8000c04 <SystemClock_Config+0x114>)
 8000b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b34:	4a33      	ldr	r2, [pc, #204]	; (8000c04 <SystemClock_Config+0x114>)
 8000b36:	f043 0301 	orr.w	r3, r3, #1
 8000b3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b3c:	4b31      	ldr	r3, [pc, #196]	; (8000c04 <SystemClock_Config+0x114>)
 8000b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b40:	f003 0301 	and.w	r3, r3, #1
 8000b44:	603b      	str	r3, [r7, #0]
 8000b46:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b48:	bf00      	nop
 8000b4a:	4b2d      	ldr	r3, [pc, #180]	; (8000c00 <SystemClock_Config+0x110>)
 8000b4c:	699b      	ldr	r3, [r3, #24]
 8000b4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b56:	d1f8      	bne.n	8000b4a <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000b58:	4b2b      	ldr	r3, [pc, #172]	; (8000c08 <SystemClock_Config+0x118>)
 8000b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b5c:	f023 0303 	bic.w	r3, r3, #3
 8000b60:	4a29      	ldr	r2, [pc, #164]	; (8000c08 <SystemClock_Config+0x118>)
 8000b62:	f043 0302 	orr.w	r3, r3, #2
 8000b66:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b6c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b72:	2301      	movs	r3, #1
 8000b74:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b76:	2340      	movs	r3, #64	; 0x40
 8000b78:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b82:	2301      	movs	r3, #1
 8000b84:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000b86:	2378      	movs	r3, #120	; 0x78
 8000b88:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b8e:	2304      	movs	r3, #4
 8000b90:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b92:	2302      	movs	r3, #2
 8000b94:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b96:	230c      	movs	r3, #12
 8000b98:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f008 fc04 	bl	80093b4 <HAL_RCC_OscConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000bb2:	f001 f869 	bl	8001c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb6:	233f      	movs	r3, #63	; 0x3f
 8000bb8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000bc2:	2308      	movs	r3, #8
 8000bc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000bc6:	2340      	movs	r3, #64	; 0x40
 8000bc8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bca:	2340      	movs	r3, #64	; 0x40
 8000bcc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bd2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bd4:	2340      	movs	r3, #64	; 0x40
 8000bd6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	2104      	movs	r1, #4
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f009 f817 	bl	8009c10 <HAL_RCC_ClockConfig>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000be8:	f001 f84e 	bl	8001c88 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_1);
 8000bec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f009 f9c2 	bl	8009f7c <HAL_RCC_MCOConfig>
}
 8000bf8:	bf00      	nop
 8000bfa:	3770      	adds	r7, #112	; 0x70
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	58024800 	.word	0x58024800
 8000c04:	58000400 	.word	0x58000400
 8000c08:	58024400 	.word	0x58024400

08000c0c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b0b0      	sub	sp, #192	; 0xc0
 8000c10:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	22bc      	movs	r2, #188	; 0xbc
 8000c16:	2100      	movs	r1, #0
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f012 f9e9 	bl	8012ff0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c1e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000c22:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000c24:	2301      	movs	r3, #1
 8000c26:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 50;
 8000c28:	2332      	movs	r3, #50	; 0x32
 8000c2a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8000c2c:	2308      	movs	r3, #8
 8000c2e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8000c30:	2301      	movs	r3, #1
 8000c32:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c34:	2302      	movs	r3, #2
 8000c36:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000c38:	23c0      	movs	r3, #192	; 0xc0
 8000c3a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000c44:	2300      	movs	r3, #0
 8000c46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f009 fbd5 	bl	800a3fc <HAL_RCCEx_PeriphCLKConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 8000c58:	f001 f816 	bl	8001c88 <Error_Handler>
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	37c0      	adds	r7, #192	; 0xc0
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	; 0x28
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c76:	463b      	mov	r3, r7
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
 8000c84:	615a      	str	r2, [r3, #20]
 8000c86:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c88:	4b31      	ldr	r3, [pc, #196]	; (8000d50 <MX_ADC1_Init+0xec>)
 8000c8a:	4a32      	ldr	r2, [pc, #200]	; (8000d54 <MX_ADC1_Init+0xf0>)
 8000c8c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c8e:	4b30      	ldr	r3, [pc, #192]	; (8000d50 <MX_ADC1_Init+0xec>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000c94:	4b2e      	ldr	r3, [pc, #184]	; (8000d50 <MX_ADC1_Init+0xec>)
 8000c96:	2210      	movs	r2, #16
 8000c98:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c9a:	4b2d      	ldr	r3, [pc, #180]	; (8000d50 <MX_ADC1_Init+0xec>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca0:	4b2b      	ldr	r3, [pc, #172]	; (8000d50 <MX_ADC1_Init+0xec>)
 8000ca2:	2204      	movs	r2, #4
 8000ca4:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ca6:	4b2a      	ldr	r3, [pc, #168]	; (8000d50 <MX_ADC1_Init+0xec>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cac:	4b28      	ldr	r3, [pc, #160]	; (8000d50 <MX_ADC1_Init+0xec>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000cb2:	4b27      	ldr	r3, [pc, #156]	; (8000d50 <MX_ADC1_Init+0xec>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cb8:	4b25      	ldr	r3, [pc, #148]	; (8000d50 <MX_ADC1_Init+0xec>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000cbe:	4b24      	ldr	r3, [pc, #144]	; (8000d50 <MX_ADC1_Init+0xec>)
 8000cc0:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000cc4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000cc6:	4b22      	ldr	r3, [pc, #136]	; (8000d50 <MX_ADC1_Init+0xec>)
 8000cc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ccc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000cce:	4b20      	ldr	r3, [pc, #128]	; (8000d50 <MX_ADC1_Init+0xec>)
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000cd4:	4b1e      	ldr	r3, [pc, #120]	; (8000d50 <MX_ADC1_Init+0xec>)
 8000cd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cda:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000cdc:	4b1c      	ldr	r3, [pc, #112]	; (8000d50 <MX_ADC1_Init+0xec>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ce2:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <MX_ADC1_Init+0xec>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cea:	4819      	ldr	r0, [pc, #100]	; (8000d50 <MX_ADC1_Init+0xec>)
 8000cec:	f001 fef6 	bl	8002adc <HAL_ADC_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000cf6:	f000 ffc7 	bl	8001c88 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cfe:	f107 031c 	add.w	r3, r7, #28
 8000d02:	4619      	mov	r1, r3
 8000d04:	4812      	ldr	r0, [pc, #72]	; (8000d50 <MX_ADC1_Init+0xec>)
 8000d06:	f003 fb83 	bl	8004410 <HAL_ADCEx_MultiModeConfigChannel>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000d10:	f000 ffba 	bl	8001c88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d14:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <MX_ADC1_Init+0xf4>)
 8000d16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d18:	2306      	movs	r3, #6
 8000d1a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d20:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d24:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d26:	2304      	movs	r3, #4
 8000d28:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d32:	463b      	mov	r3, r7
 8000d34:	4619      	mov	r1, r3
 8000d36:	4806      	ldr	r0, [pc, #24]	; (8000d50 <MX_ADC1_Init+0xec>)
 8000d38:	f002 fbe6 	bl	8003508 <HAL_ADC_ConfigChannel>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000d42:	f000 ffa1 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	3728      	adds	r7, #40	; 0x28
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	2400011c 	.word	0x2400011c
 8000d54:	40022000 	.word	0x40022000
 8000d58:	08600004 	.word	0x08600004

08000d5c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
 8000d70:	615a      	str	r2, [r3, #20]
 8000d72:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d74:	4b2a      	ldr	r3, [pc, #168]	; (8000e20 <MX_ADC2_Init+0xc4>)
 8000d76:	4a2b      	ldr	r2, [pc, #172]	; (8000e24 <MX_ADC2_Init+0xc8>)
 8000d78:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d7a:	4b29      	ldr	r3, [pc, #164]	; (8000e20 <MX_ADC2_Init+0xc4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8000d80:	4b27      	ldr	r3, [pc, #156]	; (8000e20 <MX_ADC2_Init+0xc4>)
 8000d82:	2210      	movs	r2, #16
 8000d84:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d86:	4b26      	ldr	r3, [pc, #152]	; (8000e20 <MX_ADC2_Init+0xc4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d8c:	4b24      	ldr	r3, [pc, #144]	; (8000e20 <MX_ADC2_Init+0xc4>)
 8000d8e:	2204      	movs	r2, #4
 8000d90:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d92:	4b23      	ldr	r3, [pc, #140]	; (8000e20 <MX_ADC2_Init+0xc4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d98:	4b21      	ldr	r3, [pc, #132]	; (8000e20 <MX_ADC2_Init+0xc4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000d9e:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <MX_ADC2_Init+0xc4>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000da4:	4b1e      	ldr	r3, [pc, #120]	; (8000e20 <MX_ADC2_Init+0xc4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000daa:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <MX_ADC2_Init+0xc4>)
 8000dac:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000db0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000db2:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <MX_ADC2_Init+0xc4>)
 8000db4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000db8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000dba:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <MX_ADC2_Init+0xc4>)
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000dc0:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <MX_ADC2_Init+0xc4>)
 8000dc2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dc6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000dc8:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <MX_ADC2_Init+0xc4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000dce:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <MX_ADC2_Init+0xc4>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000dd6:	4812      	ldr	r0, [pc, #72]	; (8000e20 <MX_ADC2_Init+0xc4>)
 8000dd8:	f001 fe80 	bl	8002adc <HAL_ADC_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000de2:	f000 ff51 	bl	8001c88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <MX_ADC2_Init+0xcc>)
 8000de8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dea:	2306      	movs	r3, #6
 8000dec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000dee:	2301      	movs	r3, #1
 8000df0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000df2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000df6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000df8:	2304      	movs	r3, #4
 8000dfa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	4619      	mov	r1, r3
 8000e08:	4805      	ldr	r0, [pc, #20]	; (8000e20 <MX_ADC2_Init+0xc4>)
 8000e0a:	f002 fb7d 	bl	8003508 <HAL_ADC_ConfigChannel>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8000e14:	f000 ff38 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	3720      	adds	r7, #32
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	24000180 	.word	0x24000180
 8000e24:	40022100 	.word	0x40022100
 8000e28:	19200040 	.word	0x19200040

08000e2c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b088      	sub	sp, #32
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
 8000e40:	615a      	str	r2, [r3, #20]
 8000e42:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000e44:	4b2a      	ldr	r3, [pc, #168]	; (8000ef0 <MX_ADC3_Init+0xc4>)
 8000e46:	4a2b      	ldr	r2, [pc, #172]	; (8000ef4 <MX_ADC3_Init+0xc8>)
 8000e48:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e4a:	4b29      	ldr	r3, [pc, #164]	; (8000ef0 <MX_ADC3_Init+0xc4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_8B;
 8000e50:	4b27      	ldr	r3, [pc, #156]	; (8000ef0 <MX_ADC3_Init+0xc4>)
 8000e52:	2210      	movs	r2, #16
 8000e54:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e56:	4b26      	ldr	r3, [pc, #152]	; (8000ef0 <MX_ADC3_Init+0xc4>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e5c:	4b24      	ldr	r3, [pc, #144]	; (8000ef0 <MX_ADC3_Init+0xc4>)
 8000e5e:	2204      	movs	r2, #4
 8000e60:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000e62:	4b23      	ldr	r3, [pc, #140]	; (8000ef0 <MX_ADC3_Init+0xc4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e68:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <MX_ADC3_Init+0xc4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000e6e:	4b20      	ldr	r3, [pc, #128]	; (8000ef0 <MX_ADC3_Init+0xc4>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e74:	4b1e      	ldr	r3, [pc, #120]	; (8000ef0 <MX_ADC3_Init+0xc4>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000e7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ef0 <MX_ADC3_Init+0xc4>)
 8000e7c:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000e80:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e82:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <MX_ADC3_Init+0xc4>)
 8000e84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e88:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000e8a:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <MX_ADC3_Init+0xc4>)
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e90:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <MX_ADC3_Init+0xc4>)
 8000e92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e96:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e98:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <MX_ADC3_Init+0xc4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000e9e:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <MX_ADC3_Init+0xc4>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ea6:	4812      	ldr	r0, [pc, #72]	; (8000ef0 <MX_ADC3_Init+0xc4>)
 8000ea8:	f001 fe18 	bl	8002adc <HAL_ADC_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8000eb2:	f000 fee9 	bl	8001c88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eba:	2306      	movs	r3, #6
 8000ebc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ec2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ec6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ec8:	2304      	movs	r3, #4
 8000eca:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <MX_ADC3_Init+0xc4>)
 8000eda:	f002 fb15 	bl	8003508 <HAL_ADC_ConfigChannel>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_ADC3_Init+0xbc>
  {
    Error_Handler();
 8000ee4:	f000 fed0 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000ee8:	bf00      	nop
 8000eea:	3720      	adds	r7, #32
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	240001e4 	.word	0x240001e4
 8000ef4:	58026000 	.word	0x58026000

08000ef8 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000efc:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <MX_COMP1_Init+0x54>)
 8000efe:	4a14      	ldr	r2, [pc, #80]	; (8000f50 <MX_COMP1_Init+0x58>)
 8000f00:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 8000f02:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <MX_COMP1_Init+0x54>)
 8000f04:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f08:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <MX_COMP1_Init+0x54>)
 8000f0c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000f10:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <MX_COMP1_Init+0x54>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <MX_COMP1_Init+0x54>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <MX_COMP1_Init+0x54>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <MX_COMP1_Init+0x54>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000f2a:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <MX_COMP1_Init+0x54>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <MX_COMP1_Init+0x54>)
 8000f32:	2211      	movs	r2, #17
 8000f34:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000f36:	4805      	ldr	r0, [pc, #20]	; (8000f4c <MX_COMP1_Init+0x54>)
 8000f38:	f003 fb48 	bl	80045cc <HAL_COMP_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_COMP1_Init+0x4e>
  {
    Error_Handler();
 8000f42:	f000 fea1 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	240003b0 	.word	0x240003b0
 8000f50:	5800380c 	.word	0x5800380c

08000f54 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <MX_COMP2_Init+0x50>)
 8000f5a:	4a13      	ldr	r2, [pc, #76]	; (8000fa8 <MX_COMP2_Init+0x54>)
 8000f5c:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <MX_COMP2_Init+0x50>)
 8000f60:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f64:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 8000f66:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <MX_COMP2_Init+0x50>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <MX_COMP2_Init+0x50>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <MX_COMP2_Init+0x50>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000f78:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <MX_COMP2_Init+0x50>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <MX_COMP2_Init+0x50>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000f84:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <MX_COMP2_Init+0x50>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <MX_COMP2_Init+0x50>)
 8000f8c:	2211      	movs	r2, #17
 8000f8e:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000f90:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <MX_COMP2_Init+0x50>)
 8000f92:	f003 fb1b 	bl	80045cc <HAL_COMP_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_COMP2_Init+0x4c>
  {
    Error_Handler();
 8000f9c:	f000 fe74 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	240003dc 	.word	0x240003dc
 8000fa8:	58003810 	.word	0x58003810

08000fac <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	; 0x28
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	2224      	movs	r2, #36	; 0x24
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f012 f819 	bl	8012ff0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000fbe:	4b12      	ldr	r3, [pc, #72]	; (8001008 <MX_DAC1_Init+0x5c>)
 8000fc0:	4a12      	ldr	r2, [pc, #72]	; (800100c <MX_DAC1_Init+0x60>)
 8000fc2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000fc4:	4810      	ldr	r0, [pc, #64]	; (8001008 <MX_DAC1_Init+0x5c>)
 8000fc6:	f003 fee3 	bl	8004d90 <HAL_DAC_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000fd0:	f000 fe5a 	bl	8001c88 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	2200      	movs	r2, #0
 8000fec:	4619      	mov	r1, r3
 8000fee:	4806      	ldr	r0, [pc, #24]	; (8001008 <MX_DAC1_Init+0x5c>)
 8000ff0:	f003 ff68 	bl	8004ec4 <HAL_DAC_ConfigChannel>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000ffa:	f000 fe45 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000ffe:	bf00      	nop
 8001000:	3728      	adds	r7, #40	; 0x28
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	24000408 	.word	0x24000408
 800100c:	40007400 	.word	0x40007400

08001010 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b096      	sub	sp, #88	; 0x58
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001016:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001022:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	611a      	str	r2, [r3, #16]
 8001032:	615a      	str	r2, [r3, #20]
 8001034:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	222c      	movs	r2, #44	; 0x2c
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f011 ffd7 	bl	8012ff0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001042:	4b37      	ldr	r3, [pc, #220]	; (8001120 <MX_TIM1_Init+0x110>)
 8001044:	4a37      	ldr	r2, [pc, #220]	; (8001124 <MX_TIM1_Init+0x114>)
 8001046:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001048:	4b35      	ldr	r3, [pc, #212]	; (8001120 <MX_TIM1_Init+0x110>)
 800104a:	2200      	movs	r2, #0
 800104c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104e:	4b34      	ldr	r3, [pc, #208]	; (8001120 <MX_TIM1_Init+0x110>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 48 - 1;
 8001054:	4b32      	ldr	r3, [pc, #200]	; (8001120 <MX_TIM1_Init+0x110>)
 8001056:	222f      	movs	r2, #47	; 0x2f
 8001058:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105a:	4b31      	ldr	r3, [pc, #196]	; (8001120 <MX_TIM1_Init+0x110>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001060:	4b2f      	ldr	r3, [pc, #188]	; (8001120 <MX_TIM1_Init+0x110>)
 8001062:	2200      	movs	r2, #0
 8001064:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001066:	4b2e      	ldr	r3, [pc, #184]	; (8001120 <MX_TIM1_Init+0x110>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800106c:	482c      	ldr	r0, [pc, #176]	; (8001120 <MX_TIM1_Init+0x110>)
 800106e:	f00b fc21 	bl	800c8b4 <HAL_TIM_PWM_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001078:	f000 fe06 	bl	8001c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800107c:	2320      	movs	r3, #32
 800107e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001080:	2300      	movs	r3, #0
 8001082:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001084:	2300      	movs	r3, #0
 8001086:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001088:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800108c:	4619      	mov	r1, r3
 800108e:	4824      	ldr	r0, [pc, #144]	; (8001120 <MX_TIM1_Init+0x110>)
 8001090:	f00c fbfe 	bl	800d890 <HAL_TIMEx_MasterConfigSynchronization>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800109a:	f000 fdf5 	bl	8001c88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800109e:	2360      	movs	r3, #96	; 0x60
 80010a0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a6:	2300      	movs	r3, #0
 80010a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010aa:	2300      	movs	r3, #0
 80010ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010b2:	2300      	movs	r3, #0
 80010b4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010b6:	2300      	movs	r3, #0
 80010b8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010be:	2200      	movs	r2, #0
 80010c0:	4619      	mov	r1, r3
 80010c2:	4817      	ldr	r0, [pc, #92]	; (8001120 <MX_TIM1_Init+0x110>)
 80010c4:	f00b ff12 	bl	800ceec <HAL_TIM_PWM_ConfigChannel>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80010ce:	f000 fddb 	bl	8001c88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010fe:	2300      	movs	r3, #0
 8001100:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	4619      	mov	r1, r3
 8001106:	4806      	ldr	r0, [pc, #24]	; (8001120 <MX_TIM1_Init+0x110>)
 8001108:	f00c fc50 	bl	800d9ac <HAL_TIMEx_ConfigBreakDeadTime>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001112:	f000 fdb9 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	3758      	adds	r7, #88	; 0x58
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	2400041c 	.word	0x2400041c
 8001124:	40010000 	.word	0x40010000

08001128 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800112c:	4b10      	ldr	r3, [pc, #64]	; (8001170 <MX_TIM16_Init+0x48>)
 800112e:	4a11      	ldr	r2, [pc, #68]	; (8001174 <MX_TIM16_Init+0x4c>)
 8001130:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2000 - 1;
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <MX_TIM16_Init+0x48>)
 8001134:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001138:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113a:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <MX_TIM16_Init+0x48>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2000 - 1;
 8001140:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <MX_TIM16_Init+0x48>)
 8001142:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001146:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MX_TIM16_Init+0x48>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <MX_TIM16_Init+0x48>)
 8001150:	2200      	movs	r2, #0
 8001152:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <MX_TIM16_Init+0x48>)
 8001156:	2200      	movs	r2, #0
 8001158:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <MX_TIM16_Init+0x48>)
 800115c:	f00b fada 	bl	800c714 <HAL_TIM_Base_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001166:	f000 fd8f 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	24000468 	.word	0x24000468
 8001174:	40014400 	.word	0x40014400

08001178 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800117c:	4b22      	ldr	r3, [pc, #136]	; (8001208 <MX_USART3_UART_Init+0x90>)
 800117e:	4a23      	ldr	r2, [pc, #140]	; (800120c <MX_USART3_UART_Init+0x94>)
 8001180:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001182:	4b21      	ldr	r3, [pc, #132]	; (8001208 <MX_USART3_UART_Init+0x90>)
 8001184:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001188:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800118a:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <MX_USART3_UART_Init+0x90>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001190:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <MX_USART3_UART_Init+0x90>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001196:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <MX_USART3_UART_Init+0x90>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 800119c:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <MX_USART3_UART_Init+0x90>)
 800119e:	2208      	movs	r2, #8
 80011a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <MX_USART3_UART_Init+0x90>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a8:	4b17      	ldr	r3, [pc, #92]	; (8001208 <MX_USART3_UART_Init+0x90>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ae:	4b16      	ldr	r3, [pc, #88]	; (8001208 <MX_USART3_UART_Init+0x90>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011b4:	4b14      	ldr	r3, [pc, #80]	; (8001208 <MX_USART3_UART_Init+0x90>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <MX_USART3_UART_Init+0x90>)
 80011bc:	2200      	movs	r2, #0
 80011be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011c0:	4811      	ldr	r0, [pc, #68]	; (8001208 <MX_USART3_UART_Init+0x90>)
 80011c2:	f00c fc8f 	bl	800dae4 <HAL_UART_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80011cc:	f000 fd5c 	bl	8001c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011d0:	2100      	movs	r1, #0
 80011d2:	480d      	ldr	r0, [pc, #52]	; (8001208 <MX_USART3_UART_Init+0x90>)
 80011d4:	f00d fc2c 	bl	800ea30 <HAL_UARTEx_SetTxFifoThreshold>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80011de:	f000 fd53 	bl	8001c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011e2:	2100      	movs	r1, #0
 80011e4:	4808      	ldr	r0, [pc, #32]	; (8001208 <MX_USART3_UART_Init+0x90>)
 80011e6:	f00d fc61 	bl	800eaac <HAL_UARTEx_SetRxFifoThreshold>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80011f0:	f000 fd4a 	bl	8001c88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80011f4:	4804      	ldr	r0, [pc, #16]	; (8001208 <MX_USART3_UART_Init+0x90>)
 80011f6:	f00d fbe2 	bl	800e9be <HAL_UARTEx_DisableFifoMode>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001200:	f000 fd42 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	240004b4 	.word	0x240004b4
 800120c:	40004800 	.word	0x40004800

08001210 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001216:	4b35      	ldr	r3, [pc, #212]	; (80012ec <MX_DMA_Init+0xdc>)
 8001218:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800121c:	4a33      	ldr	r2, [pc, #204]	; (80012ec <MX_DMA_Init+0xdc>)
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001226:	4b31      	ldr	r3, [pc, #196]	; (80012ec <MX_DMA_Init+0xdc>)
 8001228:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001234:	4b2d      	ldr	r3, [pc, #180]	; (80012ec <MX_DMA_Init+0xdc>)
 8001236:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800123a:	4a2c      	ldr	r2, [pc, #176]	; (80012ec <MX_DMA_Init+0xdc>)
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001244:	4b29      	ldr	r3, [pc, #164]	; (80012ec <MX_DMA_Init+0xdc>)
 8001246:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	603b      	str	r3, [r7, #0]
 8001250:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8001252:	4b27      	ldr	r3, [pc, #156]	; (80012f0 <MX_DMA_Init+0xe0>)
 8001254:	4a27      	ldr	r2, [pc, #156]	; (80012f4 <MX_DMA_Init+0xe4>)
 8001256:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Request = DMA_REQUEST_MEM2MEM;
 8001258:	4b25      	ldr	r3, [pc, #148]	; (80012f0 <MX_DMA_Init+0xe0>)
 800125a:	2200      	movs	r2, #0
 800125c:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800125e:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <MX_DMA_Init+0xe0>)
 8001260:	2280      	movs	r2, #128	; 0x80
 8001262:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8001264:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <MX_DMA_Init+0xe0>)
 8001266:	f44f 7200 	mov.w	r2, #512	; 0x200
 800126a:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 800126c:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <MX_DMA_Init+0xe0>)
 800126e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001272:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001274:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <MX_DMA_Init+0xe0>)
 8001276:	2200      	movs	r2, #0
 8001278:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <MX_DMA_Init+0xe0>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8001280:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <MX_DMA_Init+0xe0>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 8001286:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <MX_DMA_Init+0xe0>)
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800128c:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <MX_DMA_Init+0xe0>)
 800128e:	2204      	movs	r2, #4
 8001290:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001292:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <MX_DMA_Init+0xe0>)
 8001294:	2203      	movs	r2, #3
 8001296:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <MX_DMA_Init+0xe0>)
 800129a:	2200      	movs	r2, #0
 800129c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800129e:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <MX_DMA_Init+0xe0>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 80012a4:	4812      	ldr	r0, [pc, #72]	; (80012f0 <MX_DMA_Init+0xe0>)
 80012a6:	f003 ff3d 	bl	8005124 <HAL_DMA_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_DMA_Init+0xa4>
  {
    Error_Handler( );
 80012b0:	f000 fcea 	bl	8001c88 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2100      	movs	r1, #0
 80012b8:	200b      	movs	r0, #11
 80012ba:	f003 fd20 	bl	8004cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80012be:	200b      	movs	r0, #11
 80012c0:	f003 fd37 	bl	8004d32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2100      	movs	r1, #0
 80012c8:	200c      	movs	r0, #12
 80012ca:	f003 fd18 	bl	8004cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80012ce:	200c      	movs	r0, #12
 80012d0:	f003 fd2f 	bl	8004d32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80012d4:	2200      	movs	r2, #0
 80012d6:	2100      	movs	r1, #0
 80012d8:	200d      	movs	r0, #13
 80012da:	f003 fd10 	bl	8004cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80012de:	200d      	movs	r0, #13
 80012e0:	f003 fd27 	bl	8004d32 <HAL_NVIC_EnableIRQ>

}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	58024400 	.word	0x58024400
 80012f0:	24000544 	.word	0x24000544
 80012f4:	40020410 	.word	0x40020410

080012f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08e      	sub	sp, #56	; 0x38
 80012fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130e:	4b87      	ldr	r3, [pc, #540]	; (800152c <MX_GPIO_Init+0x234>)
 8001310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001314:	4a85      	ldr	r2, [pc, #532]	; (800152c <MX_GPIO_Init+0x234>)
 8001316:	f043 0304 	orr.w	r3, r3, #4
 800131a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800131e:	4b83      	ldr	r3, [pc, #524]	; (800152c <MX_GPIO_Init+0x234>)
 8001320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	623b      	str	r3, [r7, #32]
 800132a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800132c:	4b7f      	ldr	r3, [pc, #508]	; (800152c <MX_GPIO_Init+0x234>)
 800132e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001332:	4a7e      	ldr	r2, [pc, #504]	; (800152c <MX_GPIO_Init+0x234>)
 8001334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001338:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800133c:	4b7b      	ldr	r3, [pc, #492]	; (800152c <MX_GPIO_Init+0x234>)
 800133e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001346:	61fb      	str	r3, [r7, #28]
 8001348:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134a:	4b78      	ldr	r3, [pc, #480]	; (800152c <MX_GPIO_Init+0x234>)
 800134c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001350:	4a76      	ldr	r2, [pc, #472]	; (800152c <MX_GPIO_Init+0x234>)
 8001352:	f043 0302 	orr.w	r3, r3, #2
 8001356:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800135a:	4b74      	ldr	r3, [pc, #464]	; (800152c <MX_GPIO_Init+0x234>)
 800135c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	61bb      	str	r3, [r7, #24]
 8001366:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001368:	4b70      	ldr	r3, [pc, #448]	; (800152c <MX_GPIO_Init+0x234>)
 800136a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136e:	4a6f      	ldr	r2, [pc, #444]	; (800152c <MX_GPIO_Init+0x234>)
 8001370:	f043 0320 	orr.w	r3, r3, #32
 8001374:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001378:	4b6c      	ldr	r3, [pc, #432]	; (800152c <MX_GPIO_Init+0x234>)
 800137a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800137e:	f003 0320 	and.w	r3, r3, #32
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001386:	4b69      	ldr	r3, [pc, #420]	; (800152c <MX_GPIO_Init+0x234>)
 8001388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800138c:	4a67      	ldr	r2, [pc, #412]	; (800152c <MX_GPIO_Init+0x234>)
 800138e:	f043 0310 	orr.w	r3, r3, #16
 8001392:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001396:	4b65      	ldr	r3, [pc, #404]	; (800152c <MX_GPIO_Init+0x234>)
 8001398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800139c:	f003 0310 	and.w	r3, r3, #16
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a4:	4b61      	ldr	r3, [pc, #388]	; (800152c <MX_GPIO_Init+0x234>)
 80013a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013aa:	4a60      	ldr	r2, [pc, #384]	; (800152c <MX_GPIO_Init+0x234>)
 80013ac:	f043 0308 	orr.w	r3, r3, #8
 80013b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013b4:	4b5d      	ldr	r3, [pc, #372]	; (800152c <MX_GPIO_Init+0x234>)
 80013b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ba:	f003 0308 	and.w	r3, r3, #8
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013c2:	4b5a      	ldr	r3, [pc, #360]	; (800152c <MX_GPIO_Init+0x234>)
 80013c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c8:	4a58      	ldr	r2, [pc, #352]	; (800152c <MX_GPIO_Init+0x234>)
 80013ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013d2:	4b56      	ldr	r3, [pc, #344]	; (800152c <MX_GPIO_Init+0x234>)
 80013d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e0:	4b52      	ldr	r3, [pc, #328]	; (800152c <MX_GPIO_Init+0x234>)
 80013e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e6:	4a51      	ldr	r2, [pc, #324]	; (800152c <MX_GPIO_Init+0x234>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013f0:	4b4e      	ldr	r3, [pc, #312]	; (800152c <MX_GPIO_Init+0x234>)
 80013f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	f244 0101 	movw	r1, #16385	; 0x4001
 8001404:	484a      	ldr	r0, [pc, #296]	; (8001530 <MX_GPIO_Init+0x238>)
 8001406:	f006 fc33 	bl	8007c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|MUX_2_A_Pin, GPIO_PIN_RESET);
 800140a:	2200      	movs	r2, #0
 800140c:	f240 4104 	movw	r1, #1028	; 0x404
 8001410:	4848      	ldr	r0, [pc, #288]	; (8001534 <MX_GPIO_Init+0x23c>)
 8001412:	f006 fc2d 	bl	8007c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MUX_2_C_Pin|MUX_2_B_Pin, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800141c:	4846      	ldr	r0, [pc, #280]	; (8001538 <MX_GPIO_Init+0x240>)
 800141e:	f006 fc27 	bl	8007c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MUX_1_A_Pin|MUX_1_B_Pin|MUX_1_C_Pin, GPIO_PIN_RESET);
 8001422:	2200      	movs	r2, #0
 8001424:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001428:	4844      	ldr	r0, [pc, #272]	; (800153c <MX_GPIO_Init+0x244>)
 800142a:	f006 fc21 	bl	8007c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	2102      	movs	r1, #2
 8001432:	4843      	ldr	r0, [pc, #268]	; (8001540 <MX_GPIO_Init+0x248>)
 8001434:	f006 fc1c 	bl	8007c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001438:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800143e:	2300      	movs	r3, #0
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800144a:	4619      	mov	r1, r3
 800144c:	483b      	ldr	r0, [pc, #236]	; (800153c <MX_GPIO_Init+0x244>)
 800144e:	f006 fa5f 	bl	8007910 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001452:	f244 0301 	movw	r3, #16385	; 0x4001
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001458:	2301      	movs	r3, #1
 800145a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2300      	movs	r3, #0
 8001462:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001468:	4619      	mov	r1, r3
 800146a:	4831      	ldr	r0, [pc, #196]	; (8001530 <MX_GPIO_Init+0x238>)
 800146c:	f006 fa50 	bl	8007910 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin MUX_2_A_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|MUX_2_A_Pin;
 8001470:	f240 4304 	movw	r3, #1028	; 0x404
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001476:	2301      	movs	r3, #1
 8001478:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147e:	2300      	movs	r3, #0
 8001480:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	4619      	mov	r1, r3
 8001488:	482a      	ldr	r0, [pc, #168]	; (8001534 <MX_GPIO_Init+0x23c>)
 800148a:	f006 fa41 	bl	8007910 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001492:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800149c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a0:	4619      	mov	r1, r3
 80014a2:	4825      	ldr	r0, [pc, #148]	; (8001538 <MX_GPIO_Init+0x240>)
 80014a4:	f006 fa34 	bl	8007910 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX_2_C_Pin MUX_2_B_Pin */
  GPIO_InitStruct.Pin = MUX_2_C_Pin|MUX_2_B_Pin;
 80014a8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ae:	2301      	movs	r3, #1
 80014b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b6:	2300      	movs	r3, #0
 80014b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014be:	4619      	mov	r1, r3
 80014c0:	481d      	ldr	r0, [pc, #116]	; (8001538 <MX_GPIO_Init+0x240>)
 80014c2:	f006 fa25 	bl	8007910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80014d8:	2300      	movs	r3, #0
 80014da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e0:	4619      	mov	r1, r3
 80014e2:	4816      	ldr	r0, [pc, #88]	; (800153c <MX_GPIO_Init+0x244>)
 80014e4:	f006 fa14 	bl	8007910 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX_1_A_Pin MUX_1_B_Pin MUX_1_C_Pin */
  GPIO_InitStruct.Pin = MUX_1_A_Pin|MUX_1_B_Pin|MUX_1_C_Pin;
 80014e8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fe:	4619      	mov	r1, r3
 8001500:	480e      	ldr	r0, [pc, #56]	; (800153c <MX_GPIO_Init+0x244>)
 8001502:	f006 fa05 	bl	8007910 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001506:	2302      	movs	r3, #2
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150a:	2301      	movs	r3, #1
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151a:	4619      	mov	r1, r3
 800151c:	4808      	ldr	r0, [pc, #32]	; (8001540 <MX_GPIO_Init+0x248>)
 800151e:	f006 f9f7 	bl	8007910 <HAL_GPIO_Init>

}
 8001522:	bf00      	nop
 8001524:	3738      	adds	r7, #56	; 0x38
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	58024400 	.word	0x58024400
 8001530:	58020400 	.word	0x58020400
 8001534:	58020c00 	.word	0x58020c00
 8001538:	58021800 	.word	0x58021800
 800153c:	58020800 	.word	0x58020800
 8001540:	58021000 	.word	0x58021000

08001544 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over (60Hz)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim16)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a0d      	ldr	r2, [pc, #52]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d112      	bne.n	800157a <HAL_TIM_PeriodElapsedCallback+0x36>
	{

		if (trigger_flag && ready_to_send_flag)
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00e      	beq.n	800157a <HAL_TIM_PeriodElapsedCallback+0x36>
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d00a      	beq.n	800157a <HAL_TIM_PeriodElapsedCallback+0x36>
		{
			CDC_Transmit_FS((uint8_t*)data_to_send, DATA_TO_SEND_LEN * 3);
 8001564:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001568:	4809      	ldr	r0, [pc, #36]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800156a:	f011 f873 	bl	8012654 <CDC_Transmit_FS>
			trigger_flag = 0;
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
			ready_to_send_flag = 0;
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]

		}

	}
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	24000468 	.word	0x24000468
 8001588:	24066e5c 	.word	0x24066e5c
 800158c:	24066e64 	.word	0x24066e64
 8001590:	24066e70 	.word	0x24066e70

08001594 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a11      	ldr	r2, [pc, #68]	; (80015e4 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d105      	bne.n	80015b0 <HAL_ADC_ConvHalfCpltCallback+0x1c>
	{
		buf_A_quadrant++;
 80015a4:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <HAL_ADC_ConvHalfCpltCallback+0x54>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	3301      	adds	r3, #1
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <HAL_ADC_ConvHalfCpltCallback+0x54>)
 80015ae:	701a      	strb	r2, [r3, #0]
	}
	if (hadc == &hadc2)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <HAL_ADC_ConvHalfCpltCallback+0x58>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d105      	bne.n	80015c4 <HAL_ADC_ConvHalfCpltCallback+0x30>
	{
		buf_B_quadrant++;
 80015b8:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	3301      	adds	r3, #1
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 80015c2:	701a      	strb	r2, [r3, #0]
	}
	if (hadc == &hadc3)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a0b      	ldr	r2, [pc, #44]	; (80015f4 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d105      	bne.n	80015d8 <HAL_ADC_ConvHalfCpltCallback+0x44>
	{
		buf_C_quadrant++;
 80015cc:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	3301      	adds	r3, #1
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 80015d6:	701a      	strb	r2, [r3, #0]
	}
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	2400011c 	.word	0x2400011c
 80015e8:	24066e6c 	.word	0x24066e6c
 80015ec:	24000180 	.word	0x24000180
 80015f0:	24066e6d 	.word	0x24066e6d
 80015f4:	240001e4 	.word	0x240001e4
 80015f8:	24066e6e 	.word	0x24066e6e

080015fc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

	if (hadc == &hadc1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a3c      	ldr	r2, [pc, #240]	; (80016f8 <HAL_ADC_ConvCpltCallback+0xfc>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d122      	bne.n	8001652 <HAL_ADC_ConvCpltCallback+0x56>
	{
		buf_A_quadrant++;
 800160c:	4b3b      	ldr	r3, [pc, #236]	; (80016fc <HAL_ADC_ConvCpltCallback+0x100>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	3301      	adds	r3, #1
 8001612:	b2da      	uxtb	r2, r3
 8001614:	4b39      	ldr	r3, [pc, #228]	; (80016fc <HAL_ADC_ConvCpltCallback+0x100>)
 8001616:	701a      	strb	r2, [r3, #0]
		if (buf_A_quadrant == 4)
 8001618:	4b38      	ldr	r3, [pc, #224]	; (80016fc <HAL_ADC_ConvCpltCallback+0x100>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b04      	cmp	r3, #4
 800161e:	d10b      	bne.n	8001638 <HAL_ADC_ConvCpltCallback+0x3c>
		{
			HAL_ADC_Stop_DMA(&hadc1);
 8001620:	4835      	ldr	r0, [pc, #212]	; (80016f8 <HAL_ADC_ConvCpltCallback+0xfc>)
 8001622:	f001 fcc1 	bl	8002fa8 <HAL_ADC_Stop_DMA>
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_Buf_A_1, ADC_HALF_BUF_LEN * 2);
 8001626:	f649 4240 	movw	r2, #40000	; 0x9c40
 800162a:	4935      	ldr	r1, [pc, #212]	; (8001700 <HAL_ADC_ConvCpltCallback+0x104>)
 800162c:	4832      	ldr	r0, [pc, #200]	; (80016f8 <HAL_ADC_ConvCpltCallback+0xfc>)
 800162e:	f001 fbf7 	bl	8002e20 <HAL_ADC_Start_DMA>
			buf_A_quadrant = 0;
 8001632:	4b32      	ldr	r3, [pc, #200]	; (80016fc <HAL_ADC_ConvCpltCallback+0x100>)
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
		}
		if (buf_A_quadrant == 2)
 8001638:	4b30      	ldr	r3, [pc, #192]	; (80016fc <HAL_ADC_ConvCpltCallback+0x100>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d108      	bne.n	8001652 <HAL_ADC_ConvCpltCallback+0x56>
		{
			HAL_ADC_Stop_DMA(&hadc1);
 8001640:	482d      	ldr	r0, [pc, #180]	; (80016f8 <HAL_ADC_ConvCpltCallback+0xfc>)
 8001642:	f001 fcb1 	bl	8002fa8 <HAL_ADC_Stop_DMA>
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_Buf_A_2,  ADC_HALF_BUF_LEN * 2);
 8001646:	f649 4240 	movw	r2, #40000	; 0x9c40
 800164a:	492e      	ldr	r1, [pc, #184]	; (8001704 <HAL_ADC_ConvCpltCallback+0x108>)
 800164c:	482a      	ldr	r0, [pc, #168]	; (80016f8 <HAL_ADC_ConvCpltCallback+0xfc>)
 800164e:	f001 fbe7 	bl	8002e20 <HAL_ADC_Start_DMA>
		}
	}
	if (hadc == &hadc2)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a2c      	ldr	r2, [pc, #176]	; (8001708 <HAL_ADC_ConvCpltCallback+0x10c>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d122      	bne.n	80016a0 <HAL_ADC_ConvCpltCallback+0xa4>
	{
		buf_B_quadrant++;
 800165a:	4b2c      	ldr	r3, [pc, #176]	; (800170c <HAL_ADC_ConvCpltCallback+0x110>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	3301      	adds	r3, #1
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4b2a      	ldr	r3, [pc, #168]	; (800170c <HAL_ADC_ConvCpltCallback+0x110>)
 8001664:	701a      	strb	r2, [r3, #0]
		if (buf_B_quadrant == 4)
 8001666:	4b29      	ldr	r3, [pc, #164]	; (800170c <HAL_ADC_ConvCpltCallback+0x110>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b04      	cmp	r3, #4
 800166c:	d10b      	bne.n	8001686 <HAL_ADC_ConvCpltCallback+0x8a>
		{
			HAL_ADC_Stop_DMA(&hadc2);
 800166e:	4826      	ldr	r0, [pc, #152]	; (8001708 <HAL_ADC_ConvCpltCallback+0x10c>)
 8001670:	f001 fc9a 	bl	8002fa8 <HAL_ADC_Stop_DMA>
			HAL_ADC_Start_DMA(&hadc2, (uint32_t*) ADC_Buf_B_1,  ADC_HALF_BUF_LEN * 2);
 8001674:	f649 4240 	movw	r2, #40000	; 0x9c40
 8001678:	4925      	ldr	r1, [pc, #148]	; (8001710 <HAL_ADC_ConvCpltCallback+0x114>)
 800167a:	4823      	ldr	r0, [pc, #140]	; (8001708 <HAL_ADC_ConvCpltCallback+0x10c>)
 800167c:	f001 fbd0 	bl	8002e20 <HAL_ADC_Start_DMA>
			buf_B_quadrant = 0;
 8001680:	4b22      	ldr	r3, [pc, #136]	; (800170c <HAL_ADC_ConvCpltCallback+0x110>)
 8001682:	2200      	movs	r2, #0
 8001684:	701a      	strb	r2, [r3, #0]
		}
		if (buf_B_quadrant == 2)
 8001686:	4b21      	ldr	r3, [pc, #132]	; (800170c <HAL_ADC_ConvCpltCallback+0x110>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b02      	cmp	r3, #2
 800168c:	d108      	bne.n	80016a0 <HAL_ADC_ConvCpltCallback+0xa4>
		{
			HAL_ADC_Stop_DMA(&hadc2);
 800168e:	481e      	ldr	r0, [pc, #120]	; (8001708 <HAL_ADC_ConvCpltCallback+0x10c>)
 8001690:	f001 fc8a 	bl	8002fa8 <HAL_ADC_Stop_DMA>
			HAL_ADC_Start_DMA(&hadc2, (uint32_t*) ADC_Buf_B_2,  ADC_HALF_BUF_LEN * 2);
 8001694:	f649 4240 	movw	r2, #40000	; 0x9c40
 8001698:	491e      	ldr	r1, [pc, #120]	; (8001714 <HAL_ADC_ConvCpltCallback+0x118>)
 800169a:	481b      	ldr	r0, [pc, #108]	; (8001708 <HAL_ADC_ConvCpltCallback+0x10c>)
 800169c:	f001 fbc0 	bl	8002e20 <HAL_ADC_Start_DMA>
		}
	}
	if (hadc == &hadc3)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a1d      	ldr	r2, [pc, #116]	; (8001718 <HAL_ADC_ConvCpltCallback+0x11c>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d122      	bne.n	80016ee <HAL_ADC_ConvCpltCallback+0xf2>
	{
		buf_C_quadrant++;
 80016a8:	4b1c      	ldr	r3, [pc, #112]	; (800171c <HAL_ADC_ConvCpltCallback+0x120>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	3301      	adds	r3, #1
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	4b1a      	ldr	r3, [pc, #104]	; (800171c <HAL_ADC_ConvCpltCallback+0x120>)
 80016b2:	701a      	strb	r2, [r3, #0]
		if (buf_C_quadrant == 4)
 80016b4:	4b19      	ldr	r3, [pc, #100]	; (800171c <HAL_ADC_ConvCpltCallback+0x120>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d10b      	bne.n	80016d4 <HAL_ADC_ConvCpltCallback+0xd8>
		{
			HAL_ADC_Stop_DMA(&hadc3);
 80016bc:	4816      	ldr	r0, [pc, #88]	; (8001718 <HAL_ADC_ConvCpltCallback+0x11c>)
 80016be:	f001 fc73 	bl	8002fa8 <HAL_ADC_Stop_DMA>
			HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC_Buf_C_1,  ADC_HALF_BUF_LEN * 2);
 80016c2:	f649 4240 	movw	r2, #40000	; 0x9c40
 80016c6:	4916      	ldr	r1, [pc, #88]	; (8001720 <HAL_ADC_ConvCpltCallback+0x124>)
 80016c8:	4813      	ldr	r0, [pc, #76]	; (8001718 <HAL_ADC_ConvCpltCallback+0x11c>)
 80016ca:	f001 fba9 	bl	8002e20 <HAL_ADC_Start_DMA>
			buf_C_quadrant = 0;
 80016ce:	4b13      	ldr	r3, [pc, #76]	; (800171c <HAL_ADC_ConvCpltCallback+0x120>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
		}
		if (buf_C_quadrant == 2)
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <HAL_ADC_ConvCpltCallback+0x120>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d108      	bne.n	80016ee <HAL_ADC_ConvCpltCallback+0xf2>
		{
			HAL_ADC_Stop_DMA(&hadc3);
 80016dc:	480e      	ldr	r0, [pc, #56]	; (8001718 <HAL_ADC_ConvCpltCallback+0x11c>)
 80016de:	f001 fc63 	bl	8002fa8 <HAL_ADC_Stop_DMA>
			HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC_Buf_C_2,  ADC_HALF_BUF_LEN * 2);
 80016e2:	f649 4240 	movw	r2, #40000	; 0x9c40
 80016e6:	490f      	ldr	r1, [pc, #60]	; (8001724 <HAL_ADC_ConvCpltCallback+0x128>)
 80016e8:	480b      	ldr	r0, [pc, #44]	; (8001718 <HAL_ADC_ConvCpltCallback+0x11c>)
 80016ea:	f001 fb99 	bl	8002e20 <HAL_ADC_Start_DMA>
		}
	}

}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	2400011c 	.word	0x2400011c
 80016fc:	24066e6c 	.word	0x24066e6c
 8001700:	240005bc 	.word	0x240005bc
 8001704:	2401da7c 	.word	0x2401da7c
 8001708:	24000180 	.word	0x24000180
 800170c:	24066e6d 	.word	0x24066e6d
 8001710:	2400a1fc 	.word	0x2400a1fc
 8001714:	240276bc 	.word	0x240276bc
 8001718:	240001e4 	.word	0x240001e4
 800171c:	24066e6e 	.word	0x24066e6e
 8001720:	24013e3c 	.word	0x24013e3c
 8001724:	240312fc 	.word	0x240312fc

08001728 <HAL_COMP_TriggerCallback>:

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	//TODO(Attila): event handling
	if (hcomp == &hcomp1 && trigger_flag == 0)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a71      	ldr	r2, [pc, #452]	; (80018f8 <HAL_COMP_TriggerCallback+0x1d0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d16a      	bne.n	800180e <HAL_COMP_TriggerCallback+0xe6>
 8001738:	4b70      	ldr	r3, [pc, #448]	; (80018fc <HAL_COMP_TriggerCallback+0x1d4>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d166      	bne.n	800180e <HAL_COMP_TriggerCallback+0xe6>
	{
		trigger_A_pos = __HAL_DMA_GET_COUNTER(&hdma_adc1);
 8001740:	4b6f      	ldr	r3, [pc, #444]	; (8001900 <HAL_COMP_TriggerCallback+0x1d8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a6f      	ldr	r2, [pc, #444]	; (8001904 <HAL_COMP_TriggerCallback+0x1dc>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d04a      	beq.n	80017e0 <HAL_COMP_TriggerCallback+0xb8>
 800174a:	4b6d      	ldr	r3, [pc, #436]	; (8001900 <HAL_COMP_TriggerCallback+0x1d8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a6e      	ldr	r2, [pc, #440]	; (8001908 <HAL_COMP_TriggerCallback+0x1e0>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d045      	beq.n	80017e0 <HAL_COMP_TriggerCallback+0xb8>
 8001754:	4b6a      	ldr	r3, [pc, #424]	; (8001900 <HAL_COMP_TriggerCallback+0x1d8>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a6c      	ldr	r2, [pc, #432]	; (800190c <HAL_COMP_TriggerCallback+0x1e4>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d040      	beq.n	80017e0 <HAL_COMP_TriggerCallback+0xb8>
 800175e:	4b68      	ldr	r3, [pc, #416]	; (8001900 <HAL_COMP_TriggerCallback+0x1d8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a6b      	ldr	r2, [pc, #428]	; (8001910 <HAL_COMP_TriggerCallback+0x1e8>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d03b      	beq.n	80017e0 <HAL_COMP_TriggerCallback+0xb8>
 8001768:	4b65      	ldr	r3, [pc, #404]	; (8001900 <HAL_COMP_TriggerCallback+0x1d8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a69      	ldr	r2, [pc, #420]	; (8001914 <HAL_COMP_TriggerCallback+0x1ec>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d036      	beq.n	80017e0 <HAL_COMP_TriggerCallback+0xb8>
 8001772:	4b63      	ldr	r3, [pc, #396]	; (8001900 <HAL_COMP_TriggerCallback+0x1d8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a68      	ldr	r2, [pc, #416]	; (8001918 <HAL_COMP_TriggerCallback+0x1f0>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d031      	beq.n	80017e0 <HAL_COMP_TriggerCallback+0xb8>
 800177c:	4b60      	ldr	r3, [pc, #384]	; (8001900 <HAL_COMP_TriggerCallback+0x1d8>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a66      	ldr	r2, [pc, #408]	; (800191c <HAL_COMP_TriggerCallback+0x1f4>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d02c      	beq.n	80017e0 <HAL_COMP_TriggerCallback+0xb8>
 8001786:	4b5e      	ldr	r3, [pc, #376]	; (8001900 <HAL_COMP_TriggerCallback+0x1d8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a65      	ldr	r2, [pc, #404]	; (8001920 <HAL_COMP_TriggerCallback+0x1f8>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d027      	beq.n	80017e0 <HAL_COMP_TriggerCallback+0xb8>
 8001790:	4b5b      	ldr	r3, [pc, #364]	; (8001900 <HAL_COMP_TriggerCallback+0x1d8>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a63      	ldr	r2, [pc, #396]	; (8001924 <HAL_COMP_TriggerCallback+0x1fc>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d022      	beq.n	80017e0 <HAL_COMP_TriggerCallback+0xb8>
 800179a:	4b59      	ldr	r3, [pc, #356]	; (8001900 <HAL_COMP_TriggerCallback+0x1d8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a62      	ldr	r2, [pc, #392]	; (8001928 <HAL_COMP_TriggerCallback+0x200>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d01d      	beq.n	80017e0 <HAL_COMP_TriggerCallback+0xb8>
 80017a4:	4b56      	ldr	r3, [pc, #344]	; (8001900 <HAL_COMP_TriggerCallback+0x1d8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a60      	ldr	r2, [pc, #384]	; (800192c <HAL_COMP_TriggerCallback+0x204>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d018      	beq.n	80017e0 <HAL_COMP_TriggerCallback+0xb8>
 80017ae:	4b54      	ldr	r3, [pc, #336]	; (8001900 <HAL_COMP_TriggerCallback+0x1d8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a5f      	ldr	r2, [pc, #380]	; (8001930 <HAL_COMP_TriggerCallback+0x208>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d013      	beq.n	80017e0 <HAL_COMP_TriggerCallback+0xb8>
 80017b8:	4b51      	ldr	r3, [pc, #324]	; (8001900 <HAL_COMP_TriggerCallback+0x1d8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a5d      	ldr	r2, [pc, #372]	; (8001934 <HAL_COMP_TriggerCallback+0x20c>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d00e      	beq.n	80017e0 <HAL_COMP_TriggerCallback+0xb8>
 80017c2:	4b4f      	ldr	r3, [pc, #316]	; (8001900 <HAL_COMP_TriggerCallback+0x1d8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a5c      	ldr	r2, [pc, #368]	; (8001938 <HAL_COMP_TriggerCallback+0x210>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d009      	beq.n	80017e0 <HAL_COMP_TriggerCallback+0xb8>
 80017cc:	4b4c      	ldr	r3, [pc, #304]	; (8001900 <HAL_COMP_TriggerCallback+0x1d8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a5a      	ldr	r2, [pc, #360]	; (800193c <HAL_COMP_TriggerCallback+0x214>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d004      	beq.n	80017e0 <HAL_COMP_TriggerCallback+0xb8>
 80017d6:	4b4a      	ldr	r3, [pc, #296]	; (8001900 <HAL_COMP_TriggerCallback+0x1d8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a59      	ldr	r2, [pc, #356]	; (8001940 <HAL_COMP_TriggerCallback+0x218>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d104      	bne.n	80017ea <HAL_COMP_TriggerCallback+0xc2>
 80017e0:	4b47      	ldr	r3, [pc, #284]	; (8001900 <HAL_COMP_TriggerCallback+0x1d8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	e003      	b.n	80017f2 <HAL_COMP_TriggerCallback+0xca>
 80017ea:	4b45      	ldr	r3, [pc, #276]	; (8001900 <HAL_COMP_TriggerCallback+0x1d8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	4a54      	ldr	r2, [pc, #336]	; (8001944 <HAL_COMP_TriggerCallback+0x21c>)
 80017f4:	8013      	strh	r3, [r2, #0]
		if (options->trigger_channel == 1)
 80017f6:	4b54      	ldr	r3, [pc, #336]	; (8001948 <HAL_COMP_TriggerCallback+0x220>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	799b      	ldrb	r3, [r3, #6]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d106      	bne.n	800180e <HAL_COMP_TriggerCallback+0xe6>
		{
			trigger_flag = 1;
 8001800:	4b3e      	ldr	r3, [pc, #248]	; (80018fc <HAL_COMP_TriggerCallback+0x1d4>)
 8001802:	2201      	movs	r2, #1
 8001804:	701a      	strb	r2, [r3, #0]
			trigger_quadrant = buf_A_quadrant;
 8001806:	4b51      	ldr	r3, [pc, #324]	; (800194c <HAL_COMP_TriggerCallback+0x224>)
 8001808:	781a      	ldrb	r2, [r3, #0]
 800180a:	4b51      	ldr	r3, [pc, #324]	; (8001950 <HAL_COMP_TriggerCallback+0x228>)
 800180c:	701a      	strb	r2, [r3, #0]
		}

	}
	if (hcomp == &hcomp2 && trigger_flag == 0)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a50      	ldr	r2, [pc, #320]	; (8001954 <HAL_COMP_TriggerCallback+0x22c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d16a      	bne.n	80018ec <HAL_COMP_TriggerCallback+0x1c4>
 8001816:	4b39      	ldr	r3, [pc, #228]	; (80018fc <HAL_COMP_TriggerCallback+0x1d4>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d166      	bne.n	80018ec <HAL_COMP_TriggerCallback+0x1c4>
	{
		trigger_B_pos = __HAL_DMA_GET_COUNTER(&hdma_adc2);
 800181e:	4b4e      	ldr	r3, [pc, #312]	; (8001958 <HAL_COMP_TriggerCallback+0x230>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a38      	ldr	r2, [pc, #224]	; (8001904 <HAL_COMP_TriggerCallback+0x1dc>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d04a      	beq.n	80018be <HAL_COMP_TriggerCallback+0x196>
 8001828:	4b4b      	ldr	r3, [pc, #300]	; (8001958 <HAL_COMP_TriggerCallback+0x230>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a36      	ldr	r2, [pc, #216]	; (8001908 <HAL_COMP_TriggerCallback+0x1e0>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d045      	beq.n	80018be <HAL_COMP_TriggerCallback+0x196>
 8001832:	4b49      	ldr	r3, [pc, #292]	; (8001958 <HAL_COMP_TriggerCallback+0x230>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a35      	ldr	r2, [pc, #212]	; (800190c <HAL_COMP_TriggerCallback+0x1e4>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d040      	beq.n	80018be <HAL_COMP_TriggerCallback+0x196>
 800183c:	4b46      	ldr	r3, [pc, #280]	; (8001958 <HAL_COMP_TriggerCallback+0x230>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a33      	ldr	r2, [pc, #204]	; (8001910 <HAL_COMP_TriggerCallback+0x1e8>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d03b      	beq.n	80018be <HAL_COMP_TriggerCallback+0x196>
 8001846:	4b44      	ldr	r3, [pc, #272]	; (8001958 <HAL_COMP_TriggerCallback+0x230>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a32      	ldr	r2, [pc, #200]	; (8001914 <HAL_COMP_TriggerCallback+0x1ec>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d036      	beq.n	80018be <HAL_COMP_TriggerCallback+0x196>
 8001850:	4b41      	ldr	r3, [pc, #260]	; (8001958 <HAL_COMP_TriggerCallback+0x230>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a30      	ldr	r2, [pc, #192]	; (8001918 <HAL_COMP_TriggerCallback+0x1f0>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d031      	beq.n	80018be <HAL_COMP_TriggerCallback+0x196>
 800185a:	4b3f      	ldr	r3, [pc, #252]	; (8001958 <HAL_COMP_TriggerCallback+0x230>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a2f      	ldr	r2, [pc, #188]	; (800191c <HAL_COMP_TriggerCallback+0x1f4>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d02c      	beq.n	80018be <HAL_COMP_TriggerCallback+0x196>
 8001864:	4b3c      	ldr	r3, [pc, #240]	; (8001958 <HAL_COMP_TriggerCallback+0x230>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a2d      	ldr	r2, [pc, #180]	; (8001920 <HAL_COMP_TriggerCallback+0x1f8>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d027      	beq.n	80018be <HAL_COMP_TriggerCallback+0x196>
 800186e:	4b3a      	ldr	r3, [pc, #232]	; (8001958 <HAL_COMP_TriggerCallback+0x230>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a2c      	ldr	r2, [pc, #176]	; (8001924 <HAL_COMP_TriggerCallback+0x1fc>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d022      	beq.n	80018be <HAL_COMP_TriggerCallback+0x196>
 8001878:	4b37      	ldr	r3, [pc, #220]	; (8001958 <HAL_COMP_TriggerCallback+0x230>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a2a      	ldr	r2, [pc, #168]	; (8001928 <HAL_COMP_TriggerCallback+0x200>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d01d      	beq.n	80018be <HAL_COMP_TriggerCallback+0x196>
 8001882:	4b35      	ldr	r3, [pc, #212]	; (8001958 <HAL_COMP_TriggerCallback+0x230>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a29      	ldr	r2, [pc, #164]	; (800192c <HAL_COMP_TriggerCallback+0x204>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d018      	beq.n	80018be <HAL_COMP_TriggerCallback+0x196>
 800188c:	4b32      	ldr	r3, [pc, #200]	; (8001958 <HAL_COMP_TriggerCallback+0x230>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a27      	ldr	r2, [pc, #156]	; (8001930 <HAL_COMP_TriggerCallback+0x208>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d013      	beq.n	80018be <HAL_COMP_TriggerCallback+0x196>
 8001896:	4b30      	ldr	r3, [pc, #192]	; (8001958 <HAL_COMP_TriggerCallback+0x230>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a26      	ldr	r2, [pc, #152]	; (8001934 <HAL_COMP_TriggerCallback+0x20c>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d00e      	beq.n	80018be <HAL_COMP_TriggerCallback+0x196>
 80018a0:	4b2d      	ldr	r3, [pc, #180]	; (8001958 <HAL_COMP_TriggerCallback+0x230>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a24      	ldr	r2, [pc, #144]	; (8001938 <HAL_COMP_TriggerCallback+0x210>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d009      	beq.n	80018be <HAL_COMP_TriggerCallback+0x196>
 80018aa:	4b2b      	ldr	r3, [pc, #172]	; (8001958 <HAL_COMP_TriggerCallback+0x230>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a23      	ldr	r2, [pc, #140]	; (800193c <HAL_COMP_TriggerCallback+0x214>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d004      	beq.n	80018be <HAL_COMP_TriggerCallback+0x196>
 80018b4:	4b28      	ldr	r3, [pc, #160]	; (8001958 <HAL_COMP_TriggerCallback+0x230>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a21      	ldr	r2, [pc, #132]	; (8001940 <HAL_COMP_TriggerCallback+0x218>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d104      	bne.n	80018c8 <HAL_COMP_TriggerCallback+0x1a0>
 80018be:	4b26      	ldr	r3, [pc, #152]	; (8001958 <HAL_COMP_TriggerCallback+0x230>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	e003      	b.n	80018d0 <HAL_COMP_TriggerCallback+0x1a8>
 80018c8:	4b23      	ldr	r3, [pc, #140]	; (8001958 <HAL_COMP_TriggerCallback+0x230>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	4a22      	ldr	r2, [pc, #136]	; (800195c <HAL_COMP_TriggerCallback+0x234>)
 80018d2:	8013      	strh	r3, [r2, #0]
		if (options->trigger_channel == 2)
 80018d4:	4b1c      	ldr	r3, [pc, #112]	; (8001948 <HAL_COMP_TriggerCallback+0x220>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	799b      	ldrb	r3, [r3, #6]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d106      	bne.n	80018ec <HAL_COMP_TriggerCallback+0x1c4>
		{
			trigger_flag = 1;
 80018de:	4b07      	ldr	r3, [pc, #28]	; (80018fc <HAL_COMP_TriggerCallback+0x1d4>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	701a      	strb	r2, [r3, #0]
			trigger_quadrant = buf_B_quadrant;
 80018e4:	4b1e      	ldr	r3, [pc, #120]	; (8001960 <HAL_COMP_TriggerCallback+0x238>)
 80018e6:	781a      	ldrb	r2, [r3, #0]
 80018e8:	4b19      	ldr	r3, [pc, #100]	; (8001950 <HAL_COMP_TriggerCallback+0x228>)
 80018ea:	701a      	strb	r2, [r3, #0]
		}

	}
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	240003b0 	.word	0x240003b0
 80018fc:	24066e5c 	.word	0x24066e5c
 8001900:	24000248 	.word	0x24000248
 8001904:	40020010 	.word	0x40020010
 8001908:	40020028 	.word	0x40020028
 800190c:	40020040 	.word	0x40020040
 8001910:	40020058 	.word	0x40020058
 8001914:	40020070 	.word	0x40020070
 8001918:	40020088 	.word	0x40020088
 800191c:	400200a0 	.word	0x400200a0
 8001920:	400200b8 	.word	0x400200b8
 8001924:	40020410 	.word	0x40020410
 8001928:	40020428 	.word	0x40020428
 800192c:	40020440 	.word	0x40020440
 8001930:	40020458 	.word	0x40020458
 8001934:	40020470 	.word	0x40020470
 8001938:	40020488 	.word	0x40020488
 800193c:	400204a0 	.word	0x400204a0
 8001940:	400204b8 	.word	0x400204b8
 8001944:	24066e5e 	.word	0x24066e5e
 8001948:	2406744c 	.word	0x2406744c
 800194c:	24066e6c 	.word	0x24066e6c
 8001950:	24066e62 	.word	0x24066e62
 8001954:	240003dc 	.word	0x240003dc
 8001958:	240002c0 	.word	0x240002c0
 800195c:	24066e60 	.word	0x24066e60
 8001960:	24066e6d 	.word	0x24066e6d

08001964 <copy_to_tmp_array>:

void copy_to_tmp_array()
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
	if (trigger_quadrant == 0)
 8001968:	4b83      	ldr	r3, [pc, #524]	; (8001b78 <copy_to_tmp_array+0x214>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d13e      	bne.n	80019ee <copy_to_tmp_array+0x8a>
	{
		memcpy(ADC_Tmp_Buf_A, ADC_Buf_A_2 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001970:	4b82      	ldr	r3, [pc, #520]	; (8001b7c <copy_to_tmp_array+0x218>)
 8001972:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001976:	4619      	mov	r1, r3
 8001978:	4881      	ldr	r0, [pc, #516]	; (8001b80 <copy_to_tmp_array+0x21c>)
 800197a:	f011 fb2b 	bl	8012fd4 <memcpy>
		memcpy(ADC_Tmp_Buf_A + ADC_HALF_BUF_LEN, ADC_Buf_A_1, ADC_HALF_BUF_LEN);
 800197e:	4b81      	ldr	r3, [pc, #516]	; (8001b84 <copy_to_tmp_array+0x220>)
 8001980:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001984:	4980      	ldr	r1, [pc, #512]	; (8001b88 <copy_to_tmp_array+0x224>)
 8001986:	4618      	mov	r0, r3
 8001988:	f011 fb24 	bl	8012fd4 <memcpy>
		memcpy(ADC_Tmp_Buf_A + 2 * ADC_HALF_BUF_LEN, ADC_Buf_A_1 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 800198c:	4b7f      	ldr	r3, [pc, #508]	; (8001b8c <copy_to_tmp_array+0x228>)
 800198e:	4980      	ldr	r1, [pc, #512]	; (8001b90 <copy_to_tmp_array+0x22c>)
 8001990:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001994:	4618      	mov	r0, r3
 8001996:	f011 fb1d 	bl	8012fd4 <memcpy>

		memcpy(ADC_Tmp_Buf_B, ADC_Buf_B_2 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 800199a:	4b7e      	ldr	r3, [pc, #504]	; (8001b94 <copy_to_tmp_array+0x230>)
 800199c:	f644 6220 	movw	r2, #20000	; 0x4e20
 80019a0:	4619      	mov	r1, r3
 80019a2:	487d      	ldr	r0, [pc, #500]	; (8001b98 <copy_to_tmp_array+0x234>)
 80019a4:	f011 fb16 	bl	8012fd4 <memcpy>
		memcpy(ADC_Tmp_Buf_B + ADC_HALF_BUF_LEN, ADC_Buf_B_1, ADC_HALF_BUF_LEN);
 80019a8:	4b7c      	ldr	r3, [pc, #496]	; (8001b9c <copy_to_tmp_array+0x238>)
 80019aa:	f644 6220 	movw	r2, #20000	; 0x4e20
 80019ae:	497c      	ldr	r1, [pc, #496]	; (8001ba0 <copy_to_tmp_array+0x23c>)
 80019b0:	4618      	mov	r0, r3
 80019b2:	f011 fb0f 	bl	8012fd4 <memcpy>
		memcpy(ADC_Tmp_Buf_B + 2 * ADC_HALF_BUF_LEN, ADC_Buf_B_1 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 80019b6:	4b7b      	ldr	r3, [pc, #492]	; (8001ba4 <copy_to_tmp_array+0x240>)
 80019b8:	497b      	ldr	r1, [pc, #492]	; (8001ba8 <copy_to_tmp_array+0x244>)
 80019ba:	f644 6220 	movw	r2, #20000	; 0x4e20
 80019be:	4618      	mov	r0, r3
 80019c0:	f011 fb08 	bl	8012fd4 <memcpy>

		memcpy(ADC_Tmp_Buf_C, ADC_Buf_C_2 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 80019c4:	4b79      	ldr	r3, [pc, #484]	; (8001bac <copy_to_tmp_array+0x248>)
 80019c6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80019ca:	4619      	mov	r1, r3
 80019cc:	4878      	ldr	r0, [pc, #480]	; (8001bb0 <copy_to_tmp_array+0x24c>)
 80019ce:	f011 fb01 	bl	8012fd4 <memcpy>
		memcpy(ADC_Tmp_Buf_C + ADC_HALF_BUF_LEN, ADC_Buf_C_1, ADC_HALF_BUF_LEN);
 80019d2:	4b78      	ldr	r3, [pc, #480]	; (8001bb4 <copy_to_tmp_array+0x250>)
 80019d4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80019d8:	4977      	ldr	r1, [pc, #476]	; (8001bb8 <copy_to_tmp_array+0x254>)
 80019da:	4618      	mov	r0, r3
 80019dc:	f011 fafa 	bl	8012fd4 <memcpy>
		memcpy(ADC_Tmp_Buf_C + 2 * ADC_HALF_BUF_LEN, ADC_Buf_C_1 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 80019e0:	4b76      	ldr	r3, [pc, #472]	; (8001bbc <copy_to_tmp_array+0x258>)
 80019e2:	4977      	ldr	r1, [pc, #476]	; (8001bc0 <copy_to_tmp_array+0x25c>)
 80019e4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80019e8:	4618      	mov	r0, r3
 80019ea:	f011 faf3 	bl	8012fd4 <memcpy>

	}

	if (trigger_quadrant == 1)
 80019ee:	4b62      	ldr	r3, [pc, #392]	; (8001b78 <copy_to_tmp_array+0x214>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d13b      	bne.n	8001a6e <copy_to_tmp_array+0x10a>
	{
		memcpy(ADC_Tmp_Buf_A, ADC_Buf_A_1, ADC_HALF_BUF_LEN);
 80019f6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80019fa:	4963      	ldr	r1, [pc, #396]	; (8001b88 <copy_to_tmp_array+0x224>)
 80019fc:	4860      	ldr	r0, [pc, #384]	; (8001b80 <copy_to_tmp_array+0x21c>)
 80019fe:	f011 fae9 	bl	8012fd4 <memcpy>
		memcpy(ADC_Tmp_Buf_A + ADC_HALF_BUF_LEN, ADC_Buf_A_1 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001a02:	4b60      	ldr	r3, [pc, #384]	; (8001b84 <copy_to_tmp_array+0x220>)
 8001a04:	4962      	ldr	r1, [pc, #392]	; (8001b90 <copy_to_tmp_array+0x22c>)
 8001a06:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f011 fae2 	bl	8012fd4 <memcpy>
		memcpy(ADC_Tmp_Buf_A + 2 * ADC_HALF_BUF_LEN, ADC_Buf_A_2, ADC_HALF_BUF_LEN);
 8001a10:	4b5e      	ldr	r3, [pc, #376]	; (8001b8c <copy_to_tmp_array+0x228>)
 8001a12:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001a16:	496b      	ldr	r1, [pc, #428]	; (8001bc4 <copy_to_tmp_array+0x260>)
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f011 fadb 	bl	8012fd4 <memcpy>

		memcpy(ADC_Tmp_Buf_B, ADC_Buf_B_1, ADC_HALF_BUF_LEN);
 8001a1e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001a22:	495f      	ldr	r1, [pc, #380]	; (8001ba0 <copy_to_tmp_array+0x23c>)
 8001a24:	485c      	ldr	r0, [pc, #368]	; (8001b98 <copy_to_tmp_array+0x234>)
 8001a26:	f011 fad5 	bl	8012fd4 <memcpy>
		memcpy(ADC_Tmp_Buf_B + ADC_HALF_BUF_LEN, ADC_Buf_B_1 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001a2a:	4b5c      	ldr	r3, [pc, #368]	; (8001b9c <copy_to_tmp_array+0x238>)
 8001a2c:	495e      	ldr	r1, [pc, #376]	; (8001ba8 <copy_to_tmp_array+0x244>)
 8001a2e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001a32:	4618      	mov	r0, r3
 8001a34:	f011 face 	bl	8012fd4 <memcpy>
		memcpy(ADC_Tmp_Buf_B + 2 * ADC_HALF_BUF_LEN, ADC_Buf_B_2, ADC_HALF_BUF_LEN);
 8001a38:	4b5a      	ldr	r3, [pc, #360]	; (8001ba4 <copy_to_tmp_array+0x240>)
 8001a3a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001a3e:	4962      	ldr	r1, [pc, #392]	; (8001bc8 <copy_to_tmp_array+0x264>)
 8001a40:	4618      	mov	r0, r3
 8001a42:	f011 fac7 	bl	8012fd4 <memcpy>

		memcpy(ADC_Tmp_Buf_C, ADC_Buf_C_1, ADC_HALF_BUF_LEN);
 8001a46:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001a4a:	495b      	ldr	r1, [pc, #364]	; (8001bb8 <copy_to_tmp_array+0x254>)
 8001a4c:	4858      	ldr	r0, [pc, #352]	; (8001bb0 <copy_to_tmp_array+0x24c>)
 8001a4e:	f011 fac1 	bl	8012fd4 <memcpy>
		memcpy(ADC_Tmp_Buf_C + ADC_HALF_BUF_LEN, ADC_Buf_C_1 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001a52:	4b58      	ldr	r3, [pc, #352]	; (8001bb4 <copy_to_tmp_array+0x250>)
 8001a54:	495a      	ldr	r1, [pc, #360]	; (8001bc0 <copy_to_tmp_array+0x25c>)
 8001a56:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f011 faba 	bl	8012fd4 <memcpy>
		memcpy(ADC_Tmp_Buf_C + 2 * ADC_HALF_BUF_LEN, ADC_Buf_C_2, ADC_HALF_BUF_LEN);
 8001a60:	4b56      	ldr	r3, [pc, #344]	; (8001bbc <copy_to_tmp_array+0x258>)
 8001a62:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001a66:	4959      	ldr	r1, [pc, #356]	; (8001bcc <copy_to_tmp_array+0x268>)
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f011 fab3 	bl	8012fd4 <memcpy>

	}

	if (trigger_quadrant == 2)
 8001a6e:	4b42      	ldr	r3, [pc, #264]	; (8001b78 <copy_to_tmp_array+0x214>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d13e      	bne.n	8001af4 <copy_to_tmp_array+0x190>
	{
		memcpy(ADC_Tmp_Buf_A, ADC_Buf_A_1 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001a76:	4b46      	ldr	r3, [pc, #280]	; (8001b90 <copy_to_tmp_array+0x22c>)
 8001a78:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4840      	ldr	r0, [pc, #256]	; (8001b80 <copy_to_tmp_array+0x21c>)
 8001a80:	f011 faa8 	bl	8012fd4 <memcpy>
		memcpy(ADC_Tmp_Buf_A + ADC_HALF_BUF_LEN, ADC_Buf_A_2, ADC_HALF_BUF_LEN);
 8001a84:	4b3f      	ldr	r3, [pc, #252]	; (8001b84 <copy_to_tmp_array+0x220>)
 8001a86:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001a8a:	494e      	ldr	r1, [pc, #312]	; (8001bc4 <copy_to_tmp_array+0x260>)
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f011 faa1 	bl	8012fd4 <memcpy>
		memcpy(ADC_Tmp_Buf_A + 2 * ADC_HALF_BUF_LEN, ADC_Buf_A_2 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001a92:	4b3e      	ldr	r3, [pc, #248]	; (8001b8c <copy_to_tmp_array+0x228>)
 8001a94:	4939      	ldr	r1, [pc, #228]	; (8001b7c <copy_to_tmp_array+0x218>)
 8001a96:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f011 fa9a 	bl	8012fd4 <memcpy>

		memcpy(ADC_Tmp_Buf_B, ADC_Buf_B_1 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001aa0:	4b41      	ldr	r3, [pc, #260]	; (8001ba8 <copy_to_tmp_array+0x244>)
 8001aa2:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	483b      	ldr	r0, [pc, #236]	; (8001b98 <copy_to_tmp_array+0x234>)
 8001aaa:	f011 fa93 	bl	8012fd4 <memcpy>
		memcpy(ADC_Tmp_Buf_B + ADC_HALF_BUF_LEN, ADC_Buf_B_2, ADC_HALF_BUF_LEN);
 8001aae:	4b3b      	ldr	r3, [pc, #236]	; (8001b9c <copy_to_tmp_array+0x238>)
 8001ab0:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001ab4:	4944      	ldr	r1, [pc, #272]	; (8001bc8 <copy_to_tmp_array+0x264>)
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f011 fa8c 	bl	8012fd4 <memcpy>
		memcpy(ADC_Tmp_Buf_B + 2 * ADC_HALF_BUF_LEN, ADC_Buf_B_2 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001abc:	4b39      	ldr	r3, [pc, #228]	; (8001ba4 <copy_to_tmp_array+0x240>)
 8001abe:	4935      	ldr	r1, [pc, #212]	; (8001b94 <copy_to_tmp_array+0x230>)
 8001ac0:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f011 fa85 	bl	8012fd4 <memcpy>

		memcpy(ADC_Tmp_Buf_C, ADC_Buf_C_1 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001aca:	4b3d      	ldr	r3, [pc, #244]	; (8001bc0 <copy_to_tmp_array+0x25c>)
 8001acc:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4837      	ldr	r0, [pc, #220]	; (8001bb0 <copy_to_tmp_array+0x24c>)
 8001ad4:	f011 fa7e 	bl	8012fd4 <memcpy>
		memcpy(ADC_Tmp_Buf_C + ADC_HALF_BUF_LEN, ADC_Buf_C_2, ADC_HALF_BUF_LEN);
 8001ad8:	4b36      	ldr	r3, [pc, #216]	; (8001bb4 <copy_to_tmp_array+0x250>)
 8001ada:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001ade:	493b      	ldr	r1, [pc, #236]	; (8001bcc <copy_to_tmp_array+0x268>)
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f011 fa77 	bl	8012fd4 <memcpy>
		memcpy(ADC_Tmp_Buf_C + 2 * ADC_HALF_BUF_LEN, ADC_Buf_C_2 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001ae6:	4b35      	ldr	r3, [pc, #212]	; (8001bbc <copy_to_tmp_array+0x258>)
 8001ae8:	4930      	ldr	r1, [pc, #192]	; (8001bac <copy_to_tmp_array+0x248>)
 8001aea:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001aee:	4618      	mov	r0, r3
 8001af0:	f011 fa70 	bl	8012fd4 <memcpy>

	}

	if (trigger_quadrant == 3)
 8001af4:	4b20      	ldr	r3, [pc, #128]	; (8001b78 <copy_to_tmp_array+0x214>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d13b      	bne.n	8001b74 <copy_to_tmp_array+0x210>
	{
		memcpy(ADC_Tmp_Buf_A, ADC_Buf_A_2, ADC_HALF_BUF_LEN);
 8001afc:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001b00:	4930      	ldr	r1, [pc, #192]	; (8001bc4 <copy_to_tmp_array+0x260>)
 8001b02:	481f      	ldr	r0, [pc, #124]	; (8001b80 <copy_to_tmp_array+0x21c>)
 8001b04:	f011 fa66 	bl	8012fd4 <memcpy>
		memcpy(ADC_Tmp_Buf_A + ADC_HALF_BUF_LEN, ADC_Buf_A_2 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001b08:	4b1e      	ldr	r3, [pc, #120]	; (8001b84 <copy_to_tmp_array+0x220>)
 8001b0a:	491c      	ldr	r1, [pc, #112]	; (8001b7c <copy_to_tmp_array+0x218>)
 8001b0c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001b10:	4618      	mov	r0, r3
 8001b12:	f011 fa5f 	bl	8012fd4 <memcpy>
		memcpy(ADC_Tmp_Buf_A + 2 * ADC_HALF_BUF_LEN, ADC_Buf_A_1, ADC_HALF_BUF_LEN);
 8001b16:	4b1d      	ldr	r3, [pc, #116]	; (8001b8c <copy_to_tmp_array+0x228>)
 8001b18:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001b1c:	491a      	ldr	r1, [pc, #104]	; (8001b88 <copy_to_tmp_array+0x224>)
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f011 fa58 	bl	8012fd4 <memcpy>

		memcpy(ADC_Tmp_Buf_B, ADC_Buf_B_2, ADC_HALF_BUF_LEN);
 8001b24:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001b28:	4927      	ldr	r1, [pc, #156]	; (8001bc8 <copy_to_tmp_array+0x264>)
 8001b2a:	481b      	ldr	r0, [pc, #108]	; (8001b98 <copy_to_tmp_array+0x234>)
 8001b2c:	f011 fa52 	bl	8012fd4 <memcpy>
		memcpy(ADC_Tmp_Buf_B + ADC_HALF_BUF_LEN, ADC_Buf_B_2 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001b30:	4b1a      	ldr	r3, [pc, #104]	; (8001b9c <copy_to_tmp_array+0x238>)
 8001b32:	4918      	ldr	r1, [pc, #96]	; (8001b94 <copy_to_tmp_array+0x230>)
 8001b34:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f011 fa4b 	bl	8012fd4 <memcpy>
		memcpy(ADC_Tmp_Buf_B + 2 * ADC_HALF_BUF_LEN, ADC_Buf_B_1, ADC_HALF_BUF_LEN);
 8001b3e:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <copy_to_tmp_array+0x240>)
 8001b40:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001b44:	4916      	ldr	r1, [pc, #88]	; (8001ba0 <copy_to_tmp_array+0x23c>)
 8001b46:	4618      	mov	r0, r3
 8001b48:	f011 fa44 	bl	8012fd4 <memcpy>

		memcpy(ADC_Tmp_Buf_C, ADC_Buf_C_2, ADC_HALF_BUF_LEN);
 8001b4c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001b50:	491e      	ldr	r1, [pc, #120]	; (8001bcc <copy_to_tmp_array+0x268>)
 8001b52:	4817      	ldr	r0, [pc, #92]	; (8001bb0 <copy_to_tmp_array+0x24c>)
 8001b54:	f011 fa3e 	bl	8012fd4 <memcpy>
		memcpy(ADC_Tmp_Buf_C + ADC_HALF_BUF_LEN, ADC_Buf_C_2 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001b58:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <copy_to_tmp_array+0x250>)
 8001b5a:	4914      	ldr	r1, [pc, #80]	; (8001bac <copy_to_tmp_array+0x248>)
 8001b5c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001b60:	4618      	mov	r0, r3
 8001b62:	f011 fa37 	bl	8012fd4 <memcpy>
		memcpy(ADC_Tmp_Buf_C + 2 * ADC_HALF_BUF_LEN, ADC_Buf_C_1, ADC_HALF_BUF_LEN);
 8001b66:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <copy_to_tmp_array+0x258>)
 8001b68:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001b6c:	4912      	ldr	r1, [pc, #72]	; (8001bb8 <copy_to_tmp_array+0x254>)
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f011 fa30 	bl	8012fd4 <memcpy>
	}
}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	24066e62 	.word	0x24066e62
 8001b7c:	2402289c 	.word	0x2402289c
 8001b80:	2403af3c 	.word	0x2403af3c
 8001b84:	2403fd5c 	.word	0x2403fd5c
 8001b88:	240005bc 	.word	0x240005bc
 8001b8c:	24044b7c 	.word	0x24044b7c
 8001b90:	240053dc 	.word	0x240053dc
 8001b94:	2402c4dc 	.word	0x2402c4dc
 8001b98:	2404999c 	.word	0x2404999c
 8001b9c:	2404e7bc 	.word	0x2404e7bc
 8001ba0:	2400a1fc 	.word	0x2400a1fc
 8001ba4:	240535dc 	.word	0x240535dc
 8001ba8:	2400f01c 	.word	0x2400f01c
 8001bac:	2403611c 	.word	0x2403611c
 8001bb0:	240583fc 	.word	0x240583fc
 8001bb4:	2405d21c 	.word	0x2405d21c
 8001bb8:	24013e3c 	.word	0x24013e3c
 8001bbc:	2406203c 	.word	0x2406203c
 8001bc0:	24018c5c 	.word	0x24018c5c
 8001bc4:	2401da7c 	.word	0x2401da7c
 8001bc8:	240276bc 	.word	0x240276bc
 8001bcc:	240312fc 	.word	0x240312fc

08001bd0 <prepare_data_to_send>:

void prepare_data_to_send(uint16_t trigger_pos){
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	80fb      	strh	r3, [r7, #6]
	uint32_t i = trigger_pos;
 8001bda:	88fb      	ldrh	r3, [r7, #6]
 8001bdc:	60fb      	str	r3, [r7, #12]
	uint8_t step = options->time_scale + 1;
 8001bde:	4b24      	ldr	r3, [pc, #144]	; (8001c70 <prepare_data_to_send+0xa0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	79db      	ldrb	r3, [r3, #7]
 8001be4:	3301      	adds	r3, #1
 8001be6:	72fb      	strb	r3, [r7, #11]
	data_to_send[0] = 1;
 8001be8:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <prepare_data_to_send+0xa4>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	701a      	strb	r2, [r3, #0]
	data_to_send[DATA_TO_SEND_LEN] = 2;
 8001bee:	4b21      	ldr	r3, [pc, #132]	; (8001c74 <prepare_data_to_send+0xa4>)
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
	data_to_send[DATA_TO_SEND_LEN * 2] = 3;
 8001bf6:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <prepare_data_to_send+0xa4>)
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
	for(i = trigger_pos ; i < DATA_TO_SEND_LEN * step - 1; i += step){
 8001bfe:	88fb      	ldrh	r3, [r7, #6]
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	e023      	b.n	8001c4c <prepare_data_to_send+0x7c>
		data_to_send[i - trigger_pos + 1] = ADC_Tmp_Buf_A[i];
 8001c04:	88fb      	ldrh	r3, [r7, #6]
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	491a      	ldr	r1, [pc, #104]	; (8001c78 <prepare_data_to_send+0xa8>)
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	440a      	add	r2, r1
 8001c12:	7811      	ldrb	r1, [r2, #0]
 8001c14:	4a17      	ldr	r2, [pc, #92]	; (8001c74 <prepare_data_to_send+0xa4>)
 8001c16:	54d1      	strb	r1, [r2, r3]
		data_to_send[i - trigger_pos + 1 + DATA_TO_SEND_LEN] = ADC_Tmp_Buf_B[i];
 8001c18:	88fb      	ldrh	r3, [r7, #6]
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	f203 13f5 	addw	r3, r3, #501	; 0x1f5
 8001c22:	4916      	ldr	r1, [pc, #88]	; (8001c7c <prepare_data_to_send+0xac>)
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	440a      	add	r2, r1
 8001c28:	7811      	ldrb	r1, [r2, #0]
 8001c2a:	4a12      	ldr	r2, [pc, #72]	; (8001c74 <prepare_data_to_send+0xa4>)
 8001c2c:	54d1      	strb	r1, [r2, r3]
		data_to_send[i - trigger_pos + 1 + DATA_TO_SEND_LEN * 2] = ADC_Tmp_Buf_C[i];
 8001c2e:	88fb      	ldrh	r3, [r7, #6]
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 8001c38:	4911      	ldr	r1, [pc, #68]	; (8001c80 <prepare_data_to_send+0xb0>)
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	440a      	add	r2, r1
 8001c3e:	7811      	ldrb	r1, [r2, #0]
 8001c40:	4a0c      	ldr	r2, [pc, #48]	; (8001c74 <prepare_data_to_send+0xa4>)
 8001c42:	54d1      	strb	r1, [r2, r3]
	for(i = trigger_pos ; i < DATA_TO_SEND_LEN * step - 1; i += step){
 8001c44:	7afb      	ldrb	r3, [r7, #11]
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	4413      	add	r3, r2
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	7afb      	ldrb	r3, [r7, #11]
 8001c4e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001c52:	fb02 f303 	mul.w	r3, r2, r3
 8001c56:	3b01      	subs	r3, #1
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d3d2      	bcc.n	8001c04 <prepare_data_to_send+0x34>
	}
	ready_to_send_flag = 1;
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <prepare_data_to_send+0xb4>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	701a      	strb	r2, [r3, #0]
}
 8001c64:	bf00      	nop
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	2406744c 	.word	0x2406744c
 8001c74:	24066e70 	.word	0x24066e70
 8001c78:	2403af3c 	.word	0x2403af3c
 8001c7c:	2404999c 	.word	0x2404999c
 8001c80:	240583fc 	.word	0x240583fc
 8001c84:	24066e64 	.word	0x24066e64

08001c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	4806      	ldr	r0, [pc, #24]	; (8001ca8 <Error_Handler+0x20>)
 8001c90:	f006 f807 	bl	8007ca2 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001c94:	2201      	movs	r2, #1
 8001c96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c9a:	4803      	ldr	r0, [pc, #12]	; (8001ca8 <Error_Handler+0x20>)
 8001c9c:	f005 ffe8 	bl	8007c70 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca0:	b672      	cpsid	i
}
 8001ca2:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <Error_Handler+0x1c>
 8001ca6:	bf00      	nop
 8001ca8:	58020400 	.word	0x58020400

08001cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb2:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <HAL_MspInit+0x54>)
 8001cb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cb8:	4a11      	ldr	r2, [pc, #68]	; (8001d00 <HAL_MspInit+0x54>)
 8001cba:	f043 0302 	orr.w	r3, r3, #2
 8001cbe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <HAL_MspInit+0x54>)
 8001cc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	607b      	str	r3, [r7, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <HAL_MspInit+0x54>)
 8001cd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <HAL_MspInit+0x54>)
 8001cd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cdc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ce0:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <HAL_MspInit+0x54>)
 8001ce2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ce6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cea:	603b      	str	r3, [r7, #0]
 8001cec:	683b      	ldr	r3, [r7, #0]

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8001cee:	f000 fc77 	bl	80025e0 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8001cf2:	2002      	movs	r0, #2
 8001cf4:	f000 fc60 	bl	80025b8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cf8:	bf00      	nop
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	58024400 	.word	0x58024400

08001d04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08e      	sub	sp, #56	; 0x38
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4aa0      	ldr	r2, [pc, #640]	; (8001fa4 <HAL_ADC_MspInit+0x2a0>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d16a      	bne.n	8001dfc <HAL_ADC_MspInit+0xf8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001d26:	4ba0      	ldr	r3, [pc, #640]	; (8001fa8 <HAL_ADC_MspInit+0x2a4>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	4a9e      	ldr	r2, [pc, #632]	; (8001fa8 <HAL_ADC_MspInit+0x2a4>)
 8001d2e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001d30:	4b9d      	ldr	r3, [pc, #628]	; (8001fa8 <HAL_ADC_MspInit+0x2a4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d10e      	bne.n	8001d56 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001d38:	4b9c      	ldr	r3, [pc, #624]	; (8001fac <HAL_ADC_MspInit+0x2a8>)
 8001d3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d3e:	4a9b      	ldr	r2, [pc, #620]	; (8001fac <HAL_ADC_MspInit+0x2a8>)
 8001d40:	f043 0320 	orr.w	r3, r3, #32
 8001d44:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d48:	4b98      	ldr	r3, [pc, #608]	; (8001fac <HAL_ADC_MspInit+0x2a8>)
 8001d4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d4e:	f003 0320 	and.w	r3, r3, #32
 8001d52:	623b      	str	r3, [r7, #32]
 8001d54:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d56:	4b95      	ldr	r3, [pc, #596]	; (8001fac <HAL_ADC_MspInit+0x2a8>)
 8001d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d5c:	4a93      	ldr	r2, [pc, #588]	; (8001fac <HAL_ADC_MspInit+0x2a8>)
 8001d5e:	f043 0320 	orr.w	r3, r3, #32
 8001d62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d66:	4b91      	ldr	r3, [pc, #580]	; (8001fac <HAL_ADC_MspInit+0x2a8>)
 8001d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d6c:	f003 0320 	and.w	r3, r3, #32
 8001d70:	61fb      	str	r3, [r7, #28]
 8001d72:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d86:	4619      	mov	r1, r3
 8001d88:	4889      	ldr	r0, [pc, #548]	; (8001fb0 <HAL_ADC_MspInit+0x2ac>)
 8001d8a:	f005 fdc1 	bl	8007910 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001d8e:	4b89      	ldr	r3, [pc, #548]	; (8001fb4 <HAL_ADC_MspInit+0x2b0>)
 8001d90:	4a89      	ldr	r2, [pc, #548]	; (8001fb8 <HAL_ADC_MspInit+0x2b4>)
 8001d92:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001d94:	4b87      	ldr	r3, [pc, #540]	; (8001fb4 <HAL_ADC_MspInit+0x2b0>)
 8001d96:	2209      	movs	r2, #9
 8001d98:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d9a:	4b86      	ldr	r3, [pc, #536]	; (8001fb4 <HAL_ADC_MspInit+0x2b0>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001da0:	4b84      	ldr	r3, [pc, #528]	; (8001fb4 <HAL_ADC_MspInit+0x2b0>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001da6:	4b83      	ldr	r3, [pc, #524]	; (8001fb4 <HAL_ADC_MspInit+0x2b0>)
 8001da8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dae:	4b81      	ldr	r3, [pc, #516]	; (8001fb4 <HAL_ADC_MspInit+0x2b0>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001db4:	4b7f      	ldr	r3, [pc, #508]	; (8001fb4 <HAL_ADC_MspInit+0x2b0>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001dba:	4b7e      	ldr	r3, [pc, #504]	; (8001fb4 <HAL_ADC_MspInit+0x2b0>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001dc0:	4b7c      	ldr	r3, [pc, #496]	; (8001fb4 <HAL_ADC_MspInit+0x2b0>)
 8001dc2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dc6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dc8:	4b7a      	ldr	r3, [pc, #488]	; (8001fb4 <HAL_ADC_MspInit+0x2b0>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001dce:	4879      	ldr	r0, [pc, #484]	; (8001fb4 <HAL_ADC_MspInit+0x2b0>)
 8001dd0:	f003 f9a8 	bl	8005124 <HAL_DMA_Init>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_ADC_MspInit+0xda>
    {
      Error_Handler();
 8001dda:	f7ff ff55 	bl	8001c88 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a74      	ldr	r2, [pc, #464]	; (8001fb4 <HAL_ADC_MspInit+0x2b0>)
 8001de2:	64da      	str	r2, [r3, #76]	; 0x4c
 8001de4:	4a73      	ldr	r2, [pc, #460]	; (8001fb4 <HAL_ADC_MspInit+0x2b0>)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001dea:	2200      	movs	r2, #0
 8001dec:	2100      	movs	r1, #0
 8001dee:	2012      	movs	r0, #18
 8001df0:	f002 ff85 	bl	8004cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001df4:	2012      	movs	r0, #18
 8001df6:	f002 ff9c 	bl	8004d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001dfa:	e0ce      	b.n	8001f9a <HAL_ADC_MspInit+0x296>
  else if(hadc->Instance==ADC2)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a6e      	ldr	r2, [pc, #440]	; (8001fbc <HAL_ADC_MspInit+0x2b8>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d16a      	bne.n	8001edc <HAL_ADC_MspInit+0x1d8>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001e06:	4b68      	ldr	r3, [pc, #416]	; (8001fa8 <HAL_ADC_MspInit+0x2a4>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	4a66      	ldr	r2, [pc, #408]	; (8001fa8 <HAL_ADC_MspInit+0x2a4>)
 8001e0e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001e10:	4b65      	ldr	r3, [pc, #404]	; (8001fa8 <HAL_ADC_MspInit+0x2a4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d10e      	bne.n	8001e36 <HAL_ADC_MspInit+0x132>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001e18:	4b64      	ldr	r3, [pc, #400]	; (8001fac <HAL_ADC_MspInit+0x2a8>)
 8001e1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e1e:	4a63      	ldr	r2, [pc, #396]	; (8001fac <HAL_ADC_MspInit+0x2a8>)
 8001e20:	f043 0320 	orr.w	r3, r3, #32
 8001e24:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e28:	4b60      	ldr	r3, [pc, #384]	; (8001fac <HAL_ADC_MspInit+0x2a8>)
 8001e2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e2e:	f003 0320 	and.w	r3, r3, #32
 8001e32:	61bb      	str	r3, [r7, #24]
 8001e34:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e36:	4b5d      	ldr	r3, [pc, #372]	; (8001fac <HAL_ADC_MspInit+0x2a8>)
 8001e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e3c:	4a5b      	ldr	r2, [pc, #364]	; (8001fac <HAL_ADC_MspInit+0x2a8>)
 8001e3e:	f043 0320 	orr.w	r3, r3, #32
 8001e42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e46:	4b59      	ldr	r3, [pc, #356]	; (8001fac <HAL_ADC_MspInit+0x2a8>)
 8001e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e4c:	f003 0320 	and.w	r3, r3, #32
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001e54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e66:	4619      	mov	r1, r3
 8001e68:	4851      	ldr	r0, [pc, #324]	; (8001fb0 <HAL_ADC_MspInit+0x2ac>)
 8001e6a:	f005 fd51 	bl	8007910 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 8001e6e:	4b54      	ldr	r3, [pc, #336]	; (8001fc0 <HAL_ADC_MspInit+0x2bc>)
 8001e70:	4a54      	ldr	r2, [pc, #336]	; (8001fc4 <HAL_ADC_MspInit+0x2c0>)
 8001e72:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001e74:	4b52      	ldr	r3, [pc, #328]	; (8001fc0 <HAL_ADC_MspInit+0x2bc>)
 8001e76:	220a      	movs	r2, #10
 8001e78:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e7a:	4b51      	ldr	r3, [pc, #324]	; (8001fc0 <HAL_ADC_MspInit+0x2bc>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e80:	4b4f      	ldr	r3, [pc, #316]	; (8001fc0 <HAL_ADC_MspInit+0x2bc>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001e86:	4b4e      	ldr	r3, [pc, #312]	; (8001fc0 <HAL_ADC_MspInit+0x2bc>)
 8001e88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e8c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e8e:	4b4c      	ldr	r3, [pc, #304]	; (8001fc0 <HAL_ADC_MspInit+0x2bc>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e94:	4b4a      	ldr	r3, [pc, #296]	; (8001fc0 <HAL_ADC_MspInit+0x2bc>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8001e9a:	4b49      	ldr	r3, [pc, #292]	; (8001fc0 <HAL_ADC_MspInit+0x2bc>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8001ea0:	4b47      	ldr	r3, [pc, #284]	; (8001fc0 <HAL_ADC_MspInit+0x2bc>)
 8001ea2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ea6:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ea8:	4b45      	ldr	r3, [pc, #276]	; (8001fc0 <HAL_ADC_MspInit+0x2bc>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001eae:	4844      	ldr	r0, [pc, #272]	; (8001fc0 <HAL_ADC_MspInit+0x2bc>)
 8001eb0:	f003 f938 	bl	8005124 <HAL_DMA_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_ADC_MspInit+0x1ba>
      Error_Handler();
 8001eba:	f7ff fee5 	bl	8001c88 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a3f      	ldr	r2, [pc, #252]	; (8001fc0 <HAL_ADC_MspInit+0x2bc>)
 8001ec2:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ec4:	4a3e      	ldr	r2, [pc, #248]	; (8001fc0 <HAL_ADC_MspInit+0x2bc>)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2100      	movs	r1, #0
 8001ece:	2012      	movs	r0, #18
 8001ed0:	f002 ff15 	bl	8004cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001ed4:	2012      	movs	r0, #18
 8001ed6:	f002 ff2c 	bl	8004d32 <HAL_NVIC_EnableIRQ>
}
 8001eda:	e05e      	b.n	8001f9a <HAL_ADC_MspInit+0x296>
  else if(hadc->Instance==ADC3)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a39      	ldr	r2, [pc, #228]	; (8001fc8 <HAL_ADC_MspInit+0x2c4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d159      	bne.n	8001f9a <HAL_ADC_MspInit+0x296>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ee6:	4b31      	ldr	r3, [pc, #196]	; (8001fac <HAL_ADC_MspInit+0x2a8>)
 8001ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eec:	4a2f      	ldr	r2, [pc, #188]	; (8001fac <HAL_ADC_MspInit+0x2a8>)
 8001eee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ef2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ef6:	4b2d      	ldr	r3, [pc, #180]	; (8001fac <HAL_ADC_MspInit+0x2a8>)
 8001ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001efc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f04:	4b29      	ldr	r3, [pc, #164]	; (8001fac <HAL_ADC_MspInit+0x2a8>)
 8001f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f0a:	4a28      	ldr	r2, [pc, #160]	; (8001fac <HAL_ADC_MspInit+0x2a8>)
 8001f0c:	f043 0304 	orr.w	r3, r3, #4
 8001f10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f14:	4b25      	ldr	r3, [pc, #148]	; (8001fac <HAL_ADC_MspInit+0x2a8>)
 8001f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001f22:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001f26:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001f2a:	f000 fb69 	bl	8002600 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream2;
 8001f2e:	4b27      	ldr	r3, [pc, #156]	; (8001fcc <HAL_ADC_MspInit+0x2c8>)
 8001f30:	4a27      	ldr	r2, [pc, #156]	; (8001fd0 <HAL_ADC_MspInit+0x2cc>)
 8001f32:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001f34:	4b25      	ldr	r3, [pc, #148]	; (8001fcc <HAL_ADC_MspInit+0x2c8>)
 8001f36:	2273      	movs	r2, #115	; 0x73
 8001f38:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f3a:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <HAL_ADC_MspInit+0x2c8>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f40:	4b22      	ldr	r3, [pc, #136]	; (8001fcc <HAL_ADC_MspInit+0x2c8>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001f46:	4b21      	ldr	r3, [pc, #132]	; (8001fcc <HAL_ADC_MspInit+0x2c8>)
 8001f48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f4c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f4e:	4b1f      	ldr	r3, [pc, #124]	; (8001fcc <HAL_ADC_MspInit+0x2c8>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f54:	4b1d      	ldr	r3, [pc, #116]	; (8001fcc <HAL_ADC_MspInit+0x2c8>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8001f5a:	4b1c      	ldr	r3, [pc, #112]	; (8001fcc <HAL_ADC_MspInit+0x2c8>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8001f60:	4b1a      	ldr	r3, [pc, #104]	; (8001fcc <HAL_ADC_MspInit+0x2c8>)
 8001f62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f66:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f68:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <HAL_ADC_MspInit+0x2c8>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001f6e:	4817      	ldr	r0, [pc, #92]	; (8001fcc <HAL_ADC_MspInit+0x2c8>)
 8001f70:	f003 f8d8 	bl	8005124 <HAL_DMA_Init>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <HAL_ADC_MspInit+0x27a>
      Error_Handler();
 8001f7a:	f7ff fe85 	bl	8001c88 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a12      	ldr	r2, [pc, #72]	; (8001fcc <HAL_ADC_MspInit+0x2c8>)
 8001f82:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f84:	4a11      	ldr	r2, [pc, #68]	; (8001fcc <HAL_ADC_MspInit+0x2c8>)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	207f      	movs	r0, #127	; 0x7f
 8001f90:	f002 feb5 	bl	8004cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8001f94:	207f      	movs	r0, #127	; 0x7f
 8001f96:	f002 fecc 	bl	8004d32 <HAL_NVIC_EnableIRQ>
}
 8001f9a:	bf00      	nop
 8001f9c:	3738      	adds	r7, #56	; 0x38
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40022000 	.word	0x40022000
 8001fa8:	24067450 	.word	0x24067450
 8001fac:	58024400 	.word	0x58024400
 8001fb0:	58021400 	.word	0x58021400
 8001fb4:	24000248 	.word	0x24000248
 8001fb8:	40020010 	.word	0x40020010
 8001fbc:	40022100 	.word	0x40022100
 8001fc0:	240002c0 	.word	0x240002c0
 8001fc4:	40020028 	.word	0x40020028
 8001fc8:	58026000 	.word	0x58026000
 8001fcc:	24000338 	.word	0x24000338
 8001fd0:	40020040 	.word	0x40020040

08001fd4 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08c      	sub	sp, #48	; 0x30
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fdc:	f107 031c 	add.w	r3, r7, #28
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
 8001fea:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a41      	ldr	r2, [pc, #260]	; (80020f8 <HAL_COMP_MspInit+0x124>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d13b      	bne.n	800206e <HAL_COMP_MspInit+0x9a>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_COMP12_CLK_ENABLED++;
 8001ff6:	4b41      	ldr	r3, [pc, #260]	; (80020fc <HAL_COMP_MspInit+0x128>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	4a3f      	ldr	r2, [pc, #252]	; (80020fc <HAL_COMP_MspInit+0x128>)
 8001ffe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_COMP12_CLK_ENABLED==1){
 8002000:	4b3e      	ldr	r3, [pc, #248]	; (80020fc <HAL_COMP_MspInit+0x128>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d10e      	bne.n	8002026 <HAL_COMP_MspInit+0x52>
      __HAL_RCC_COMP12_CLK_ENABLE();
 8002008:	4b3d      	ldr	r3, [pc, #244]	; (8002100 <HAL_COMP_MspInit+0x12c>)
 800200a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800200e:	4a3c      	ldr	r2, [pc, #240]	; (8002100 <HAL_COMP_MspInit+0x12c>)
 8002010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002014:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002018:	4b39      	ldr	r3, [pc, #228]	; (8002100 <HAL_COMP_MspInit+0x12c>)
 800201a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800201e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002022:	61bb      	str	r3, [r7, #24]
 8002024:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002026:	4b36      	ldr	r3, [pc, #216]	; (8002100 <HAL_COMP_MspInit+0x12c>)
 8002028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800202c:	4a34      	ldr	r2, [pc, #208]	; (8002100 <HAL_COMP_MspInit+0x12c>)
 800202e:	f043 0302 	orr.w	r3, r3, #2
 8002032:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002036:	4b32      	ldr	r3, [pc, #200]	; (8002100 <HAL_COMP_MspInit+0x12c>)
 8002038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	617b      	str	r3, [r7, #20]
 8002042:	697b      	ldr	r3, [r7, #20]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002044:	2304      	movs	r3, #4
 8002046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002048:	2303      	movs	r3, #3
 800204a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002050:	f107 031c 	add.w	r3, r7, #28
 8002054:	4619      	mov	r1, r3
 8002056:	482b      	ldr	r0, [pc, #172]	; (8002104 <HAL_COMP_MspInit+0x130>)
 8002058:	f005 fc5a 	bl	8007910 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 0, 0);
 800205c:	2200      	movs	r2, #0
 800205e:	2100      	movs	r1, #0
 8002060:	2089      	movs	r0, #137	; 0x89
 8002062:	f002 fe4c 	bl	8004cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 8002066:	2089      	movs	r0, #137	; 0x89
 8002068:	f002 fe63 	bl	8004d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 800206c:	e040      	b.n	80020f0 <HAL_COMP_MspInit+0x11c>
  else if(hcomp->Instance==COMP2)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a25      	ldr	r2, [pc, #148]	; (8002108 <HAL_COMP_MspInit+0x134>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d13b      	bne.n	80020f0 <HAL_COMP_MspInit+0x11c>
    HAL_RCC_COMP12_CLK_ENABLED++;
 8002078:	4b20      	ldr	r3, [pc, #128]	; (80020fc <HAL_COMP_MspInit+0x128>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	3301      	adds	r3, #1
 800207e:	4a1f      	ldr	r2, [pc, #124]	; (80020fc <HAL_COMP_MspInit+0x128>)
 8002080:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_COMP12_CLK_ENABLED==1){
 8002082:	4b1e      	ldr	r3, [pc, #120]	; (80020fc <HAL_COMP_MspInit+0x128>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d10e      	bne.n	80020a8 <HAL_COMP_MspInit+0xd4>
      __HAL_RCC_COMP12_CLK_ENABLE();
 800208a:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <HAL_COMP_MspInit+0x12c>)
 800208c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002090:	4a1b      	ldr	r2, [pc, #108]	; (8002100 <HAL_COMP_MspInit+0x12c>)
 8002092:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002096:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800209a:	4b19      	ldr	r3, [pc, #100]	; (8002100 <HAL_COMP_MspInit+0x12c>)
 800209c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020a8:	4b15      	ldr	r3, [pc, #84]	; (8002100 <HAL_COMP_MspInit+0x12c>)
 80020aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ae:	4a14      	ldr	r2, [pc, #80]	; (8002100 <HAL_COMP_MspInit+0x12c>)
 80020b0:	f043 0310 	orr.w	r3, r3, #16
 80020b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020b8:	4b11      	ldr	r3, [pc, #68]	; (8002100 <HAL_COMP_MspInit+0x12c>)
 80020ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020be:	f003 0310 	and.w	r3, r3, #16
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020cc:	2303      	movs	r3, #3
 80020ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020d4:	f107 031c 	add.w	r3, r7, #28
 80020d8:	4619      	mov	r1, r3
 80020da:	480c      	ldr	r0, [pc, #48]	; (800210c <HAL_COMP_MspInit+0x138>)
 80020dc:	f005 fc18 	bl	8007910 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(COMP_IRQn, 0, 0);
 80020e0:	2200      	movs	r2, #0
 80020e2:	2100      	movs	r1, #0
 80020e4:	2089      	movs	r0, #137	; 0x89
 80020e6:	f002 fe0a 	bl	8004cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 80020ea:	2089      	movs	r0, #137	; 0x89
 80020ec:	f002 fe21 	bl	8004d32 <HAL_NVIC_EnableIRQ>
}
 80020f0:	bf00      	nop
 80020f2:	3730      	adds	r7, #48	; 0x30
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	5800380c 	.word	0x5800380c
 80020fc:	24067454 	.word	0x24067454
 8002100:	58024400 	.word	0x58024400
 8002104:	58020400 	.word	0x58020400
 8002108:	58003810 	.word	0x58003810
 800210c:	58021000 	.word	0x58021000

08002110 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a0b      	ldr	r2, [pc, #44]	; (800214c <HAL_DAC_MspInit+0x3c>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d10e      	bne.n	8002140 <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002122:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <HAL_DAC_MspInit+0x40>)
 8002124:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002128:	4a09      	ldr	r2, [pc, #36]	; (8002150 <HAL_DAC_MspInit+0x40>)
 800212a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800212e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002132:	4b07      	ldr	r3, [pc, #28]	; (8002150 <HAL_DAC_MspInit+0x40>)
 8002134:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002138:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002140:	bf00      	nop
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	40007400 	.word	0x40007400
 8002150:	58024400 	.word	0x58024400

08002154 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0b      	ldr	r2, [pc, #44]	; (8002190 <HAL_TIM_PWM_MspInit+0x3c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d10e      	bne.n	8002184 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002166:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <HAL_TIM_PWM_MspInit+0x40>)
 8002168:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800216c:	4a09      	ldr	r2, [pc, #36]	; (8002194 <HAL_TIM_PWM_MspInit+0x40>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002176:	4b07      	ldr	r3, [pc, #28]	; (8002194 <HAL_TIM_PWM_MspInit+0x40>)
 8002178:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002184:	bf00      	nop
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	40010000 	.word	0x40010000
 8002194:	58024400 	.word	0x58024400

08002198 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0e      	ldr	r2, [pc, #56]	; (80021e0 <HAL_TIM_Base_MspInit+0x48>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d116      	bne.n	80021d8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80021aa:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <HAL_TIM_Base_MspInit+0x4c>)
 80021ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021b0:	4a0c      	ldr	r2, [pc, #48]	; (80021e4 <HAL_TIM_Base_MspInit+0x4c>)
 80021b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021ba:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <HAL_TIM_Base_MspInit+0x4c>)
 80021bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80021c8:	2200      	movs	r2, #0
 80021ca:	2100      	movs	r1, #0
 80021cc:	2075      	movs	r0, #117	; 0x75
 80021ce:	f002 fd96 	bl	8004cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80021d2:	2075      	movs	r0, #117	; 0x75
 80021d4:	f002 fdad 	bl	8004d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80021d8:	bf00      	nop
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40014400 	.word	0x40014400
 80021e4:	58024400 	.word	0x58024400

080021e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b0b8      	sub	sp, #224	; 0xe0
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002200:	f107 0310 	add.w	r3, r7, #16
 8002204:	22bc      	movs	r2, #188	; 0xbc
 8002206:	2100      	movs	r1, #0
 8002208:	4618      	mov	r0, r3
 800220a:	f010 fef1 	bl	8012ff0 <memset>
  if(huart->Instance==USART3)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a25      	ldr	r2, [pc, #148]	; (80022a8 <HAL_UART_MspInit+0xc0>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d142      	bne.n	800229e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002218:	2302      	movs	r3, #2
 800221a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 800221c:	2303      	movs	r3, #3
 800221e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002222:	f107 0310 	add.w	r3, r7, #16
 8002226:	4618      	mov	r0, r3
 8002228:	f008 f8e8 	bl	800a3fc <HAL_RCCEx_PeriphCLKConfig>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002232:	f7ff fd29 	bl	8001c88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002236:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <HAL_UART_MspInit+0xc4>)
 8002238:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800223c:	4a1b      	ldr	r2, [pc, #108]	; (80022ac <HAL_UART_MspInit+0xc4>)
 800223e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002242:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002246:	4b19      	ldr	r3, [pc, #100]	; (80022ac <HAL_UART_MspInit+0xc4>)
 8002248:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800224c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002254:	4b15      	ldr	r3, [pc, #84]	; (80022ac <HAL_UART_MspInit+0xc4>)
 8002256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800225a:	4a14      	ldr	r2, [pc, #80]	; (80022ac <HAL_UART_MspInit+0xc4>)
 800225c:	f043 0308 	orr.w	r3, r3, #8
 8002260:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002264:	4b11      	ldr	r3, [pc, #68]	; (80022ac <HAL_UART_MspInit+0xc4>)
 8002266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002272:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002276:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227a:	2302      	movs	r3, #2
 800227c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002286:	2300      	movs	r3, #0
 8002288:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800228c:	2307      	movs	r3, #7
 800228e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002292:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002296:	4619      	mov	r1, r3
 8002298:	4805      	ldr	r0, [pc, #20]	; (80022b0 <HAL_UART_MspInit+0xc8>)
 800229a:	f005 fb39 	bl	8007910 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800229e:	bf00      	nop
 80022a0:	37e0      	adds	r7, #224	; 0xe0
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40004800 	.word	0x40004800
 80022ac:	58024400 	.word	0x58024400
 80022b0:	58020c00 	.word	0x58020c00

080022b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022b8:	e7fe      	b.n	80022b8 <NMI_Handler+0x4>

080022ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ba:	b480      	push	{r7}
 80022bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022be:	e7fe      	b.n	80022be <HardFault_Handler+0x4>

080022c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c4:	e7fe      	b.n	80022c4 <MemManage_Handler+0x4>

080022c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ca:	e7fe      	b.n	80022ca <BusFault_Handler+0x4>

080022cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d0:	e7fe      	b.n	80022d0 <UsageFault_Handler+0x4>

080022d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022ee:	b480      	push	{r7}
 80022f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002300:	f000 f90a 	bl	8002518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002304:	bf00      	nop
 8002306:	bd80      	pop	{r7, pc}

08002308 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800230c:	4802      	ldr	r0, [pc, #8]	; (8002318 <DMA1_Stream0_IRQHandler+0x10>)
 800230e:	f003 ffed 	bl	80062ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	24000248 	.word	0x24000248

0800231c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002320:	4802      	ldr	r0, [pc, #8]	; (800232c <DMA1_Stream1_IRQHandler+0x10>)
 8002322:	f003 ffe3 	bl	80062ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	240002c0 	.word	0x240002c0

08002330 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002334:	4802      	ldr	r0, [pc, #8]	; (8002340 <DMA1_Stream2_IRQHandler+0x10>)
 8002336:	f003 ffd9 	bl	80062ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	24000338 	.word	0x24000338

08002344 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002348:	4803      	ldr	r0, [pc, #12]	; (8002358 <ADC_IRQHandler+0x14>)
 800234a:	f000 fe8f 	bl	800306c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800234e:	4803      	ldr	r0, [pc, #12]	; (800235c <ADC_IRQHandler+0x18>)
 8002350:	f000 fe8c 	bl	800306c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002354:	bf00      	nop
 8002356:	bd80      	pop	{r7, pc}
 8002358:	2400011c 	.word	0x2400011c
 800235c:	24000180 	.word	0x24000180

08002360 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002364:	4802      	ldr	r0, [pc, #8]	; (8002370 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 8002366:	f005 fe3c 	bl	8007fe2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	24067f90 	.word	0x24067f90

08002374 <OTG_FS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 In global interrupt.
  */
void OTG_FS_EP1_IN_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002378:	4802      	ldr	r0, [pc, #8]	; (8002384 <OTG_FS_EP1_IN_IRQHandler+0x10>)
 800237a:	f005 fe32 	bl	8007fe2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	24067f90 	.word	0x24067f90

08002388 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800238c:	4802      	ldr	r0, [pc, #8]	; (8002398 <OTG_FS_IRQHandler+0x10>)
 800238e:	f005 fe28 	bl	8007fe2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	24067f90 	.word	0x24067f90

0800239c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80023a0:	4802      	ldr	r0, [pc, #8]	; (80023ac <TIM16_IRQHandler+0x10>)
 80023a2:	f00a fc83 	bl	800ccac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	24000468 	.word	0x24000468

080023b0 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80023b4:	4802      	ldr	r0, [pc, #8]	; (80023c0 <ADC3_IRQHandler+0x10>)
 80023b6:	f000 fe59 	bl	800306c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	240001e4 	.word	0x240001e4

080023c4 <COMP1_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 80023c8:	4803      	ldr	r0, [pc, #12]	; (80023d8 <COMP1_IRQHandler+0x14>)
 80023ca:	f002 fb25 	bl	8004a18 <HAL_COMP_IRQHandler>
  HAL_COMP_IRQHandler(&hcomp2);
 80023ce:	4803      	ldr	r0, [pc, #12]	; (80023dc <COMP1_IRQHandler+0x18>)
 80023d0:	f002 fb22 	bl	8004a18 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 80023d4:	bf00      	nop
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	240003b0 	.word	0x240003b0
 80023dc:	240003dc 	.word	0x240003dc

080023e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80023e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002418 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80023e4:	f7fe f8fa 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023e8:	480c      	ldr	r0, [pc, #48]	; (800241c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023ea:	490d      	ldr	r1, [pc, #52]	; (8002420 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023ec:	4a0d      	ldr	r2, [pc, #52]	; (8002424 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023f0:	e002      	b.n	80023f8 <LoopCopyDataInit>

080023f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023f6:	3304      	adds	r3, #4

080023f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023fc:	d3f9      	bcc.n	80023f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023fe:	4a0a      	ldr	r2, [pc, #40]	; (8002428 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002400:	4c0a      	ldr	r4, [pc, #40]	; (800242c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002404:	e001      	b.n	800240a <LoopFillZerobss>

08002406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002408:	3204      	adds	r2, #4

0800240a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800240a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800240c:	d3fb      	bcc.n	8002406 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800240e:	f010 fdbd 	bl	8012f8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002412:	f7fe f979 	bl	8000708 <main>
  bx  lr
 8002416:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002418:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800241c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002420:	24000100 	.word	0x24000100
  ldr r2, =_sidata
 8002424:	080130b0 	.word	0x080130b0
  ldr r2, =_sbss
 8002428:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 800242c:	240686bc 	.word	0x240686bc

08002430 <BDMA_Channel0_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002430:	e7fe      	b.n	8002430 <BDMA_Channel0_IRQHandler>
	...

08002434 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800243a:	2003      	movs	r0, #3
 800243c:	f002 fc54 	bl	8004ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002440:	f007 fe06 	bl	800a050 <HAL_RCC_GetSysClockFreq>
 8002444:	4602      	mov	r2, r0
 8002446:	4b15      	ldr	r3, [pc, #84]	; (800249c <HAL_Init+0x68>)
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	0a1b      	lsrs	r3, r3, #8
 800244c:	f003 030f 	and.w	r3, r3, #15
 8002450:	4913      	ldr	r1, [pc, #76]	; (80024a0 <HAL_Init+0x6c>)
 8002452:	5ccb      	ldrb	r3, [r1, r3]
 8002454:	f003 031f 	and.w	r3, r3, #31
 8002458:	fa22 f303 	lsr.w	r3, r2, r3
 800245c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800245e:	4b0f      	ldr	r3, [pc, #60]	; (800249c <HAL_Init+0x68>)
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	4a0e      	ldr	r2, [pc, #56]	; (80024a0 <HAL_Init+0x6c>)
 8002468:	5cd3      	ldrb	r3, [r2, r3]
 800246a:	f003 031f 	and.w	r3, r3, #31
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	fa22 f303 	lsr.w	r3, r2, r3
 8002474:	4a0b      	ldr	r2, [pc, #44]	; (80024a4 <HAL_Init+0x70>)
 8002476:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002478:	4a0b      	ldr	r2, [pc, #44]	; (80024a8 <HAL_Init+0x74>)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800247e:	2000      	movs	r0, #0
 8002480:	f000 f814 	bl	80024ac <HAL_InitTick>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e002      	b.n	8002494 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800248e:	f7ff fc0d 	bl	8001cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	58024400 	.word	0x58024400
 80024a0:	08013060 	.word	0x08013060
 80024a4:	24000004 	.word	0x24000004
 80024a8:	24000000 	.word	0x24000000

080024ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80024b4:	4b15      	ldr	r3, [pc, #84]	; (800250c <HAL_InitTick+0x60>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e021      	b.n	8002504 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80024c0:	4b13      	ldr	r3, [pc, #76]	; (8002510 <HAL_InitTick+0x64>)
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	4b11      	ldr	r3, [pc, #68]	; (800250c <HAL_InitTick+0x60>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	4619      	mov	r1, r3
 80024ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80024d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d6:	4618      	mov	r0, r3
 80024d8:	f002 fc39 	bl	8004d4e <HAL_SYSTICK_Config>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e00e      	b.n	8002504 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b0f      	cmp	r3, #15
 80024ea:	d80a      	bhi.n	8002502 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024ec:	2200      	movs	r2, #0
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	f04f 30ff 	mov.w	r0, #4294967295
 80024f4:	f002 fc03 	bl	8004cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024f8:	4a06      	ldr	r2, [pc, #24]	; (8002514 <HAL_InitTick+0x68>)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
 8002500:	e000      	b.n	8002504 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
}
 8002504:	4618      	mov	r0, r3
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	2400000c 	.word	0x2400000c
 8002510:	24000000 	.word	0x24000000
 8002514:	24000008 	.word	0x24000008

08002518 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800251c:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_IncTick+0x20>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	461a      	mov	r2, r3
 8002522:	4b06      	ldr	r3, [pc, #24]	; (800253c <HAL_IncTick+0x24>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4413      	add	r3, r2
 8002528:	4a04      	ldr	r2, [pc, #16]	; (800253c <HAL_IncTick+0x24>)
 800252a:	6013      	str	r3, [r2, #0]
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	2400000c 	.word	0x2400000c
 800253c:	24067458 	.word	0x24067458

08002540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  return uwTick;
 8002544:	4b03      	ldr	r3, [pc, #12]	; (8002554 <HAL_GetTick+0x14>)
 8002546:	681b      	ldr	r3, [r3, #0]
}
 8002548:	4618      	mov	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	24067458 	.word	0x24067458

08002558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002560:	f7ff ffee 	bl	8002540 <HAL_GetTick>
 8002564:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002570:	d005      	beq.n	800257e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002572:	4b0a      	ldr	r3, [pc, #40]	; (800259c <HAL_Delay+0x44>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	461a      	mov	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4413      	add	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800257e:	bf00      	nop
 8002580:	f7ff ffde 	bl	8002540 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	429a      	cmp	r2, r3
 800258e:	d8f7      	bhi.n	8002580 <HAL_Delay+0x28>
  {
  }
}
 8002590:	bf00      	nop
 8002592:	bf00      	nop
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	2400000c 	.word	0x2400000c

080025a0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80025a4:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <HAL_GetREVID+0x14>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	0c1b      	lsrs	r3, r3, #16
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	5c001000 	.word	0x5c001000

080025b8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f023 0202 	bic.w	r2, r3, #2
 80025c8:	4904      	ldr	r1, [pc, #16]	; (80025dc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	600b      	str	r3, [r1, #0]
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	58003c00 	.word	0x58003c00

080025e0 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80025e4:	4b05      	ldr	r3, [pc, #20]	; (80025fc <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a04      	ldr	r2, [pc, #16]	; (80025fc <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80025ea:	f023 0301 	bic.w	r3, r3, #1
 80025ee:	6013      	str	r3, [r2, #0]
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	58003c00 	.word	0x58003c00

08002600 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800260a:	4b07      	ldr	r3, [pc, #28]	; (8002628 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	43db      	mvns	r3, r3
 8002612:	401a      	ands	r2, r3
 8002614:	4904      	ldr	r1, [pc, #16]	; (8002628 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	4313      	orrs	r3, r2
 800261a:	604b      	str	r3, [r1, #4]
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	58000400 	.word	0x58000400

0800262c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	609a      	str	r2, [r3, #8]
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	609a      	str	r2, [r3, #8]
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002688:	4618      	mov	r0, r3
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002694:	b480      	push	{r7}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
 80026a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	3360      	adds	r3, #96	; 0x60
 80026a6:	461a      	mov	r2, r3
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	430b      	orrs	r3, r1
 80026c2:	431a      	orrs	r2, r3
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80026c8:	bf00      	nop
 80026ca:	371c      	adds	r7, #28
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f003 031f 	and.w	r3, r3, #31
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	fa01 f303 	lsl.w	r3, r1, r3
 80026f4:	431a      	orrs	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	611a      	str	r2, [r3, #16]
}
 80026fa:	bf00      	nop
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002706:	b480      	push	{r7}
 8002708:	b087      	sub	sp, #28
 800270a:	af00      	add	r7, sp, #0
 800270c:	60f8      	str	r0, [r7, #12]
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	3360      	adds	r3, #96	; 0x60
 8002716:	461a      	mov	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	431a      	orrs	r2, r3
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	601a      	str	r2, [r3, #0]
  }
}
 8002730:	bf00      	nop
 8002732:	371c      	adds	r7, #28
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002750:	2301      	movs	r3, #1
 8002752:	e000      	b.n	8002756 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002762:	b480      	push	{r7}
 8002764:	b087      	sub	sp, #28
 8002766:	af00      	add	r7, sp, #0
 8002768:	60f8      	str	r0, [r7, #12]
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	3330      	adds	r3, #48	; 0x30
 8002772:	461a      	mov	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	0a1b      	lsrs	r3, r3, #8
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	f003 030c 	and.w	r3, r3, #12
 800277e:	4413      	add	r3, r2
 8002780:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	f003 031f 	and.w	r3, r3, #31
 800278c:	211f      	movs	r1, #31
 800278e:	fa01 f303 	lsl.w	r3, r1, r3
 8002792:	43db      	mvns	r3, r3
 8002794:	401a      	ands	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	0e9b      	lsrs	r3, r3, #26
 800279a:	f003 011f 	and.w	r1, r3, #31
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	f003 031f 	and.w	r3, r3, #31
 80027a4:	fa01 f303 	lsl.w	r3, r1, r3
 80027a8:	431a      	orrs	r2, r3
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80027ae:	bf00      	nop
 80027b0:	371c      	adds	r7, #28
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f023 0203 	bic.w	r2, r3, #3
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	60da      	str	r2, [r3, #12]
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ec:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80027f4:	2301      	movs	r3, #1
 80027f6:	e000      	b.n	80027fa <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002806:	b480      	push	{r7}
 8002808:	b087      	sub	sp, #28
 800280a:	af00      	add	r7, sp, #0
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	3314      	adds	r3, #20
 8002816:	461a      	mov	r2, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	0e5b      	lsrs	r3, r3, #25
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	f003 0304 	and.w	r3, r3, #4
 8002822:	4413      	add	r3, r2
 8002824:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	0d1b      	lsrs	r3, r3, #20
 800282e:	f003 031f 	and.w	r3, r3, #31
 8002832:	2107      	movs	r1, #7
 8002834:	fa01 f303 	lsl.w	r3, r1, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	401a      	ands	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	0d1b      	lsrs	r3, r3, #20
 8002840:	f003 031f 	and.w	r3, r3, #31
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	fa01 f303 	lsl.w	r3, r1, r3
 800284a:	431a      	orrs	r2, r3
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002850:	bf00      	nop
 8002852:	371c      	adds	r7, #28
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002874:	43db      	mvns	r3, r3
 8002876:	401a      	ands	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f003 0318 	and.w	r3, r3, #24
 800287e:	4908      	ldr	r1, [pc, #32]	; (80028a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002880:	40d9      	lsrs	r1, r3
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	400b      	ands	r3, r1
 8002886:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800288a:	431a      	orrs	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002892:	bf00      	nop
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	000fffff 	.word	0x000fffff

080028a4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 031f 	and.w	r3, r3, #31
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	4b04      	ldr	r3, [pc, #16]	; (80028fc <LL_ADC_DisableDeepPowerDown+0x20>)
 80028ea:	4013      	ands	r3, r2
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6093      	str	r3, [r2, #8]
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	5fffffc0 	.word	0x5fffffc0

08002900 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002910:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002914:	d101      	bne.n	800291a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002916:	2301      	movs	r3, #1
 8002918:	e000      	b.n	800291c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	4b05      	ldr	r3, [pc, #20]	; (800294c <LL_ADC_EnableInternalRegulator+0x24>)
 8002936:	4013      	ands	r3, r2
 8002938:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	6fffffc0 	.word	0x6fffffc0

08002950 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002960:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002964:	d101      	bne.n	800296a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	4b05      	ldr	r3, [pc, #20]	; (800299c <LL_ADC_Enable+0x24>)
 8002986:	4013      	ands	r3, r2
 8002988:	f043 0201 	orr.w	r2, r3, #1
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	7fffffc0 	.word	0x7fffffc0

080029a0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <LL_ADC_Disable+0x24>)
 80029ae:	4013      	ands	r3, r2
 80029b0:	f043 0202 	orr.w	r2, r3, #2
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	7fffffc0 	.word	0x7fffffc0

080029c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d101      	bne.n	80029e0 <LL_ADC_IsEnabled+0x18>
 80029dc:	2301      	movs	r3, #1
 80029de:	e000      	b.n	80029e2 <LL_ADC_IsEnabled+0x1a>
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d101      	bne.n	8002a06 <LL_ADC_IsDisableOngoing+0x18>
 8002a02:	2301      	movs	r3, #1
 8002a04:	e000      	b.n	8002a08 <LL_ADC_IsDisableOngoing+0x1a>
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <LL_ADC_REG_StartConversion+0x24>)
 8002a22:	4013      	ands	r3, r2
 8002a24:	f043 0204 	orr.w	r2, r3, #4
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	7fffffc0 	.word	0x7fffffc0

08002a3c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <LL_ADC_REG_StopConversion+0x24>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	f043 0210 	orr.w	r2, r3, #16
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	7fffffc0 	.word	0x7fffffc0

08002a64 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d101      	bne.n	8002a7c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e000      	b.n	8002a7e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
	...

08002a8c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <LL_ADC_INJ_StopConversion+0x24>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	f043 0220 	orr.w	r2, r3, #32
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	7fffffc0 	.word	0x7fffffc0

08002ab4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 0308 	and.w	r3, r3, #8
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d101      	bne.n	8002acc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e000      	b.n	8002ace <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
	...

08002adc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002adc:	b590      	push	{r4, r7, lr}
 8002ade:	b089      	sub	sp, #36	; 0x24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e18f      	b.n	8002e16 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d109      	bne.n	8002b18 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff f8fd 	bl	8001d04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff feef 	bl	8002900 <LL_ADC_IsDeepPowerDownEnabled>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d004      	beq.n	8002b32 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff fed5 	bl	80028dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff ff0a 	bl	8002950 <LL_ADC_IsInternalRegulatorEnabled>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d114      	bne.n	8002b6c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff feee 	bl	8002928 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b4c:	4b87      	ldr	r3, [pc, #540]	; (8002d6c <HAL_ADC_Init+0x290>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	099b      	lsrs	r3, r3, #6
 8002b52:	4a87      	ldr	r2, [pc, #540]	; (8002d70 <HAL_ADC_Init+0x294>)
 8002b54:	fba2 2303 	umull	r2, r3, r2, r3
 8002b58:	099b      	lsrs	r3, r3, #6
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b5e:	e002      	b.n	8002b66 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1f9      	bne.n	8002b60 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff feed 	bl	8002950 <LL_ADC_IsInternalRegulatorEnabled>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10d      	bne.n	8002b98 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b80:	f043 0210 	orr.w	r2, r3, #16
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8c:	f043 0201 	orr.w	r2, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff ff61 	bl	8002a64 <LL_ADC_REG_IsConversionOngoing>
 8002ba2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba8:	f003 0310 	and.w	r3, r3, #16
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f040 8129 	bne.w	8002e04 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f040 8125 	bne.w	8002e04 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbe:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002bc2:	f043 0202 	orr.w	r2, r3, #2
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff fefa 	bl	80029c8 <LL_ADC_IsEnabled>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d136      	bne.n	8002c48 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a65      	ldr	r2, [pc, #404]	; (8002d74 <HAL_ADC_Init+0x298>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d004      	beq.n	8002bee <HAL_ADC_Init+0x112>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a63      	ldr	r2, [pc, #396]	; (8002d78 <HAL_ADC_Init+0x29c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d10e      	bne.n	8002c0c <HAL_ADC_Init+0x130>
 8002bee:	4861      	ldr	r0, [pc, #388]	; (8002d74 <HAL_ADC_Init+0x298>)
 8002bf0:	f7ff feea 	bl	80029c8 <LL_ADC_IsEnabled>
 8002bf4:	4604      	mov	r4, r0
 8002bf6:	4860      	ldr	r0, [pc, #384]	; (8002d78 <HAL_ADC_Init+0x29c>)
 8002bf8:	f7ff fee6 	bl	80029c8 <LL_ADC_IsEnabled>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	4323      	orrs	r3, r4
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	bf0c      	ite	eq
 8002c04:	2301      	moveq	r3, #1
 8002c06:	2300      	movne	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	e008      	b.n	8002c1e <HAL_ADC_Init+0x142>
 8002c0c:	485b      	ldr	r0, [pc, #364]	; (8002d7c <HAL_ADC_Init+0x2a0>)
 8002c0e:	f7ff fedb 	bl	80029c8 <LL_ADC_IsEnabled>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	bf0c      	ite	eq
 8002c18:	2301      	moveq	r3, #1
 8002c1a:	2300      	movne	r3, #0
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d012      	beq.n	8002c48 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a53      	ldr	r2, [pc, #332]	; (8002d74 <HAL_ADC_Init+0x298>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d004      	beq.n	8002c36 <HAL_ADC_Init+0x15a>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a51      	ldr	r2, [pc, #324]	; (8002d78 <HAL_ADC_Init+0x29c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d101      	bne.n	8002c3a <HAL_ADC_Init+0x15e>
 8002c36:	4a52      	ldr	r2, [pc, #328]	; (8002d80 <HAL_ADC_Init+0x2a4>)
 8002c38:	e000      	b.n	8002c3c <HAL_ADC_Init+0x160>
 8002c3a:	4a52      	ldr	r2, [pc, #328]	; (8002d84 <HAL_ADC_Init+0x2a8>)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	4619      	mov	r1, r3
 8002c42:	4610      	mov	r0, r2
 8002c44:	f7ff fcf2 	bl	800262c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002c48:	f7ff fcaa 	bl	80025a0 <HAL_GetREVID>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d914      	bls.n	8002c80 <HAL_ADC_Init+0x1a4>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2b10      	cmp	r3, #16
 8002c5c:	d110      	bne.n	8002c80 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	7d5b      	ldrb	r3, [r3, #21]
 8002c62:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c68:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002c6e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	7f1b      	ldrb	r3, [r3, #28]
 8002c74:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002c76:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c78:	f043 030c 	orr.w	r3, r3, #12
 8002c7c:	61bb      	str	r3, [r7, #24]
 8002c7e:	e00d      	b.n	8002c9c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	7d5b      	ldrb	r3, [r3, #21]
 8002c84:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c8a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002c90:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	7f1b      	ldrb	r3, [r3, #28]
 8002c96:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	7f1b      	ldrb	r3, [r3, #28]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d106      	bne.n	8002cb2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	045b      	lsls	r3, r3, #17
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d009      	beq.n	8002cce <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68da      	ldr	r2, [r3, #12]
 8002cd4:	4b2c      	ldr	r3, [pc, #176]	; (8002d88 <HAL_ADC_Init+0x2ac>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6812      	ldr	r2, [r2, #0]
 8002cdc:	69b9      	ldr	r1, [r7, #24]
 8002cde:	430b      	orrs	r3, r1
 8002ce0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff febc 	bl	8002a64 <LL_ADC_REG_IsConversionOngoing>
 8002cec:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff fede 	bl	8002ab4 <LL_ADC_INJ_IsConversionOngoing>
 8002cf8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d15f      	bne.n	8002dc0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d15c      	bne.n	8002dc0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	7d1b      	ldrb	r3, [r3, #20]
 8002d0a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002d10:	4313      	orrs	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	4b1c      	ldr	r3, [pc, #112]	; (8002d8c <HAL_ADC_Init+0x2b0>)
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	6812      	ldr	r2, [r2, #0]
 8002d22:	69b9      	ldr	r1, [r7, #24]
 8002d24:	430b      	orrs	r3, r1
 8002d26:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d130      	bne.n	8002d94 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	691a      	ldr	r2, [r3, #16]
 8002d3e:	4b14      	ldr	r3, [pc, #80]	; (8002d90 <HAL_ADC_Init+0x2b4>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d46:	3a01      	subs	r2, #1
 8002d48:	0411      	lsls	r1, r2, #16
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d4e:	4311      	orrs	r1, r2
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d54:	4311      	orrs	r1, r2
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0201 	orr.w	r2, r2, #1
 8002d66:	611a      	str	r2, [r3, #16]
 8002d68:	e01c      	b.n	8002da4 <HAL_ADC_Init+0x2c8>
 8002d6a:	bf00      	nop
 8002d6c:	24000000 	.word	0x24000000
 8002d70:	053e2d63 	.word	0x053e2d63
 8002d74:	40022000 	.word	0x40022000
 8002d78:	40022100 	.word	0x40022100
 8002d7c:	58026000 	.word	0x58026000
 8002d80:	40022300 	.word	0x40022300
 8002d84:	58026300 	.word	0x58026300
 8002d88:	fff0c003 	.word	0xfff0c003
 8002d8c:	ffffbffc 	.word	0xffffbffc
 8002d90:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691a      	ldr	r2, [r3, #16]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0201 	bic.w	r2, r2, #1
 8002da2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f001 f92e 	bl	800401c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d10c      	bne.n	8002de2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	f023 010f 	bic.w	r1, r3, #15
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	1e5a      	subs	r2, r3, #1
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
 8002de0:	e007      	b.n	8002df2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 020f 	bic.w	r2, r2, #15
 8002df0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df6:	f023 0303 	bic.w	r3, r3, #3
 8002dfa:	f043 0201 	orr.w	r2, r3, #1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	655a      	str	r2, [r3, #84]	; 0x54
 8002e02:	e007      	b.n	8002e14 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e08:	f043 0210 	orr.w	r2, r3, #16
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e14:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3724      	adds	r7, #36	; 0x24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd90      	pop	{r4, r7, pc}
 8002e1e:	bf00      	nop

08002e20 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a55      	ldr	r2, [pc, #340]	; (8002f88 <HAL_ADC_Start_DMA+0x168>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d004      	beq.n	8002e40 <HAL_ADC_Start_DMA+0x20>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a54      	ldr	r2, [pc, #336]	; (8002f8c <HAL_ADC_Start_DMA+0x16c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d101      	bne.n	8002e44 <HAL_ADC_Start_DMA+0x24>
 8002e40:	4b53      	ldr	r3, [pc, #332]	; (8002f90 <HAL_ADC_Start_DMA+0x170>)
 8002e42:	e000      	b.n	8002e46 <HAL_ADC_Start_DMA+0x26>
 8002e44:	4b53      	ldr	r3, [pc, #332]	; (8002f94 <HAL_ADC_Start_DMA+0x174>)
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff fd2c 	bl	80028a4 <LL_ADC_GetMultimode>
 8002e4c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff fe06 	bl	8002a64 <LL_ADC_REG_IsConversionOngoing>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f040 808c 	bne.w	8002f78 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d101      	bne.n	8002e6e <HAL_ADC_Start_DMA+0x4e>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e087      	b.n	8002f7e <HAL_ADC_Start_DMA+0x15e>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d005      	beq.n	8002e88 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	2b05      	cmp	r3, #5
 8002e80:	d002      	beq.n	8002e88 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	2b09      	cmp	r3, #9
 8002e86:	d170      	bne.n	8002f6a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 ff49 	bl	8003d20 <ADC_Enable>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002e92:	7dfb      	ldrb	r3, [r7, #23]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d163      	bne.n	8002f60 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e9c:	4b3e      	ldr	r3, [pc, #248]	; (8002f98 <HAL_ADC_Start_DMA+0x178>)
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a37      	ldr	r2, [pc, #220]	; (8002f8c <HAL_ADC_Start_DMA+0x16c>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d002      	beq.n	8002eb8 <HAL_ADC_Start_DMA+0x98>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	e000      	b.n	8002eba <HAL_ADC_Start_DMA+0x9a>
 8002eb8:	4b33      	ldr	r3, [pc, #204]	; (8002f88 <HAL_ADC_Start_DMA+0x168>)
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	6812      	ldr	r2, [r2, #0]
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d002      	beq.n	8002ec8 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d105      	bne.n	8002ed4 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ecc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d006      	beq.n	8002eee <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee4:	f023 0206 	bic.w	r2, r3, #6
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	659a      	str	r2, [r3, #88]	; 0x58
 8002eec:	e002      	b.n	8002ef4 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef8:	4a28      	ldr	r2, [pc, #160]	; (8002f9c <HAL_ADC_Start_DMA+0x17c>)
 8002efa:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f00:	4a27      	ldr	r2, [pc, #156]	; (8002fa0 <HAL_ADC_Start_DMA+0x180>)
 8002f02:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f08:	4a26      	ldr	r2, [pc, #152]	; (8002fa4 <HAL_ADC_Start_DMA+0x184>)
 8002f0a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	221c      	movs	r2, #28
 8002f12:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0210 	orr.w	r2, r2, #16
 8002f2a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	4619      	mov	r1, r3
 8002f36:	4610      	mov	r0, r2
 8002f38:	f7ff fc3f 	bl	80027ba <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	3340      	adds	r3, #64	; 0x40
 8002f46:	4619      	mov	r1, r3
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f002 fc46 	bl	80057dc <HAL_DMA_Start_IT>
 8002f50:	4603      	mov	r3, r0
 8002f52:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff fd5b 	bl	8002a14 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002f5e:	e00d      	b.n	8002f7c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002f68:	e008      	b.n	8002f7c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002f76:	e001      	b.n	8002f7c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f78:	2302      	movs	r3, #2
 8002f7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40022000 	.word	0x40022000
 8002f8c:	40022100 	.word	0x40022100
 8002f90:	40022300 	.word	0x40022300
 8002f94:	58026300 	.word	0x58026300
 8002f98:	fffff0fe 	.word	0xfffff0fe
 8002f9c:	08003ef3 	.word	0x08003ef3
 8002fa0:	08003fcb 	.word	0x08003fcb
 8002fa4:	08003fe7 	.word	0x08003fe7

08002fa8 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d101      	bne.n	8002fbe <HAL_ADC_Stop_DMA+0x16>
 8002fba:	2302      	movs	r3, #2
 8002fbc:	e04f      	b.n	800305e <HAL_ADC_Stop_DMA+0xb6>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002fc6:	2103      	movs	r1, #3
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 fded 	bl	8003ba8 <ADC_ConversionStop>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d13d      	bne.n	8003054 <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0203 	bic.w	r2, r2, #3
 8002fe6:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d10f      	bne.n	8003016 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f002 fe58 	bl	8005cb0 <HAL_DMA_Abort>
 8003000:	4603      	mov	r3, r0
 8003002:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003004:	7bfb      	ldrb	r3, [r7, #15]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d005      	beq.n	8003016 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0210 	bic.w	r2, r2, #16
 8003024:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8003026:	7bfb      	ldrb	r3, [r7, #15]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d105      	bne.n	8003038 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 ff01 	bl	8003e34 <ADC_Disable>
 8003032:	4603      	mov	r3, r0
 8003034:	73fb      	strb	r3, [r7, #15]
 8003036:	e002      	b.n	800303e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 fefb 	bl	8003e34 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800303e:	7bfb      	ldrb	r3, [r7, #15]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d107      	bne.n	8003054 <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003048:	4b07      	ldr	r3, [pc, #28]	; (8003068 <HAL_ADC_Stop_DMA+0xc0>)
 800304a:	4013      	ands	r3, r2
 800304c:	f043 0201 	orr.w	r2, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800305c:	7bfb      	ldrb	r3, [r7, #15]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	ffffeefe 	.word	0xffffeefe

0800306c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b08a      	sub	sp, #40	; 0x28
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003074:	2300      	movs	r3, #0
 8003076:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a87      	ldr	r2, [pc, #540]	; (80032ac <HAL_ADC_IRQHandler+0x240>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d004      	beq.n	800309c <HAL_ADC_IRQHandler+0x30>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a86      	ldr	r2, [pc, #536]	; (80032b0 <HAL_ADC_IRQHandler+0x244>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d101      	bne.n	80030a0 <HAL_ADC_IRQHandler+0x34>
 800309c:	4b85      	ldr	r3, [pc, #532]	; (80032b4 <HAL_ADC_IRQHandler+0x248>)
 800309e:	e000      	b.n	80030a2 <HAL_ADC_IRQHandler+0x36>
 80030a0:	4b85      	ldr	r3, [pc, #532]	; (80032b8 <HAL_ADC_IRQHandler+0x24c>)
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff fbfe 	bl	80028a4 <LL_ADC_GetMultimode>
 80030a8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d017      	beq.n	80030e4 <HAL_ADC_IRQHandler+0x78>
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d012      	beq.n	80030e4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c2:	f003 0310 	and.w	r3, r3, #16
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d105      	bne.n	80030d6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ce:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f001 f990 	bl	80043fc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2202      	movs	r2, #2
 80030e2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d004      	beq.n	80030f8 <HAL_ADC_IRQHandler+0x8c>
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10a      	bne.n	800310e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 8083 	beq.w	800320a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d07d      	beq.n	800320a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	2b00      	cmp	r3, #0
 8003118:	d105      	bne.n	8003126 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff fb06 	bl	800273c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d062      	beq.n	80031fc <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a5d      	ldr	r2, [pc, #372]	; (80032b0 <HAL_ADC_IRQHandler+0x244>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d002      	beq.n	8003146 <HAL_ADC_IRQHandler+0xda>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	e000      	b.n	8003148 <HAL_ADC_IRQHandler+0xdc>
 8003146:	4b59      	ldr	r3, [pc, #356]	; (80032ac <HAL_ADC_IRQHandler+0x240>)
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	6812      	ldr	r2, [r2, #0]
 800314c:	4293      	cmp	r3, r2
 800314e:	d008      	beq.n	8003162 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d005      	beq.n	8003162 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2b05      	cmp	r3, #5
 800315a:	d002      	beq.n	8003162 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	2b09      	cmp	r3, #9
 8003160:	d104      	bne.n	800316c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	623b      	str	r3, [r7, #32]
 800316a:	e00c      	b.n	8003186 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a4f      	ldr	r2, [pc, #316]	; (80032b0 <HAL_ADC_IRQHandler+0x244>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d002      	beq.n	800317c <HAL_ADC_IRQHandler+0x110>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	e000      	b.n	800317e <HAL_ADC_IRQHandler+0x112>
 800317c:	4b4b      	ldr	r3, [pc, #300]	; (80032ac <HAL_ADC_IRQHandler+0x240>)
 800317e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d135      	bne.n	80031fc <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b08      	cmp	r3, #8
 800319c:	d12e      	bne.n	80031fc <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff fc5e 	bl	8002a64 <LL_ADC_REG_IsConversionOngoing>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d11a      	bne.n	80031e4 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 020c 	bic.w	r2, r2, #12
 80031bc:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d112      	bne.n	80031fc <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031da:	f043 0201 	orr.w	r2, r3, #1
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	655a      	str	r2, [r3, #84]	; 0x54
 80031e2:	e00b      	b.n	80031fc <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e8:	f043 0210 	orr.w	r2, r3, #16
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f4:	f043 0201 	orr.w	r2, r3, #1
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f7fe f9fd 	bl	80015fc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	220c      	movs	r2, #12
 8003208:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	f003 0320 	and.w	r3, r3, #32
 8003210:	2b00      	cmp	r3, #0
 8003212:	d004      	beq.n	800321e <HAL_ADC_IRQHandler+0x1b2>
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	f003 0320 	and.w	r3, r3, #32
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10b      	bne.n	8003236 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 80a0 	beq.w	800336a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 809a 	beq.w	800336a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323a:	f003 0310 	and.w	r3, r3, #16
 800323e:	2b00      	cmp	r3, #0
 8003240:	d105      	bne.n	800324e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003246:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff fac4 	bl	80027e0 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003258:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff fa6c 	bl	800273c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003264:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a11      	ldr	r2, [pc, #68]	; (80032b0 <HAL_ADC_IRQHandler+0x244>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d002      	beq.n	8003276 <HAL_ADC_IRQHandler+0x20a>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	e000      	b.n	8003278 <HAL_ADC_IRQHandler+0x20c>
 8003276:	4b0d      	ldr	r3, [pc, #52]	; (80032ac <HAL_ADC_IRQHandler+0x240>)
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6812      	ldr	r2, [r2, #0]
 800327c:	4293      	cmp	r3, r2
 800327e:	d008      	beq.n	8003292 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d005      	beq.n	8003292 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2b06      	cmp	r3, #6
 800328a:	d002      	beq.n	8003292 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	2b07      	cmp	r3, #7
 8003290:	d104      	bne.n	800329c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	623b      	str	r3, [r7, #32]
 800329a:	e014      	b.n	80032c6 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a03      	ldr	r2, [pc, #12]	; (80032b0 <HAL_ADC_IRQHandler+0x244>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d00a      	beq.n	80032bc <HAL_ADC_IRQHandler+0x250>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	e008      	b.n	80032be <HAL_ADC_IRQHandler+0x252>
 80032ac:	40022000 	.word	0x40022000
 80032b0:	40022100 	.word	0x40022100
 80032b4:	40022300 	.word	0x40022300
 80032b8:	58026300 	.word	0x58026300
 80032bc:	4b84      	ldr	r3, [pc, #528]	; (80034d0 <HAL_ADC_IRQHandler+0x464>)
 80032be:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d047      	beq.n	800335c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80032cc:	6a3b      	ldr	r3, [r7, #32]
 80032ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d007      	beq.n	80032e6 <HAL_ADC_IRQHandler+0x27a>
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d03f      	beq.n	800335c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d13a      	bne.n	800335c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f0:	2b40      	cmp	r3, #64	; 0x40
 80032f2:	d133      	bne.n	800335c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d12e      	bne.n	800335c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff fbd6 	bl	8002ab4 <LL_ADC_INJ_IsConversionOngoing>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d11a      	bne.n	8003344 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800331c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003322:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003332:	2b00      	cmp	r3, #0
 8003334:	d112      	bne.n	800335c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333a:	f043 0201 	orr.w	r2, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	655a      	str	r2, [r3, #84]	; 0x54
 8003342:	e00b      	b.n	800335c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003348:	f043 0210 	orr.w	r2, r3, #16
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003354:	f043 0201 	orr.w	r2, r3, #1
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f001 f825 	bl	80043ac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2260      	movs	r2, #96	; 0x60
 8003368:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003370:	2b00      	cmp	r3, #0
 8003372:	d011      	beq.n	8003398 <HAL_ADC_IRQHandler+0x32c>
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00c      	beq.n	8003398 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003382:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f8a8 	bl	80034e0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2280      	movs	r2, #128	; 0x80
 8003396:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d012      	beq.n	80033c8 <HAL_ADC_IRQHandler+0x35c>
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00d      	beq.n	80033c8 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f001 f80b 	bl	80043d4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033c6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d012      	beq.n	80033f8 <HAL_ADC_IRQHandler+0x38c>
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00d      	beq.n	80033f8 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 fffd 	bl	80043e8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033f6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d043      	beq.n	800348a <HAL_ADC_IRQHandler+0x41e>
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	f003 0310 	and.w	r3, r3, #16
 8003408:	2b00      	cmp	r3, #0
 800340a:	d03e      	beq.n	800348a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	2b00      	cmp	r3, #0
 8003412:	d102      	bne.n	800341a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003414:	2301      	movs	r3, #1
 8003416:	627b      	str	r3, [r7, #36]	; 0x24
 8003418:	e021      	b.n	800345e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d015      	beq.n	800344c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a2a      	ldr	r2, [pc, #168]	; (80034d0 <HAL_ADC_IRQHandler+0x464>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d004      	beq.n	8003434 <HAL_ADC_IRQHandler+0x3c8>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a29      	ldr	r2, [pc, #164]	; (80034d4 <HAL_ADC_IRQHandler+0x468>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d101      	bne.n	8003438 <HAL_ADC_IRQHandler+0x3cc>
 8003434:	4b28      	ldr	r3, [pc, #160]	; (80034d8 <HAL_ADC_IRQHandler+0x46c>)
 8003436:	e000      	b.n	800343a <HAL_ADC_IRQHandler+0x3ce>
 8003438:	4b28      	ldr	r3, [pc, #160]	; (80034dc <HAL_ADC_IRQHandler+0x470>)
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff fa40 	bl	80028c0 <LL_ADC_GetMultiDMATransfer>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00b      	beq.n	800345e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003446:	2301      	movs	r3, #1
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
 800344a:	e008      	b.n	800345e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800345a:	2301      	movs	r3, #1
 800345c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	2b01      	cmp	r3, #1
 8003462:	d10e      	bne.n	8003482 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003468:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003474:	f043 0202 	orr.w	r2, r3, #2
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f839 	bl	80034f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2210      	movs	r2, #16
 8003488:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003490:	2b00      	cmp	r3, #0
 8003492:	d018      	beq.n	80034c6 <HAL_ADC_IRQHandler+0x45a>
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800349a:	2b00      	cmp	r3, #0
 800349c:	d013      	beq.n	80034c6 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ae:	f043 0208 	orr.w	r2, r3, #8
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034be:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 ff7d 	bl	80043c0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80034c6:	bf00      	nop
 80034c8:	3728      	adds	r7, #40	; 0x28
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40022000 	.word	0x40022000
 80034d4:	40022100 	.word	0x40022100
 80034d8:	40022300 	.word	0x40022300
 80034dc:	58026300 	.word	0x58026300

080034e0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003508:	b590      	push	{r4, r7, lr}
 800350a:	b0a1      	sub	sp, #132	; 0x84
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003512:	2300      	movs	r3, #0
 8003514:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003518:	2300      	movs	r3, #0
 800351a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	4a9d      	ldr	r2, [pc, #628]	; (8003798 <HAL_ADC_ConfigChannel+0x290>)
 8003522:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800352a:	2b01      	cmp	r3, #1
 800352c:	d101      	bne.n	8003532 <HAL_ADC_ConfigChannel+0x2a>
 800352e:	2302      	movs	r3, #2
 8003530:	e321      	b.n	8003b76 <HAL_ADC_ConfigChannel+0x66e>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f7ff fa90 	bl	8002a64 <LL_ADC_REG_IsConversionOngoing>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	f040 8306 	bne.w	8003b58 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003554:	2b00      	cmp	r3, #0
 8003556:	d108      	bne.n	800356a <HAL_ADC_ConfigChannel+0x62>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	0e9b      	lsrs	r3, r3, #26
 800355e:	f003 031f 	and.w	r3, r3, #31
 8003562:	2201      	movs	r2, #1
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	e016      	b.n	8003598 <HAL_ADC_ConfigChannel+0x90>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003570:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003572:	fa93 f3a3 	rbit	r3, r3
 8003576:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003578:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800357a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800357c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003582:	2320      	movs	r3, #32
 8003584:	e003      	b.n	800358e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003586:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003588:	fab3 f383 	clz	r3, r3
 800358c:	b2db      	uxtb	r3, r3
 800358e:	f003 031f 	and.w	r3, r3, #31
 8003592:	2201      	movs	r2, #1
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6812      	ldr	r2, [r2, #0]
 800359c:	69d1      	ldr	r1, [r2, #28]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6812      	ldr	r2, [r2, #0]
 80035a2:	430b      	orrs	r3, r1
 80035a4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6818      	ldr	r0, [r3, #0]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	6859      	ldr	r1, [r3, #4]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	461a      	mov	r2, r3
 80035b4:	f7ff f8d5 	bl	8002762 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff fa51 	bl	8002a64 <LL_ADC_REG_IsConversionOngoing>
 80035c2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff fa73 	bl	8002ab4 <LL_ADC_INJ_IsConversionOngoing>
 80035ce:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f040 80b3 	bne.w	800373e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f040 80af 	bne.w	800373e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6818      	ldr	r0, [r3, #0]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	6819      	ldr	r1, [r3, #0]
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	461a      	mov	r2, r3
 80035ee:	f7ff f90a 	bl	8002806 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80035f2:	4b6a      	ldr	r3, [pc, #424]	; (800379c <HAL_ADC_ConfigChannel+0x294>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80035fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035fe:	d10b      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x110>
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	695a      	ldr	r2, [r3, #20]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	089b      	lsrs	r3, r3, #2
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	e01d      	b.n	8003654 <HAL_ADC_ConfigChannel+0x14c>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f003 0310 	and.w	r3, r3, #16
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10b      	bne.n	800363e <HAL_ADC_ConfigChannel+0x136>
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	695a      	ldr	r2, [r3, #20]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	089b      	lsrs	r3, r3, #2
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	e00a      	b.n	8003654 <HAL_ADC_ConfigChannel+0x14c>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	695a      	ldr	r2, [r3, #20]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	089b      	lsrs	r3, r3, #2
 800364a:	f003 0304 	and.w	r3, r3, #4
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	2b04      	cmp	r3, #4
 800365c:	d027      	beq.n	80036ae <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6818      	ldr	r0, [r3, #0]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	6919      	ldr	r1, [r3, #16]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800366c:	f7ff f812 	bl	8002694 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6818      	ldr	r0, [r3, #0]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	6919      	ldr	r1, [r3, #16]
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	7e5b      	ldrb	r3, [r3, #25]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d102      	bne.n	8003686 <HAL_ADC_ConfigChannel+0x17e>
 8003680:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003684:	e000      	b.n	8003688 <HAL_ADC_ConfigChannel+0x180>
 8003686:	2300      	movs	r3, #0
 8003688:	461a      	mov	r2, r3
 800368a:	f7ff f83c 	bl	8002706 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6818      	ldr	r0, [r3, #0]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	6919      	ldr	r1, [r3, #16]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	7e1b      	ldrb	r3, [r3, #24]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d102      	bne.n	80036a4 <HAL_ADC_ConfigChannel+0x19c>
 800369e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036a2:	e000      	b.n	80036a6 <HAL_ADC_ConfigChannel+0x19e>
 80036a4:	2300      	movs	r3, #0
 80036a6:	461a      	mov	r2, r3
 80036a8:	f7ff f814 	bl	80026d4 <LL_ADC_SetDataRightShift>
 80036ac:	e047      	b.n	800373e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	069b      	lsls	r3, r3, #26
 80036be:	429a      	cmp	r2, r3
 80036c0:	d107      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036d0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	069b      	lsls	r3, r3, #26
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d107      	bne.n	80036f6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036f4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	069b      	lsls	r3, r3, #26
 8003706:	429a      	cmp	r2, r3
 8003708:	d107      	bne.n	800371a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003718:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003720:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	069b      	lsls	r3, r3, #26
 800372a:	429a      	cmp	r2, r3
 800372c:	d107      	bne.n	800373e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800373c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff f940 	bl	80029c8 <LL_ADC_IsEnabled>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	f040 820d 	bne.w	8003b6a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6818      	ldr	r0, [r3, #0]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	6819      	ldr	r1, [r3, #0]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	461a      	mov	r2, r3
 800375e:	f7ff f87d 	bl	800285c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	4a0c      	ldr	r2, [pc, #48]	; (8003798 <HAL_ADC_ConfigChannel+0x290>)
 8003768:	4293      	cmp	r3, r2
 800376a:	f040 8133 	bne.w	80039d4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800377a:	2b00      	cmp	r3, #0
 800377c:	d110      	bne.n	80037a0 <HAL_ADC_ConfigChannel+0x298>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	0e9b      	lsrs	r3, r3, #26
 8003784:	3301      	adds	r3, #1
 8003786:	f003 031f 	and.w	r3, r3, #31
 800378a:	2b09      	cmp	r3, #9
 800378c:	bf94      	ite	ls
 800378e:	2301      	movls	r3, #1
 8003790:	2300      	movhi	r3, #0
 8003792:	b2db      	uxtb	r3, r3
 8003794:	e01e      	b.n	80037d4 <HAL_ADC_ConfigChannel+0x2cc>
 8003796:	bf00      	nop
 8003798:	47ff0000 	.word	0x47ff0000
 800379c:	5c001000 	.word	0x5c001000
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037a8:	fa93 f3a3 	rbit	r3, r3
 80037ac:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80037ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80037b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80037b8:	2320      	movs	r3, #32
 80037ba:	e003      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80037bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037be:	fab3 f383 	clz	r3, r3
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	3301      	adds	r3, #1
 80037c6:	f003 031f 	and.w	r3, r3, #31
 80037ca:	2b09      	cmp	r3, #9
 80037cc:	bf94      	ite	ls
 80037ce:	2301      	movls	r3, #1
 80037d0:	2300      	movhi	r3, #0
 80037d2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d079      	beq.n	80038cc <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d107      	bne.n	80037f4 <HAL_ADC_ConfigChannel+0x2ec>
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	0e9b      	lsrs	r3, r3, #26
 80037ea:	3301      	adds	r3, #1
 80037ec:	069b      	lsls	r3, r3, #26
 80037ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037f2:	e015      	b.n	8003820 <HAL_ADC_ConfigChannel+0x318>
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037fc:	fa93 f3a3 	rbit	r3, r3
 8003800:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003804:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800380c:	2320      	movs	r3, #32
 800380e:	e003      	b.n	8003818 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003812:	fab3 f383 	clz	r3, r3
 8003816:	b2db      	uxtb	r3, r3
 8003818:	3301      	adds	r3, #1
 800381a:	069b      	lsls	r3, r3, #26
 800381c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003828:	2b00      	cmp	r3, #0
 800382a:	d109      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x338>
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	0e9b      	lsrs	r3, r3, #26
 8003832:	3301      	adds	r3, #1
 8003834:	f003 031f 	and.w	r3, r3, #31
 8003838:	2101      	movs	r1, #1
 800383a:	fa01 f303 	lsl.w	r3, r1, r3
 800383e:	e017      	b.n	8003870 <HAL_ADC_ConfigChannel+0x368>
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003848:	fa93 f3a3 	rbit	r3, r3
 800384c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800384e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003850:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003858:	2320      	movs	r3, #32
 800385a:	e003      	b.n	8003864 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800385c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800385e:	fab3 f383 	clz	r3, r3
 8003862:	b2db      	uxtb	r3, r3
 8003864:	3301      	adds	r3, #1
 8003866:	f003 031f 	and.w	r3, r3, #31
 800386a:	2101      	movs	r1, #1
 800386c:	fa01 f303 	lsl.w	r3, r1, r3
 8003870:	ea42 0103 	orr.w	r1, r2, r3
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10a      	bne.n	8003896 <HAL_ADC_ConfigChannel+0x38e>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	0e9b      	lsrs	r3, r3, #26
 8003886:	3301      	adds	r3, #1
 8003888:	f003 021f 	and.w	r2, r3, #31
 800388c:	4613      	mov	r3, r2
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	4413      	add	r3, r2
 8003892:	051b      	lsls	r3, r3, #20
 8003894:	e018      	b.n	80038c8 <HAL_ADC_ConfigChannel+0x3c0>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800389e:	fa93 f3a3 	rbit	r3, r3
 80038a2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80038a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80038a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80038ae:	2320      	movs	r3, #32
 80038b0:	e003      	b.n	80038ba <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80038b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b4:	fab3 f383 	clz	r3, r3
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	3301      	adds	r3, #1
 80038bc:	f003 021f 	and.w	r2, r3, #31
 80038c0:	4613      	mov	r3, r2
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	4413      	add	r3, r2
 80038c6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038c8:	430b      	orrs	r3, r1
 80038ca:	e07e      	b.n	80039ca <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d107      	bne.n	80038e8 <HAL_ADC_ConfigChannel+0x3e0>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	0e9b      	lsrs	r3, r3, #26
 80038de:	3301      	adds	r3, #1
 80038e0:	069b      	lsls	r3, r3, #26
 80038e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038e6:	e015      	b.n	8003914 <HAL_ADC_ConfigChannel+0x40c>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f0:	fa93 f3a3 	rbit	r3, r3
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80038fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003900:	2320      	movs	r3, #32
 8003902:	e003      	b.n	800390c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003906:	fab3 f383 	clz	r3, r3
 800390a:	b2db      	uxtb	r3, r3
 800390c:	3301      	adds	r3, #1
 800390e:	069b      	lsls	r3, r3, #26
 8003910:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800391c:	2b00      	cmp	r3, #0
 800391e:	d109      	bne.n	8003934 <HAL_ADC_ConfigChannel+0x42c>
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	0e9b      	lsrs	r3, r3, #26
 8003926:	3301      	adds	r3, #1
 8003928:	f003 031f 	and.w	r3, r3, #31
 800392c:	2101      	movs	r1, #1
 800392e:	fa01 f303 	lsl.w	r3, r1, r3
 8003932:	e017      	b.n	8003964 <HAL_ADC_ConfigChannel+0x45c>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	fa93 f3a3 	rbit	r3, r3
 8003940:	61bb      	str	r3, [r7, #24]
  return result;
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 800394c:	2320      	movs	r3, #32
 800394e:	e003      	b.n	8003958 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	fab3 f383 	clz	r3, r3
 8003956:	b2db      	uxtb	r3, r3
 8003958:	3301      	adds	r3, #1
 800395a:	f003 031f 	and.w	r3, r3, #31
 800395e:	2101      	movs	r1, #1
 8003960:	fa01 f303 	lsl.w	r3, r1, r3
 8003964:	ea42 0103 	orr.w	r1, r2, r3
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10d      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x488>
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	0e9b      	lsrs	r3, r3, #26
 800397a:	3301      	adds	r3, #1
 800397c:	f003 021f 	and.w	r2, r3, #31
 8003980:	4613      	mov	r3, r2
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	4413      	add	r3, r2
 8003986:	3b1e      	subs	r3, #30
 8003988:	051b      	lsls	r3, r3, #20
 800398a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800398e:	e01b      	b.n	80039c8 <HAL_ADC_ConfigChannel+0x4c0>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	fa93 f3a3 	rbit	r3, r3
 800399c:	60fb      	str	r3, [r7, #12]
  return result;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80039a8:	2320      	movs	r3, #32
 80039aa:	e003      	b.n	80039b4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	fab3 f383 	clz	r3, r3
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	3301      	adds	r3, #1
 80039b6:	f003 021f 	and.w	r2, r3, #31
 80039ba:	4613      	mov	r3, r2
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	4413      	add	r3, r2
 80039c0:	3b1e      	subs	r3, #30
 80039c2:	051b      	lsls	r3, r3, #20
 80039c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039c8:	430b      	orrs	r3, r1
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	6892      	ldr	r2, [r2, #8]
 80039ce:	4619      	mov	r1, r3
 80039d0:	f7fe ff19 	bl	8002806 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f280 80c6 	bge.w	8003b6a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a67      	ldr	r2, [pc, #412]	; (8003b80 <HAL_ADC_ConfigChannel+0x678>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d004      	beq.n	80039f2 <HAL_ADC_ConfigChannel+0x4ea>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a65      	ldr	r2, [pc, #404]	; (8003b84 <HAL_ADC_ConfigChannel+0x67c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d101      	bne.n	80039f6 <HAL_ADC_ConfigChannel+0x4ee>
 80039f2:	4b65      	ldr	r3, [pc, #404]	; (8003b88 <HAL_ADC_ConfigChannel+0x680>)
 80039f4:	e000      	b.n	80039f8 <HAL_ADC_ConfigChannel+0x4f0>
 80039f6:	4b65      	ldr	r3, [pc, #404]	; (8003b8c <HAL_ADC_ConfigChannel+0x684>)
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fe fe3d 	bl	8002678 <LL_ADC_GetCommonPathInternalCh>
 80039fe:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a5e      	ldr	r2, [pc, #376]	; (8003b80 <HAL_ADC_ConfigChannel+0x678>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d004      	beq.n	8003a14 <HAL_ADC_ConfigChannel+0x50c>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a5d      	ldr	r2, [pc, #372]	; (8003b84 <HAL_ADC_ConfigChannel+0x67c>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d10e      	bne.n	8003a32 <HAL_ADC_ConfigChannel+0x52a>
 8003a14:	485a      	ldr	r0, [pc, #360]	; (8003b80 <HAL_ADC_ConfigChannel+0x678>)
 8003a16:	f7fe ffd7 	bl	80029c8 <LL_ADC_IsEnabled>
 8003a1a:	4604      	mov	r4, r0
 8003a1c:	4859      	ldr	r0, [pc, #356]	; (8003b84 <HAL_ADC_ConfigChannel+0x67c>)
 8003a1e:	f7fe ffd3 	bl	80029c8 <LL_ADC_IsEnabled>
 8003a22:	4603      	mov	r3, r0
 8003a24:	4323      	orrs	r3, r4
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	bf0c      	ite	eq
 8003a2a:	2301      	moveq	r3, #1
 8003a2c:	2300      	movne	r3, #0
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	e008      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x53c>
 8003a32:	4857      	ldr	r0, [pc, #348]	; (8003b90 <HAL_ADC_ConfigChannel+0x688>)
 8003a34:	f7fe ffc8 	bl	80029c8 <LL_ADC_IsEnabled>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	bf0c      	ite	eq
 8003a3e:	2301      	moveq	r3, #1
 8003a40:	2300      	movne	r3, #0
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d07d      	beq.n	8003b44 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a51      	ldr	r2, [pc, #324]	; (8003b94 <HAL_ADC_ConfigChannel+0x68c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d130      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0x5ac>
 8003a52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d12b      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a4b      	ldr	r2, [pc, #300]	; (8003b90 <HAL_ADC_ConfigChannel+0x688>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	f040 8081 	bne.w	8003b6a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a44      	ldr	r2, [pc, #272]	; (8003b80 <HAL_ADC_ConfigChannel+0x678>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d004      	beq.n	8003a7c <HAL_ADC_ConfigChannel+0x574>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a43      	ldr	r2, [pc, #268]	; (8003b84 <HAL_ADC_ConfigChannel+0x67c>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d101      	bne.n	8003a80 <HAL_ADC_ConfigChannel+0x578>
 8003a7c:	4a42      	ldr	r2, [pc, #264]	; (8003b88 <HAL_ADC_ConfigChannel+0x680>)
 8003a7e:	e000      	b.n	8003a82 <HAL_ADC_ConfigChannel+0x57a>
 8003a80:	4a42      	ldr	r2, [pc, #264]	; (8003b8c <HAL_ADC_ConfigChannel+0x684>)
 8003a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4610      	mov	r0, r2
 8003a8c:	f7fe fde1 	bl	8002652 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a90:	4b41      	ldr	r3, [pc, #260]	; (8003b98 <HAL_ADC_ConfigChannel+0x690>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	099b      	lsrs	r3, r3, #6
 8003a96:	4a41      	ldr	r2, [pc, #260]	; (8003b9c <HAL_ADC_ConfigChannel+0x694>)
 8003a98:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9c:	099b      	lsrs	r3, r3, #6
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003aa4:	e002      	b.n	8003aac <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1f9      	bne.n	8003aa6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ab2:	e05a      	b.n	8003b6a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a39      	ldr	r2, [pc, #228]	; (8003ba0 <HAL_ADC_ConfigChannel+0x698>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d11e      	bne.n	8003afc <HAL_ADC_ConfigChannel+0x5f4>
 8003abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d119      	bne.n	8003afc <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a30      	ldr	r2, [pc, #192]	; (8003b90 <HAL_ADC_ConfigChannel+0x688>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d14b      	bne.n	8003b6a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a2a      	ldr	r2, [pc, #168]	; (8003b80 <HAL_ADC_ConfigChannel+0x678>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d004      	beq.n	8003ae6 <HAL_ADC_ConfigChannel+0x5de>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a28      	ldr	r2, [pc, #160]	; (8003b84 <HAL_ADC_ConfigChannel+0x67c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d101      	bne.n	8003aea <HAL_ADC_ConfigChannel+0x5e2>
 8003ae6:	4a28      	ldr	r2, [pc, #160]	; (8003b88 <HAL_ADC_ConfigChannel+0x680>)
 8003ae8:	e000      	b.n	8003aec <HAL_ADC_ConfigChannel+0x5e4>
 8003aea:	4a28      	ldr	r2, [pc, #160]	; (8003b8c <HAL_ADC_ConfigChannel+0x684>)
 8003aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003af2:	4619      	mov	r1, r3
 8003af4:	4610      	mov	r0, r2
 8003af6:	f7fe fdac 	bl	8002652 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003afa:	e036      	b.n	8003b6a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a28      	ldr	r2, [pc, #160]	; (8003ba4 <HAL_ADC_ConfigChannel+0x69c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d131      	bne.n	8003b6a <HAL_ADC_ConfigChannel+0x662>
 8003b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d12c      	bne.n	8003b6a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a1e      	ldr	r2, [pc, #120]	; (8003b90 <HAL_ADC_ConfigChannel+0x688>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d127      	bne.n	8003b6a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a18      	ldr	r2, [pc, #96]	; (8003b80 <HAL_ADC_ConfigChannel+0x678>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d004      	beq.n	8003b2e <HAL_ADC_ConfigChannel+0x626>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a16      	ldr	r2, [pc, #88]	; (8003b84 <HAL_ADC_ConfigChannel+0x67c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d101      	bne.n	8003b32 <HAL_ADC_ConfigChannel+0x62a>
 8003b2e:	4a16      	ldr	r2, [pc, #88]	; (8003b88 <HAL_ADC_ConfigChannel+0x680>)
 8003b30:	e000      	b.n	8003b34 <HAL_ADC_ConfigChannel+0x62c>
 8003b32:	4a16      	ldr	r2, [pc, #88]	; (8003b8c <HAL_ADC_ConfigChannel+0x684>)
 8003b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	4610      	mov	r0, r2
 8003b3e:	f7fe fd88 	bl	8002652 <LL_ADC_SetCommonPathInternalCh>
 8003b42:	e012      	b.n	8003b6a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b48:	f043 0220 	orr.w	r2, r3, #32
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003b56:	e008      	b.n	8003b6a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5c:	f043 0220 	orr.w	r2, r3, #32
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b72:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3784      	adds	r7, #132	; 0x84
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd90      	pop	{r4, r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40022000 	.word	0x40022000
 8003b84:	40022100 	.word	0x40022100
 8003b88:	40022300 	.word	0x40022300
 8003b8c:	58026300 	.word	0x58026300
 8003b90:	58026000 	.word	0x58026000
 8003b94:	cb840000 	.word	0xcb840000
 8003b98:	24000000 	.word	0x24000000
 8003b9c:	053e2d63 	.word	0x053e2d63
 8003ba0:	c7520000 	.word	0xc7520000
 8003ba4:	cfb80000 	.word	0xcfb80000

08003ba8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b088      	sub	sp, #32
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7fe ff50 	bl	8002a64 <LL_ADC_REG_IsConversionOngoing>
 8003bc4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fe ff72 	bl	8002ab4 <LL_ADC_INJ_IsConversionOngoing>
 8003bd0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d103      	bne.n	8003be0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 8098 	beq.w	8003d10 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d02a      	beq.n	8003c44 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	7d5b      	ldrb	r3, [r3, #21]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d126      	bne.n	8003c44 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	7d1b      	ldrb	r3, [r3, #20]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d122      	bne.n	8003c44 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003c02:	e014      	b.n	8003c2e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	4a45      	ldr	r2, [pc, #276]	; (8003d1c <ADC_ConversionStop+0x174>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d90d      	bls.n	8003c28 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c10:	f043 0210 	orr.w	r2, r3, #16
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1c:	f043 0201 	orr.w	r2, r3, #1
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e074      	b.n	8003d12 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c38:	2b40      	cmp	r3, #64	; 0x40
 8003c3a:	d1e3      	bne.n	8003c04 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2240      	movs	r2, #64	; 0x40
 8003c42:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d014      	beq.n	8003c74 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fe ff08 	bl	8002a64 <LL_ADC_REG_IsConversionOngoing>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00c      	beq.n	8003c74 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fe fec5 	bl	80029ee <LL_ADC_IsDisableOngoing>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d104      	bne.n	8003c74 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fe fee4 	bl	8002a3c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d014      	beq.n	8003ca4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7fe ff18 	bl	8002ab4 <LL_ADC_INJ_IsConversionOngoing>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00c      	beq.n	8003ca4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fe fead 	bl	80029ee <LL_ADC_IsDisableOngoing>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d104      	bne.n	8003ca4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fe fef4 	bl	8002a8c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d005      	beq.n	8003cb6 <ADC_ConversionStop+0x10e>
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	2b03      	cmp	r3, #3
 8003cae:	d105      	bne.n	8003cbc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003cb0:	230c      	movs	r3, #12
 8003cb2:	617b      	str	r3, [r7, #20]
        break;
 8003cb4:	e005      	b.n	8003cc2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003cb6:	2308      	movs	r3, #8
 8003cb8:	617b      	str	r3, [r7, #20]
        break;
 8003cba:	e002      	b.n	8003cc2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003cbc:	2304      	movs	r3, #4
 8003cbe:	617b      	str	r3, [r7, #20]
        break;
 8003cc0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003cc2:	f7fe fc3d 	bl	8002540 <HAL_GetTick>
 8003cc6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003cc8:	e01b      	b.n	8003d02 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003cca:	f7fe fc39 	bl	8002540 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b05      	cmp	r3, #5
 8003cd6:	d914      	bls.n	8003d02 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00d      	beq.n	8003d02 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cea:	f043 0210 	orr.w	r2, r3, #16
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf6:	f043 0201 	orr.w	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e007      	b.n	8003d12 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1dc      	bne.n	8003cca <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3720      	adds	r7, #32
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	000cdbff 	.word	0x000cdbff

08003d20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7fe fe4b 	bl	80029c8 <LL_ADC_IsEnabled>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d16e      	bne.n	8003e16 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	4b38      	ldr	r3, [pc, #224]	; (8003e20 <ADC_Enable+0x100>)
 8003d40:	4013      	ands	r3, r2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00d      	beq.n	8003d62 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4a:	f043 0210 	orr.w	r2, r3, #16
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d56:	f043 0201 	orr.w	r2, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e05a      	b.n	8003e18 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fe fe06 	bl	8002978 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003d6c:	f7fe fbe8 	bl	8002540 <HAL_GetTick>
 8003d70:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a2b      	ldr	r2, [pc, #172]	; (8003e24 <ADC_Enable+0x104>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d004      	beq.n	8003d86 <ADC_Enable+0x66>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a29      	ldr	r2, [pc, #164]	; (8003e28 <ADC_Enable+0x108>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d101      	bne.n	8003d8a <ADC_Enable+0x6a>
 8003d86:	4b29      	ldr	r3, [pc, #164]	; (8003e2c <ADC_Enable+0x10c>)
 8003d88:	e000      	b.n	8003d8c <ADC_Enable+0x6c>
 8003d8a:	4b29      	ldr	r3, [pc, #164]	; (8003e30 <ADC_Enable+0x110>)
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fe fd89 	bl	80028a4 <LL_ADC_GetMultimode>
 8003d92:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a23      	ldr	r2, [pc, #140]	; (8003e28 <ADC_Enable+0x108>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d002      	beq.n	8003da4 <ADC_Enable+0x84>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	e000      	b.n	8003da6 <ADC_Enable+0x86>
 8003da4:	4b1f      	ldr	r3, [pc, #124]	; (8003e24 <ADC_Enable+0x104>)
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	6812      	ldr	r2, [r2, #0]
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d02c      	beq.n	8003e08 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d130      	bne.n	8003e16 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003db4:	e028      	b.n	8003e08 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fe fe04 	bl	80029c8 <LL_ADC_IsEnabled>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d104      	bne.n	8003dd0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fe fdd4 	bl	8002978 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003dd0:	f7fe fbb6 	bl	8002540 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d914      	bls.n	8003e08 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d00d      	beq.n	8003e08 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df0:	f043 0210 	orr.w	r2, r3, #16
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfc:	f043 0201 	orr.w	r2, r3, #1
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e007      	b.n	8003e18 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d1cf      	bne.n	8003db6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	8000003f 	.word	0x8000003f
 8003e24:	40022000 	.word	0x40022000
 8003e28:	40022100 	.word	0x40022100
 8003e2c:	40022300 	.word	0x40022300
 8003e30:	58026300 	.word	0x58026300

08003e34 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7fe fdd4 	bl	80029ee <LL_ADC_IsDisableOngoing>
 8003e46:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fe fdbb 	bl	80029c8 <LL_ADC_IsEnabled>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d047      	beq.n	8003ee8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d144      	bne.n	8003ee8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f003 030d 	and.w	r3, r3, #13
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d10c      	bne.n	8003e86 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7fe fd95 	bl	80029a0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2203      	movs	r2, #3
 8003e7c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e7e:	f7fe fb5f 	bl	8002540 <HAL_GetTick>
 8003e82:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e84:	e029      	b.n	8003eda <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8a:	f043 0210 	orr.w	r2, r3, #16
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e96:	f043 0201 	orr.w	r2, r3, #1
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e023      	b.n	8003eea <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ea2:	f7fe fb4d 	bl	8002540 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d914      	bls.n	8003eda <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00d      	beq.n	8003eda <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec2:	f043 0210 	orr.w	r2, r3, #16
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ece:	f043 0201 	orr.w	r2, r3, #1
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e007      	b.n	8003eea <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1dc      	bne.n	8003ea2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b084      	sub	sp, #16
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d14b      	bne.n	8003fa4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f10:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d021      	beq.n	8003f6a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fe fc06 	bl	800273c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d032      	beq.n	8003f9c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d12b      	bne.n	8003f9c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d11f      	bne.n	8003f9c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f60:	f043 0201 	orr.w	r2, r3, #1
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	655a      	str	r2, [r3, #84]	; 0x54
 8003f68:	e018      	b.n	8003f9c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f003 0303 	and.w	r3, r3, #3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d111      	bne.n	8003f9c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d105      	bne.n	8003f9c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f94:	f043 0201 	orr.w	r2, r3, #1
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f7fd fb2d 	bl	80015fc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003fa2:	e00e      	b.n	8003fc2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa8:	f003 0310 	and.w	r3, r3, #16
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f7ff fa9f 	bl	80034f4 <HAL_ADC_ErrorCallback>
}
 8003fb6:	e004      	b.n	8003fc2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	4798      	blx	r3
}
 8003fc2:	bf00      	nop
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b084      	sub	sp, #16
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f7fd fadb 	bl	8001594 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003fde:	bf00      	nop
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b084      	sub	sp, #16
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004004:	f043 0204 	orr.w	r2, r3, #4
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f7ff fa71 	bl	80034f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004012:	bf00      	nop
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
	...

0800401c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a79      	ldr	r2, [pc, #484]	; (8004210 <ADC_ConfigureBoostMode+0x1f4>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d004      	beq.n	8004038 <ADC_ConfigureBoostMode+0x1c>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a78      	ldr	r2, [pc, #480]	; (8004214 <ADC_ConfigureBoostMode+0x1f8>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d109      	bne.n	800404c <ADC_ConfigureBoostMode+0x30>
 8004038:	4b77      	ldr	r3, [pc, #476]	; (8004218 <ADC_ConfigureBoostMode+0x1fc>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004040:	2b00      	cmp	r3, #0
 8004042:	bf14      	ite	ne
 8004044:	2301      	movne	r3, #1
 8004046:	2300      	moveq	r3, #0
 8004048:	b2db      	uxtb	r3, r3
 800404a:	e008      	b.n	800405e <ADC_ConfigureBoostMode+0x42>
 800404c:	4b73      	ldr	r3, [pc, #460]	; (800421c <ADC_ConfigureBoostMode+0x200>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004054:	2b00      	cmp	r3, #0
 8004056:	bf14      	ite	ne
 8004058:	2301      	movne	r3, #1
 800405a:	2300      	moveq	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d01c      	beq.n	800409c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004062:	f006 f96f 	bl	800a344 <HAL_RCC_GetHCLKFreq>
 8004066:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004070:	d010      	beq.n	8004094 <ADC_ConfigureBoostMode+0x78>
 8004072:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004076:	d871      	bhi.n	800415c <ADC_ConfigureBoostMode+0x140>
 8004078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800407c:	d002      	beq.n	8004084 <ADC_ConfigureBoostMode+0x68>
 800407e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004082:	d16b      	bne.n	800415c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	0c1b      	lsrs	r3, r3, #16
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004090:	60fb      	str	r3, [r7, #12]
        break;
 8004092:	e066      	b.n	8004162 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	089b      	lsrs	r3, r3, #2
 8004098:	60fb      	str	r3, [r7, #12]
        break;
 800409a:	e062      	b.n	8004162 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800409c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80040a0:	f007 f8f2 	bl	800b288 <HAL_RCCEx_GetPeriphCLKFreq>
 80040a4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80040ae:	d051      	beq.n	8004154 <ADC_ConfigureBoostMode+0x138>
 80040b0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80040b4:	d854      	bhi.n	8004160 <ADC_ConfigureBoostMode+0x144>
 80040b6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80040ba:	d047      	beq.n	800414c <ADC_ConfigureBoostMode+0x130>
 80040bc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80040c0:	d84e      	bhi.n	8004160 <ADC_ConfigureBoostMode+0x144>
 80040c2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80040c6:	d03d      	beq.n	8004144 <ADC_ConfigureBoostMode+0x128>
 80040c8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80040cc:	d848      	bhi.n	8004160 <ADC_ConfigureBoostMode+0x144>
 80040ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040d2:	d033      	beq.n	800413c <ADC_ConfigureBoostMode+0x120>
 80040d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040d8:	d842      	bhi.n	8004160 <ADC_ConfigureBoostMode+0x144>
 80040da:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80040de:	d029      	beq.n	8004134 <ADC_ConfigureBoostMode+0x118>
 80040e0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80040e4:	d83c      	bhi.n	8004160 <ADC_ConfigureBoostMode+0x144>
 80040e6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80040ea:	d01a      	beq.n	8004122 <ADC_ConfigureBoostMode+0x106>
 80040ec:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80040f0:	d836      	bhi.n	8004160 <ADC_ConfigureBoostMode+0x144>
 80040f2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80040f6:	d014      	beq.n	8004122 <ADC_ConfigureBoostMode+0x106>
 80040f8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80040fc:	d830      	bhi.n	8004160 <ADC_ConfigureBoostMode+0x144>
 80040fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004102:	d00e      	beq.n	8004122 <ADC_ConfigureBoostMode+0x106>
 8004104:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004108:	d82a      	bhi.n	8004160 <ADC_ConfigureBoostMode+0x144>
 800410a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800410e:	d008      	beq.n	8004122 <ADC_ConfigureBoostMode+0x106>
 8004110:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004114:	d824      	bhi.n	8004160 <ADC_ConfigureBoostMode+0x144>
 8004116:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800411a:	d002      	beq.n	8004122 <ADC_ConfigureBoostMode+0x106>
 800411c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004120:	d11e      	bne.n	8004160 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	0c9b      	lsrs	r3, r3, #18
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004130:	60fb      	str	r3, [r7, #12]
        break;
 8004132:	e016      	b.n	8004162 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	091b      	lsrs	r3, r3, #4
 8004138:	60fb      	str	r3, [r7, #12]
        break;
 800413a:	e012      	b.n	8004162 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	095b      	lsrs	r3, r3, #5
 8004140:	60fb      	str	r3, [r7, #12]
        break;
 8004142:	e00e      	b.n	8004162 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	099b      	lsrs	r3, r3, #6
 8004148:	60fb      	str	r3, [r7, #12]
        break;
 800414a:	e00a      	b.n	8004162 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	09db      	lsrs	r3, r3, #7
 8004150:	60fb      	str	r3, [r7, #12]
        break;
 8004152:	e006      	b.n	8004162 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	0a1b      	lsrs	r3, r3, #8
 8004158:	60fb      	str	r3, [r7, #12]
        break;
 800415a:	e002      	b.n	8004162 <ADC_ConfigureBoostMode+0x146>
        break;
 800415c:	bf00      	nop
 800415e:	e000      	b.n	8004162 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004160:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004162:	f7fe fa1d 	bl	80025a0 <HAL_GetREVID>
 8004166:	4603      	mov	r3, r0
 8004168:	f241 0203 	movw	r2, #4099	; 0x1003
 800416c:	4293      	cmp	r3, r2
 800416e:	d815      	bhi.n	800419c <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4a2b      	ldr	r2, [pc, #172]	; (8004220 <ADC_ConfigureBoostMode+0x204>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d908      	bls.n	800418a <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689a      	ldr	r2, [r3, #8]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004186:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004188:	e03e      	b.n	8004208 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004198:	609a      	str	r2, [r3, #8]
}
 800419a:	e035      	b.n	8004208 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	085b      	lsrs	r3, r3, #1
 80041a0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	4a1f      	ldr	r2, [pc, #124]	; (8004224 <ADC_ConfigureBoostMode+0x208>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d808      	bhi.n	80041bc <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80041b8:	609a      	str	r2, [r3, #8]
}
 80041ba:	e025      	b.n	8004208 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4a1a      	ldr	r2, [pc, #104]	; (8004228 <ADC_ConfigureBoostMode+0x20c>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d80a      	bhi.n	80041da <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041d6:	609a      	str	r2, [r3, #8]
}
 80041d8:	e016      	b.n	8004208 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	4a13      	ldr	r2, [pc, #76]	; (800422c <ADC_ConfigureBoostMode+0x210>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d80a      	bhi.n	80041f8 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041f4:	609a      	str	r2, [r3, #8]
}
 80041f6:	e007      	b.n	8004208 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004206:	609a      	str	r2, [r3, #8]
}
 8004208:	bf00      	nop
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40022000 	.word	0x40022000
 8004214:	40022100 	.word	0x40022100
 8004218:	40022300 	.word	0x40022300
 800421c:	58026300 	.word	0x58026300
 8004220:	01312d00 	.word	0x01312d00
 8004224:	005f5e10 	.word	0x005f5e10
 8004228:	00bebc20 	.word	0x00bebc20
 800422c:	017d7840 	.word	0x017d7840

08004230 <LL_ADC_IsEnabled>:
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <LL_ADC_IsEnabled+0x18>
 8004244:	2301      	movs	r3, #1
 8004246:	e000      	b.n	800424a <LL_ADC_IsEnabled+0x1a>
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
	...

08004258 <LL_ADC_StartCalibration>:
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	4b09      	ldr	r3, [pc, #36]	; (8004290 <LL_ADC_StartCalibration+0x38>)
 800426a:	4013      	ands	r3, r2
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004278:	430a      	orrs	r2, r1
 800427a:	4313      	orrs	r3, r2
 800427c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	609a      	str	r2, [r3, #8]
}
 8004284:	bf00      	nop
 8004286:	3714      	adds	r7, #20
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	3ffeffc0 	.word	0x3ffeffc0

08004294 <LL_ADC_IsCalibrationOnGoing>:
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042a8:	d101      	bne.n	80042ae <LL_ADC_IsCalibrationOnGoing+0x1a>
 80042aa:	2301      	movs	r3, #1
 80042ac:	e000      	b.n	80042b0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <LL_ADC_REG_IsConversionOngoing>:
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b04      	cmp	r3, #4
 80042ce:	d101      	bne.n	80042d4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80042d0:	2301      	movs	r3, #1
 80042d2:	e000      	b.n	80042d6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
	...

080042e4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80042f0:	2300      	movs	r3, #0
 80042f2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d101      	bne.n	8004302 <HAL_ADCEx_Calibration_Start+0x1e>
 80042fe:	2302      	movs	r3, #2
 8004300:	e04c      	b.n	800439c <HAL_ADCEx_Calibration_Start+0xb8>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f7ff fd92 	bl	8003e34 <ADC_Disable>
 8004310:	4603      	mov	r3, r0
 8004312:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004314:	7dfb      	ldrb	r3, [r7, #23]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d135      	bne.n	8004386 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800431e:	4b21      	ldr	r3, [pc, #132]	; (80043a4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004320:	4013      	ands	r3, r2
 8004322:	f043 0202 	orr.w	r2, r3, #2
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	68b9      	ldr	r1, [r7, #8]
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff ff90 	bl	8004258 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004338:	e014      	b.n	8004364 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	3301      	adds	r3, #1
 800433e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	4a19      	ldr	r2, [pc, #100]	; (80043a8 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d30d      	bcc.n	8004364 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434c:	f023 0312 	bic.w	r3, r3, #18
 8004350:	f043 0210 	orr.w	r2, r3, #16
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e01b      	b.n	800439c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4618      	mov	r0, r3
 800436a:	f7ff ff93 	bl	8004294 <LL_ADC_IsCalibrationOnGoing>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1e2      	bne.n	800433a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004378:	f023 0303 	bic.w	r3, r3, #3
 800437c:	f043 0201 	orr.w	r2, r3, #1
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	655a      	str	r2, [r3, #84]	; 0x54
 8004384:	e005      	b.n	8004392 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438a:	f043 0210 	orr.w	r2, r3, #16
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800439a:	7dfb      	ldrb	r3, [r7, #23]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3718      	adds	r7, #24
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	ffffeefd 	.word	0xffffeefd
 80043a8:	25c3f800 	.word	0x25c3f800

080043ac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004410:	b590      	push	{r4, r7, lr}
 8004412:	b09f      	sub	sp, #124	; 0x7c
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800441a:	2300      	movs	r3, #0
 800441c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004426:	2b01      	cmp	r3, #1
 8004428:	d101      	bne.n	800442e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800442a:	2302      	movs	r3, #2
 800442c:	e0be      	b.n	80045ac <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004436:	2300      	movs	r3, #0
 8004438:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800443a:	2300      	movs	r3, #0
 800443c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a5c      	ldr	r2, [pc, #368]	; (80045b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d102      	bne.n	800444e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004448:	4b5b      	ldr	r3, [pc, #364]	; (80045b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800444a:	60bb      	str	r3, [r7, #8]
 800444c:	e001      	b.n	8004452 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800444e:	2300      	movs	r3, #0
 8004450:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10b      	bne.n	8004470 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445c:	f043 0220 	orr.w	r2, r3, #32
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e09d      	b.n	80045ac <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff ff22 	bl	80042bc <LL_ADC_REG_IsConversionOngoing>
 8004478:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f7ff ff1c 	bl	80042bc <LL_ADC_REG_IsConversionOngoing>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d17f      	bne.n	800458a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800448a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800448c:	2b00      	cmp	r3, #0
 800448e:	d17c      	bne.n	800458a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a47      	ldr	r2, [pc, #284]	; (80045b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d004      	beq.n	80044a4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a46      	ldr	r2, [pc, #280]	; (80045b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d101      	bne.n	80044a8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80044a4:	4b45      	ldr	r3, [pc, #276]	; (80045bc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80044a6:	e000      	b.n	80044aa <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80044a8:	4b45      	ldr	r3, [pc, #276]	; (80045c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80044aa:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d039      	beq.n	8004528 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80044b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	431a      	orrs	r2, r3
 80044c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a3a      	ldr	r2, [pc, #232]	; (80045b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d004      	beq.n	80044da <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a38      	ldr	r2, [pc, #224]	; (80045b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d10e      	bne.n	80044f8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80044da:	4836      	ldr	r0, [pc, #216]	; (80045b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80044dc:	f7ff fea8 	bl	8004230 <LL_ADC_IsEnabled>
 80044e0:	4604      	mov	r4, r0
 80044e2:	4835      	ldr	r0, [pc, #212]	; (80045b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80044e4:	f7ff fea4 	bl	8004230 <LL_ADC_IsEnabled>
 80044e8:	4603      	mov	r3, r0
 80044ea:	4323      	orrs	r3, r4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	bf0c      	ite	eq
 80044f0:	2301      	moveq	r3, #1
 80044f2:	2300      	movne	r3, #0
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	e008      	b.n	800450a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80044f8:	4832      	ldr	r0, [pc, #200]	; (80045c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80044fa:	f7ff fe99 	bl	8004230 <LL_ADC_IsEnabled>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	bf0c      	ite	eq
 8004504:	2301      	moveq	r3, #1
 8004506:	2300      	movne	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d047      	beq.n	800459e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800450e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	4b2d      	ldr	r3, [pc, #180]	; (80045c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004514:	4013      	ands	r3, r2
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	6811      	ldr	r1, [r2, #0]
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	6892      	ldr	r2, [r2, #8]
 800451e:	430a      	orrs	r2, r1
 8004520:	431a      	orrs	r2, r3
 8004522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004524:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004526:	e03a      	b.n	800459e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004532:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a1e      	ldr	r2, [pc, #120]	; (80045b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d004      	beq.n	8004548 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a1d      	ldr	r2, [pc, #116]	; (80045b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d10e      	bne.n	8004566 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004548:	481a      	ldr	r0, [pc, #104]	; (80045b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800454a:	f7ff fe71 	bl	8004230 <LL_ADC_IsEnabled>
 800454e:	4604      	mov	r4, r0
 8004550:	4819      	ldr	r0, [pc, #100]	; (80045b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004552:	f7ff fe6d 	bl	8004230 <LL_ADC_IsEnabled>
 8004556:	4603      	mov	r3, r0
 8004558:	4323      	orrs	r3, r4
 800455a:	2b00      	cmp	r3, #0
 800455c:	bf0c      	ite	eq
 800455e:	2301      	moveq	r3, #1
 8004560:	2300      	movne	r3, #0
 8004562:	b2db      	uxtb	r3, r3
 8004564:	e008      	b.n	8004578 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004566:	4817      	ldr	r0, [pc, #92]	; (80045c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004568:	f7ff fe62 	bl	8004230 <LL_ADC_IsEnabled>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	bf0c      	ite	eq
 8004572:	2301      	moveq	r3, #1
 8004574:	2300      	movne	r3, #0
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d010      	beq.n	800459e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800457c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	4b11      	ldr	r3, [pc, #68]	; (80045c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004582:	4013      	ands	r3, r2
 8004584:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004586:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004588:	e009      	b.n	800459e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458e:	f043 0220 	orr.w	r2, r3, #32
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800459c:	e000      	b.n	80045a0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800459e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80045a8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	377c      	adds	r7, #124	; 0x7c
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd90      	pop	{r4, r7, pc}
 80045b4:	40022000 	.word	0x40022000
 80045b8:	40022100 	.word	0x40022100
 80045bc:	40022300 	.word	0x40022300
 80045c0:	58026300 	.word	0x58026300
 80045c4:	58026000 	.word	0x58026000
 80045c8:	fffff0e0 	.word	0xfffff0e0

080045cc <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b088      	sub	sp, #32
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80045d4:	2300      	movs	r3, #0
 80045d6:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 80045d8:	2300      	movs	r3, #0
 80045da:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d102      	bne.n	80045e8 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	77fb      	strb	r3, [r7, #31]
 80045e6:	e10e      	b.n	8004806 <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045f6:	d102      	bne.n	80045fe <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	77fb      	strb	r3, [r7, #31]
 80045fc:	e103      	b.n	8004806 <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d109      	bne.n	800461e <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f7fd fcdb 	bl	8001fd4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0304 	and.w	r3, r3, #4
 8004628:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8004632:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 8004638:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 800463e:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 8004644:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800464a:	4313      	orrs	r3, r2
 800464c:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	4b6e      	ldr	r3, [pc, #440]	; (8004810 <HAL_COMP_Init+0x244>)
 8004656:	4013      	ands	r3, r2
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6812      	ldr	r2, [r2, #0]
 800465c:	6979      	ldr	r1, [r7, #20]
 800465e:	430b      	orrs	r3, r1
 8004660:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b10      	cmp	r3, #16
 8004668:	d108      	bne.n	800467c <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f042 0210 	orr.w	r2, r2, #16
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	e007      	b.n	800468c <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 0210 	bic.w	r2, r2, #16
 800468a:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0304 	and.w	r3, r3, #4
 8004696:	2b00      	cmp	r3, #0
 8004698:	d016      	beq.n	80046c8 <HAL_COMP_Init+0xfc>
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d013      	beq.n	80046c8 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046a0:	4b5c      	ldr	r3, [pc, #368]	; (8004814 <HAL_COMP_Init+0x248>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	099b      	lsrs	r3, r3, #6
 80046a6:	4a5c      	ldr	r2, [pc, #368]	; (8004818 <HAL_COMP_Init+0x24c>)
 80046a8:	fba2 2303 	umull	r2, r3, r2, r3
 80046ac:	099b      	lsrs	r3, r3, #6
 80046ae:	1c5a      	adds	r2, r3, #1
 80046b0:	4613      	mov	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 80046ba:	e002      	b.n	80046c2 <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	3b01      	subs	r3, #1
 80046c0:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1f9      	bne.n	80046bc <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a53      	ldr	r2, [pc, #332]	; (800481c <HAL_COMP_Init+0x250>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d102      	bne.n	80046d8 <HAL_COMP_Init+0x10c>
 80046d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80046d6:	e001      	b.n	80046dc <HAL_COMP_Init+0x110>
 80046d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80046dc:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d06d      	beq.n	80047c6 <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	f003 0310 	and.w	r3, r3, #16
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d008      	beq.n	8004708 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 80046f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	4313      	orrs	r3, r2
 8004704:	600b      	str	r3, [r1, #0]
 8004706:	e008      	b.n	800471a <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 8004708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	43db      	mvns	r3, r3
 8004712:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004716:	4013      	ands	r3, r2
 8004718:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	f003 0320 	and.w	r3, r3, #32
 8004722:	2b00      	cmp	r3, #0
 8004724:	d008      	beq.n	8004738 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 8004726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	4313      	orrs	r3, r2
 8004734:	604b      	str	r3, [r1, #4]
 8004736:	e008      	b.n	800474a <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 8004738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	43db      	mvns	r3, r3
 8004742:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004746:	4013      	ands	r3, r2
 8004748:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 800474a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a1b      	ldr	r3, [r3, #32]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00a      	beq.n	8004776 <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 8004760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004764:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004768:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	4313      	orrs	r3, r2
 8004770:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 8004774:	e00a      	b.n	800478c <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 8004776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800477a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	43db      	mvns	r3, r3
 8004782:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004786:	4013      	ands	r3, r2
 8004788:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00a      	beq.n	80047ae <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 8004798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800479c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80047a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 80047ac:	e021      	b.n	80047f2 <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 80047ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047b2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	43db      	mvns	r3, r3
 80047ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047be:	4013      	ands	r3, r2
 80047c0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 80047c4:	e015      	b.n	80047f2 <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 80047c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ca:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	43db      	mvns	r3, r3
 80047d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047d6:	4013      	ands	r3, r2
 80047d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 80047dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047e0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	43db      	mvns	r3, r3
 80047e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047ec:	4013      	ands	r3, r2
 80047ee:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d103      	bne.n	8004806 <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
   
  }
  
  return status;
 8004806:	7ffb      	ldrb	r3, [r7, #31]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3720      	adds	r7, #32
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	f0e8cce1 	.word	0xf0e8cce1
 8004814:	24000000 	.word	0x24000000
 8004818:	053e2d63 	.word	0x053e2d63
 800481c:	5800380c 	.word	0x5800380c

08004820 <HAL_COMP_Start>:
  * @brief  Start the comparator. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{ 
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8004828:	2300      	movs	r3, #0
 800482a:	60bb      	str	r3, [r7, #8]

  HAL_StatusTypeDef status = HAL_OK;
 800482c:	2300      	movs	r3, #0
 800482e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d102      	bne.n	800483c <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	73fb      	strb	r3, [r7, #15]
 800483a:	e030      	b.n	800489e <HAL_COMP_Start+0x7e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004846:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800484a:	d102      	bne.n	8004852 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	73fb      	strb	r3, [r7, #15]
 8004850:	e025      	b.n	800489e <HAL_COMP_Start+0x7e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b01      	cmp	r3, #1
 800485c:	d11d      	bne.n	800489a <HAL_COMP_Start+0x7a>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_EN);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f042 0201 	orr.w	r2, r2, #1
 800486c:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2202      	movs	r2, #2
 8004872:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
     /* Delay for COMP startup time */
     /* Wait loop initialization and execution */
     /* Note: Variable divided by 2 to compensate partially    */
     /*       CPU processing cycles.                           */
    
     wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004876:	4b0d      	ldr	r3, [pc, #52]	; (80048ac <HAL_COMP_Start+0x8c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	099b      	lsrs	r3, r3, #6
 800487c:	4a0c      	ldr	r2, [pc, #48]	; (80048b0 <HAL_COMP_Start+0x90>)
 800487e:	fba2 2303 	umull	r2, r3, r2, r3
 8004882:	099b      	lsrs	r3, r3, #6
 8004884:	3301      	adds	r3, #1
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 800488a:	e002      	b.n	8004892 <HAL_COMP_Start+0x72>
     {
       wait_loop_index--;
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	3b01      	subs	r3, #1
 8004890:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1f9      	bne.n	800488c <HAL_COMP_Start+0x6c>
 8004898:	e001      	b.n	800489e <HAL_COMP_Start+0x7e>
     }      
    }
    else
    {
      status = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800489e:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3714      	adds	r7, #20
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	24000000 	.word	0x24000000
 80048b0:	053e2d63 	.word	0x053e2d63

080048b4 <HAL_COMP_Stop>:
  * @brief  Stop the comparator. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{ 
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048bc:	2300      	movs	r3, #0
 80048be:	73fb      	strb	r3, [r7, #15]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d102      	bne.n	80048cc <HAL_COMP_Stop+0x18>
  {
    status = HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	73fb      	strb	r3, [r7, #15]
 80048ca:	e01f      	b.n	800490c <HAL_COMP_Stop+0x58>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048da:	d102      	bne.n	80048e2 <HAL_COMP_Stop+0x2e>
  {
    status = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	73fb      	strb	r3, [r7, #15]
 80048e0:	e014      	b.n	800490c <HAL_COMP_Stop+0x58>
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Check compliant states: HAL_COMP_STATE_READY or HAL_COMP_STATE_BUSY    */
    /* (all states except HAL_COMP_STATE_RESET and except locked status.      */
    if(hcomp->State != HAL_COMP_STATE_RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00c      	beq.n	8004908 <HAL_COMP_Stop+0x54>
    {

      /* Disable the selected comparator */
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_EN);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 0201 	bic.w	r2, r2, #1
 80048fc:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8004906:	e001      	b.n	800490c <HAL_COMP_Stop+0x58>
    }
    else
    {
      status = HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  return status;
 800490c:	7bfb      	ldrb	r3, [r7, #15]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
	...

0800491c <HAL_COMP_Start_IT>:
  * @brief  Enable the interrupt and start the comparator.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start_IT(COMP_HandleTypeDef *hcomp)
{ 
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  
 __IO uint32_t wait_loop_index = 0UL;
 8004924:	2300      	movs	r3, #0
 8004926:	60bb      	str	r3, [r7, #8]
 HAL_StatusTypeDef status = HAL_OK;
 8004928:	2300      	movs	r3, #0
 800492a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d102      	bne.n	8004938 <HAL_COMP_Start_IT+0x1c>
  {
    status = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	73fb      	strb	r3, [r7, #15]
 8004936:	e038      	b.n	80049aa <HAL_COMP_Start_IT+0x8e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004942:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004946:	d102      	bne.n	800494e <HAL_COMP_Start_IT+0x32>
  {
    status = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	73fb      	strb	r3, [r7, #15]
 800494c:	e02d      	b.n	80049aa <HAL_COMP_Start_IT+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));
    /* Set HAL COMP handle state */
    if(hcomp->State == HAL_COMP_STATE_READY)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b01      	cmp	r3, #1
 8004958:	d125      	bne.n	80049a6 <HAL_COMP_Start_IT+0x8a>
    {

    /* Enable the selected comparator */
    SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_EN);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f042 0201 	orr.w	r2, r2, #1
 8004968:	601a      	str	r2, [r3, #0]
    /* Enable the Interrupt comparator */
    SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_ITEN);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004978:	601a      	str	r2, [r3, #0]

    hcomp->State = HAL_COMP_STATE_BUSY; 
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2202      	movs	r2, #2
 800497e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */

     wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004982:	4b0d      	ldr	r3, [pc, #52]	; (80049b8 <HAL_COMP_Start_IT+0x9c>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	099b      	lsrs	r3, r3, #6
 8004988:	4a0c      	ldr	r2, [pc, #48]	; (80049bc <HAL_COMP_Start_IT+0xa0>)
 800498a:	fba2 2303 	umull	r2, r3, r2, r3
 800498e:	099b      	lsrs	r3, r3, #6
 8004990:	3301      	adds	r3, #1
 8004992:	00db      	lsls	r3, r3, #3
 8004994:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 8004996:	e002      	b.n	800499e <HAL_COMP_Start_IT+0x82>
     {
       wait_loop_index--;
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	3b01      	subs	r3, #1
 800499c:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1f9      	bne.n	8004998 <HAL_COMP_Start_IT+0x7c>
 80049a4:	e001      	b.n	80049aa <HAL_COMP_Start_IT+0x8e>
     }

    }
    else
    {
       status = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	73fb      	strb	r3, [r7, #15]
    }
   }

  return status;
 80049aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3714      	adds	r7, #20
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	24000000 	.word	0x24000000
 80049bc:	053e2d63 	.word	0x053e2d63

080049c0 <HAL_COMP_Stop_IT>:
  * @brief  Disable the interrupt and Stop the comparator. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop_IT(COMP_HandleTypeDef *hcomp)
{  
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  /* Disable the EXTI Line interrupt mode */
#if !defined (CORE_CM4)
   CLEAR_BIT(EXTI->IMR1, COMP_GET_EXTI_LINE(hcomp->Instance));
 80049c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	6812      	ldr	r2, [r2, #0]
 80049d4:	490f      	ldr	r1, [pc, #60]	; (8004a14 <HAL_COMP_Stop_IT+0x54>)
 80049d6:	428a      	cmp	r2, r1
 80049d8:	d102      	bne.n	80049e0 <HAL_COMP_Stop_IT+0x20>
 80049da:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80049de:	e001      	b.n	80049e4 <HAL_COMP_Stop_IT+0x24>
 80049e0:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80049e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049e8:	4013      	ands	r3, r2
 80049ea:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
#else
   CLEAR_BIT(EXTI->C2IMR1, COMP_GET_EXTI_LINE(hcomp->Instance));
#endif   
  /* Disable the Interrupt comparator */
   CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_ITEN);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049fc:	601a      	str	r2, [r3, #0]

  status = HAL_COMP_Stop(hcomp);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7ff ff58 	bl	80048b4 <HAL_COMP_Stop>
 8004a04:	4603      	mov	r3, r0
 8004a06:	73fb      	strb	r3, [r7, #15]
  
  return status;
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
  
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	5800380c 	.word	0x5800380c

08004a18 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a45      	ldr	r2, [pc, #276]	; (8004b3c <HAL_COMP_IRQHandler+0x124>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d102      	bne.n	8004a30 <HAL_COMP_IRQHandler+0x18>
 8004a2a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004a2e:	e001      	b.n	8004a34 <HAL_COMP_IRQHandler+0x1c>
 8004a30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a34:	60fb      	str	r3, [r7, #12]
  

#if defined(DUAL_CORE)
  /* EXTI line interrupt detected */
 if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8004a36:	f000 f997 	bl	8004d68 <HAL_GetCurrentCPUID>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b03      	cmp	r3, #3
 8004a3e:	d11d      	bne.n	8004a7c <HAL_COMP_IRQHandler+0x64>
 {
    /* Check COMP EXTI flag */
    if(READ_BIT(EXTI->PR1, exti_line) != 0UL)
 8004a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a44:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d032      	beq.n	8004ab6 <HAL_COMP_IRQHandler+0x9e>
    {    
       /* Check whether comparator is in independent or window mode */
        if(READ_BIT(COMP12_COMMON->CFGR, COMP_CFGRx_WINMODE) != 0UL)
 8004a50:	4b3b      	ldr	r3, [pc, #236]	; (8004b40 <HAL_COMP_IRQHandler+0x128>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0310 	and.w	r3, r3, #16
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d006      	beq.n	8004a6a <HAL_COMP_IRQHandler+0x52>
          /* Note: Pair of comparators in window mode can both trig IRQ when      */
          /*       input voltage is changing from "out of window" area            */
          /*       (low or high ) to the other "out of window" area (high or low).*/
          /*       Both flags must be cleared to call comparator trigger          */
          /*       callback is called once.                                       */
          WRITE_REG(EXTI->PR1, (COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 8004a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a60:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8004a64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8004a68:	e004      	b.n	8004a74 <HAL_COMP_IRQHandler+0x5c>
        }
        else
        {
          /* Clear COMP EXTI line pending bit */
          WRITE_REG(EXTI->PR1, exti_line);
 8004a6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7fc fe57 	bl	8001728 <HAL_COMP_TriggerCallback>
 8004a7a:	e01c      	b.n	8004ab6 <HAL_COMP_IRQHandler+0x9e>

 }
 else
 {
    /* Check COMP EXTI flag */
    if(READ_BIT(EXTI->C2PR1, exti_line) != 0UL)
 8004a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a80:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4013      	ands	r3, r2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d014      	beq.n	8004ab6 <HAL_COMP_IRQHandler+0x9e>
    {    
       /* Check whether comparator is in independent or window mode */
        if(READ_BIT(COMP12_COMMON->CFGR, COMP_CFGRx_WINMODE) != 0UL)
 8004a8c:	4b2c      	ldr	r3, [pc, #176]	; (8004b40 <HAL_COMP_IRQHandler+0x128>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0310 	and.w	r3, r3, #16
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d006      	beq.n	8004aa6 <HAL_COMP_IRQHandler+0x8e>
          /* Note: Pair of comparators in window mode can both trig IRQ when      */
          /*       input voltage is changing from "out of window" area            */
          /*       (low or high ) to the other "out of window" area (high or low).*/
          /*       Both flags must be cleared to call comparator trigger          */
          /*       callback is called once.                                       */
          WRITE_REG(EXTI->C2PR1, (COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 8004a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a9c:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8004aa0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8004aa4:	e004      	b.n	8004ab0 <HAL_COMP_IRQHandler+0x98>
        }
        else
        {
          /* Clear COMP EXTI line pending bit */
          WRITE_REG(EXTI->C2PR1, exti_line);
 8004aa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f7fc fe39 	bl	8001728 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
#endif /*DUAL_CORE*/

   /* Get COMP interrupt source */
  if (__HAL_COMP_GET_IT_SOURCE(hcomp, COMP_IT_EN) != RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac0:	2b40      	cmp	r3, #64	; 0x40
 8004ac2:	d136      	bne.n	8004b32 <HAL_COMP_IRQHandler+0x11a>
  {

    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C1I)) != 0UL)
 8004ac4:	4b1f      	ldr	r3, [pc, #124]	; (8004b44 <HAL_COMP_IRQHandler+0x12c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad0:	d101      	bne.n	8004ad6 <HAL_COMP_IRQHandler+0xbe>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e000      	b.n	8004ad8 <HAL_COMP_IRQHandler+0xc0>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00b      	beq.n	8004af4 <HAL_COMP_IRQHandler+0xdc>
    {
      /* Clear the COMP channel 1 interrupt flag */
         __HAL_COMP_CLEAR_C1IFLAG();
 8004adc:	4b19      	ldr	r3, [pc, #100]	; (8004b44 <HAL_COMP_IRQHandler+0x12c>)
 8004ade:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004ae2:	605a      	str	r2, [r3, #4]
   
      /* Disable COMP interrupt */
       __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004af2:	601a      	str	r2, [r3, #0]
   
    }
    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C2I)) != 0UL)
 8004af4:	4b13      	ldr	r3, [pc, #76]	; (8004b44 <HAL_COMP_IRQHandler+0x12c>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b00:	d101      	bne.n	8004b06 <HAL_COMP_IRQHandler+0xee>
 8004b02:	2301      	movs	r3, #1
 8004b04:	e000      	b.n	8004b08 <HAL_COMP_IRQHandler+0xf0>
 8004b06:	2300      	movs	r3, #0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00b      	beq.n	8004b24 <HAL_COMP_IRQHandler+0x10c>
    {
     /* Clear the COMP channel 2 interrupt flag */
       __HAL_COMP_CLEAR_C2IFLAG();
 8004b0c:	4b0d      	ldr	r3, [pc, #52]	; (8004b44 <HAL_COMP_IRQHandler+0x12c>)
 8004b0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b12:	605a      	str	r2, [r3, #4]
   
     /* Disable COMP interrupt */
     __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b22:	601a      	str	r2, [r3, #0]
       
    }

    /* Change COMP state */
    hcomp->State = HAL_COMP_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f7fc fdfb 	bl	8001728 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }    
 

}
 8004b32:	bf00      	nop
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	5800380c 	.word	0x5800380c
 8004b40:	58003810 	.word	0x58003810
 8004b44:	58003800 	.word	0x58003800

08004b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b58:	4b0b      	ldr	r3, [pc, #44]	; (8004b88 <__NVIC_SetPriorityGrouping+0x40>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b64:	4013      	ands	r3, r2
 8004b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b70:	4b06      	ldr	r3, [pc, #24]	; (8004b8c <__NVIC_SetPriorityGrouping+0x44>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b76:	4a04      	ldr	r2, [pc, #16]	; (8004b88 <__NVIC_SetPriorityGrouping+0x40>)
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	60d3      	str	r3, [r2, #12]
}
 8004b7c:	bf00      	nop
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	e000ed00 	.word	0xe000ed00
 8004b8c:	05fa0000 	.word	0x05fa0000

08004b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b90:	b480      	push	{r7}
 8004b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b94:	4b04      	ldr	r3, [pc, #16]	; (8004ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	0a1b      	lsrs	r3, r3, #8
 8004b9a:	f003 0307 	and.w	r3, r3, #7
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	e000ed00 	.word	0xe000ed00

08004bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004bb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	db0b      	blt.n	8004bd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bbe:	88fb      	ldrh	r3, [r7, #6]
 8004bc0:	f003 021f 	and.w	r2, r3, #31
 8004bc4:	4907      	ldr	r1, [pc, #28]	; (8004be4 <__NVIC_EnableIRQ+0x38>)
 8004bc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bca:	095b      	lsrs	r3, r3, #5
 8004bcc:	2001      	movs	r0, #1
 8004bce:	fa00 f202 	lsl.w	r2, r0, r2
 8004bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004bd6:	bf00      	nop
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	e000e100 	.word	0xe000e100

08004be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	4603      	mov	r3, r0
 8004bf0:	6039      	str	r1, [r7, #0]
 8004bf2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004bf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	db0a      	blt.n	8004c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	b2da      	uxtb	r2, r3
 8004c00:	490c      	ldr	r1, [pc, #48]	; (8004c34 <__NVIC_SetPriority+0x4c>)
 8004c02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c06:	0112      	lsls	r2, r2, #4
 8004c08:	b2d2      	uxtb	r2, r2
 8004c0a:	440b      	add	r3, r1
 8004c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c10:	e00a      	b.n	8004c28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	b2da      	uxtb	r2, r3
 8004c16:	4908      	ldr	r1, [pc, #32]	; (8004c38 <__NVIC_SetPriority+0x50>)
 8004c18:	88fb      	ldrh	r3, [r7, #6]
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	3b04      	subs	r3, #4
 8004c20:	0112      	lsls	r2, r2, #4
 8004c22:	b2d2      	uxtb	r2, r2
 8004c24:	440b      	add	r3, r1
 8004c26:	761a      	strb	r2, [r3, #24]
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	e000e100 	.word	0xe000e100
 8004c38:	e000ed00 	.word	0xe000ed00

08004c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b089      	sub	sp, #36	; 0x24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	f1c3 0307 	rsb	r3, r3, #7
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	bf28      	it	cs
 8004c5a:	2304      	movcs	r3, #4
 8004c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	3304      	adds	r3, #4
 8004c62:	2b06      	cmp	r3, #6
 8004c64:	d902      	bls.n	8004c6c <NVIC_EncodePriority+0x30>
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	3b03      	subs	r3, #3
 8004c6a:	e000      	b.n	8004c6e <NVIC_EncodePriority+0x32>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c70:	f04f 32ff 	mov.w	r2, #4294967295
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7a:	43da      	mvns	r2, r3
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	401a      	ands	r2, r3
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c84:	f04f 31ff 	mov.w	r1, #4294967295
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c8e:	43d9      	mvns	r1, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c94:	4313      	orrs	r3, r2
         );
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3724      	adds	r7, #36	; 0x24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
	...

08004ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cb4:	d301      	bcc.n	8004cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e00f      	b.n	8004cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cba:	4a0a      	ldr	r2, [pc, #40]	; (8004ce4 <SysTick_Config+0x40>)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cc2:	210f      	movs	r1, #15
 8004cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc8:	f7ff ff8e 	bl	8004be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ccc:	4b05      	ldr	r3, [pc, #20]	; (8004ce4 <SysTick_Config+0x40>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cd2:	4b04      	ldr	r3, [pc, #16]	; (8004ce4 <SysTick_Config+0x40>)
 8004cd4:	2207      	movs	r2, #7
 8004cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	e000e010 	.word	0xe000e010

08004ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7ff ff29 	bl	8004b48 <__NVIC_SetPriorityGrouping>
}
 8004cf6:	bf00      	nop
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b086      	sub	sp, #24
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	4603      	mov	r3, r0
 8004d06:	60b9      	str	r1, [r7, #8]
 8004d08:	607a      	str	r2, [r7, #4]
 8004d0a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d0c:	f7ff ff40 	bl	8004b90 <__NVIC_GetPriorityGrouping>
 8004d10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	68b9      	ldr	r1, [r7, #8]
 8004d16:	6978      	ldr	r0, [r7, #20]
 8004d18:	f7ff ff90 	bl	8004c3c <NVIC_EncodePriority>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d22:	4611      	mov	r1, r2
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7ff ff5f 	bl	8004be8 <__NVIC_SetPriority>
}
 8004d2a:	bf00      	nop
 8004d2c:	3718      	adds	r7, #24
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b082      	sub	sp, #8
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	4603      	mov	r3, r0
 8004d3a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7ff ff33 	bl	8004bac <__NVIC_EnableIRQ>
}
 8004d46:	bf00      	nop
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b082      	sub	sp, #8
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7ff ffa4 	bl	8004ca4 <SysTick_Config>
 8004d5c:	4603      	mov	r3, r0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
	...

08004d68 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8004d6c:	4b07      	ldr	r3, [pc, #28]	; (8004d8c <HAL_GetCurrentCPUID+0x24>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	091b      	lsrs	r3, r3, #4
 8004d72:	f003 030f 	and.w	r3, r3, #15
 8004d76:	2b07      	cmp	r3, #7
 8004d78:	d101      	bne.n	8004d7e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e000      	b.n	8004d80 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8004d7e:	2301      	movs	r3, #1
  }
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	e000ed00 	.word	0xe000ed00

08004d90 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e014      	b.n	8004dcc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	791b      	ldrb	r3, [r3, #4]
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d105      	bne.n	8004db8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7fd f9ac 	bl	8002110 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	795b      	ldrb	r3, [r3, #5]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d101      	bne.n	8004dea <HAL_DAC_Start+0x16>
 8004de6:	2302      	movs	r3, #2
 8004de8:	e040      	b.n	8004e6c <HAL_DAC_Start+0x98>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2202      	movs	r2, #2
 8004df4:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6819      	ldr	r1, [r3, #0]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	f003 0310 	and.w	r3, r3, #16
 8004e02:	2201      	movs	r2, #1
 8004e04:	409a      	lsls	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10f      	bne.n	8004e34 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d11d      	bne.n	8004e5e <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f042 0201 	orr.w	r2, r2, #1
 8004e30:	605a      	str	r2, [r3, #4]
 8004e32:	e014      	b.n	8004e5e <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	f003 0310 	and.w	r3, r3, #16
 8004e44:	2102      	movs	r1, #2
 8004e46:	fa01 f303 	lsl.w	r3, r1, r3
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d107      	bne.n	8004e5e <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f042 0202 	orr.w	r2, r2, #2
 8004e5c:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b087      	sub	sp, #28
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
 8004e84:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004e86:	2300      	movs	r3, #0
 8004e88:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d105      	bne.n	8004ea2 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	3308      	adds	r3, #8
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	e004      	b.n	8004eac <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	3314      	adds	r3, #20
 8004eaa:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	371c      	adds	r7, #28
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
	...

08004ec4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b088      	sub	sp, #32
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	795b      	ldrb	r3, [r3, #5]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d101      	bne.n	8004edc <HAL_DAC_ConfigChannel+0x18>
 8004ed8:	2302      	movs	r3, #2
 8004eda:	e11d      	b.n	8005118 <HAL_DAC_ConfigChannel+0x254>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b04      	cmp	r3, #4
 8004eee:	d174      	bne.n	8004fda <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004ef0:	f7fd fb26 	bl	8002540 <HAL_GetTick>
 8004ef4:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d134      	bne.n	8004f66 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004efc:	e011      	b.n	8004f22 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004efe:	f7fd fb1f 	bl	8002540 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d90a      	bls.n	8004f22 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	f043 0208 	orr.w	r2, r3, #8
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2203      	movs	r2, #3
 8004f1c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e0fa      	b.n	8005118 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f28:	4b7d      	ldr	r3, [pc, #500]	; (8005120 <HAL_DAC_ConfigChannel+0x25c>)
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1e6      	bne.n	8004efe <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8004f30:	2001      	movs	r0, #1
 8004f32:	f7fd fb11 	bl	8002558 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	6992      	ldr	r2, [r2, #24]
 8004f3e:	641a      	str	r2, [r3, #64]	; 0x40
 8004f40:	e01e      	b.n	8004f80 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004f42:	f7fd fafd 	bl	8002540 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d90a      	bls.n	8004f66 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	f043 0208 	orr.w	r2, r3, #8
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2203      	movs	r2, #3
 8004f60:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e0d8      	b.n	8005118 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	dbe8      	blt.n	8004f42 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004f70:	2001      	movs	r0, #1
 8004f72:	f7fd faf1 	bl	8002558 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	6992      	ldr	r2, [r2, #24]
 8004f7e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f003 0310 	and.w	r3, r3, #16
 8004f8c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004f90:	fa01 f303 	lsl.w	r3, r1, r3
 8004f94:	43db      	mvns	r3, r3
 8004f96:	ea02 0103 	and.w	r1, r2, r3
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	69da      	ldr	r2, [r3, #28]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f003 0310 	and.w	r3, r3, #16
 8004fa4:	409a      	lsls	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f003 0310 	and.w	r3, r3, #16
 8004fba:	21ff      	movs	r1, #255	; 0xff
 8004fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc0:	43db      	mvns	r3, r3
 8004fc2:	ea02 0103 	and.w	r1, r2, r3
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	6a1a      	ldr	r2, [r3, #32]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f003 0310 	and.w	r3, r3, #16
 8004fd0:	409a      	lsls	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d11d      	bne.n	800501e <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe8:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f003 0310 	and.w	r3, r3, #16
 8004ff0:	221f      	movs	r2, #31
 8004ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff6:	43db      	mvns	r3, r3
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f003 0310 	and.w	r3, r3, #16
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	fa02 f303 	lsl.w	r3, r2, r3
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	4313      	orrs	r3, r2
 8005014:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005024:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f003 0310 	and.w	r3, r3, #16
 800502c:	2207      	movs	r2, #7
 800502e:	fa02 f303 	lsl.w	r3, r2, r3
 8005032:	43db      	mvns	r3, r3
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	4013      	ands	r3, r2
 8005038:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d102      	bne.n	8005048 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8005042:	2300      	movs	r3, #0
 8005044:	61fb      	str	r3, [r7, #28]
 8005046:	e00f      	b.n	8005068 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	2b02      	cmp	r3, #2
 800504e:	d102      	bne.n	8005056 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005050:	2301      	movs	r3, #1
 8005052:	61fb      	str	r3, [r7, #28]
 8005054:	e008      	b.n	8005068 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d102      	bne.n	8005064 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800505e:	2301      	movs	r3, #1
 8005060:	61fb      	str	r3, [r7, #28]
 8005062:	e001      	b.n	8005068 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005064:	2300      	movs	r3, #0
 8005066:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	4313      	orrs	r3, r2
 8005072:	69fa      	ldr	r2, [r7, #28]
 8005074:	4313      	orrs	r3, r2
 8005076:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f003 0310 	and.w	r3, r3, #16
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	fa02 f303 	lsl.w	r3, r2, r3
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	4313      	orrs	r3, r2
 8005088:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6819      	ldr	r1, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f003 0310 	and.w	r3, r3, #16
 800509e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80050a2:	fa02 f303 	lsl.w	r3, r2, r3
 80050a6:	43da      	mvns	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	400a      	ands	r2, r1
 80050ae:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f003 0310 	and.w	r3, r3, #16
 80050be:	f640 72fe 	movw	r2, #4094	; 0xffe
 80050c2:	fa02 f303 	lsl.w	r3, r2, r3
 80050c6:	43db      	mvns	r3, r3
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	4013      	ands	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f003 0310 	and.w	r3, r3, #16
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	fa02 f303 	lsl.w	r3, r2, r3
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6819      	ldr	r1, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f003 0310 	and.w	r3, r3, #16
 80050fa:	22c0      	movs	r2, #192	; 0xc0
 80050fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005100:	43da      	mvns	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	400a      	ands	r2, r1
 8005108:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2201      	movs	r2, #1
 800510e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3720      	adds	r7, #32
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	20008000 	.word	0x20008000

08005124 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800512c:	f7fd fa08 	bl	8002540 <HAL_GetTick>
 8005130:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d101      	bne.n	800513c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e316      	b.n	800576a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a66      	ldr	r2, [pc, #408]	; (80052dc <HAL_DMA_Init+0x1b8>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d04a      	beq.n	80051dc <HAL_DMA_Init+0xb8>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a65      	ldr	r2, [pc, #404]	; (80052e0 <HAL_DMA_Init+0x1bc>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d045      	beq.n	80051dc <HAL_DMA_Init+0xb8>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a63      	ldr	r2, [pc, #396]	; (80052e4 <HAL_DMA_Init+0x1c0>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d040      	beq.n	80051dc <HAL_DMA_Init+0xb8>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a62      	ldr	r2, [pc, #392]	; (80052e8 <HAL_DMA_Init+0x1c4>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d03b      	beq.n	80051dc <HAL_DMA_Init+0xb8>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a60      	ldr	r2, [pc, #384]	; (80052ec <HAL_DMA_Init+0x1c8>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d036      	beq.n	80051dc <HAL_DMA_Init+0xb8>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a5f      	ldr	r2, [pc, #380]	; (80052f0 <HAL_DMA_Init+0x1cc>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d031      	beq.n	80051dc <HAL_DMA_Init+0xb8>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a5d      	ldr	r2, [pc, #372]	; (80052f4 <HAL_DMA_Init+0x1d0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d02c      	beq.n	80051dc <HAL_DMA_Init+0xb8>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a5c      	ldr	r2, [pc, #368]	; (80052f8 <HAL_DMA_Init+0x1d4>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d027      	beq.n	80051dc <HAL_DMA_Init+0xb8>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a5a      	ldr	r2, [pc, #360]	; (80052fc <HAL_DMA_Init+0x1d8>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d022      	beq.n	80051dc <HAL_DMA_Init+0xb8>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a59      	ldr	r2, [pc, #356]	; (8005300 <HAL_DMA_Init+0x1dc>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d01d      	beq.n	80051dc <HAL_DMA_Init+0xb8>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a57      	ldr	r2, [pc, #348]	; (8005304 <HAL_DMA_Init+0x1e0>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d018      	beq.n	80051dc <HAL_DMA_Init+0xb8>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a56      	ldr	r2, [pc, #344]	; (8005308 <HAL_DMA_Init+0x1e4>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d013      	beq.n	80051dc <HAL_DMA_Init+0xb8>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a54      	ldr	r2, [pc, #336]	; (800530c <HAL_DMA_Init+0x1e8>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d00e      	beq.n	80051dc <HAL_DMA_Init+0xb8>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a53      	ldr	r2, [pc, #332]	; (8005310 <HAL_DMA_Init+0x1ec>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d009      	beq.n	80051dc <HAL_DMA_Init+0xb8>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a51      	ldr	r2, [pc, #324]	; (8005314 <HAL_DMA_Init+0x1f0>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d004      	beq.n	80051dc <HAL_DMA_Init+0xb8>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a50      	ldr	r2, [pc, #320]	; (8005318 <HAL_DMA_Init+0x1f4>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d101      	bne.n	80051e0 <HAL_DMA_Init+0xbc>
 80051dc:	2301      	movs	r3, #1
 80051de:	e000      	b.n	80051e2 <HAL_DMA_Init+0xbe>
 80051e0:	2300      	movs	r3, #0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f000 813b 	beq.w	800545e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a37      	ldr	r2, [pc, #220]	; (80052dc <HAL_DMA_Init+0x1b8>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d04a      	beq.n	8005298 <HAL_DMA_Init+0x174>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a36      	ldr	r2, [pc, #216]	; (80052e0 <HAL_DMA_Init+0x1bc>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d045      	beq.n	8005298 <HAL_DMA_Init+0x174>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a34      	ldr	r2, [pc, #208]	; (80052e4 <HAL_DMA_Init+0x1c0>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d040      	beq.n	8005298 <HAL_DMA_Init+0x174>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a33      	ldr	r2, [pc, #204]	; (80052e8 <HAL_DMA_Init+0x1c4>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d03b      	beq.n	8005298 <HAL_DMA_Init+0x174>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a31      	ldr	r2, [pc, #196]	; (80052ec <HAL_DMA_Init+0x1c8>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d036      	beq.n	8005298 <HAL_DMA_Init+0x174>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a30      	ldr	r2, [pc, #192]	; (80052f0 <HAL_DMA_Init+0x1cc>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d031      	beq.n	8005298 <HAL_DMA_Init+0x174>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a2e      	ldr	r2, [pc, #184]	; (80052f4 <HAL_DMA_Init+0x1d0>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d02c      	beq.n	8005298 <HAL_DMA_Init+0x174>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a2d      	ldr	r2, [pc, #180]	; (80052f8 <HAL_DMA_Init+0x1d4>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d027      	beq.n	8005298 <HAL_DMA_Init+0x174>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a2b      	ldr	r2, [pc, #172]	; (80052fc <HAL_DMA_Init+0x1d8>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d022      	beq.n	8005298 <HAL_DMA_Init+0x174>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a2a      	ldr	r2, [pc, #168]	; (8005300 <HAL_DMA_Init+0x1dc>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d01d      	beq.n	8005298 <HAL_DMA_Init+0x174>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a28      	ldr	r2, [pc, #160]	; (8005304 <HAL_DMA_Init+0x1e0>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d018      	beq.n	8005298 <HAL_DMA_Init+0x174>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a27      	ldr	r2, [pc, #156]	; (8005308 <HAL_DMA_Init+0x1e4>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d013      	beq.n	8005298 <HAL_DMA_Init+0x174>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a25      	ldr	r2, [pc, #148]	; (800530c <HAL_DMA_Init+0x1e8>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d00e      	beq.n	8005298 <HAL_DMA_Init+0x174>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a24      	ldr	r2, [pc, #144]	; (8005310 <HAL_DMA_Init+0x1ec>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d009      	beq.n	8005298 <HAL_DMA_Init+0x174>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a22      	ldr	r2, [pc, #136]	; (8005314 <HAL_DMA_Init+0x1f0>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d004      	beq.n	8005298 <HAL_DMA_Init+0x174>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a21      	ldr	r2, [pc, #132]	; (8005318 <HAL_DMA_Init+0x1f4>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d108      	bne.n	80052aa <HAL_DMA_Init+0x186>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f022 0201 	bic.w	r2, r2, #1
 80052a6:	601a      	str	r2, [r3, #0]
 80052a8:	e007      	b.n	80052ba <HAL_DMA_Init+0x196>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f022 0201 	bic.w	r2, r2, #1
 80052b8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80052ba:	e02f      	b.n	800531c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80052bc:	f7fd f940 	bl	8002540 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b05      	cmp	r3, #5
 80052c8:	d928      	bls.n	800531c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2220      	movs	r2, #32
 80052ce:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2203      	movs	r2, #3
 80052d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e246      	b.n	800576a <HAL_DMA_Init+0x646>
 80052dc:	40020010 	.word	0x40020010
 80052e0:	40020028 	.word	0x40020028
 80052e4:	40020040 	.word	0x40020040
 80052e8:	40020058 	.word	0x40020058
 80052ec:	40020070 	.word	0x40020070
 80052f0:	40020088 	.word	0x40020088
 80052f4:	400200a0 	.word	0x400200a0
 80052f8:	400200b8 	.word	0x400200b8
 80052fc:	40020410 	.word	0x40020410
 8005300:	40020428 	.word	0x40020428
 8005304:	40020440 	.word	0x40020440
 8005308:	40020458 	.word	0x40020458
 800530c:	40020470 	.word	0x40020470
 8005310:	40020488 	.word	0x40020488
 8005314:	400204a0 	.word	0x400204a0
 8005318:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1c8      	bne.n	80052bc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	4b83      	ldr	r3, [pc, #524]	; (8005544 <HAL_DMA_Init+0x420>)
 8005336:	4013      	ands	r3, r2
 8005338:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005342:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800534e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800535a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	4313      	orrs	r3, r2
 8005366:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	2b04      	cmp	r3, #4
 800536e:	d107      	bne.n	8005380 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005378:	4313      	orrs	r3, r2
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	4313      	orrs	r3, r2
 800537e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005380:	4b71      	ldr	r3, [pc, #452]	; (8005548 <HAL_DMA_Init+0x424>)
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	4b71      	ldr	r3, [pc, #452]	; (800554c <HAL_DMA_Init+0x428>)
 8005386:	4013      	ands	r3, r2
 8005388:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800538c:	d328      	bcc.n	80053e0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	2b28      	cmp	r3, #40	; 0x28
 8005394:	d903      	bls.n	800539e <HAL_DMA_Init+0x27a>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	2b2e      	cmp	r3, #46	; 0x2e
 800539c:	d917      	bls.n	80053ce <HAL_DMA_Init+0x2aa>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	2b3e      	cmp	r3, #62	; 0x3e
 80053a4:	d903      	bls.n	80053ae <HAL_DMA_Init+0x28a>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2b42      	cmp	r3, #66	; 0x42
 80053ac:	d90f      	bls.n	80053ce <HAL_DMA_Init+0x2aa>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2b46      	cmp	r3, #70	; 0x46
 80053b4:	d903      	bls.n	80053be <HAL_DMA_Init+0x29a>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	2b48      	cmp	r3, #72	; 0x48
 80053bc:	d907      	bls.n	80053ce <HAL_DMA_Init+0x2aa>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2b4e      	cmp	r3, #78	; 0x4e
 80053c4:	d905      	bls.n	80053d2 <HAL_DMA_Init+0x2ae>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	2b52      	cmp	r3, #82	; 0x52
 80053cc:	d801      	bhi.n	80053d2 <HAL_DMA_Init+0x2ae>
 80053ce:	2301      	movs	r3, #1
 80053d0:	e000      	b.n	80053d4 <HAL_DMA_Init+0x2b0>
 80053d2:	2300      	movs	r3, #0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053de:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f023 0307 	bic.w	r3, r3, #7
 80053f6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	4313      	orrs	r3, r2
 8005400:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005406:	2b04      	cmp	r3, #4
 8005408:	d117      	bne.n	800543a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	4313      	orrs	r3, r2
 8005412:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00e      	beq.n	800543a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f002 f8ed 	bl	80075fc <DMA_CheckFifoParam>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d008      	beq.n	800543a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2240      	movs	r2, #64	; 0x40
 800542c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e197      	b.n	800576a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f002 f828 	bl	8007498 <DMA_CalcBaseAndBitshift>
 8005448:	4603      	mov	r3, r0
 800544a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005450:	f003 031f 	and.w	r3, r3, #31
 8005454:	223f      	movs	r2, #63	; 0x3f
 8005456:	409a      	lsls	r2, r3
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	609a      	str	r2, [r3, #8]
 800545c:	e0cd      	b.n	80055fa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a3b      	ldr	r2, [pc, #236]	; (8005550 <HAL_DMA_Init+0x42c>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d022      	beq.n	80054ae <HAL_DMA_Init+0x38a>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a39      	ldr	r2, [pc, #228]	; (8005554 <HAL_DMA_Init+0x430>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d01d      	beq.n	80054ae <HAL_DMA_Init+0x38a>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a38      	ldr	r2, [pc, #224]	; (8005558 <HAL_DMA_Init+0x434>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d018      	beq.n	80054ae <HAL_DMA_Init+0x38a>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a36      	ldr	r2, [pc, #216]	; (800555c <HAL_DMA_Init+0x438>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d013      	beq.n	80054ae <HAL_DMA_Init+0x38a>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a35      	ldr	r2, [pc, #212]	; (8005560 <HAL_DMA_Init+0x43c>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d00e      	beq.n	80054ae <HAL_DMA_Init+0x38a>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a33      	ldr	r2, [pc, #204]	; (8005564 <HAL_DMA_Init+0x440>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d009      	beq.n	80054ae <HAL_DMA_Init+0x38a>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a32      	ldr	r2, [pc, #200]	; (8005568 <HAL_DMA_Init+0x444>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d004      	beq.n	80054ae <HAL_DMA_Init+0x38a>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a30      	ldr	r2, [pc, #192]	; (800556c <HAL_DMA_Init+0x448>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d101      	bne.n	80054b2 <HAL_DMA_Init+0x38e>
 80054ae:	2301      	movs	r3, #1
 80054b0:	e000      	b.n	80054b4 <HAL_DMA_Init+0x390>
 80054b2:	2300      	movs	r3, #0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 8097 	beq.w	80055e8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a24      	ldr	r2, [pc, #144]	; (8005550 <HAL_DMA_Init+0x42c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d021      	beq.n	8005508 <HAL_DMA_Init+0x3e4>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a22      	ldr	r2, [pc, #136]	; (8005554 <HAL_DMA_Init+0x430>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d01c      	beq.n	8005508 <HAL_DMA_Init+0x3e4>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a21      	ldr	r2, [pc, #132]	; (8005558 <HAL_DMA_Init+0x434>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d017      	beq.n	8005508 <HAL_DMA_Init+0x3e4>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a1f      	ldr	r2, [pc, #124]	; (800555c <HAL_DMA_Init+0x438>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d012      	beq.n	8005508 <HAL_DMA_Init+0x3e4>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a1e      	ldr	r2, [pc, #120]	; (8005560 <HAL_DMA_Init+0x43c>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d00d      	beq.n	8005508 <HAL_DMA_Init+0x3e4>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a1c      	ldr	r2, [pc, #112]	; (8005564 <HAL_DMA_Init+0x440>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d008      	beq.n	8005508 <HAL_DMA_Init+0x3e4>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a1b      	ldr	r2, [pc, #108]	; (8005568 <HAL_DMA_Init+0x444>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d003      	beq.n	8005508 <HAL_DMA_Init+0x3e4>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a19      	ldr	r2, [pc, #100]	; (800556c <HAL_DMA_Init+0x448>)
 8005506:	4293      	cmp	r3, r2
 8005508:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2202      	movs	r2, #2
 800550e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	4b12      	ldr	r3, [pc, #72]	; (8005570 <HAL_DMA_Init+0x44c>)
 8005526:	4013      	ands	r3, r2
 8005528:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	2b40      	cmp	r3, #64	; 0x40
 8005530:	d020      	beq.n	8005574 <HAL_DMA_Init+0x450>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	2b80      	cmp	r3, #128	; 0x80
 8005538:	d102      	bne.n	8005540 <HAL_DMA_Init+0x41c>
 800553a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800553e:	e01a      	b.n	8005576 <HAL_DMA_Init+0x452>
 8005540:	2300      	movs	r3, #0
 8005542:	e018      	b.n	8005576 <HAL_DMA_Init+0x452>
 8005544:	fe10803f 	.word	0xfe10803f
 8005548:	5c001000 	.word	0x5c001000
 800554c:	ffff0000 	.word	0xffff0000
 8005550:	58025408 	.word	0x58025408
 8005554:	5802541c 	.word	0x5802541c
 8005558:	58025430 	.word	0x58025430
 800555c:	58025444 	.word	0x58025444
 8005560:	58025458 	.word	0x58025458
 8005564:	5802546c 	.word	0x5802546c
 8005568:	58025480 	.word	0x58025480
 800556c:	58025494 	.word	0x58025494
 8005570:	fffe000f 	.word	0xfffe000f
 8005574:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	68d2      	ldr	r2, [r2, #12]
 800557a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800557c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005584:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800558c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005594:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800559c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80055a4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	461a      	mov	r2, r3
 80055ba:	4b6e      	ldr	r3, [pc, #440]	; (8005774 <HAL_DMA_Init+0x650>)
 80055bc:	4413      	add	r3, r2
 80055be:	4a6e      	ldr	r2, [pc, #440]	; (8005778 <HAL_DMA_Init+0x654>)
 80055c0:	fba2 2303 	umull	r2, r3, r2, r3
 80055c4:	091b      	lsrs	r3, r3, #4
 80055c6:	009a      	lsls	r2, r3, #2
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f001 ff63 	bl	8007498 <DMA_CalcBaseAndBitshift>
 80055d2:	4603      	mov	r3, r0
 80055d4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055da:	f003 031f 	and.w	r3, r3, #31
 80055de:	2201      	movs	r2, #1
 80055e0:	409a      	lsls	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	605a      	str	r2, [r3, #4]
 80055e6:	e008      	b.n	80055fa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2240      	movs	r2, #64	; 0x40
 80055ec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2203      	movs	r2, #3
 80055f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e0b7      	b.n	800576a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a5f      	ldr	r2, [pc, #380]	; (800577c <HAL_DMA_Init+0x658>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d072      	beq.n	80056ea <HAL_DMA_Init+0x5c6>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a5d      	ldr	r2, [pc, #372]	; (8005780 <HAL_DMA_Init+0x65c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d06d      	beq.n	80056ea <HAL_DMA_Init+0x5c6>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a5c      	ldr	r2, [pc, #368]	; (8005784 <HAL_DMA_Init+0x660>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d068      	beq.n	80056ea <HAL_DMA_Init+0x5c6>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a5a      	ldr	r2, [pc, #360]	; (8005788 <HAL_DMA_Init+0x664>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d063      	beq.n	80056ea <HAL_DMA_Init+0x5c6>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a59      	ldr	r2, [pc, #356]	; (800578c <HAL_DMA_Init+0x668>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d05e      	beq.n	80056ea <HAL_DMA_Init+0x5c6>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a57      	ldr	r2, [pc, #348]	; (8005790 <HAL_DMA_Init+0x66c>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d059      	beq.n	80056ea <HAL_DMA_Init+0x5c6>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a56      	ldr	r2, [pc, #344]	; (8005794 <HAL_DMA_Init+0x670>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d054      	beq.n	80056ea <HAL_DMA_Init+0x5c6>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a54      	ldr	r2, [pc, #336]	; (8005798 <HAL_DMA_Init+0x674>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d04f      	beq.n	80056ea <HAL_DMA_Init+0x5c6>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a53      	ldr	r2, [pc, #332]	; (800579c <HAL_DMA_Init+0x678>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d04a      	beq.n	80056ea <HAL_DMA_Init+0x5c6>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a51      	ldr	r2, [pc, #324]	; (80057a0 <HAL_DMA_Init+0x67c>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d045      	beq.n	80056ea <HAL_DMA_Init+0x5c6>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a50      	ldr	r2, [pc, #320]	; (80057a4 <HAL_DMA_Init+0x680>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d040      	beq.n	80056ea <HAL_DMA_Init+0x5c6>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a4e      	ldr	r2, [pc, #312]	; (80057a8 <HAL_DMA_Init+0x684>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d03b      	beq.n	80056ea <HAL_DMA_Init+0x5c6>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a4d      	ldr	r2, [pc, #308]	; (80057ac <HAL_DMA_Init+0x688>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d036      	beq.n	80056ea <HAL_DMA_Init+0x5c6>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a4b      	ldr	r2, [pc, #300]	; (80057b0 <HAL_DMA_Init+0x68c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d031      	beq.n	80056ea <HAL_DMA_Init+0x5c6>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a4a      	ldr	r2, [pc, #296]	; (80057b4 <HAL_DMA_Init+0x690>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d02c      	beq.n	80056ea <HAL_DMA_Init+0x5c6>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a48      	ldr	r2, [pc, #288]	; (80057b8 <HAL_DMA_Init+0x694>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d027      	beq.n	80056ea <HAL_DMA_Init+0x5c6>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a47      	ldr	r2, [pc, #284]	; (80057bc <HAL_DMA_Init+0x698>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d022      	beq.n	80056ea <HAL_DMA_Init+0x5c6>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a45      	ldr	r2, [pc, #276]	; (80057c0 <HAL_DMA_Init+0x69c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d01d      	beq.n	80056ea <HAL_DMA_Init+0x5c6>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a44      	ldr	r2, [pc, #272]	; (80057c4 <HAL_DMA_Init+0x6a0>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d018      	beq.n	80056ea <HAL_DMA_Init+0x5c6>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a42      	ldr	r2, [pc, #264]	; (80057c8 <HAL_DMA_Init+0x6a4>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d013      	beq.n	80056ea <HAL_DMA_Init+0x5c6>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a41      	ldr	r2, [pc, #260]	; (80057cc <HAL_DMA_Init+0x6a8>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d00e      	beq.n	80056ea <HAL_DMA_Init+0x5c6>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a3f      	ldr	r2, [pc, #252]	; (80057d0 <HAL_DMA_Init+0x6ac>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d009      	beq.n	80056ea <HAL_DMA_Init+0x5c6>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a3e      	ldr	r2, [pc, #248]	; (80057d4 <HAL_DMA_Init+0x6b0>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d004      	beq.n	80056ea <HAL_DMA_Init+0x5c6>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a3c      	ldr	r2, [pc, #240]	; (80057d8 <HAL_DMA_Init+0x6b4>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d101      	bne.n	80056ee <HAL_DMA_Init+0x5ca>
 80056ea:	2301      	movs	r3, #1
 80056ec:	e000      	b.n	80056f0 <HAL_DMA_Init+0x5cc>
 80056ee:	2300      	movs	r3, #0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d032      	beq.n	800575a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f001 fffd 	bl	80076f4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	2b80      	cmp	r3, #128	; 0x80
 8005700:	d102      	bne.n	8005708 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005710:	b2d2      	uxtb	r2, r2
 8005712:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800571c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d010      	beq.n	8005748 <HAL_DMA_Init+0x624>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	2b08      	cmp	r3, #8
 800572c:	d80c      	bhi.n	8005748 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f002 f87a 	bl	8007828 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005738:	2200      	movs	r2, #0
 800573a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005744:	605a      	str	r2, [r3, #4]
 8005746:	e008      	b.n	800575a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3718      	adds	r7, #24
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	a7fdabf8 	.word	0xa7fdabf8
 8005778:	cccccccd 	.word	0xcccccccd
 800577c:	40020010 	.word	0x40020010
 8005780:	40020028 	.word	0x40020028
 8005784:	40020040 	.word	0x40020040
 8005788:	40020058 	.word	0x40020058
 800578c:	40020070 	.word	0x40020070
 8005790:	40020088 	.word	0x40020088
 8005794:	400200a0 	.word	0x400200a0
 8005798:	400200b8 	.word	0x400200b8
 800579c:	40020410 	.word	0x40020410
 80057a0:	40020428 	.word	0x40020428
 80057a4:	40020440 	.word	0x40020440
 80057a8:	40020458 	.word	0x40020458
 80057ac:	40020470 	.word	0x40020470
 80057b0:	40020488 	.word	0x40020488
 80057b4:	400204a0 	.word	0x400204a0
 80057b8:	400204b8 	.word	0x400204b8
 80057bc:	58025408 	.word	0x58025408
 80057c0:	5802541c 	.word	0x5802541c
 80057c4:	58025430 	.word	0x58025430
 80057c8:	58025444 	.word	0x58025444
 80057cc:	58025458 	.word	0x58025458
 80057d0:	5802546c 	.word	0x5802546c
 80057d4:	58025480 	.word	0x58025480
 80057d8:	58025494 	.word	0x58025494

080057dc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
 80057e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e226      	b.n	8005c46 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d101      	bne.n	8005806 <HAL_DMA_Start_IT+0x2a>
 8005802:	2302      	movs	r3, #2
 8005804:	e21f      	b.n	8005c46 <HAL_DMA_Start_IT+0x46a>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b01      	cmp	r3, #1
 8005818:	f040 820a 	bne.w	8005c30 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2202      	movs	r2, #2
 8005820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a68      	ldr	r2, [pc, #416]	; (80059d0 <HAL_DMA_Start_IT+0x1f4>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d04a      	beq.n	80058ca <HAL_DMA_Start_IT+0xee>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a66      	ldr	r2, [pc, #408]	; (80059d4 <HAL_DMA_Start_IT+0x1f8>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d045      	beq.n	80058ca <HAL_DMA_Start_IT+0xee>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a65      	ldr	r2, [pc, #404]	; (80059d8 <HAL_DMA_Start_IT+0x1fc>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d040      	beq.n	80058ca <HAL_DMA_Start_IT+0xee>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a63      	ldr	r2, [pc, #396]	; (80059dc <HAL_DMA_Start_IT+0x200>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d03b      	beq.n	80058ca <HAL_DMA_Start_IT+0xee>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a62      	ldr	r2, [pc, #392]	; (80059e0 <HAL_DMA_Start_IT+0x204>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d036      	beq.n	80058ca <HAL_DMA_Start_IT+0xee>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a60      	ldr	r2, [pc, #384]	; (80059e4 <HAL_DMA_Start_IT+0x208>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d031      	beq.n	80058ca <HAL_DMA_Start_IT+0xee>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a5f      	ldr	r2, [pc, #380]	; (80059e8 <HAL_DMA_Start_IT+0x20c>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d02c      	beq.n	80058ca <HAL_DMA_Start_IT+0xee>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a5d      	ldr	r2, [pc, #372]	; (80059ec <HAL_DMA_Start_IT+0x210>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d027      	beq.n	80058ca <HAL_DMA_Start_IT+0xee>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a5c      	ldr	r2, [pc, #368]	; (80059f0 <HAL_DMA_Start_IT+0x214>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d022      	beq.n	80058ca <HAL_DMA_Start_IT+0xee>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a5a      	ldr	r2, [pc, #360]	; (80059f4 <HAL_DMA_Start_IT+0x218>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d01d      	beq.n	80058ca <HAL_DMA_Start_IT+0xee>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a59      	ldr	r2, [pc, #356]	; (80059f8 <HAL_DMA_Start_IT+0x21c>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d018      	beq.n	80058ca <HAL_DMA_Start_IT+0xee>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a57      	ldr	r2, [pc, #348]	; (80059fc <HAL_DMA_Start_IT+0x220>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d013      	beq.n	80058ca <HAL_DMA_Start_IT+0xee>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a56      	ldr	r2, [pc, #344]	; (8005a00 <HAL_DMA_Start_IT+0x224>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d00e      	beq.n	80058ca <HAL_DMA_Start_IT+0xee>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a54      	ldr	r2, [pc, #336]	; (8005a04 <HAL_DMA_Start_IT+0x228>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d009      	beq.n	80058ca <HAL_DMA_Start_IT+0xee>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a53      	ldr	r2, [pc, #332]	; (8005a08 <HAL_DMA_Start_IT+0x22c>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d004      	beq.n	80058ca <HAL_DMA_Start_IT+0xee>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a51      	ldr	r2, [pc, #324]	; (8005a0c <HAL_DMA_Start_IT+0x230>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d108      	bne.n	80058dc <HAL_DMA_Start_IT+0x100>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f022 0201 	bic.w	r2, r2, #1
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	e007      	b.n	80058ec <HAL_DMA_Start_IT+0x110>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f022 0201 	bic.w	r2, r2, #1
 80058ea:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	68b9      	ldr	r1, [r7, #8]
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f001 fc24 	bl	8007140 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a34      	ldr	r2, [pc, #208]	; (80059d0 <HAL_DMA_Start_IT+0x1f4>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d04a      	beq.n	8005998 <HAL_DMA_Start_IT+0x1bc>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a33      	ldr	r2, [pc, #204]	; (80059d4 <HAL_DMA_Start_IT+0x1f8>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d045      	beq.n	8005998 <HAL_DMA_Start_IT+0x1bc>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a31      	ldr	r2, [pc, #196]	; (80059d8 <HAL_DMA_Start_IT+0x1fc>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d040      	beq.n	8005998 <HAL_DMA_Start_IT+0x1bc>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a30      	ldr	r2, [pc, #192]	; (80059dc <HAL_DMA_Start_IT+0x200>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d03b      	beq.n	8005998 <HAL_DMA_Start_IT+0x1bc>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a2e      	ldr	r2, [pc, #184]	; (80059e0 <HAL_DMA_Start_IT+0x204>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d036      	beq.n	8005998 <HAL_DMA_Start_IT+0x1bc>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a2d      	ldr	r2, [pc, #180]	; (80059e4 <HAL_DMA_Start_IT+0x208>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d031      	beq.n	8005998 <HAL_DMA_Start_IT+0x1bc>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a2b      	ldr	r2, [pc, #172]	; (80059e8 <HAL_DMA_Start_IT+0x20c>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d02c      	beq.n	8005998 <HAL_DMA_Start_IT+0x1bc>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a2a      	ldr	r2, [pc, #168]	; (80059ec <HAL_DMA_Start_IT+0x210>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d027      	beq.n	8005998 <HAL_DMA_Start_IT+0x1bc>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a28      	ldr	r2, [pc, #160]	; (80059f0 <HAL_DMA_Start_IT+0x214>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d022      	beq.n	8005998 <HAL_DMA_Start_IT+0x1bc>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a27      	ldr	r2, [pc, #156]	; (80059f4 <HAL_DMA_Start_IT+0x218>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d01d      	beq.n	8005998 <HAL_DMA_Start_IT+0x1bc>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a25      	ldr	r2, [pc, #148]	; (80059f8 <HAL_DMA_Start_IT+0x21c>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d018      	beq.n	8005998 <HAL_DMA_Start_IT+0x1bc>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a24      	ldr	r2, [pc, #144]	; (80059fc <HAL_DMA_Start_IT+0x220>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d013      	beq.n	8005998 <HAL_DMA_Start_IT+0x1bc>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a22      	ldr	r2, [pc, #136]	; (8005a00 <HAL_DMA_Start_IT+0x224>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d00e      	beq.n	8005998 <HAL_DMA_Start_IT+0x1bc>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a21      	ldr	r2, [pc, #132]	; (8005a04 <HAL_DMA_Start_IT+0x228>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d009      	beq.n	8005998 <HAL_DMA_Start_IT+0x1bc>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a1f      	ldr	r2, [pc, #124]	; (8005a08 <HAL_DMA_Start_IT+0x22c>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d004      	beq.n	8005998 <HAL_DMA_Start_IT+0x1bc>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a1e      	ldr	r2, [pc, #120]	; (8005a0c <HAL_DMA_Start_IT+0x230>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d101      	bne.n	800599c <HAL_DMA_Start_IT+0x1c0>
 8005998:	2301      	movs	r3, #1
 800599a:	e000      	b.n	800599e <HAL_DMA_Start_IT+0x1c2>
 800599c:	2300      	movs	r3, #0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d036      	beq.n	8005a10 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f023 021e 	bic.w	r2, r3, #30
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f042 0216 	orr.w	r2, r2, #22
 80059b4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d03e      	beq.n	8005a3c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f042 0208 	orr.w	r2, r2, #8
 80059cc:	601a      	str	r2, [r3, #0]
 80059ce:	e035      	b.n	8005a3c <HAL_DMA_Start_IT+0x260>
 80059d0:	40020010 	.word	0x40020010
 80059d4:	40020028 	.word	0x40020028
 80059d8:	40020040 	.word	0x40020040
 80059dc:	40020058 	.word	0x40020058
 80059e0:	40020070 	.word	0x40020070
 80059e4:	40020088 	.word	0x40020088
 80059e8:	400200a0 	.word	0x400200a0
 80059ec:	400200b8 	.word	0x400200b8
 80059f0:	40020410 	.word	0x40020410
 80059f4:	40020428 	.word	0x40020428
 80059f8:	40020440 	.word	0x40020440
 80059fc:	40020458 	.word	0x40020458
 8005a00:	40020470 	.word	0x40020470
 8005a04:	40020488 	.word	0x40020488
 8005a08:	400204a0 	.word	0x400204a0
 8005a0c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f023 020e 	bic.w	r2, r3, #14
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f042 020a 	orr.w	r2, r2, #10
 8005a22:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d007      	beq.n	8005a3c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f042 0204 	orr.w	r2, r2, #4
 8005a3a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a83      	ldr	r2, [pc, #524]	; (8005c50 <HAL_DMA_Start_IT+0x474>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d072      	beq.n	8005b2c <HAL_DMA_Start_IT+0x350>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a82      	ldr	r2, [pc, #520]	; (8005c54 <HAL_DMA_Start_IT+0x478>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d06d      	beq.n	8005b2c <HAL_DMA_Start_IT+0x350>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a80      	ldr	r2, [pc, #512]	; (8005c58 <HAL_DMA_Start_IT+0x47c>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d068      	beq.n	8005b2c <HAL_DMA_Start_IT+0x350>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a7f      	ldr	r2, [pc, #508]	; (8005c5c <HAL_DMA_Start_IT+0x480>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d063      	beq.n	8005b2c <HAL_DMA_Start_IT+0x350>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a7d      	ldr	r2, [pc, #500]	; (8005c60 <HAL_DMA_Start_IT+0x484>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d05e      	beq.n	8005b2c <HAL_DMA_Start_IT+0x350>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a7c      	ldr	r2, [pc, #496]	; (8005c64 <HAL_DMA_Start_IT+0x488>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d059      	beq.n	8005b2c <HAL_DMA_Start_IT+0x350>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a7a      	ldr	r2, [pc, #488]	; (8005c68 <HAL_DMA_Start_IT+0x48c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d054      	beq.n	8005b2c <HAL_DMA_Start_IT+0x350>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a79      	ldr	r2, [pc, #484]	; (8005c6c <HAL_DMA_Start_IT+0x490>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d04f      	beq.n	8005b2c <HAL_DMA_Start_IT+0x350>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a77      	ldr	r2, [pc, #476]	; (8005c70 <HAL_DMA_Start_IT+0x494>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d04a      	beq.n	8005b2c <HAL_DMA_Start_IT+0x350>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a76      	ldr	r2, [pc, #472]	; (8005c74 <HAL_DMA_Start_IT+0x498>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d045      	beq.n	8005b2c <HAL_DMA_Start_IT+0x350>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a74      	ldr	r2, [pc, #464]	; (8005c78 <HAL_DMA_Start_IT+0x49c>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d040      	beq.n	8005b2c <HAL_DMA_Start_IT+0x350>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a73      	ldr	r2, [pc, #460]	; (8005c7c <HAL_DMA_Start_IT+0x4a0>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d03b      	beq.n	8005b2c <HAL_DMA_Start_IT+0x350>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a71      	ldr	r2, [pc, #452]	; (8005c80 <HAL_DMA_Start_IT+0x4a4>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d036      	beq.n	8005b2c <HAL_DMA_Start_IT+0x350>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a70      	ldr	r2, [pc, #448]	; (8005c84 <HAL_DMA_Start_IT+0x4a8>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d031      	beq.n	8005b2c <HAL_DMA_Start_IT+0x350>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a6e      	ldr	r2, [pc, #440]	; (8005c88 <HAL_DMA_Start_IT+0x4ac>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d02c      	beq.n	8005b2c <HAL_DMA_Start_IT+0x350>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a6d      	ldr	r2, [pc, #436]	; (8005c8c <HAL_DMA_Start_IT+0x4b0>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d027      	beq.n	8005b2c <HAL_DMA_Start_IT+0x350>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a6b      	ldr	r2, [pc, #428]	; (8005c90 <HAL_DMA_Start_IT+0x4b4>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d022      	beq.n	8005b2c <HAL_DMA_Start_IT+0x350>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a6a      	ldr	r2, [pc, #424]	; (8005c94 <HAL_DMA_Start_IT+0x4b8>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d01d      	beq.n	8005b2c <HAL_DMA_Start_IT+0x350>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a68      	ldr	r2, [pc, #416]	; (8005c98 <HAL_DMA_Start_IT+0x4bc>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d018      	beq.n	8005b2c <HAL_DMA_Start_IT+0x350>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a67      	ldr	r2, [pc, #412]	; (8005c9c <HAL_DMA_Start_IT+0x4c0>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d013      	beq.n	8005b2c <HAL_DMA_Start_IT+0x350>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a65      	ldr	r2, [pc, #404]	; (8005ca0 <HAL_DMA_Start_IT+0x4c4>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d00e      	beq.n	8005b2c <HAL_DMA_Start_IT+0x350>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a64      	ldr	r2, [pc, #400]	; (8005ca4 <HAL_DMA_Start_IT+0x4c8>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d009      	beq.n	8005b2c <HAL_DMA_Start_IT+0x350>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a62      	ldr	r2, [pc, #392]	; (8005ca8 <HAL_DMA_Start_IT+0x4cc>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d004      	beq.n	8005b2c <HAL_DMA_Start_IT+0x350>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a61      	ldr	r2, [pc, #388]	; (8005cac <HAL_DMA_Start_IT+0x4d0>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d101      	bne.n	8005b30 <HAL_DMA_Start_IT+0x354>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e000      	b.n	8005b32 <HAL_DMA_Start_IT+0x356>
 8005b30:	2300      	movs	r3, #0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d01a      	beq.n	8005b6c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d007      	beq.n	8005b54 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b52:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d007      	beq.n	8005b6c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b6a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a37      	ldr	r2, [pc, #220]	; (8005c50 <HAL_DMA_Start_IT+0x474>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d04a      	beq.n	8005c0c <HAL_DMA_Start_IT+0x430>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a36      	ldr	r2, [pc, #216]	; (8005c54 <HAL_DMA_Start_IT+0x478>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d045      	beq.n	8005c0c <HAL_DMA_Start_IT+0x430>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a34      	ldr	r2, [pc, #208]	; (8005c58 <HAL_DMA_Start_IT+0x47c>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d040      	beq.n	8005c0c <HAL_DMA_Start_IT+0x430>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a33      	ldr	r2, [pc, #204]	; (8005c5c <HAL_DMA_Start_IT+0x480>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d03b      	beq.n	8005c0c <HAL_DMA_Start_IT+0x430>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a31      	ldr	r2, [pc, #196]	; (8005c60 <HAL_DMA_Start_IT+0x484>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d036      	beq.n	8005c0c <HAL_DMA_Start_IT+0x430>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a30      	ldr	r2, [pc, #192]	; (8005c64 <HAL_DMA_Start_IT+0x488>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d031      	beq.n	8005c0c <HAL_DMA_Start_IT+0x430>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a2e      	ldr	r2, [pc, #184]	; (8005c68 <HAL_DMA_Start_IT+0x48c>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d02c      	beq.n	8005c0c <HAL_DMA_Start_IT+0x430>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a2d      	ldr	r2, [pc, #180]	; (8005c6c <HAL_DMA_Start_IT+0x490>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d027      	beq.n	8005c0c <HAL_DMA_Start_IT+0x430>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a2b      	ldr	r2, [pc, #172]	; (8005c70 <HAL_DMA_Start_IT+0x494>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d022      	beq.n	8005c0c <HAL_DMA_Start_IT+0x430>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a2a      	ldr	r2, [pc, #168]	; (8005c74 <HAL_DMA_Start_IT+0x498>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d01d      	beq.n	8005c0c <HAL_DMA_Start_IT+0x430>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a28      	ldr	r2, [pc, #160]	; (8005c78 <HAL_DMA_Start_IT+0x49c>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d018      	beq.n	8005c0c <HAL_DMA_Start_IT+0x430>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a27      	ldr	r2, [pc, #156]	; (8005c7c <HAL_DMA_Start_IT+0x4a0>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d013      	beq.n	8005c0c <HAL_DMA_Start_IT+0x430>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a25      	ldr	r2, [pc, #148]	; (8005c80 <HAL_DMA_Start_IT+0x4a4>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d00e      	beq.n	8005c0c <HAL_DMA_Start_IT+0x430>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a24      	ldr	r2, [pc, #144]	; (8005c84 <HAL_DMA_Start_IT+0x4a8>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d009      	beq.n	8005c0c <HAL_DMA_Start_IT+0x430>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a22      	ldr	r2, [pc, #136]	; (8005c88 <HAL_DMA_Start_IT+0x4ac>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d004      	beq.n	8005c0c <HAL_DMA_Start_IT+0x430>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a21      	ldr	r2, [pc, #132]	; (8005c8c <HAL_DMA_Start_IT+0x4b0>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d108      	bne.n	8005c1e <HAL_DMA_Start_IT+0x442>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0201 	orr.w	r2, r2, #1
 8005c1a:	601a      	str	r2, [r3, #0]
 8005c1c:	e012      	b.n	8005c44 <HAL_DMA_Start_IT+0x468>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f042 0201 	orr.w	r2, r2, #1
 8005c2c:	601a      	str	r2, [r3, #0]
 8005c2e:	e009      	b.n	8005c44 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c36:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3718      	adds	r7, #24
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	40020010 	.word	0x40020010
 8005c54:	40020028 	.word	0x40020028
 8005c58:	40020040 	.word	0x40020040
 8005c5c:	40020058 	.word	0x40020058
 8005c60:	40020070 	.word	0x40020070
 8005c64:	40020088 	.word	0x40020088
 8005c68:	400200a0 	.word	0x400200a0
 8005c6c:	400200b8 	.word	0x400200b8
 8005c70:	40020410 	.word	0x40020410
 8005c74:	40020428 	.word	0x40020428
 8005c78:	40020440 	.word	0x40020440
 8005c7c:	40020458 	.word	0x40020458
 8005c80:	40020470 	.word	0x40020470
 8005c84:	40020488 	.word	0x40020488
 8005c88:	400204a0 	.word	0x400204a0
 8005c8c:	400204b8 	.word	0x400204b8
 8005c90:	58025408 	.word	0x58025408
 8005c94:	5802541c 	.word	0x5802541c
 8005c98:	58025430 	.word	0x58025430
 8005c9c:	58025444 	.word	0x58025444
 8005ca0:	58025458 	.word	0x58025458
 8005ca4:	5802546c 	.word	0x5802546c
 8005ca8:	58025480 	.word	0x58025480
 8005cac:	58025494 	.word	0x58025494

08005cb0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005cb8:	f7fc fc42 	bl	8002540 <HAL_GetTick>
 8005cbc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e2dc      	b.n	8006282 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d008      	beq.n	8005ce6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2280      	movs	r2, #128	; 0x80
 8005cd8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e2cd      	b.n	8006282 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a76      	ldr	r2, [pc, #472]	; (8005ec4 <HAL_DMA_Abort+0x214>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d04a      	beq.n	8005d86 <HAL_DMA_Abort+0xd6>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a74      	ldr	r2, [pc, #464]	; (8005ec8 <HAL_DMA_Abort+0x218>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d045      	beq.n	8005d86 <HAL_DMA_Abort+0xd6>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a73      	ldr	r2, [pc, #460]	; (8005ecc <HAL_DMA_Abort+0x21c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d040      	beq.n	8005d86 <HAL_DMA_Abort+0xd6>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a71      	ldr	r2, [pc, #452]	; (8005ed0 <HAL_DMA_Abort+0x220>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d03b      	beq.n	8005d86 <HAL_DMA_Abort+0xd6>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a70      	ldr	r2, [pc, #448]	; (8005ed4 <HAL_DMA_Abort+0x224>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d036      	beq.n	8005d86 <HAL_DMA_Abort+0xd6>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a6e      	ldr	r2, [pc, #440]	; (8005ed8 <HAL_DMA_Abort+0x228>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d031      	beq.n	8005d86 <HAL_DMA_Abort+0xd6>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a6d      	ldr	r2, [pc, #436]	; (8005edc <HAL_DMA_Abort+0x22c>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d02c      	beq.n	8005d86 <HAL_DMA_Abort+0xd6>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a6b      	ldr	r2, [pc, #428]	; (8005ee0 <HAL_DMA_Abort+0x230>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d027      	beq.n	8005d86 <HAL_DMA_Abort+0xd6>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a6a      	ldr	r2, [pc, #424]	; (8005ee4 <HAL_DMA_Abort+0x234>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d022      	beq.n	8005d86 <HAL_DMA_Abort+0xd6>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a68      	ldr	r2, [pc, #416]	; (8005ee8 <HAL_DMA_Abort+0x238>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d01d      	beq.n	8005d86 <HAL_DMA_Abort+0xd6>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a67      	ldr	r2, [pc, #412]	; (8005eec <HAL_DMA_Abort+0x23c>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d018      	beq.n	8005d86 <HAL_DMA_Abort+0xd6>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a65      	ldr	r2, [pc, #404]	; (8005ef0 <HAL_DMA_Abort+0x240>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d013      	beq.n	8005d86 <HAL_DMA_Abort+0xd6>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a64      	ldr	r2, [pc, #400]	; (8005ef4 <HAL_DMA_Abort+0x244>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d00e      	beq.n	8005d86 <HAL_DMA_Abort+0xd6>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a62      	ldr	r2, [pc, #392]	; (8005ef8 <HAL_DMA_Abort+0x248>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d009      	beq.n	8005d86 <HAL_DMA_Abort+0xd6>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a61      	ldr	r2, [pc, #388]	; (8005efc <HAL_DMA_Abort+0x24c>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d004      	beq.n	8005d86 <HAL_DMA_Abort+0xd6>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a5f      	ldr	r2, [pc, #380]	; (8005f00 <HAL_DMA_Abort+0x250>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d101      	bne.n	8005d8a <HAL_DMA_Abort+0xda>
 8005d86:	2301      	movs	r3, #1
 8005d88:	e000      	b.n	8005d8c <HAL_DMA_Abort+0xdc>
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d013      	beq.n	8005db8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 021e 	bic.w	r2, r2, #30
 8005d9e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	695a      	ldr	r2, [r3, #20]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dae:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	617b      	str	r3, [r7, #20]
 8005db6:	e00a      	b.n	8005dce <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 020e 	bic.w	r2, r2, #14
 8005dc6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a3c      	ldr	r2, [pc, #240]	; (8005ec4 <HAL_DMA_Abort+0x214>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d072      	beq.n	8005ebe <HAL_DMA_Abort+0x20e>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a3a      	ldr	r2, [pc, #232]	; (8005ec8 <HAL_DMA_Abort+0x218>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d06d      	beq.n	8005ebe <HAL_DMA_Abort+0x20e>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a39      	ldr	r2, [pc, #228]	; (8005ecc <HAL_DMA_Abort+0x21c>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d068      	beq.n	8005ebe <HAL_DMA_Abort+0x20e>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a37      	ldr	r2, [pc, #220]	; (8005ed0 <HAL_DMA_Abort+0x220>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d063      	beq.n	8005ebe <HAL_DMA_Abort+0x20e>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a36      	ldr	r2, [pc, #216]	; (8005ed4 <HAL_DMA_Abort+0x224>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d05e      	beq.n	8005ebe <HAL_DMA_Abort+0x20e>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a34      	ldr	r2, [pc, #208]	; (8005ed8 <HAL_DMA_Abort+0x228>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d059      	beq.n	8005ebe <HAL_DMA_Abort+0x20e>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a33      	ldr	r2, [pc, #204]	; (8005edc <HAL_DMA_Abort+0x22c>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d054      	beq.n	8005ebe <HAL_DMA_Abort+0x20e>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a31      	ldr	r2, [pc, #196]	; (8005ee0 <HAL_DMA_Abort+0x230>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d04f      	beq.n	8005ebe <HAL_DMA_Abort+0x20e>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a30      	ldr	r2, [pc, #192]	; (8005ee4 <HAL_DMA_Abort+0x234>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d04a      	beq.n	8005ebe <HAL_DMA_Abort+0x20e>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a2e      	ldr	r2, [pc, #184]	; (8005ee8 <HAL_DMA_Abort+0x238>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d045      	beq.n	8005ebe <HAL_DMA_Abort+0x20e>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a2d      	ldr	r2, [pc, #180]	; (8005eec <HAL_DMA_Abort+0x23c>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d040      	beq.n	8005ebe <HAL_DMA_Abort+0x20e>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a2b      	ldr	r2, [pc, #172]	; (8005ef0 <HAL_DMA_Abort+0x240>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d03b      	beq.n	8005ebe <HAL_DMA_Abort+0x20e>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a2a      	ldr	r2, [pc, #168]	; (8005ef4 <HAL_DMA_Abort+0x244>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d036      	beq.n	8005ebe <HAL_DMA_Abort+0x20e>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a28      	ldr	r2, [pc, #160]	; (8005ef8 <HAL_DMA_Abort+0x248>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d031      	beq.n	8005ebe <HAL_DMA_Abort+0x20e>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a27      	ldr	r2, [pc, #156]	; (8005efc <HAL_DMA_Abort+0x24c>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d02c      	beq.n	8005ebe <HAL_DMA_Abort+0x20e>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a25      	ldr	r2, [pc, #148]	; (8005f00 <HAL_DMA_Abort+0x250>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d027      	beq.n	8005ebe <HAL_DMA_Abort+0x20e>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a24      	ldr	r2, [pc, #144]	; (8005f04 <HAL_DMA_Abort+0x254>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d022      	beq.n	8005ebe <HAL_DMA_Abort+0x20e>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a22      	ldr	r2, [pc, #136]	; (8005f08 <HAL_DMA_Abort+0x258>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d01d      	beq.n	8005ebe <HAL_DMA_Abort+0x20e>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a21      	ldr	r2, [pc, #132]	; (8005f0c <HAL_DMA_Abort+0x25c>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d018      	beq.n	8005ebe <HAL_DMA_Abort+0x20e>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a1f      	ldr	r2, [pc, #124]	; (8005f10 <HAL_DMA_Abort+0x260>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d013      	beq.n	8005ebe <HAL_DMA_Abort+0x20e>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a1e      	ldr	r2, [pc, #120]	; (8005f14 <HAL_DMA_Abort+0x264>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d00e      	beq.n	8005ebe <HAL_DMA_Abort+0x20e>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a1c      	ldr	r2, [pc, #112]	; (8005f18 <HAL_DMA_Abort+0x268>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d009      	beq.n	8005ebe <HAL_DMA_Abort+0x20e>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a1b      	ldr	r2, [pc, #108]	; (8005f1c <HAL_DMA_Abort+0x26c>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d004      	beq.n	8005ebe <HAL_DMA_Abort+0x20e>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a19      	ldr	r2, [pc, #100]	; (8005f20 <HAL_DMA_Abort+0x270>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d132      	bne.n	8005f24 <HAL_DMA_Abort+0x274>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e031      	b.n	8005f26 <HAL_DMA_Abort+0x276>
 8005ec2:	bf00      	nop
 8005ec4:	40020010 	.word	0x40020010
 8005ec8:	40020028 	.word	0x40020028
 8005ecc:	40020040 	.word	0x40020040
 8005ed0:	40020058 	.word	0x40020058
 8005ed4:	40020070 	.word	0x40020070
 8005ed8:	40020088 	.word	0x40020088
 8005edc:	400200a0 	.word	0x400200a0
 8005ee0:	400200b8 	.word	0x400200b8
 8005ee4:	40020410 	.word	0x40020410
 8005ee8:	40020428 	.word	0x40020428
 8005eec:	40020440 	.word	0x40020440
 8005ef0:	40020458 	.word	0x40020458
 8005ef4:	40020470 	.word	0x40020470
 8005ef8:	40020488 	.word	0x40020488
 8005efc:	400204a0 	.word	0x400204a0
 8005f00:	400204b8 	.word	0x400204b8
 8005f04:	58025408 	.word	0x58025408
 8005f08:	5802541c 	.word	0x5802541c
 8005f0c:	58025430 	.word	0x58025430
 8005f10:	58025444 	.word	0x58025444
 8005f14:	58025458 	.word	0x58025458
 8005f18:	5802546c 	.word	0x5802546c
 8005f1c:	58025480 	.word	0x58025480
 8005f20:	58025494 	.word	0x58025494
 8005f24:	2300      	movs	r3, #0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d007      	beq.n	8005f3a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f38:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a6d      	ldr	r2, [pc, #436]	; (80060f4 <HAL_DMA_Abort+0x444>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d04a      	beq.n	8005fda <HAL_DMA_Abort+0x32a>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a6b      	ldr	r2, [pc, #428]	; (80060f8 <HAL_DMA_Abort+0x448>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d045      	beq.n	8005fda <HAL_DMA_Abort+0x32a>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a6a      	ldr	r2, [pc, #424]	; (80060fc <HAL_DMA_Abort+0x44c>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d040      	beq.n	8005fda <HAL_DMA_Abort+0x32a>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a68      	ldr	r2, [pc, #416]	; (8006100 <HAL_DMA_Abort+0x450>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d03b      	beq.n	8005fda <HAL_DMA_Abort+0x32a>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a67      	ldr	r2, [pc, #412]	; (8006104 <HAL_DMA_Abort+0x454>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d036      	beq.n	8005fda <HAL_DMA_Abort+0x32a>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a65      	ldr	r2, [pc, #404]	; (8006108 <HAL_DMA_Abort+0x458>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d031      	beq.n	8005fda <HAL_DMA_Abort+0x32a>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a64      	ldr	r2, [pc, #400]	; (800610c <HAL_DMA_Abort+0x45c>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d02c      	beq.n	8005fda <HAL_DMA_Abort+0x32a>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a62      	ldr	r2, [pc, #392]	; (8006110 <HAL_DMA_Abort+0x460>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d027      	beq.n	8005fda <HAL_DMA_Abort+0x32a>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a61      	ldr	r2, [pc, #388]	; (8006114 <HAL_DMA_Abort+0x464>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d022      	beq.n	8005fda <HAL_DMA_Abort+0x32a>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a5f      	ldr	r2, [pc, #380]	; (8006118 <HAL_DMA_Abort+0x468>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d01d      	beq.n	8005fda <HAL_DMA_Abort+0x32a>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a5e      	ldr	r2, [pc, #376]	; (800611c <HAL_DMA_Abort+0x46c>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d018      	beq.n	8005fda <HAL_DMA_Abort+0x32a>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a5c      	ldr	r2, [pc, #368]	; (8006120 <HAL_DMA_Abort+0x470>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d013      	beq.n	8005fda <HAL_DMA_Abort+0x32a>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a5b      	ldr	r2, [pc, #364]	; (8006124 <HAL_DMA_Abort+0x474>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d00e      	beq.n	8005fda <HAL_DMA_Abort+0x32a>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a59      	ldr	r2, [pc, #356]	; (8006128 <HAL_DMA_Abort+0x478>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d009      	beq.n	8005fda <HAL_DMA_Abort+0x32a>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a58      	ldr	r2, [pc, #352]	; (800612c <HAL_DMA_Abort+0x47c>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d004      	beq.n	8005fda <HAL_DMA_Abort+0x32a>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a56      	ldr	r2, [pc, #344]	; (8006130 <HAL_DMA_Abort+0x480>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d108      	bne.n	8005fec <HAL_DMA_Abort+0x33c>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f022 0201 	bic.w	r2, r2, #1
 8005fe8:	601a      	str	r2, [r3, #0]
 8005fea:	e007      	b.n	8005ffc <HAL_DMA_Abort+0x34c>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f022 0201 	bic.w	r2, r2, #1
 8005ffa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005ffc:	e013      	b.n	8006026 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ffe:	f7fc fa9f 	bl	8002540 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	2b05      	cmp	r3, #5
 800600a:	d90c      	bls.n	8006026 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2220      	movs	r2, #32
 8006010:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2203      	movs	r2, #3
 8006016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e12d      	b.n	8006282 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0301 	and.w	r3, r3, #1
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1e5      	bne.n	8005ffe <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a2f      	ldr	r2, [pc, #188]	; (80060f4 <HAL_DMA_Abort+0x444>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d04a      	beq.n	80060d2 <HAL_DMA_Abort+0x422>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a2d      	ldr	r2, [pc, #180]	; (80060f8 <HAL_DMA_Abort+0x448>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d045      	beq.n	80060d2 <HAL_DMA_Abort+0x422>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a2c      	ldr	r2, [pc, #176]	; (80060fc <HAL_DMA_Abort+0x44c>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d040      	beq.n	80060d2 <HAL_DMA_Abort+0x422>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a2a      	ldr	r2, [pc, #168]	; (8006100 <HAL_DMA_Abort+0x450>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d03b      	beq.n	80060d2 <HAL_DMA_Abort+0x422>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a29      	ldr	r2, [pc, #164]	; (8006104 <HAL_DMA_Abort+0x454>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d036      	beq.n	80060d2 <HAL_DMA_Abort+0x422>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a27      	ldr	r2, [pc, #156]	; (8006108 <HAL_DMA_Abort+0x458>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d031      	beq.n	80060d2 <HAL_DMA_Abort+0x422>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a26      	ldr	r2, [pc, #152]	; (800610c <HAL_DMA_Abort+0x45c>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d02c      	beq.n	80060d2 <HAL_DMA_Abort+0x422>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a24      	ldr	r2, [pc, #144]	; (8006110 <HAL_DMA_Abort+0x460>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d027      	beq.n	80060d2 <HAL_DMA_Abort+0x422>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a23      	ldr	r2, [pc, #140]	; (8006114 <HAL_DMA_Abort+0x464>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d022      	beq.n	80060d2 <HAL_DMA_Abort+0x422>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a21      	ldr	r2, [pc, #132]	; (8006118 <HAL_DMA_Abort+0x468>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d01d      	beq.n	80060d2 <HAL_DMA_Abort+0x422>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a20      	ldr	r2, [pc, #128]	; (800611c <HAL_DMA_Abort+0x46c>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d018      	beq.n	80060d2 <HAL_DMA_Abort+0x422>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a1e      	ldr	r2, [pc, #120]	; (8006120 <HAL_DMA_Abort+0x470>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d013      	beq.n	80060d2 <HAL_DMA_Abort+0x422>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a1d      	ldr	r2, [pc, #116]	; (8006124 <HAL_DMA_Abort+0x474>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d00e      	beq.n	80060d2 <HAL_DMA_Abort+0x422>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a1b      	ldr	r2, [pc, #108]	; (8006128 <HAL_DMA_Abort+0x478>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d009      	beq.n	80060d2 <HAL_DMA_Abort+0x422>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a1a      	ldr	r2, [pc, #104]	; (800612c <HAL_DMA_Abort+0x47c>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d004      	beq.n	80060d2 <HAL_DMA_Abort+0x422>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a18      	ldr	r2, [pc, #96]	; (8006130 <HAL_DMA_Abort+0x480>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d101      	bne.n	80060d6 <HAL_DMA_Abort+0x426>
 80060d2:	2301      	movs	r3, #1
 80060d4:	e000      	b.n	80060d8 <HAL_DMA_Abort+0x428>
 80060d6:	2300      	movs	r3, #0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d02b      	beq.n	8006134 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060e0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060e6:	f003 031f 	and.w	r3, r3, #31
 80060ea:	223f      	movs	r2, #63	; 0x3f
 80060ec:	409a      	lsls	r2, r3
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	609a      	str	r2, [r3, #8]
 80060f2:	e02a      	b.n	800614a <HAL_DMA_Abort+0x49a>
 80060f4:	40020010 	.word	0x40020010
 80060f8:	40020028 	.word	0x40020028
 80060fc:	40020040 	.word	0x40020040
 8006100:	40020058 	.word	0x40020058
 8006104:	40020070 	.word	0x40020070
 8006108:	40020088 	.word	0x40020088
 800610c:	400200a0 	.word	0x400200a0
 8006110:	400200b8 	.word	0x400200b8
 8006114:	40020410 	.word	0x40020410
 8006118:	40020428 	.word	0x40020428
 800611c:	40020440 	.word	0x40020440
 8006120:	40020458 	.word	0x40020458
 8006124:	40020470 	.word	0x40020470
 8006128:	40020488 	.word	0x40020488
 800612c:	400204a0 	.word	0x400204a0
 8006130:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006138:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800613e:	f003 031f 	and.w	r3, r3, #31
 8006142:	2201      	movs	r2, #1
 8006144:	409a      	lsls	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a4f      	ldr	r2, [pc, #316]	; (800628c <HAL_DMA_Abort+0x5dc>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d072      	beq.n	800623a <HAL_DMA_Abort+0x58a>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a4d      	ldr	r2, [pc, #308]	; (8006290 <HAL_DMA_Abort+0x5e0>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d06d      	beq.n	800623a <HAL_DMA_Abort+0x58a>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a4c      	ldr	r2, [pc, #304]	; (8006294 <HAL_DMA_Abort+0x5e4>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d068      	beq.n	800623a <HAL_DMA_Abort+0x58a>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a4a      	ldr	r2, [pc, #296]	; (8006298 <HAL_DMA_Abort+0x5e8>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d063      	beq.n	800623a <HAL_DMA_Abort+0x58a>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a49      	ldr	r2, [pc, #292]	; (800629c <HAL_DMA_Abort+0x5ec>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d05e      	beq.n	800623a <HAL_DMA_Abort+0x58a>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a47      	ldr	r2, [pc, #284]	; (80062a0 <HAL_DMA_Abort+0x5f0>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d059      	beq.n	800623a <HAL_DMA_Abort+0x58a>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a46      	ldr	r2, [pc, #280]	; (80062a4 <HAL_DMA_Abort+0x5f4>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d054      	beq.n	800623a <HAL_DMA_Abort+0x58a>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a44      	ldr	r2, [pc, #272]	; (80062a8 <HAL_DMA_Abort+0x5f8>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d04f      	beq.n	800623a <HAL_DMA_Abort+0x58a>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a43      	ldr	r2, [pc, #268]	; (80062ac <HAL_DMA_Abort+0x5fc>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d04a      	beq.n	800623a <HAL_DMA_Abort+0x58a>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a41      	ldr	r2, [pc, #260]	; (80062b0 <HAL_DMA_Abort+0x600>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d045      	beq.n	800623a <HAL_DMA_Abort+0x58a>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a40      	ldr	r2, [pc, #256]	; (80062b4 <HAL_DMA_Abort+0x604>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d040      	beq.n	800623a <HAL_DMA_Abort+0x58a>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a3e      	ldr	r2, [pc, #248]	; (80062b8 <HAL_DMA_Abort+0x608>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d03b      	beq.n	800623a <HAL_DMA_Abort+0x58a>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a3d      	ldr	r2, [pc, #244]	; (80062bc <HAL_DMA_Abort+0x60c>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d036      	beq.n	800623a <HAL_DMA_Abort+0x58a>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a3b      	ldr	r2, [pc, #236]	; (80062c0 <HAL_DMA_Abort+0x610>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d031      	beq.n	800623a <HAL_DMA_Abort+0x58a>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a3a      	ldr	r2, [pc, #232]	; (80062c4 <HAL_DMA_Abort+0x614>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d02c      	beq.n	800623a <HAL_DMA_Abort+0x58a>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a38      	ldr	r2, [pc, #224]	; (80062c8 <HAL_DMA_Abort+0x618>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d027      	beq.n	800623a <HAL_DMA_Abort+0x58a>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a37      	ldr	r2, [pc, #220]	; (80062cc <HAL_DMA_Abort+0x61c>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d022      	beq.n	800623a <HAL_DMA_Abort+0x58a>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a35      	ldr	r2, [pc, #212]	; (80062d0 <HAL_DMA_Abort+0x620>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d01d      	beq.n	800623a <HAL_DMA_Abort+0x58a>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a34      	ldr	r2, [pc, #208]	; (80062d4 <HAL_DMA_Abort+0x624>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d018      	beq.n	800623a <HAL_DMA_Abort+0x58a>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a32      	ldr	r2, [pc, #200]	; (80062d8 <HAL_DMA_Abort+0x628>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d013      	beq.n	800623a <HAL_DMA_Abort+0x58a>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a31      	ldr	r2, [pc, #196]	; (80062dc <HAL_DMA_Abort+0x62c>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d00e      	beq.n	800623a <HAL_DMA_Abort+0x58a>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a2f      	ldr	r2, [pc, #188]	; (80062e0 <HAL_DMA_Abort+0x630>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d009      	beq.n	800623a <HAL_DMA_Abort+0x58a>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a2e      	ldr	r2, [pc, #184]	; (80062e4 <HAL_DMA_Abort+0x634>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d004      	beq.n	800623a <HAL_DMA_Abort+0x58a>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a2c      	ldr	r2, [pc, #176]	; (80062e8 <HAL_DMA_Abort+0x638>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d101      	bne.n	800623e <HAL_DMA_Abort+0x58e>
 800623a:	2301      	movs	r3, #1
 800623c:	e000      	b.n	8006240 <HAL_DMA_Abort+0x590>
 800623e:	2300      	movs	r3, #0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d015      	beq.n	8006270 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800624c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00c      	beq.n	8006270 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006260:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006264:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800626e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3718      	adds	r7, #24
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	40020010 	.word	0x40020010
 8006290:	40020028 	.word	0x40020028
 8006294:	40020040 	.word	0x40020040
 8006298:	40020058 	.word	0x40020058
 800629c:	40020070 	.word	0x40020070
 80062a0:	40020088 	.word	0x40020088
 80062a4:	400200a0 	.word	0x400200a0
 80062a8:	400200b8 	.word	0x400200b8
 80062ac:	40020410 	.word	0x40020410
 80062b0:	40020428 	.word	0x40020428
 80062b4:	40020440 	.word	0x40020440
 80062b8:	40020458 	.word	0x40020458
 80062bc:	40020470 	.word	0x40020470
 80062c0:	40020488 	.word	0x40020488
 80062c4:	400204a0 	.word	0x400204a0
 80062c8:	400204b8 	.word	0x400204b8
 80062cc:	58025408 	.word	0x58025408
 80062d0:	5802541c 	.word	0x5802541c
 80062d4:	58025430 	.word	0x58025430
 80062d8:	58025444 	.word	0x58025444
 80062dc:	58025458 	.word	0x58025458
 80062e0:	5802546c 	.word	0x5802546c
 80062e4:	58025480 	.word	0x58025480
 80062e8:	58025494 	.word	0x58025494

080062ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b08a      	sub	sp, #40	; 0x28
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80062f4:	2300      	movs	r3, #0
 80062f6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80062f8:	4b67      	ldr	r3, [pc, #412]	; (8006498 <HAL_DMA_IRQHandler+0x1ac>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a67      	ldr	r2, [pc, #412]	; (800649c <HAL_DMA_IRQHandler+0x1b0>)
 80062fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006302:	0a9b      	lsrs	r3, r3, #10
 8006304:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800630a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006310:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006312:	6a3b      	ldr	r3, [r7, #32]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a5f      	ldr	r2, [pc, #380]	; (80064a0 <HAL_DMA_IRQHandler+0x1b4>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d04a      	beq.n	80063be <HAL_DMA_IRQHandler+0xd2>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a5d      	ldr	r2, [pc, #372]	; (80064a4 <HAL_DMA_IRQHandler+0x1b8>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d045      	beq.n	80063be <HAL_DMA_IRQHandler+0xd2>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a5c      	ldr	r2, [pc, #368]	; (80064a8 <HAL_DMA_IRQHandler+0x1bc>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d040      	beq.n	80063be <HAL_DMA_IRQHandler+0xd2>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a5a      	ldr	r2, [pc, #360]	; (80064ac <HAL_DMA_IRQHandler+0x1c0>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d03b      	beq.n	80063be <HAL_DMA_IRQHandler+0xd2>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a59      	ldr	r2, [pc, #356]	; (80064b0 <HAL_DMA_IRQHandler+0x1c4>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d036      	beq.n	80063be <HAL_DMA_IRQHandler+0xd2>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a57      	ldr	r2, [pc, #348]	; (80064b4 <HAL_DMA_IRQHandler+0x1c8>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d031      	beq.n	80063be <HAL_DMA_IRQHandler+0xd2>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a56      	ldr	r2, [pc, #344]	; (80064b8 <HAL_DMA_IRQHandler+0x1cc>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d02c      	beq.n	80063be <HAL_DMA_IRQHandler+0xd2>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a54      	ldr	r2, [pc, #336]	; (80064bc <HAL_DMA_IRQHandler+0x1d0>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d027      	beq.n	80063be <HAL_DMA_IRQHandler+0xd2>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a53      	ldr	r2, [pc, #332]	; (80064c0 <HAL_DMA_IRQHandler+0x1d4>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d022      	beq.n	80063be <HAL_DMA_IRQHandler+0xd2>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a51      	ldr	r2, [pc, #324]	; (80064c4 <HAL_DMA_IRQHandler+0x1d8>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d01d      	beq.n	80063be <HAL_DMA_IRQHandler+0xd2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a50      	ldr	r2, [pc, #320]	; (80064c8 <HAL_DMA_IRQHandler+0x1dc>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d018      	beq.n	80063be <HAL_DMA_IRQHandler+0xd2>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a4e      	ldr	r2, [pc, #312]	; (80064cc <HAL_DMA_IRQHandler+0x1e0>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d013      	beq.n	80063be <HAL_DMA_IRQHandler+0xd2>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a4d      	ldr	r2, [pc, #308]	; (80064d0 <HAL_DMA_IRQHandler+0x1e4>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d00e      	beq.n	80063be <HAL_DMA_IRQHandler+0xd2>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a4b      	ldr	r2, [pc, #300]	; (80064d4 <HAL_DMA_IRQHandler+0x1e8>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d009      	beq.n	80063be <HAL_DMA_IRQHandler+0xd2>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a4a      	ldr	r2, [pc, #296]	; (80064d8 <HAL_DMA_IRQHandler+0x1ec>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d004      	beq.n	80063be <HAL_DMA_IRQHandler+0xd2>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a48      	ldr	r2, [pc, #288]	; (80064dc <HAL_DMA_IRQHandler+0x1f0>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d101      	bne.n	80063c2 <HAL_DMA_IRQHandler+0xd6>
 80063be:	2301      	movs	r3, #1
 80063c0:	e000      	b.n	80063c4 <HAL_DMA_IRQHandler+0xd8>
 80063c2:	2300      	movs	r3, #0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f000 842b 	beq.w	8006c20 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ce:	f003 031f 	and.w	r3, r3, #31
 80063d2:	2208      	movs	r2, #8
 80063d4:	409a      	lsls	r2, r3
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	4013      	ands	r3, r2
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f000 80a2 	beq.w	8006524 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a2e      	ldr	r2, [pc, #184]	; (80064a0 <HAL_DMA_IRQHandler+0x1b4>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d04a      	beq.n	8006480 <HAL_DMA_IRQHandler+0x194>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a2d      	ldr	r2, [pc, #180]	; (80064a4 <HAL_DMA_IRQHandler+0x1b8>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d045      	beq.n	8006480 <HAL_DMA_IRQHandler+0x194>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a2b      	ldr	r2, [pc, #172]	; (80064a8 <HAL_DMA_IRQHandler+0x1bc>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d040      	beq.n	8006480 <HAL_DMA_IRQHandler+0x194>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a2a      	ldr	r2, [pc, #168]	; (80064ac <HAL_DMA_IRQHandler+0x1c0>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d03b      	beq.n	8006480 <HAL_DMA_IRQHandler+0x194>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a28      	ldr	r2, [pc, #160]	; (80064b0 <HAL_DMA_IRQHandler+0x1c4>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d036      	beq.n	8006480 <HAL_DMA_IRQHandler+0x194>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a27      	ldr	r2, [pc, #156]	; (80064b4 <HAL_DMA_IRQHandler+0x1c8>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d031      	beq.n	8006480 <HAL_DMA_IRQHandler+0x194>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a25      	ldr	r2, [pc, #148]	; (80064b8 <HAL_DMA_IRQHandler+0x1cc>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d02c      	beq.n	8006480 <HAL_DMA_IRQHandler+0x194>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a24      	ldr	r2, [pc, #144]	; (80064bc <HAL_DMA_IRQHandler+0x1d0>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d027      	beq.n	8006480 <HAL_DMA_IRQHandler+0x194>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a22      	ldr	r2, [pc, #136]	; (80064c0 <HAL_DMA_IRQHandler+0x1d4>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d022      	beq.n	8006480 <HAL_DMA_IRQHandler+0x194>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a21      	ldr	r2, [pc, #132]	; (80064c4 <HAL_DMA_IRQHandler+0x1d8>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d01d      	beq.n	8006480 <HAL_DMA_IRQHandler+0x194>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a1f      	ldr	r2, [pc, #124]	; (80064c8 <HAL_DMA_IRQHandler+0x1dc>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d018      	beq.n	8006480 <HAL_DMA_IRQHandler+0x194>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a1e      	ldr	r2, [pc, #120]	; (80064cc <HAL_DMA_IRQHandler+0x1e0>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d013      	beq.n	8006480 <HAL_DMA_IRQHandler+0x194>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a1c      	ldr	r2, [pc, #112]	; (80064d0 <HAL_DMA_IRQHandler+0x1e4>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d00e      	beq.n	8006480 <HAL_DMA_IRQHandler+0x194>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a1b      	ldr	r2, [pc, #108]	; (80064d4 <HAL_DMA_IRQHandler+0x1e8>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d009      	beq.n	8006480 <HAL_DMA_IRQHandler+0x194>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a19      	ldr	r2, [pc, #100]	; (80064d8 <HAL_DMA_IRQHandler+0x1ec>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d004      	beq.n	8006480 <HAL_DMA_IRQHandler+0x194>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a18      	ldr	r2, [pc, #96]	; (80064dc <HAL_DMA_IRQHandler+0x1f0>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d12f      	bne.n	80064e0 <HAL_DMA_IRQHandler+0x1f4>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0304 	and.w	r3, r3, #4
 800648a:	2b00      	cmp	r3, #0
 800648c:	bf14      	ite	ne
 800648e:	2301      	movne	r3, #1
 8006490:	2300      	moveq	r3, #0
 8006492:	b2db      	uxtb	r3, r3
 8006494:	e02e      	b.n	80064f4 <HAL_DMA_IRQHandler+0x208>
 8006496:	bf00      	nop
 8006498:	24000000 	.word	0x24000000
 800649c:	1b4e81b5 	.word	0x1b4e81b5
 80064a0:	40020010 	.word	0x40020010
 80064a4:	40020028 	.word	0x40020028
 80064a8:	40020040 	.word	0x40020040
 80064ac:	40020058 	.word	0x40020058
 80064b0:	40020070 	.word	0x40020070
 80064b4:	40020088 	.word	0x40020088
 80064b8:	400200a0 	.word	0x400200a0
 80064bc:	400200b8 	.word	0x400200b8
 80064c0:	40020410 	.word	0x40020410
 80064c4:	40020428 	.word	0x40020428
 80064c8:	40020440 	.word	0x40020440
 80064cc:	40020458 	.word	0x40020458
 80064d0:	40020470 	.word	0x40020470
 80064d4:	40020488 	.word	0x40020488
 80064d8:	400204a0 	.word	0x400204a0
 80064dc:	400204b8 	.word	0x400204b8
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0308 	and.w	r3, r3, #8
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	bf14      	ite	ne
 80064ee:	2301      	movne	r3, #1
 80064f0:	2300      	moveq	r3, #0
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d015      	beq.n	8006524 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f022 0204 	bic.w	r2, r2, #4
 8006506:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800650c:	f003 031f 	and.w	r3, r3, #31
 8006510:	2208      	movs	r2, #8
 8006512:	409a      	lsls	r2, r3
 8006514:	6a3b      	ldr	r3, [r7, #32]
 8006516:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800651c:	f043 0201 	orr.w	r2, r3, #1
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006528:	f003 031f 	and.w	r3, r3, #31
 800652c:	69ba      	ldr	r2, [r7, #24]
 800652e:	fa22 f303 	lsr.w	r3, r2, r3
 8006532:	f003 0301 	and.w	r3, r3, #1
 8006536:	2b00      	cmp	r3, #0
 8006538:	d06e      	beq.n	8006618 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a69      	ldr	r2, [pc, #420]	; (80066e4 <HAL_DMA_IRQHandler+0x3f8>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d04a      	beq.n	80065da <HAL_DMA_IRQHandler+0x2ee>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a67      	ldr	r2, [pc, #412]	; (80066e8 <HAL_DMA_IRQHandler+0x3fc>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d045      	beq.n	80065da <HAL_DMA_IRQHandler+0x2ee>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a66      	ldr	r2, [pc, #408]	; (80066ec <HAL_DMA_IRQHandler+0x400>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d040      	beq.n	80065da <HAL_DMA_IRQHandler+0x2ee>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a64      	ldr	r2, [pc, #400]	; (80066f0 <HAL_DMA_IRQHandler+0x404>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d03b      	beq.n	80065da <HAL_DMA_IRQHandler+0x2ee>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a63      	ldr	r2, [pc, #396]	; (80066f4 <HAL_DMA_IRQHandler+0x408>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d036      	beq.n	80065da <HAL_DMA_IRQHandler+0x2ee>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a61      	ldr	r2, [pc, #388]	; (80066f8 <HAL_DMA_IRQHandler+0x40c>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d031      	beq.n	80065da <HAL_DMA_IRQHandler+0x2ee>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a60      	ldr	r2, [pc, #384]	; (80066fc <HAL_DMA_IRQHandler+0x410>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d02c      	beq.n	80065da <HAL_DMA_IRQHandler+0x2ee>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a5e      	ldr	r2, [pc, #376]	; (8006700 <HAL_DMA_IRQHandler+0x414>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d027      	beq.n	80065da <HAL_DMA_IRQHandler+0x2ee>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a5d      	ldr	r2, [pc, #372]	; (8006704 <HAL_DMA_IRQHandler+0x418>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d022      	beq.n	80065da <HAL_DMA_IRQHandler+0x2ee>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a5b      	ldr	r2, [pc, #364]	; (8006708 <HAL_DMA_IRQHandler+0x41c>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d01d      	beq.n	80065da <HAL_DMA_IRQHandler+0x2ee>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a5a      	ldr	r2, [pc, #360]	; (800670c <HAL_DMA_IRQHandler+0x420>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d018      	beq.n	80065da <HAL_DMA_IRQHandler+0x2ee>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a58      	ldr	r2, [pc, #352]	; (8006710 <HAL_DMA_IRQHandler+0x424>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d013      	beq.n	80065da <HAL_DMA_IRQHandler+0x2ee>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a57      	ldr	r2, [pc, #348]	; (8006714 <HAL_DMA_IRQHandler+0x428>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d00e      	beq.n	80065da <HAL_DMA_IRQHandler+0x2ee>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a55      	ldr	r2, [pc, #340]	; (8006718 <HAL_DMA_IRQHandler+0x42c>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d009      	beq.n	80065da <HAL_DMA_IRQHandler+0x2ee>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a54      	ldr	r2, [pc, #336]	; (800671c <HAL_DMA_IRQHandler+0x430>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d004      	beq.n	80065da <HAL_DMA_IRQHandler+0x2ee>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a52      	ldr	r2, [pc, #328]	; (8006720 <HAL_DMA_IRQHandler+0x434>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d10a      	bne.n	80065f0 <HAL_DMA_IRQHandler+0x304>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	bf14      	ite	ne
 80065e8:	2301      	movne	r3, #1
 80065ea:	2300      	moveq	r3, #0
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	e003      	b.n	80065f8 <HAL_DMA_IRQHandler+0x30c>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2300      	movs	r3, #0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00d      	beq.n	8006618 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006600:	f003 031f 	and.w	r3, r3, #31
 8006604:	2201      	movs	r2, #1
 8006606:	409a      	lsls	r2, r3
 8006608:	6a3b      	ldr	r3, [r7, #32]
 800660a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006610:	f043 0202 	orr.w	r2, r3, #2
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800661c:	f003 031f 	and.w	r3, r3, #31
 8006620:	2204      	movs	r2, #4
 8006622:	409a      	lsls	r2, r3
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	4013      	ands	r3, r2
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 808f 	beq.w	800674c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a2c      	ldr	r2, [pc, #176]	; (80066e4 <HAL_DMA_IRQHandler+0x3f8>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d04a      	beq.n	80066ce <HAL_DMA_IRQHandler+0x3e2>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a2a      	ldr	r2, [pc, #168]	; (80066e8 <HAL_DMA_IRQHandler+0x3fc>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d045      	beq.n	80066ce <HAL_DMA_IRQHandler+0x3e2>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a29      	ldr	r2, [pc, #164]	; (80066ec <HAL_DMA_IRQHandler+0x400>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d040      	beq.n	80066ce <HAL_DMA_IRQHandler+0x3e2>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a27      	ldr	r2, [pc, #156]	; (80066f0 <HAL_DMA_IRQHandler+0x404>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d03b      	beq.n	80066ce <HAL_DMA_IRQHandler+0x3e2>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a26      	ldr	r2, [pc, #152]	; (80066f4 <HAL_DMA_IRQHandler+0x408>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d036      	beq.n	80066ce <HAL_DMA_IRQHandler+0x3e2>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a24      	ldr	r2, [pc, #144]	; (80066f8 <HAL_DMA_IRQHandler+0x40c>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d031      	beq.n	80066ce <HAL_DMA_IRQHandler+0x3e2>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a23      	ldr	r2, [pc, #140]	; (80066fc <HAL_DMA_IRQHandler+0x410>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d02c      	beq.n	80066ce <HAL_DMA_IRQHandler+0x3e2>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a21      	ldr	r2, [pc, #132]	; (8006700 <HAL_DMA_IRQHandler+0x414>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d027      	beq.n	80066ce <HAL_DMA_IRQHandler+0x3e2>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a20      	ldr	r2, [pc, #128]	; (8006704 <HAL_DMA_IRQHandler+0x418>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d022      	beq.n	80066ce <HAL_DMA_IRQHandler+0x3e2>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a1e      	ldr	r2, [pc, #120]	; (8006708 <HAL_DMA_IRQHandler+0x41c>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d01d      	beq.n	80066ce <HAL_DMA_IRQHandler+0x3e2>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a1d      	ldr	r2, [pc, #116]	; (800670c <HAL_DMA_IRQHandler+0x420>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d018      	beq.n	80066ce <HAL_DMA_IRQHandler+0x3e2>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a1b      	ldr	r2, [pc, #108]	; (8006710 <HAL_DMA_IRQHandler+0x424>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d013      	beq.n	80066ce <HAL_DMA_IRQHandler+0x3e2>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a1a      	ldr	r2, [pc, #104]	; (8006714 <HAL_DMA_IRQHandler+0x428>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d00e      	beq.n	80066ce <HAL_DMA_IRQHandler+0x3e2>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a18      	ldr	r2, [pc, #96]	; (8006718 <HAL_DMA_IRQHandler+0x42c>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d009      	beq.n	80066ce <HAL_DMA_IRQHandler+0x3e2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a17      	ldr	r2, [pc, #92]	; (800671c <HAL_DMA_IRQHandler+0x430>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d004      	beq.n	80066ce <HAL_DMA_IRQHandler+0x3e2>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a15      	ldr	r2, [pc, #84]	; (8006720 <HAL_DMA_IRQHandler+0x434>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d12a      	bne.n	8006724 <HAL_DMA_IRQHandler+0x438>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0302 	and.w	r3, r3, #2
 80066d8:	2b00      	cmp	r3, #0
 80066da:	bf14      	ite	ne
 80066dc:	2301      	movne	r3, #1
 80066de:	2300      	moveq	r3, #0
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	e023      	b.n	800672c <HAL_DMA_IRQHandler+0x440>
 80066e4:	40020010 	.word	0x40020010
 80066e8:	40020028 	.word	0x40020028
 80066ec:	40020040 	.word	0x40020040
 80066f0:	40020058 	.word	0x40020058
 80066f4:	40020070 	.word	0x40020070
 80066f8:	40020088 	.word	0x40020088
 80066fc:	400200a0 	.word	0x400200a0
 8006700:	400200b8 	.word	0x400200b8
 8006704:	40020410 	.word	0x40020410
 8006708:	40020428 	.word	0x40020428
 800670c:	40020440 	.word	0x40020440
 8006710:	40020458 	.word	0x40020458
 8006714:	40020470 	.word	0x40020470
 8006718:	40020488 	.word	0x40020488
 800671c:	400204a0 	.word	0x400204a0
 8006720:	400204b8 	.word	0x400204b8
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2300      	movs	r3, #0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00d      	beq.n	800674c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006734:	f003 031f 	and.w	r3, r3, #31
 8006738:	2204      	movs	r2, #4
 800673a:	409a      	lsls	r2, r3
 800673c:	6a3b      	ldr	r3, [r7, #32]
 800673e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006744:	f043 0204 	orr.w	r2, r3, #4
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006750:	f003 031f 	and.w	r3, r3, #31
 8006754:	2210      	movs	r2, #16
 8006756:	409a      	lsls	r2, r3
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	4013      	ands	r3, r2
 800675c:	2b00      	cmp	r3, #0
 800675e:	f000 80a6 	beq.w	80068ae <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a85      	ldr	r2, [pc, #532]	; (800697c <HAL_DMA_IRQHandler+0x690>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d04a      	beq.n	8006802 <HAL_DMA_IRQHandler+0x516>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a83      	ldr	r2, [pc, #524]	; (8006980 <HAL_DMA_IRQHandler+0x694>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d045      	beq.n	8006802 <HAL_DMA_IRQHandler+0x516>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a82      	ldr	r2, [pc, #520]	; (8006984 <HAL_DMA_IRQHandler+0x698>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d040      	beq.n	8006802 <HAL_DMA_IRQHandler+0x516>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a80      	ldr	r2, [pc, #512]	; (8006988 <HAL_DMA_IRQHandler+0x69c>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d03b      	beq.n	8006802 <HAL_DMA_IRQHandler+0x516>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a7f      	ldr	r2, [pc, #508]	; (800698c <HAL_DMA_IRQHandler+0x6a0>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d036      	beq.n	8006802 <HAL_DMA_IRQHandler+0x516>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a7d      	ldr	r2, [pc, #500]	; (8006990 <HAL_DMA_IRQHandler+0x6a4>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d031      	beq.n	8006802 <HAL_DMA_IRQHandler+0x516>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a7c      	ldr	r2, [pc, #496]	; (8006994 <HAL_DMA_IRQHandler+0x6a8>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d02c      	beq.n	8006802 <HAL_DMA_IRQHandler+0x516>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a7a      	ldr	r2, [pc, #488]	; (8006998 <HAL_DMA_IRQHandler+0x6ac>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d027      	beq.n	8006802 <HAL_DMA_IRQHandler+0x516>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a79      	ldr	r2, [pc, #484]	; (800699c <HAL_DMA_IRQHandler+0x6b0>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d022      	beq.n	8006802 <HAL_DMA_IRQHandler+0x516>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a77      	ldr	r2, [pc, #476]	; (80069a0 <HAL_DMA_IRQHandler+0x6b4>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d01d      	beq.n	8006802 <HAL_DMA_IRQHandler+0x516>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a76      	ldr	r2, [pc, #472]	; (80069a4 <HAL_DMA_IRQHandler+0x6b8>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d018      	beq.n	8006802 <HAL_DMA_IRQHandler+0x516>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a74      	ldr	r2, [pc, #464]	; (80069a8 <HAL_DMA_IRQHandler+0x6bc>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d013      	beq.n	8006802 <HAL_DMA_IRQHandler+0x516>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a73      	ldr	r2, [pc, #460]	; (80069ac <HAL_DMA_IRQHandler+0x6c0>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d00e      	beq.n	8006802 <HAL_DMA_IRQHandler+0x516>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a71      	ldr	r2, [pc, #452]	; (80069b0 <HAL_DMA_IRQHandler+0x6c4>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d009      	beq.n	8006802 <HAL_DMA_IRQHandler+0x516>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a70      	ldr	r2, [pc, #448]	; (80069b4 <HAL_DMA_IRQHandler+0x6c8>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d004      	beq.n	8006802 <HAL_DMA_IRQHandler+0x516>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a6e      	ldr	r2, [pc, #440]	; (80069b8 <HAL_DMA_IRQHandler+0x6cc>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d10a      	bne.n	8006818 <HAL_DMA_IRQHandler+0x52c>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0308 	and.w	r3, r3, #8
 800680c:	2b00      	cmp	r3, #0
 800680e:	bf14      	ite	ne
 8006810:	2301      	movne	r3, #1
 8006812:	2300      	moveq	r3, #0
 8006814:	b2db      	uxtb	r3, r3
 8006816:	e009      	b.n	800682c <HAL_DMA_IRQHandler+0x540>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0304 	and.w	r3, r3, #4
 8006822:	2b00      	cmp	r3, #0
 8006824:	bf14      	ite	ne
 8006826:	2301      	movne	r3, #1
 8006828:	2300      	moveq	r3, #0
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b00      	cmp	r3, #0
 800682e:	d03e      	beq.n	80068ae <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006834:	f003 031f 	and.w	r3, r3, #31
 8006838:	2210      	movs	r2, #16
 800683a:	409a      	lsls	r2, r3
 800683c:	6a3b      	ldr	r3, [r7, #32]
 800683e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d018      	beq.n	8006880 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d108      	bne.n	800686e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006860:	2b00      	cmp	r3, #0
 8006862:	d024      	beq.n	80068ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	4798      	blx	r3
 800686c:	e01f      	b.n	80068ae <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006872:	2b00      	cmp	r3, #0
 8006874:	d01b      	beq.n	80068ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	4798      	blx	r3
 800687e:	e016      	b.n	80068ae <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800688a:	2b00      	cmp	r3, #0
 800688c:	d107      	bne.n	800689e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f022 0208 	bic.w	r2, r2, #8
 800689c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d003      	beq.n	80068ae <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068b2:	f003 031f 	and.w	r3, r3, #31
 80068b6:	2220      	movs	r2, #32
 80068b8:	409a      	lsls	r2, r3
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	4013      	ands	r3, r2
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f000 8110 	beq.w	8006ae4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a2c      	ldr	r2, [pc, #176]	; (800697c <HAL_DMA_IRQHandler+0x690>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d04a      	beq.n	8006964 <HAL_DMA_IRQHandler+0x678>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a2b      	ldr	r2, [pc, #172]	; (8006980 <HAL_DMA_IRQHandler+0x694>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d045      	beq.n	8006964 <HAL_DMA_IRQHandler+0x678>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a29      	ldr	r2, [pc, #164]	; (8006984 <HAL_DMA_IRQHandler+0x698>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d040      	beq.n	8006964 <HAL_DMA_IRQHandler+0x678>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a28      	ldr	r2, [pc, #160]	; (8006988 <HAL_DMA_IRQHandler+0x69c>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d03b      	beq.n	8006964 <HAL_DMA_IRQHandler+0x678>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a26      	ldr	r2, [pc, #152]	; (800698c <HAL_DMA_IRQHandler+0x6a0>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d036      	beq.n	8006964 <HAL_DMA_IRQHandler+0x678>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a25      	ldr	r2, [pc, #148]	; (8006990 <HAL_DMA_IRQHandler+0x6a4>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d031      	beq.n	8006964 <HAL_DMA_IRQHandler+0x678>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a23      	ldr	r2, [pc, #140]	; (8006994 <HAL_DMA_IRQHandler+0x6a8>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d02c      	beq.n	8006964 <HAL_DMA_IRQHandler+0x678>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a22      	ldr	r2, [pc, #136]	; (8006998 <HAL_DMA_IRQHandler+0x6ac>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d027      	beq.n	8006964 <HAL_DMA_IRQHandler+0x678>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a20      	ldr	r2, [pc, #128]	; (800699c <HAL_DMA_IRQHandler+0x6b0>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d022      	beq.n	8006964 <HAL_DMA_IRQHandler+0x678>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a1f      	ldr	r2, [pc, #124]	; (80069a0 <HAL_DMA_IRQHandler+0x6b4>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d01d      	beq.n	8006964 <HAL_DMA_IRQHandler+0x678>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a1d      	ldr	r2, [pc, #116]	; (80069a4 <HAL_DMA_IRQHandler+0x6b8>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d018      	beq.n	8006964 <HAL_DMA_IRQHandler+0x678>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a1c      	ldr	r2, [pc, #112]	; (80069a8 <HAL_DMA_IRQHandler+0x6bc>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d013      	beq.n	8006964 <HAL_DMA_IRQHandler+0x678>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a1a      	ldr	r2, [pc, #104]	; (80069ac <HAL_DMA_IRQHandler+0x6c0>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d00e      	beq.n	8006964 <HAL_DMA_IRQHandler+0x678>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a19      	ldr	r2, [pc, #100]	; (80069b0 <HAL_DMA_IRQHandler+0x6c4>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d009      	beq.n	8006964 <HAL_DMA_IRQHandler+0x678>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a17      	ldr	r2, [pc, #92]	; (80069b4 <HAL_DMA_IRQHandler+0x6c8>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d004      	beq.n	8006964 <HAL_DMA_IRQHandler+0x678>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a16      	ldr	r2, [pc, #88]	; (80069b8 <HAL_DMA_IRQHandler+0x6cc>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d12b      	bne.n	80069bc <HAL_DMA_IRQHandler+0x6d0>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0310 	and.w	r3, r3, #16
 800696e:	2b00      	cmp	r3, #0
 8006970:	bf14      	ite	ne
 8006972:	2301      	movne	r3, #1
 8006974:	2300      	moveq	r3, #0
 8006976:	b2db      	uxtb	r3, r3
 8006978:	e02a      	b.n	80069d0 <HAL_DMA_IRQHandler+0x6e4>
 800697a:	bf00      	nop
 800697c:	40020010 	.word	0x40020010
 8006980:	40020028 	.word	0x40020028
 8006984:	40020040 	.word	0x40020040
 8006988:	40020058 	.word	0x40020058
 800698c:	40020070 	.word	0x40020070
 8006990:	40020088 	.word	0x40020088
 8006994:	400200a0 	.word	0x400200a0
 8006998:	400200b8 	.word	0x400200b8
 800699c:	40020410 	.word	0x40020410
 80069a0:	40020428 	.word	0x40020428
 80069a4:	40020440 	.word	0x40020440
 80069a8:	40020458 	.word	0x40020458
 80069ac:	40020470 	.word	0x40020470
 80069b0:	40020488 	.word	0x40020488
 80069b4:	400204a0 	.word	0x400204a0
 80069b8:	400204b8 	.word	0x400204b8
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	bf14      	ite	ne
 80069ca:	2301      	movne	r3, #1
 80069cc:	2300      	moveq	r3, #0
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f000 8087 	beq.w	8006ae4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069da:	f003 031f 	and.w	r3, r3, #31
 80069de:	2220      	movs	r2, #32
 80069e0:	409a      	lsls	r2, r3
 80069e2:	6a3b      	ldr	r3, [r7, #32]
 80069e4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	2b04      	cmp	r3, #4
 80069f0:	d139      	bne.n	8006a66 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f022 0216 	bic.w	r2, r2, #22
 8006a00:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	695a      	ldr	r2, [r3, #20]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a10:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d103      	bne.n	8006a22 <HAL_DMA_IRQHandler+0x736>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d007      	beq.n	8006a32 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f022 0208 	bic.w	r2, r2, #8
 8006a30:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a36:	f003 031f 	and.w	r3, r3, #31
 8006a3a:	223f      	movs	r2, #63	; 0x3f
 8006a3c:	409a      	lsls	r2, r3
 8006a3e:	6a3b      	ldr	r3, [r7, #32]
 8006a40:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f000 834a 	beq.w	80070f0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	4798      	blx	r3
          }
          return;
 8006a64:	e344      	b.n	80070f0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d018      	beq.n	8006aa6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d108      	bne.n	8006a94 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d02c      	beq.n	8006ae4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	4798      	blx	r3
 8006a92:	e027      	b.n	8006ae4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d023      	beq.n	8006ae4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	4798      	blx	r3
 8006aa4:	e01e      	b.n	8006ae4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10f      	bne.n	8006ad4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f022 0210 	bic.w	r2, r2, #16
 8006ac2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d003      	beq.n	8006ae4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f000 8306 	beq.w	80070fa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f000 8088 	beq.w	8006c0c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2204      	movs	r2, #4
 8006b00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a7a      	ldr	r2, [pc, #488]	; (8006cf4 <HAL_DMA_IRQHandler+0xa08>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d04a      	beq.n	8006ba4 <HAL_DMA_IRQHandler+0x8b8>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a79      	ldr	r2, [pc, #484]	; (8006cf8 <HAL_DMA_IRQHandler+0xa0c>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d045      	beq.n	8006ba4 <HAL_DMA_IRQHandler+0x8b8>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a77      	ldr	r2, [pc, #476]	; (8006cfc <HAL_DMA_IRQHandler+0xa10>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d040      	beq.n	8006ba4 <HAL_DMA_IRQHandler+0x8b8>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a76      	ldr	r2, [pc, #472]	; (8006d00 <HAL_DMA_IRQHandler+0xa14>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d03b      	beq.n	8006ba4 <HAL_DMA_IRQHandler+0x8b8>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a74      	ldr	r2, [pc, #464]	; (8006d04 <HAL_DMA_IRQHandler+0xa18>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d036      	beq.n	8006ba4 <HAL_DMA_IRQHandler+0x8b8>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a73      	ldr	r2, [pc, #460]	; (8006d08 <HAL_DMA_IRQHandler+0xa1c>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d031      	beq.n	8006ba4 <HAL_DMA_IRQHandler+0x8b8>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a71      	ldr	r2, [pc, #452]	; (8006d0c <HAL_DMA_IRQHandler+0xa20>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d02c      	beq.n	8006ba4 <HAL_DMA_IRQHandler+0x8b8>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a70      	ldr	r2, [pc, #448]	; (8006d10 <HAL_DMA_IRQHandler+0xa24>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d027      	beq.n	8006ba4 <HAL_DMA_IRQHandler+0x8b8>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a6e      	ldr	r2, [pc, #440]	; (8006d14 <HAL_DMA_IRQHandler+0xa28>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d022      	beq.n	8006ba4 <HAL_DMA_IRQHandler+0x8b8>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a6d      	ldr	r2, [pc, #436]	; (8006d18 <HAL_DMA_IRQHandler+0xa2c>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d01d      	beq.n	8006ba4 <HAL_DMA_IRQHandler+0x8b8>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a6b      	ldr	r2, [pc, #428]	; (8006d1c <HAL_DMA_IRQHandler+0xa30>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d018      	beq.n	8006ba4 <HAL_DMA_IRQHandler+0x8b8>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a6a      	ldr	r2, [pc, #424]	; (8006d20 <HAL_DMA_IRQHandler+0xa34>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d013      	beq.n	8006ba4 <HAL_DMA_IRQHandler+0x8b8>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a68      	ldr	r2, [pc, #416]	; (8006d24 <HAL_DMA_IRQHandler+0xa38>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d00e      	beq.n	8006ba4 <HAL_DMA_IRQHandler+0x8b8>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a67      	ldr	r2, [pc, #412]	; (8006d28 <HAL_DMA_IRQHandler+0xa3c>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d009      	beq.n	8006ba4 <HAL_DMA_IRQHandler+0x8b8>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a65      	ldr	r2, [pc, #404]	; (8006d2c <HAL_DMA_IRQHandler+0xa40>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d004      	beq.n	8006ba4 <HAL_DMA_IRQHandler+0x8b8>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a64      	ldr	r2, [pc, #400]	; (8006d30 <HAL_DMA_IRQHandler+0xa44>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d108      	bne.n	8006bb6 <HAL_DMA_IRQHandler+0x8ca>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f022 0201 	bic.w	r2, r2, #1
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	e007      	b.n	8006bc6 <HAL_DMA_IRQHandler+0x8da>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f022 0201 	bic.w	r2, r2, #1
 8006bc4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	60fb      	str	r3, [r7, #12]
 8006bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d307      	bcc.n	8006be2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0301 	and.w	r3, r3, #1
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1f2      	bne.n	8006bc6 <HAL_DMA_IRQHandler+0x8da>
 8006be0:	e000      	b.n	8006be4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006be2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d004      	beq.n	8006bfc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2203      	movs	r2, #3
 8006bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006bfa:	e003      	b.n	8006c04 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 8272 	beq.w	80070fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	4798      	blx	r3
 8006c1e:	e26c      	b.n	80070fa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a43      	ldr	r2, [pc, #268]	; (8006d34 <HAL_DMA_IRQHandler+0xa48>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d022      	beq.n	8006c70 <HAL_DMA_IRQHandler+0x984>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a42      	ldr	r2, [pc, #264]	; (8006d38 <HAL_DMA_IRQHandler+0xa4c>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d01d      	beq.n	8006c70 <HAL_DMA_IRQHandler+0x984>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a40      	ldr	r2, [pc, #256]	; (8006d3c <HAL_DMA_IRQHandler+0xa50>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d018      	beq.n	8006c70 <HAL_DMA_IRQHandler+0x984>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a3f      	ldr	r2, [pc, #252]	; (8006d40 <HAL_DMA_IRQHandler+0xa54>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d013      	beq.n	8006c70 <HAL_DMA_IRQHandler+0x984>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a3d      	ldr	r2, [pc, #244]	; (8006d44 <HAL_DMA_IRQHandler+0xa58>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d00e      	beq.n	8006c70 <HAL_DMA_IRQHandler+0x984>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a3c      	ldr	r2, [pc, #240]	; (8006d48 <HAL_DMA_IRQHandler+0xa5c>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d009      	beq.n	8006c70 <HAL_DMA_IRQHandler+0x984>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a3a      	ldr	r2, [pc, #232]	; (8006d4c <HAL_DMA_IRQHandler+0xa60>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d004      	beq.n	8006c70 <HAL_DMA_IRQHandler+0x984>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a39      	ldr	r2, [pc, #228]	; (8006d50 <HAL_DMA_IRQHandler+0xa64>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d101      	bne.n	8006c74 <HAL_DMA_IRQHandler+0x988>
 8006c70:	2301      	movs	r3, #1
 8006c72:	e000      	b.n	8006c76 <HAL_DMA_IRQHandler+0x98a>
 8006c74:	2300      	movs	r3, #0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f000 823f 	beq.w	80070fa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c88:	f003 031f 	and.w	r3, r3, #31
 8006c8c:	2204      	movs	r2, #4
 8006c8e:	409a      	lsls	r2, r3
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	4013      	ands	r3, r2
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 80cd 	beq.w	8006e34 <HAL_DMA_IRQHandler+0xb48>
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	f003 0304 	and.w	r3, r3, #4
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 80c7 	beq.w	8006e34 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006caa:	f003 031f 	and.w	r3, r3, #31
 8006cae:	2204      	movs	r2, #4
 8006cb0:	409a      	lsls	r2, r3
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d049      	beq.n	8006d54 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d109      	bne.n	8006cde <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 8210 	beq.w	80070f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cdc:	e20a      	b.n	80070f4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f000 8206 	beq.w	80070f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cf0:	e200      	b.n	80070f4 <HAL_DMA_IRQHandler+0xe08>
 8006cf2:	bf00      	nop
 8006cf4:	40020010 	.word	0x40020010
 8006cf8:	40020028 	.word	0x40020028
 8006cfc:	40020040 	.word	0x40020040
 8006d00:	40020058 	.word	0x40020058
 8006d04:	40020070 	.word	0x40020070
 8006d08:	40020088 	.word	0x40020088
 8006d0c:	400200a0 	.word	0x400200a0
 8006d10:	400200b8 	.word	0x400200b8
 8006d14:	40020410 	.word	0x40020410
 8006d18:	40020428 	.word	0x40020428
 8006d1c:	40020440 	.word	0x40020440
 8006d20:	40020458 	.word	0x40020458
 8006d24:	40020470 	.word	0x40020470
 8006d28:	40020488 	.word	0x40020488
 8006d2c:	400204a0 	.word	0x400204a0
 8006d30:	400204b8 	.word	0x400204b8
 8006d34:	58025408 	.word	0x58025408
 8006d38:	5802541c 	.word	0x5802541c
 8006d3c:	58025430 	.word	0x58025430
 8006d40:	58025444 	.word	0x58025444
 8006d44:	58025458 	.word	0x58025458
 8006d48:	5802546c 	.word	0x5802546c
 8006d4c:	58025480 	.word	0x58025480
 8006d50:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	f003 0320 	and.w	r3, r3, #32
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d160      	bne.n	8006e20 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a7f      	ldr	r2, [pc, #508]	; (8006f60 <HAL_DMA_IRQHandler+0xc74>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d04a      	beq.n	8006dfe <HAL_DMA_IRQHandler+0xb12>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a7d      	ldr	r2, [pc, #500]	; (8006f64 <HAL_DMA_IRQHandler+0xc78>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d045      	beq.n	8006dfe <HAL_DMA_IRQHandler+0xb12>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a7c      	ldr	r2, [pc, #496]	; (8006f68 <HAL_DMA_IRQHandler+0xc7c>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d040      	beq.n	8006dfe <HAL_DMA_IRQHandler+0xb12>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a7a      	ldr	r2, [pc, #488]	; (8006f6c <HAL_DMA_IRQHandler+0xc80>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d03b      	beq.n	8006dfe <HAL_DMA_IRQHandler+0xb12>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a79      	ldr	r2, [pc, #484]	; (8006f70 <HAL_DMA_IRQHandler+0xc84>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d036      	beq.n	8006dfe <HAL_DMA_IRQHandler+0xb12>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a77      	ldr	r2, [pc, #476]	; (8006f74 <HAL_DMA_IRQHandler+0xc88>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d031      	beq.n	8006dfe <HAL_DMA_IRQHandler+0xb12>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a76      	ldr	r2, [pc, #472]	; (8006f78 <HAL_DMA_IRQHandler+0xc8c>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d02c      	beq.n	8006dfe <HAL_DMA_IRQHandler+0xb12>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a74      	ldr	r2, [pc, #464]	; (8006f7c <HAL_DMA_IRQHandler+0xc90>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d027      	beq.n	8006dfe <HAL_DMA_IRQHandler+0xb12>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a73      	ldr	r2, [pc, #460]	; (8006f80 <HAL_DMA_IRQHandler+0xc94>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d022      	beq.n	8006dfe <HAL_DMA_IRQHandler+0xb12>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a71      	ldr	r2, [pc, #452]	; (8006f84 <HAL_DMA_IRQHandler+0xc98>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d01d      	beq.n	8006dfe <HAL_DMA_IRQHandler+0xb12>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a70      	ldr	r2, [pc, #448]	; (8006f88 <HAL_DMA_IRQHandler+0xc9c>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d018      	beq.n	8006dfe <HAL_DMA_IRQHandler+0xb12>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a6e      	ldr	r2, [pc, #440]	; (8006f8c <HAL_DMA_IRQHandler+0xca0>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d013      	beq.n	8006dfe <HAL_DMA_IRQHandler+0xb12>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a6d      	ldr	r2, [pc, #436]	; (8006f90 <HAL_DMA_IRQHandler+0xca4>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d00e      	beq.n	8006dfe <HAL_DMA_IRQHandler+0xb12>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a6b      	ldr	r2, [pc, #428]	; (8006f94 <HAL_DMA_IRQHandler+0xca8>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d009      	beq.n	8006dfe <HAL_DMA_IRQHandler+0xb12>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a6a      	ldr	r2, [pc, #424]	; (8006f98 <HAL_DMA_IRQHandler+0xcac>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d004      	beq.n	8006dfe <HAL_DMA_IRQHandler+0xb12>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a68      	ldr	r2, [pc, #416]	; (8006f9c <HAL_DMA_IRQHandler+0xcb0>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d108      	bne.n	8006e10 <HAL_DMA_IRQHandler+0xb24>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f022 0208 	bic.w	r2, r2, #8
 8006e0c:	601a      	str	r2, [r3, #0]
 8006e0e:	e007      	b.n	8006e20 <HAL_DMA_IRQHandler+0xb34>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 0204 	bic.w	r2, r2, #4
 8006e1e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f000 8165 	beq.w	80070f4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e32:	e15f      	b.n	80070f4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e38:	f003 031f 	and.w	r3, r3, #31
 8006e3c:	2202      	movs	r2, #2
 8006e3e:	409a      	lsls	r2, r3
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	4013      	ands	r3, r2
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f000 80c5 	beq.w	8006fd4 <HAL_DMA_IRQHandler+0xce8>
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	f003 0302 	and.w	r3, r3, #2
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f000 80bf 	beq.w	8006fd4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e5a:	f003 031f 	and.w	r3, r3, #31
 8006e5e:	2202      	movs	r2, #2
 8006e60:	409a      	lsls	r2, r3
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d018      	beq.n	8006ea2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d109      	bne.n	8006e8e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f000 813a 	beq.w	80070f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e8c:	e134      	b.n	80070f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 8130 	beq.w	80070f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ea0:	e12a      	b.n	80070f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	f003 0320 	and.w	r3, r3, #32
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f040 8089 	bne.w	8006fc0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a2b      	ldr	r2, [pc, #172]	; (8006f60 <HAL_DMA_IRQHandler+0xc74>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d04a      	beq.n	8006f4e <HAL_DMA_IRQHandler+0xc62>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a29      	ldr	r2, [pc, #164]	; (8006f64 <HAL_DMA_IRQHandler+0xc78>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d045      	beq.n	8006f4e <HAL_DMA_IRQHandler+0xc62>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a28      	ldr	r2, [pc, #160]	; (8006f68 <HAL_DMA_IRQHandler+0xc7c>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d040      	beq.n	8006f4e <HAL_DMA_IRQHandler+0xc62>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a26      	ldr	r2, [pc, #152]	; (8006f6c <HAL_DMA_IRQHandler+0xc80>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d03b      	beq.n	8006f4e <HAL_DMA_IRQHandler+0xc62>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a25      	ldr	r2, [pc, #148]	; (8006f70 <HAL_DMA_IRQHandler+0xc84>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d036      	beq.n	8006f4e <HAL_DMA_IRQHandler+0xc62>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a23      	ldr	r2, [pc, #140]	; (8006f74 <HAL_DMA_IRQHandler+0xc88>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d031      	beq.n	8006f4e <HAL_DMA_IRQHandler+0xc62>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a22      	ldr	r2, [pc, #136]	; (8006f78 <HAL_DMA_IRQHandler+0xc8c>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d02c      	beq.n	8006f4e <HAL_DMA_IRQHandler+0xc62>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a20      	ldr	r2, [pc, #128]	; (8006f7c <HAL_DMA_IRQHandler+0xc90>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d027      	beq.n	8006f4e <HAL_DMA_IRQHandler+0xc62>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a1f      	ldr	r2, [pc, #124]	; (8006f80 <HAL_DMA_IRQHandler+0xc94>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d022      	beq.n	8006f4e <HAL_DMA_IRQHandler+0xc62>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a1d      	ldr	r2, [pc, #116]	; (8006f84 <HAL_DMA_IRQHandler+0xc98>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d01d      	beq.n	8006f4e <HAL_DMA_IRQHandler+0xc62>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a1c      	ldr	r2, [pc, #112]	; (8006f88 <HAL_DMA_IRQHandler+0xc9c>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d018      	beq.n	8006f4e <HAL_DMA_IRQHandler+0xc62>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a1a      	ldr	r2, [pc, #104]	; (8006f8c <HAL_DMA_IRQHandler+0xca0>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d013      	beq.n	8006f4e <HAL_DMA_IRQHandler+0xc62>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a19      	ldr	r2, [pc, #100]	; (8006f90 <HAL_DMA_IRQHandler+0xca4>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d00e      	beq.n	8006f4e <HAL_DMA_IRQHandler+0xc62>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a17      	ldr	r2, [pc, #92]	; (8006f94 <HAL_DMA_IRQHandler+0xca8>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d009      	beq.n	8006f4e <HAL_DMA_IRQHandler+0xc62>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a16      	ldr	r2, [pc, #88]	; (8006f98 <HAL_DMA_IRQHandler+0xcac>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d004      	beq.n	8006f4e <HAL_DMA_IRQHandler+0xc62>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a14      	ldr	r2, [pc, #80]	; (8006f9c <HAL_DMA_IRQHandler+0xcb0>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d128      	bne.n	8006fa0 <HAL_DMA_IRQHandler+0xcb4>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f022 0214 	bic.w	r2, r2, #20
 8006f5c:	601a      	str	r2, [r3, #0]
 8006f5e:	e027      	b.n	8006fb0 <HAL_DMA_IRQHandler+0xcc4>
 8006f60:	40020010 	.word	0x40020010
 8006f64:	40020028 	.word	0x40020028
 8006f68:	40020040 	.word	0x40020040
 8006f6c:	40020058 	.word	0x40020058
 8006f70:	40020070 	.word	0x40020070
 8006f74:	40020088 	.word	0x40020088
 8006f78:	400200a0 	.word	0x400200a0
 8006f7c:	400200b8 	.word	0x400200b8
 8006f80:	40020410 	.word	0x40020410
 8006f84:	40020428 	.word	0x40020428
 8006f88:	40020440 	.word	0x40020440
 8006f8c:	40020458 	.word	0x40020458
 8006f90:	40020470 	.word	0x40020470
 8006f94:	40020488 	.word	0x40020488
 8006f98:	400204a0 	.word	0x400204a0
 8006f9c:	400204b8 	.word	0x400204b8
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f022 020a 	bic.w	r2, r2, #10
 8006fae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 8097 	beq.w	80070f8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fd2:	e091      	b.n	80070f8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fd8:	f003 031f 	and.w	r3, r3, #31
 8006fdc:	2208      	movs	r2, #8
 8006fde:	409a      	lsls	r2, r3
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f000 8088 	beq.w	80070fa <HAL_DMA_IRQHandler+0xe0e>
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	f003 0308 	and.w	r3, r3, #8
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f000 8082 	beq.w	80070fa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a41      	ldr	r2, [pc, #260]	; (8007100 <HAL_DMA_IRQHandler+0xe14>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d04a      	beq.n	8007096 <HAL_DMA_IRQHandler+0xdaa>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a3f      	ldr	r2, [pc, #252]	; (8007104 <HAL_DMA_IRQHandler+0xe18>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d045      	beq.n	8007096 <HAL_DMA_IRQHandler+0xdaa>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a3e      	ldr	r2, [pc, #248]	; (8007108 <HAL_DMA_IRQHandler+0xe1c>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d040      	beq.n	8007096 <HAL_DMA_IRQHandler+0xdaa>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a3c      	ldr	r2, [pc, #240]	; (800710c <HAL_DMA_IRQHandler+0xe20>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d03b      	beq.n	8007096 <HAL_DMA_IRQHandler+0xdaa>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a3b      	ldr	r2, [pc, #236]	; (8007110 <HAL_DMA_IRQHandler+0xe24>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d036      	beq.n	8007096 <HAL_DMA_IRQHandler+0xdaa>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a39      	ldr	r2, [pc, #228]	; (8007114 <HAL_DMA_IRQHandler+0xe28>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d031      	beq.n	8007096 <HAL_DMA_IRQHandler+0xdaa>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a38      	ldr	r2, [pc, #224]	; (8007118 <HAL_DMA_IRQHandler+0xe2c>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d02c      	beq.n	8007096 <HAL_DMA_IRQHandler+0xdaa>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a36      	ldr	r2, [pc, #216]	; (800711c <HAL_DMA_IRQHandler+0xe30>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d027      	beq.n	8007096 <HAL_DMA_IRQHandler+0xdaa>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a35      	ldr	r2, [pc, #212]	; (8007120 <HAL_DMA_IRQHandler+0xe34>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d022      	beq.n	8007096 <HAL_DMA_IRQHandler+0xdaa>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a33      	ldr	r2, [pc, #204]	; (8007124 <HAL_DMA_IRQHandler+0xe38>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d01d      	beq.n	8007096 <HAL_DMA_IRQHandler+0xdaa>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a32      	ldr	r2, [pc, #200]	; (8007128 <HAL_DMA_IRQHandler+0xe3c>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d018      	beq.n	8007096 <HAL_DMA_IRQHandler+0xdaa>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a30      	ldr	r2, [pc, #192]	; (800712c <HAL_DMA_IRQHandler+0xe40>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d013      	beq.n	8007096 <HAL_DMA_IRQHandler+0xdaa>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a2f      	ldr	r2, [pc, #188]	; (8007130 <HAL_DMA_IRQHandler+0xe44>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d00e      	beq.n	8007096 <HAL_DMA_IRQHandler+0xdaa>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a2d      	ldr	r2, [pc, #180]	; (8007134 <HAL_DMA_IRQHandler+0xe48>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d009      	beq.n	8007096 <HAL_DMA_IRQHandler+0xdaa>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a2c      	ldr	r2, [pc, #176]	; (8007138 <HAL_DMA_IRQHandler+0xe4c>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d004      	beq.n	8007096 <HAL_DMA_IRQHandler+0xdaa>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a2a      	ldr	r2, [pc, #168]	; (800713c <HAL_DMA_IRQHandler+0xe50>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d108      	bne.n	80070a8 <HAL_DMA_IRQHandler+0xdbc>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 021c 	bic.w	r2, r2, #28
 80070a4:	601a      	str	r2, [r3, #0]
 80070a6:	e007      	b.n	80070b8 <HAL_DMA_IRQHandler+0xdcc>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f022 020e 	bic.w	r2, r2, #14
 80070b6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070bc:	f003 031f 	and.w	r3, r3, #31
 80070c0:	2201      	movs	r2, #1
 80070c2:	409a      	lsls	r2, r3
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d009      	beq.n	80070fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	4798      	blx	r3
 80070ee:	e004      	b.n	80070fa <HAL_DMA_IRQHandler+0xe0e>
          return;
 80070f0:	bf00      	nop
 80070f2:	e002      	b.n	80070fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070f4:	bf00      	nop
 80070f6:	e000      	b.n	80070fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070f8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80070fa:	3728      	adds	r7, #40	; 0x28
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	40020010 	.word	0x40020010
 8007104:	40020028 	.word	0x40020028
 8007108:	40020040 	.word	0x40020040
 800710c:	40020058 	.word	0x40020058
 8007110:	40020070 	.word	0x40020070
 8007114:	40020088 	.word	0x40020088
 8007118:	400200a0 	.word	0x400200a0
 800711c:	400200b8 	.word	0x400200b8
 8007120:	40020410 	.word	0x40020410
 8007124:	40020428 	.word	0x40020428
 8007128:	40020440 	.word	0x40020440
 800712c:	40020458 	.word	0x40020458
 8007130:	40020470 	.word	0x40020470
 8007134:	40020488 	.word	0x40020488
 8007138:	400204a0 	.word	0x400204a0
 800713c:	400204b8 	.word	0x400204b8

08007140 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007140:	b480      	push	{r7}
 8007142:	b087      	sub	sp, #28
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
 800714c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007152:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007158:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a7f      	ldr	r2, [pc, #508]	; (800735c <DMA_SetConfig+0x21c>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d072      	beq.n	800724a <DMA_SetConfig+0x10a>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a7d      	ldr	r2, [pc, #500]	; (8007360 <DMA_SetConfig+0x220>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d06d      	beq.n	800724a <DMA_SetConfig+0x10a>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a7c      	ldr	r2, [pc, #496]	; (8007364 <DMA_SetConfig+0x224>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d068      	beq.n	800724a <DMA_SetConfig+0x10a>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a7a      	ldr	r2, [pc, #488]	; (8007368 <DMA_SetConfig+0x228>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d063      	beq.n	800724a <DMA_SetConfig+0x10a>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a79      	ldr	r2, [pc, #484]	; (800736c <DMA_SetConfig+0x22c>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d05e      	beq.n	800724a <DMA_SetConfig+0x10a>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a77      	ldr	r2, [pc, #476]	; (8007370 <DMA_SetConfig+0x230>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d059      	beq.n	800724a <DMA_SetConfig+0x10a>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a76      	ldr	r2, [pc, #472]	; (8007374 <DMA_SetConfig+0x234>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d054      	beq.n	800724a <DMA_SetConfig+0x10a>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a74      	ldr	r2, [pc, #464]	; (8007378 <DMA_SetConfig+0x238>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d04f      	beq.n	800724a <DMA_SetConfig+0x10a>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a73      	ldr	r2, [pc, #460]	; (800737c <DMA_SetConfig+0x23c>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d04a      	beq.n	800724a <DMA_SetConfig+0x10a>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a71      	ldr	r2, [pc, #452]	; (8007380 <DMA_SetConfig+0x240>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d045      	beq.n	800724a <DMA_SetConfig+0x10a>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a70      	ldr	r2, [pc, #448]	; (8007384 <DMA_SetConfig+0x244>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d040      	beq.n	800724a <DMA_SetConfig+0x10a>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a6e      	ldr	r2, [pc, #440]	; (8007388 <DMA_SetConfig+0x248>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d03b      	beq.n	800724a <DMA_SetConfig+0x10a>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a6d      	ldr	r2, [pc, #436]	; (800738c <DMA_SetConfig+0x24c>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d036      	beq.n	800724a <DMA_SetConfig+0x10a>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a6b      	ldr	r2, [pc, #428]	; (8007390 <DMA_SetConfig+0x250>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d031      	beq.n	800724a <DMA_SetConfig+0x10a>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a6a      	ldr	r2, [pc, #424]	; (8007394 <DMA_SetConfig+0x254>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d02c      	beq.n	800724a <DMA_SetConfig+0x10a>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a68      	ldr	r2, [pc, #416]	; (8007398 <DMA_SetConfig+0x258>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d027      	beq.n	800724a <DMA_SetConfig+0x10a>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a67      	ldr	r2, [pc, #412]	; (800739c <DMA_SetConfig+0x25c>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d022      	beq.n	800724a <DMA_SetConfig+0x10a>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a65      	ldr	r2, [pc, #404]	; (80073a0 <DMA_SetConfig+0x260>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d01d      	beq.n	800724a <DMA_SetConfig+0x10a>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a64      	ldr	r2, [pc, #400]	; (80073a4 <DMA_SetConfig+0x264>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d018      	beq.n	800724a <DMA_SetConfig+0x10a>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a62      	ldr	r2, [pc, #392]	; (80073a8 <DMA_SetConfig+0x268>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d013      	beq.n	800724a <DMA_SetConfig+0x10a>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a61      	ldr	r2, [pc, #388]	; (80073ac <DMA_SetConfig+0x26c>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d00e      	beq.n	800724a <DMA_SetConfig+0x10a>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a5f      	ldr	r2, [pc, #380]	; (80073b0 <DMA_SetConfig+0x270>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d009      	beq.n	800724a <DMA_SetConfig+0x10a>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a5e      	ldr	r2, [pc, #376]	; (80073b4 <DMA_SetConfig+0x274>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d004      	beq.n	800724a <DMA_SetConfig+0x10a>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a5c      	ldr	r2, [pc, #368]	; (80073b8 <DMA_SetConfig+0x278>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d101      	bne.n	800724e <DMA_SetConfig+0x10e>
 800724a:	2301      	movs	r3, #1
 800724c:	e000      	b.n	8007250 <DMA_SetConfig+0x110>
 800724e:	2300      	movs	r3, #0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00d      	beq.n	8007270 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800725c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007262:	2b00      	cmp	r3, #0
 8007264:	d004      	beq.n	8007270 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800726e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a39      	ldr	r2, [pc, #228]	; (800735c <DMA_SetConfig+0x21c>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d04a      	beq.n	8007310 <DMA_SetConfig+0x1d0>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a38      	ldr	r2, [pc, #224]	; (8007360 <DMA_SetConfig+0x220>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d045      	beq.n	8007310 <DMA_SetConfig+0x1d0>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a36      	ldr	r2, [pc, #216]	; (8007364 <DMA_SetConfig+0x224>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d040      	beq.n	8007310 <DMA_SetConfig+0x1d0>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a35      	ldr	r2, [pc, #212]	; (8007368 <DMA_SetConfig+0x228>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d03b      	beq.n	8007310 <DMA_SetConfig+0x1d0>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a33      	ldr	r2, [pc, #204]	; (800736c <DMA_SetConfig+0x22c>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d036      	beq.n	8007310 <DMA_SetConfig+0x1d0>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a32      	ldr	r2, [pc, #200]	; (8007370 <DMA_SetConfig+0x230>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d031      	beq.n	8007310 <DMA_SetConfig+0x1d0>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a30      	ldr	r2, [pc, #192]	; (8007374 <DMA_SetConfig+0x234>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d02c      	beq.n	8007310 <DMA_SetConfig+0x1d0>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a2f      	ldr	r2, [pc, #188]	; (8007378 <DMA_SetConfig+0x238>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d027      	beq.n	8007310 <DMA_SetConfig+0x1d0>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a2d      	ldr	r2, [pc, #180]	; (800737c <DMA_SetConfig+0x23c>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d022      	beq.n	8007310 <DMA_SetConfig+0x1d0>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a2c      	ldr	r2, [pc, #176]	; (8007380 <DMA_SetConfig+0x240>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d01d      	beq.n	8007310 <DMA_SetConfig+0x1d0>
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a2a      	ldr	r2, [pc, #168]	; (8007384 <DMA_SetConfig+0x244>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d018      	beq.n	8007310 <DMA_SetConfig+0x1d0>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a29      	ldr	r2, [pc, #164]	; (8007388 <DMA_SetConfig+0x248>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d013      	beq.n	8007310 <DMA_SetConfig+0x1d0>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a27      	ldr	r2, [pc, #156]	; (800738c <DMA_SetConfig+0x24c>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d00e      	beq.n	8007310 <DMA_SetConfig+0x1d0>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a26      	ldr	r2, [pc, #152]	; (8007390 <DMA_SetConfig+0x250>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d009      	beq.n	8007310 <DMA_SetConfig+0x1d0>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a24      	ldr	r2, [pc, #144]	; (8007394 <DMA_SetConfig+0x254>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d004      	beq.n	8007310 <DMA_SetConfig+0x1d0>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a23      	ldr	r2, [pc, #140]	; (8007398 <DMA_SetConfig+0x258>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d101      	bne.n	8007314 <DMA_SetConfig+0x1d4>
 8007310:	2301      	movs	r3, #1
 8007312:	e000      	b.n	8007316 <DMA_SetConfig+0x1d6>
 8007314:	2300      	movs	r3, #0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d059      	beq.n	80073ce <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800731e:	f003 031f 	and.w	r3, r3, #31
 8007322:	223f      	movs	r2, #63	; 0x3f
 8007324:	409a      	lsls	r2, r3
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007338:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	2b40      	cmp	r3, #64	; 0x40
 8007348:	d138      	bne.n	80073bc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68ba      	ldr	r2, [r7, #8]
 8007358:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800735a:	e086      	b.n	800746a <DMA_SetConfig+0x32a>
 800735c:	40020010 	.word	0x40020010
 8007360:	40020028 	.word	0x40020028
 8007364:	40020040 	.word	0x40020040
 8007368:	40020058 	.word	0x40020058
 800736c:	40020070 	.word	0x40020070
 8007370:	40020088 	.word	0x40020088
 8007374:	400200a0 	.word	0x400200a0
 8007378:	400200b8 	.word	0x400200b8
 800737c:	40020410 	.word	0x40020410
 8007380:	40020428 	.word	0x40020428
 8007384:	40020440 	.word	0x40020440
 8007388:	40020458 	.word	0x40020458
 800738c:	40020470 	.word	0x40020470
 8007390:	40020488 	.word	0x40020488
 8007394:	400204a0 	.word	0x400204a0
 8007398:	400204b8 	.word	0x400204b8
 800739c:	58025408 	.word	0x58025408
 80073a0:	5802541c 	.word	0x5802541c
 80073a4:	58025430 	.word	0x58025430
 80073a8:	58025444 	.word	0x58025444
 80073ac:	58025458 	.word	0x58025458
 80073b0:	5802546c 	.word	0x5802546c
 80073b4:	58025480 	.word	0x58025480
 80073b8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	60da      	str	r2, [r3, #12]
}
 80073cc:	e04d      	b.n	800746a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a29      	ldr	r2, [pc, #164]	; (8007478 <DMA_SetConfig+0x338>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d022      	beq.n	800741e <DMA_SetConfig+0x2de>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a27      	ldr	r2, [pc, #156]	; (800747c <DMA_SetConfig+0x33c>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d01d      	beq.n	800741e <DMA_SetConfig+0x2de>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a26      	ldr	r2, [pc, #152]	; (8007480 <DMA_SetConfig+0x340>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d018      	beq.n	800741e <DMA_SetConfig+0x2de>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a24      	ldr	r2, [pc, #144]	; (8007484 <DMA_SetConfig+0x344>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d013      	beq.n	800741e <DMA_SetConfig+0x2de>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a23      	ldr	r2, [pc, #140]	; (8007488 <DMA_SetConfig+0x348>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d00e      	beq.n	800741e <DMA_SetConfig+0x2de>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a21      	ldr	r2, [pc, #132]	; (800748c <DMA_SetConfig+0x34c>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d009      	beq.n	800741e <DMA_SetConfig+0x2de>
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a20      	ldr	r2, [pc, #128]	; (8007490 <DMA_SetConfig+0x350>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d004      	beq.n	800741e <DMA_SetConfig+0x2de>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a1e      	ldr	r2, [pc, #120]	; (8007494 <DMA_SetConfig+0x354>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d101      	bne.n	8007422 <DMA_SetConfig+0x2e2>
 800741e:	2301      	movs	r3, #1
 8007420:	e000      	b.n	8007424 <DMA_SetConfig+0x2e4>
 8007422:	2300      	movs	r3, #0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d020      	beq.n	800746a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800742c:	f003 031f 	and.w	r3, r3, #31
 8007430:	2201      	movs	r2, #1
 8007432:	409a      	lsls	r2, r3
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	683a      	ldr	r2, [r7, #0]
 800743e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	2b40      	cmp	r3, #64	; 0x40
 8007446:	d108      	bne.n	800745a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	60da      	str	r2, [r3, #12]
}
 8007458:	e007      	b.n	800746a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68ba      	ldr	r2, [r7, #8]
 8007460:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	60da      	str	r2, [r3, #12]
}
 800746a:	bf00      	nop
 800746c:	371c      	adds	r7, #28
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	58025408 	.word	0x58025408
 800747c:	5802541c 	.word	0x5802541c
 8007480:	58025430 	.word	0x58025430
 8007484:	58025444 	.word	0x58025444
 8007488:	58025458 	.word	0x58025458
 800748c:	5802546c 	.word	0x5802546c
 8007490:	58025480 	.word	0x58025480
 8007494:	58025494 	.word	0x58025494

08007498 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a42      	ldr	r2, [pc, #264]	; (80075b0 <DMA_CalcBaseAndBitshift+0x118>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d04a      	beq.n	8007540 <DMA_CalcBaseAndBitshift+0xa8>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a41      	ldr	r2, [pc, #260]	; (80075b4 <DMA_CalcBaseAndBitshift+0x11c>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d045      	beq.n	8007540 <DMA_CalcBaseAndBitshift+0xa8>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a3f      	ldr	r2, [pc, #252]	; (80075b8 <DMA_CalcBaseAndBitshift+0x120>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d040      	beq.n	8007540 <DMA_CalcBaseAndBitshift+0xa8>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a3e      	ldr	r2, [pc, #248]	; (80075bc <DMA_CalcBaseAndBitshift+0x124>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d03b      	beq.n	8007540 <DMA_CalcBaseAndBitshift+0xa8>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a3c      	ldr	r2, [pc, #240]	; (80075c0 <DMA_CalcBaseAndBitshift+0x128>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d036      	beq.n	8007540 <DMA_CalcBaseAndBitshift+0xa8>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a3b      	ldr	r2, [pc, #236]	; (80075c4 <DMA_CalcBaseAndBitshift+0x12c>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d031      	beq.n	8007540 <DMA_CalcBaseAndBitshift+0xa8>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a39      	ldr	r2, [pc, #228]	; (80075c8 <DMA_CalcBaseAndBitshift+0x130>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d02c      	beq.n	8007540 <DMA_CalcBaseAndBitshift+0xa8>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a38      	ldr	r2, [pc, #224]	; (80075cc <DMA_CalcBaseAndBitshift+0x134>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d027      	beq.n	8007540 <DMA_CalcBaseAndBitshift+0xa8>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a36      	ldr	r2, [pc, #216]	; (80075d0 <DMA_CalcBaseAndBitshift+0x138>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d022      	beq.n	8007540 <DMA_CalcBaseAndBitshift+0xa8>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a35      	ldr	r2, [pc, #212]	; (80075d4 <DMA_CalcBaseAndBitshift+0x13c>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d01d      	beq.n	8007540 <DMA_CalcBaseAndBitshift+0xa8>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a33      	ldr	r2, [pc, #204]	; (80075d8 <DMA_CalcBaseAndBitshift+0x140>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d018      	beq.n	8007540 <DMA_CalcBaseAndBitshift+0xa8>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a32      	ldr	r2, [pc, #200]	; (80075dc <DMA_CalcBaseAndBitshift+0x144>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d013      	beq.n	8007540 <DMA_CalcBaseAndBitshift+0xa8>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a30      	ldr	r2, [pc, #192]	; (80075e0 <DMA_CalcBaseAndBitshift+0x148>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d00e      	beq.n	8007540 <DMA_CalcBaseAndBitshift+0xa8>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a2f      	ldr	r2, [pc, #188]	; (80075e4 <DMA_CalcBaseAndBitshift+0x14c>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d009      	beq.n	8007540 <DMA_CalcBaseAndBitshift+0xa8>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a2d      	ldr	r2, [pc, #180]	; (80075e8 <DMA_CalcBaseAndBitshift+0x150>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d004      	beq.n	8007540 <DMA_CalcBaseAndBitshift+0xa8>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a2c      	ldr	r2, [pc, #176]	; (80075ec <DMA_CalcBaseAndBitshift+0x154>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d101      	bne.n	8007544 <DMA_CalcBaseAndBitshift+0xac>
 8007540:	2301      	movs	r3, #1
 8007542:	e000      	b.n	8007546 <DMA_CalcBaseAndBitshift+0xae>
 8007544:	2300      	movs	r3, #0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d024      	beq.n	8007594 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	b2db      	uxtb	r3, r3
 8007550:	3b10      	subs	r3, #16
 8007552:	4a27      	ldr	r2, [pc, #156]	; (80075f0 <DMA_CalcBaseAndBitshift+0x158>)
 8007554:	fba2 2303 	umull	r2, r3, r2, r3
 8007558:	091b      	lsrs	r3, r3, #4
 800755a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f003 0307 	and.w	r3, r3, #7
 8007562:	4a24      	ldr	r2, [pc, #144]	; (80075f4 <DMA_CalcBaseAndBitshift+0x15c>)
 8007564:	5cd3      	ldrb	r3, [r2, r3]
 8007566:	461a      	mov	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2b03      	cmp	r3, #3
 8007570:	d908      	bls.n	8007584 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	461a      	mov	r2, r3
 8007578:	4b1f      	ldr	r3, [pc, #124]	; (80075f8 <DMA_CalcBaseAndBitshift+0x160>)
 800757a:	4013      	ands	r3, r2
 800757c:	1d1a      	adds	r2, r3, #4
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	659a      	str	r2, [r3, #88]	; 0x58
 8007582:	e00d      	b.n	80075a0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	461a      	mov	r2, r3
 800758a:	4b1b      	ldr	r3, [pc, #108]	; (80075f8 <DMA_CalcBaseAndBitshift+0x160>)
 800758c:	4013      	ands	r3, r2
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	6593      	str	r3, [r2, #88]	; 0x58
 8007592:	e005      	b.n	80075a0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3714      	adds	r7, #20
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr
 80075b0:	40020010 	.word	0x40020010
 80075b4:	40020028 	.word	0x40020028
 80075b8:	40020040 	.word	0x40020040
 80075bc:	40020058 	.word	0x40020058
 80075c0:	40020070 	.word	0x40020070
 80075c4:	40020088 	.word	0x40020088
 80075c8:	400200a0 	.word	0x400200a0
 80075cc:	400200b8 	.word	0x400200b8
 80075d0:	40020410 	.word	0x40020410
 80075d4:	40020428 	.word	0x40020428
 80075d8:	40020440 	.word	0x40020440
 80075dc:	40020458 	.word	0x40020458
 80075e0:	40020470 	.word	0x40020470
 80075e4:	40020488 	.word	0x40020488
 80075e8:	400204a0 	.word	0x400204a0
 80075ec:	400204b8 	.word	0x400204b8
 80075f0:	aaaaaaab 	.word	0xaaaaaaab
 80075f4:	08013070 	.word	0x08013070
 80075f8:	fffffc00 	.word	0xfffffc00

080075fc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007604:	2300      	movs	r3, #0
 8007606:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d120      	bne.n	8007652 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007614:	2b03      	cmp	r3, #3
 8007616:	d858      	bhi.n	80076ca <DMA_CheckFifoParam+0xce>
 8007618:	a201      	add	r2, pc, #4	; (adr r2, 8007620 <DMA_CheckFifoParam+0x24>)
 800761a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761e:	bf00      	nop
 8007620:	08007631 	.word	0x08007631
 8007624:	08007643 	.word	0x08007643
 8007628:	08007631 	.word	0x08007631
 800762c:	080076cb 	.word	0x080076cb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007634:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007638:	2b00      	cmp	r3, #0
 800763a:	d048      	beq.n	80076ce <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007640:	e045      	b.n	80076ce <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007646:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800764a:	d142      	bne.n	80076d2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007650:	e03f      	b.n	80076d2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800765a:	d123      	bne.n	80076a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007660:	2b03      	cmp	r3, #3
 8007662:	d838      	bhi.n	80076d6 <DMA_CheckFifoParam+0xda>
 8007664:	a201      	add	r2, pc, #4	; (adr r2, 800766c <DMA_CheckFifoParam+0x70>)
 8007666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766a:	bf00      	nop
 800766c:	0800767d 	.word	0x0800767d
 8007670:	08007683 	.word	0x08007683
 8007674:	0800767d 	.word	0x0800767d
 8007678:	08007695 	.word	0x08007695
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	73fb      	strb	r3, [r7, #15]
        break;
 8007680:	e030      	b.n	80076e4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007686:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800768a:	2b00      	cmp	r3, #0
 800768c:	d025      	beq.n	80076da <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007692:	e022      	b.n	80076da <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007698:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800769c:	d11f      	bne.n	80076de <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80076a2:	e01c      	b.n	80076de <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d902      	bls.n	80076b2 <DMA_CheckFifoParam+0xb6>
 80076ac:	2b03      	cmp	r3, #3
 80076ae:	d003      	beq.n	80076b8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80076b0:	e018      	b.n	80076e4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	73fb      	strb	r3, [r7, #15]
        break;
 80076b6:	e015      	b.n	80076e4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00e      	beq.n	80076e2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	73fb      	strb	r3, [r7, #15]
    break;
 80076c8:	e00b      	b.n	80076e2 <DMA_CheckFifoParam+0xe6>
        break;
 80076ca:	bf00      	nop
 80076cc:	e00a      	b.n	80076e4 <DMA_CheckFifoParam+0xe8>
        break;
 80076ce:	bf00      	nop
 80076d0:	e008      	b.n	80076e4 <DMA_CheckFifoParam+0xe8>
        break;
 80076d2:	bf00      	nop
 80076d4:	e006      	b.n	80076e4 <DMA_CheckFifoParam+0xe8>
        break;
 80076d6:	bf00      	nop
 80076d8:	e004      	b.n	80076e4 <DMA_CheckFifoParam+0xe8>
        break;
 80076da:	bf00      	nop
 80076dc:	e002      	b.n	80076e4 <DMA_CheckFifoParam+0xe8>
        break;
 80076de:	bf00      	nop
 80076e0:	e000      	b.n	80076e4 <DMA_CheckFifoParam+0xe8>
    break;
 80076e2:	bf00      	nop
    }
  }

  return status;
 80076e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3714      	adds	r7, #20
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop

080076f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a38      	ldr	r2, [pc, #224]	; (80077e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d022      	beq.n	8007752 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a36      	ldr	r2, [pc, #216]	; (80077ec <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d01d      	beq.n	8007752 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a35      	ldr	r2, [pc, #212]	; (80077f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d018      	beq.n	8007752 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a33      	ldr	r2, [pc, #204]	; (80077f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d013      	beq.n	8007752 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a32      	ldr	r2, [pc, #200]	; (80077f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d00e      	beq.n	8007752 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a30      	ldr	r2, [pc, #192]	; (80077fc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d009      	beq.n	8007752 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a2f      	ldr	r2, [pc, #188]	; (8007800 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d004      	beq.n	8007752 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a2d      	ldr	r2, [pc, #180]	; (8007804 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d101      	bne.n	8007756 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007752:	2301      	movs	r3, #1
 8007754:	e000      	b.n	8007758 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007756:	2300      	movs	r3, #0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d01a      	beq.n	8007792 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	b2db      	uxtb	r3, r3
 8007762:	3b08      	subs	r3, #8
 8007764:	4a28      	ldr	r2, [pc, #160]	; (8007808 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007766:	fba2 2303 	umull	r2, r3, r2, r3
 800776a:	091b      	lsrs	r3, r3, #4
 800776c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	4b26      	ldr	r3, [pc, #152]	; (800780c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007772:	4413      	add	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	461a      	mov	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4a24      	ldr	r2, [pc, #144]	; (8007810 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007780:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f003 031f 	and.w	r3, r3, #31
 8007788:	2201      	movs	r2, #1
 800778a:	409a      	lsls	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007790:	e024      	b.n	80077dc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	b2db      	uxtb	r3, r3
 8007798:	3b10      	subs	r3, #16
 800779a:	4a1e      	ldr	r2, [pc, #120]	; (8007814 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800779c:	fba2 2303 	umull	r2, r3, r2, r3
 80077a0:	091b      	lsrs	r3, r3, #4
 80077a2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	4a1c      	ldr	r2, [pc, #112]	; (8007818 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d806      	bhi.n	80077ba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	4a1b      	ldr	r2, [pc, #108]	; (800781c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d902      	bls.n	80077ba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	3308      	adds	r3, #8
 80077b8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	4b18      	ldr	r3, [pc, #96]	; (8007820 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80077be:	4413      	add	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	461a      	mov	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a16      	ldr	r2, [pc, #88]	; (8007824 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80077cc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f003 031f 	and.w	r3, r3, #31
 80077d4:	2201      	movs	r2, #1
 80077d6:	409a      	lsls	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	669a      	str	r2, [r3, #104]	; 0x68
}
 80077dc:	bf00      	nop
 80077de:	3714      	adds	r7, #20
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr
 80077e8:	58025408 	.word	0x58025408
 80077ec:	5802541c 	.word	0x5802541c
 80077f0:	58025430 	.word	0x58025430
 80077f4:	58025444 	.word	0x58025444
 80077f8:	58025458 	.word	0x58025458
 80077fc:	5802546c 	.word	0x5802546c
 8007800:	58025480 	.word	0x58025480
 8007804:	58025494 	.word	0x58025494
 8007808:	cccccccd 	.word	0xcccccccd
 800780c:	16009600 	.word	0x16009600
 8007810:	58025880 	.word	0x58025880
 8007814:	aaaaaaab 	.word	0xaaaaaaab
 8007818:	400204b8 	.word	0x400204b8
 800781c:	4002040f 	.word	0x4002040f
 8007820:	10008200 	.word	0x10008200
 8007824:	40020880 	.word	0x40020880

08007828 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	b2db      	uxtb	r3, r3
 8007836:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d04a      	beq.n	80078d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2b08      	cmp	r3, #8
 8007842:	d847      	bhi.n	80078d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a25      	ldr	r2, [pc, #148]	; (80078e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d022      	beq.n	8007894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a24      	ldr	r2, [pc, #144]	; (80078e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d01d      	beq.n	8007894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a22      	ldr	r2, [pc, #136]	; (80078e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d018      	beq.n	8007894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a21      	ldr	r2, [pc, #132]	; (80078ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d013      	beq.n	8007894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a1f      	ldr	r2, [pc, #124]	; (80078f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d00e      	beq.n	8007894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a1e      	ldr	r2, [pc, #120]	; (80078f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d009      	beq.n	8007894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a1c      	ldr	r2, [pc, #112]	; (80078f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d004      	beq.n	8007894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a1b      	ldr	r2, [pc, #108]	; (80078fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d101      	bne.n	8007898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007894:	2301      	movs	r3, #1
 8007896:	e000      	b.n	800789a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007898:	2300      	movs	r3, #0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00a      	beq.n	80078b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	4b17      	ldr	r3, [pc, #92]	; (8007900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80078a2:	4413      	add	r3, r2
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	461a      	mov	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4a15      	ldr	r2, [pc, #84]	; (8007904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80078b0:	671a      	str	r2, [r3, #112]	; 0x70
 80078b2:	e009      	b.n	80078c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	4b14      	ldr	r3, [pc, #80]	; (8007908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80078b8:	4413      	add	r3, r2
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	461a      	mov	r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a11      	ldr	r2, [pc, #68]	; (800790c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80078c6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	3b01      	subs	r3, #1
 80078cc:	2201      	movs	r2, #1
 80078ce:	409a      	lsls	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80078d4:	bf00      	nop
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	58025408 	.word	0x58025408
 80078e4:	5802541c 	.word	0x5802541c
 80078e8:	58025430 	.word	0x58025430
 80078ec:	58025444 	.word	0x58025444
 80078f0:	58025458 	.word	0x58025458
 80078f4:	5802546c 	.word	0x5802546c
 80078f8:	58025480 	.word	0x58025480
 80078fc:	58025494 	.word	0x58025494
 8007900:	1600963f 	.word	0x1600963f
 8007904:	58025940 	.word	0x58025940
 8007908:	1000823f 	.word	0x1000823f
 800790c:	40020940 	.word	0x40020940

08007910 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007910:	b480      	push	{r7}
 8007912:	b089      	sub	sp, #36	; 0x24
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800791a:	2300      	movs	r3, #0
 800791c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800791e:	4b89      	ldr	r3, [pc, #548]	; (8007b44 <HAL_GPIO_Init+0x234>)
 8007920:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007922:	e194      	b.n	8007c4e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	2101      	movs	r1, #1
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	fa01 f303 	lsl.w	r3, r1, r3
 8007930:	4013      	ands	r3, r2
 8007932:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	2b00      	cmp	r3, #0
 8007938:	f000 8186 	beq.w	8007c48 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	f003 0303 	and.w	r3, r3, #3
 8007944:	2b01      	cmp	r3, #1
 8007946:	d005      	beq.n	8007954 <HAL_GPIO_Init+0x44>
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	f003 0303 	and.w	r3, r3, #3
 8007950:	2b02      	cmp	r3, #2
 8007952:	d130      	bne.n	80079b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	005b      	lsls	r3, r3, #1
 800795e:	2203      	movs	r2, #3
 8007960:	fa02 f303 	lsl.w	r3, r2, r3
 8007964:	43db      	mvns	r3, r3
 8007966:	69ba      	ldr	r2, [r7, #24]
 8007968:	4013      	ands	r3, r2
 800796a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	68da      	ldr	r2, [r3, #12]
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	005b      	lsls	r3, r3, #1
 8007974:	fa02 f303 	lsl.w	r3, r2, r3
 8007978:	69ba      	ldr	r2, [r7, #24]
 800797a:	4313      	orrs	r3, r2
 800797c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	69ba      	ldr	r2, [r7, #24]
 8007982:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800798a:	2201      	movs	r2, #1
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	fa02 f303 	lsl.w	r3, r2, r3
 8007992:	43db      	mvns	r3, r3
 8007994:	69ba      	ldr	r2, [r7, #24]
 8007996:	4013      	ands	r3, r2
 8007998:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	091b      	lsrs	r3, r3, #4
 80079a0:	f003 0201 	and.w	r2, r3, #1
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	fa02 f303 	lsl.w	r3, r2, r3
 80079aa:	69ba      	ldr	r2, [r7, #24]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	69ba      	ldr	r2, [r7, #24]
 80079b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	f003 0303 	and.w	r3, r3, #3
 80079be:	2b03      	cmp	r3, #3
 80079c0:	d017      	beq.n	80079f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	005b      	lsls	r3, r3, #1
 80079cc:	2203      	movs	r2, #3
 80079ce:	fa02 f303 	lsl.w	r3, r2, r3
 80079d2:	43db      	mvns	r3, r3
 80079d4:	69ba      	ldr	r2, [r7, #24]
 80079d6:	4013      	ands	r3, r2
 80079d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	689a      	ldr	r2, [r3, #8]
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	005b      	lsls	r3, r3, #1
 80079e2:	fa02 f303 	lsl.w	r3, r2, r3
 80079e6:	69ba      	ldr	r2, [r7, #24]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	69ba      	ldr	r2, [r7, #24]
 80079f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	f003 0303 	and.w	r3, r3, #3
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d123      	bne.n	8007a46 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	08da      	lsrs	r2, r3, #3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	3208      	adds	r2, #8
 8007a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	f003 0307 	and.w	r3, r3, #7
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	220f      	movs	r2, #15
 8007a16:	fa02 f303 	lsl.w	r3, r2, r3
 8007a1a:	43db      	mvns	r3, r3
 8007a1c:	69ba      	ldr	r2, [r7, #24]
 8007a1e:	4013      	ands	r3, r2
 8007a20:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	691a      	ldr	r2, [r3, #16]
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	f003 0307 	and.w	r3, r3, #7
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a32:	69ba      	ldr	r2, [r7, #24]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	08da      	lsrs	r2, r3, #3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	3208      	adds	r2, #8
 8007a40:	69b9      	ldr	r1, [r7, #24]
 8007a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	005b      	lsls	r3, r3, #1
 8007a50:	2203      	movs	r2, #3
 8007a52:	fa02 f303 	lsl.w	r3, r2, r3
 8007a56:	43db      	mvns	r3, r3
 8007a58:	69ba      	ldr	r2, [r7, #24]
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	f003 0203 	and.w	r2, r3, #3
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	005b      	lsls	r3, r3, #1
 8007a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a6e:	69ba      	ldr	r2, [r7, #24]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	69ba      	ldr	r2, [r7, #24]
 8007a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f000 80e0 	beq.w	8007c48 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a88:	4b2f      	ldr	r3, [pc, #188]	; (8007b48 <HAL_GPIO_Init+0x238>)
 8007a8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007a8e:	4a2e      	ldr	r2, [pc, #184]	; (8007b48 <HAL_GPIO_Init+0x238>)
 8007a90:	f043 0302 	orr.w	r3, r3, #2
 8007a94:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007a98:	4b2b      	ldr	r3, [pc, #172]	; (8007b48 <HAL_GPIO_Init+0x238>)
 8007a9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007a9e:	f003 0302 	and.w	r3, r3, #2
 8007aa2:	60fb      	str	r3, [r7, #12]
 8007aa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007aa6:	4a29      	ldr	r2, [pc, #164]	; (8007b4c <HAL_GPIO_Init+0x23c>)
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	089b      	lsrs	r3, r3, #2
 8007aac:	3302      	adds	r3, #2
 8007aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	f003 0303 	and.w	r3, r3, #3
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	220f      	movs	r2, #15
 8007abe:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac2:	43db      	mvns	r3, r3
 8007ac4:	69ba      	ldr	r2, [r7, #24]
 8007ac6:	4013      	ands	r3, r2
 8007ac8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4a20      	ldr	r2, [pc, #128]	; (8007b50 <HAL_GPIO_Init+0x240>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d052      	beq.n	8007b78 <HAL_GPIO_Init+0x268>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4a1f      	ldr	r2, [pc, #124]	; (8007b54 <HAL_GPIO_Init+0x244>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d031      	beq.n	8007b3e <HAL_GPIO_Init+0x22e>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4a1e      	ldr	r2, [pc, #120]	; (8007b58 <HAL_GPIO_Init+0x248>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d02b      	beq.n	8007b3a <HAL_GPIO_Init+0x22a>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a1d      	ldr	r2, [pc, #116]	; (8007b5c <HAL_GPIO_Init+0x24c>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d025      	beq.n	8007b36 <HAL_GPIO_Init+0x226>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a1c      	ldr	r2, [pc, #112]	; (8007b60 <HAL_GPIO_Init+0x250>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d01f      	beq.n	8007b32 <HAL_GPIO_Init+0x222>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a1b      	ldr	r2, [pc, #108]	; (8007b64 <HAL_GPIO_Init+0x254>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d019      	beq.n	8007b2e <HAL_GPIO_Init+0x21e>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a1a      	ldr	r2, [pc, #104]	; (8007b68 <HAL_GPIO_Init+0x258>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d013      	beq.n	8007b2a <HAL_GPIO_Init+0x21a>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a19      	ldr	r2, [pc, #100]	; (8007b6c <HAL_GPIO_Init+0x25c>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d00d      	beq.n	8007b26 <HAL_GPIO_Init+0x216>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a18      	ldr	r2, [pc, #96]	; (8007b70 <HAL_GPIO_Init+0x260>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d007      	beq.n	8007b22 <HAL_GPIO_Init+0x212>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a17      	ldr	r2, [pc, #92]	; (8007b74 <HAL_GPIO_Init+0x264>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d101      	bne.n	8007b1e <HAL_GPIO_Init+0x20e>
 8007b1a:	2309      	movs	r3, #9
 8007b1c:	e02d      	b.n	8007b7a <HAL_GPIO_Init+0x26a>
 8007b1e:	230a      	movs	r3, #10
 8007b20:	e02b      	b.n	8007b7a <HAL_GPIO_Init+0x26a>
 8007b22:	2308      	movs	r3, #8
 8007b24:	e029      	b.n	8007b7a <HAL_GPIO_Init+0x26a>
 8007b26:	2307      	movs	r3, #7
 8007b28:	e027      	b.n	8007b7a <HAL_GPIO_Init+0x26a>
 8007b2a:	2306      	movs	r3, #6
 8007b2c:	e025      	b.n	8007b7a <HAL_GPIO_Init+0x26a>
 8007b2e:	2305      	movs	r3, #5
 8007b30:	e023      	b.n	8007b7a <HAL_GPIO_Init+0x26a>
 8007b32:	2304      	movs	r3, #4
 8007b34:	e021      	b.n	8007b7a <HAL_GPIO_Init+0x26a>
 8007b36:	2303      	movs	r3, #3
 8007b38:	e01f      	b.n	8007b7a <HAL_GPIO_Init+0x26a>
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	e01d      	b.n	8007b7a <HAL_GPIO_Init+0x26a>
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e01b      	b.n	8007b7a <HAL_GPIO_Init+0x26a>
 8007b42:	bf00      	nop
 8007b44:	58000080 	.word	0x58000080
 8007b48:	58024400 	.word	0x58024400
 8007b4c:	58000400 	.word	0x58000400
 8007b50:	58020000 	.word	0x58020000
 8007b54:	58020400 	.word	0x58020400
 8007b58:	58020800 	.word	0x58020800
 8007b5c:	58020c00 	.word	0x58020c00
 8007b60:	58021000 	.word	0x58021000
 8007b64:	58021400 	.word	0x58021400
 8007b68:	58021800 	.word	0x58021800
 8007b6c:	58021c00 	.word	0x58021c00
 8007b70:	58022000 	.word	0x58022000
 8007b74:	58022400 	.word	0x58022400
 8007b78:	2300      	movs	r3, #0
 8007b7a:	69fa      	ldr	r2, [r7, #28]
 8007b7c:	f002 0203 	and.w	r2, r2, #3
 8007b80:	0092      	lsls	r2, r2, #2
 8007b82:	4093      	lsls	r3, r2
 8007b84:	69ba      	ldr	r2, [r7, #24]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007b8a:	4938      	ldr	r1, [pc, #224]	; (8007c6c <HAL_GPIO_Init+0x35c>)
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	089b      	lsrs	r3, r3, #2
 8007b90:	3302      	adds	r3, #2
 8007b92:	69ba      	ldr	r2, [r7, #24]
 8007b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	43db      	mvns	r3, r3
 8007ba4:	69ba      	ldr	r2, [r7, #24]
 8007ba6:	4013      	ands	r3, r2
 8007ba8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d003      	beq.n	8007bbe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007bb6:	69ba      	ldr	r2, [r7, #24]
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007bbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	43db      	mvns	r3, r3
 8007bd2:	69ba      	ldr	r2, [r7, #24]
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d003      	beq.n	8007bec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007be4:	69ba      	ldr	r2, [r7, #24]
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007bec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	43db      	mvns	r3, r3
 8007bfe:	69ba      	ldr	r2, [r7, #24]
 8007c00:	4013      	ands	r3, r2
 8007c02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d003      	beq.n	8007c18 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007c10:	69ba      	ldr	r2, [r7, #24]
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	69ba      	ldr	r2, [r7, #24]
 8007c1c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	43db      	mvns	r3, r3
 8007c28:	69ba      	ldr	r2, [r7, #24]
 8007c2a:	4013      	ands	r3, r2
 8007c2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d003      	beq.n	8007c42 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007c3a:	69ba      	ldr	r2, [r7, #24]
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	69ba      	ldr	r2, [r7, #24]
 8007c46:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	fa22 f303 	lsr.w	r3, r2, r3
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	f47f ae63 	bne.w	8007924 <HAL_GPIO_Init+0x14>
  }
}
 8007c5e:	bf00      	nop
 8007c60:	bf00      	nop
 8007c62:	3724      	adds	r7, #36	; 0x24
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr
 8007c6c:	58000400 	.word	0x58000400

08007c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	460b      	mov	r3, r1
 8007c7a:	807b      	strh	r3, [r7, #2]
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007c80:	787b      	ldrb	r3, [r7, #1]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d003      	beq.n	8007c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c86:	887a      	ldrh	r2, [r7, #2]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007c8c:	e003      	b.n	8007c96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007c8e:	887b      	ldrh	r3, [r7, #2]
 8007c90:	041a      	lsls	r2, r3, #16
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	619a      	str	r2, [r3, #24]
}
 8007c96:	bf00      	nop
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b085      	sub	sp, #20
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	460b      	mov	r3, r1
 8007cac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	695b      	ldr	r3, [r3, #20]
 8007cb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007cb4:	887a      	ldrh	r2, [r7, #2]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	4013      	ands	r3, r2
 8007cba:	041a      	lsls	r2, r3, #16
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	43d9      	mvns	r1, r3
 8007cc0:	887b      	ldrh	r3, [r7, #2]
 8007cc2:	400b      	ands	r3, r1
 8007cc4:	431a      	orrs	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	619a      	str	r2, [r3, #24]
}
 8007cca:	bf00      	nop
 8007ccc:	3714      	adds	r7, #20
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr
	...

08007cd8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007ce0:	4a08      	ldr	r2, [pc, #32]	; (8007d04 <HAL_HSEM_FastTake+0x2c>)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	3320      	adds	r3, #32
 8007ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cea:	4a07      	ldr	r2, [pc, #28]	; (8007d08 <HAL_HSEM_FastTake+0x30>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d101      	bne.n	8007cf4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	e000      	b.n	8007cf6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	370c      	adds	r7, #12
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	58026400 	.word	0x58026400
 8007d08:	80000300 	.word	0x80000300

08007d0c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8007d16:	4906      	ldr	r1, [pc, #24]	; (8007d30 <HAL_HSEM_Release+0x24>)
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr
 8007d30:	58026400 	.word	0x58026400

08007d34 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d36:	b08f      	sub	sp, #60	; 0x3c
 8007d38:	af0a      	add	r7, sp, #40	; 0x28
 8007d3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d101      	bne.n	8007d46 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e116      	b.n	8007f74 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d106      	bne.n	8007d66 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f00a fdbf 	bl	80128e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2203      	movs	r2, #3
 8007d6a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d102      	bne.n	8007d80 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f007 f83e 	bl	800ee06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	603b      	str	r3, [r7, #0]
 8007d90:	687e      	ldr	r6, [r7, #4]
 8007d92:	466d      	mov	r5, sp
 8007d94:	f106 0410 	add.w	r4, r6, #16
 8007d98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007da0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007da4:	e885 0003 	stmia.w	r5, {r0, r1}
 8007da8:	1d33      	adds	r3, r6, #4
 8007daa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007dac:	6838      	ldr	r0, [r7, #0]
 8007dae:	f006 ff09 	bl	800ebc4 <USB_CoreInit>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d005      	beq.n	8007dc4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2202      	movs	r2, #2
 8007dbc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e0d7      	b.n	8007f74 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2100      	movs	r1, #0
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f007 f82c 	bl	800ee28 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	73fb      	strb	r3, [r7, #15]
 8007dd4:	e04a      	b.n	8007e6c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007dd6:	7bfa      	ldrb	r2, [r7, #15]
 8007dd8:	6879      	ldr	r1, [r7, #4]
 8007dda:	4613      	mov	r3, r2
 8007ddc:	00db      	lsls	r3, r3, #3
 8007dde:	4413      	add	r3, r2
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	440b      	add	r3, r1
 8007de4:	333d      	adds	r3, #61	; 0x3d
 8007de6:	2201      	movs	r2, #1
 8007de8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007dea:	7bfa      	ldrb	r2, [r7, #15]
 8007dec:	6879      	ldr	r1, [r7, #4]
 8007dee:	4613      	mov	r3, r2
 8007df0:	00db      	lsls	r3, r3, #3
 8007df2:	4413      	add	r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	440b      	add	r3, r1
 8007df8:	333c      	adds	r3, #60	; 0x3c
 8007dfa:	7bfa      	ldrb	r2, [r7, #15]
 8007dfc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007dfe:	7bfa      	ldrb	r2, [r7, #15]
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
 8007e02:	b298      	uxth	r0, r3
 8007e04:	6879      	ldr	r1, [r7, #4]
 8007e06:	4613      	mov	r3, r2
 8007e08:	00db      	lsls	r3, r3, #3
 8007e0a:	4413      	add	r3, r2
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	440b      	add	r3, r1
 8007e10:	3344      	adds	r3, #68	; 0x44
 8007e12:	4602      	mov	r2, r0
 8007e14:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007e16:	7bfa      	ldrb	r2, [r7, #15]
 8007e18:	6879      	ldr	r1, [r7, #4]
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	00db      	lsls	r3, r3, #3
 8007e1e:	4413      	add	r3, r2
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	440b      	add	r3, r1
 8007e24:	3340      	adds	r3, #64	; 0x40
 8007e26:	2200      	movs	r2, #0
 8007e28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007e2a:	7bfa      	ldrb	r2, [r7, #15]
 8007e2c:	6879      	ldr	r1, [r7, #4]
 8007e2e:	4613      	mov	r3, r2
 8007e30:	00db      	lsls	r3, r3, #3
 8007e32:	4413      	add	r3, r2
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	440b      	add	r3, r1
 8007e38:	3348      	adds	r3, #72	; 0x48
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007e3e:	7bfa      	ldrb	r2, [r7, #15]
 8007e40:	6879      	ldr	r1, [r7, #4]
 8007e42:	4613      	mov	r3, r2
 8007e44:	00db      	lsls	r3, r3, #3
 8007e46:	4413      	add	r3, r2
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	440b      	add	r3, r1
 8007e4c:	334c      	adds	r3, #76	; 0x4c
 8007e4e:	2200      	movs	r2, #0
 8007e50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007e52:	7bfa      	ldrb	r2, [r7, #15]
 8007e54:	6879      	ldr	r1, [r7, #4]
 8007e56:	4613      	mov	r3, r2
 8007e58:	00db      	lsls	r3, r3, #3
 8007e5a:	4413      	add	r3, r2
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	440b      	add	r3, r1
 8007e60:	3354      	adds	r3, #84	; 0x54
 8007e62:	2200      	movs	r2, #0
 8007e64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e66:	7bfb      	ldrb	r3, [r7, #15]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	73fb      	strb	r3, [r7, #15]
 8007e6c:	7bfa      	ldrb	r2, [r7, #15]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d3af      	bcc.n	8007dd6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e76:	2300      	movs	r3, #0
 8007e78:	73fb      	strb	r3, [r7, #15]
 8007e7a:	e044      	b.n	8007f06 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007e7c:	7bfa      	ldrb	r2, [r7, #15]
 8007e7e:	6879      	ldr	r1, [r7, #4]
 8007e80:	4613      	mov	r3, r2
 8007e82:	00db      	lsls	r3, r3, #3
 8007e84:	4413      	add	r3, r2
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	440b      	add	r3, r1
 8007e8a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007e8e:	2200      	movs	r2, #0
 8007e90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007e92:	7bfa      	ldrb	r2, [r7, #15]
 8007e94:	6879      	ldr	r1, [r7, #4]
 8007e96:	4613      	mov	r3, r2
 8007e98:	00db      	lsls	r3, r3, #3
 8007e9a:	4413      	add	r3, r2
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	440b      	add	r3, r1
 8007ea0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8007ea4:	7bfa      	ldrb	r2, [r7, #15]
 8007ea6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007ea8:	7bfa      	ldrb	r2, [r7, #15]
 8007eaa:	6879      	ldr	r1, [r7, #4]
 8007eac:	4613      	mov	r3, r2
 8007eae:	00db      	lsls	r3, r3, #3
 8007eb0:	4413      	add	r3, r2
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	440b      	add	r3, r1
 8007eb6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007eba:	2200      	movs	r2, #0
 8007ebc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007ebe:	7bfa      	ldrb	r2, [r7, #15]
 8007ec0:	6879      	ldr	r1, [r7, #4]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	00db      	lsls	r3, r3, #3
 8007ec6:	4413      	add	r3, r2
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	440b      	add	r3, r1
 8007ecc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007ed4:	7bfa      	ldrb	r2, [r7, #15]
 8007ed6:	6879      	ldr	r1, [r7, #4]
 8007ed8:	4613      	mov	r3, r2
 8007eda:	00db      	lsls	r3, r3, #3
 8007edc:	4413      	add	r3, r2
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	440b      	add	r3, r1
 8007ee2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007eea:	7bfa      	ldrb	r2, [r7, #15]
 8007eec:	6879      	ldr	r1, [r7, #4]
 8007eee:	4613      	mov	r3, r2
 8007ef0:	00db      	lsls	r3, r3, #3
 8007ef2:	4413      	add	r3, r2
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	440b      	add	r3, r1
 8007ef8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007efc:	2200      	movs	r2, #0
 8007efe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f00:	7bfb      	ldrb	r3, [r7, #15]
 8007f02:	3301      	adds	r3, #1
 8007f04:	73fb      	strb	r3, [r7, #15]
 8007f06:	7bfa      	ldrb	r2, [r7, #15]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d3b5      	bcc.n	8007e7c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	603b      	str	r3, [r7, #0]
 8007f16:	687e      	ldr	r6, [r7, #4]
 8007f18:	466d      	mov	r5, sp
 8007f1a:	f106 0410 	add.w	r4, r6, #16
 8007f1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007f2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8007f2e:	1d33      	adds	r3, r6, #4
 8007f30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f32:	6838      	ldr	r0, [r7, #0]
 8007f34:	f006 ffc4 	bl	800eec0 <USB_DevInit>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d005      	beq.n	8007f4a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2202      	movs	r2, #2
 8007f42:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e014      	b.n	8007f74 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2201      	movs	r2, #1
 8007f56:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d102      	bne.n	8007f68 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f001 f98c 	bl	8009280 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f008 f912 	bl	8010196 <USB_DevDisconnect>

  return HAL_OK;
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3714      	adds	r7, #20
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f7c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d101      	bne.n	8007f98 <HAL_PCD_Start+0x1c>
 8007f94:	2302      	movs	r3, #2
 8007f96:	e020      	b.n	8007fda <HAL_PCD_Start+0x5e>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d109      	bne.n	8007fbc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d005      	beq.n	8007fbc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f006 ff0f 	bl	800ede4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f008 f8c2 	bl	8010154 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007fe2:	b590      	push	{r4, r7, lr}
 8007fe4:	b08d      	sub	sp, #52	; 0x34
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ff0:	6a3b      	ldr	r3, [r7, #32]
 8007ff2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f008 f980 	bl	80102fe <USB_GetMode>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	f040 84b7 	bne.w	8008974 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4618      	mov	r0, r3
 800800c:	f008 f8e4 	bl	80101d8 <USB_ReadInterrupts>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	f000 84ad 	beq.w	8008972 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	0a1b      	lsrs	r3, r3, #8
 8008022:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4618      	mov	r0, r3
 8008032:	f008 f8d1 	bl	80101d8 <USB_ReadInterrupts>
 8008036:	4603      	mov	r3, r0
 8008038:	f003 0302 	and.w	r3, r3, #2
 800803c:	2b02      	cmp	r3, #2
 800803e:	d107      	bne.n	8008050 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	695a      	ldr	r2, [r3, #20]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f002 0202 	and.w	r2, r2, #2
 800804e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4618      	mov	r0, r3
 8008056:	f008 f8bf 	bl	80101d8 <USB_ReadInterrupts>
 800805a:	4603      	mov	r3, r0
 800805c:	f003 0310 	and.w	r3, r3, #16
 8008060:	2b10      	cmp	r3, #16
 8008062:	d161      	bne.n	8008128 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	699a      	ldr	r2, [r3, #24]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f022 0210 	bic.w	r2, r2, #16
 8008072:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008074:	6a3b      	ldr	r3, [r7, #32]
 8008076:	6a1b      	ldr	r3, [r3, #32]
 8008078:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	f003 020f 	and.w	r2, r3, #15
 8008080:	4613      	mov	r3, r2
 8008082:	00db      	lsls	r3, r3, #3
 8008084:	4413      	add	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	4413      	add	r3, r2
 8008090:	3304      	adds	r3, #4
 8008092:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	0c5b      	lsrs	r3, r3, #17
 8008098:	f003 030f 	and.w	r3, r3, #15
 800809c:	2b02      	cmp	r3, #2
 800809e:	d124      	bne.n	80080ea <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80080a0:	69ba      	ldr	r2, [r7, #24]
 80080a2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80080a6:	4013      	ands	r3, r2
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d035      	beq.n	8008118 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	091b      	lsrs	r3, r3, #4
 80080b4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80080b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	461a      	mov	r2, r3
 80080be:	6a38      	ldr	r0, [r7, #32]
 80080c0:	f007 fef6 	bl	800feb0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	691a      	ldr	r2, [r3, #16]
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	091b      	lsrs	r3, r3, #4
 80080cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080d0:	441a      	add	r2, r3
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	6a1a      	ldr	r2, [r3, #32]
 80080da:	69bb      	ldr	r3, [r7, #24]
 80080dc:	091b      	lsrs	r3, r3, #4
 80080de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080e2:	441a      	add	r2, r3
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	621a      	str	r2, [r3, #32]
 80080e8:	e016      	b.n	8008118 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80080ea:	69bb      	ldr	r3, [r7, #24]
 80080ec:	0c5b      	lsrs	r3, r3, #17
 80080ee:	f003 030f 	and.w	r3, r3, #15
 80080f2:	2b06      	cmp	r3, #6
 80080f4:	d110      	bne.n	8008118 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80080fc:	2208      	movs	r2, #8
 80080fe:	4619      	mov	r1, r3
 8008100:	6a38      	ldr	r0, [r7, #32]
 8008102:	f007 fed5 	bl	800feb0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	6a1a      	ldr	r2, [r3, #32]
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	091b      	lsrs	r3, r3, #4
 800810e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008112:	441a      	add	r2, r3
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	699a      	ldr	r2, [r3, #24]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f042 0210 	orr.w	r2, r2, #16
 8008126:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4618      	mov	r0, r3
 800812e:	f008 f853 	bl	80101d8 <USB_ReadInterrupts>
 8008132:	4603      	mov	r3, r0
 8008134:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008138:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800813c:	f040 80a7 	bne.w	800828e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008140:	2300      	movs	r3, #0
 8008142:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4618      	mov	r0, r3
 800814a:	f008 f858 	bl	80101fe <USB_ReadDevAllOutEpInterrupt>
 800814e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008150:	e099      	b.n	8008286 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008154:	f003 0301 	and.w	r3, r3, #1
 8008158:	2b00      	cmp	r3, #0
 800815a:	f000 808e 	beq.w	800827a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008164:	b2d2      	uxtb	r2, r2
 8008166:	4611      	mov	r1, r2
 8008168:	4618      	mov	r0, r3
 800816a:	f008 f87c 	bl	8010266 <USB_ReadDevOutEPInterrupt>
 800816e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	f003 0301 	and.w	r3, r3, #1
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00c      	beq.n	8008194 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800817a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817c:	015a      	lsls	r2, r3, #5
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	4413      	add	r3, r2
 8008182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008186:	461a      	mov	r2, r3
 8008188:	2301      	movs	r3, #1
 800818a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800818c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fef0 	bl	8008f74 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	f003 0308 	and.w	r3, r3, #8
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00c      	beq.n	80081b8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800819e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a0:	015a      	lsls	r2, r3, #5
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	4413      	add	r3, r2
 80081a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081aa:	461a      	mov	r2, r3
 80081ac:	2308      	movs	r3, #8
 80081ae:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80081b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 ffc6 	bl	8009144 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	f003 0310 	and.w	r3, r3, #16
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d008      	beq.n	80081d4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80081c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c4:	015a      	lsls	r2, r3, #5
 80081c6:	69fb      	ldr	r3, [r7, #28]
 80081c8:	4413      	add	r3, r2
 80081ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ce:	461a      	mov	r2, r3
 80081d0:	2310      	movs	r3, #16
 80081d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	f003 0302 	and.w	r3, r3, #2
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d030      	beq.n	8008240 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80081de:	6a3b      	ldr	r3, [r7, #32]
 80081e0:	695b      	ldr	r3, [r3, #20]
 80081e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081e6:	2b80      	cmp	r3, #128	; 0x80
 80081e8:	d109      	bne.n	80081fe <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	69fa      	ldr	r2, [r7, #28]
 80081f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80081fc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80081fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008200:	4613      	mov	r3, r2
 8008202:	00db      	lsls	r3, r3, #3
 8008204:	4413      	add	r3, r2
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	4413      	add	r3, r2
 8008210:	3304      	adds	r3, #4
 8008212:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	78db      	ldrb	r3, [r3, #3]
 8008218:	2b01      	cmp	r3, #1
 800821a:	d108      	bne.n	800822e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	2200      	movs	r2, #0
 8008220:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008224:	b2db      	uxtb	r3, r3
 8008226:	4619      	mov	r1, r3
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f00a fc9d 	bl	8012b68 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008230:	015a      	lsls	r2, r3, #5
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	4413      	add	r3, r2
 8008236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800823a:	461a      	mov	r2, r3
 800823c:	2302      	movs	r3, #2
 800823e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	f003 0320 	and.w	r3, r3, #32
 8008246:	2b00      	cmp	r3, #0
 8008248:	d008      	beq.n	800825c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800824a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824c:	015a      	lsls	r2, r3, #5
 800824e:	69fb      	ldr	r3, [r7, #28]
 8008250:	4413      	add	r3, r2
 8008252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008256:	461a      	mov	r2, r3
 8008258:	2320      	movs	r3, #32
 800825a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008262:	2b00      	cmp	r3, #0
 8008264:	d009      	beq.n	800827a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008268:	015a      	lsls	r2, r3, #5
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	4413      	add	r3, r2
 800826e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008272:	461a      	mov	r2, r3
 8008274:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008278:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800827a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827c:	3301      	adds	r3, #1
 800827e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008282:	085b      	lsrs	r3, r3, #1
 8008284:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008288:	2b00      	cmp	r3, #0
 800828a:	f47f af62 	bne.w	8008152 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4618      	mov	r0, r3
 8008294:	f007 ffa0 	bl	80101d8 <USB_ReadInterrupts>
 8008298:	4603      	mov	r3, r0
 800829a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800829e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80082a2:	f040 80db 	bne.w	800845c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4618      	mov	r0, r3
 80082ac:	f007 ffc1 	bl	8010232 <USB_ReadDevAllInEpInterrupt>
 80082b0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80082b2:	2300      	movs	r3, #0
 80082b4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80082b6:	e0cd      	b.n	8008454 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80082b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ba:	f003 0301 	and.w	r3, r3, #1
 80082be:	2b00      	cmp	r3, #0
 80082c0:	f000 80c2 	beq.w	8008448 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082ca:	b2d2      	uxtb	r2, r2
 80082cc:	4611      	mov	r1, r2
 80082ce:	4618      	mov	r0, r3
 80082d0:	f007 ffe7 	bl	80102a2 <USB_ReadDevInEPInterrupt>
 80082d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	f003 0301 	and.w	r3, r3, #1
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d057      	beq.n	8008390 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80082e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e2:	f003 030f 	and.w	r3, r3, #15
 80082e6:	2201      	movs	r2, #1
 80082e8:	fa02 f303 	lsl.w	r3, r2, r3
 80082ec:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	43db      	mvns	r3, r3
 80082fa:	69f9      	ldr	r1, [r7, #28]
 80082fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008300:	4013      	ands	r3, r2
 8008302:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008306:	015a      	lsls	r2, r3, #5
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	4413      	add	r3, r2
 800830c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008310:	461a      	mov	r2, r3
 8008312:	2301      	movs	r3, #1
 8008314:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	691b      	ldr	r3, [r3, #16]
 800831a:	2b01      	cmp	r3, #1
 800831c:	d132      	bne.n	8008384 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800831e:	6879      	ldr	r1, [r7, #4]
 8008320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008322:	4613      	mov	r3, r2
 8008324:	00db      	lsls	r3, r3, #3
 8008326:	4413      	add	r3, r2
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	440b      	add	r3, r1
 800832c:	334c      	adds	r3, #76	; 0x4c
 800832e:	6819      	ldr	r1, [r3, #0]
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008334:	4613      	mov	r3, r2
 8008336:	00db      	lsls	r3, r3, #3
 8008338:	4413      	add	r3, r2
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	4403      	add	r3, r0
 800833e:	3348      	adds	r3, #72	; 0x48
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4419      	add	r1, r3
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008348:	4613      	mov	r3, r2
 800834a:	00db      	lsls	r3, r3, #3
 800834c:	4413      	add	r3, r2
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	4403      	add	r3, r0
 8008352:	334c      	adds	r3, #76	; 0x4c
 8008354:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008358:	2b00      	cmp	r3, #0
 800835a:	d113      	bne.n	8008384 <HAL_PCD_IRQHandler+0x3a2>
 800835c:	6879      	ldr	r1, [r7, #4]
 800835e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008360:	4613      	mov	r3, r2
 8008362:	00db      	lsls	r3, r3, #3
 8008364:	4413      	add	r3, r2
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	440b      	add	r3, r1
 800836a:	3354      	adds	r3, #84	; 0x54
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d108      	bne.n	8008384 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6818      	ldr	r0, [r3, #0]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800837c:	461a      	mov	r2, r3
 800837e:	2101      	movs	r1, #1
 8008380:	f007 fff0 	bl	8010364 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008386:	b2db      	uxtb	r3, r3
 8008388:	4619      	mov	r1, r3
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f00a fb67 	bl	8012a5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	f003 0308 	and.w	r3, r3, #8
 8008396:	2b00      	cmp	r3, #0
 8008398:	d008      	beq.n	80083ac <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800839a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839c:	015a      	lsls	r2, r3, #5
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	4413      	add	r3, r2
 80083a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083a6:	461a      	mov	r2, r3
 80083a8:	2308      	movs	r3, #8
 80083aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	f003 0310 	and.w	r3, r3, #16
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d008      	beq.n	80083c8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80083b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b8:	015a      	lsls	r2, r3, #5
 80083ba:	69fb      	ldr	r3, [r7, #28]
 80083bc:	4413      	add	r3, r2
 80083be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083c2:	461a      	mov	r2, r3
 80083c4:	2310      	movs	r3, #16
 80083c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d008      	beq.n	80083e4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80083d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d4:	015a      	lsls	r2, r3, #5
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	4413      	add	r3, r2
 80083da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083de:	461a      	mov	r2, r3
 80083e0:	2340      	movs	r3, #64	; 0x40
 80083e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	f003 0302 	and.w	r3, r3, #2
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d023      	beq.n	8008436 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80083ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083f0:	6a38      	ldr	r0, [r7, #32]
 80083f2:	f006 fec3 	bl	800f17c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80083f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083f8:	4613      	mov	r3, r2
 80083fa:	00db      	lsls	r3, r3, #3
 80083fc:	4413      	add	r3, r2
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	3338      	adds	r3, #56	; 0x38
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	4413      	add	r3, r2
 8008406:	3304      	adds	r3, #4
 8008408:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	78db      	ldrb	r3, [r3, #3]
 800840e:	2b01      	cmp	r3, #1
 8008410:	d108      	bne.n	8008424 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	2200      	movs	r2, #0
 8008416:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841a:	b2db      	uxtb	r3, r3
 800841c:	4619      	mov	r1, r3
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f00a fbb4 	bl	8012b8c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008426:	015a      	lsls	r2, r3, #5
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	4413      	add	r3, r2
 800842c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008430:	461a      	mov	r2, r3
 8008432:	2302      	movs	r3, #2
 8008434:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800843c:	2b00      	cmp	r3, #0
 800843e:	d003      	beq.n	8008448 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008440:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 fd08 	bl	8008e58 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844a:	3301      	adds	r3, #1
 800844c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800844e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008450:	085b      	lsrs	r3, r3, #1
 8008452:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008456:	2b00      	cmp	r3, #0
 8008458:	f47f af2e 	bne.w	80082b8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4618      	mov	r0, r3
 8008462:	f007 feb9 	bl	80101d8 <USB_ReadInterrupts>
 8008466:	4603      	mov	r3, r0
 8008468:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800846c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008470:	d122      	bne.n	80084b8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008472:	69fb      	ldr	r3, [r7, #28]
 8008474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	69fa      	ldr	r2, [r7, #28]
 800847c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008480:	f023 0301 	bic.w	r3, r3, #1
 8008484:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800848c:	2b01      	cmp	r3, #1
 800848e:	d108      	bne.n	80084a2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008498:	2100      	movs	r1, #0
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 ff14 	bl	80092c8 <HAL_PCDEx_LPM_Callback>
 80084a0:	e002      	b.n	80084a8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f00a fb52 	bl	8012b4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	695a      	ldr	r2, [r3, #20]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80084b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4618      	mov	r0, r3
 80084be:	f007 fe8b 	bl	80101d8 <USB_ReadInterrupts>
 80084c2:	4603      	mov	r3, r0
 80084c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084cc:	d112      	bne.n	80084f4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	f003 0301 	and.w	r3, r3, #1
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d102      	bne.n	80084e4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f00a fb0e 	bl	8012b00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	695a      	ldr	r2, [r3, #20]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80084f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4618      	mov	r0, r3
 80084fa:	f007 fe6d 	bl	80101d8 <USB_ReadInterrupts>
 80084fe:	4603      	mov	r3, r0
 8008500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008504:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008508:	d121      	bne.n	800854e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	695a      	ldr	r2, [r3, #20]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008518:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008520:	2b00      	cmp	r3, #0
 8008522:	d111      	bne.n	8008548 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008532:	089b      	lsrs	r3, r3, #2
 8008534:	f003 020f 	and.w	r2, r3, #15
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800853e:	2101      	movs	r1, #1
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 fec1 	bl	80092c8 <HAL_PCDEx_LPM_Callback>
 8008546:	e002      	b.n	800854e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f00a fad9 	bl	8012b00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4618      	mov	r0, r3
 8008554:	f007 fe40 	bl	80101d8 <USB_ReadInterrupts>
 8008558:	4603      	mov	r3, r0
 800855a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800855e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008562:	f040 80b7 	bne.w	80086d4 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	69fa      	ldr	r2, [r7, #28]
 8008570:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008574:	f023 0301 	bic.w	r3, r3, #1
 8008578:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2110      	movs	r1, #16
 8008580:	4618      	mov	r0, r3
 8008582:	f006 fdfb 	bl	800f17c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008586:	2300      	movs	r3, #0
 8008588:	62fb      	str	r3, [r7, #44]	; 0x2c
 800858a:	e046      	b.n	800861a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800858c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858e:	015a      	lsls	r2, r3, #5
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	4413      	add	r3, r2
 8008594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008598:	461a      	mov	r2, r3
 800859a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800859e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80085a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a2:	015a      	lsls	r2, r3, #5
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	4413      	add	r3, r2
 80085a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085b0:	0151      	lsls	r1, r2, #5
 80085b2:	69fa      	ldr	r2, [r7, #28]
 80085b4:	440a      	add	r2, r1
 80085b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80085be:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80085c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c2:	015a      	lsls	r2, r3, #5
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	4413      	add	r3, r2
 80085c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085cc:	461a      	mov	r2, r3
 80085ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80085d2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80085d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d6:	015a      	lsls	r2, r3, #5
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	4413      	add	r3, r2
 80085dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085e4:	0151      	lsls	r1, r2, #5
 80085e6:	69fa      	ldr	r2, [r7, #28]
 80085e8:	440a      	add	r2, r1
 80085ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80085f2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80085f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f6:	015a      	lsls	r2, r3, #5
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	4413      	add	r3, r2
 80085fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008604:	0151      	lsls	r1, r2, #5
 8008606:	69fa      	ldr	r2, [r7, #28]
 8008608:	440a      	add	r2, r1
 800860a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800860e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008612:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008616:	3301      	adds	r3, #1
 8008618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008620:	429a      	cmp	r2, r3
 8008622:	d3b3      	bcc.n	800858c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008624:	69fb      	ldr	r3, [r7, #28]
 8008626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800862a:	69db      	ldr	r3, [r3, #28]
 800862c:	69fa      	ldr	r2, [r7, #28]
 800862e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008632:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008636:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863c:	2b00      	cmp	r3, #0
 800863e:	d016      	beq.n	800866e <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008646:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800864a:	69fa      	ldr	r2, [r7, #28]
 800864c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008650:	f043 030b 	orr.w	r3, r3, #11
 8008654:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800865e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008660:	69fa      	ldr	r2, [r7, #28]
 8008662:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008666:	f043 030b 	orr.w	r3, r3, #11
 800866a:	6453      	str	r3, [r2, #68]	; 0x44
 800866c:	e015      	b.n	800869a <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008674:	695a      	ldr	r2, [r3, #20]
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800867c:	4619      	mov	r1, r3
 800867e:	f242 032b 	movw	r3, #8235	; 0x202b
 8008682:	4313      	orrs	r3, r2
 8008684:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	69fa      	ldr	r2, [r7, #28]
 8008690:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008694:	f043 030b 	orr.w	r3, r3, #11
 8008698:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	69fa      	ldr	r2, [r7, #28]
 80086a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086a8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80086ac:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6818      	ldr	r0, [r3, #0]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80086be:	461a      	mov	r2, r3
 80086c0:	f007 fe50 	bl	8010364 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	695a      	ldr	r2, [r3, #20]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80086d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4618      	mov	r0, r3
 80086da:	f007 fd7d 	bl	80101d8 <USB_ReadInterrupts>
 80086de:	4603      	mov	r3, r0
 80086e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086e8:	d124      	bne.n	8008734 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4618      	mov	r0, r3
 80086f0:	f007 fe14 	bl	801031c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4618      	mov	r0, r3
 80086fa:	f006 fdbc 	bl	800f276 <USB_GetDevSpeed>
 80086fe:	4603      	mov	r3, r0
 8008700:	461a      	mov	r2, r3
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681c      	ldr	r4, [r3, #0]
 800870a:	f001 fe1b 	bl	800a344 <HAL_RCC_GetHCLKFreq>
 800870e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008714:	b2db      	uxtb	r3, r3
 8008716:	461a      	mov	r2, r3
 8008718:	4620      	mov	r0, r4
 800871a:	f006 fac1 	bl	800eca0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f00a f9c5 	bl	8012aae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	695a      	ldr	r2, [r3, #20]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008732:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4618      	mov	r0, r3
 800873a:	f007 fd4d 	bl	80101d8 <USB_ReadInterrupts>
 800873e:	4603      	mov	r3, r0
 8008740:	f003 0308 	and.w	r3, r3, #8
 8008744:	2b08      	cmp	r3, #8
 8008746:	d10a      	bne.n	800875e <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f00a f9a2 	bl	8012a92 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	695a      	ldr	r2, [r3, #20]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f002 0208 	and.w	r2, r2, #8
 800875c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4618      	mov	r0, r3
 8008764:	f007 fd38 	bl	80101d8 <USB_ReadInterrupts>
 8008768:	4603      	mov	r3, r0
 800876a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800876e:	2b80      	cmp	r3, #128	; 0x80
 8008770:	d122      	bne.n	80087b8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008772:	6a3b      	ldr	r3, [r7, #32]
 8008774:	699b      	ldr	r3, [r3, #24]
 8008776:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800877a:	6a3b      	ldr	r3, [r7, #32]
 800877c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800877e:	2301      	movs	r3, #1
 8008780:	627b      	str	r3, [r7, #36]	; 0x24
 8008782:	e014      	b.n	80087ae <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008784:	6879      	ldr	r1, [r7, #4]
 8008786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008788:	4613      	mov	r3, r2
 800878a:	00db      	lsls	r3, r3, #3
 800878c:	4413      	add	r3, r2
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	440b      	add	r3, r1
 8008792:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	2b01      	cmp	r3, #1
 800879a:	d105      	bne.n	80087a8 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800879c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	4619      	mov	r1, r3
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 fb27 	bl	8008df6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80087a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087aa:	3301      	adds	r3, #1
 80087ac:	627b      	str	r3, [r7, #36]	; 0x24
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d3e5      	bcc.n	8008784 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4618      	mov	r0, r3
 80087be:	f007 fd0b 	bl	80101d8 <USB_ReadInterrupts>
 80087c2:	4603      	mov	r3, r0
 80087c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087cc:	d13b      	bne.n	8008846 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80087ce:	2301      	movs	r3, #1
 80087d0:	627b      	str	r3, [r7, #36]	; 0x24
 80087d2:	e02b      	b.n	800882c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80087d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d6:	015a      	lsls	r2, r3, #5
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	4413      	add	r3, r2
 80087dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80087e4:	6879      	ldr	r1, [r7, #4]
 80087e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087e8:	4613      	mov	r3, r2
 80087ea:	00db      	lsls	r3, r3, #3
 80087ec:	4413      	add	r3, r2
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	440b      	add	r3, r1
 80087f2:	3340      	adds	r3, #64	; 0x40
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d115      	bne.n	8008826 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80087fa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	da12      	bge.n	8008826 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008800:	6879      	ldr	r1, [r7, #4]
 8008802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008804:	4613      	mov	r3, r2
 8008806:	00db      	lsls	r3, r3, #3
 8008808:	4413      	add	r3, r2
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	440b      	add	r3, r1
 800880e:	333f      	adds	r3, #63	; 0x3f
 8008810:	2201      	movs	r2, #1
 8008812:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008816:	b2db      	uxtb	r3, r3
 8008818:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800881c:	b2db      	uxtb	r3, r3
 800881e:	4619      	mov	r1, r3
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 fae8 	bl	8008df6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008828:	3301      	adds	r3, #1
 800882a:	627b      	str	r3, [r7, #36]	; 0x24
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008832:	429a      	cmp	r2, r3
 8008834:	d3ce      	bcc.n	80087d4 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	695a      	ldr	r2, [r3, #20]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008844:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4618      	mov	r0, r3
 800884c:	f007 fcc4 	bl	80101d8 <USB_ReadInterrupts>
 8008850:	4603      	mov	r3, r0
 8008852:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008856:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800885a:	d155      	bne.n	8008908 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800885c:	2301      	movs	r3, #1
 800885e:	627b      	str	r3, [r7, #36]	; 0x24
 8008860:	e045      	b.n	80088ee <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008864:	015a      	lsls	r2, r3, #5
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	4413      	add	r3, r2
 800886a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008872:	6879      	ldr	r1, [r7, #4]
 8008874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008876:	4613      	mov	r3, r2
 8008878:	00db      	lsls	r3, r3, #3
 800887a:	4413      	add	r3, r2
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	440b      	add	r3, r1
 8008880:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	2b01      	cmp	r3, #1
 8008888:	d12e      	bne.n	80088e8 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800888a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800888c:	2b00      	cmp	r3, #0
 800888e:	da2b      	bge.n	80088e8 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800889c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d121      	bne.n	80088e8 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80088a4:	6879      	ldr	r1, [r7, #4]
 80088a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088a8:	4613      	mov	r3, r2
 80088aa:	00db      	lsls	r3, r3, #3
 80088ac:	4413      	add	r3, r2
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	440b      	add	r3, r1
 80088b2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80088b6:	2201      	movs	r2, #1
 80088b8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80088ba:	6a3b      	ldr	r3, [r7, #32]
 80088bc:	699b      	ldr	r3, [r3, #24]
 80088be:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80088c2:	6a3b      	ldr	r3, [r7, #32]
 80088c4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80088c6:	6a3b      	ldr	r3, [r7, #32]
 80088c8:	695b      	ldr	r3, [r3, #20]
 80088ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d10a      	bne.n	80088e8 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	69fa      	ldr	r2, [r7, #28]
 80088dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80088e4:	6053      	str	r3, [r2, #4]
            break;
 80088e6:	e007      	b.n	80088f8 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80088e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ea:	3301      	adds	r3, #1
 80088ec:	627b      	str	r3, [r7, #36]	; 0x24
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d3b4      	bcc.n	8008862 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	695a      	ldr	r2, [r3, #20]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008906:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4618      	mov	r0, r3
 800890e:	f007 fc63 	bl	80101d8 <USB_ReadInterrupts>
 8008912:	4603      	mov	r3, r0
 8008914:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800891c:	d10a      	bne.n	8008934 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f00a f946 	bl	8012bb0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	695a      	ldr	r2, [r3, #20]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008932:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4618      	mov	r0, r3
 800893a:	f007 fc4d 	bl	80101d8 <USB_ReadInterrupts>
 800893e:	4603      	mov	r3, r0
 8008940:	f003 0304 	and.w	r3, r3, #4
 8008944:	2b04      	cmp	r3, #4
 8008946:	d115      	bne.n	8008974 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	f003 0304 	and.w	r3, r3, #4
 8008956:	2b00      	cmp	r3, #0
 8008958:	d002      	beq.n	8008960 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f00a f936 	bl	8012bcc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	6859      	ldr	r1, [r3, #4]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	69ba      	ldr	r2, [r7, #24]
 800896c:	430a      	orrs	r2, r1
 800896e:	605a      	str	r2, [r3, #4]
 8008970:	e000      	b.n	8008974 <HAL_PCD_IRQHandler+0x992>
      return;
 8008972:	bf00      	nop
    }
  }
}
 8008974:	3734      	adds	r7, #52	; 0x34
 8008976:	46bd      	mov	sp, r7
 8008978:	bd90      	pop	{r4, r7, pc}

0800897a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800897a:	b580      	push	{r7, lr}
 800897c:	b082      	sub	sp, #8
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
 8008982:	460b      	mov	r3, r1
 8008984:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800898c:	2b01      	cmp	r3, #1
 800898e:	d101      	bne.n	8008994 <HAL_PCD_SetAddress+0x1a>
 8008990:	2302      	movs	r3, #2
 8008992:	e013      	b.n	80089bc <HAL_PCD_SetAddress+0x42>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2201      	movs	r2, #1
 8008998:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	78fa      	ldrb	r2, [r7, #3]
 80089a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	78fa      	ldrb	r2, [r7, #3]
 80089aa:	4611      	mov	r1, r2
 80089ac:	4618      	mov	r0, r3
 80089ae:	f007 fbab 	bl	8010108 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	4608      	mov	r0, r1
 80089ce:	4611      	mov	r1, r2
 80089d0:	461a      	mov	r2, r3
 80089d2:	4603      	mov	r3, r0
 80089d4:	70fb      	strb	r3, [r7, #3]
 80089d6:	460b      	mov	r3, r1
 80089d8:	803b      	strh	r3, [r7, #0]
 80089da:	4613      	mov	r3, r2
 80089dc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80089de:	2300      	movs	r3, #0
 80089e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80089e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	da0f      	bge.n	8008a0a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80089ea:	78fb      	ldrb	r3, [r7, #3]
 80089ec:	f003 020f 	and.w	r2, r3, #15
 80089f0:	4613      	mov	r3, r2
 80089f2:	00db      	lsls	r3, r3, #3
 80089f4:	4413      	add	r3, r2
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	3338      	adds	r3, #56	; 0x38
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	4413      	add	r3, r2
 80089fe:	3304      	adds	r3, #4
 8008a00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2201      	movs	r2, #1
 8008a06:	705a      	strb	r2, [r3, #1]
 8008a08:	e00f      	b.n	8008a2a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008a0a:	78fb      	ldrb	r3, [r7, #3]
 8008a0c:	f003 020f 	and.w	r2, r3, #15
 8008a10:	4613      	mov	r3, r2
 8008a12:	00db      	lsls	r3, r3, #3
 8008a14:	4413      	add	r3, r2
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	4413      	add	r3, r2
 8008a20:	3304      	adds	r3, #4
 8008a22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2200      	movs	r2, #0
 8008a28:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008a2a:	78fb      	ldrb	r3, [r7, #3]
 8008a2c:	f003 030f 	and.w	r3, r3, #15
 8008a30:	b2da      	uxtb	r2, r3
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008a36:	883a      	ldrh	r2, [r7, #0]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	78ba      	ldrb	r2, [r7, #2]
 8008a40:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	785b      	ldrb	r3, [r3, #1]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d004      	beq.n	8008a54 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008a54:	78bb      	ldrb	r3, [r7, #2]
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d102      	bne.n	8008a60 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d101      	bne.n	8008a6e <HAL_PCD_EP_Open+0xaa>
 8008a6a:	2302      	movs	r3, #2
 8008a6c:	e00e      	b.n	8008a8c <HAL_PCD_EP_Open+0xc8>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2201      	movs	r2, #1
 8008a72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	68f9      	ldr	r1, [r7, #12]
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f006 fc1f 	bl	800f2c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8008a8a:	7afb      	ldrb	r3, [r7, #11]
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3710      	adds	r7, #16
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008aa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	da0f      	bge.n	8008ac8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008aa8:	78fb      	ldrb	r3, [r7, #3]
 8008aaa:	f003 020f 	and.w	r2, r3, #15
 8008aae:	4613      	mov	r3, r2
 8008ab0:	00db      	lsls	r3, r3, #3
 8008ab2:	4413      	add	r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	3338      	adds	r3, #56	; 0x38
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	4413      	add	r3, r2
 8008abc:	3304      	adds	r3, #4
 8008abe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	705a      	strb	r2, [r3, #1]
 8008ac6:	e00f      	b.n	8008ae8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008ac8:	78fb      	ldrb	r3, [r7, #3]
 8008aca:	f003 020f 	and.w	r2, r3, #15
 8008ace:	4613      	mov	r3, r2
 8008ad0:	00db      	lsls	r3, r3, #3
 8008ad2:	4413      	add	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	4413      	add	r3, r2
 8008ade:	3304      	adds	r3, #4
 8008ae0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008ae8:	78fb      	ldrb	r3, [r7, #3]
 8008aea:	f003 030f 	and.w	r3, r3, #15
 8008aee:	b2da      	uxtb	r2, r3
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d101      	bne.n	8008b02 <HAL_PCD_EP_Close+0x6e>
 8008afe:	2302      	movs	r3, #2
 8008b00:	e00e      	b.n	8008b20 <HAL_PCD_EP_Close+0x8c>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2201      	movs	r2, #1
 8008b06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	68f9      	ldr	r1, [r7, #12]
 8008b10:	4618      	mov	r0, r3
 8008b12:	f006 fc5d 	bl	800f3d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b086      	sub	sp, #24
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	607a      	str	r2, [r7, #4]
 8008b32:	603b      	str	r3, [r7, #0]
 8008b34:	460b      	mov	r3, r1
 8008b36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b38:	7afb      	ldrb	r3, [r7, #11]
 8008b3a:	f003 020f 	and.w	r2, r3, #15
 8008b3e:	4613      	mov	r3, r2
 8008b40:	00db      	lsls	r3, r3, #3
 8008b42:	4413      	add	r3, r2
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	3304      	adds	r3, #4
 8008b50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	683a      	ldr	r2, [r7, #0]
 8008b5c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	2200      	movs	r2, #0
 8008b62:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	2200      	movs	r2, #0
 8008b68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008b6a:	7afb      	ldrb	r3, [r7, #11]
 8008b6c:	f003 030f 	and.w	r3, r3, #15
 8008b70:	b2da      	uxtb	r2, r3
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	691b      	ldr	r3, [r3, #16]
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d102      	bne.n	8008b84 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008b84:	7afb      	ldrb	r3, [r7, #11]
 8008b86:	f003 030f 	and.w	r3, r3, #15
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d109      	bne.n	8008ba2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6818      	ldr	r0, [r3, #0]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	691b      	ldr	r3, [r3, #16]
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	461a      	mov	r2, r3
 8008b9a:	6979      	ldr	r1, [r7, #20]
 8008b9c:	f006 ff44 	bl	800fa28 <USB_EP0StartXfer>
 8008ba0:	e008      	b.n	8008bb4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	6818      	ldr	r0, [r3, #0]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	691b      	ldr	r3, [r3, #16]
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	461a      	mov	r2, r3
 8008bae:	6979      	ldr	r1, [r7, #20]
 8008bb0:	f006 fcea 	bl	800f588 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3718      	adds	r7, #24
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b083      	sub	sp, #12
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008bca:	78fb      	ldrb	r3, [r7, #3]
 8008bcc:	f003 020f 	and.w	r2, r3, #15
 8008bd0:	6879      	ldr	r1, [r7, #4]
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	00db      	lsls	r3, r3, #3
 8008bd6:	4413      	add	r3, r2
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	440b      	add	r3, r1
 8008bdc:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8008be0:	681b      	ldr	r3, [r3, #0]
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	370c      	adds	r7, #12
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr

08008bee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b086      	sub	sp, #24
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	60f8      	str	r0, [r7, #12]
 8008bf6:	607a      	str	r2, [r7, #4]
 8008bf8:	603b      	str	r3, [r7, #0]
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008bfe:	7afb      	ldrb	r3, [r7, #11]
 8008c00:	f003 020f 	and.w	r2, r3, #15
 8008c04:	4613      	mov	r3, r2
 8008c06:	00db      	lsls	r3, r3, #3
 8008c08:	4413      	add	r3, r2
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	3338      	adds	r3, #56	; 0x38
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	4413      	add	r3, r2
 8008c12:	3304      	adds	r3, #4
 8008c14:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	683a      	ldr	r2, [r7, #0]
 8008c20:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	2200      	movs	r2, #0
 8008c26:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c2e:	7afb      	ldrb	r3, [r7, #11]
 8008c30:	f003 030f 	and.w	r3, r3, #15
 8008c34:	b2da      	uxtb	r2, r3
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d102      	bne.n	8008c48 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008c48:	7afb      	ldrb	r3, [r7, #11]
 8008c4a:	f003 030f 	and.w	r3, r3, #15
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d109      	bne.n	8008c66 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	6818      	ldr	r0, [r3, #0]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	691b      	ldr	r3, [r3, #16]
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	6979      	ldr	r1, [r7, #20]
 8008c60:	f006 fee2 	bl	800fa28 <USB_EP0StartXfer>
 8008c64:	e008      	b.n	8008c78 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	6818      	ldr	r0, [r3, #0]
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	461a      	mov	r2, r3
 8008c72:	6979      	ldr	r1, [r7, #20]
 8008c74:	f006 fc88 	bl	800f588 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3718      	adds	r7, #24
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b084      	sub	sp, #16
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008c8e:	78fb      	ldrb	r3, [r7, #3]
 8008c90:	f003 020f 	and.w	r2, r3, #15
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d901      	bls.n	8008ca0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e050      	b.n	8008d42 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008ca0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	da0f      	bge.n	8008cc8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008ca8:	78fb      	ldrb	r3, [r7, #3]
 8008caa:	f003 020f 	and.w	r2, r3, #15
 8008cae:	4613      	mov	r3, r2
 8008cb0:	00db      	lsls	r3, r3, #3
 8008cb2:	4413      	add	r3, r2
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	3338      	adds	r3, #56	; 0x38
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	4413      	add	r3, r2
 8008cbc:	3304      	adds	r3, #4
 8008cbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	705a      	strb	r2, [r3, #1]
 8008cc6:	e00d      	b.n	8008ce4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008cc8:	78fa      	ldrb	r2, [r7, #3]
 8008cca:	4613      	mov	r3, r2
 8008ccc:	00db      	lsls	r3, r3, #3
 8008cce:	4413      	add	r3, r2
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	4413      	add	r3, r2
 8008cda:	3304      	adds	r3, #4
 8008cdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008cea:	78fb      	ldrb	r3, [r7, #3]
 8008cec:	f003 030f 	and.w	r3, r3, #15
 8008cf0:	b2da      	uxtb	r2, r3
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d101      	bne.n	8008d04 <HAL_PCD_EP_SetStall+0x82>
 8008d00:	2302      	movs	r3, #2
 8008d02:	e01e      	b.n	8008d42 <HAL_PCD_EP_SetStall+0xc0>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	68f9      	ldr	r1, [r7, #12]
 8008d12:	4618      	mov	r0, r3
 8008d14:	f007 f924 	bl	800ff60 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008d18:	78fb      	ldrb	r3, [r7, #3]
 8008d1a:	f003 030f 	and.w	r3, r3, #15
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d10a      	bne.n	8008d38 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6818      	ldr	r0, [r3, #0]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	691b      	ldr	r3, [r3, #16]
 8008d2a:	b2d9      	uxtb	r1, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008d32:	461a      	mov	r2, r3
 8008d34:	f007 fb16 	bl	8010364 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b084      	sub	sp, #16
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
 8008d52:	460b      	mov	r3, r1
 8008d54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008d56:	78fb      	ldrb	r3, [r7, #3]
 8008d58:	f003 020f 	and.w	r2, r3, #15
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d901      	bls.n	8008d68 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008d64:	2301      	movs	r3, #1
 8008d66:	e042      	b.n	8008dee <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008d68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	da0f      	bge.n	8008d90 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d70:	78fb      	ldrb	r3, [r7, #3]
 8008d72:	f003 020f 	and.w	r2, r3, #15
 8008d76:	4613      	mov	r3, r2
 8008d78:	00db      	lsls	r3, r3, #3
 8008d7a:	4413      	add	r3, r2
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	3338      	adds	r3, #56	; 0x38
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	4413      	add	r3, r2
 8008d84:	3304      	adds	r3, #4
 8008d86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	705a      	strb	r2, [r3, #1]
 8008d8e:	e00f      	b.n	8008db0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008d90:	78fb      	ldrb	r3, [r7, #3]
 8008d92:	f003 020f 	and.w	r2, r3, #15
 8008d96:	4613      	mov	r3, r2
 8008d98:	00db      	lsls	r3, r3, #3
 8008d9a:	4413      	add	r3, r2
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	4413      	add	r3, r2
 8008da6:	3304      	adds	r3, #4
 8008da8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2200      	movs	r2, #0
 8008dae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2200      	movs	r2, #0
 8008db4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008db6:	78fb      	ldrb	r3, [r7, #3]
 8008db8:	f003 030f 	and.w	r3, r3, #15
 8008dbc:	b2da      	uxtb	r2, r3
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d101      	bne.n	8008dd0 <HAL_PCD_EP_ClrStall+0x86>
 8008dcc:	2302      	movs	r3, #2
 8008dce:	e00e      	b.n	8008dee <HAL_PCD_EP_ClrStall+0xa4>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68f9      	ldr	r1, [r7, #12]
 8008dde:	4618      	mov	r0, r3
 8008de0:	f007 f92c 	bl	801003c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b084      	sub	sp, #16
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
 8008dfe:	460b      	mov	r3, r1
 8008e00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008e02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	da0c      	bge.n	8008e24 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e0a:	78fb      	ldrb	r3, [r7, #3]
 8008e0c:	f003 020f 	and.w	r2, r3, #15
 8008e10:	4613      	mov	r3, r2
 8008e12:	00db      	lsls	r3, r3, #3
 8008e14:	4413      	add	r3, r2
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	3338      	adds	r3, #56	; 0x38
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	3304      	adds	r3, #4
 8008e20:	60fb      	str	r3, [r7, #12]
 8008e22:	e00c      	b.n	8008e3e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008e24:	78fb      	ldrb	r3, [r7, #3]
 8008e26:	f003 020f 	and.w	r2, r3, #15
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	00db      	lsls	r3, r3, #3
 8008e2e:	4413      	add	r3, r2
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	4413      	add	r3, r2
 8008e3a:	3304      	adds	r3, #4
 8008e3c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	68f9      	ldr	r1, [r7, #12]
 8008e44:	4618      	mov	r0, r3
 8008e46:	f006 ff4b 	bl	800fce0 <USB_EPStopXfer>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008e4e:	7afb      	ldrb	r3, [r7, #11]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3710      	adds	r7, #16
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b08a      	sub	sp, #40	; 0x28
 8008e5c:	af02      	add	r7, sp, #8
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008e6c:	683a      	ldr	r2, [r7, #0]
 8008e6e:	4613      	mov	r3, r2
 8008e70:	00db      	lsls	r3, r3, #3
 8008e72:	4413      	add	r3, r2
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	3338      	adds	r3, #56	; 0x38
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	4413      	add	r3, r2
 8008e7c:	3304      	adds	r3, #4
 8008e7e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6a1a      	ldr	r2, [r3, #32]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	699b      	ldr	r3, [r3, #24]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d901      	bls.n	8008e90 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e06c      	b.n	8008f6a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	699a      	ldr	r2, [r3, #24]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6a1b      	ldr	r3, [r3, #32]
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	69fa      	ldr	r2, [r7, #28]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d902      	bls.n	8008eac <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	3303      	adds	r3, #3
 8008eb0:	089b      	lsrs	r3, r3, #2
 8008eb2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008eb4:	e02b      	b.n	8008f0e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	699a      	ldr	r2, [r3, #24]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6a1b      	ldr	r3, [r3, #32]
 8008ebe:	1ad3      	subs	r3, r2, r3
 8008ec0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	68db      	ldr	r3, [r3, #12]
 8008ec6:	69fa      	ldr	r2, [r7, #28]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d902      	bls.n	8008ed2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008ed2:	69fb      	ldr	r3, [r7, #28]
 8008ed4:	3303      	adds	r3, #3
 8008ed6:	089b      	lsrs	r3, r3, #2
 8008ed8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6919      	ldr	r1, [r3, #16]
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	b2da      	uxtb	r2, r3
 8008ee2:	69fb      	ldr	r3, [r7, #28]
 8008ee4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	9300      	str	r3, [sp, #0]
 8008eee:	4603      	mov	r3, r0
 8008ef0:	6978      	ldr	r0, [r7, #20]
 8008ef2:	f006 ff9f 	bl	800fe34 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	691a      	ldr	r2, [r3, #16]
 8008efa:	69fb      	ldr	r3, [r7, #28]
 8008efc:	441a      	add	r2, r3
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	6a1a      	ldr	r2, [r3, #32]
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	441a      	add	r2, r3
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	015a      	lsls	r2, r3, #5
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	4413      	add	r3, r2
 8008f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f1a:	699b      	ldr	r3, [r3, #24]
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	69ba      	ldr	r2, [r7, #24]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d809      	bhi.n	8008f38 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	6a1a      	ldr	r2, [r3, #32]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d203      	bcs.n	8008f38 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	699b      	ldr	r3, [r3, #24]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d1be      	bne.n	8008eb6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	699a      	ldr	r2, [r3, #24]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	6a1b      	ldr	r3, [r3, #32]
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d811      	bhi.n	8008f68 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	f003 030f 	and.w	r3, r3, #15
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f50:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	43db      	mvns	r3, r3
 8008f5e:	6939      	ldr	r1, [r7, #16]
 8008f60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f64:	4013      	ands	r3, r2
 8008f66:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3720      	adds	r7, #32
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
	...

08008f74 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b088      	sub	sp, #32
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f84:	69fb      	ldr	r3, [r7, #28]
 8008f86:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	333c      	adds	r3, #60	; 0x3c
 8008f8c:	3304      	adds	r3, #4
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	015a      	lsls	r2, r3, #5
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	4413      	add	r3, r2
 8008f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	691b      	ldr	r3, [r3, #16]
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d17b      	bne.n	80090a2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	f003 0308 	and.w	r3, r3, #8
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d015      	beq.n	8008fe0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	4a61      	ldr	r2, [pc, #388]	; (800913c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	f240 80b9 	bls.w	8009130 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	f000 80b3 	beq.w	8009130 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	015a      	lsls	r2, r3, #5
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fdc:	6093      	str	r3, [r2, #8]
 8008fde:	e0a7      	b.n	8009130 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	f003 0320 	and.w	r3, r3, #32
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d009      	beq.n	8008ffe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	015a      	lsls	r2, r3, #5
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	2320      	movs	r3, #32
 8008ffa:	6093      	str	r3, [r2, #8]
 8008ffc:	e098      	b.n	8009130 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009004:	2b00      	cmp	r3, #0
 8009006:	f040 8093 	bne.w	8009130 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	4a4b      	ldr	r2, [pc, #300]	; (800913c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d90f      	bls.n	8009032 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009018:	2b00      	cmp	r3, #0
 800901a:	d00a      	beq.n	8009032 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	015a      	lsls	r2, r3, #5
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	4413      	add	r3, r2
 8009024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009028:	461a      	mov	r2, r3
 800902a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800902e:	6093      	str	r3, [r2, #8]
 8009030:	e07e      	b.n	8009130 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009032:	683a      	ldr	r2, [r7, #0]
 8009034:	4613      	mov	r3, r2
 8009036:	00db      	lsls	r3, r3, #3
 8009038:	4413      	add	r3, r2
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	4413      	add	r3, r2
 8009044:	3304      	adds	r3, #4
 8009046:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	69da      	ldr	r2, [r3, #28]
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	0159      	lsls	r1, r3, #5
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	440b      	add	r3, r1
 8009054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009058:	691b      	ldr	r3, [r3, #16]
 800905a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800905e:	1ad2      	subs	r2, r2, r3
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d114      	bne.n	8009094 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	699b      	ldr	r3, [r3, #24]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d109      	bne.n	8009086 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6818      	ldr	r0, [r3, #0]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800907c:	461a      	mov	r2, r3
 800907e:	2101      	movs	r1, #1
 8009080:	f007 f970 	bl	8010364 <USB_EP0_OutStart>
 8009084:	e006      	b.n	8009094 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	691a      	ldr	r2, [r3, #16]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	6a1b      	ldr	r3, [r3, #32]
 800908e:	441a      	add	r2, r3
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	b2db      	uxtb	r3, r3
 8009098:	4619      	mov	r1, r3
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f009 fcc4 	bl	8012a28 <HAL_PCD_DataOutStageCallback>
 80090a0:	e046      	b.n	8009130 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	4a26      	ldr	r2, [pc, #152]	; (8009140 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d124      	bne.n	80090f4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d00a      	beq.n	80090ca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	015a      	lsls	r2, r3, #5
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	4413      	add	r3, r2
 80090bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090c0:	461a      	mov	r2, r3
 80090c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090c6:	6093      	str	r3, [r2, #8]
 80090c8:	e032      	b.n	8009130 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	f003 0320 	and.w	r3, r3, #32
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d008      	beq.n	80090e6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	015a      	lsls	r2, r3, #5
 80090d8:	69bb      	ldr	r3, [r7, #24]
 80090da:	4413      	add	r3, r2
 80090dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090e0:	461a      	mov	r2, r3
 80090e2:	2320      	movs	r3, #32
 80090e4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	4619      	mov	r1, r3
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f009 fc9b 	bl	8012a28 <HAL_PCD_DataOutStageCallback>
 80090f2:	e01d      	b.n	8009130 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d114      	bne.n	8009124 <PCD_EP_OutXfrComplete_int+0x1b0>
 80090fa:	6879      	ldr	r1, [r7, #4]
 80090fc:	683a      	ldr	r2, [r7, #0]
 80090fe:	4613      	mov	r3, r2
 8009100:	00db      	lsls	r3, r3, #3
 8009102:	4413      	add	r3, r2
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	440b      	add	r3, r1
 8009108:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d108      	bne.n	8009124 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6818      	ldr	r0, [r3, #0]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800911c:	461a      	mov	r2, r3
 800911e:	2100      	movs	r1, #0
 8009120:	f007 f920 	bl	8010364 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	b2db      	uxtb	r3, r3
 8009128:	4619      	mov	r1, r3
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f009 fc7c 	bl	8012a28 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	3720      	adds	r7, #32
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	4f54300a 	.word	0x4f54300a
 8009140:	4f54310a 	.word	0x4f54310a

08009144 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b086      	sub	sp, #24
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	333c      	adds	r3, #60	; 0x3c
 800915c:	3304      	adds	r3, #4
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	015a      	lsls	r2, r3, #5
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	4413      	add	r3, r2
 800916a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	4a15      	ldr	r2, [pc, #84]	; (80091cc <PCD_EP_OutSetupPacket_int+0x88>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d90e      	bls.n	8009198 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009180:	2b00      	cmp	r3, #0
 8009182:	d009      	beq.n	8009198 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	015a      	lsls	r2, r3, #5
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	4413      	add	r3, r2
 800918c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009190:	461a      	mov	r2, r3
 8009192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009196:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f009 fc33 	bl	8012a04 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	4a0a      	ldr	r2, [pc, #40]	; (80091cc <PCD_EP_OutSetupPacket_int+0x88>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d90c      	bls.n	80091c0 <PCD_EP_OutSetupPacket_int+0x7c>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d108      	bne.n	80091c0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6818      	ldr	r0, [r3, #0]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80091b8:	461a      	mov	r2, r3
 80091ba:	2101      	movs	r1, #1
 80091bc:	f007 f8d2 	bl	8010364 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80091c0:	2300      	movs	r3, #0
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3718      	adds	r7, #24
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	4f54300a 	.word	0x4f54300a

080091d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	460b      	mov	r3, r1
 80091da:	70fb      	strb	r3, [r7, #3]
 80091dc:	4613      	mov	r3, r2
 80091de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80091e8:	78fb      	ldrb	r3, [r7, #3]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d107      	bne.n	80091fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80091ee:	883b      	ldrh	r3, [r7, #0]
 80091f0:	0419      	lsls	r1, r3, #16
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	68ba      	ldr	r2, [r7, #8]
 80091f8:	430a      	orrs	r2, r1
 80091fa:	629a      	str	r2, [r3, #40]	; 0x28
 80091fc:	e028      	b.n	8009250 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009204:	0c1b      	lsrs	r3, r3, #16
 8009206:	68ba      	ldr	r2, [r7, #8]
 8009208:	4413      	add	r3, r2
 800920a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800920c:	2300      	movs	r3, #0
 800920e:	73fb      	strb	r3, [r7, #15]
 8009210:	e00d      	b.n	800922e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	7bfb      	ldrb	r3, [r7, #15]
 8009218:	3340      	adds	r3, #64	; 0x40
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	4413      	add	r3, r2
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	0c1b      	lsrs	r3, r3, #16
 8009222:	68ba      	ldr	r2, [r7, #8]
 8009224:	4413      	add	r3, r2
 8009226:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009228:	7bfb      	ldrb	r3, [r7, #15]
 800922a:	3301      	adds	r3, #1
 800922c:	73fb      	strb	r3, [r7, #15]
 800922e:	7bfa      	ldrb	r2, [r7, #15]
 8009230:	78fb      	ldrb	r3, [r7, #3]
 8009232:	3b01      	subs	r3, #1
 8009234:	429a      	cmp	r2, r3
 8009236:	d3ec      	bcc.n	8009212 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009238:	883b      	ldrh	r3, [r7, #0]
 800923a:	0418      	lsls	r0, r3, #16
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6819      	ldr	r1, [r3, #0]
 8009240:	78fb      	ldrb	r3, [r7, #3]
 8009242:	3b01      	subs	r3, #1
 8009244:	68ba      	ldr	r2, [r7, #8]
 8009246:	4302      	orrs	r2, r0
 8009248:	3340      	adds	r3, #64	; 0x40
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	440b      	add	r3, r1
 800924e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	3714      	adds	r7, #20
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr

0800925e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800925e:	b480      	push	{r7}
 8009260:	b083      	sub	sp, #12
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
 8009266:	460b      	mov	r3, r1
 8009268:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	887a      	ldrh	r2, [r7, #2]
 8009270:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009272:	2300      	movs	r3, #0
}
 8009274:	4618      	mov	r0, r3
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009280:	b480      	push	{r7}
 8009282:	b085      	sub	sp, #20
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2201      	movs	r2, #1
 8009292:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	699b      	ldr	r3, [r3, #24]
 80092a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092ae:	4b05      	ldr	r3, [pc, #20]	; (80092c4 <HAL_PCDEx_ActivateLPM+0x44>)
 80092b0:	4313      	orrs	r3, r2
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3714      	adds	r7, #20
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr
 80092c4:	10000003 	.word	0x10000003

080092c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	460b      	mov	r3, r1
 80092d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80092d4:	bf00      	nop
 80092d6:	370c      	adds	r7, #12
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr

080092e0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80092e8:	4b29      	ldr	r3, [pc, #164]	; (8009390 <HAL_PWREx_ConfigSupply+0xb0>)
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	f003 0307 	and.w	r3, r3, #7
 80092f0:	2b06      	cmp	r3, #6
 80092f2:	d00a      	beq.n	800930a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80092f4:	4b26      	ldr	r3, [pc, #152]	; (8009390 <HAL_PWREx_ConfigSupply+0xb0>)
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	429a      	cmp	r2, r3
 8009300:	d001      	beq.n	8009306 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e040      	b.n	8009388 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009306:	2300      	movs	r3, #0
 8009308:	e03e      	b.n	8009388 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800930a:	4b21      	ldr	r3, [pc, #132]	; (8009390 <HAL_PWREx_ConfigSupply+0xb0>)
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8009312:	491f      	ldr	r1, [pc, #124]	; (8009390 <HAL_PWREx_ConfigSupply+0xb0>)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	4313      	orrs	r3, r2
 8009318:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800931a:	f7f9 f911 	bl	8002540 <HAL_GetTick>
 800931e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009320:	e009      	b.n	8009336 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009322:	f7f9 f90d 	bl	8002540 <HAL_GetTick>
 8009326:	4602      	mov	r2, r0
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	1ad3      	subs	r3, r2, r3
 800932c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009330:	d901      	bls.n	8009336 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009332:	2301      	movs	r3, #1
 8009334:	e028      	b.n	8009388 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009336:	4b16      	ldr	r3, [pc, #88]	; (8009390 <HAL_PWREx_ConfigSupply+0xb0>)
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800933e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009342:	d1ee      	bne.n	8009322 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2b1e      	cmp	r3, #30
 8009348:	d008      	beq.n	800935c <HAL_PWREx_ConfigSupply+0x7c>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2b2e      	cmp	r3, #46	; 0x2e
 800934e:	d005      	beq.n	800935c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2b1d      	cmp	r3, #29
 8009354:	d002      	beq.n	800935c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2b2d      	cmp	r3, #45	; 0x2d
 800935a:	d114      	bne.n	8009386 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800935c:	f7f9 f8f0 	bl	8002540 <HAL_GetTick>
 8009360:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8009362:	e009      	b.n	8009378 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009364:	f7f9 f8ec 	bl	8002540 <HAL_GetTick>
 8009368:	4602      	mov	r2, r0
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	1ad3      	subs	r3, r2, r3
 800936e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009372:	d901      	bls.n	8009378 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	e007      	b.n	8009388 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8009378:	4b05      	ldr	r3, [pc, #20]	; (8009390 <HAL_PWREx_ConfigSupply+0xb0>)
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009384:	d1ee      	bne.n	8009364 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009386:	2300      	movs	r3, #0
}
 8009388:	4618      	mov	r0, r3
 800938a:	3710      	adds	r7, #16
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}
 8009390:	58024800 	.word	0x58024800

08009394 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009394:	b480      	push	{r7}
 8009396:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8009398:	4b05      	ldr	r3, [pc, #20]	; (80093b0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	4a04      	ldr	r2, [pc, #16]	; (80093b0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800939e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80093a2:	60d3      	str	r3, [r2, #12]
}
 80093a4:	bf00      	nop
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	58024800 	.word	0x58024800

080093b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b08c      	sub	sp, #48	; 0x30
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d102      	bne.n	80093c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	f000 bc1d 	b.w	8009c02 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f003 0301 	and.w	r3, r3, #1
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f000 8087 	beq.w	80094e4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80093d6:	4b99      	ldr	r3, [pc, #612]	; (800963c <HAL_RCC_OscConfig+0x288>)
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80093de:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80093e0:	4b96      	ldr	r3, [pc, #600]	; (800963c <HAL_RCC_OscConfig+0x288>)
 80093e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80093e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e8:	2b10      	cmp	r3, #16
 80093ea:	d007      	beq.n	80093fc <HAL_RCC_OscConfig+0x48>
 80093ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ee:	2b18      	cmp	r3, #24
 80093f0:	d110      	bne.n	8009414 <HAL_RCC_OscConfig+0x60>
 80093f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f4:	f003 0303 	and.w	r3, r3, #3
 80093f8:	2b02      	cmp	r3, #2
 80093fa:	d10b      	bne.n	8009414 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80093fc:	4b8f      	ldr	r3, [pc, #572]	; (800963c <HAL_RCC_OscConfig+0x288>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009404:	2b00      	cmp	r3, #0
 8009406:	d06c      	beq.n	80094e2 <HAL_RCC_OscConfig+0x12e>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d168      	bne.n	80094e2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8009410:	2301      	movs	r3, #1
 8009412:	e3f6      	b.n	8009c02 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800941c:	d106      	bne.n	800942c <HAL_RCC_OscConfig+0x78>
 800941e:	4b87      	ldr	r3, [pc, #540]	; (800963c <HAL_RCC_OscConfig+0x288>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a86      	ldr	r2, [pc, #536]	; (800963c <HAL_RCC_OscConfig+0x288>)
 8009424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009428:	6013      	str	r3, [r2, #0]
 800942a:	e02e      	b.n	800948a <HAL_RCC_OscConfig+0xd6>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d10c      	bne.n	800944e <HAL_RCC_OscConfig+0x9a>
 8009434:	4b81      	ldr	r3, [pc, #516]	; (800963c <HAL_RCC_OscConfig+0x288>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a80      	ldr	r2, [pc, #512]	; (800963c <HAL_RCC_OscConfig+0x288>)
 800943a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800943e:	6013      	str	r3, [r2, #0]
 8009440:	4b7e      	ldr	r3, [pc, #504]	; (800963c <HAL_RCC_OscConfig+0x288>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a7d      	ldr	r2, [pc, #500]	; (800963c <HAL_RCC_OscConfig+0x288>)
 8009446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800944a:	6013      	str	r3, [r2, #0]
 800944c:	e01d      	b.n	800948a <HAL_RCC_OscConfig+0xd6>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009456:	d10c      	bne.n	8009472 <HAL_RCC_OscConfig+0xbe>
 8009458:	4b78      	ldr	r3, [pc, #480]	; (800963c <HAL_RCC_OscConfig+0x288>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a77      	ldr	r2, [pc, #476]	; (800963c <HAL_RCC_OscConfig+0x288>)
 800945e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009462:	6013      	str	r3, [r2, #0]
 8009464:	4b75      	ldr	r3, [pc, #468]	; (800963c <HAL_RCC_OscConfig+0x288>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a74      	ldr	r2, [pc, #464]	; (800963c <HAL_RCC_OscConfig+0x288>)
 800946a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800946e:	6013      	str	r3, [r2, #0]
 8009470:	e00b      	b.n	800948a <HAL_RCC_OscConfig+0xd6>
 8009472:	4b72      	ldr	r3, [pc, #456]	; (800963c <HAL_RCC_OscConfig+0x288>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a71      	ldr	r2, [pc, #452]	; (800963c <HAL_RCC_OscConfig+0x288>)
 8009478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800947c:	6013      	str	r3, [r2, #0]
 800947e:	4b6f      	ldr	r3, [pc, #444]	; (800963c <HAL_RCC_OscConfig+0x288>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a6e      	ldr	r2, [pc, #440]	; (800963c <HAL_RCC_OscConfig+0x288>)
 8009484:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009488:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d013      	beq.n	80094ba <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009492:	f7f9 f855 	bl	8002540 <HAL_GetTick>
 8009496:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009498:	e008      	b.n	80094ac <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800949a:	f7f9 f851 	bl	8002540 <HAL_GetTick>
 800949e:	4602      	mov	r2, r0
 80094a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a2:	1ad3      	subs	r3, r2, r3
 80094a4:	2b64      	cmp	r3, #100	; 0x64
 80094a6:	d901      	bls.n	80094ac <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80094a8:	2303      	movs	r3, #3
 80094aa:	e3aa      	b.n	8009c02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80094ac:	4b63      	ldr	r3, [pc, #396]	; (800963c <HAL_RCC_OscConfig+0x288>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d0f0      	beq.n	800949a <HAL_RCC_OscConfig+0xe6>
 80094b8:	e014      	b.n	80094e4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094ba:	f7f9 f841 	bl	8002540 <HAL_GetTick>
 80094be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80094c0:	e008      	b.n	80094d4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80094c2:	f7f9 f83d 	bl	8002540 <HAL_GetTick>
 80094c6:	4602      	mov	r2, r0
 80094c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ca:	1ad3      	subs	r3, r2, r3
 80094cc:	2b64      	cmp	r3, #100	; 0x64
 80094ce:	d901      	bls.n	80094d4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80094d0:	2303      	movs	r3, #3
 80094d2:	e396      	b.n	8009c02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80094d4:	4b59      	ldr	r3, [pc, #356]	; (800963c <HAL_RCC_OscConfig+0x288>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d1f0      	bne.n	80094c2 <HAL_RCC_OscConfig+0x10e>
 80094e0:	e000      	b.n	80094e4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80094e2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f003 0302 	and.w	r3, r3, #2
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	f000 80cb 	beq.w	8009688 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80094f2:	4b52      	ldr	r3, [pc, #328]	; (800963c <HAL_RCC_OscConfig+0x288>)
 80094f4:	691b      	ldr	r3, [r3, #16]
 80094f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80094fa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80094fc:	4b4f      	ldr	r3, [pc, #316]	; (800963c <HAL_RCC_OscConfig+0x288>)
 80094fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009500:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009502:	6a3b      	ldr	r3, [r7, #32]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d007      	beq.n	8009518 <HAL_RCC_OscConfig+0x164>
 8009508:	6a3b      	ldr	r3, [r7, #32]
 800950a:	2b18      	cmp	r3, #24
 800950c:	d156      	bne.n	80095bc <HAL_RCC_OscConfig+0x208>
 800950e:	69fb      	ldr	r3, [r7, #28]
 8009510:	f003 0303 	and.w	r3, r3, #3
 8009514:	2b00      	cmp	r3, #0
 8009516:	d151      	bne.n	80095bc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009518:	4b48      	ldr	r3, [pc, #288]	; (800963c <HAL_RCC_OscConfig+0x288>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f003 0304 	and.w	r3, r3, #4
 8009520:	2b00      	cmp	r3, #0
 8009522:	d005      	beq.n	8009530 <HAL_RCC_OscConfig+0x17c>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d101      	bne.n	8009530 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800952c:	2301      	movs	r3, #1
 800952e:	e368      	b.n	8009c02 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009530:	4b42      	ldr	r3, [pc, #264]	; (800963c <HAL_RCC_OscConfig+0x288>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f023 0219 	bic.w	r2, r3, #25
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	493f      	ldr	r1, [pc, #252]	; (800963c <HAL_RCC_OscConfig+0x288>)
 800953e:	4313      	orrs	r3, r2
 8009540:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009542:	f7f8 fffd 	bl	8002540 <HAL_GetTick>
 8009546:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009548:	e008      	b.n	800955c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800954a:	f7f8 fff9 	bl	8002540 <HAL_GetTick>
 800954e:	4602      	mov	r2, r0
 8009550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009552:	1ad3      	subs	r3, r2, r3
 8009554:	2b02      	cmp	r3, #2
 8009556:	d901      	bls.n	800955c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8009558:	2303      	movs	r3, #3
 800955a:	e352      	b.n	8009c02 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800955c:	4b37      	ldr	r3, [pc, #220]	; (800963c <HAL_RCC_OscConfig+0x288>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f003 0304 	and.w	r3, r3, #4
 8009564:	2b00      	cmp	r3, #0
 8009566:	d0f0      	beq.n	800954a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009568:	f7f9 f81a 	bl	80025a0 <HAL_GetREVID>
 800956c:	4603      	mov	r3, r0
 800956e:	f241 0203 	movw	r2, #4099	; 0x1003
 8009572:	4293      	cmp	r3, r2
 8009574:	d817      	bhi.n	80095a6 <HAL_RCC_OscConfig+0x1f2>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	691b      	ldr	r3, [r3, #16]
 800957a:	2b40      	cmp	r3, #64	; 0x40
 800957c:	d108      	bne.n	8009590 <HAL_RCC_OscConfig+0x1dc>
 800957e:	4b2f      	ldr	r3, [pc, #188]	; (800963c <HAL_RCC_OscConfig+0x288>)
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009586:	4a2d      	ldr	r2, [pc, #180]	; (800963c <HAL_RCC_OscConfig+0x288>)
 8009588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800958c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800958e:	e07b      	b.n	8009688 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009590:	4b2a      	ldr	r3, [pc, #168]	; (800963c <HAL_RCC_OscConfig+0x288>)
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	691b      	ldr	r3, [r3, #16]
 800959c:	031b      	lsls	r3, r3, #12
 800959e:	4927      	ldr	r1, [pc, #156]	; (800963c <HAL_RCC_OscConfig+0x288>)
 80095a0:	4313      	orrs	r3, r2
 80095a2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80095a4:	e070      	b.n	8009688 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095a6:	4b25      	ldr	r3, [pc, #148]	; (800963c <HAL_RCC_OscConfig+0x288>)
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	691b      	ldr	r3, [r3, #16]
 80095b2:	061b      	lsls	r3, r3, #24
 80095b4:	4921      	ldr	r1, [pc, #132]	; (800963c <HAL_RCC_OscConfig+0x288>)
 80095b6:	4313      	orrs	r3, r2
 80095b8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80095ba:	e065      	b.n	8009688 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d048      	beq.n	8009656 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80095c4:	4b1d      	ldr	r3, [pc, #116]	; (800963c <HAL_RCC_OscConfig+0x288>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f023 0219 	bic.w	r2, r3, #25
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	491a      	ldr	r1, [pc, #104]	; (800963c <HAL_RCC_OscConfig+0x288>)
 80095d2:	4313      	orrs	r3, r2
 80095d4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095d6:	f7f8 ffb3 	bl	8002540 <HAL_GetTick>
 80095da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80095dc:	e008      	b.n	80095f0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80095de:	f7f8 ffaf 	bl	8002540 <HAL_GetTick>
 80095e2:	4602      	mov	r2, r0
 80095e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e6:	1ad3      	subs	r3, r2, r3
 80095e8:	2b02      	cmp	r3, #2
 80095ea:	d901      	bls.n	80095f0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80095ec:	2303      	movs	r3, #3
 80095ee:	e308      	b.n	8009c02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80095f0:	4b12      	ldr	r3, [pc, #72]	; (800963c <HAL_RCC_OscConfig+0x288>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f003 0304 	and.w	r3, r3, #4
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d0f0      	beq.n	80095de <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095fc:	f7f8 ffd0 	bl	80025a0 <HAL_GetREVID>
 8009600:	4603      	mov	r3, r0
 8009602:	f241 0203 	movw	r2, #4099	; 0x1003
 8009606:	4293      	cmp	r3, r2
 8009608:	d81a      	bhi.n	8009640 <HAL_RCC_OscConfig+0x28c>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	2b40      	cmp	r3, #64	; 0x40
 8009610:	d108      	bne.n	8009624 <HAL_RCC_OscConfig+0x270>
 8009612:	4b0a      	ldr	r3, [pc, #40]	; (800963c <HAL_RCC_OscConfig+0x288>)
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800961a:	4a08      	ldr	r2, [pc, #32]	; (800963c <HAL_RCC_OscConfig+0x288>)
 800961c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009620:	6053      	str	r3, [r2, #4]
 8009622:	e031      	b.n	8009688 <HAL_RCC_OscConfig+0x2d4>
 8009624:	4b05      	ldr	r3, [pc, #20]	; (800963c <HAL_RCC_OscConfig+0x288>)
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	691b      	ldr	r3, [r3, #16]
 8009630:	031b      	lsls	r3, r3, #12
 8009632:	4902      	ldr	r1, [pc, #8]	; (800963c <HAL_RCC_OscConfig+0x288>)
 8009634:	4313      	orrs	r3, r2
 8009636:	604b      	str	r3, [r1, #4]
 8009638:	e026      	b.n	8009688 <HAL_RCC_OscConfig+0x2d4>
 800963a:	bf00      	nop
 800963c:	58024400 	.word	0x58024400
 8009640:	4b9a      	ldr	r3, [pc, #616]	; (80098ac <HAL_RCC_OscConfig+0x4f8>)
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	691b      	ldr	r3, [r3, #16]
 800964c:	061b      	lsls	r3, r3, #24
 800964e:	4997      	ldr	r1, [pc, #604]	; (80098ac <HAL_RCC_OscConfig+0x4f8>)
 8009650:	4313      	orrs	r3, r2
 8009652:	604b      	str	r3, [r1, #4]
 8009654:	e018      	b.n	8009688 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009656:	4b95      	ldr	r3, [pc, #596]	; (80098ac <HAL_RCC_OscConfig+0x4f8>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a94      	ldr	r2, [pc, #592]	; (80098ac <HAL_RCC_OscConfig+0x4f8>)
 800965c:	f023 0301 	bic.w	r3, r3, #1
 8009660:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009662:	f7f8 ff6d 	bl	8002540 <HAL_GetTick>
 8009666:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009668:	e008      	b.n	800967c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800966a:	f7f8 ff69 	bl	8002540 <HAL_GetTick>
 800966e:	4602      	mov	r2, r0
 8009670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009672:	1ad3      	subs	r3, r2, r3
 8009674:	2b02      	cmp	r3, #2
 8009676:	d901      	bls.n	800967c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009678:	2303      	movs	r3, #3
 800967a:	e2c2      	b.n	8009c02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800967c:	4b8b      	ldr	r3, [pc, #556]	; (80098ac <HAL_RCC_OscConfig+0x4f8>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f003 0304 	and.w	r3, r3, #4
 8009684:	2b00      	cmp	r3, #0
 8009686:	d1f0      	bne.n	800966a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f003 0310 	and.w	r3, r3, #16
 8009690:	2b00      	cmp	r3, #0
 8009692:	f000 80a9 	beq.w	80097e8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009696:	4b85      	ldr	r3, [pc, #532]	; (80098ac <HAL_RCC_OscConfig+0x4f8>)
 8009698:	691b      	ldr	r3, [r3, #16]
 800969a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800969e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80096a0:	4b82      	ldr	r3, [pc, #520]	; (80098ac <HAL_RCC_OscConfig+0x4f8>)
 80096a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096a4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	2b08      	cmp	r3, #8
 80096aa:	d007      	beq.n	80096bc <HAL_RCC_OscConfig+0x308>
 80096ac:	69bb      	ldr	r3, [r7, #24]
 80096ae:	2b18      	cmp	r3, #24
 80096b0:	d13a      	bne.n	8009728 <HAL_RCC_OscConfig+0x374>
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	f003 0303 	and.w	r3, r3, #3
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d135      	bne.n	8009728 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80096bc:	4b7b      	ldr	r3, [pc, #492]	; (80098ac <HAL_RCC_OscConfig+0x4f8>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d005      	beq.n	80096d4 <HAL_RCC_OscConfig+0x320>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	69db      	ldr	r3, [r3, #28]
 80096cc:	2b80      	cmp	r3, #128	; 0x80
 80096ce:	d001      	beq.n	80096d4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	e296      	b.n	8009c02 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80096d4:	f7f8 ff64 	bl	80025a0 <HAL_GetREVID>
 80096d8:	4603      	mov	r3, r0
 80096da:	f241 0203 	movw	r2, #4099	; 0x1003
 80096de:	4293      	cmp	r3, r2
 80096e0:	d817      	bhi.n	8009712 <HAL_RCC_OscConfig+0x35e>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a1b      	ldr	r3, [r3, #32]
 80096e6:	2b20      	cmp	r3, #32
 80096e8:	d108      	bne.n	80096fc <HAL_RCC_OscConfig+0x348>
 80096ea:	4b70      	ldr	r3, [pc, #448]	; (80098ac <HAL_RCC_OscConfig+0x4f8>)
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80096f2:	4a6e      	ldr	r2, [pc, #440]	; (80098ac <HAL_RCC_OscConfig+0x4f8>)
 80096f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80096f8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80096fa:	e075      	b.n	80097e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80096fc:	4b6b      	ldr	r3, [pc, #428]	; (80098ac <HAL_RCC_OscConfig+0x4f8>)
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6a1b      	ldr	r3, [r3, #32]
 8009708:	069b      	lsls	r3, r3, #26
 800970a:	4968      	ldr	r1, [pc, #416]	; (80098ac <HAL_RCC_OscConfig+0x4f8>)
 800970c:	4313      	orrs	r3, r2
 800970e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009710:	e06a      	b.n	80097e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009712:	4b66      	ldr	r3, [pc, #408]	; (80098ac <HAL_RCC_OscConfig+0x4f8>)
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a1b      	ldr	r3, [r3, #32]
 800971e:	061b      	lsls	r3, r3, #24
 8009720:	4962      	ldr	r1, [pc, #392]	; (80098ac <HAL_RCC_OscConfig+0x4f8>)
 8009722:	4313      	orrs	r3, r2
 8009724:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009726:	e05f      	b.n	80097e8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	69db      	ldr	r3, [r3, #28]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d042      	beq.n	80097b6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009730:	4b5e      	ldr	r3, [pc, #376]	; (80098ac <HAL_RCC_OscConfig+0x4f8>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a5d      	ldr	r2, [pc, #372]	; (80098ac <HAL_RCC_OscConfig+0x4f8>)
 8009736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800973a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800973c:	f7f8 ff00 	bl	8002540 <HAL_GetTick>
 8009740:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009742:	e008      	b.n	8009756 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009744:	f7f8 fefc 	bl	8002540 <HAL_GetTick>
 8009748:	4602      	mov	r2, r0
 800974a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974c:	1ad3      	subs	r3, r2, r3
 800974e:	2b02      	cmp	r3, #2
 8009750:	d901      	bls.n	8009756 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009752:	2303      	movs	r3, #3
 8009754:	e255      	b.n	8009c02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009756:	4b55      	ldr	r3, [pc, #340]	; (80098ac <HAL_RCC_OscConfig+0x4f8>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800975e:	2b00      	cmp	r3, #0
 8009760:	d0f0      	beq.n	8009744 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009762:	f7f8 ff1d 	bl	80025a0 <HAL_GetREVID>
 8009766:	4603      	mov	r3, r0
 8009768:	f241 0203 	movw	r2, #4099	; 0x1003
 800976c:	4293      	cmp	r3, r2
 800976e:	d817      	bhi.n	80097a0 <HAL_RCC_OscConfig+0x3ec>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6a1b      	ldr	r3, [r3, #32]
 8009774:	2b20      	cmp	r3, #32
 8009776:	d108      	bne.n	800978a <HAL_RCC_OscConfig+0x3d6>
 8009778:	4b4c      	ldr	r3, [pc, #304]	; (80098ac <HAL_RCC_OscConfig+0x4f8>)
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009780:	4a4a      	ldr	r2, [pc, #296]	; (80098ac <HAL_RCC_OscConfig+0x4f8>)
 8009782:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009786:	6053      	str	r3, [r2, #4]
 8009788:	e02e      	b.n	80097e8 <HAL_RCC_OscConfig+0x434>
 800978a:	4b48      	ldr	r3, [pc, #288]	; (80098ac <HAL_RCC_OscConfig+0x4f8>)
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6a1b      	ldr	r3, [r3, #32]
 8009796:	069b      	lsls	r3, r3, #26
 8009798:	4944      	ldr	r1, [pc, #272]	; (80098ac <HAL_RCC_OscConfig+0x4f8>)
 800979a:	4313      	orrs	r3, r2
 800979c:	604b      	str	r3, [r1, #4]
 800979e:	e023      	b.n	80097e8 <HAL_RCC_OscConfig+0x434>
 80097a0:	4b42      	ldr	r3, [pc, #264]	; (80098ac <HAL_RCC_OscConfig+0x4f8>)
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6a1b      	ldr	r3, [r3, #32]
 80097ac:	061b      	lsls	r3, r3, #24
 80097ae:	493f      	ldr	r1, [pc, #252]	; (80098ac <HAL_RCC_OscConfig+0x4f8>)
 80097b0:	4313      	orrs	r3, r2
 80097b2:	60cb      	str	r3, [r1, #12]
 80097b4:	e018      	b.n	80097e8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80097b6:	4b3d      	ldr	r3, [pc, #244]	; (80098ac <HAL_RCC_OscConfig+0x4f8>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a3c      	ldr	r2, [pc, #240]	; (80098ac <HAL_RCC_OscConfig+0x4f8>)
 80097bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097c2:	f7f8 febd 	bl	8002540 <HAL_GetTick>
 80097c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80097c8:	e008      	b.n	80097dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80097ca:	f7f8 feb9 	bl	8002540 <HAL_GetTick>
 80097ce:	4602      	mov	r2, r0
 80097d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d2:	1ad3      	subs	r3, r2, r3
 80097d4:	2b02      	cmp	r3, #2
 80097d6:	d901      	bls.n	80097dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80097d8:	2303      	movs	r3, #3
 80097da:	e212      	b.n	8009c02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80097dc:	4b33      	ldr	r3, [pc, #204]	; (80098ac <HAL_RCC_OscConfig+0x4f8>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d1f0      	bne.n	80097ca <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f003 0308 	and.w	r3, r3, #8
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d036      	beq.n	8009862 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	695b      	ldr	r3, [r3, #20]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d019      	beq.n	8009830 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80097fc:	4b2b      	ldr	r3, [pc, #172]	; (80098ac <HAL_RCC_OscConfig+0x4f8>)
 80097fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009800:	4a2a      	ldr	r2, [pc, #168]	; (80098ac <HAL_RCC_OscConfig+0x4f8>)
 8009802:	f043 0301 	orr.w	r3, r3, #1
 8009806:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009808:	f7f8 fe9a 	bl	8002540 <HAL_GetTick>
 800980c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800980e:	e008      	b.n	8009822 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009810:	f7f8 fe96 	bl	8002540 <HAL_GetTick>
 8009814:	4602      	mov	r2, r0
 8009816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009818:	1ad3      	subs	r3, r2, r3
 800981a:	2b02      	cmp	r3, #2
 800981c:	d901      	bls.n	8009822 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800981e:	2303      	movs	r3, #3
 8009820:	e1ef      	b.n	8009c02 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009822:	4b22      	ldr	r3, [pc, #136]	; (80098ac <HAL_RCC_OscConfig+0x4f8>)
 8009824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009826:	f003 0302 	and.w	r3, r3, #2
 800982a:	2b00      	cmp	r3, #0
 800982c:	d0f0      	beq.n	8009810 <HAL_RCC_OscConfig+0x45c>
 800982e:	e018      	b.n	8009862 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009830:	4b1e      	ldr	r3, [pc, #120]	; (80098ac <HAL_RCC_OscConfig+0x4f8>)
 8009832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009834:	4a1d      	ldr	r2, [pc, #116]	; (80098ac <HAL_RCC_OscConfig+0x4f8>)
 8009836:	f023 0301 	bic.w	r3, r3, #1
 800983a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800983c:	f7f8 fe80 	bl	8002540 <HAL_GetTick>
 8009840:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009842:	e008      	b.n	8009856 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009844:	f7f8 fe7c 	bl	8002540 <HAL_GetTick>
 8009848:	4602      	mov	r2, r0
 800984a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984c:	1ad3      	subs	r3, r2, r3
 800984e:	2b02      	cmp	r3, #2
 8009850:	d901      	bls.n	8009856 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009852:	2303      	movs	r3, #3
 8009854:	e1d5      	b.n	8009c02 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009856:	4b15      	ldr	r3, [pc, #84]	; (80098ac <HAL_RCC_OscConfig+0x4f8>)
 8009858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800985a:	f003 0302 	and.w	r3, r3, #2
 800985e:	2b00      	cmp	r3, #0
 8009860:	d1f0      	bne.n	8009844 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f003 0320 	and.w	r3, r3, #32
 800986a:	2b00      	cmp	r3, #0
 800986c:	d039      	beq.n	80098e2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	699b      	ldr	r3, [r3, #24]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d01c      	beq.n	80098b0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009876:	4b0d      	ldr	r3, [pc, #52]	; (80098ac <HAL_RCC_OscConfig+0x4f8>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a0c      	ldr	r2, [pc, #48]	; (80098ac <HAL_RCC_OscConfig+0x4f8>)
 800987c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009880:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009882:	f7f8 fe5d 	bl	8002540 <HAL_GetTick>
 8009886:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009888:	e008      	b.n	800989c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800988a:	f7f8 fe59 	bl	8002540 <HAL_GetTick>
 800988e:	4602      	mov	r2, r0
 8009890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009892:	1ad3      	subs	r3, r2, r3
 8009894:	2b02      	cmp	r3, #2
 8009896:	d901      	bls.n	800989c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009898:	2303      	movs	r3, #3
 800989a:	e1b2      	b.n	8009c02 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800989c:	4b03      	ldr	r3, [pc, #12]	; (80098ac <HAL_RCC_OscConfig+0x4f8>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d0f0      	beq.n	800988a <HAL_RCC_OscConfig+0x4d6>
 80098a8:	e01b      	b.n	80098e2 <HAL_RCC_OscConfig+0x52e>
 80098aa:	bf00      	nop
 80098ac:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80098b0:	4b9b      	ldr	r3, [pc, #620]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a9a      	ldr	r2, [pc, #616]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 80098b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098ba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80098bc:	f7f8 fe40 	bl	8002540 <HAL_GetTick>
 80098c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80098c2:	e008      	b.n	80098d6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80098c4:	f7f8 fe3c 	bl	8002540 <HAL_GetTick>
 80098c8:	4602      	mov	r2, r0
 80098ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098cc:	1ad3      	subs	r3, r2, r3
 80098ce:	2b02      	cmp	r3, #2
 80098d0:	d901      	bls.n	80098d6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80098d2:	2303      	movs	r3, #3
 80098d4:	e195      	b.n	8009c02 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80098d6:	4b92      	ldr	r3, [pc, #584]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1f0      	bne.n	80098c4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f003 0304 	and.w	r3, r3, #4
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	f000 8081 	beq.w	80099f2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80098f0:	4b8c      	ldr	r3, [pc, #560]	; (8009b24 <HAL_RCC_OscConfig+0x770>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a8b      	ldr	r2, [pc, #556]	; (8009b24 <HAL_RCC_OscConfig+0x770>)
 80098f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80098fc:	f7f8 fe20 	bl	8002540 <HAL_GetTick>
 8009900:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009902:	e008      	b.n	8009916 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009904:	f7f8 fe1c 	bl	8002540 <HAL_GetTick>
 8009908:	4602      	mov	r2, r0
 800990a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990c:	1ad3      	subs	r3, r2, r3
 800990e:	2b64      	cmp	r3, #100	; 0x64
 8009910:	d901      	bls.n	8009916 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009912:	2303      	movs	r3, #3
 8009914:	e175      	b.n	8009c02 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009916:	4b83      	ldr	r3, [pc, #524]	; (8009b24 <HAL_RCC_OscConfig+0x770>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800991e:	2b00      	cmp	r3, #0
 8009920:	d0f0      	beq.n	8009904 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	689b      	ldr	r3, [r3, #8]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d106      	bne.n	8009938 <HAL_RCC_OscConfig+0x584>
 800992a:	4b7d      	ldr	r3, [pc, #500]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 800992c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800992e:	4a7c      	ldr	r2, [pc, #496]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 8009930:	f043 0301 	orr.w	r3, r3, #1
 8009934:	6713      	str	r3, [r2, #112]	; 0x70
 8009936:	e02d      	b.n	8009994 <HAL_RCC_OscConfig+0x5e0>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d10c      	bne.n	800995a <HAL_RCC_OscConfig+0x5a6>
 8009940:	4b77      	ldr	r3, [pc, #476]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 8009942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009944:	4a76      	ldr	r2, [pc, #472]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 8009946:	f023 0301 	bic.w	r3, r3, #1
 800994a:	6713      	str	r3, [r2, #112]	; 0x70
 800994c:	4b74      	ldr	r3, [pc, #464]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 800994e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009950:	4a73      	ldr	r2, [pc, #460]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 8009952:	f023 0304 	bic.w	r3, r3, #4
 8009956:	6713      	str	r3, [r2, #112]	; 0x70
 8009958:	e01c      	b.n	8009994 <HAL_RCC_OscConfig+0x5e0>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	2b05      	cmp	r3, #5
 8009960:	d10c      	bne.n	800997c <HAL_RCC_OscConfig+0x5c8>
 8009962:	4b6f      	ldr	r3, [pc, #444]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 8009964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009966:	4a6e      	ldr	r2, [pc, #440]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 8009968:	f043 0304 	orr.w	r3, r3, #4
 800996c:	6713      	str	r3, [r2, #112]	; 0x70
 800996e:	4b6c      	ldr	r3, [pc, #432]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 8009970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009972:	4a6b      	ldr	r2, [pc, #428]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 8009974:	f043 0301 	orr.w	r3, r3, #1
 8009978:	6713      	str	r3, [r2, #112]	; 0x70
 800997a:	e00b      	b.n	8009994 <HAL_RCC_OscConfig+0x5e0>
 800997c:	4b68      	ldr	r3, [pc, #416]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 800997e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009980:	4a67      	ldr	r2, [pc, #412]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 8009982:	f023 0301 	bic.w	r3, r3, #1
 8009986:	6713      	str	r3, [r2, #112]	; 0x70
 8009988:	4b65      	ldr	r3, [pc, #404]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 800998a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800998c:	4a64      	ldr	r2, [pc, #400]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 800998e:	f023 0304 	bic.w	r3, r3, #4
 8009992:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d015      	beq.n	80099c8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800999c:	f7f8 fdd0 	bl	8002540 <HAL_GetTick>
 80099a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80099a2:	e00a      	b.n	80099ba <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099a4:	f7f8 fdcc 	bl	8002540 <HAL_GetTick>
 80099a8:	4602      	mov	r2, r0
 80099aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ac:	1ad3      	subs	r3, r2, r3
 80099ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d901      	bls.n	80099ba <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80099b6:	2303      	movs	r3, #3
 80099b8:	e123      	b.n	8009c02 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80099ba:	4b59      	ldr	r3, [pc, #356]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 80099bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099be:	f003 0302 	and.w	r3, r3, #2
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d0ee      	beq.n	80099a4 <HAL_RCC_OscConfig+0x5f0>
 80099c6:	e014      	b.n	80099f2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099c8:	f7f8 fdba 	bl	8002540 <HAL_GetTick>
 80099cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80099ce:	e00a      	b.n	80099e6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099d0:	f7f8 fdb6 	bl	8002540 <HAL_GetTick>
 80099d4:	4602      	mov	r2, r0
 80099d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d8:	1ad3      	subs	r3, r2, r3
 80099da:	f241 3288 	movw	r2, #5000	; 0x1388
 80099de:	4293      	cmp	r3, r2
 80099e0:	d901      	bls.n	80099e6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80099e2:	2303      	movs	r3, #3
 80099e4:	e10d      	b.n	8009c02 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80099e6:	4b4e      	ldr	r3, [pc, #312]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 80099e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099ea:	f003 0302 	and.w	r3, r3, #2
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d1ee      	bne.n	80099d0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	f000 8102 	beq.w	8009c00 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80099fc:	4b48      	ldr	r3, [pc, #288]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 80099fe:	691b      	ldr	r3, [r3, #16]
 8009a00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a04:	2b18      	cmp	r3, #24
 8009a06:	f000 80bd 	beq.w	8009b84 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	f040 809e 	bne.w	8009b50 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a14:	4b42      	ldr	r3, [pc, #264]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a41      	ldr	r2, [pc, #260]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 8009a1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009a1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a20:	f7f8 fd8e 	bl	8002540 <HAL_GetTick>
 8009a24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009a26:	e008      	b.n	8009a3a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a28:	f7f8 fd8a 	bl	8002540 <HAL_GetTick>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a30:	1ad3      	subs	r3, r2, r3
 8009a32:	2b02      	cmp	r3, #2
 8009a34:	d901      	bls.n	8009a3a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009a36:	2303      	movs	r3, #3
 8009a38:	e0e3      	b.n	8009c02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009a3a:	4b39      	ldr	r3, [pc, #228]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d1f0      	bne.n	8009a28 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009a46:	4b36      	ldr	r3, [pc, #216]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 8009a48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a4a:	4b37      	ldr	r3, [pc, #220]	; (8009b28 <HAL_RCC_OscConfig+0x774>)
 8009a4c:	4013      	ands	r3, r2
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009a56:	0112      	lsls	r2, r2, #4
 8009a58:	430a      	orrs	r2, r1
 8009a5a:	4931      	ldr	r1, [pc, #196]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	628b      	str	r3, [r1, #40]	; 0x28
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a64:	3b01      	subs	r3, #1
 8009a66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	025b      	lsls	r3, r3, #9
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	431a      	orrs	r2, r3
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a7a:	3b01      	subs	r3, #1
 8009a7c:	041b      	lsls	r3, r3, #16
 8009a7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009a82:	431a      	orrs	r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a88:	3b01      	subs	r3, #1
 8009a8a:	061b      	lsls	r3, r3, #24
 8009a8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009a90:	4923      	ldr	r1, [pc, #140]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 8009a92:	4313      	orrs	r3, r2
 8009a94:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009a96:	4b22      	ldr	r3, [pc, #136]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 8009a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a9a:	4a21      	ldr	r2, [pc, #132]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 8009a9c:	f023 0301 	bic.w	r3, r3, #1
 8009aa0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009aa2:	4b1f      	ldr	r3, [pc, #124]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 8009aa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009aa6:	4b21      	ldr	r3, [pc, #132]	; (8009b2c <HAL_RCC_OscConfig+0x778>)
 8009aa8:	4013      	ands	r3, r2
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009aae:	00d2      	lsls	r2, r2, #3
 8009ab0:	491b      	ldr	r1, [pc, #108]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009ab6:	4b1a      	ldr	r3, [pc, #104]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 8009ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aba:	f023 020c 	bic.w	r2, r3, #12
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac2:	4917      	ldr	r1, [pc, #92]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009ac8:	4b15      	ldr	r3, [pc, #84]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 8009aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009acc:	f023 0202 	bic.w	r2, r3, #2
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ad4:	4912      	ldr	r1, [pc, #72]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009ada:	4b11      	ldr	r3, [pc, #68]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 8009adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ade:	4a10      	ldr	r2, [pc, #64]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 8009ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ae6:	4b0e      	ldr	r3, [pc, #56]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 8009ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aea:	4a0d      	ldr	r2, [pc, #52]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 8009aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009af0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009af2:	4b0b      	ldr	r3, [pc, #44]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 8009af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af6:	4a0a      	ldr	r2, [pc, #40]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 8009af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009afc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009afe:	4b08      	ldr	r3, [pc, #32]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 8009b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b02:	4a07      	ldr	r2, [pc, #28]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 8009b04:	f043 0301 	orr.w	r3, r3, #1
 8009b08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009b0a:	4b05      	ldr	r3, [pc, #20]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a04      	ldr	r2, [pc, #16]	; (8009b20 <HAL_RCC_OscConfig+0x76c>)
 8009b10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b16:	f7f8 fd13 	bl	8002540 <HAL_GetTick>
 8009b1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009b1c:	e011      	b.n	8009b42 <HAL_RCC_OscConfig+0x78e>
 8009b1e:	bf00      	nop
 8009b20:	58024400 	.word	0x58024400
 8009b24:	58024800 	.word	0x58024800
 8009b28:	fffffc0c 	.word	0xfffffc0c
 8009b2c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b30:	f7f8 fd06 	bl	8002540 <HAL_GetTick>
 8009b34:	4602      	mov	r2, r0
 8009b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b38:	1ad3      	subs	r3, r2, r3
 8009b3a:	2b02      	cmp	r3, #2
 8009b3c:	d901      	bls.n	8009b42 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009b3e:	2303      	movs	r3, #3
 8009b40:	e05f      	b.n	8009c02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009b42:	4b32      	ldr	r3, [pc, #200]	; (8009c0c <HAL_RCC_OscConfig+0x858>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d0f0      	beq.n	8009b30 <HAL_RCC_OscConfig+0x77c>
 8009b4e:	e057      	b.n	8009c00 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b50:	4b2e      	ldr	r3, [pc, #184]	; (8009c0c <HAL_RCC_OscConfig+0x858>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a2d      	ldr	r2, [pc, #180]	; (8009c0c <HAL_RCC_OscConfig+0x858>)
 8009b56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b5c:	f7f8 fcf0 	bl	8002540 <HAL_GetTick>
 8009b60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b62:	e008      	b.n	8009b76 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b64:	f7f8 fcec 	bl	8002540 <HAL_GetTick>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6c:	1ad3      	subs	r3, r2, r3
 8009b6e:	2b02      	cmp	r3, #2
 8009b70:	d901      	bls.n	8009b76 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8009b72:	2303      	movs	r3, #3
 8009b74:	e045      	b.n	8009c02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b76:	4b25      	ldr	r3, [pc, #148]	; (8009c0c <HAL_RCC_OscConfig+0x858>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d1f0      	bne.n	8009b64 <HAL_RCC_OscConfig+0x7b0>
 8009b82:	e03d      	b.n	8009c00 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009b84:	4b21      	ldr	r3, [pc, #132]	; (8009c0c <HAL_RCC_OscConfig+0x858>)
 8009b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b88:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009b8a:	4b20      	ldr	r3, [pc, #128]	; (8009c0c <HAL_RCC_OscConfig+0x858>)
 8009b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b8e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d031      	beq.n	8009bfc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	f003 0203 	and.w	r2, r3, #3
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	d12a      	bne.n	8009bfc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	091b      	lsrs	r3, r3, #4
 8009baa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d122      	bne.n	8009bfc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bc0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d11a      	bne.n	8009bfc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	0a5b      	lsrs	r3, r3, #9
 8009bca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bd2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d111      	bne.n	8009bfc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	0c1b      	lsrs	r3, r3, #16
 8009bdc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d108      	bne.n	8009bfc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	0e1b      	lsrs	r3, r3, #24
 8009bee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bf6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d001      	beq.n	8009c00 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	e000      	b.n	8009c02 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3730      	adds	r7, #48	; 0x30
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	58024400 	.word	0x58024400

08009c10 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b086      	sub	sp, #24
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d101      	bne.n	8009c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009c20:	2301      	movs	r3, #1
 8009c22:	e19c      	b.n	8009f5e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009c24:	4b8a      	ldr	r3, [pc, #552]	; (8009e50 <HAL_RCC_ClockConfig+0x240>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f003 030f 	and.w	r3, r3, #15
 8009c2c:	683a      	ldr	r2, [r7, #0]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d910      	bls.n	8009c54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c32:	4b87      	ldr	r3, [pc, #540]	; (8009e50 <HAL_RCC_ClockConfig+0x240>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f023 020f 	bic.w	r2, r3, #15
 8009c3a:	4985      	ldr	r1, [pc, #532]	; (8009e50 <HAL_RCC_ClockConfig+0x240>)
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c42:	4b83      	ldr	r3, [pc, #524]	; (8009e50 <HAL_RCC_ClockConfig+0x240>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f003 030f 	and.w	r3, r3, #15
 8009c4a:	683a      	ldr	r2, [r7, #0]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d001      	beq.n	8009c54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	e184      	b.n	8009f5e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f003 0304 	and.w	r3, r3, #4
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d010      	beq.n	8009c82 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	691a      	ldr	r2, [r3, #16]
 8009c64:	4b7b      	ldr	r3, [pc, #492]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009c66:	699b      	ldr	r3, [r3, #24]
 8009c68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d908      	bls.n	8009c82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009c70:	4b78      	ldr	r3, [pc, #480]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009c72:	699b      	ldr	r3, [r3, #24]
 8009c74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	691b      	ldr	r3, [r3, #16]
 8009c7c:	4975      	ldr	r1, [pc, #468]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f003 0308 	and.w	r3, r3, #8
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d010      	beq.n	8009cb0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	695a      	ldr	r2, [r3, #20]
 8009c92:	4b70      	ldr	r3, [pc, #448]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009c94:	69db      	ldr	r3, [r3, #28]
 8009c96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d908      	bls.n	8009cb0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009c9e:	4b6d      	ldr	r3, [pc, #436]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009ca0:	69db      	ldr	r3, [r3, #28]
 8009ca2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	695b      	ldr	r3, [r3, #20]
 8009caa:	496a      	ldr	r1, [pc, #424]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009cac:	4313      	orrs	r3, r2
 8009cae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f003 0310 	and.w	r3, r3, #16
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d010      	beq.n	8009cde <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	699a      	ldr	r2, [r3, #24]
 8009cc0:	4b64      	ldr	r3, [pc, #400]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009cc2:	69db      	ldr	r3, [r3, #28]
 8009cc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d908      	bls.n	8009cde <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009ccc:	4b61      	ldr	r3, [pc, #388]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009cce:	69db      	ldr	r3, [r3, #28]
 8009cd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	699b      	ldr	r3, [r3, #24]
 8009cd8:	495e      	ldr	r1, [pc, #376]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f003 0320 	and.w	r3, r3, #32
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d010      	beq.n	8009d0c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	69da      	ldr	r2, [r3, #28]
 8009cee:	4b59      	ldr	r3, [pc, #356]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009cf0:	6a1b      	ldr	r3, [r3, #32]
 8009cf2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d908      	bls.n	8009d0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009cfa:	4b56      	ldr	r3, [pc, #344]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009cfc:	6a1b      	ldr	r3, [r3, #32]
 8009cfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	69db      	ldr	r3, [r3, #28]
 8009d06:	4953      	ldr	r1, [pc, #332]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f003 0302 	and.w	r3, r3, #2
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d010      	beq.n	8009d3a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	68da      	ldr	r2, [r3, #12]
 8009d1c:	4b4d      	ldr	r3, [pc, #308]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009d1e:	699b      	ldr	r3, [r3, #24]
 8009d20:	f003 030f 	and.w	r3, r3, #15
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d908      	bls.n	8009d3a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d28:	4b4a      	ldr	r3, [pc, #296]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009d2a:	699b      	ldr	r3, [r3, #24]
 8009d2c:	f023 020f 	bic.w	r2, r3, #15
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	68db      	ldr	r3, [r3, #12]
 8009d34:	4947      	ldr	r1, [pc, #284]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009d36:	4313      	orrs	r3, r2
 8009d38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f003 0301 	and.w	r3, r3, #1
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d055      	beq.n	8009df2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009d46:	4b43      	ldr	r3, [pc, #268]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009d48:	699b      	ldr	r3, [r3, #24]
 8009d4a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	4940      	ldr	r1, [pc, #256]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009d54:	4313      	orrs	r3, r2
 8009d56:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	2b02      	cmp	r3, #2
 8009d5e:	d107      	bne.n	8009d70 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009d60:	4b3c      	ldr	r3, [pc, #240]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d121      	bne.n	8009db0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	e0f6      	b.n	8009f5e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	2b03      	cmp	r3, #3
 8009d76:	d107      	bne.n	8009d88 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009d78:	4b36      	ldr	r3, [pc, #216]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d115      	bne.n	8009db0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009d84:	2301      	movs	r3, #1
 8009d86:	e0ea      	b.n	8009f5e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d107      	bne.n	8009da0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009d90:	4b30      	ldr	r3, [pc, #192]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d109      	bne.n	8009db0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	e0de      	b.n	8009f5e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009da0:	4b2c      	ldr	r3, [pc, #176]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f003 0304 	and.w	r3, r3, #4
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d101      	bne.n	8009db0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	e0d6      	b.n	8009f5e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009db0:	4b28      	ldr	r3, [pc, #160]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009db2:	691b      	ldr	r3, [r3, #16]
 8009db4:	f023 0207 	bic.w	r2, r3, #7
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	4925      	ldr	r1, [pc, #148]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dc2:	f7f8 fbbd 	bl	8002540 <HAL_GetTick>
 8009dc6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009dc8:	e00a      	b.n	8009de0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009dca:	f7f8 fbb9 	bl	8002540 <HAL_GetTick>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	1ad3      	subs	r3, r2, r3
 8009dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d901      	bls.n	8009de0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009ddc:	2303      	movs	r3, #3
 8009dde:	e0be      	b.n	8009f5e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009de0:	4b1c      	ldr	r3, [pc, #112]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009de2:	691b      	ldr	r3, [r3, #16]
 8009de4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	00db      	lsls	r3, r3, #3
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d1eb      	bne.n	8009dca <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f003 0302 	and.w	r3, r3, #2
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d010      	beq.n	8009e20 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	68da      	ldr	r2, [r3, #12]
 8009e02:	4b14      	ldr	r3, [pc, #80]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009e04:	699b      	ldr	r3, [r3, #24]
 8009e06:	f003 030f 	and.w	r3, r3, #15
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d208      	bcs.n	8009e20 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e0e:	4b11      	ldr	r3, [pc, #68]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009e10:	699b      	ldr	r3, [r3, #24]
 8009e12:	f023 020f 	bic.w	r2, r3, #15
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	490e      	ldr	r1, [pc, #56]	; (8009e54 <HAL_RCC_ClockConfig+0x244>)
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009e20:	4b0b      	ldr	r3, [pc, #44]	; (8009e50 <HAL_RCC_ClockConfig+0x240>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f003 030f 	and.w	r3, r3, #15
 8009e28:	683a      	ldr	r2, [r7, #0]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d214      	bcs.n	8009e58 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e2e:	4b08      	ldr	r3, [pc, #32]	; (8009e50 <HAL_RCC_ClockConfig+0x240>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f023 020f 	bic.w	r2, r3, #15
 8009e36:	4906      	ldr	r1, [pc, #24]	; (8009e50 <HAL_RCC_ClockConfig+0x240>)
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e3e:	4b04      	ldr	r3, [pc, #16]	; (8009e50 <HAL_RCC_ClockConfig+0x240>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f003 030f 	and.w	r3, r3, #15
 8009e46:	683a      	ldr	r2, [r7, #0]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d005      	beq.n	8009e58 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	e086      	b.n	8009f5e <HAL_RCC_ClockConfig+0x34e>
 8009e50:	52002000 	.word	0x52002000
 8009e54:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f003 0304 	and.w	r3, r3, #4
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d010      	beq.n	8009e86 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	691a      	ldr	r2, [r3, #16]
 8009e68:	4b3f      	ldr	r3, [pc, #252]	; (8009f68 <HAL_RCC_ClockConfig+0x358>)
 8009e6a:	699b      	ldr	r3, [r3, #24]
 8009e6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d208      	bcs.n	8009e86 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009e74:	4b3c      	ldr	r3, [pc, #240]	; (8009f68 <HAL_RCC_ClockConfig+0x358>)
 8009e76:	699b      	ldr	r3, [r3, #24]
 8009e78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	691b      	ldr	r3, [r3, #16]
 8009e80:	4939      	ldr	r1, [pc, #228]	; (8009f68 <HAL_RCC_ClockConfig+0x358>)
 8009e82:	4313      	orrs	r3, r2
 8009e84:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f003 0308 	and.w	r3, r3, #8
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d010      	beq.n	8009eb4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	695a      	ldr	r2, [r3, #20]
 8009e96:	4b34      	ldr	r3, [pc, #208]	; (8009f68 <HAL_RCC_ClockConfig+0x358>)
 8009e98:	69db      	ldr	r3, [r3, #28]
 8009e9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d208      	bcs.n	8009eb4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009ea2:	4b31      	ldr	r3, [pc, #196]	; (8009f68 <HAL_RCC_ClockConfig+0x358>)
 8009ea4:	69db      	ldr	r3, [r3, #28]
 8009ea6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	695b      	ldr	r3, [r3, #20]
 8009eae:	492e      	ldr	r1, [pc, #184]	; (8009f68 <HAL_RCC_ClockConfig+0x358>)
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f003 0310 	and.w	r3, r3, #16
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d010      	beq.n	8009ee2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	699a      	ldr	r2, [r3, #24]
 8009ec4:	4b28      	ldr	r3, [pc, #160]	; (8009f68 <HAL_RCC_ClockConfig+0x358>)
 8009ec6:	69db      	ldr	r3, [r3, #28]
 8009ec8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d208      	bcs.n	8009ee2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009ed0:	4b25      	ldr	r3, [pc, #148]	; (8009f68 <HAL_RCC_ClockConfig+0x358>)
 8009ed2:	69db      	ldr	r3, [r3, #28]
 8009ed4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	699b      	ldr	r3, [r3, #24]
 8009edc:	4922      	ldr	r1, [pc, #136]	; (8009f68 <HAL_RCC_ClockConfig+0x358>)
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f003 0320 	and.w	r3, r3, #32
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d010      	beq.n	8009f10 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	69da      	ldr	r2, [r3, #28]
 8009ef2:	4b1d      	ldr	r3, [pc, #116]	; (8009f68 <HAL_RCC_ClockConfig+0x358>)
 8009ef4:	6a1b      	ldr	r3, [r3, #32]
 8009ef6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d208      	bcs.n	8009f10 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009efe:	4b1a      	ldr	r3, [pc, #104]	; (8009f68 <HAL_RCC_ClockConfig+0x358>)
 8009f00:	6a1b      	ldr	r3, [r3, #32]
 8009f02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	69db      	ldr	r3, [r3, #28]
 8009f0a:	4917      	ldr	r1, [pc, #92]	; (8009f68 <HAL_RCC_ClockConfig+0x358>)
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009f10:	f000 f89e 	bl	800a050 <HAL_RCC_GetSysClockFreq>
 8009f14:	4602      	mov	r2, r0
 8009f16:	4b14      	ldr	r3, [pc, #80]	; (8009f68 <HAL_RCC_ClockConfig+0x358>)
 8009f18:	699b      	ldr	r3, [r3, #24]
 8009f1a:	0a1b      	lsrs	r3, r3, #8
 8009f1c:	f003 030f 	and.w	r3, r3, #15
 8009f20:	4912      	ldr	r1, [pc, #72]	; (8009f6c <HAL_RCC_ClockConfig+0x35c>)
 8009f22:	5ccb      	ldrb	r3, [r1, r3]
 8009f24:	f003 031f 	and.w	r3, r3, #31
 8009f28:	fa22 f303 	lsr.w	r3, r2, r3
 8009f2c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009f2e:	4b0e      	ldr	r3, [pc, #56]	; (8009f68 <HAL_RCC_ClockConfig+0x358>)
 8009f30:	699b      	ldr	r3, [r3, #24]
 8009f32:	f003 030f 	and.w	r3, r3, #15
 8009f36:	4a0d      	ldr	r2, [pc, #52]	; (8009f6c <HAL_RCC_ClockConfig+0x35c>)
 8009f38:	5cd3      	ldrb	r3, [r2, r3]
 8009f3a:	f003 031f 	and.w	r3, r3, #31
 8009f3e:	693a      	ldr	r2, [r7, #16]
 8009f40:	fa22 f303 	lsr.w	r3, r2, r3
 8009f44:	4a0a      	ldr	r2, [pc, #40]	; (8009f70 <HAL_RCC_ClockConfig+0x360>)
 8009f46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009f48:	4a0a      	ldr	r2, [pc, #40]	; (8009f74 <HAL_RCC_ClockConfig+0x364>)
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009f4e:	4b0a      	ldr	r3, [pc, #40]	; (8009f78 <HAL_RCC_ClockConfig+0x368>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7f8 faaa 	bl	80024ac <HAL_InitTick>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3718      	adds	r7, #24
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	58024400 	.word	0x58024400
 8009f6c:	08013060 	.word	0x08013060
 8009f70:	24000004 	.word	0x24000004
 8009f74:	24000000 	.word	0x24000000
 8009f78:	24000008 	.word	0x24000008

08009f7c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b08c      	sub	sp, #48	; 0x30
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	60b9      	str	r1, [r7, #8]
 8009f86:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d12a      	bne.n	8009fe4 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8009f8e:	4b2d      	ldr	r3, [pc, #180]	; (800a044 <HAL_RCC_MCOConfig+0xc8>)
 8009f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f94:	4a2b      	ldr	r2, [pc, #172]	; (800a044 <HAL_RCC_MCOConfig+0xc8>)
 8009f96:	f043 0301 	orr.w	r3, r3, #1
 8009f9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009f9e:	4b29      	ldr	r3, [pc, #164]	; (800a044 <HAL_RCC_MCOConfig+0xc8>)
 8009fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009fa4:	f003 0301 	and.w	r3, r3, #1
 8009fa8:	61bb      	str	r3, [r7, #24]
 8009faa:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8009fac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fb2:	2302      	movs	r3, #2
 8009fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009fb6:	2303      	movs	r3, #3
 8009fb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8009fc2:	f107 031c 	add.w	r3, r7, #28
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	481f      	ldr	r0, [pc, #124]	; (800a048 <HAL_RCC_MCOConfig+0xcc>)
 8009fca:	f7fd fca1 	bl	8007910 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8009fce:	4b1d      	ldr	r3, [pc, #116]	; (800a044 <HAL_RCC_MCOConfig+0xc8>)
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8009fd6:	68b9      	ldr	r1, [r7, #8]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	430b      	orrs	r3, r1
 8009fdc:	4919      	ldr	r1, [pc, #100]	; (800a044 <HAL_RCC_MCOConfig+0xc8>)
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8009fe2:	e02a      	b.n	800a03a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8009fe4:	4b17      	ldr	r3, [pc, #92]	; (800a044 <HAL_RCC_MCOConfig+0xc8>)
 8009fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009fea:	4a16      	ldr	r2, [pc, #88]	; (800a044 <HAL_RCC_MCOConfig+0xc8>)
 8009fec:	f043 0304 	orr.w	r3, r3, #4
 8009ff0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009ff4:	4b13      	ldr	r3, [pc, #76]	; (800a044 <HAL_RCC_MCOConfig+0xc8>)
 8009ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ffa:	f003 0304 	and.w	r3, r3, #4
 8009ffe:	617b      	str	r3, [r7, #20]
 800a000:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a002:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a008:	2302      	movs	r3, #2
 800a00a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a00c:	2303      	movs	r3, #3
 800a00e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a010:	2300      	movs	r3, #0
 800a012:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a014:	2300      	movs	r3, #0
 800a016:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a018:	f107 031c 	add.w	r3, r7, #28
 800a01c:	4619      	mov	r1, r3
 800a01e:	480b      	ldr	r0, [pc, #44]	; (800a04c <HAL_RCC_MCOConfig+0xd0>)
 800a020:	f7fd fc76 	bl	8007910 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a024:	4b07      	ldr	r3, [pc, #28]	; (800a044 <HAL_RCC_MCOConfig+0xc8>)
 800a026:	691b      	ldr	r3, [r3, #16]
 800a028:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	01d9      	lsls	r1, r3, #7
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	430b      	orrs	r3, r1
 800a034:	4903      	ldr	r1, [pc, #12]	; (800a044 <HAL_RCC_MCOConfig+0xc8>)
 800a036:	4313      	orrs	r3, r2
 800a038:	610b      	str	r3, [r1, #16]
}
 800a03a:	bf00      	nop
 800a03c:	3730      	adds	r7, #48	; 0x30
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
 800a042:	bf00      	nop
 800a044:	58024400 	.word	0x58024400
 800a048:	58020000 	.word	0x58020000
 800a04c:	58020800 	.word	0x58020800

0800a050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a050:	b480      	push	{r7}
 800a052:	b089      	sub	sp, #36	; 0x24
 800a054:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a056:	4bb3      	ldr	r3, [pc, #716]	; (800a324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a058:	691b      	ldr	r3, [r3, #16]
 800a05a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a05e:	2b18      	cmp	r3, #24
 800a060:	f200 8155 	bhi.w	800a30e <HAL_RCC_GetSysClockFreq+0x2be>
 800a064:	a201      	add	r2, pc, #4	; (adr r2, 800a06c <HAL_RCC_GetSysClockFreq+0x1c>)
 800a066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a06a:	bf00      	nop
 800a06c:	0800a0d1 	.word	0x0800a0d1
 800a070:	0800a30f 	.word	0x0800a30f
 800a074:	0800a30f 	.word	0x0800a30f
 800a078:	0800a30f 	.word	0x0800a30f
 800a07c:	0800a30f 	.word	0x0800a30f
 800a080:	0800a30f 	.word	0x0800a30f
 800a084:	0800a30f 	.word	0x0800a30f
 800a088:	0800a30f 	.word	0x0800a30f
 800a08c:	0800a0f7 	.word	0x0800a0f7
 800a090:	0800a30f 	.word	0x0800a30f
 800a094:	0800a30f 	.word	0x0800a30f
 800a098:	0800a30f 	.word	0x0800a30f
 800a09c:	0800a30f 	.word	0x0800a30f
 800a0a0:	0800a30f 	.word	0x0800a30f
 800a0a4:	0800a30f 	.word	0x0800a30f
 800a0a8:	0800a30f 	.word	0x0800a30f
 800a0ac:	0800a0fd 	.word	0x0800a0fd
 800a0b0:	0800a30f 	.word	0x0800a30f
 800a0b4:	0800a30f 	.word	0x0800a30f
 800a0b8:	0800a30f 	.word	0x0800a30f
 800a0bc:	0800a30f 	.word	0x0800a30f
 800a0c0:	0800a30f 	.word	0x0800a30f
 800a0c4:	0800a30f 	.word	0x0800a30f
 800a0c8:	0800a30f 	.word	0x0800a30f
 800a0cc:	0800a103 	.word	0x0800a103
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0d0:	4b94      	ldr	r3, [pc, #592]	; (800a324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f003 0320 	and.w	r3, r3, #32
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d009      	beq.n	800a0f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a0dc:	4b91      	ldr	r3, [pc, #580]	; (800a324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	08db      	lsrs	r3, r3, #3
 800a0e2:	f003 0303 	and.w	r3, r3, #3
 800a0e6:	4a90      	ldr	r2, [pc, #576]	; (800a328 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a0e8:	fa22 f303 	lsr.w	r3, r2, r3
 800a0ec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a0ee:	e111      	b.n	800a314 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a0f0:	4b8d      	ldr	r3, [pc, #564]	; (800a328 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a0f2:	61bb      	str	r3, [r7, #24]
    break;
 800a0f4:	e10e      	b.n	800a314 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a0f6:	4b8d      	ldr	r3, [pc, #564]	; (800a32c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a0f8:	61bb      	str	r3, [r7, #24]
    break;
 800a0fa:	e10b      	b.n	800a314 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a0fc:	4b8c      	ldr	r3, [pc, #560]	; (800a330 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a0fe:	61bb      	str	r3, [r7, #24]
    break;
 800a100:	e108      	b.n	800a314 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a102:	4b88      	ldr	r3, [pc, #544]	; (800a324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a106:	f003 0303 	and.w	r3, r3, #3
 800a10a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a10c:	4b85      	ldr	r3, [pc, #532]	; (800a324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a10e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a110:	091b      	lsrs	r3, r3, #4
 800a112:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a116:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a118:	4b82      	ldr	r3, [pc, #520]	; (800a324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a11c:	f003 0301 	and.w	r3, r3, #1
 800a120:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a122:	4b80      	ldr	r3, [pc, #512]	; (800a324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a126:	08db      	lsrs	r3, r3, #3
 800a128:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a12c:	68fa      	ldr	r2, [r7, #12]
 800a12e:	fb02 f303 	mul.w	r3, r2, r3
 800a132:	ee07 3a90 	vmov	s15, r3
 800a136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a13a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	2b00      	cmp	r3, #0
 800a142:	f000 80e1 	beq.w	800a308 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	2b02      	cmp	r3, #2
 800a14a:	f000 8083 	beq.w	800a254 <HAL_RCC_GetSysClockFreq+0x204>
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	2b02      	cmp	r3, #2
 800a152:	f200 80a1 	bhi.w	800a298 <HAL_RCC_GetSysClockFreq+0x248>
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d003      	beq.n	800a164 <HAL_RCC_GetSysClockFreq+0x114>
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d056      	beq.n	800a210 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a162:	e099      	b.n	800a298 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a164:	4b6f      	ldr	r3, [pc, #444]	; (800a324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f003 0320 	and.w	r3, r3, #32
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d02d      	beq.n	800a1cc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a170:	4b6c      	ldr	r3, [pc, #432]	; (800a324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	08db      	lsrs	r3, r3, #3
 800a176:	f003 0303 	and.w	r3, r3, #3
 800a17a:	4a6b      	ldr	r2, [pc, #428]	; (800a328 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a17c:	fa22 f303 	lsr.w	r3, r2, r3
 800a180:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	ee07 3a90 	vmov	s15, r3
 800a188:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	ee07 3a90 	vmov	s15, r3
 800a192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a19a:	4b62      	ldr	r3, [pc, #392]	; (800a324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a19c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a19e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1a2:	ee07 3a90 	vmov	s15, r3
 800a1a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1aa:	ed97 6a02 	vldr	s12, [r7, #8]
 800a1ae:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a334 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a1b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a1ca:	e087      	b.n	800a2dc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	ee07 3a90 	vmov	s15, r3
 800a1d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1d6:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a338 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a1da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1de:	4b51      	ldr	r3, [pc, #324]	; (800a324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1e6:	ee07 3a90 	vmov	s15, r3
 800a1ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1ee:	ed97 6a02 	vldr	s12, [r7, #8]
 800a1f2:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a334 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a1f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a20a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a20e:	e065      	b.n	800a2dc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	ee07 3a90 	vmov	s15, r3
 800a216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a21a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a33c <HAL_RCC_GetSysClockFreq+0x2ec>
 800a21e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a222:	4b40      	ldr	r3, [pc, #256]	; (800a324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a22a:	ee07 3a90 	vmov	s15, r3
 800a22e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a232:	ed97 6a02 	vldr	s12, [r7, #8]
 800a236:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a334 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a23a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a23e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a24a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a24e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a252:	e043      	b.n	800a2dc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	ee07 3a90 	vmov	s15, r3
 800a25a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a25e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a340 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a266:	4b2f      	ldr	r3, [pc, #188]	; (800a324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a26a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a26e:	ee07 3a90 	vmov	s15, r3
 800a272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a276:	ed97 6a02 	vldr	s12, [r7, #8]
 800a27a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a334 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a27e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a28a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a28e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a292:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a296:	e021      	b.n	800a2dc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	ee07 3a90 	vmov	s15, r3
 800a29e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2a2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a33c <HAL_RCC_GetSysClockFreq+0x2ec>
 800a2a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2aa:	4b1e      	ldr	r3, [pc, #120]	; (800a324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2b2:	ee07 3a90 	vmov	s15, r3
 800a2b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2ba:	ed97 6a02 	vldr	s12, [r7, #8]
 800a2be:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a334 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a2c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a2da:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a2dc:	4b11      	ldr	r3, [pc, #68]	; (800a324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2e0:	0a5b      	lsrs	r3, r3, #9
 800a2e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	ee07 3a90 	vmov	s15, r3
 800a2f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a2f4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a300:	ee17 3a90 	vmov	r3, s15
 800a304:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800a306:	e005      	b.n	800a314 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800a308:	2300      	movs	r3, #0
 800a30a:	61bb      	str	r3, [r7, #24]
    break;
 800a30c:	e002      	b.n	800a314 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800a30e:	4b07      	ldr	r3, [pc, #28]	; (800a32c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a310:	61bb      	str	r3, [r7, #24]
    break;
 800a312:	bf00      	nop
  }

  return sysclockfreq;
 800a314:	69bb      	ldr	r3, [r7, #24]
}
 800a316:	4618      	mov	r0, r3
 800a318:	3724      	adds	r7, #36	; 0x24
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr
 800a322:	bf00      	nop
 800a324:	58024400 	.word	0x58024400
 800a328:	03d09000 	.word	0x03d09000
 800a32c:	003d0900 	.word	0x003d0900
 800a330:	007a1200 	.word	0x007a1200
 800a334:	46000000 	.word	0x46000000
 800a338:	4c742400 	.word	0x4c742400
 800a33c:	4a742400 	.word	0x4a742400
 800a340:	4af42400 	.word	0x4af42400

0800a344 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a34a:	f7ff fe81 	bl	800a050 <HAL_RCC_GetSysClockFreq>
 800a34e:	4602      	mov	r2, r0
 800a350:	4b10      	ldr	r3, [pc, #64]	; (800a394 <HAL_RCC_GetHCLKFreq+0x50>)
 800a352:	699b      	ldr	r3, [r3, #24]
 800a354:	0a1b      	lsrs	r3, r3, #8
 800a356:	f003 030f 	and.w	r3, r3, #15
 800a35a:	490f      	ldr	r1, [pc, #60]	; (800a398 <HAL_RCC_GetHCLKFreq+0x54>)
 800a35c:	5ccb      	ldrb	r3, [r1, r3]
 800a35e:	f003 031f 	and.w	r3, r3, #31
 800a362:	fa22 f303 	lsr.w	r3, r2, r3
 800a366:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a368:	4b0a      	ldr	r3, [pc, #40]	; (800a394 <HAL_RCC_GetHCLKFreq+0x50>)
 800a36a:	699b      	ldr	r3, [r3, #24]
 800a36c:	f003 030f 	and.w	r3, r3, #15
 800a370:	4a09      	ldr	r2, [pc, #36]	; (800a398 <HAL_RCC_GetHCLKFreq+0x54>)
 800a372:	5cd3      	ldrb	r3, [r2, r3]
 800a374:	f003 031f 	and.w	r3, r3, #31
 800a378:	687a      	ldr	r2, [r7, #4]
 800a37a:	fa22 f303 	lsr.w	r3, r2, r3
 800a37e:	4a07      	ldr	r2, [pc, #28]	; (800a39c <HAL_RCC_GetHCLKFreq+0x58>)
 800a380:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a382:	4a07      	ldr	r2, [pc, #28]	; (800a3a0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a388:	4b04      	ldr	r3, [pc, #16]	; (800a39c <HAL_RCC_GetHCLKFreq+0x58>)
 800a38a:	681b      	ldr	r3, [r3, #0]
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}
 800a394:	58024400 	.word	0x58024400
 800a398:	08013060 	.word	0x08013060
 800a39c:	24000004 	.word	0x24000004
 800a3a0:	24000000 	.word	0x24000000

0800a3a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a3a8:	f7ff ffcc 	bl	800a344 <HAL_RCC_GetHCLKFreq>
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	4b06      	ldr	r3, [pc, #24]	; (800a3c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a3b0:	69db      	ldr	r3, [r3, #28]
 800a3b2:	091b      	lsrs	r3, r3, #4
 800a3b4:	f003 0307 	and.w	r3, r3, #7
 800a3b8:	4904      	ldr	r1, [pc, #16]	; (800a3cc <HAL_RCC_GetPCLK1Freq+0x28>)
 800a3ba:	5ccb      	ldrb	r3, [r1, r3]
 800a3bc:	f003 031f 	and.w	r3, r3, #31
 800a3c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	58024400 	.word	0x58024400
 800a3cc:	08013060 	.word	0x08013060

0800a3d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a3d4:	f7ff ffb6 	bl	800a344 <HAL_RCC_GetHCLKFreq>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	4b06      	ldr	r3, [pc, #24]	; (800a3f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a3dc:	69db      	ldr	r3, [r3, #28]
 800a3de:	0a1b      	lsrs	r3, r3, #8
 800a3e0:	f003 0307 	and.w	r3, r3, #7
 800a3e4:	4904      	ldr	r1, [pc, #16]	; (800a3f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a3e6:	5ccb      	ldrb	r3, [r1, r3]
 800a3e8:	f003 031f 	and.w	r3, r3, #31
 800a3ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	58024400 	.word	0x58024400
 800a3f8:	08013060 	.word	0x08013060

0800a3fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b086      	sub	sp, #24
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a404:	2300      	movs	r3, #0
 800a406:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a408:	2300      	movs	r3, #0
 800a40a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a414:	2b00      	cmp	r3, #0
 800a416:	d03f      	beq.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a41c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a420:	d02a      	beq.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a422:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a426:	d824      	bhi.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a428:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a42c:	d018      	beq.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a42e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a432:	d81e      	bhi.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a434:	2b00      	cmp	r3, #0
 800a436:	d003      	beq.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a438:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a43c:	d007      	beq.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a43e:	e018      	b.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a440:	4ba3      	ldr	r3, [pc, #652]	; (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a444:	4aa2      	ldr	r2, [pc, #648]	; (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a44a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a44c:	e015      	b.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	3304      	adds	r3, #4
 800a452:	2102      	movs	r1, #2
 800a454:	4618      	mov	r0, r3
 800a456:	f001 fff9 	bl	800c44c <RCCEx_PLL2_Config>
 800a45a:	4603      	mov	r3, r0
 800a45c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a45e:	e00c      	b.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	3324      	adds	r3, #36	; 0x24
 800a464:	2102      	movs	r1, #2
 800a466:	4618      	mov	r0, r3
 800a468:	f002 f8a2 	bl	800c5b0 <RCCEx_PLL3_Config>
 800a46c:	4603      	mov	r3, r0
 800a46e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a470:	e003      	b.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a472:	2301      	movs	r3, #1
 800a474:	75fb      	strb	r3, [r7, #23]
      break;
 800a476:	e000      	b.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a478:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a47a:	7dfb      	ldrb	r3, [r7, #23]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d109      	bne.n	800a494 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a480:	4b93      	ldr	r3, [pc, #588]	; (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a484:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a48c:	4990      	ldr	r1, [pc, #576]	; (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a48e:	4313      	orrs	r3, r2
 800a490:	650b      	str	r3, [r1, #80]	; 0x50
 800a492:	e001      	b.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a494:	7dfb      	ldrb	r3, [r7, #23]
 800a496:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d03d      	beq.n	800a520 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4a8:	2b04      	cmp	r3, #4
 800a4aa:	d826      	bhi.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a4ac:	a201      	add	r2, pc, #4	; (adr r2, 800a4b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800a4ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b2:	bf00      	nop
 800a4b4:	0800a4c9 	.word	0x0800a4c9
 800a4b8:	0800a4d7 	.word	0x0800a4d7
 800a4bc:	0800a4e9 	.word	0x0800a4e9
 800a4c0:	0800a501 	.word	0x0800a501
 800a4c4:	0800a501 	.word	0x0800a501
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4c8:	4b81      	ldr	r3, [pc, #516]	; (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4cc:	4a80      	ldr	r2, [pc, #512]	; (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a4ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a4d4:	e015      	b.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	3304      	adds	r3, #4
 800a4da:	2100      	movs	r1, #0
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f001 ffb5 	bl	800c44c <RCCEx_PLL2_Config>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a4e6:	e00c      	b.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	3324      	adds	r3, #36	; 0x24
 800a4ec:	2100      	movs	r1, #0
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f002 f85e 	bl	800c5b0 <RCCEx_PLL3_Config>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a4f8:	e003      	b.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	75fb      	strb	r3, [r7, #23]
      break;
 800a4fe:	e000      	b.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800a500:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a502:	7dfb      	ldrb	r3, [r7, #23]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d109      	bne.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a508:	4b71      	ldr	r3, [pc, #452]	; (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a50a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a50c:	f023 0207 	bic.w	r2, r3, #7
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a514:	496e      	ldr	r1, [pc, #440]	; (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a516:	4313      	orrs	r3, r2
 800a518:	650b      	str	r3, [r1, #80]	; 0x50
 800a51a:	e001      	b.n	800a520 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a51c:	7dfb      	ldrb	r3, [r7, #23]
 800a51e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d042      	beq.n	800a5b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a534:	d02b      	beq.n	800a58e <HAL_RCCEx_PeriphCLKConfig+0x192>
 800a536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a53a:	d825      	bhi.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a53c:	2bc0      	cmp	r3, #192	; 0xc0
 800a53e:	d028      	beq.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a540:	2bc0      	cmp	r3, #192	; 0xc0
 800a542:	d821      	bhi.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a544:	2b80      	cmp	r3, #128	; 0x80
 800a546:	d016      	beq.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800a548:	2b80      	cmp	r3, #128	; 0x80
 800a54a:	d81d      	bhi.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d002      	beq.n	800a556 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800a550:	2b40      	cmp	r3, #64	; 0x40
 800a552:	d007      	beq.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800a554:	e018      	b.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a556:	4b5e      	ldr	r3, [pc, #376]	; (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a55a:	4a5d      	ldr	r2, [pc, #372]	; (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a55c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a560:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a562:	e017      	b.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	3304      	adds	r3, #4
 800a568:	2100      	movs	r1, #0
 800a56a:	4618      	mov	r0, r3
 800a56c:	f001 ff6e 	bl	800c44c <RCCEx_PLL2_Config>
 800a570:	4603      	mov	r3, r0
 800a572:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a574:	e00e      	b.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	3324      	adds	r3, #36	; 0x24
 800a57a:	2100      	movs	r1, #0
 800a57c:	4618      	mov	r0, r3
 800a57e:	f002 f817 	bl	800c5b0 <RCCEx_PLL3_Config>
 800a582:	4603      	mov	r3, r0
 800a584:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a586:	e005      	b.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a588:	2301      	movs	r3, #1
 800a58a:	75fb      	strb	r3, [r7, #23]
      break;
 800a58c:	e002      	b.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a58e:	bf00      	nop
 800a590:	e000      	b.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a592:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a594:	7dfb      	ldrb	r3, [r7, #23]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d109      	bne.n	800a5ae <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a59a:	4b4d      	ldr	r3, [pc, #308]	; (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a59c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a59e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5a6:	494a      	ldr	r1, [pc, #296]	; (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	650b      	str	r3, [r1, #80]	; 0x50
 800a5ac:	e001      	b.n	800a5b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5ae:	7dfb      	ldrb	r3, [r7, #23]
 800a5b0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d049      	beq.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a5c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a5c8:	d030      	beq.n	800a62c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800a5ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a5ce:	d82a      	bhi.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a5d0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a5d4:	d02c      	beq.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800a5d6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a5da:	d824      	bhi.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a5dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a5e0:	d018      	beq.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800a5e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a5e6:	d81e      	bhi.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d003      	beq.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800a5ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a5f0:	d007      	beq.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a5f2:	e018      	b.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5f4:	4b36      	ldr	r3, [pc, #216]	; (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f8:	4a35      	ldr	r2, [pc, #212]	; (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a5fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a600:	e017      	b.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	3304      	adds	r3, #4
 800a606:	2100      	movs	r1, #0
 800a608:	4618      	mov	r0, r3
 800a60a:	f001 ff1f 	bl	800c44c <RCCEx_PLL2_Config>
 800a60e:	4603      	mov	r3, r0
 800a610:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a612:	e00e      	b.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	3324      	adds	r3, #36	; 0x24
 800a618:	2100      	movs	r1, #0
 800a61a:	4618      	mov	r0, r3
 800a61c:	f001 ffc8 	bl	800c5b0 <RCCEx_PLL3_Config>
 800a620:	4603      	mov	r3, r0
 800a622:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a624:	e005      	b.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a626:	2301      	movs	r3, #1
 800a628:	75fb      	strb	r3, [r7, #23]
      break;
 800a62a:	e002      	b.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a62c:	bf00      	nop
 800a62e:	e000      	b.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a630:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a632:	7dfb      	ldrb	r3, [r7, #23]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d10a      	bne.n	800a64e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a638:	4b25      	ldr	r3, [pc, #148]	; (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a63a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a63c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a646:	4922      	ldr	r1, [pc, #136]	; (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a648:	4313      	orrs	r3, r2
 800a64a:	658b      	str	r3, [r1, #88]	; 0x58
 800a64c:	e001      	b.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a64e:	7dfb      	ldrb	r3, [r7, #23]
 800a650:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d04b      	beq.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a664:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a668:	d030      	beq.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800a66a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a66e:	d82a      	bhi.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a670:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a674:	d02e      	beq.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800a676:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a67a:	d824      	bhi.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a67c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a680:	d018      	beq.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800a682:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a686:	d81e      	bhi.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d003      	beq.n	800a694 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a68c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a690:	d007      	beq.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a692:	e018      	b.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a694:	4b0e      	ldr	r3, [pc, #56]	; (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a698:	4a0d      	ldr	r2, [pc, #52]	; (800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a69a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a69e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a6a0:	e019      	b.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	3304      	adds	r3, #4
 800a6a6:	2100      	movs	r1, #0
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f001 fecf 	bl	800c44c <RCCEx_PLL2_Config>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a6b2:	e010      	b.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	3324      	adds	r3, #36	; 0x24
 800a6b8:	2100      	movs	r1, #0
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f001 ff78 	bl	800c5b0 <RCCEx_PLL3_Config>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a6c4:	e007      	b.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	75fb      	strb	r3, [r7, #23]
      break;
 800a6ca:	e004      	b.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800a6cc:	bf00      	nop
 800a6ce:	e002      	b.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a6d0:	58024400 	.word	0x58024400
      break;
 800a6d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a6d6:	7dfb      	ldrb	r3, [r7, #23]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d10a      	bne.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a6dc:	4b99      	ldr	r3, [pc, #612]	; (800a944 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a6de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6e0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a6ea:	4996      	ldr	r1, [pc, #600]	; (800a944 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a6ec:	4313      	orrs	r3, r2
 800a6ee:	658b      	str	r3, [r1, #88]	; 0x58
 800a6f0:	e001      	b.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6f2:	7dfb      	ldrb	r3, [r7, #23]
 800a6f4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d032      	beq.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a706:	2b30      	cmp	r3, #48	; 0x30
 800a708:	d01c      	beq.n	800a744 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800a70a:	2b30      	cmp	r3, #48	; 0x30
 800a70c:	d817      	bhi.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a70e:	2b20      	cmp	r3, #32
 800a710:	d00c      	beq.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x330>
 800a712:	2b20      	cmp	r3, #32
 800a714:	d813      	bhi.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a716:	2b00      	cmp	r3, #0
 800a718:	d016      	beq.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800a71a:	2b10      	cmp	r3, #16
 800a71c:	d10f      	bne.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a71e:	4b89      	ldr	r3, [pc, #548]	; (800a944 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a722:	4a88      	ldr	r2, [pc, #544]	; (800a944 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a728:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a72a:	e00e      	b.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	3304      	adds	r3, #4
 800a730:	2102      	movs	r1, #2
 800a732:	4618      	mov	r0, r3
 800a734:	f001 fe8a 	bl	800c44c <RCCEx_PLL2_Config>
 800a738:	4603      	mov	r3, r0
 800a73a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a73c:	e005      	b.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a73e:	2301      	movs	r3, #1
 800a740:	75fb      	strb	r3, [r7, #23]
      break;
 800a742:	e002      	b.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800a744:	bf00      	nop
 800a746:	e000      	b.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800a748:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a74a:	7dfb      	ldrb	r3, [r7, #23]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d109      	bne.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a750:	4b7c      	ldr	r3, [pc, #496]	; (800a944 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a754:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a75c:	4979      	ldr	r1, [pc, #484]	; (800a944 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a75e:	4313      	orrs	r3, r2
 800a760:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a762:	e001      	b.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a764:	7dfb      	ldrb	r3, [r7, #23]
 800a766:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a770:	2b00      	cmp	r3, #0
 800a772:	d047      	beq.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a778:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a77c:	d030      	beq.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800a77e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a782:	d82a      	bhi.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800a784:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a788:	d02c      	beq.n	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800a78a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a78e:	d824      	bhi.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800a790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a794:	d018      	beq.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800a796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a79a:	d81e      	bhi.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d003      	beq.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800a7a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7a4:	d007      	beq.n	800a7b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800a7a6:	e018      	b.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7a8:	4b66      	ldr	r3, [pc, #408]	; (800a944 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ac:	4a65      	ldr	r2, [pc, #404]	; (800a944 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a7ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a7b4:	e017      	b.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	3304      	adds	r3, #4
 800a7ba:	2100      	movs	r1, #0
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f001 fe45 	bl	800c44c <RCCEx_PLL2_Config>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a7c6:	e00e      	b.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	3324      	adds	r3, #36	; 0x24
 800a7cc:	2100      	movs	r1, #0
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f001 feee 	bl	800c5b0 <RCCEx_PLL3_Config>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a7d8:	e005      	b.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a7da:	2301      	movs	r3, #1
 800a7dc:	75fb      	strb	r3, [r7, #23]
      break;
 800a7de:	e002      	b.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800a7e0:	bf00      	nop
 800a7e2:	e000      	b.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800a7e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7e6:	7dfb      	ldrb	r3, [r7, #23]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d109      	bne.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a7ec:	4b55      	ldr	r3, [pc, #340]	; (800a944 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a7ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7f0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7f8:	4952      	ldr	r1, [pc, #328]	; (800a944 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	650b      	str	r3, [r1, #80]	; 0x50
 800a7fe:	e001      	b.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a800:	7dfb      	ldrb	r3, [r7, #23]
 800a802:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d049      	beq.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a814:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a818:	d02e      	beq.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800a81a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a81e:	d828      	bhi.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800a820:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a824:	d02a      	beq.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0x480>
 800a826:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a82a:	d822      	bhi.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800a82c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a830:	d026      	beq.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800a832:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a836:	d81c      	bhi.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800a838:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a83c:	d010      	beq.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800a83e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a842:	d816      	bhi.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800a844:	2b00      	cmp	r3, #0
 800a846:	d01d      	beq.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800a848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a84c:	d111      	bne.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	3304      	adds	r3, #4
 800a852:	2101      	movs	r1, #1
 800a854:	4618      	mov	r0, r3
 800a856:	f001 fdf9 	bl	800c44c <RCCEx_PLL2_Config>
 800a85a:	4603      	mov	r3, r0
 800a85c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a85e:	e012      	b.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	3324      	adds	r3, #36	; 0x24
 800a864:	2101      	movs	r1, #1
 800a866:	4618      	mov	r0, r3
 800a868:	f001 fea2 	bl	800c5b0 <RCCEx_PLL3_Config>
 800a86c:	4603      	mov	r3, r0
 800a86e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a870:	e009      	b.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a872:	2301      	movs	r3, #1
 800a874:	75fb      	strb	r3, [r7, #23]
      break;
 800a876:	e006      	b.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800a878:	bf00      	nop
 800a87a:	e004      	b.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800a87c:	bf00      	nop
 800a87e:	e002      	b.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800a880:	bf00      	nop
 800a882:	e000      	b.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800a884:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a886:	7dfb      	ldrb	r3, [r7, #23]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d109      	bne.n	800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a88c:	4b2d      	ldr	r3, [pc, #180]	; (800a944 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a88e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a890:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a898:	492a      	ldr	r1, [pc, #168]	; (800a944 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a89a:	4313      	orrs	r3, r2
 800a89c:	650b      	str	r3, [r1, #80]	; 0x50
 800a89e:	e001      	b.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8a0:	7dfb      	ldrb	r3, [r7, #23]
 800a8a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d04d      	beq.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a8b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a8ba:	d02e      	beq.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800a8bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a8c0:	d828      	bhi.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800a8c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8c6:	d02a      	beq.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0x522>
 800a8c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8cc:	d822      	bhi.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800a8ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a8d2:	d026      	beq.n	800a922 <HAL_RCCEx_PeriphCLKConfig+0x526>
 800a8d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a8d8:	d81c      	bhi.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800a8da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8de:	d010      	beq.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a8e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8e4:	d816      	bhi.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d01d      	beq.n	800a926 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800a8ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8ee:	d111      	bne.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	3304      	adds	r3, #4
 800a8f4:	2101      	movs	r1, #1
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f001 fda8 	bl	800c44c <RCCEx_PLL2_Config>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a900:	e012      	b.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	3324      	adds	r3, #36	; 0x24
 800a906:	2101      	movs	r1, #1
 800a908:	4618      	mov	r0, r3
 800a90a:	f001 fe51 	bl	800c5b0 <RCCEx_PLL3_Config>
 800a90e:	4603      	mov	r3, r0
 800a910:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a912:	e009      	b.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a914:	2301      	movs	r3, #1
 800a916:	75fb      	strb	r3, [r7, #23]
      break;
 800a918:	e006      	b.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800a91a:	bf00      	nop
 800a91c:	e004      	b.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800a91e:	bf00      	nop
 800a920:	e002      	b.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800a922:	bf00      	nop
 800a924:	e000      	b.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800a926:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a928:	7dfb      	ldrb	r3, [r7, #23]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d10c      	bne.n	800a948 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a92e:	4b05      	ldr	r3, [pc, #20]	; (800a944 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a932:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a93c:	4901      	ldr	r1, [pc, #4]	; (800a944 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a93e:	4313      	orrs	r3, r2
 800a940:	658b      	str	r3, [r1, #88]	; 0x58
 800a942:	e003      	b.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0x550>
 800a944:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a948:	7dfb      	ldrb	r3, [r7, #23]
 800a94a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a954:	2b00      	cmp	r3, #0
 800a956:	d02f      	beq.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a95c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a960:	d00e      	beq.n	800a980 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800a962:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a966:	d814      	bhi.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d015      	beq.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800a96c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a970:	d10f      	bne.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a972:	4baf      	ldr	r3, [pc, #700]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a976:	4aae      	ldr	r2, [pc, #696]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a97c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a97e:	e00c      	b.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	3304      	adds	r3, #4
 800a984:	2101      	movs	r1, #1
 800a986:	4618      	mov	r0, r3
 800a988:	f001 fd60 	bl	800c44c <RCCEx_PLL2_Config>
 800a98c:	4603      	mov	r3, r0
 800a98e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a990:	e003      	b.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a992:	2301      	movs	r3, #1
 800a994:	75fb      	strb	r3, [r7, #23]
      break;
 800a996:	e000      	b.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800a998:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a99a:	7dfb      	ldrb	r3, [r7, #23]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d109      	bne.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a9a0:	4ba3      	ldr	r3, [pc, #652]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a9a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9ac:	49a0      	ldr	r1, [pc, #640]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	650b      	str	r3, [r1, #80]	; 0x50
 800a9b2:	e001      	b.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9b4:	7dfb      	ldrb	r3, [r7, #23]
 800a9b6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d032      	beq.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9c8:	2b03      	cmp	r3, #3
 800a9ca:	d81b      	bhi.n	800aa04 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800a9cc:	a201      	add	r2, pc, #4	; (adr r2, 800a9d4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800a9ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d2:	bf00      	nop
 800a9d4:	0800aa0b 	.word	0x0800aa0b
 800a9d8:	0800a9e5 	.word	0x0800a9e5
 800a9dc:	0800a9f3 	.word	0x0800a9f3
 800a9e0:	0800aa0b 	.word	0x0800aa0b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9e4:	4b92      	ldr	r3, [pc, #584]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a9e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e8:	4a91      	ldr	r2, [pc, #580]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a9ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a9f0:	e00c      	b.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	3304      	adds	r3, #4
 800a9f6:	2102      	movs	r1, #2
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f001 fd27 	bl	800c44c <RCCEx_PLL2_Config>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800aa02:	e003      	b.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800aa04:	2301      	movs	r3, #1
 800aa06:	75fb      	strb	r3, [r7, #23]
      break;
 800aa08:	e000      	b.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800aa0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa0c:	7dfb      	ldrb	r3, [r7, #23]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d109      	bne.n	800aa26 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800aa12:	4b87      	ldr	r3, [pc, #540]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800aa14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa16:	f023 0203 	bic.w	r2, r3, #3
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa1e:	4984      	ldr	r1, [pc, #528]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800aa20:	4313      	orrs	r3, r2
 800aa22:	64cb      	str	r3, [r1, #76]	; 0x4c
 800aa24:	e001      	b.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa26:	7dfb      	ldrb	r3, [r7, #23]
 800aa28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	f000 8086 	beq.w	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aa38:	4b7e      	ldr	r3, [pc, #504]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4a7d      	ldr	r2, [pc, #500]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800aa3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aa44:	f7f7 fd7c 	bl	8002540 <HAL_GetTick>
 800aa48:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aa4a:	e009      	b.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa4c:	f7f7 fd78 	bl	8002540 <HAL_GetTick>
 800aa50:	4602      	mov	r2, r0
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	1ad3      	subs	r3, r2, r3
 800aa56:	2b64      	cmp	r3, #100	; 0x64
 800aa58:	d902      	bls.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800aa5a:	2303      	movs	r3, #3
 800aa5c:	75fb      	strb	r3, [r7, #23]
        break;
 800aa5e:	e005      	b.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aa60:	4b74      	ldr	r3, [pc, #464]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d0ef      	beq.n	800aa4c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800aa6c:	7dfb      	ldrb	r3, [r7, #23]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d166      	bne.n	800ab40 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800aa72:	4b6f      	ldr	r3, [pc, #444]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800aa74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aa7c:	4053      	eors	r3, r2
 800aa7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d013      	beq.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800aa86:	4b6a      	ldr	r3, [pc, #424]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800aa88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa8e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800aa90:	4b67      	ldr	r3, [pc, #412]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800aa92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa94:	4a66      	ldr	r2, [pc, #408]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800aa96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa9a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aa9c:	4b64      	ldr	r3, [pc, #400]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800aa9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaa0:	4a63      	ldr	r2, [pc, #396]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800aaa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aaa6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800aaa8:	4a61      	ldr	r2, [pc, #388]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aab8:	d115      	bne.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aaba:	f7f7 fd41 	bl	8002540 <HAL_GetTick>
 800aabe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aac0:	e00b      	b.n	800aada <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aac2:	f7f7 fd3d 	bl	8002540 <HAL_GetTick>
 800aac6:	4602      	mov	r2, r0
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	1ad3      	subs	r3, r2, r3
 800aacc:	f241 3288 	movw	r2, #5000	; 0x1388
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d902      	bls.n	800aada <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800aad4:	2303      	movs	r3, #3
 800aad6:	75fb      	strb	r3, [r7, #23]
            break;
 800aad8:	e005      	b.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aada:	4b55      	ldr	r3, [pc, #340]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800aadc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aade:	f003 0302 	and.w	r3, r3, #2
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d0ed      	beq.n	800aac2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800aae6:	7dfb      	ldrb	r3, [r7, #23]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d126      	bne.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aaf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aaf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aafa:	d10d      	bne.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800aafc:	4b4c      	ldr	r3, [pc, #304]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800aafe:	691b      	ldr	r3, [r3, #16]
 800ab00:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ab0a:	0919      	lsrs	r1, r3, #4
 800ab0c:	4b4a      	ldr	r3, [pc, #296]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800ab0e:	400b      	ands	r3, r1
 800ab10:	4947      	ldr	r1, [pc, #284]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ab12:	4313      	orrs	r3, r2
 800ab14:	610b      	str	r3, [r1, #16]
 800ab16:	e005      	b.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800ab18:	4b45      	ldr	r3, [pc, #276]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ab1a:	691b      	ldr	r3, [r3, #16]
 800ab1c:	4a44      	ldr	r2, [pc, #272]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ab1e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ab22:	6113      	str	r3, [r2, #16]
 800ab24:	4b42      	ldr	r3, [pc, #264]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ab26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ab2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab32:	493f      	ldr	r1, [pc, #252]	; (800ac30 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ab34:	4313      	orrs	r3, r2
 800ab36:	670b      	str	r3, [r1, #112]	; 0x70
 800ab38:	e004      	b.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ab3a:	7dfb      	ldrb	r3, [r7, #23]
 800ab3c:	75bb      	strb	r3, [r7, #22]
 800ab3e:	e001      	b.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab40:	7dfb      	ldrb	r3, [r7, #23]
 800ab42:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f003 0301 	and.w	r3, r3, #1
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	f000 8085 	beq.w	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab56:	2b28      	cmp	r3, #40	; 0x28
 800ab58:	d866      	bhi.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800ab5a:	a201      	add	r2, pc, #4	; (adr r2, 800ab60 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800ab5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab60:	0800ac3d 	.word	0x0800ac3d
 800ab64:	0800ac29 	.word	0x0800ac29
 800ab68:	0800ac29 	.word	0x0800ac29
 800ab6c:	0800ac29 	.word	0x0800ac29
 800ab70:	0800ac29 	.word	0x0800ac29
 800ab74:	0800ac29 	.word	0x0800ac29
 800ab78:	0800ac29 	.word	0x0800ac29
 800ab7c:	0800ac29 	.word	0x0800ac29
 800ab80:	0800ac05 	.word	0x0800ac05
 800ab84:	0800ac29 	.word	0x0800ac29
 800ab88:	0800ac29 	.word	0x0800ac29
 800ab8c:	0800ac29 	.word	0x0800ac29
 800ab90:	0800ac29 	.word	0x0800ac29
 800ab94:	0800ac29 	.word	0x0800ac29
 800ab98:	0800ac29 	.word	0x0800ac29
 800ab9c:	0800ac29 	.word	0x0800ac29
 800aba0:	0800ac17 	.word	0x0800ac17
 800aba4:	0800ac29 	.word	0x0800ac29
 800aba8:	0800ac29 	.word	0x0800ac29
 800abac:	0800ac29 	.word	0x0800ac29
 800abb0:	0800ac29 	.word	0x0800ac29
 800abb4:	0800ac29 	.word	0x0800ac29
 800abb8:	0800ac29 	.word	0x0800ac29
 800abbc:	0800ac29 	.word	0x0800ac29
 800abc0:	0800ac3d 	.word	0x0800ac3d
 800abc4:	0800ac29 	.word	0x0800ac29
 800abc8:	0800ac29 	.word	0x0800ac29
 800abcc:	0800ac29 	.word	0x0800ac29
 800abd0:	0800ac29 	.word	0x0800ac29
 800abd4:	0800ac29 	.word	0x0800ac29
 800abd8:	0800ac29 	.word	0x0800ac29
 800abdc:	0800ac29 	.word	0x0800ac29
 800abe0:	0800ac3d 	.word	0x0800ac3d
 800abe4:	0800ac29 	.word	0x0800ac29
 800abe8:	0800ac29 	.word	0x0800ac29
 800abec:	0800ac29 	.word	0x0800ac29
 800abf0:	0800ac29 	.word	0x0800ac29
 800abf4:	0800ac29 	.word	0x0800ac29
 800abf8:	0800ac29 	.word	0x0800ac29
 800abfc:	0800ac29 	.word	0x0800ac29
 800ac00:	0800ac3d 	.word	0x0800ac3d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	3304      	adds	r3, #4
 800ac08:	2101      	movs	r1, #1
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f001 fc1e 	bl	800c44c <RCCEx_PLL2_Config>
 800ac10:	4603      	mov	r3, r0
 800ac12:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ac14:	e013      	b.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	3324      	adds	r3, #36	; 0x24
 800ac1a:	2101      	movs	r1, #1
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f001 fcc7 	bl	800c5b0 <RCCEx_PLL3_Config>
 800ac22:	4603      	mov	r3, r0
 800ac24:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ac26:	e00a      	b.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ac28:	2301      	movs	r3, #1
 800ac2a:	75fb      	strb	r3, [r7, #23]
      break;
 800ac2c:	e007      	b.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x842>
 800ac2e:	bf00      	nop
 800ac30:	58024400 	.word	0x58024400
 800ac34:	58024800 	.word	0x58024800
 800ac38:	00ffffcf 	.word	0x00ffffcf
      break;
 800ac3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac3e:	7dfb      	ldrb	r3, [r7, #23]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d109      	bne.n	800ac58 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ac44:	4b96      	ldr	r3, [pc, #600]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ac46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac48:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac50:	4993      	ldr	r1, [pc, #588]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ac52:	4313      	orrs	r3, r2
 800ac54:	654b      	str	r3, [r1, #84]	; 0x54
 800ac56:	e001      	b.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac58:	7dfb      	ldrb	r3, [r7, #23]
 800ac5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f003 0302 	and.w	r3, r3, #2
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d038      	beq.n	800acda <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac6c:	2b05      	cmp	r3, #5
 800ac6e:	d821      	bhi.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800ac70:	a201      	add	r2, pc, #4	; (adr r2, 800ac78 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800ac72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac76:	bf00      	nop
 800ac78:	0800acbb 	.word	0x0800acbb
 800ac7c:	0800ac91 	.word	0x0800ac91
 800ac80:	0800aca3 	.word	0x0800aca3
 800ac84:	0800acbb 	.word	0x0800acbb
 800ac88:	0800acbb 	.word	0x0800acbb
 800ac8c:	0800acbb 	.word	0x0800acbb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	3304      	adds	r3, #4
 800ac94:	2101      	movs	r1, #1
 800ac96:	4618      	mov	r0, r3
 800ac98:	f001 fbd8 	bl	800c44c <RCCEx_PLL2_Config>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800aca0:	e00c      	b.n	800acbc <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	3324      	adds	r3, #36	; 0x24
 800aca6:	2101      	movs	r1, #1
 800aca8:	4618      	mov	r0, r3
 800acaa:	f001 fc81 	bl	800c5b0 <RCCEx_PLL3_Config>
 800acae:	4603      	mov	r3, r0
 800acb0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800acb2:	e003      	b.n	800acbc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800acb4:	2301      	movs	r3, #1
 800acb6:	75fb      	strb	r3, [r7, #23]
      break;
 800acb8:	e000      	b.n	800acbc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800acba:	bf00      	nop
    }

    if(ret == HAL_OK)
 800acbc:	7dfb      	ldrb	r3, [r7, #23]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d109      	bne.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800acc2:	4b77      	ldr	r3, [pc, #476]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800acc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acc6:	f023 0207 	bic.w	r2, r3, #7
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acce:	4974      	ldr	r1, [pc, #464]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800acd0:	4313      	orrs	r3, r2
 800acd2:	654b      	str	r3, [r1, #84]	; 0x54
 800acd4:	e001      	b.n	800acda <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acd6:	7dfb      	ldrb	r3, [r7, #23]
 800acd8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f003 0304 	and.w	r3, r3, #4
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d03a      	beq.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acec:	2b05      	cmp	r3, #5
 800acee:	d821      	bhi.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800acf0:	a201      	add	r2, pc, #4	; (adr r2, 800acf8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800acf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf6:	bf00      	nop
 800acf8:	0800ad3b 	.word	0x0800ad3b
 800acfc:	0800ad11 	.word	0x0800ad11
 800ad00:	0800ad23 	.word	0x0800ad23
 800ad04:	0800ad3b 	.word	0x0800ad3b
 800ad08:	0800ad3b 	.word	0x0800ad3b
 800ad0c:	0800ad3b 	.word	0x0800ad3b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	3304      	adds	r3, #4
 800ad14:	2101      	movs	r1, #1
 800ad16:	4618      	mov	r0, r3
 800ad18:	f001 fb98 	bl	800c44c <RCCEx_PLL2_Config>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800ad20:	e00c      	b.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	3324      	adds	r3, #36	; 0x24
 800ad26:	2101      	movs	r1, #1
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f001 fc41 	bl	800c5b0 <RCCEx_PLL3_Config>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800ad32:	e003      	b.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ad34:	2301      	movs	r3, #1
 800ad36:	75fb      	strb	r3, [r7, #23]
      break;
 800ad38:	e000      	b.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800ad3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad3c:	7dfb      	ldrb	r3, [r7, #23]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d10a      	bne.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ad42:	4b57      	ldr	r3, [pc, #348]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ad44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad46:	f023 0207 	bic.w	r2, r3, #7
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad50:	4953      	ldr	r1, [pc, #332]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ad52:	4313      	orrs	r3, r2
 800ad54:	658b      	str	r3, [r1, #88]	; 0x58
 800ad56:	e001      	b.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad58:	7dfb      	ldrb	r3, [r7, #23]
 800ad5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f003 0320 	and.w	r3, r3, #32
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d04b      	beq.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad72:	d02e      	beq.n	800add2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800ad74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad78:	d828      	bhi.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800ad7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad7e:	d02a      	beq.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800ad80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad84:	d822      	bhi.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800ad86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad8a:	d026      	beq.n	800adda <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800ad8c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad90:	d81c      	bhi.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800ad92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad96:	d010      	beq.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800ad98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad9c:	d816      	bhi.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d01d      	beq.n	800adde <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800ada2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ada6:	d111      	bne.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	3304      	adds	r3, #4
 800adac:	2100      	movs	r1, #0
 800adae:	4618      	mov	r0, r3
 800adb0:	f001 fb4c 	bl	800c44c <RCCEx_PLL2_Config>
 800adb4:	4603      	mov	r3, r0
 800adb6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800adb8:	e012      	b.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	3324      	adds	r3, #36	; 0x24
 800adbe:	2102      	movs	r1, #2
 800adc0:	4618      	mov	r0, r3
 800adc2:	f001 fbf5 	bl	800c5b0 <RCCEx_PLL3_Config>
 800adc6:	4603      	mov	r3, r0
 800adc8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800adca:	e009      	b.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800adcc:	2301      	movs	r3, #1
 800adce:	75fb      	strb	r3, [r7, #23]
      break;
 800add0:	e006      	b.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800add2:	bf00      	nop
 800add4:	e004      	b.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800add6:	bf00      	nop
 800add8:	e002      	b.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800adda:	bf00      	nop
 800addc:	e000      	b.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800adde:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ade0:	7dfb      	ldrb	r3, [r7, #23]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d10a      	bne.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ade6:	4b2e      	ldr	r3, [pc, #184]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ade8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800adf4:	492a      	ldr	r1, [pc, #168]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800adf6:	4313      	orrs	r3, r2
 800adf8:	654b      	str	r3, [r1, #84]	; 0x54
 800adfa:	e001      	b.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adfc:	7dfb      	ldrb	r3, [r7, #23]
 800adfe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d04d      	beq.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ae12:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ae16:	d02e      	beq.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800ae18:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ae1c:	d828      	bhi.n	800ae70 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800ae1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae22:	d02a      	beq.n	800ae7a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800ae24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae28:	d822      	bhi.n	800ae70 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800ae2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ae2e:	d026      	beq.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800ae30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ae34:	d81c      	bhi.n	800ae70 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800ae36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae3a:	d010      	beq.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800ae3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae40:	d816      	bhi.n	800ae70 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d01d      	beq.n	800ae82 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800ae46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae4a:	d111      	bne.n	800ae70 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	3304      	adds	r3, #4
 800ae50:	2100      	movs	r1, #0
 800ae52:	4618      	mov	r0, r3
 800ae54:	f001 fafa 	bl	800c44c <RCCEx_PLL2_Config>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800ae5c:	e012      	b.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	3324      	adds	r3, #36	; 0x24
 800ae62:	2102      	movs	r1, #2
 800ae64:	4618      	mov	r0, r3
 800ae66:	f001 fba3 	bl	800c5b0 <RCCEx_PLL3_Config>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800ae6e:	e009      	b.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae70:	2301      	movs	r3, #1
 800ae72:	75fb      	strb	r3, [r7, #23]
      break;
 800ae74:	e006      	b.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800ae76:	bf00      	nop
 800ae78:	e004      	b.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800ae7a:	bf00      	nop
 800ae7c:	e002      	b.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800ae7e:	bf00      	nop
 800ae80:	e000      	b.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800ae82:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae84:	7dfb      	ldrb	r3, [r7, #23]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d10c      	bne.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ae8a:	4b05      	ldr	r3, [pc, #20]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ae8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae8e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ae98:	4901      	ldr	r1, [pc, #4]	; (800aea0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ae9a:	4313      	orrs	r3, r2
 800ae9c:	658b      	str	r3, [r1, #88]	; 0x58
 800ae9e:	e003      	b.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800aea0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aea4:	7dfb      	ldrb	r3, [r7, #23]
 800aea6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d04b      	beq.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aeba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800aebe:	d02e      	beq.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800aec0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800aec4:	d828      	bhi.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800aec6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aeca:	d02a      	beq.n	800af22 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800aecc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aed0:	d822      	bhi.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800aed2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800aed6:	d026      	beq.n	800af26 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800aed8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800aedc:	d81c      	bhi.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800aede:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aee2:	d010      	beq.n	800af06 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800aee4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aee8:	d816      	bhi.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d01d      	beq.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800aeee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aef2:	d111      	bne.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	3304      	adds	r3, #4
 800aef8:	2100      	movs	r1, #0
 800aefa:	4618      	mov	r0, r3
 800aefc:	f001 faa6 	bl	800c44c <RCCEx_PLL2_Config>
 800af00:	4603      	mov	r3, r0
 800af02:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800af04:	e012      	b.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	3324      	adds	r3, #36	; 0x24
 800af0a:	2102      	movs	r1, #2
 800af0c:	4618      	mov	r0, r3
 800af0e:	f001 fb4f 	bl	800c5b0 <RCCEx_PLL3_Config>
 800af12:	4603      	mov	r3, r0
 800af14:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800af16:	e009      	b.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800af18:	2301      	movs	r3, #1
 800af1a:	75fb      	strb	r3, [r7, #23]
      break;
 800af1c:	e006      	b.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800af1e:	bf00      	nop
 800af20:	e004      	b.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800af22:	bf00      	nop
 800af24:	e002      	b.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800af26:	bf00      	nop
 800af28:	e000      	b.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800af2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af2c:	7dfb      	ldrb	r3, [r7, #23]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d10a      	bne.n	800af48 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800af32:	4b9d      	ldr	r3, [pc, #628]	; (800b1a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800af34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800af40:	4999      	ldr	r1, [pc, #612]	; (800b1a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800af42:	4313      	orrs	r3, r2
 800af44:	658b      	str	r3, [r1, #88]	; 0x58
 800af46:	e001      	b.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af48:	7dfb      	ldrb	r3, [r7, #23]
 800af4a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f003 0308 	and.w	r3, r3, #8
 800af54:	2b00      	cmp	r3, #0
 800af56:	d01a      	beq.n	800af8e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af62:	d10a      	bne.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	3324      	adds	r3, #36	; 0x24
 800af68:	2102      	movs	r1, #2
 800af6a:	4618      	mov	r0, r3
 800af6c:	f001 fb20 	bl	800c5b0 <RCCEx_PLL3_Config>
 800af70:	4603      	mov	r3, r0
 800af72:	2b00      	cmp	r3, #0
 800af74:	d001      	beq.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800af76:	2301      	movs	r3, #1
 800af78:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800af7a:	4b8b      	ldr	r3, [pc, #556]	; (800b1a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800af7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af7e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af88:	4987      	ldr	r1, [pc, #540]	; (800b1a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800af8a:	4313      	orrs	r3, r2
 800af8c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f003 0310 	and.w	r3, r3, #16
 800af96:	2b00      	cmp	r3, #0
 800af98:	d01a      	beq.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800afa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afa4:	d10a      	bne.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	3324      	adds	r3, #36	; 0x24
 800afaa:	2102      	movs	r1, #2
 800afac:	4618      	mov	r0, r3
 800afae:	f001 faff 	bl	800c5b0 <RCCEx_PLL3_Config>
 800afb2:	4603      	mov	r3, r0
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d001      	beq.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800afb8:	2301      	movs	r3, #1
 800afba:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800afbc:	4b7a      	ldr	r3, [pc, #488]	; (800b1a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800afbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800afca:	4977      	ldr	r1, [pc, #476]	; (800b1a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800afcc:	4313      	orrs	r3, r2
 800afce:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d034      	beq.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800afe2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afe6:	d01d      	beq.n	800b024 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800afe8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afec:	d817      	bhi.n	800b01e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d003      	beq.n	800affa <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800aff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aff6:	d009      	beq.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800aff8:	e011      	b.n	800b01e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	3304      	adds	r3, #4
 800affe:	2100      	movs	r1, #0
 800b000:	4618      	mov	r0, r3
 800b002:	f001 fa23 	bl	800c44c <RCCEx_PLL2_Config>
 800b006:	4603      	mov	r3, r0
 800b008:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b00a:	e00c      	b.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	3324      	adds	r3, #36	; 0x24
 800b010:	2102      	movs	r1, #2
 800b012:	4618      	mov	r0, r3
 800b014:	f001 facc 	bl	800c5b0 <RCCEx_PLL3_Config>
 800b018:	4603      	mov	r3, r0
 800b01a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b01c:	e003      	b.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b01e:	2301      	movs	r3, #1
 800b020:	75fb      	strb	r3, [r7, #23]
      break;
 800b022:	e000      	b.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800b024:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b026:	7dfb      	ldrb	r3, [r7, #23]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d10a      	bne.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b02c:	4b5e      	ldr	r3, [pc, #376]	; (800b1a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b02e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b030:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b03a:	495b      	ldr	r1, [pc, #364]	; (800b1a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b03c:	4313      	orrs	r3, r2
 800b03e:	658b      	str	r3, [r1, #88]	; 0x58
 800b040:	e001      	b.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b042:	7dfb      	ldrb	r3, [r7, #23]
 800b044:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d033      	beq.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b058:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b05c:	d01c      	beq.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800b05e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b062:	d816      	bhi.n	800b092 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800b064:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b068:	d003      	beq.n	800b072 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800b06a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b06e:	d007      	beq.n	800b080 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800b070:	e00f      	b.n	800b092 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b072:	4b4d      	ldr	r3, [pc, #308]	; (800b1a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b076:	4a4c      	ldr	r2, [pc, #304]	; (800b1a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b07c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b07e:	e00c      	b.n	800b09a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	3324      	adds	r3, #36	; 0x24
 800b084:	2101      	movs	r1, #1
 800b086:	4618      	mov	r0, r3
 800b088:	f001 fa92 	bl	800c5b0 <RCCEx_PLL3_Config>
 800b08c:	4603      	mov	r3, r0
 800b08e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b090:	e003      	b.n	800b09a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b092:	2301      	movs	r3, #1
 800b094:	75fb      	strb	r3, [r7, #23]
      break;
 800b096:	e000      	b.n	800b09a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800b098:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b09a:	7dfb      	ldrb	r3, [r7, #23]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d10a      	bne.n	800b0b6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b0a0:	4b41      	ldr	r3, [pc, #260]	; (800b1a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b0a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0ae:	493e      	ldr	r1, [pc, #248]	; (800b1a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b0b0:	4313      	orrs	r3, r2
 800b0b2:	654b      	str	r3, [r1, #84]	; 0x54
 800b0b4:	e001      	b.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0b6:	7dfb      	ldrb	r3, [r7, #23]
 800b0b8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d029      	beq.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d003      	beq.n	800b0d6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800b0ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0d2:	d007      	beq.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800b0d4:	e00f      	b.n	800b0f6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0d6:	4b34      	ldr	r3, [pc, #208]	; (800b1a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b0d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0da:	4a33      	ldr	r2, [pc, #204]	; (800b1a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b0dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b0e2:	e00b      	b.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	3304      	adds	r3, #4
 800b0e8:	2102      	movs	r1, #2
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f001 f9ae 	bl	800c44c <RCCEx_PLL2_Config>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b0f4:	e002      	b.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	75fb      	strb	r3, [r7, #23]
      break;
 800b0fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b0fc:	7dfb      	ldrb	r3, [r7, #23]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d109      	bne.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b102:	4b29      	ldr	r3, [pc, #164]	; (800b1a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b106:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b10e:	4926      	ldr	r1, [pc, #152]	; (800b1a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b110:	4313      	orrs	r3, r2
 800b112:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b114:	e001      	b.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b116:	7dfb      	ldrb	r3, [r7, #23]
 800b118:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b122:	2b00      	cmp	r3, #0
 800b124:	d00a      	beq.n	800b13c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	3324      	adds	r3, #36	; 0x24
 800b12a:	2102      	movs	r1, #2
 800b12c:	4618      	mov	r0, r3
 800b12e:	f001 fa3f 	bl	800c5b0 <RCCEx_PLL3_Config>
 800b132:	4603      	mov	r3, r0
 800b134:	2b00      	cmp	r3, #0
 800b136:	d001      	beq.n	800b13c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800b138:	2301      	movs	r3, #1
 800b13a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b144:	2b00      	cmp	r3, #0
 800b146:	d033      	beq.n	800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b14c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b150:	d017      	beq.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800b152:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b156:	d811      	bhi.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800b158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b15c:	d013      	beq.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800b15e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b162:	d80b      	bhi.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800b164:	2b00      	cmp	r3, #0
 800b166:	d010      	beq.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800b168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b16c:	d106      	bne.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b16e:	4b0e      	ldr	r3, [pc, #56]	; (800b1a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b172:	4a0d      	ldr	r2, [pc, #52]	; (800b1a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b178:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b17a:	e007      	b.n	800b18c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b17c:	2301      	movs	r3, #1
 800b17e:	75fb      	strb	r3, [r7, #23]
      break;
 800b180:	e004      	b.n	800b18c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800b182:	bf00      	nop
 800b184:	e002      	b.n	800b18c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800b186:	bf00      	nop
 800b188:	e000      	b.n	800b18c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800b18a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b18c:	7dfb      	ldrb	r3, [r7, #23]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d10c      	bne.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b192:	4b05      	ldr	r3, [pc, #20]	; (800b1a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b196:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b19e:	4902      	ldr	r1, [pc, #8]	; (800b1a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	654b      	str	r3, [r1, #84]	; 0x54
 800b1a4:	e004      	b.n	800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800b1a6:	bf00      	nop
 800b1a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1ac:	7dfb      	ldrb	r3, [r7, #23]
 800b1ae:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d008      	beq.n	800b1ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b1bc:	4b31      	ldr	r3, [pc, #196]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b1be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1c8:	492e      	ldr	r1, [pc, #184]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d009      	beq.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b1da:	4b2a      	ldr	r3, [pc, #168]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b1dc:	691b      	ldr	r3, [r3, #16]
 800b1de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b1e8:	4926      	ldr	r1, [pc, #152]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d008      	beq.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b1fa:	4b22      	ldr	r3, [pc, #136]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b1fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1fe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b206:	491f      	ldr	r1, [pc, #124]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b208:	4313      	orrs	r3, r2
 800b20a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b214:	2b00      	cmp	r3, #0
 800b216:	d00d      	beq.n	800b234 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b218:	4b1a      	ldr	r3, [pc, #104]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b21a:	691b      	ldr	r3, [r3, #16]
 800b21c:	4a19      	ldr	r2, [pc, #100]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b21e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b222:	6113      	str	r3, [r2, #16]
 800b224:	4b17      	ldr	r3, [pc, #92]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b226:	691a      	ldr	r2, [r3, #16]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b22e:	4915      	ldr	r1, [pc, #84]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b230:	4313      	orrs	r3, r2
 800b232:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	da08      	bge.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b23c:	4b11      	ldr	r3, [pc, #68]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b23e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b240:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b248:	490e      	ldr	r1, [pc, #56]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b24a:	4313      	orrs	r3, r2
 800b24c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b256:	2b00      	cmp	r3, #0
 800b258:	d009      	beq.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b25a:	4b0a      	ldr	r3, [pc, #40]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b25c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b25e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b268:	4906      	ldr	r1, [pc, #24]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b26a:	4313      	orrs	r3, r2
 800b26c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800b26e:	7dbb      	ldrb	r3, [r7, #22]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d101      	bne.n	800b278 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800b274:	2300      	movs	r3, #0
 800b276:	e000      	b.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800b278:	2301      	movs	r3, #1
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3718      	adds	r7, #24
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	58024400 	.word	0x58024400

0800b288 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b090      	sub	sp, #64	; 0x40
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b296:	f040 8095 	bne.w	800b3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800b29a:	4b97      	ldr	r3, [pc, #604]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b29c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b29e:	f003 0307 	and.w	r3, r3, #7
 800b2a2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a6:	2b04      	cmp	r3, #4
 800b2a8:	f200 8088 	bhi.w	800b3bc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800b2ac:	a201      	add	r2, pc, #4	; (adr r2, 800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800b2ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2b2:	bf00      	nop
 800b2b4:	0800b2c9 	.word	0x0800b2c9
 800b2b8:	0800b2f1 	.word	0x0800b2f1
 800b2bc:	0800b319 	.word	0x0800b319
 800b2c0:	0800b3b5 	.word	0x0800b3b5
 800b2c4:	0800b341 	.word	0x0800b341
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b2c8:	4b8b      	ldr	r3, [pc, #556]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2d4:	d108      	bne.n	800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b2d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f000 ff64 	bl	800c1a8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800b2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b2e4:	f000 bc94 	b.w	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b2ec:	f000 bc90 	b.w	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2f0:	4b81      	ldr	r3, [pc, #516]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2fc:	d108      	bne.n	800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2fe:	f107 0318 	add.w	r3, r7, #24
 800b302:	4618      	mov	r0, r3
 800b304:	f000 fca8 	bl	800bc58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b308:	69bb      	ldr	r3, [r7, #24]
 800b30a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b30c:	f000 bc80 	b.w	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b310:	2300      	movs	r3, #0
 800b312:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b314:	f000 bc7c 	b.w	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b318:	4b77      	ldr	r3, [pc, #476]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b320:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b324:	d108      	bne.n	800b338 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b326:	f107 030c 	add.w	r3, r7, #12
 800b32a:	4618      	mov	r0, r3
 800b32c:	f000 fde8 	bl	800bf00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b334:	f000 bc6c 	b.w	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b338:	2300      	movs	r3, #0
 800b33a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b33c:	f000 bc68 	b.w	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b340:	4b6d      	ldr	r3, [pc, #436]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b344:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b348:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b34a:	4b6b      	ldr	r3, [pc, #428]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f003 0304 	and.w	r3, r3, #4
 800b352:	2b04      	cmp	r3, #4
 800b354:	d10c      	bne.n	800b370 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800b356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d109      	bne.n	800b370 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b35c:	4b66      	ldr	r3, [pc, #408]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	08db      	lsrs	r3, r3, #3
 800b362:	f003 0303 	and.w	r3, r3, #3
 800b366:	4a65      	ldr	r2, [pc, #404]	; (800b4fc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b368:	fa22 f303 	lsr.w	r3, r2, r3
 800b36c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b36e:	e01f      	b.n	800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b370:	4b61      	ldr	r3, [pc, #388]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b37c:	d106      	bne.n	800b38c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800b37e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b380:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b384:	d102      	bne.n	800b38c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b386:	4b5e      	ldr	r3, [pc, #376]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b388:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b38a:	e011      	b.n	800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b38c:	4b5a      	ldr	r3, [pc, #360]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b394:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b398:	d106      	bne.n	800b3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800b39a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b39c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3a0:	d102      	bne.n	800b3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b3a2:	4b58      	ldr	r3, [pc, #352]	; (800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3a6:	e003      	b.n	800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b3ac:	f000 bc30 	b.w	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b3b0:	f000 bc2e 	b.w	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b3b4:	4b54      	ldr	r3, [pc, #336]	; (800b508 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800b3b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b3b8:	f000 bc2a 	b.w	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b3c0:	f000 bc26 	b.w	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3ca:	f040 809f 	bne.w	800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800b3ce:	4b4a      	ldr	r3, [pc, #296]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b3d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3d2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b3d6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3de:	d04d      	beq.n	800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800b3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3e6:	f200 8084 	bhi.w	800b4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800b3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ec:	2bc0      	cmp	r3, #192	; 0xc0
 800b3ee:	d07d      	beq.n	800b4ec <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800b3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f2:	2bc0      	cmp	r3, #192	; 0xc0
 800b3f4:	d87d      	bhi.n	800b4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800b3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f8:	2b80      	cmp	r3, #128	; 0x80
 800b3fa:	d02d      	beq.n	800b458 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800b3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fe:	2b80      	cmp	r3, #128	; 0x80
 800b400:	d877      	bhi.n	800b4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800b402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b404:	2b00      	cmp	r3, #0
 800b406:	d003      	beq.n	800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800b408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b40a:	2b40      	cmp	r3, #64	; 0x40
 800b40c:	d012      	beq.n	800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800b40e:	e070      	b.n	800b4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b410:	4b39      	ldr	r3, [pc, #228]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b418:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b41c:	d107      	bne.n	800b42e <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b41e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b422:	4618      	mov	r0, r3
 800b424:	f000 fec0 	bl	800c1a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b42a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b42c:	e3f0      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b42e:	2300      	movs	r3, #0
 800b430:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b432:	e3ed      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b434:	4b30      	ldr	r3, [pc, #192]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b43c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b440:	d107      	bne.n	800b452 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b442:	f107 0318 	add.w	r3, r7, #24
 800b446:	4618      	mov	r0, r3
 800b448:	f000 fc06 	bl	800bc58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b44c:	69bb      	ldr	r3, [r7, #24]
 800b44e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b450:	e3de      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b452:	2300      	movs	r3, #0
 800b454:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b456:	e3db      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b458:	4b27      	ldr	r3, [pc, #156]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b460:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b464:	d107      	bne.n	800b476 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b466:	f107 030c 	add.w	r3, r7, #12
 800b46a:	4618      	mov	r0, r3
 800b46c:	f000 fd48 	bl	800bf00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b474:	e3cc      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b476:	2300      	movs	r3, #0
 800b478:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b47a:	e3c9      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b47c:	4b1e      	ldr	r3, [pc, #120]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b47e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b480:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b484:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b486:	4b1c      	ldr	r3, [pc, #112]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f003 0304 	and.w	r3, r3, #4
 800b48e:	2b04      	cmp	r3, #4
 800b490:	d10c      	bne.n	800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800b492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b494:	2b00      	cmp	r3, #0
 800b496:	d109      	bne.n	800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b498:	4b17      	ldr	r3, [pc, #92]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	08db      	lsrs	r3, r3, #3
 800b49e:	f003 0303 	and.w	r3, r3, #3
 800b4a2:	4a16      	ldr	r2, [pc, #88]	; (800b4fc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b4a4:	fa22 f303 	lsr.w	r3, r2, r3
 800b4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4aa:	e01e      	b.n	800b4ea <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b4ac:	4b12      	ldr	r3, [pc, #72]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4b8:	d106      	bne.n	800b4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800b4ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4c0:	d102      	bne.n	800b4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b4c2:	4b0f      	ldr	r3, [pc, #60]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b4c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4c6:	e010      	b.n	800b4ea <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b4c8:	4b0b      	ldr	r3, [pc, #44]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4d4:	d106      	bne.n	800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800b4d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4dc:	d102      	bne.n	800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b4de:	4b09      	ldr	r3, [pc, #36]	; (800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b4e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4e2:	e002      	b.n	800b4ea <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b4e8:	e392      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b4ea:	e391      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b4ec:	4b06      	ldr	r3, [pc, #24]	; (800b508 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800b4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4f0:	e38e      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4f6:	e38b      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b4f8:	58024400 	.word	0x58024400
 800b4fc:	03d09000 	.word	0x03d09000
 800b500:	003d0900 	.word	0x003d0900
 800b504:	007a1200 	.word	0x007a1200
 800b508:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b512:	f040 809c 	bne.w	800b64e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800b516:	4b9d      	ldr	r3, [pc, #628]	; (800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b51a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b51e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b522:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b526:	d054      	beq.n	800b5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800b528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b52a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b52e:	f200 808b 	bhi.w	800b648 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800b532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b534:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b538:	f000 8083 	beq.w	800b642 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800b53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b542:	f200 8081 	bhi.w	800b648 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800b546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b548:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b54c:	d02f      	beq.n	800b5ae <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800b54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b550:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b554:	d878      	bhi.n	800b648 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800b556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d004      	beq.n	800b566 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800b55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b55e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b562:	d012      	beq.n	800b58a <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800b564:	e070      	b.n	800b648 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b566:	4b89      	ldr	r3, [pc, #548]	; (800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b56e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b572:	d107      	bne.n	800b584 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b578:	4618      	mov	r0, r3
 800b57a:	f000 fe15 	bl	800c1a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b580:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b582:	e345      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b584:	2300      	movs	r3, #0
 800b586:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b588:	e342      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b58a:	4b80      	ldr	r3, [pc, #512]	; (800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b592:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b596:	d107      	bne.n	800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b598:	f107 0318 	add.w	r3, r7, #24
 800b59c:	4618      	mov	r0, r3
 800b59e:	f000 fb5b 	bl	800bc58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b5a2:	69bb      	ldr	r3, [r7, #24]
 800b5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b5a6:	e333      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5ac:	e330      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b5ae:	4b77      	ldr	r3, [pc, #476]	; (800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5ba:	d107      	bne.n	800b5cc <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5bc:	f107 030c 	add.w	r3, r7, #12
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f000 fc9d 	bl	800bf00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b5ca:	e321      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5d0:	e31e      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b5d2:	4b6e      	ldr	r3, [pc, #440]	; (800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b5d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b5da:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b5dc:	4b6b      	ldr	r3, [pc, #428]	; (800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f003 0304 	and.w	r3, r3, #4
 800b5e4:	2b04      	cmp	r3, #4
 800b5e6:	d10c      	bne.n	800b602 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800b5e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d109      	bne.n	800b602 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b5ee:	4b67      	ldr	r3, [pc, #412]	; (800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	08db      	lsrs	r3, r3, #3
 800b5f4:	f003 0303 	and.w	r3, r3, #3
 800b5f8:	4a65      	ldr	r2, [pc, #404]	; (800b790 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800b5fa:	fa22 f303 	lsr.w	r3, r2, r3
 800b5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b600:	e01e      	b.n	800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b602:	4b62      	ldr	r3, [pc, #392]	; (800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b60a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b60e:	d106      	bne.n	800b61e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800b610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b612:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b616:	d102      	bne.n	800b61e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b618:	4b5e      	ldr	r3, [pc, #376]	; (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800b61a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b61c:	e010      	b.n	800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b61e:	4b5b      	ldr	r3, [pc, #364]	; (800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b626:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b62a:	d106      	bne.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b62c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b62e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b632:	d102      	bne.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b634:	4b58      	ldr	r3, [pc, #352]	; (800b798 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800b636:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b638:	e002      	b.n	800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b63a:	2300      	movs	r3, #0
 800b63c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b63e:	e2e7      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b640:	e2e6      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b642:	4b56      	ldr	r3, [pc, #344]	; (800b79c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800b644:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b646:	e2e3      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800b648:	2300      	movs	r3, #0
 800b64a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b64c:	e2e0      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b654:	f040 80a7 	bne.w	800b7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800b658:	4b4c      	ldr	r3, [pc, #304]	; (800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b65a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b65c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b660:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b664:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b668:	d055      	beq.n	800b716 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800b66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b670:	f200 8096 	bhi.w	800b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800b674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b676:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b67a:	f000 8084 	beq.w	800b786 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800b67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b680:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b684:	f200 808c 	bhi.w	800b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800b688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b68e:	d030      	beq.n	800b6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800b690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b692:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b696:	f200 8083 	bhi.w	800b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800b69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d004      	beq.n	800b6aa <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800b6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b6a6:	d012      	beq.n	800b6ce <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800b6a8:	e07a      	b.n	800b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b6aa:	4b38      	ldr	r3, [pc, #224]	; (800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6b6:	d107      	bne.n	800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b6b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f000 fd73 	bl	800c1a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b6c6:	e2a3      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6cc:	e2a0      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b6ce:	4b2f      	ldr	r3, [pc, #188]	; (800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b6d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b6da:	d107      	bne.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6dc:	f107 0318 	add.w	r3, r7, #24
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f000 fab9 	bl	800bc58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b6e6:	69bb      	ldr	r3, [r7, #24]
 800b6e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800b6ea:	e291      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6f0:	e28e      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b6f2:	4b26      	ldr	r3, [pc, #152]	; (800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b6fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6fe:	d107      	bne.n	800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b700:	f107 030c 	add.w	r3, r7, #12
 800b704:	4618      	mov	r0, r3
 800b706:	f000 fbfb 	bl	800bf00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b70e:	e27f      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b710:	2300      	movs	r3, #0
 800b712:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b714:	e27c      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b716:	4b1d      	ldr	r3, [pc, #116]	; (800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b71a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b71e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b720:	4b1a      	ldr	r3, [pc, #104]	; (800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f003 0304 	and.w	r3, r3, #4
 800b728:	2b04      	cmp	r3, #4
 800b72a:	d10c      	bne.n	800b746 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800b72c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d109      	bne.n	800b746 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b732:	4b16      	ldr	r3, [pc, #88]	; (800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	08db      	lsrs	r3, r3, #3
 800b738:	f003 0303 	and.w	r3, r3, #3
 800b73c:	4a14      	ldr	r2, [pc, #80]	; (800b790 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800b73e:	fa22 f303 	lsr.w	r3, r2, r3
 800b742:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b744:	e01e      	b.n	800b784 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b746:	4b11      	ldr	r3, [pc, #68]	; (800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b74e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b752:	d106      	bne.n	800b762 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800b754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b756:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b75a:	d102      	bne.n	800b762 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b75c:	4b0d      	ldr	r3, [pc, #52]	; (800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800b75e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b760:	e010      	b.n	800b784 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b762:	4b0a      	ldr	r3, [pc, #40]	; (800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b76a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b76e:	d106      	bne.n	800b77e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800b770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b776:	d102      	bne.n	800b77e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b778:	4b07      	ldr	r3, [pc, #28]	; (800b798 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800b77a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b77c:	e002      	b.n	800b784 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b77e:	2300      	movs	r3, #0
 800b780:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b782:	e245      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b784:	e244      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b786:	4b05      	ldr	r3, [pc, #20]	; (800b79c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800b788:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b78a:	e241      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b78c:	58024400 	.word	0x58024400
 800b790:	03d09000 	.word	0x03d09000
 800b794:	003d0900 	.word	0x003d0900
 800b798:	007a1200 	.word	0x007a1200
 800b79c:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7a4:	e234      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7ac:	f040 809c 	bne.w	800b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800b7b0:	4b9b      	ldr	r3, [pc, #620]	; (800ba20 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b7b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7b4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b7b8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7c0:	d054      	beq.n	800b86c <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800b7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7c8:	f200 808b 	bhi.w	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800b7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b7d2:	f000 8083 	beq.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800b7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b7dc:	f200 8081 	bhi.w	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800b7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7e6:	d02f      	beq.n	800b848 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800b7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7ee:	d878      	bhi.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800b7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d004      	beq.n	800b800 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800b7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7fc:	d012      	beq.n	800b824 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800b7fe:	e070      	b.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b800:	4b87      	ldr	r3, [pc, #540]	; (800ba20 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b808:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b80c:	d107      	bne.n	800b81e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b80e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b812:	4618      	mov	r0, r3
 800b814:	f000 fcc8 	bl	800c1a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b81a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b81c:	e1f8      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b81e:	2300      	movs	r3, #0
 800b820:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b822:	e1f5      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b824:	4b7e      	ldr	r3, [pc, #504]	; (800ba20 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b82c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b830:	d107      	bne.n	800b842 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b832:	f107 0318 	add.w	r3, r7, #24
 800b836:	4618      	mov	r0, r3
 800b838:	f000 fa0e 	bl	800bc58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b83c:	69bb      	ldr	r3, [r7, #24]
 800b83e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b840:	e1e6      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b842:	2300      	movs	r3, #0
 800b844:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b846:	e1e3      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b848:	4b75      	ldr	r3, [pc, #468]	; (800ba20 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b850:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b854:	d107      	bne.n	800b866 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b856:	f107 030c 	add.w	r3, r7, #12
 800b85a:	4618      	mov	r0, r3
 800b85c:	f000 fb50 	bl	800bf00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b864:	e1d4      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b866:	2300      	movs	r3, #0
 800b868:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b86a:	e1d1      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b86c:	4b6c      	ldr	r3, [pc, #432]	; (800ba20 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b86e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b870:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b874:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b876:	4b6a      	ldr	r3, [pc, #424]	; (800ba20 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f003 0304 	and.w	r3, r3, #4
 800b87e:	2b04      	cmp	r3, #4
 800b880:	d10c      	bne.n	800b89c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b884:	2b00      	cmp	r3, #0
 800b886:	d109      	bne.n	800b89c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b888:	4b65      	ldr	r3, [pc, #404]	; (800ba20 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	08db      	lsrs	r3, r3, #3
 800b88e:	f003 0303 	and.w	r3, r3, #3
 800b892:	4a64      	ldr	r2, [pc, #400]	; (800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800b894:	fa22 f303 	lsr.w	r3, r2, r3
 800b898:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b89a:	e01e      	b.n	800b8da <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b89c:	4b60      	ldr	r3, [pc, #384]	; (800ba20 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8a8:	d106      	bne.n	800b8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800b8aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8b0:	d102      	bne.n	800b8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b8b2:	4b5d      	ldr	r3, [pc, #372]	; (800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800b8b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8b6:	e010      	b.n	800b8da <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b8b8:	4b59      	ldr	r3, [pc, #356]	; (800ba20 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8c4:	d106      	bne.n	800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800b8c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8cc:	d102      	bne.n	800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b8ce:	4b57      	ldr	r3, [pc, #348]	; (800ba2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800b8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8d2:	e002      	b.n	800b8da <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b8d8:	e19a      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b8da:	e199      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b8dc:	4b54      	ldr	r3, [pc, #336]	; (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b8de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8e0:	e196      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8e6:	e193      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b8ee:	d173      	bne.n	800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800b8f0:	4b4b      	ldr	r3, [pc, #300]	; (800ba20 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b8f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b8f8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b900:	d02f      	beq.n	800b962 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800b902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b904:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b908:	d863      	bhi.n	800b9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800b90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d004      	beq.n	800b91a <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800b910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b916:	d012      	beq.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800b918:	e05b      	b.n	800b9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b91a:	4b41      	ldr	r3, [pc, #260]	; (800ba20 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b922:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b926:	d107      	bne.n	800b938 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b928:	f107 0318 	add.w	r3, r7, #24
 800b92c:	4618      	mov	r0, r3
 800b92e:	f000 f993 	bl	800bc58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b932:	69bb      	ldr	r3, [r7, #24]
 800b934:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b936:	e16b      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b938:	2300      	movs	r3, #0
 800b93a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b93c:	e168      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b93e:	4b38      	ldr	r3, [pc, #224]	; (800ba20 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b946:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b94a:	d107      	bne.n	800b95c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b94c:	f107 030c 	add.w	r3, r7, #12
 800b950:	4618      	mov	r0, r3
 800b952:	f000 fad5 	bl	800bf00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b95a:	e159      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b95c:	2300      	movs	r3, #0
 800b95e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b960:	e156      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b962:	4b2f      	ldr	r3, [pc, #188]	; (800ba20 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b966:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b96a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b96c:	4b2c      	ldr	r3, [pc, #176]	; (800ba20 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f003 0304 	and.w	r3, r3, #4
 800b974:	2b04      	cmp	r3, #4
 800b976:	d10c      	bne.n	800b992 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800b978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d109      	bne.n	800b992 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b97e:	4b28      	ldr	r3, [pc, #160]	; (800ba20 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	08db      	lsrs	r3, r3, #3
 800b984:	f003 0303 	and.w	r3, r3, #3
 800b988:	4a26      	ldr	r2, [pc, #152]	; (800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800b98a:	fa22 f303 	lsr.w	r3, r2, r3
 800b98e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b990:	e01e      	b.n	800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b992:	4b23      	ldr	r3, [pc, #140]	; (800ba20 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b99a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b99e:	d106      	bne.n	800b9ae <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800b9a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b9a6:	d102      	bne.n	800b9ae <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b9a8:	4b1f      	ldr	r3, [pc, #124]	; (800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800b9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9ac:	e010      	b.n	800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b9ae:	4b1c      	ldr	r3, [pc, #112]	; (800ba20 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9ba:	d106      	bne.n	800b9ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800b9bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9c2:	d102      	bne.n	800b9ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b9c4:	4b19      	ldr	r3, [pc, #100]	; (800ba2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800b9c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9c8:	e002      	b.n	800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b9ce:	e11f      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b9d0:	e11e      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b9d6:	e11b      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9de:	d13e      	bne.n	800ba5e <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800b9e0:	4b0f      	ldr	r3, [pc, #60]	; (800ba20 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b9e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b9e8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d004      	beq.n	800b9fa <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800b9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9f6:	d01d      	beq.n	800ba34 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800b9f8:	e02e      	b.n	800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b9fa:	4b09      	ldr	r3, [pc, #36]	; (800ba20 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba06:	d107      	bne.n	800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f000 fbcb 	bl	800c1a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ba12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba14:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ba16:	e0fb      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba1c:	e0f8      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800ba1e:	bf00      	nop
 800ba20:	58024400 	.word	0x58024400
 800ba24:	03d09000 	.word	0x03d09000
 800ba28:	003d0900 	.word	0x003d0900
 800ba2c:	007a1200 	.word	0x007a1200
 800ba30:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba34:	4b79      	ldr	r3, [pc, #484]	; (800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba40:	d107      	bne.n	800ba52 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba42:	f107 0318 	add.w	r3, r7, #24
 800ba46:	4618      	mov	r0, r3
 800ba48:	f000 f906 	bl	800bc58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ba4c:	6a3b      	ldr	r3, [r7, #32]
 800ba4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ba50:	e0de      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800ba52:	2300      	movs	r3, #0
 800ba54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba56:	e0db      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba5c:	e0d8      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba64:	f040 8085 	bne.w	800bb72 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800ba68:	4b6c      	ldr	r3, [pc, #432]	; (800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba6c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ba70:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ba72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ba78:	d06b      	beq.n	800bb52 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800ba7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ba80:	d874      	bhi.n	800bb6c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ba82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba88:	d056      	beq.n	800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800ba8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba90:	d86c      	bhi.n	800bb6c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ba92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ba98:	d03b      	beq.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800ba9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800baa0:	d864      	bhi.n	800bb6c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800baa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800baa8:	d021      	beq.n	800baee <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800baaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bab0:	d85c      	bhi.n	800bb6c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800bab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d004      	beq.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800bab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800babe:	d004      	beq.n	800baca <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800bac0:	e054      	b.n	800bb6c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800bac2:	f000 f8b3 	bl	800bc2c <HAL_RCCEx_GetD3PCLK1Freq>
 800bac6:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800bac8:	e0a2      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800baca:	4b54      	ldr	r3, [pc, #336]	; (800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bad2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bad6:	d107      	bne.n	800bae8 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bad8:	f107 0318 	add.w	r3, r7, #24
 800badc:	4618      	mov	r0, r3
 800bade:	f000 f8bb 	bl	800bc58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bae2:	69fb      	ldr	r3, [r7, #28]
 800bae4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bae6:	e093      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800bae8:	2300      	movs	r3, #0
 800baea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800baec:	e090      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800baee:	4b4b      	ldr	r3, [pc, #300]	; (800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800baf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bafa:	d107      	bne.n	800bb0c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bafc:	f107 030c 	add.w	r3, r7, #12
 800bb00:	4618      	mov	r0, r3
 800bb02:	f000 f9fd 	bl	800bf00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bb0a:	e081      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb10:	e07e      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bb12:	4b42      	ldr	r3, [pc, #264]	; (800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f003 0304 	and.w	r3, r3, #4
 800bb1a:	2b04      	cmp	r3, #4
 800bb1c:	d109      	bne.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bb1e:	4b3f      	ldr	r3, [pc, #252]	; (800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	08db      	lsrs	r3, r3, #3
 800bb24:	f003 0303 	and.w	r3, r3, #3
 800bb28:	4a3d      	ldr	r2, [pc, #244]	; (800bc20 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800bb2a:	fa22 f303 	lsr.w	r3, r2, r3
 800bb2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bb30:	e06e      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800bb32:	2300      	movs	r3, #0
 800bb34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb36:	e06b      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bb38:	4b38      	ldr	r3, [pc, #224]	; (800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb44:	d102      	bne.n	800bb4c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800bb46:	4b37      	ldr	r3, [pc, #220]	; (800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800bb48:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bb4a:	e061      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb50:	e05e      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bb52:	4b32      	ldr	r3, [pc, #200]	; (800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb5e:	d102      	bne.n	800bb66 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800bb60:	4b31      	ldr	r3, [pc, #196]	; (800bc28 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800bb62:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bb64:	e054      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800bb66:	2300      	movs	r3, #0
 800bb68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb6a:	e051      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb70:	e04e      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb78:	d148      	bne.n	800bc0c <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800bb7a:	4b28      	ldr	r3, [pc, #160]	; (800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bb7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bb82:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bb84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb8a:	d02a      	beq.n	800bbe2 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800bb8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb92:	d838      	bhi.n	800bc06 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800bb94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d004      	beq.n	800bba4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800bb9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bba0:	d00d      	beq.n	800bbbe <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800bba2:	e030      	b.n	800bc06 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bba4:	4b1d      	ldr	r3, [pc, #116]	; (800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bbb0:	d102      	bne.n	800bbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800bbb2:	4b1d      	ldr	r3, [pc, #116]	; (800bc28 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800bbb4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bbb6:	e02b      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bbbc:	e028      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bbbe:	4b17      	ldr	r3, [pc, #92]	; (800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bbca:	d107      	bne.n	800bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bbcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f000 fae9 	bl	800c1a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bbda:	e019      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bbe0:	e016      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bbe2:	4b0e      	ldr	r3, [pc, #56]	; (800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bbea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bbee:	d107      	bne.n	800bc00 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bbf0:	f107 0318 	add.w	r3, r7, #24
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f000 f82f 	bl	800bc58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bbfa:	69fb      	ldr	r3, [r7, #28]
 800bbfc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bbfe:	e007      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800bc00:	2300      	movs	r3, #0
 800bc02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bc04:	e004      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800bc06:	2300      	movs	r3, #0
 800bc08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bc0a:	e001      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800bc10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3740      	adds	r7, #64	; 0x40
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}
 800bc1a:	bf00      	nop
 800bc1c:	58024400 	.word	0x58024400
 800bc20:	03d09000 	.word	0x03d09000
 800bc24:	003d0900 	.word	0x003d0900
 800bc28:	007a1200 	.word	0x007a1200

0800bc2c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bc30:	f7fe fb88 	bl	800a344 <HAL_RCC_GetHCLKFreq>
 800bc34:	4602      	mov	r2, r0
 800bc36:	4b06      	ldr	r3, [pc, #24]	; (800bc50 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bc38:	6a1b      	ldr	r3, [r3, #32]
 800bc3a:	091b      	lsrs	r3, r3, #4
 800bc3c:	f003 0307 	and.w	r3, r3, #7
 800bc40:	4904      	ldr	r1, [pc, #16]	; (800bc54 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bc42:	5ccb      	ldrb	r3, [r1, r3]
 800bc44:	f003 031f 	and.w	r3, r3, #31
 800bc48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	bd80      	pop	{r7, pc}
 800bc50:	58024400 	.word	0x58024400
 800bc54:	08013060 	.word	0x08013060

0800bc58 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b089      	sub	sp, #36	; 0x24
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bc60:	4ba1      	ldr	r3, [pc, #644]	; (800bee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc64:	f003 0303 	and.w	r3, r3, #3
 800bc68:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800bc6a:	4b9f      	ldr	r3, [pc, #636]	; (800bee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc6e:	0b1b      	lsrs	r3, r3, #12
 800bc70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc74:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bc76:	4b9c      	ldr	r3, [pc, #624]	; (800bee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc7a:	091b      	lsrs	r3, r3, #4
 800bc7c:	f003 0301 	and.w	r3, r3, #1
 800bc80:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800bc82:	4b99      	ldr	r3, [pc, #612]	; (800bee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc86:	08db      	lsrs	r3, r3, #3
 800bc88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc8c:	693a      	ldr	r2, [r7, #16]
 800bc8e:	fb02 f303 	mul.w	r3, r2, r3
 800bc92:	ee07 3a90 	vmov	s15, r3
 800bc96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	f000 8111 	beq.w	800bec8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bca6:	69bb      	ldr	r3, [r7, #24]
 800bca8:	2b02      	cmp	r3, #2
 800bcaa:	f000 8083 	beq.w	800bdb4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bcae:	69bb      	ldr	r3, [r7, #24]
 800bcb0:	2b02      	cmp	r3, #2
 800bcb2:	f200 80a1 	bhi.w	800bdf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bcb6:	69bb      	ldr	r3, [r7, #24]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d003      	beq.n	800bcc4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bcbc:	69bb      	ldr	r3, [r7, #24]
 800bcbe:	2b01      	cmp	r3, #1
 800bcc0:	d056      	beq.n	800bd70 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bcc2:	e099      	b.n	800bdf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bcc4:	4b88      	ldr	r3, [pc, #544]	; (800bee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f003 0320 	and.w	r3, r3, #32
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d02d      	beq.n	800bd2c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bcd0:	4b85      	ldr	r3, [pc, #532]	; (800bee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	08db      	lsrs	r3, r3, #3
 800bcd6:	f003 0303 	and.w	r3, r3, #3
 800bcda:	4a84      	ldr	r2, [pc, #528]	; (800beec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bcdc:	fa22 f303 	lsr.w	r3, r2, r3
 800bce0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	ee07 3a90 	vmov	s15, r3
 800bce8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	ee07 3a90 	vmov	s15, r3
 800bcf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcfa:	4b7b      	ldr	r3, [pc, #492]	; (800bee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd02:	ee07 3a90 	vmov	s15, r3
 800bd06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bef0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd26:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bd2a:	e087      	b.n	800be3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	ee07 3a90 	vmov	s15, r3
 800bd32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bef4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bd3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd3e:	4b6a      	ldr	r3, [pc, #424]	; (800bee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd46:	ee07 3a90 	vmov	s15, r3
 800bd4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd52:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bef0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd6e:	e065      	b.n	800be3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	ee07 3a90 	vmov	s15, r3
 800bd76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bef8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bd7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd82:	4b59      	ldr	r3, [pc, #356]	; (800bee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd8a:	ee07 3a90 	vmov	s15, r3
 800bd8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd92:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd96:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bef0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bda2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bda6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bdb2:	e043      	b.n	800be3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	ee07 3a90 	vmov	s15, r3
 800bdba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdbe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800befc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bdc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdc6:	4b48      	ldr	r3, [pc, #288]	; (800bee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdce:	ee07 3a90 	vmov	s15, r3
 800bdd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdd6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdda:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bef0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bdde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bde2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bde6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bdea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdf2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bdf6:	e021      	b.n	800be3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	ee07 3a90 	vmov	s15, r3
 800bdfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be02:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bef8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800be06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be0a:	4b37      	ldr	r3, [pc, #220]	; (800bee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be12:	ee07 3a90 	vmov	s15, r3
 800be16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800be1e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bef0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800be22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be3a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800be3c:	4b2a      	ldr	r3, [pc, #168]	; (800bee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be40:	0a5b      	lsrs	r3, r3, #9
 800be42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be46:	ee07 3a90 	vmov	s15, r3
 800be4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be52:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be56:	edd7 6a07 	vldr	s13, [r7, #28]
 800be5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be62:	ee17 2a90 	vmov	r2, s15
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800be6a:	4b1f      	ldr	r3, [pc, #124]	; (800bee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be6e:	0c1b      	lsrs	r3, r3, #16
 800be70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be74:	ee07 3a90 	vmov	s15, r3
 800be78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be80:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be84:	edd7 6a07 	vldr	s13, [r7, #28]
 800be88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be90:	ee17 2a90 	vmov	r2, s15
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800be98:	4b13      	ldr	r3, [pc, #76]	; (800bee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be9c:	0e1b      	lsrs	r3, r3, #24
 800be9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bea2:	ee07 3a90 	vmov	s15, r3
 800bea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800beae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800beb2:	edd7 6a07 	vldr	s13, [r7, #28]
 800beb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800beba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bebe:	ee17 2a90 	vmov	r2, s15
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bec6:	e008      	b.n	800beda <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2200      	movs	r2, #0
 800becc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2200      	movs	r2, #0
 800bed2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2200      	movs	r2, #0
 800bed8:	609a      	str	r2, [r3, #8]
}
 800beda:	bf00      	nop
 800bedc:	3724      	adds	r7, #36	; 0x24
 800bede:	46bd      	mov	sp, r7
 800bee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee4:	4770      	bx	lr
 800bee6:	bf00      	nop
 800bee8:	58024400 	.word	0x58024400
 800beec:	03d09000 	.word	0x03d09000
 800bef0:	46000000 	.word	0x46000000
 800bef4:	4c742400 	.word	0x4c742400
 800bef8:	4a742400 	.word	0x4a742400
 800befc:	4af42400 	.word	0x4af42400

0800bf00 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b089      	sub	sp, #36	; 0x24
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bf08:	4ba1      	ldr	r3, [pc, #644]	; (800c190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf0c:	f003 0303 	and.w	r3, r3, #3
 800bf10:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800bf12:	4b9f      	ldr	r3, [pc, #636]	; (800c190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf16:	0d1b      	lsrs	r3, r3, #20
 800bf18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf1c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bf1e:	4b9c      	ldr	r3, [pc, #624]	; (800c190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf22:	0a1b      	lsrs	r3, r3, #8
 800bf24:	f003 0301 	and.w	r3, r3, #1
 800bf28:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800bf2a:	4b99      	ldr	r3, [pc, #612]	; (800c190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf2e:	08db      	lsrs	r3, r3, #3
 800bf30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bf34:	693a      	ldr	r2, [r7, #16]
 800bf36:	fb02 f303 	mul.w	r3, r2, r3
 800bf3a:	ee07 3a90 	vmov	s15, r3
 800bf3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	f000 8111 	beq.w	800c170 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bf4e:	69bb      	ldr	r3, [r7, #24]
 800bf50:	2b02      	cmp	r3, #2
 800bf52:	f000 8083 	beq.w	800c05c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bf56:	69bb      	ldr	r3, [r7, #24]
 800bf58:	2b02      	cmp	r3, #2
 800bf5a:	f200 80a1 	bhi.w	800c0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bf5e:	69bb      	ldr	r3, [r7, #24]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d003      	beq.n	800bf6c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bf64:	69bb      	ldr	r3, [r7, #24]
 800bf66:	2b01      	cmp	r3, #1
 800bf68:	d056      	beq.n	800c018 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bf6a:	e099      	b.n	800c0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf6c:	4b88      	ldr	r3, [pc, #544]	; (800c190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	f003 0320 	and.w	r3, r3, #32
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d02d      	beq.n	800bfd4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bf78:	4b85      	ldr	r3, [pc, #532]	; (800c190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	08db      	lsrs	r3, r3, #3
 800bf7e:	f003 0303 	and.w	r3, r3, #3
 800bf82:	4a84      	ldr	r2, [pc, #528]	; (800c194 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bf84:	fa22 f303 	lsr.w	r3, r2, r3
 800bf88:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	ee07 3a90 	vmov	s15, r3
 800bf90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	ee07 3a90 	vmov	s15, r3
 800bf9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfa2:	4b7b      	ldr	r3, [pc, #492]	; (800c190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfaa:	ee07 3a90 	vmov	s15, r3
 800bfae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfb6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c198 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bfba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfce:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bfd2:	e087      	b.n	800c0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	ee07 3a90 	vmov	s15, r3
 800bfda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfde:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c19c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bfe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfe6:	4b6a      	ldr	r3, [pc, #424]	; (800c190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfee:	ee07 3a90 	vmov	s15, r3
 800bff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bff6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bffa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c198 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c00a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c00e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c012:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c016:	e065      	b.n	800c0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	ee07 3a90 	vmov	s15, r3
 800c01e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c022:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c02a:	4b59      	ldr	r3, [pc, #356]	; (800c190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c02e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c032:	ee07 3a90 	vmov	s15, r3
 800c036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c03a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c03e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c198 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c04a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c04e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c052:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c056:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c05a:	e043      	b.n	800c0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	ee07 3a90 	vmov	s15, r3
 800c062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c066:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c06a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c06e:	4b48      	ldr	r3, [pc, #288]	; (800c190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c076:	ee07 3a90 	vmov	s15, r3
 800c07a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c07e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c082:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c198 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c08a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c08e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c09a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c09e:	e021      	b.n	800c0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	ee07 3a90 	vmov	s15, r3
 800c0a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c0ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0b2:	4b37      	ldr	r3, [pc, #220]	; (800c190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0ba:	ee07 3a90 	vmov	s15, r3
 800c0be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c198 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c0ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c0e2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800c0e4:	4b2a      	ldr	r3, [pc, #168]	; (800c190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0e8:	0a5b      	lsrs	r3, r3, #9
 800c0ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0ee:	ee07 3a90 	vmov	s15, r3
 800c0f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c0fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800c102:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c10a:	ee17 2a90 	vmov	r2, s15
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c112:	4b1f      	ldr	r3, [pc, #124]	; (800c190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c116:	0c1b      	lsrs	r3, r3, #16
 800c118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c11c:	ee07 3a90 	vmov	s15, r3
 800c120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c124:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c128:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c12c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c130:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c134:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c138:	ee17 2a90 	vmov	r2, s15
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c140:	4b13      	ldr	r3, [pc, #76]	; (800c190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c144:	0e1b      	lsrs	r3, r3, #24
 800c146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c14a:	ee07 3a90 	vmov	s15, r3
 800c14e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c152:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c156:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c15a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c15e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c166:	ee17 2a90 	vmov	r2, s15
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c16e:	e008      	b.n	800c182 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2200      	movs	r2, #0
 800c174:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2200      	movs	r2, #0
 800c17a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2200      	movs	r2, #0
 800c180:	609a      	str	r2, [r3, #8]
}
 800c182:	bf00      	nop
 800c184:	3724      	adds	r7, #36	; 0x24
 800c186:	46bd      	mov	sp, r7
 800c188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18c:	4770      	bx	lr
 800c18e:	bf00      	nop
 800c190:	58024400 	.word	0x58024400
 800c194:	03d09000 	.word	0x03d09000
 800c198:	46000000 	.word	0x46000000
 800c19c:	4c742400 	.word	0x4c742400
 800c1a0:	4a742400 	.word	0x4a742400
 800c1a4:	4af42400 	.word	0x4af42400

0800c1a8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b089      	sub	sp, #36	; 0x24
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c1b0:	4ba0      	ldr	r3, [pc, #640]	; (800c434 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1b4:	f003 0303 	and.w	r3, r3, #3
 800c1b8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800c1ba:	4b9e      	ldr	r3, [pc, #632]	; (800c434 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1be:	091b      	lsrs	r3, r3, #4
 800c1c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c1c4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c1c6:	4b9b      	ldr	r3, [pc, #620]	; (800c434 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ca:	f003 0301 	and.w	r3, r3, #1
 800c1ce:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800c1d0:	4b98      	ldr	r3, [pc, #608]	; (800c434 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1d4:	08db      	lsrs	r3, r3, #3
 800c1d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c1da:	693a      	ldr	r2, [r7, #16]
 800c1dc:	fb02 f303 	mul.w	r3, r2, r3
 800c1e0:	ee07 3a90 	vmov	s15, r3
 800c1e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1e8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	f000 8111 	beq.w	800c416 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c1f4:	69bb      	ldr	r3, [r7, #24]
 800c1f6:	2b02      	cmp	r3, #2
 800c1f8:	f000 8083 	beq.w	800c302 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c1fc:	69bb      	ldr	r3, [r7, #24]
 800c1fe:	2b02      	cmp	r3, #2
 800c200:	f200 80a1 	bhi.w	800c346 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c204:	69bb      	ldr	r3, [r7, #24]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d003      	beq.n	800c212 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c20a:	69bb      	ldr	r3, [r7, #24]
 800c20c:	2b01      	cmp	r3, #1
 800c20e:	d056      	beq.n	800c2be <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c210:	e099      	b.n	800c346 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c212:	4b88      	ldr	r3, [pc, #544]	; (800c434 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f003 0320 	and.w	r3, r3, #32
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d02d      	beq.n	800c27a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c21e:	4b85      	ldr	r3, [pc, #532]	; (800c434 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	08db      	lsrs	r3, r3, #3
 800c224:	f003 0303 	and.w	r3, r3, #3
 800c228:	4a83      	ldr	r2, [pc, #524]	; (800c438 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c22a:	fa22 f303 	lsr.w	r3, r2, r3
 800c22e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	ee07 3a90 	vmov	s15, r3
 800c236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	ee07 3a90 	vmov	s15, r3
 800c240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c244:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c248:	4b7a      	ldr	r3, [pc, #488]	; (800c434 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c24a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c24c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c250:	ee07 3a90 	vmov	s15, r3
 800c254:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c258:	ed97 6a03 	vldr	s12, [r7, #12]
 800c25c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c43c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c260:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c264:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c268:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c26c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c270:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c274:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c278:	e087      	b.n	800c38a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	ee07 3a90 	vmov	s15, r3
 800c280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c284:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c440 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c288:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c28c:	4b69      	ldr	r3, [pc, #420]	; (800c434 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c28e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c294:	ee07 3a90 	vmov	s15, r3
 800c298:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c29c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2a0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c43c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c2a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c2b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c2bc:	e065      	b.n	800c38a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	ee07 3a90 	vmov	s15, r3
 800c2c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2c8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c444 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c2cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2d0:	4b58      	ldr	r3, [pc, #352]	; (800c434 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2d8:	ee07 3a90 	vmov	s15, r3
 800c2dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2e0:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2e4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c43c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c2e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c2f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c300:	e043      	b.n	800c38a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	ee07 3a90 	vmov	s15, r3
 800c308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c30c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c448 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c310:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c314:	4b47      	ldr	r3, [pc, #284]	; (800c434 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c31c:	ee07 3a90 	vmov	s15, r3
 800c320:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c324:	ed97 6a03 	vldr	s12, [r7, #12]
 800c328:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c43c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c32c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c330:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c334:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c338:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c33c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c340:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c344:	e021      	b.n	800c38a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	ee07 3a90 	vmov	s15, r3
 800c34c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c350:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c440 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c354:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c358:	4b36      	ldr	r3, [pc, #216]	; (800c434 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c35a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c35c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c360:	ee07 3a90 	vmov	s15, r3
 800c364:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c368:	ed97 6a03 	vldr	s12, [r7, #12]
 800c36c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c43c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c370:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c374:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c378:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c37c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c380:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c384:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c388:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800c38a:	4b2a      	ldr	r3, [pc, #168]	; (800c434 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c38c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c38e:	0a5b      	lsrs	r3, r3, #9
 800c390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c394:	ee07 3a90 	vmov	s15, r3
 800c398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c39c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c3a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c3a4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c3a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3b0:	ee17 2a90 	vmov	r2, s15
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800c3b8:	4b1e      	ldr	r3, [pc, #120]	; (800c434 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c3ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3bc:	0c1b      	lsrs	r3, r3, #16
 800c3be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3c2:	ee07 3a90 	vmov	s15, r3
 800c3c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c3ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c3d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c3d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3de:	ee17 2a90 	vmov	r2, s15
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800c3e6:	4b13      	ldr	r3, [pc, #76]	; (800c434 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c3e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3ea:	0e1b      	lsrs	r3, r3, #24
 800c3ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3f0:	ee07 3a90 	vmov	s15, r3
 800c3f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c3fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c400:	edd7 6a07 	vldr	s13, [r7, #28]
 800c404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c40c:	ee17 2a90 	vmov	r2, s15
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c414:	e008      	b.n	800c428 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2200      	movs	r2, #0
 800c41a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2200      	movs	r2, #0
 800c420:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2200      	movs	r2, #0
 800c426:	609a      	str	r2, [r3, #8]
}
 800c428:	bf00      	nop
 800c42a:	3724      	adds	r7, #36	; 0x24
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr
 800c434:	58024400 	.word	0x58024400
 800c438:	03d09000 	.word	0x03d09000
 800c43c:	46000000 	.word	0x46000000
 800c440:	4c742400 	.word	0x4c742400
 800c444:	4a742400 	.word	0x4a742400
 800c448:	4af42400 	.word	0x4af42400

0800c44c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b084      	sub	sp, #16
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c456:	2300      	movs	r3, #0
 800c458:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c45a:	4b53      	ldr	r3, [pc, #332]	; (800c5a8 <RCCEx_PLL2_Config+0x15c>)
 800c45c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c45e:	f003 0303 	and.w	r3, r3, #3
 800c462:	2b03      	cmp	r3, #3
 800c464:	d101      	bne.n	800c46a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c466:	2301      	movs	r3, #1
 800c468:	e099      	b.n	800c59e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c46a:	4b4f      	ldr	r3, [pc, #316]	; (800c5a8 <RCCEx_PLL2_Config+0x15c>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	4a4e      	ldr	r2, [pc, #312]	; (800c5a8 <RCCEx_PLL2_Config+0x15c>)
 800c470:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c474:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c476:	f7f6 f863 	bl	8002540 <HAL_GetTick>
 800c47a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c47c:	e008      	b.n	800c490 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c47e:	f7f6 f85f 	bl	8002540 <HAL_GetTick>
 800c482:	4602      	mov	r2, r0
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	1ad3      	subs	r3, r2, r3
 800c488:	2b02      	cmp	r3, #2
 800c48a:	d901      	bls.n	800c490 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c48c:	2303      	movs	r3, #3
 800c48e:	e086      	b.n	800c59e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c490:	4b45      	ldr	r3, [pc, #276]	; (800c5a8 <RCCEx_PLL2_Config+0x15c>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d1f0      	bne.n	800c47e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c49c:	4b42      	ldr	r3, [pc, #264]	; (800c5a8 <RCCEx_PLL2_Config+0x15c>)
 800c49e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	031b      	lsls	r3, r3, #12
 800c4aa:	493f      	ldr	r1, [pc, #252]	; (800c5a8 <RCCEx_PLL2_Config+0x15c>)
 800c4ac:	4313      	orrs	r3, r2
 800c4ae:	628b      	str	r3, [r1, #40]	; 0x28
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	685b      	ldr	r3, [r3, #4]
 800c4b4:	3b01      	subs	r3, #1
 800c4b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	689b      	ldr	r3, [r3, #8]
 800c4be:	3b01      	subs	r3, #1
 800c4c0:	025b      	lsls	r3, r3, #9
 800c4c2:	b29b      	uxth	r3, r3
 800c4c4:	431a      	orrs	r2, r3
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	68db      	ldr	r3, [r3, #12]
 800c4ca:	3b01      	subs	r3, #1
 800c4cc:	041b      	lsls	r3, r3, #16
 800c4ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c4d2:	431a      	orrs	r2, r3
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	691b      	ldr	r3, [r3, #16]
 800c4d8:	3b01      	subs	r3, #1
 800c4da:	061b      	lsls	r3, r3, #24
 800c4dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c4e0:	4931      	ldr	r1, [pc, #196]	; (800c5a8 <RCCEx_PLL2_Config+0x15c>)
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c4e6:	4b30      	ldr	r3, [pc, #192]	; (800c5a8 <RCCEx_PLL2_Config+0x15c>)
 800c4e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	695b      	ldr	r3, [r3, #20]
 800c4f2:	492d      	ldr	r1, [pc, #180]	; (800c5a8 <RCCEx_PLL2_Config+0x15c>)
 800c4f4:	4313      	orrs	r3, r2
 800c4f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c4f8:	4b2b      	ldr	r3, [pc, #172]	; (800c5a8 <RCCEx_PLL2_Config+0x15c>)
 800c4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4fc:	f023 0220 	bic.w	r2, r3, #32
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	699b      	ldr	r3, [r3, #24]
 800c504:	4928      	ldr	r1, [pc, #160]	; (800c5a8 <RCCEx_PLL2_Config+0x15c>)
 800c506:	4313      	orrs	r3, r2
 800c508:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c50a:	4b27      	ldr	r3, [pc, #156]	; (800c5a8 <RCCEx_PLL2_Config+0x15c>)
 800c50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c50e:	4a26      	ldr	r2, [pc, #152]	; (800c5a8 <RCCEx_PLL2_Config+0x15c>)
 800c510:	f023 0310 	bic.w	r3, r3, #16
 800c514:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c516:	4b24      	ldr	r3, [pc, #144]	; (800c5a8 <RCCEx_PLL2_Config+0x15c>)
 800c518:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c51a:	4b24      	ldr	r3, [pc, #144]	; (800c5ac <RCCEx_PLL2_Config+0x160>)
 800c51c:	4013      	ands	r3, r2
 800c51e:	687a      	ldr	r2, [r7, #4]
 800c520:	69d2      	ldr	r2, [r2, #28]
 800c522:	00d2      	lsls	r2, r2, #3
 800c524:	4920      	ldr	r1, [pc, #128]	; (800c5a8 <RCCEx_PLL2_Config+0x15c>)
 800c526:	4313      	orrs	r3, r2
 800c528:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c52a:	4b1f      	ldr	r3, [pc, #124]	; (800c5a8 <RCCEx_PLL2_Config+0x15c>)
 800c52c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c52e:	4a1e      	ldr	r2, [pc, #120]	; (800c5a8 <RCCEx_PLL2_Config+0x15c>)
 800c530:	f043 0310 	orr.w	r3, r3, #16
 800c534:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d106      	bne.n	800c54a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c53c:	4b1a      	ldr	r3, [pc, #104]	; (800c5a8 <RCCEx_PLL2_Config+0x15c>)
 800c53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c540:	4a19      	ldr	r2, [pc, #100]	; (800c5a8 <RCCEx_PLL2_Config+0x15c>)
 800c542:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c546:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c548:	e00f      	b.n	800c56a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	d106      	bne.n	800c55e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c550:	4b15      	ldr	r3, [pc, #84]	; (800c5a8 <RCCEx_PLL2_Config+0x15c>)
 800c552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c554:	4a14      	ldr	r2, [pc, #80]	; (800c5a8 <RCCEx_PLL2_Config+0x15c>)
 800c556:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c55a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c55c:	e005      	b.n	800c56a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c55e:	4b12      	ldr	r3, [pc, #72]	; (800c5a8 <RCCEx_PLL2_Config+0x15c>)
 800c560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c562:	4a11      	ldr	r2, [pc, #68]	; (800c5a8 <RCCEx_PLL2_Config+0x15c>)
 800c564:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c568:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c56a:	4b0f      	ldr	r3, [pc, #60]	; (800c5a8 <RCCEx_PLL2_Config+0x15c>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	4a0e      	ldr	r2, [pc, #56]	; (800c5a8 <RCCEx_PLL2_Config+0x15c>)
 800c570:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c574:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c576:	f7f5 ffe3 	bl	8002540 <HAL_GetTick>
 800c57a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c57c:	e008      	b.n	800c590 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c57e:	f7f5 ffdf 	bl	8002540 <HAL_GetTick>
 800c582:	4602      	mov	r2, r0
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	1ad3      	subs	r3, r2, r3
 800c588:	2b02      	cmp	r3, #2
 800c58a:	d901      	bls.n	800c590 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c58c:	2303      	movs	r3, #3
 800c58e:	e006      	b.n	800c59e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c590:	4b05      	ldr	r3, [pc, #20]	; (800c5a8 <RCCEx_PLL2_Config+0x15c>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d0f0      	beq.n	800c57e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c59c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3710      	adds	r7, #16
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	58024400 	.word	0x58024400
 800c5ac:	ffff0007 	.word	0xffff0007

0800c5b0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b084      	sub	sp, #16
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c5be:	4b53      	ldr	r3, [pc, #332]	; (800c70c <RCCEx_PLL3_Config+0x15c>)
 800c5c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5c2:	f003 0303 	and.w	r3, r3, #3
 800c5c6:	2b03      	cmp	r3, #3
 800c5c8:	d101      	bne.n	800c5ce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	e099      	b.n	800c702 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c5ce:	4b4f      	ldr	r3, [pc, #316]	; (800c70c <RCCEx_PLL3_Config+0x15c>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	4a4e      	ldr	r2, [pc, #312]	; (800c70c <RCCEx_PLL3_Config+0x15c>)
 800c5d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c5d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c5da:	f7f5 ffb1 	bl	8002540 <HAL_GetTick>
 800c5de:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c5e0:	e008      	b.n	800c5f4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c5e2:	f7f5 ffad 	bl	8002540 <HAL_GetTick>
 800c5e6:	4602      	mov	r2, r0
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	1ad3      	subs	r3, r2, r3
 800c5ec:	2b02      	cmp	r3, #2
 800c5ee:	d901      	bls.n	800c5f4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c5f0:	2303      	movs	r3, #3
 800c5f2:	e086      	b.n	800c702 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c5f4:	4b45      	ldr	r3, [pc, #276]	; (800c70c <RCCEx_PLL3_Config+0x15c>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d1f0      	bne.n	800c5e2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c600:	4b42      	ldr	r3, [pc, #264]	; (800c70c <RCCEx_PLL3_Config+0x15c>)
 800c602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c604:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	051b      	lsls	r3, r3, #20
 800c60e:	493f      	ldr	r1, [pc, #252]	; (800c70c <RCCEx_PLL3_Config+0x15c>)
 800c610:	4313      	orrs	r3, r2
 800c612:	628b      	str	r3, [r1, #40]	; 0x28
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	685b      	ldr	r3, [r3, #4]
 800c618:	3b01      	subs	r3, #1
 800c61a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	689b      	ldr	r3, [r3, #8]
 800c622:	3b01      	subs	r3, #1
 800c624:	025b      	lsls	r3, r3, #9
 800c626:	b29b      	uxth	r3, r3
 800c628:	431a      	orrs	r2, r3
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	68db      	ldr	r3, [r3, #12]
 800c62e:	3b01      	subs	r3, #1
 800c630:	041b      	lsls	r3, r3, #16
 800c632:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c636:	431a      	orrs	r2, r3
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	691b      	ldr	r3, [r3, #16]
 800c63c:	3b01      	subs	r3, #1
 800c63e:	061b      	lsls	r3, r3, #24
 800c640:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c644:	4931      	ldr	r1, [pc, #196]	; (800c70c <RCCEx_PLL3_Config+0x15c>)
 800c646:	4313      	orrs	r3, r2
 800c648:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c64a:	4b30      	ldr	r3, [pc, #192]	; (800c70c <RCCEx_PLL3_Config+0x15c>)
 800c64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c64e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	695b      	ldr	r3, [r3, #20]
 800c656:	492d      	ldr	r1, [pc, #180]	; (800c70c <RCCEx_PLL3_Config+0x15c>)
 800c658:	4313      	orrs	r3, r2
 800c65a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c65c:	4b2b      	ldr	r3, [pc, #172]	; (800c70c <RCCEx_PLL3_Config+0x15c>)
 800c65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c660:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	699b      	ldr	r3, [r3, #24]
 800c668:	4928      	ldr	r1, [pc, #160]	; (800c70c <RCCEx_PLL3_Config+0x15c>)
 800c66a:	4313      	orrs	r3, r2
 800c66c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c66e:	4b27      	ldr	r3, [pc, #156]	; (800c70c <RCCEx_PLL3_Config+0x15c>)
 800c670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c672:	4a26      	ldr	r2, [pc, #152]	; (800c70c <RCCEx_PLL3_Config+0x15c>)
 800c674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c678:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c67a:	4b24      	ldr	r3, [pc, #144]	; (800c70c <RCCEx_PLL3_Config+0x15c>)
 800c67c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c67e:	4b24      	ldr	r3, [pc, #144]	; (800c710 <RCCEx_PLL3_Config+0x160>)
 800c680:	4013      	ands	r3, r2
 800c682:	687a      	ldr	r2, [r7, #4]
 800c684:	69d2      	ldr	r2, [r2, #28]
 800c686:	00d2      	lsls	r2, r2, #3
 800c688:	4920      	ldr	r1, [pc, #128]	; (800c70c <RCCEx_PLL3_Config+0x15c>)
 800c68a:	4313      	orrs	r3, r2
 800c68c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c68e:	4b1f      	ldr	r3, [pc, #124]	; (800c70c <RCCEx_PLL3_Config+0x15c>)
 800c690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c692:	4a1e      	ldr	r2, [pc, #120]	; (800c70c <RCCEx_PLL3_Config+0x15c>)
 800c694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c698:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d106      	bne.n	800c6ae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c6a0:	4b1a      	ldr	r3, [pc, #104]	; (800c70c <RCCEx_PLL3_Config+0x15c>)
 800c6a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6a4:	4a19      	ldr	r2, [pc, #100]	; (800c70c <RCCEx_PLL3_Config+0x15c>)
 800c6a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c6aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c6ac:	e00f      	b.n	800c6ce <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	2b01      	cmp	r3, #1
 800c6b2:	d106      	bne.n	800c6c2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c6b4:	4b15      	ldr	r3, [pc, #84]	; (800c70c <RCCEx_PLL3_Config+0x15c>)
 800c6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6b8:	4a14      	ldr	r2, [pc, #80]	; (800c70c <RCCEx_PLL3_Config+0x15c>)
 800c6ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c6be:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c6c0:	e005      	b.n	800c6ce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c6c2:	4b12      	ldr	r3, [pc, #72]	; (800c70c <RCCEx_PLL3_Config+0x15c>)
 800c6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6c6:	4a11      	ldr	r2, [pc, #68]	; (800c70c <RCCEx_PLL3_Config+0x15c>)
 800c6c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c6cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c6ce:	4b0f      	ldr	r3, [pc, #60]	; (800c70c <RCCEx_PLL3_Config+0x15c>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	4a0e      	ldr	r2, [pc, #56]	; (800c70c <RCCEx_PLL3_Config+0x15c>)
 800c6d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c6da:	f7f5 ff31 	bl	8002540 <HAL_GetTick>
 800c6de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c6e0:	e008      	b.n	800c6f4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c6e2:	f7f5 ff2d 	bl	8002540 <HAL_GetTick>
 800c6e6:	4602      	mov	r2, r0
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	1ad3      	subs	r3, r2, r3
 800c6ec:	2b02      	cmp	r3, #2
 800c6ee:	d901      	bls.n	800c6f4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c6f0:	2303      	movs	r3, #3
 800c6f2:	e006      	b.n	800c702 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c6f4:	4b05      	ldr	r3, [pc, #20]	; (800c70c <RCCEx_PLL3_Config+0x15c>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d0f0      	beq.n	800c6e2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c700:	7bfb      	ldrb	r3, [r7, #15]
}
 800c702:	4618      	mov	r0, r3
 800c704:	3710      	adds	r7, #16
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}
 800c70a:	bf00      	nop
 800c70c:	58024400 	.word	0x58024400
 800c710:	ffff0007 	.word	0xffff0007

0800c714 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b082      	sub	sp, #8
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d101      	bne.n	800c726 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c722:	2301      	movs	r3, #1
 800c724:	e049      	b.n	800c7ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c72c:	b2db      	uxtb	r3, r3
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d106      	bne.n	800c740 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2200      	movs	r2, #0
 800c736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f7f5 fd2c 	bl	8002198 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2202      	movs	r2, #2
 800c744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681a      	ldr	r2, [r3, #0]
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	3304      	adds	r3, #4
 800c750:	4619      	mov	r1, r3
 800c752:	4610      	mov	r0, r2
 800c754:	f000 fd06 	bl	800d164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2201      	movs	r2, #1
 800c75c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2201      	movs	r2, #1
 800c764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2201      	movs	r2, #1
 800c76c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2201      	movs	r2, #1
 800c774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2201      	movs	r2, #1
 800c77c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2201      	movs	r2, #1
 800c784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2201      	movs	r2, #1
 800c78c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2201      	movs	r2, #1
 800c794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2201      	movs	r2, #1
 800c79c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2201      	movs	r2, #1
 800c7a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c7b8:	2300      	movs	r3, #0
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3708      	adds	r7, #8
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}
	...

0800c7c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b085      	sub	sp, #20
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7d2:	b2db      	uxtb	r3, r3
 800c7d4:	2b01      	cmp	r3, #1
 800c7d6:	d001      	beq.n	800c7dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c7d8:	2301      	movs	r3, #1
 800c7da:	e054      	b.n	800c886 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2202      	movs	r2, #2
 800c7e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	68da      	ldr	r2, [r3, #12]
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f042 0201 	orr.w	r2, r2, #1
 800c7f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	4a26      	ldr	r2, [pc, #152]	; (800c894 <HAL_TIM_Base_Start_IT+0xd0>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d022      	beq.n	800c844 <HAL_TIM_Base_Start_IT+0x80>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c806:	d01d      	beq.n	800c844 <HAL_TIM_Base_Start_IT+0x80>
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	4a22      	ldr	r2, [pc, #136]	; (800c898 <HAL_TIM_Base_Start_IT+0xd4>)
 800c80e:	4293      	cmp	r3, r2
 800c810:	d018      	beq.n	800c844 <HAL_TIM_Base_Start_IT+0x80>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	4a21      	ldr	r2, [pc, #132]	; (800c89c <HAL_TIM_Base_Start_IT+0xd8>)
 800c818:	4293      	cmp	r3, r2
 800c81a:	d013      	beq.n	800c844 <HAL_TIM_Base_Start_IT+0x80>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4a1f      	ldr	r2, [pc, #124]	; (800c8a0 <HAL_TIM_Base_Start_IT+0xdc>)
 800c822:	4293      	cmp	r3, r2
 800c824:	d00e      	beq.n	800c844 <HAL_TIM_Base_Start_IT+0x80>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	4a1e      	ldr	r2, [pc, #120]	; (800c8a4 <HAL_TIM_Base_Start_IT+0xe0>)
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d009      	beq.n	800c844 <HAL_TIM_Base_Start_IT+0x80>
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	4a1c      	ldr	r2, [pc, #112]	; (800c8a8 <HAL_TIM_Base_Start_IT+0xe4>)
 800c836:	4293      	cmp	r3, r2
 800c838:	d004      	beq.n	800c844 <HAL_TIM_Base_Start_IT+0x80>
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	4a1b      	ldr	r2, [pc, #108]	; (800c8ac <HAL_TIM_Base_Start_IT+0xe8>)
 800c840:	4293      	cmp	r3, r2
 800c842:	d115      	bne.n	800c870 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	689a      	ldr	r2, [r3, #8]
 800c84a:	4b19      	ldr	r3, [pc, #100]	; (800c8b0 <HAL_TIM_Base_Start_IT+0xec>)
 800c84c:	4013      	ands	r3, r2
 800c84e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	2b06      	cmp	r3, #6
 800c854:	d015      	beq.n	800c882 <HAL_TIM_Base_Start_IT+0xbe>
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c85c:	d011      	beq.n	800c882 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	681a      	ldr	r2, [r3, #0]
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f042 0201 	orr.w	r2, r2, #1
 800c86c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c86e:	e008      	b.n	800c882 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	681a      	ldr	r2, [r3, #0]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f042 0201 	orr.w	r2, r2, #1
 800c87e:	601a      	str	r2, [r3, #0]
 800c880:	e000      	b.n	800c884 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c882:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c884:	2300      	movs	r3, #0
}
 800c886:	4618      	mov	r0, r3
 800c888:	3714      	adds	r7, #20
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr
 800c892:	bf00      	nop
 800c894:	40010000 	.word	0x40010000
 800c898:	40000400 	.word	0x40000400
 800c89c:	40000800 	.word	0x40000800
 800c8a0:	40000c00 	.word	0x40000c00
 800c8a4:	40010400 	.word	0x40010400
 800c8a8:	40001800 	.word	0x40001800
 800c8ac:	40014000 	.word	0x40014000
 800c8b0:	00010007 	.word	0x00010007

0800c8b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d101      	bne.n	800c8c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	e049      	b.n	800c95a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c8cc:	b2db      	uxtb	r3, r3
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d106      	bne.n	800c8e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f7f5 fc3a 	bl	8002154 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2202      	movs	r2, #2
 800c8e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681a      	ldr	r2, [r3, #0]
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	3304      	adds	r3, #4
 800c8f0:	4619      	mov	r1, r3
 800c8f2:	4610      	mov	r0, r2
 800c8f4:	f000 fc36 	bl	800d164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2201      	movs	r2, #1
 800c904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2201      	movs	r2, #1
 800c90c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2201      	movs	r2, #1
 800c914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2201      	movs	r2, #1
 800c91c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2201      	movs	r2, #1
 800c924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2201      	movs	r2, #1
 800c92c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2201      	movs	r2, #1
 800c934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2201      	movs	r2, #1
 800c93c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2201      	movs	r2, #1
 800c944:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2201      	movs	r2, #1
 800c94c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2201      	movs	r2, #1
 800c954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c958:	2300      	movs	r3, #0
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	3708      	adds	r7, #8
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}
	...

0800c964 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b084      	sub	sp, #16
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d109      	bne.n	800c988 <HAL_TIM_PWM_Start+0x24>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c97a:	b2db      	uxtb	r3, r3
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	bf14      	ite	ne
 800c980:	2301      	movne	r3, #1
 800c982:	2300      	moveq	r3, #0
 800c984:	b2db      	uxtb	r3, r3
 800c986:	e03c      	b.n	800ca02 <HAL_TIM_PWM_Start+0x9e>
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	2b04      	cmp	r3, #4
 800c98c:	d109      	bne.n	800c9a2 <HAL_TIM_PWM_Start+0x3e>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c994:	b2db      	uxtb	r3, r3
 800c996:	2b01      	cmp	r3, #1
 800c998:	bf14      	ite	ne
 800c99a:	2301      	movne	r3, #1
 800c99c:	2300      	moveq	r3, #0
 800c99e:	b2db      	uxtb	r3, r3
 800c9a0:	e02f      	b.n	800ca02 <HAL_TIM_PWM_Start+0x9e>
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	2b08      	cmp	r3, #8
 800c9a6:	d109      	bne.n	800c9bc <HAL_TIM_PWM_Start+0x58>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c9ae:	b2db      	uxtb	r3, r3
 800c9b0:	2b01      	cmp	r3, #1
 800c9b2:	bf14      	ite	ne
 800c9b4:	2301      	movne	r3, #1
 800c9b6:	2300      	moveq	r3, #0
 800c9b8:	b2db      	uxtb	r3, r3
 800c9ba:	e022      	b.n	800ca02 <HAL_TIM_PWM_Start+0x9e>
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	2b0c      	cmp	r3, #12
 800c9c0:	d109      	bne.n	800c9d6 <HAL_TIM_PWM_Start+0x72>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c9c8:	b2db      	uxtb	r3, r3
 800c9ca:	2b01      	cmp	r3, #1
 800c9cc:	bf14      	ite	ne
 800c9ce:	2301      	movne	r3, #1
 800c9d0:	2300      	moveq	r3, #0
 800c9d2:	b2db      	uxtb	r3, r3
 800c9d4:	e015      	b.n	800ca02 <HAL_TIM_PWM_Start+0x9e>
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	2b10      	cmp	r3, #16
 800c9da:	d109      	bne.n	800c9f0 <HAL_TIM_PWM_Start+0x8c>
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c9e2:	b2db      	uxtb	r3, r3
 800c9e4:	2b01      	cmp	r3, #1
 800c9e6:	bf14      	ite	ne
 800c9e8:	2301      	movne	r3, #1
 800c9ea:	2300      	moveq	r3, #0
 800c9ec:	b2db      	uxtb	r3, r3
 800c9ee:	e008      	b.n	800ca02 <HAL_TIM_PWM_Start+0x9e>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c9f6:	b2db      	uxtb	r3, r3
 800c9f8:	2b01      	cmp	r3, #1
 800c9fa:	bf14      	ite	ne
 800c9fc:	2301      	movne	r3, #1
 800c9fe:	2300      	moveq	r3, #0
 800ca00:	b2db      	uxtb	r3, r3
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d001      	beq.n	800ca0a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ca06:	2301      	movs	r3, #1
 800ca08:	e0a1      	b.n	800cb4e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d104      	bne.n	800ca1a <HAL_TIM_PWM_Start+0xb6>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2202      	movs	r2, #2
 800ca14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ca18:	e023      	b.n	800ca62 <HAL_TIM_PWM_Start+0xfe>
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	2b04      	cmp	r3, #4
 800ca1e:	d104      	bne.n	800ca2a <HAL_TIM_PWM_Start+0xc6>
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2202      	movs	r2, #2
 800ca24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ca28:	e01b      	b.n	800ca62 <HAL_TIM_PWM_Start+0xfe>
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	2b08      	cmp	r3, #8
 800ca2e:	d104      	bne.n	800ca3a <HAL_TIM_PWM_Start+0xd6>
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2202      	movs	r2, #2
 800ca34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ca38:	e013      	b.n	800ca62 <HAL_TIM_PWM_Start+0xfe>
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	2b0c      	cmp	r3, #12
 800ca3e:	d104      	bne.n	800ca4a <HAL_TIM_PWM_Start+0xe6>
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2202      	movs	r2, #2
 800ca44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ca48:	e00b      	b.n	800ca62 <HAL_TIM_PWM_Start+0xfe>
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	2b10      	cmp	r3, #16
 800ca4e:	d104      	bne.n	800ca5a <HAL_TIM_PWM_Start+0xf6>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2202      	movs	r2, #2
 800ca54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ca58:	e003      	b.n	800ca62 <HAL_TIM_PWM_Start+0xfe>
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2202      	movs	r2, #2
 800ca5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	2201      	movs	r2, #1
 800ca68:	6839      	ldr	r1, [r7, #0]
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f000 feea 	bl	800d844 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4a38      	ldr	r2, [pc, #224]	; (800cb58 <HAL_TIM_PWM_Start+0x1f4>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d013      	beq.n	800caa2 <HAL_TIM_PWM_Start+0x13e>
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	4a37      	ldr	r2, [pc, #220]	; (800cb5c <HAL_TIM_PWM_Start+0x1f8>)
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d00e      	beq.n	800caa2 <HAL_TIM_PWM_Start+0x13e>
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	4a35      	ldr	r2, [pc, #212]	; (800cb60 <HAL_TIM_PWM_Start+0x1fc>)
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	d009      	beq.n	800caa2 <HAL_TIM_PWM_Start+0x13e>
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	4a34      	ldr	r2, [pc, #208]	; (800cb64 <HAL_TIM_PWM_Start+0x200>)
 800ca94:	4293      	cmp	r3, r2
 800ca96:	d004      	beq.n	800caa2 <HAL_TIM_PWM_Start+0x13e>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	4a32      	ldr	r2, [pc, #200]	; (800cb68 <HAL_TIM_PWM_Start+0x204>)
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	d101      	bne.n	800caa6 <HAL_TIM_PWM_Start+0x142>
 800caa2:	2301      	movs	r3, #1
 800caa4:	e000      	b.n	800caa8 <HAL_TIM_PWM_Start+0x144>
 800caa6:	2300      	movs	r3, #0
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d007      	beq.n	800cabc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800caba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4a25      	ldr	r2, [pc, #148]	; (800cb58 <HAL_TIM_PWM_Start+0x1f4>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d022      	beq.n	800cb0c <HAL_TIM_PWM_Start+0x1a8>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cace:	d01d      	beq.n	800cb0c <HAL_TIM_PWM_Start+0x1a8>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	4a25      	ldr	r2, [pc, #148]	; (800cb6c <HAL_TIM_PWM_Start+0x208>)
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d018      	beq.n	800cb0c <HAL_TIM_PWM_Start+0x1a8>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	4a24      	ldr	r2, [pc, #144]	; (800cb70 <HAL_TIM_PWM_Start+0x20c>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d013      	beq.n	800cb0c <HAL_TIM_PWM_Start+0x1a8>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4a22      	ldr	r2, [pc, #136]	; (800cb74 <HAL_TIM_PWM_Start+0x210>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d00e      	beq.n	800cb0c <HAL_TIM_PWM_Start+0x1a8>
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	4a1a      	ldr	r2, [pc, #104]	; (800cb5c <HAL_TIM_PWM_Start+0x1f8>)
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d009      	beq.n	800cb0c <HAL_TIM_PWM_Start+0x1a8>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	4a1e      	ldr	r2, [pc, #120]	; (800cb78 <HAL_TIM_PWM_Start+0x214>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d004      	beq.n	800cb0c <HAL_TIM_PWM_Start+0x1a8>
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	4a16      	ldr	r2, [pc, #88]	; (800cb60 <HAL_TIM_PWM_Start+0x1fc>)
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	d115      	bne.n	800cb38 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	689a      	ldr	r2, [r3, #8]
 800cb12:	4b1a      	ldr	r3, [pc, #104]	; (800cb7c <HAL_TIM_PWM_Start+0x218>)
 800cb14:	4013      	ands	r3, r2
 800cb16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	2b06      	cmp	r3, #6
 800cb1c:	d015      	beq.n	800cb4a <HAL_TIM_PWM_Start+0x1e6>
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb24:	d011      	beq.n	800cb4a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	681a      	ldr	r2, [r3, #0]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f042 0201 	orr.w	r2, r2, #1
 800cb34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb36:	e008      	b.n	800cb4a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	681a      	ldr	r2, [r3, #0]
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	f042 0201 	orr.w	r2, r2, #1
 800cb46:	601a      	str	r2, [r3, #0]
 800cb48:	e000      	b.n	800cb4c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cb4c:	2300      	movs	r3, #0
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3710      	adds	r7, #16
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}
 800cb56:	bf00      	nop
 800cb58:	40010000 	.word	0x40010000
 800cb5c:	40010400 	.word	0x40010400
 800cb60:	40014000 	.word	0x40014000
 800cb64:	40014400 	.word	0x40014400
 800cb68:	40014800 	.word	0x40014800
 800cb6c:	40000400 	.word	0x40000400
 800cb70:	40000800 	.word	0x40000800
 800cb74:	40000c00 	.word	0x40000c00
 800cb78:	40001800 	.word	0x40001800
 800cb7c:	00010007 	.word	0x00010007

0800cb80 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b082      	sub	sp, #8
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	6839      	ldr	r1, [r7, #0]
 800cb92:	4618      	mov	r0, r3
 800cb94:	f000 fe56 	bl	800d844 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	4a3e      	ldr	r2, [pc, #248]	; (800cc98 <HAL_TIM_PWM_Stop+0x118>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d013      	beq.n	800cbca <HAL_TIM_PWM_Stop+0x4a>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	4a3d      	ldr	r2, [pc, #244]	; (800cc9c <HAL_TIM_PWM_Stop+0x11c>)
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d00e      	beq.n	800cbca <HAL_TIM_PWM_Stop+0x4a>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4a3b      	ldr	r2, [pc, #236]	; (800cca0 <HAL_TIM_PWM_Stop+0x120>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d009      	beq.n	800cbca <HAL_TIM_PWM_Stop+0x4a>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	4a3a      	ldr	r2, [pc, #232]	; (800cca4 <HAL_TIM_PWM_Stop+0x124>)
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d004      	beq.n	800cbca <HAL_TIM_PWM_Stop+0x4a>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	4a38      	ldr	r2, [pc, #224]	; (800cca8 <HAL_TIM_PWM_Stop+0x128>)
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d101      	bne.n	800cbce <HAL_TIM_PWM_Stop+0x4e>
 800cbca:	2301      	movs	r3, #1
 800cbcc:	e000      	b.n	800cbd0 <HAL_TIM_PWM_Stop+0x50>
 800cbce:	2300      	movs	r3, #0
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d017      	beq.n	800cc04 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	6a1a      	ldr	r2, [r3, #32]
 800cbda:	f241 1311 	movw	r3, #4369	; 0x1111
 800cbde:	4013      	ands	r3, r2
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d10f      	bne.n	800cc04 <HAL_TIM_PWM_Stop+0x84>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	6a1a      	ldr	r2, [r3, #32]
 800cbea:	f240 4344 	movw	r3, #1092	; 0x444
 800cbee:	4013      	ands	r3, r2
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d107      	bne.n	800cc04 <HAL_TIM_PWM_Stop+0x84>
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cc02:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	6a1a      	ldr	r2, [r3, #32]
 800cc0a:	f241 1311 	movw	r3, #4369	; 0x1111
 800cc0e:	4013      	ands	r3, r2
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d10f      	bne.n	800cc34 <HAL_TIM_PWM_Stop+0xb4>
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	6a1a      	ldr	r2, [r3, #32]
 800cc1a:	f240 4344 	movw	r3, #1092	; 0x444
 800cc1e:	4013      	ands	r3, r2
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d107      	bne.n	800cc34 <HAL_TIM_PWM_Stop+0xb4>
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	681a      	ldr	r2, [r3, #0]
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f022 0201 	bic.w	r2, r2, #1
 800cc32:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d104      	bne.n	800cc44 <HAL_TIM_PWM_Stop+0xc4>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2201      	movs	r2, #1
 800cc3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cc42:	e023      	b.n	800cc8c <HAL_TIM_PWM_Stop+0x10c>
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	2b04      	cmp	r3, #4
 800cc48:	d104      	bne.n	800cc54 <HAL_TIM_PWM_Stop+0xd4>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2201      	movs	r2, #1
 800cc4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cc52:	e01b      	b.n	800cc8c <HAL_TIM_PWM_Stop+0x10c>
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	2b08      	cmp	r3, #8
 800cc58:	d104      	bne.n	800cc64 <HAL_TIM_PWM_Stop+0xe4>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2201      	movs	r2, #1
 800cc5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cc62:	e013      	b.n	800cc8c <HAL_TIM_PWM_Stop+0x10c>
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	2b0c      	cmp	r3, #12
 800cc68:	d104      	bne.n	800cc74 <HAL_TIM_PWM_Stop+0xf4>
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2201      	movs	r2, #1
 800cc6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cc72:	e00b      	b.n	800cc8c <HAL_TIM_PWM_Stop+0x10c>
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	2b10      	cmp	r3, #16
 800cc78:	d104      	bne.n	800cc84 <HAL_TIM_PWM_Stop+0x104>
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2201      	movs	r2, #1
 800cc7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cc82:	e003      	b.n	800cc8c <HAL_TIM_PWM_Stop+0x10c>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2201      	movs	r2, #1
 800cc88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800cc8c:	2300      	movs	r3, #0
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3708      	adds	r7, #8
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}
 800cc96:	bf00      	nop
 800cc98:	40010000 	.word	0x40010000
 800cc9c:	40010400 	.word	0x40010400
 800cca0:	40014000 	.word	0x40014000
 800cca4:	40014400 	.word	0x40014400
 800cca8:	40014800 	.word	0x40014800

0800ccac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b082      	sub	sp, #8
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	691b      	ldr	r3, [r3, #16]
 800ccba:	f003 0302 	and.w	r3, r3, #2
 800ccbe:	2b02      	cmp	r3, #2
 800ccc0:	d122      	bne.n	800cd08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	68db      	ldr	r3, [r3, #12]
 800ccc8:	f003 0302 	and.w	r3, r3, #2
 800cccc:	2b02      	cmp	r3, #2
 800ccce:	d11b      	bne.n	800cd08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f06f 0202 	mvn.w	r2, #2
 800ccd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2201      	movs	r2, #1
 800ccde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	699b      	ldr	r3, [r3, #24]
 800cce6:	f003 0303 	and.w	r3, r3, #3
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d003      	beq.n	800ccf6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f000 fa1a 	bl	800d128 <HAL_TIM_IC_CaptureCallback>
 800ccf4:	e005      	b.n	800cd02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f000 fa0c 	bl	800d114 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f000 fa1d 	bl	800d13c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2200      	movs	r2, #0
 800cd06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	691b      	ldr	r3, [r3, #16]
 800cd0e:	f003 0304 	and.w	r3, r3, #4
 800cd12:	2b04      	cmp	r3, #4
 800cd14:	d122      	bne.n	800cd5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	68db      	ldr	r3, [r3, #12]
 800cd1c:	f003 0304 	and.w	r3, r3, #4
 800cd20:	2b04      	cmp	r3, #4
 800cd22:	d11b      	bne.n	800cd5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f06f 0204 	mvn.w	r2, #4
 800cd2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2202      	movs	r2, #2
 800cd32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	699b      	ldr	r3, [r3, #24]
 800cd3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d003      	beq.n	800cd4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f000 f9f0 	bl	800d128 <HAL_TIM_IC_CaptureCallback>
 800cd48:	e005      	b.n	800cd56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f000 f9e2 	bl	800d114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f000 f9f3 	bl	800d13c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	691b      	ldr	r3, [r3, #16]
 800cd62:	f003 0308 	and.w	r3, r3, #8
 800cd66:	2b08      	cmp	r3, #8
 800cd68:	d122      	bne.n	800cdb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	68db      	ldr	r3, [r3, #12]
 800cd70:	f003 0308 	and.w	r3, r3, #8
 800cd74:	2b08      	cmp	r3, #8
 800cd76:	d11b      	bne.n	800cdb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f06f 0208 	mvn.w	r2, #8
 800cd80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2204      	movs	r2, #4
 800cd86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	69db      	ldr	r3, [r3, #28]
 800cd8e:	f003 0303 	and.w	r3, r3, #3
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d003      	beq.n	800cd9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f000 f9c6 	bl	800d128 <HAL_TIM_IC_CaptureCallback>
 800cd9c:	e005      	b.n	800cdaa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f000 f9b8 	bl	800d114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f000 f9c9 	bl	800d13c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2200      	movs	r2, #0
 800cdae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	691b      	ldr	r3, [r3, #16]
 800cdb6:	f003 0310 	and.w	r3, r3, #16
 800cdba:	2b10      	cmp	r3, #16
 800cdbc:	d122      	bne.n	800ce04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	68db      	ldr	r3, [r3, #12]
 800cdc4:	f003 0310 	and.w	r3, r3, #16
 800cdc8:	2b10      	cmp	r3, #16
 800cdca:	d11b      	bne.n	800ce04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	f06f 0210 	mvn.w	r2, #16
 800cdd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2208      	movs	r2, #8
 800cdda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	69db      	ldr	r3, [r3, #28]
 800cde2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d003      	beq.n	800cdf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f000 f99c 	bl	800d128 <HAL_TIM_IC_CaptureCallback>
 800cdf0:	e005      	b.n	800cdfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f000 f98e 	bl	800d114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f000 f99f 	bl	800d13c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2200      	movs	r2, #0
 800ce02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	691b      	ldr	r3, [r3, #16]
 800ce0a:	f003 0301 	and.w	r3, r3, #1
 800ce0e:	2b01      	cmp	r3, #1
 800ce10:	d10e      	bne.n	800ce30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	68db      	ldr	r3, [r3, #12]
 800ce18:	f003 0301 	and.w	r3, r3, #1
 800ce1c:	2b01      	cmp	r3, #1
 800ce1e:	d107      	bne.n	800ce30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	f06f 0201 	mvn.w	r2, #1
 800ce28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f7f4 fb8a 	bl	8001544 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	691b      	ldr	r3, [r3, #16]
 800ce36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce3a:	2b80      	cmp	r3, #128	; 0x80
 800ce3c:	d10e      	bne.n	800ce5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	68db      	ldr	r3, [r3, #12]
 800ce44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce48:	2b80      	cmp	r3, #128	; 0x80
 800ce4a:	d107      	bne.n	800ce5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ce54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ce56:	6878      	ldr	r0, [r7, #4]
 800ce58:	f000 fe30 	bl	800dabc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	691b      	ldr	r3, [r3, #16]
 800ce62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce6a:	d10e      	bne.n	800ce8a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	68db      	ldr	r3, [r3, #12]
 800ce72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce76:	2b80      	cmp	r3, #128	; 0x80
 800ce78:	d107      	bne.n	800ce8a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ce82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f000 fe23 	bl	800dad0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	691b      	ldr	r3, [r3, #16]
 800ce90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce94:	2b40      	cmp	r3, #64	; 0x40
 800ce96:	d10e      	bne.n	800ceb6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	68db      	ldr	r3, [r3, #12]
 800ce9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cea2:	2b40      	cmp	r3, #64	; 0x40
 800cea4:	d107      	bne.n	800ceb6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ceae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f000 f94d 	bl	800d150 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	691b      	ldr	r3, [r3, #16]
 800cebc:	f003 0320 	and.w	r3, r3, #32
 800cec0:	2b20      	cmp	r3, #32
 800cec2:	d10e      	bne.n	800cee2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	68db      	ldr	r3, [r3, #12]
 800ceca:	f003 0320 	and.w	r3, r3, #32
 800cece:	2b20      	cmp	r3, #32
 800ced0:	d107      	bne.n	800cee2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	f06f 0220 	mvn.w	r2, #32
 800ceda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f000 fde3 	bl	800daa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cee2:	bf00      	nop
 800cee4:	3708      	adds	r7, #8
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}
	...

0800ceec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b086      	sub	sp, #24
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	60f8      	str	r0, [r7, #12]
 800cef4:	60b9      	str	r1, [r7, #8]
 800cef6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cef8:	2300      	movs	r3, #0
 800cefa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf02:	2b01      	cmp	r3, #1
 800cf04:	d101      	bne.n	800cf0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cf06:	2302      	movs	r3, #2
 800cf08:	e0ff      	b.n	800d10a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	2201      	movs	r2, #1
 800cf0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2b14      	cmp	r3, #20
 800cf16:	f200 80f0 	bhi.w	800d0fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800cf1a:	a201      	add	r2, pc, #4	; (adr r2, 800cf20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cf1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf20:	0800cf75 	.word	0x0800cf75
 800cf24:	0800d0fb 	.word	0x0800d0fb
 800cf28:	0800d0fb 	.word	0x0800d0fb
 800cf2c:	0800d0fb 	.word	0x0800d0fb
 800cf30:	0800cfb5 	.word	0x0800cfb5
 800cf34:	0800d0fb 	.word	0x0800d0fb
 800cf38:	0800d0fb 	.word	0x0800d0fb
 800cf3c:	0800d0fb 	.word	0x0800d0fb
 800cf40:	0800cff7 	.word	0x0800cff7
 800cf44:	0800d0fb 	.word	0x0800d0fb
 800cf48:	0800d0fb 	.word	0x0800d0fb
 800cf4c:	0800d0fb 	.word	0x0800d0fb
 800cf50:	0800d037 	.word	0x0800d037
 800cf54:	0800d0fb 	.word	0x0800d0fb
 800cf58:	0800d0fb 	.word	0x0800d0fb
 800cf5c:	0800d0fb 	.word	0x0800d0fb
 800cf60:	0800d079 	.word	0x0800d079
 800cf64:	0800d0fb 	.word	0x0800d0fb
 800cf68:	0800d0fb 	.word	0x0800d0fb
 800cf6c:	0800d0fb 	.word	0x0800d0fb
 800cf70:	0800d0b9 	.word	0x0800d0b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	68b9      	ldr	r1, [r7, #8]
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f000 f98c 	bl	800d298 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	699a      	ldr	r2, [r3, #24]
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	f042 0208 	orr.w	r2, r2, #8
 800cf8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	699a      	ldr	r2, [r3, #24]
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f022 0204 	bic.w	r2, r2, #4
 800cf9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	6999      	ldr	r1, [r3, #24]
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	691a      	ldr	r2, [r3, #16]
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	430a      	orrs	r2, r1
 800cfb0:	619a      	str	r2, [r3, #24]
      break;
 800cfb2:	e0a5      	b.n	800d100 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	68b9      	ldr	r1, [r7, #8]
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f000 f9fc 	bl	800d3b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	699a      	ldr	r2, [r3, #24]
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cfce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	699a      	ldr	r2, [r3, #24]
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cfde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	6999      	ldr	r1, [r3, #24]
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	691b      	ldr	r3, [r3, #16]
 800cfea:	021a      	lsls	r2, r3, #8
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	430a      	orrs	r2, r1
 800cff2:	619a      	str	r2, [r3, #24]
      break;
 800cff4:	e084      	b.n	800d100 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	68b9      	ldr	r1, [r7, #8]
 800cffc:	4618      	mov	r0, r3
 800cffe:	f000 fa65 	bl	800d4cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	69da      	ldr	r2, [r3, #28]
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f042 0208 	orr.w	r2, r2, #8
 800d010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	69da      	ldr	r2, [r3, #28]
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	f022 0204 	bic.w	r2, r2, #4
 800d020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	69d9      	ldr	r1, [r3, #28]
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	691a      	ldr	r2, [r3, #16]
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	430a      	orrs	r2, r1
 800d032:	61da      	str	r2, [r3, #28]
      break;
 800d034:	e064      	b.n	800d100 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	68b9      	ldr	r1, [r7, #8]
 800d03c:	4618      	mov	r0, r3
 800d03e:	f000 facd 	bl	800d5dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	69da      	ldr	r2, [r3, #28]
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d050:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	69da      	ldr	r2, [r3, #28]
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d060:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	69d9      	ldr	r1, [r3, #28]
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	691b      	ldr	r3, [r3, #16]
 800d06c:	021a      	lsls	r2, r3, #8
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	430a      	orrs	r2, r1
 800d074:	61da      	str	r2, [r3, #28]
      break;
 800d076:	e043      	b.n	800d100 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	68b9      	ldr	r1, [r7, #8]
 800d07e:	4618      	mov	r0, r3
 800d080:	f000 fb16 	bl	800d6b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	f042 0208 	orr.w	r2, r2, #8
 800d092:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f022 0204 	bic.w	r2, r2, #4
 800d0a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	691a      	ldr	r2, [r3, #16]
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	430a      	orrs	r2, r1
 800d0b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d0b6:	e023      	b.n	800d100 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	68b9      	ldr	r1, [r7, #8]
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f000 fb5a 	bl	800d778 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d0d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d0e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	691b      	ldr	r3, [r3, #16]
 800d0ee:	021a      	lsls	r2, r3, #8
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	430a      	orrs	r2, r1
 800d0f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d0f8:	e002      	b.n	800d100 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	75fb      	strb	r3, [r7, #23]
      break;
 800d0fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	2200      	movs	r2, #0
 800d104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d108:	7dfb      	ldrb	r3, [r7, #23]
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3718      	adds	r7, #24
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}
 800d112:	bf00      	nop

0800d114 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d114:	b480      	push	{r7}
 800d116:	b083      	sub	sp, #12
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d11c:	bf00      	nop
 800d11e:	370c      	adds	r7, #12
 800d120:	46bd      	mov	sp, r7
 800d122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d126:	4770      	bx	lr

0800d128 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d128:	b480      	push	{r7}
 800d12a:	b083      	sub	sp, #12
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d130:	bf00      	nop
 800d132:	370c      	adds	r7, #12
 800d134:	46bd      	mov	sp, r7
 800d136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13a:	4770      	bx	lr

0800d13c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d13c:	b480      	push	{r7}
 800d13e:	b083      	sub	sp, #12
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d144:	bf00      	nop
 800d146:	370c      	adds	r7, #12
 800d148:	46bd      	mov	sp, r7
 800d14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14e:	4770      	bx	lr

0800d150 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d150:	b480      	push	{r7}
 800d152:	b083      	sub	sp, #12
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d158:	bf00      	nop
 800d15a:	370c      	adds	r7, #12
 800d15c:	46bd      	mov	sp, r7
 800d15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d162:	4770      	bx	lr

0800d164 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d164:	b480      	push	{r7}
 800d166:	b085      	sub	sp, #20
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	4a40      	ldr	r2, [pc, #256]	; (800d278 <TIM_Base_SetConfig+0x114>)
 800d178:	4293      	cmp	r3, r2
 800d17a:	d013      	beq.n	800d1a4 <TIM_Base_SetConfig+0x40>
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d182:	d00f      	beq.n	800d1a4 <TIM_Base_SetConfig+0x40>
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	4a3d      	ldr	r2, [pc, #244]	; (800d27c <TIM_Base_SetConfig+0x118>)
 800d188:	4293      	cmp	r3, r2
 800d18a:	d00b      	beq.n	800d1a4 <TIM_Base_SetConfig+0x40>
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	4a3c      	ldr	r2, [pc, #240]	; (800d280 <TIM_Base_SetConfig+0x11c>)
 800d190:	4293      	cmp	r3, r2
 800d192:	d007      	beq.n	800d1a4 <TIM_Base_SetConfig+0x40>
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	4a3b      	ldr	r2, [pc, #236]	; (800d284 <TIM_Base_SetConfig+0x120>)
 800d198:	4293      	cmp	r3, r2
 800d19a:	d003      	beq.n	800d1a4 <TIM_Base_SetConfig+0x40>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	4a3a      	ldr	r2, [pc, #232]	; (800d288 <TIM_Base_SetConfig+0x124>)
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	d108      	bne.n	800d1b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	685b      	ldr	r3, [r3, #4]
 800d1b0:	68fa      	ldr	r2, [r7, #12]
 800d1b2:	4313      	orrs	r3, r2
 800d1b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	4a2f      	ldr	r2, [pc, #188]	; (800d278 <TIM_Base_SetConfig+0x114>)
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	d01f      	beq.n	800d1fe <TIM_Base_SetConfig+0x9a>
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1c4:	d01b      	beq.n	800d1fe <TIM_Base_SetConfig+0x9a>
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	4a2c      	ldr	r2, [pc, #176]	; (800d27c <TIM_Base_SetConfig+0x118>)
 800d1ca:	4293      	cmp	r3, r2
 800d1cc:	d017      	beq.n	800d1fe <TIM_Base_SetConfig+0x9a>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	4a2b      	ldr	r2, [pc, #172]	; (800d280 <TIM_Base_SetConfig+0x11c>)
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	d013      	beq.n	800d1fe <TIM_Base_SetConfig+0x9a>
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	4a2a      	ldr	r2, [pc, #168]	; (800d284 <TIM_Base_SetConfig+0x120>)
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	d00f      	beq.n	800d1fe <TIM_Base_SetConfig+0x9a>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	4a29      	ldr	r2, [pc, #164]	; (800d288 <TIM_Base_SetConfig+0x124>)
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d00b      	beq.n	800d1fe <TIM_Base_SetConfig+0x9a>
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	4a28      	ldr	r2, [pc, #160]	; (800d28c <TIM_Base_SetConfig+0x128>)
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d007      	beq.n	800d1fe <TIM_Base_SetConfig+0x9a>
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	4a27      	ldr	r2, [pc, #156]	; (800d290 <TIM_Base_SetConfig+0x12c>)
 800d1f2:	4293      	cmp	r3, r2
 800d1f4:	d003      	beq.n	800d1fe <TIM_Base_SetConfig+0x9a>
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	4a26      	ldr	r2, [pc, #152]	; (800d294 <TIM_Base_SetConfig+0x130>)
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	d108      	bne.n	800d210 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	68db      	ldr	r3, [r3, #12]
 800d20a:	68fa      	ldr	r2, [r7, #12]
 800d20c:	4313      	orrs	r3, r2
 800d20e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	695b      	ldr	r3, [r3, #20]
 800d21a:	4313      	orrs	r3, r2
 800d21c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	68fa      	ldr	r2, [r7, #12]
 800d222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	689a      	ldr	r2, [r3, #8]
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	681a      	ldr	r2, [r3, #0]
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	4a10      	ldr	r2, [pc, #64]	; (800d278 <TIM_Base_SetConfig+0x114>)
 800d238:	4293      	cmp	r3, r2
 800d23a:	d00f      	beq.n	800d25c <TIM_Base_SetConfig+0xf8>
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	4a12      	ldr	r2, [pc, #72]	; (800d288 <TIM_Base_SetConfig+0x124>)
 800d240:	4293      	cmp	r3, r2
 800d242:	d00b      	beq.n	800d25c <TIM_Base_SetConfig+0xf8>
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	4a11      	ldr	r2, [pc, #68]	; (800d28c <TIM_Base_SetConfig+0x128>)
 800d248:	4293      	cmp	r3, r2
 800d24a:	d007      	beq.n	800d25c <TIM_Base_SetConfig+0xf8>
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	4a10      	ldr	r2, [pc, #64]	; (800d290 <TIM_Base_SetConfig+0x12c>)
 800d250:	4293      	cmp	r3, r2
 800d252:	d003      	beq.n	800d25c <TIM_Base_SetConfig+0xf8>
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	4a0f      	ldr	r2, [pc, #60]	; (800d294 <TIM_Base_SetConfig+0x130>)
 800d258:	4293      	cmp	r3, r2
 800d25a:	d103      	bne.n	800d264 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	691a      	ldr	r2, [r3, #16]
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2201      	movs	r2, #1
 800d268:	615a      	str	r2, [r3, #20]
}
 800d26a:	bf00      	nop
 800d26c:	3714      	adds	r7, #20
 800d26e:	46bd      	mov	sp, r7
 800d270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d274:	4770      	bx	lr
 800d276:	bf00      	nop
 800d278:	40010000 	.word	0x40010000
 800d27c:	40000400 	.word	0x40000400
 800d280:	40000800 	.word	0x40000800
 800d284:	40000c00 	.word	0x40000c00
 800d288:	40010400 	.word	0x40010400
 800d28c:	40014000 	.word	0x40014000
 800d290:	40014400 	.word	0x40014400
 800d294:	40014800 	.word	0x40014800

0800d298 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d298:	b480      	push	{r7}
 800d29a:	b087      	sub	sp, #28
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
 800d2a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6a1b      	ldr	r3, [r3, #32]
 800d2a6:	f023 0201 	bic.w	r2, r3, #1
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6a1b      	ldr	r3, [r3, #32]
 800d2b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	685b      	ldr	r3, [r3, #4]
 800d2b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	699b      	ldr	r3, [r3, #24]
 800d2be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d2c0:	68fa      	ldr	r2, [r7, #12]
 800d2c2:	4b37      	ldr	r3, [pc, #220]	; (800d3a0 <TIM_OC1_SetConfig+0x108>)
 800d2c4:	4013      	ands	r3, r2
 800d2c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f023 0303 	bic.w	r3, r3, #3
 800d2ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	68fa      	ldr	r2, [r7, #12]
 800d2d6:	4313      	orrs	r3, r2
 800d2d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	f023 0302 	bic.w	r3, r3, #2
 800d2e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	689b      	ldr	r3, [r3, #8]
 800d2e6:	697a      	ldr	r2, [r7, #20]
 800d2e8:	4313      	orrs	r3, r2
 800d2ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	4a2d      	ldr	r2, [pc, #180]	; (800d3a4 <TIM_OC1_SetConfig+0x10c>)
 800d2f0:	4293      	cmp	r3, r2
 800d2f2:	d00f      	beq.n	800d314 <TIM_OC1_SetConfig+0x7c>
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	4a2c      	ldr	r2, [pc, #176]	; (800d3a8 <TIM_OC1_SetConfig+0x110>)
 800d2f8:	4293      	cmp	r3, r2
 800d2fa:	d00b      	beq.n	800d314 <TIM_OC1_SetConfig+0x7c>
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	4a2b      	ldr	r2, [pc, #172]	; (800d3ac <TIM_OC1_SetConfig+0x114>)
 800d300:	4293      	cmp	r3, r2
 800d302:	d007      	beq.n	800d314 <TIM_OC1_SetConfig+0x7c>
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	4a2a      	ldr	r2, [pc, #168]	; (800d3b0 <TIM_OC1_SetConfig+0x118>)
 800d308:	4293      	cmp	r3, r2
 800d30a:	d003      	beq.n	800d314 <TIM_OC1_SetConfig+0x7c>
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	4a29      	ldr	r2, [pc, #164]	; (800d3b4 <TIM_OC1_SetConfig+0x11c>)
 800d310:	4293      	cmp	r3, r2
 800d312:	d10c      	bne.n	800d32e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	f023 0308 	bic.w	r3, r3, #8
 800d31a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	68db      	ldr	r3, [r3, #12]
 800d320:	697a      	ldr	r2, [r7, #20]
 800d322:	4313      	orrs	r3, r2
 800d324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	f023 0304 	bic.w	r3, r3, #4
 800d32c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	4a1c      	ldr	r2, [pc, #112]	; (800d3a4 <TIM_OC1_SetConfig+0x10c>)
 800d332:	4293      	cmp	r3, r2
 800d334:	d00f      	beq.n	800d356 <TIM_OC1_SetConfig+0xbe>
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	4a1b      	ldr	r2, [pc, #108]	; (800d3a8 <TIM_OC1_SetConfig+0x110>)
 800d33a:	4293      	cmp	r3, r2
 800d33c:	d00b      	beq.n	800d356 <TIM_OC1_SetConfig+0xbe>
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	4a1a      	ldr	r2, [pc, #104]	; (800d3ac <TIM_OC1_SetConfig+0x114>)
 800d342:	4293      	cmp	r3, r2
 800d344:	d007      	beq.n	800d356 <TIM_OC1_SetConfig+0xbe>
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	4a19      	ldr	r2, [pc, #100]	; (800d3b0 <TIM_OC1_SetConfig+0x118>)
 800d34a:	4293      	cmp	r3, r2
 800d34c:	d003      	beq.n	800d356 <TIM_OC1_SetConfig+0xbe>
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	4a18      	ldr	r2, [pc, #96]	; (800d3b4 <TIM_OC1_SetConfig+0x11c>)
 800d352:	4293      	cmp	r3, r2
 800d354:	d111      	bne.n	800d37a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d356:	693b      	ldr	r3, [r7, #16]
 800d358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d35c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d35e:	693b      	ldr	r3, [r7, #16]
 800d360:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d364:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	695b      	ldr	r3, [r3, #20]
 800d36a:	693a      	ldr	r2, [r7, #16]
 800d36c:	4313      	orrs	r3, r2
 800d36e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	699b      	ldr	r3, [r3, #24]
 800d374:	693a      	ldr	r2, [r7, #16]
 800d376:	4313      	orrs	r3, r2
 800d378:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	693a      	ldr	r2, [r7, #16]
 800d37e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	68fa      	ldr	r2, [r7, #12]
 800d384:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	685a      	ldr	r2, [r3, #4]
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	697a      	ldr	r2, [r7, #20]
 800d392:	621a      	str	r2, [r3, #32]
}
 800d394:	bf00      	nop
 800d396:	371c      	adds	r7, #28
 800d398:	46bd      	mov	sp, r7
 800d39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39e:	4770      	bx	lr
 800d3a0:	fffeff8f 	.word	0xfffeff8f
 800d3a4:	40010000 	.word	0x40010000
 800d3a8:	40010400 	.word	0x40010400
 800d3ac:	40014000 	.word	0x40014000
 800d3b0:	40014400 	.word	0x40014400
 800d3b4:	40014800 	.word	0x40014800

0800d3b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b087      	sub	sp, #28
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6a1b      	ldr	r3, [r3, #32]
 800d3c6:	f023 0210 	bic.w	r2, r3, #16
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6a1b      	ldr	r3, [r3, #32]
 800d3d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	685b      	ldr	r3, [r3, #4]
 800d3d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	699b      	ldr	r3, [r3, #24]
 800d3de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d3e0:	68fa      	ldr	r2, [r7, #12]
 800d3e2:	4b34      	ldr	r3, [pc, #208]	; (800d4b4 <TIM_OC2_SetConfig+0xfc>)
 800d3e4:	4013      	ands	r3, r2
 800d3e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d3ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	021b      	lsls	r3, r3, #8
 800d3f6:	68fa      	ldr	r2, [r7, #12]
 800d3f8:	4313      	orrs	r3, r2
 800d3fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d3fc:	697b      	ldr	r3, [r7, #20]
 800d3fe:	f023 0320 	bic.w	r3, r3, #32
 800d402:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	689b      	ldr	r3, [r3, #8]
 800d408:	011b      	lsls	r3, r3, #4
 800d40a:	697a      	ldr	r2, [r7, #20]
 800d40c:	4313      	orrs	r3, r2
 800d40e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	4a29      	ldr	r2, [pc, #164]	; (800d4b8 <TIM_OC2_SetConfig+0x100>)
 800d414:	4293      	cmp	r3, r2
 800d416:	d003      	beq.n	800d420 <TIM_OC2_SetConfig+0x68>
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	4a28      	ldr	r2, [pc, #160]	; (800d4bc <TIM_OC2_SetConfig+0x104>)
 800d41c:	4293      	cmp	r3, r2
 800d41e:	d10d      	bne.n	800d43c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d426:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	68db      	ldr	r3, [r3, #12]
 800d42c:	011b      	lsls	r3, r3, #4
 800d42e:	697a      	ldr	r2, [r7, #20]
 800d430:	4313      	orrs	r3, r2
 800d432:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d434:	697b      	ldr	r3, [r7, #20]
 800d436:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d43a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	4a1e      	ldr	r2, [pc, #120]	; (800d4b8 <TIM_OC2_SetConfig+0x100>)
 800d440:	4293      	cmp	r3, r2
 800d442:	d00f      	beq.n	800d464 <TIM_OC2_SetConfig+0xac>
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	4a1d      	ldr	r2, [pc, #116]	; (800d4bc <TIM_OC2_SetConfig+0x104>)
 800d448:	4293      	cmp	r3, r2
 800d44a:	d00b      	beq.n	800d464 <TIM_OC2_SetConfig+0xac>
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	4a1c      	ldr	r2, [pc, #112]	; (800d4c0 <TIM_OC2_SetConfig+0x108>)
 800d450:	4293      	cmp	r3, r2
 800d452:	d007      	beq.n	800d464 <TIM_OC2_SetConfig+0xac>
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	4a1b      	ldr	r2, [pc, #108]	; (800d4c4 <TIM_OC2_SetConfig+0x10c>)
 800d458:	4293      	cmp	r3, r2
 800d45a:	d003      	beq.n	800d464 <TIM_OC2_SetConfig+0xac>
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	4a1a      	ldr	r2, [pc, #104]	; (800d4c8 <TIM_OC2_SetConfig+0x110>)
 800d460:	4293      	cmp	r3, r2
 800d462:	d113      	bne.n	800d48c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d46a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d46c:	693b      	ldr	r3, [r7, #16]
 800d46e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d472:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	695b      	ldr	r3, [r3, #20]
 800d478:	009b      	lsls	r3, r3, #2
 800d47a:	693a      	ldr	r2, [r7, #16]
 800d47c:	4313      	orrs	r3, r2
 800d47e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	699b      	ldr	r3, [r3, #24]
 800d484:	009b      	lsls	r3, r3, #2
 800d486:	693a      	ldr	r2, [r7, #16]
 800d488:	4313      	orrs	r3, r2
 800d48a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	693a      	ldr	r2, [r7, #16]
 800d490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	68fa      	ldr	r2, [r7, #12]
 800d496:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	685a      	ldr	r2, [r3, #4]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	697a      	ldr	r2, [r7, #20]
 800d4a4:	621a      	str	r2, [r3, #32]
}
 800d4a6:	bf00      	nop
 800d4a8:	371c      	adds	r7, #28
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b0:	4770      	bx	lr
 800d4b2:	bf00      	nop
 800d4b4:	feff8fff 	.word	0xfeff8fff
 800d4b8:	40010000 	.word	0x40010000
 800d4bc:	40010400 	.word	0x40010400
 800d4c0:	40014000 	.word	0x40014000
 800d4c4:	40014400 	.word	0x40014400
 800d4c8:	40014800 	.word	0x40014800

0800d4cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b087      	sub	sp, #28
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6a1b      	ldr	r3, [r3, #32]
 800d4da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6a1b      	ldr	r3, [r3, #32]
 800d4e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	685b      	ldr	r3, [r3, #4]
 800d4ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	69db      	ldr	r3, [r3, #28]
 800d4f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d4f4:	68fa      	ldr	r2, [r7, #12]
 800d4f6:	4b33      	ldr	r3, [pc, #204]	; (800d5c4 <TIM_OC3_SetConfig+0xf8>)
 800d4f8:	4013      	ands	r3, r2
 800d4fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	f023 0303 	bic.w	r3, r3, #3
 800d502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	68fa      	ldr	r2, [r7, #12]
 800d50a:	4313      	orrs	r3, r2
 800d50c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	689b      	ldr	r3, [r3, #8]
 800d51a:	021b      	lsls	r3, r3, #8
 800d51c:	697a      	ldr	r2, [r7, #20]
 800d51e:	4313      	orrs	r3, r2
 800d520:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	4a28      	ldr	r2, [pc, #160]	; (800d5c8 <TIM_OC3_SetConfig+0xfc>)
 800d526:	4293      	cmp	r3, r2
 800d528:	d003      	beq.n	800d532 <TIM_OC3_SetConfig+0x66>
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	4a27      	ldr	r2, [pc, #156]	; (800d5cc <TIM_OC3_SetConfig+0x100>)
 800d52e:	4293      	cmp	r3, r2
 800d530:	d10d      	bne.n	800d54e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d538:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	68db      	ldr	r3, [r3, #12]
 800d53e:	021b      	lsls	r3, r3, #8
 800d540:	697a      	ldr	r2, [r7, #20]
 800d542:	4313      	orrs	r3, r2
 800d544:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d54c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	4a1d      	ldr	r2, [pc, #116]	; (800d5c8 <TIM_OC3_SetConfig+0xfc>)
 800d552:	4293      	cmp	r3, r2
 800d554:	d00f      	beq.n	800d576 <TIM_OC3_SetConfig+0xaa>
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	4a1c      	ldr	r2, [pc, #112]	; (800d5cc <TIM_OC3_SetConfig+0x100>)
 800d55a:	4293      	cmp	r3, r2
 800d55c:	d00b      	beq.n	800d576 <TIM_OC3_SetConfig+0xaa>
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	4a1b      	ldr	r2, [pc, #108]	; (800d5d0 <TIM_OC3_SetConfig+0x104>)
 800d562:	4293      	cmp	r3, r2
 800d564:	d007      	beq.n	800d576 <TIM_OC3_SetConfig+0xaa>
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	4a1a      	ldr	r2, [pc, #104]	; (800d5d4 <TIM_OC3_SetConfig+0x108>)
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d003      	beq.n	800d576 <TIM_OC3_SetConfig+0xaa>
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	4a19      	ldr	r2, [pc, #100]	; (800d5d8 <TIM_OC3_SetConfig+0x10c>)
 800d572:	4293      	cmp	r3, r2
 800d574:	d113      	bne.n	800d59e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d57c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d57e:	693b      	ldr	r3, [r7, #16]
 800d580:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d584:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	695b      	ldr	r3, [r3, #20]
 800d58a:	011b      	lsls	r3, r3, #4
 800d58c:	693a      	ldr	r2, [r7, #16]
 800d58e:	4313      	orrs	r3, r2
 800d590:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	699b      	ldr	r3, [r3, #24]
 800d596:	011b      	lsls	r3, r3, #4
 800d598:	693a      	ldr	r2, [r7, #16]
 800d59a:	4313      	orrs	r3, r2
 800d59c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	693a      	ldr	r2, [r7, #16]
 800d5a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	68fa      	ldr	r2, [r7, #12]
 800d5a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	685a      	ldr	r2, [r3, #4]
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	697a      	ldr	r2, [r7, #20]
 800d5b6:	621a      	str	r2, [r3, #32]
}
 800d5b8:	bf00      	nop
 800d5ba:	371c      	adds	r7, #28
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c2:	4770      	bx	lr
 800d5c4:	fffeff8f 	.word	0xfffeff8f
 800d5c8:	40010000 	.word	0x40010000
 800d5cc:	40010400 	.word	0x40010400
 800d5d0:	40014000 	.word	0x40014000
 800d5d4:	40014400 	.word	0x40014400
 800d5d8:	40014800 	.word	0x40014800

0800d5dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d5dc:	b480      	push	{r7}
 800d5de:	b087      	sub	sp, #28
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
 800d5e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6a1b      	ldr	r3, [r3, #32]
 800d5ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6a1b      	ldr	r3, [r3, #32]
 800d5f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	685b      	ldr	r3, [r3, #4]
 800d5fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	69db      	ldr	r3, [r3, #28]
 800d602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d604:	68fa      	ldr	r2, [r7, #12]
 800d606:	4b24      	ldr	r3, [pc, #144]	; (800d698 <TIM_OC4_SetConfig+0xbc>)
 800d608:	4013      	ands	r3, r2
 800d60a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d612:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	021b      	lsls	r3, r3, #8
 800d61a:	68fa      	ldr	r2, [r7, #12]
 800d61c:	4313      	orrs	r3, r2
 800d61e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d620:	693b      	ldr	r3, [r7, #16]
 800d622:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d626:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	689b      	ldr	r3, [r3, #8]
 800d62c:	031b      	lsls	r3, r3, #12
 800d62e:	693a      	ldr	r2, [r7, #16]
 800d630:	4313      	orrs	r3, r2
 800d632:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	4a19      	ldr	r2, [pc, #100]	; (800d69c <TIM_OC4_SetConfig+0xc0>)
 800d638:	4293      	cmp	r3, r2
 800d63a:	d00f      	beq.n	800d65c <TIM_OC4_SetConfig+0x80>
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	4a18      	ldr	r2, [pc, #96]	; (800d6a0 <TIM_OC4_SetConfig+0xc4>)
 800d640:	4293      	cmp	r3, r2
 800d642:	d00b      	beq.n	800d65c <TIM_OC4_SetConfig+0x80>
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	4a17      	ldr	r2, [pc, #92]	; (800d6a4 <TIM_OC4_SetConfig+0xc8>)
 800d648:	4293      	cmp	r3, r2
 800d64a:	d007      	beq.n	800d65c <TIM_OC4_SetConfig+0x80>
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	4a16      	ldr	r2, [pc, #88]	; (800d6a8 <TIM_OC4_SetConfig+0xcc>)
 800d650:	4293      	cmp	r3, r2
 800d652:	d003      	beq.n	800d65c <TIM_OC4_SetConfig+0x80>
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	4a15      	ldr	r2, [pc, #84]	; (800d6ac <TIM_OC4_SetConfig+0xd0>)
 800d658:	4293      	cmp	r3, r2
 800d65a:	d109      	bne.n	800d670 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d662:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	695b      	ldr	r3, [r3, #20]
 800d668:	019b      	lsls	r3, r3, #6
 800d66a:	697a      	ldr	r2, [r7, #20]
 800d66c:	4313      	orrs	r3, r2
 800d66e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	697a      	ldr	r2, [r7, #20]
 800d674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	68fa      	ldr	r2, [r7, #12]
 800d67a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	685a      	ldr	r2, [r3, #4]
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	693a      	ldr	r2, [r7, #16]
 800d688:	621a      	str	r2, [r3, #32]
}
 800d68a:	bf00      	nop
 800d68c:	371c      	adds	r7, #28
 800d68e:	46bd      	mov	sp, r7
 800d690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d694:	4770      	bx	lr
 800d696:	bf00      	nop
 800d698:	feff8fff 	.word	0xfeff8fff
 800d69c:	40010000 	.word	0x40010000
 800d6a0:	40010400 	.word	0x40010400
 800d6a4:	40014000 	.word	0x40014000
 800d6a8:	40014400 	.word	0x40014400
 800d6ac:	40014800 	.word	0x40014800

0800d6b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b087      	sub	sp, #28
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
 800d6b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6a1b      	ldr	r3, [r3, #32]
 800d6be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6a1b      	ldr	r3, [r3, #32]
 800d6ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	685b      	ldr	r3, [r3, #4]
 800d6d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d6d8:	68fa      	ldr	r2, [r7, #12]
 800d6da:	4b21      	ldr	r3, [pc, #132]	; (800d760 <TIM_OC5_SetConfig+0xb0>)
 800d6dc:	4013      	ands	r3, r2
 800d6de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	68fa      	ldr	r2, [r7, #12]
 800d6e6:	4313      	orrs	r3, r2
 800d6e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d6ea:	693b      	ldr	r3, [r7, #16]
 800d6ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d6f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	689b      	ldr	r3, [r3, #8]
 800d6f6:	041b      	lsls	r3, r3, #16
 800d6f8:	693a      	ldr	r2, [r7, #16]
 800d6fa:	4313      	orrs	r3, r2
 800d6fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	4a18      	ldr	r2, [pc, #96]	; (800d764 <TIM_OC5_SetConfig+0xb4>)
 800d702:	4293      	cmp	r3, r2
 800d704:	d00f      	beq.n	800d726 <TIM_OC5_SetConfig+0x76>
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	4a17      	ldr	r2, [pc, #92]	; (800d768 <TIM_OC5_SetConfig+0xb8>)
 800d70a:	4293      	cmp	r3, r2
 800d70c:	d00b      	beq.n	800d726 <TIM_OC5_SetConfig+0x76>
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	4a16      	ldr	r2, [pc, #88]	; (800d76c <TIM_OC5_SetConfig+0xbc>)
 800d712:	4293      	cmp	r3, r2
 800d714:	d007      	beq.n	800d726 <TIM_OC5_SetConfig+0x76>
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	4a15      	ldr	r2, [pc, #84]	; (800d770 <TIM_OC5_SetConfig+0xc0>)
 800d71a:	4293      	cmp	r3, r2
 800d71c:	d003      	beq.n	800d726 <TIM_OC5_SetConfig+0x76>
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	4a14      	ldr	r2, [pc, #80]	; (800d774 <TIM_OC5_SetConfig+0xc4>)
 800d722:	4293      	cmp	r3, r2
 800d724:	d109      	bne.n	800d73a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d72c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	695b      	ldr	r3, [r3, #20]
 800d732:	021b      	lsls	r3, r3, #8
 800d734:	697a      	ldr	r2, [r7, #20]
 800d736:	4313      	orrs	r3, r2
 800d738:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	697a      	ldr	r2, [r7, #20]
 800d73e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	68fa      	ldr	r2, [r7, #12]
 800d744:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	685a      	ldr	r2, [r3, #4]
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	693a      	ldr	r2, [r7, #16]
 800d752:	621a      	str	r2, [r3, #32]
}
 800d754:	bf00      	nop
 800d756:	371c      	adds	r7, #28
 800d758:	46bd      	mov	sp, r7
 800d75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75e:	4770      	bx	lr
 800d760:	fffeff8f 	.word	0xfffeff8f
 800d764:	40010000 	.word	0x40010000
 800d768:	40010400 	.word	0x40010400
 800d76c:	40014000 	.word	0x40014000
 800d770:	40014400 	.word	0x40014400
 800d774:	40014800 	.word	0x40014800

0800d778 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d778:	b480      	push	{r7}
 800d77a:	b087      	sub	sp, #28
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
 800d780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6a1b      	ldr	r3, [r3, #32]
 800d786:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6a1b      	ldr	r3, [r3, #32]
 800d792:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	685b      	ldr	r3, [r3, #4]
 800d798:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d79e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d7a0:	68fa      	ldr	r2, [r7, #12]
 800d7a2:	4b22      	ldr	r3, [pc, #136]	; (800d82c <TIM_OC6_SetConfig+0xb4>)
 800d7a4:	4013      	ands	r3, r2
 800d7a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	021b      	lsls	r3, r3, #8
 800d7ae:	68fa      	ldr	r2, [r7, #12]
 800d7b0:	4313      	orrs	r3, r2
 800d7b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d7b4:	693b      	ldr	r3, [r7, #16]
 800d7b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d7ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	689b      	ldr	r3, [r3, #8]
 800d7c0:	051b      	lsls	r3, r3, #20
 800d7c2:	693a      	ldr	r2, [r7, #16]
 800d7c4:	4313      	orrs	r3, r2
 800d7c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	4a19      	ldr	r2, [pc, #100]	; (800d830 <TIM_OC6_SetConfig+0xb8>)
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	d00f      	beq.n	800d7f0 <TIM_OC6_SetConfig+0x78>
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	4a18      	ldr	r2, [pc, #96]	; (800d834 <TIM_OC6_SetConfig+0xbc>)
 800d7d4:	4293      	cmp	r3, r2
 800d7d6:	d00b      	beq.n	800d7f0 <TIM_OC6_SetConfig+0x78>
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	4a17      	ldr	r2, [pc, #92]	; (800d838 <TIM_OC6_SetConfig+0xc0>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d007      	beq.n	800d7f0 <TIM_OC6_SetConfig+0x78>
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	4a16      	ldr	r2, [pc, #88]	; (800d83c <TIM_OC6_SetConfig+0xc4>)
 800d7e4:	4293      	cmp	r3, r2
 800d7e6:	d003      	beq.n	800d7f0 <TIM_OC6_SetConfig+0x78>
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	4a15      	ldr	r2, [pc, #84]	; (800d840 <TIM_OC6_SetConfig+0xc8>)
 800d7ec:	4293      	cmp	r3, r2
 800d7ee:	d109      	bne.n	800d804 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d7f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	695b      	ldr	r3, [r3, #20]
 800d7fc:	029b      	lsls	r3, r3, #10
 800d7fe:	697a      	ldr	r2, [r7, #20]
 800d800:	4313      	orrs	r3, r2
 800d802:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	697a      	ldr	r2, [r7, #20]
 800d808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	68fa      	ldr	r2, [r7, #12]
 800d80e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	685a      	ldr	r2, [r3, #4]
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	693a      	ldr	r2, [r7, #16]
 800d81c:	621a      	str	r2, [r3, #32]
}
 800d81e:	bf00      	nop
 800d820:	371c      	adds	r7, #28
 800d822:	46bd      	mov	sp, r7
 800d824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d828:	4770      	bx	lr
 800d82a:	bf00      	nop
 800d82c:	feff8fff 	.word	0xfeff8fff
 800d830:	40010000 	.word	0x40010000
 800d834:	40010400 	.word	0x40010400
 800d838:	40014000 	.word	0x40014000
 800d83c:	40014400 	.word	0x40014400
 800d840:	40014800 	.word	0x40014800

0800d844 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d844:	b480      	push	{r7}
 800d846:	b087      	sub	sp, #28
 800d848:	af00      	add	r7, sp, #0
 800d84a:	60f8      	str	r0, [r7, #12]
 800d84c:	60b9      	str	r1, [r7, #8]
 800d84e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d850:	68bb      	ldr	r3, [r7, #8]
 800d852:	f003 031f 	and.w	r3, r3, #31
 800d856:	2201      	movs	r2, #1
 800d858:	fa02 f303 	lsl.w	r3, r2, r3
 800d85c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	6a1a      	ldr	r2, [r3, #32]
 800d862:	697b      	ldr	r3, [r7, #20]
 800d864:	43db      	mvns	r3, r3
 800d866:	401a      	ands	r2, r3
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	6a1a      	ldr	r2, [r3, #32]
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	f003 031f 	and.w	r3, r3, #31
 800d876:	6879      	ldr	r1, [r7, #4]
 800d878:	fa01 f303 	lsl.w	r3, r1, r3
 800d87c:	431a      	orrs	r2, r3
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	621a      	str	r2, [r3, #32]
}
 800d882:	bf00      	nop
 800d884:	371c      	adds	r7, #28
 800d886:	46bd      	mov	sp, r7
 800d888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88c:	4770      	bx	lr
	...

0800d890 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d890:	b480      	push	{r7}
 800d892:	b085      	sub	sp, #20
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
 800d898:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d8a0:	2b01      	cmp	r3, #1
 800d8a2:	d101      	bne.n	800d8a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d8a4:	2302      	movs	r3, #2
 800d8a6:	e06d      	b.n	800d984 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2201      	movs	r2, #1
 800d8ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2202      	movs	r2, #2
 800d8b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	689b      	ldr	r3, [r3, #8]
 800d8c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	4a30      	ldr	r2, [pc, #192]	; (800d990 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d004      	beq.n	800d8dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	4a2f      	ldr	r2, [pc, #188]	; (800d994 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d8d8:	4293      	cmp	r3, r2
 800d8da:	d108      	bne.n	800d8ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d8e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	685b      	ldr	r3, [r3, #4]
 800d8e8:	68fa      	ldr	r2, [r7, #12]
 800d8ea:	4313      	orrs	r3, r2
 800d8ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d8f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	68fa      	ldr	r2, [r7, #12]
 800d8fc:	4313      	orrs	r3, r2
 800d8fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	68fa      	ldr	r2, [r7, #12]
 800d906:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	4a20      	ldr	r2, [pc, #128]	; (800d990 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d90e:	4293      	cmp	r3, r2
 800d910:	d022      	beq.n	800d958 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d91a:	d01d      	beq.n	800d958 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	4a1d      	ldr	r2, [pc, #116]	; (800d998 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d922:	4293      	cmp	r3, r2
 800d924:	d018      	beq.n	800d958 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	4a1c      	ldr	r2, [pc, #112]	; (800d99c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d92c:	4293      	cmp	r3, r2
 800d92e:	d013      	beq.n	800d958 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	4a1a      	ldr	r2, [pc, #104]	; (800d9a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d936:	4293      	cmp	r3, r2
 800d938:	d00e      	beq.n	800d958 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	4a15      	ldr	r2, [pc, #84]	; (800d994 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d940:	4293      	cmp	r3, r2
 800d942:	d009      	beq.n	800d958 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	4a16      	ldr	r2, [pc, #88]	; (800d9a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d94a:	4293      	cmp	r3, r2
 800d94c:	d004      	beq.n	800d958 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	4a15      	ldr	r2, [pc, #84]	; (800d9a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d954:	4293      	cmp	r3, r2
 800d956:	d10c      	bne.n	800d972 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d95e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	689b      	ldr	r3, [r3, #8]
 800d964:	68ba      	ldr	r2, [r7, #8]
 800d966:	4313      	orrs	r3, r2
 800d968:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	68ba      	ldr	r2, [r7, #8]
 800d970:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2201      	movs	r2, #1
 800d976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2200      	movs	r2, #0
 800d97e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d982:	2300      	movs	r3, #0
}
 800d984:	4618      	mov	r0, r3
 800d986:	3714      	adds	r7, #20
 800d988:	46bd      	mov	sp, r7
 800d98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98e:	4770      	bx	lr
 800d990:	40010000 	.word	0x40010000
 800d994:	40010400 	.word	0x40010400
 800d998:	40000400 	.word	0x40000400
 800d99c:	40000800 	.word	0x40000800
 800d9a0:	40000c00 	.word	0x40000c00
 800d9a4:	40001800 	.word	0x40001800
 800d9a8:	40014000 	.word	0x40014000

0800d9ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d9ac:	b480      	push	{r7}
 800d9ae:	b085      	sub	sp, #20
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d9c0:	2b01      	cmp	r3, #1
 800d9c2:	d101      	bne.n	800d9c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d9c4:	2302      	movs	r3, #2
 800d9c6:	e065      	b.n	800da94 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2201      	movs	r2, #1
 800d9cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	68db      	ldr	r3, [r3, #12]
 800d9da:	4313      	orrs	r3, r2
 800d9dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	689b      	ldr	r3, [r3, #8]
 800d9e8:	4313      	orrs	r3, r2
 800d9ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	685b      	ldr	r3, [r3, #4]
 800d9f6:	4313      	orrs	r3, r2
 800d9f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	4313      	orrs	r3, r2
 800da06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	691b      	ldr	r3, [r3, #16]
 800da12:	4313      	orrs	r3, r2
 800da14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	695b      	ldr	r3, [r3, #20]
 800da20:	4313      	orrs	r3, r2
 800da22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da2e:	4313      	orrs	r3, r2
 800da30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	699b      	ldr	r3, [r3, #24]
 800da3c:	041b      	lsls	r3, r3, #16
 800da3e:	4313      	orrs	r3, r2
 800da40:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	4a16      	ldr	r2, [pc, #88]	; (800daa0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800da48:	4293      	cmp	r3, r2
 800da4a:	d004      	beq.n	800da56 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	4a14      	ldr	r2, [pc, #80]	; (800daa4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800da52:	4293      	cmp	r3, r2
 800da54:	d115      	bne.n	800da82 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da60:	051b      	lsls	r3, r3, #20
 800da62:	4313      	orrs	r3, r2
 800da64:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	69db      	ldr	r3, [r3, #28]
 800da70:	4313      	orrs	r3, r2
 800da72:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	6a1b      	ldr	r3, [r3, #32]
 800da7e:	4313      	orrs	r3, r2
 800da80:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	68fa      	ldr	r2, [r7, #12]
 800da88:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2200      	movs	r2, #0
 800da8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800da92:	2300      	movs	r3, #0
}
 800da94:	4618      	mov	r0, r3
 800da96:	3714      	adds	r7, #20
 800da98:	46bd      	mov	sp, r7
 800da9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9e:	4770      	bx	lr
 800daa0:	40010000 	.word	0x40010000
 800daa4:	40010400 	.word	0x40010400

0800daa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800daa8:	b480      	push	{r7}
 800daaa:	b083      	sub	sp, #12
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dab0:	bf00      	nop
 800dab2:	370c      	adds	r7, #12
 800dab4:	46bd      	mov	sp, r7
 800dab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daba:	4770      	bx	lr

0800dabc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dabc:	b480      	push	{r7}
 800dabe:	b083      	sub	sp, #12
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dac4:	bf00      	nop
 800dac6:	370c      	adds	r7, #12
 800dac8:	46bd      	mov	sp, r7
 800daca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dace:	4770      	bx	lr

0800dad0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dad0:	b480      	push	{r7}
 800dad2:	b083      	sub	sp, #12
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dad8:	bf00      	nop
 800dada:	370c      	adds	r7, #12
 800dadc:	46bd      	mov	sp, r7
 800dade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae2:	4770      	bx	lr

0800dae4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b082      	sub	sp, #8
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d101      	bne.n	800daf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800daf2:	2301      	movs	r3, #1
 800daf4:	e042      	b.n	800db7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d106      	bne.n	800db0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2200      	movs	r2, #0
 800db04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f7f4 fb6d 	bl	80021e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2224      	movs	r2, #36	; 0x24
 800db12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	681a      	ldr	r2, [r3, #0]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	f022 0201 	bic.w	r2, r2, #1
 800db24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f000 f82c 	bl	800db84 <UART_SetConfig>
 800db2c:	4603      	mov	r3, r0
 800db2e:	2b01      	cmp	r3, #1
 800db30:	d101      	bne.n	800db36 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800db32:	2301      	movs	r3, #1
 800db34:	e022      	b.n	800db7c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d002      	beq.n	800db44 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f000 fd88 	bl	800e654 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	685a      	ldr	r2, [r3, #4]
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800db52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	689a      	ldr	r2, [r3, #8]
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800db62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	681a      	ldr	r2, [r3, #0]
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	f042 0201 	orr.w	r2, r2, #1
 800db72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800db74:	6878      	ldr	r0, [r7, #4]
 800db76:	f000 fe0f 	bl	800e798 <UART_CheckIdleState>
 800db7a:	4603      	mov	r3, r0
}
 800db7c:	4618      	mov	r0, r3
 800db7e:	3708      	adds	r7, #8
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}

0800db84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800db84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800db88:	b092      	sub	sp, #72	; 0x48
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800db8e:	2300      	movs	r3, #0
 800db90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800db94:	697b      	ldr	r3, [r7, #20]
 800db96:	689a      	ldr	r2, [r3, #8]
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	691b      	ldr	r3, [r3, #16]
 800db9c:	431a      	orrs	r2, r3
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	695b      	ldr	r3, [r3, #20]
 800dba2:	431a      	orrs	r2, r3
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	69db      	ldr	r3, [r3, #28]
 800dba8:	4313      	orrs	r3, r2
 800dbaa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	681a      	ldr	r2, [r3, #0]
 800dbb2:	4bbe      	ldr	r3, [pc, #760]	; (800deac <UART_SetConfig+0x328>)
 800dbb4:	4013      	ands	r3, r2
 800dbb6:	697a      	ldr	r2, [r7, #20]
 800dbb8:	6812      	ldr	r2, [r2, #0]
 800dbba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dbbc:	430b      	orrs	r3, r1
 800dbbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dbc0:	697b      	ldr	r3, [r7, #20]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	685b      	ldr	r3, [r3, #4]
 800dbc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	68da      	ldr	r2, [r3, #12]
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	430a      	orrs	r2, r1
 800dbd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	699b      	ldr	r3, [r3, #24]
 800dbda:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	4ab3      	ldr	r2, [pc, #716]	; (800deb0 <UART_SetConfig+0x32c>)
 800dbe2:	4293      	cmp	r3, r2
 800dbe4:	d004      	beq.n	800dbf0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	6a1b      	ldr	r3, [r3, #32]
 800dbea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dbec:	4313      	orrs	r3, r2
 800dbee:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dbf0:	697b      	ldr	r3, [r7, #20]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	689a      	ldr	r2, [r3, #8]
 800dbf6:	4baf      	ldr	r3, [pc, #700]	; (800deb4 <UART_SetConfig+0x330>)
 800dbf8:	4013      	ands	r3, r2
 800dbfa:	697a      	ldr	r2, [r7, #20]
 800dbfc:	6812      	ldr	r2, [r2, #0]
 800dbfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dc00:	430b      	orrs	r3, r1
 800dc02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc0a:	f023 010f 	bic.w	r1, r3, #15
 800dc0e:	697b      	ldr	r3, [r7, #20]
 800dc10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	430a      	orrs	r2, r1
 800dc18:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	4aa6      	ldr	r2, [pc, #664]	; (800deb8 <UART_SetConfig+0x334>)
 800dc20:	4293      	cmp	r3, r2
 800dc22:	d177      	bne.n	800dd14 <UART_SetConfig+0x190>
 800dc24:	4ba5      	ldr	r3, [pc, #660]	; (800debc <UART_SetConfig+0x338>)
 800dc26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dc2c:	2b28      	cmp	r3, #40	; 0x28
 800dc2e:	d86d      	bhi.n	800dd0c <UART_SetConfig+0x188>
 800dc30:	a201      	add	r2, pc, #4	; (adr r2, 800dc38 <UART_SetConfig+0xb4>)
 800dc32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc36:	bf00      	nop
 800dc38:	0800dcdd 	.word	0x0800dcdd
 800dc3c:	0800dd0d 	.word	0x0800dd0d
 800dc40:	0800dd0d 	.word	0x0800dd0d
 800dc44:	0800dd0d 	.word	0x0800dd0d
 800dc48:	0800dd0d 	.word	0x0800dd0d
 800dc4c:	0800dd0d 	.word	0x0800dd0d
 800dc50:	0800dd0d 	.word	0x0800dd0d
 800dc54:	0800dd0d 	.word	0x0800dd0d
 800dc58:	0800dce5 	.word	0x0800dce5
 800dc5c:	0800dd0d 	.word	0x0800dd0d
 800dc60:	0800dd0d 	.word	0x0800dd0d
 800dc64:	0800dd0d 	.word	0x0800dd0d
 800dc68:	0800dd0d 	.word	0x0800dd0d
 800dc6c:	0800dd0d 	.word	0x0800dd0d
 800dc70:	0800dd0d 	.word	0x0800dd0d
 800dc74:	0800dd0d 	.word	0x0800dd0d
 800dc78:	0800dced 	.word	0x0800dced
 800dc7c:	0800dd0d 	.word	0x0800dd0d
 800dc80:	0800dd0d 	.word	0x0800dd0d
 800dc84:	0800dd0d 	.word	0x0800dd0d
 800dc88:	0800dd0d 	.word	0x0800dd0d
 800dc8c:	0800dd0d 	.word	0x0800dd0d
 800dc90:	0800dd0d 	.word	0x0800dd0d
 800dc94:	0800dd0d 	.word	0x0800dd0d
 800dc98:	0800dcf5 	.word	0x0800dcf5
 800dc9c:	0800dd0d 	.word	0x0800dd0d
 800dca0:	0800dd0d 	.word	0x0800dd0d
 800dca4:	0800dd0d 	.word	0x0800dd0d
 800dca8:	0800dd0d 	.word	0x0800dd0d
 800dcac:	0800dd0d 	.word	0x0800dd0d
 800dcb0:	0800dd0d 	.word	0x0800dd0d
 800dcb4:	0800dd0d 	.word	0x0800dd0d
 800dcb8:	0800dcfd 	.word	0x0800dcfd
 800dcbc:	0800dd0d 	.word	0x0800dd0d
 800dcc0:	0800dd0d 	.word	0x0800dd0d
 800dcc4:	0800dd0d 	.word	0x0800dd0d
 800dcc8:	0800dd0d 	.word	0x0800dd0d
 800dccc:	0800dd0d 	.word	0x0800dd0d
 800dcd0:	0800dd0d 	.word	0x0800dd0d
 800dcd4:	0800dd0d 	.word	0x0800dd0d
 800dcd8:	0800dd05 	.word	0x0800dd05
 800dcdc:	2301      	movs	r3, #1
 800dcde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dce2:	e222      	b.n	800e12a <UART_SetConfig+0x5a6>
 800dce4:	2304      	movs	r3, #4
 800dce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcea:	e21e      	b.n	800e12a <UART_SetConfig+0x5a6>
 800dcec:	2308      	movs	r3, #8
 800dcee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcf2:	e21a      	b.n	800e12a <UART_SetConfig+0x5a6>
 800dcf4:	2310      	movs	r3, #16
 800dcf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcfa:	e216      	b.n	800e12a <UART_SetConfig+0x5a6>
 800dcfc:	2320      	movs	r3, #32
 800dcfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd02:	e212      	b.n	800e12a <UART_SetConfig+0x5a6>
 800dd04:	2340      	movs	r3, #64	; 0x40
 800dd06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd0a:	e20e      	b.n	800e12a <UART_SetConfig+0x5a6>
 800dd0c:	2380      	movs	r3, #128	; 0x80
 800dd0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd12:	e20a      	b.n	800e12a <UART_SetConfig+0x5a6>
 800dd14:	697b      	ldr	r3, [r7, #20]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	4a69      	ldr	r2, [pc, #420]	; (800dec0 <UART_SetConfig+0x33c>)
 800dd1a:	4293      	cmp	r3, r2
 800dd1c:	d130      	bne.n	800dd80 <UART_SetConfig+0x1fc>
 800dd1e:	4b67      	ldr	r3, [pc, #412]	; (800debc <UART_SetConfig+0x338>)
 800dd20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd22:	f003 0307 	and.w	r3, r3, #7
 800dd26:	2b05      	cmp	r3, #5
 800dd28:	d826      	bhi.n	800dd78 <UART_SetConfig+0x1f4>
 800dd2a:	a201      	add	r2, pc, #4	; (adr r2, 800dd30 <UART_SetConfig+0x1ac>)
 800dd2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd30:	0800dd49 	.word	0x0800dd49
 800dd34:	0800dd51 	.word	0x0800dd51
 800dd38:	0800dd59 	.word	0x0800dd59
 800dd3c:	0800dd61 	.word	0x0800dd61
 800dd40:	0800dd69 	.word	0x0800dd69
 800dd44:	0800dd71 	.word	0x0800dd71
 800dd48:	2300      	movs	r3, #0
 800dd4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd4e:	e1ec      	b.n	800e12a <UART_SetConfig+0x5a6>
 800dd50:	2304      	movs	r3, #4
 800dd52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd56:	e1e8      	b.n	800e12a <UART_SetConfig+0x5a6>
 800dd58:	2308      	movs	r3, #8
 800dd5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd5e:	e1e4      	b.n	800e12a <UART_SetConfig+0x5a6>
 800dd60:	2310      	movs	r3, #16
 800dd62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd66:	e1e0      	b.n	800e12a <UART_SetConfig+0x5a6>
 800dd68:	2320      	movs	r3, #32
 800dd6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd6e:	e1dc      	b.n	800e12a <UART_SetConfig+0x5a6>
 800dd70:	2340      	movs	r3, #64	; 0x40
 800dd72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd76:	e1d8      	b.n	800e12a <UART_SetConfig+0x5a6>
 800dd78:	2380      	movs	r3, #128	; 0x80
 800dd7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd7e:	e1d4      	b.n	800e12a <UART_SetConfig+0x5a6>
 800dd80:	697b      	ldr	r3, [r7, #20]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	4a4f      	ldr	r2, [pc, #316]	; (800dec4 <UART_SetConfig+0x340>)
 800dd86:	4293      	cmp	r3, r2
 800dd88:	d130      	bne.n	800ddec <UART_SetConfig+0x268>
 800dd8a:	4b4c      	ldr	r3, [pc, #304]	; (800debc <UART_SetConfig+0x338>)
 800dd8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd8e:	f003 0307 	and.w	r3, r3, #7
 800dd92:	2b05      	cmp	r3, #5
 800dd94:	d826      	bhi.n	800dde4 <UART_SetConfig+0x260>
 800dd96:	a201      	add	r2, pc, #4	; (adr r2, 800dd9c <UART_SetConfig+0x218>)
 800dd98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd9c:	0800ddb5 	.word	0x0800ddb5
 800dda0:	0800ddbd 	.word	0x0800ddbd
 800dda4:	0800ddc5 	.word	0x0800ddc5
 800dda8:	0800ddcd 	.word	0x0800ddcd
 800ddac:	0800ddd5 	.word	0x0800ddd5
 800ddb0:	0800dddd 	.word	0x0800dddd
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddba:	e1b6      	b.n	800e12a <UART_SetConfig+0x5a6>
 800ddbc:	2304      	movs	r3, #4
 800ddbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddc2:	e1b2      	b.n	800e12a <UART_SetConfig+0x5a6>
 800ddc4:	2308      	movs	r3, #8
 800ddc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddca:	e1ae      	b.n	800e12a <UART_SetConfig+0x5a6>
 800ddcc:	2310      	movs	r3, #16
 800ddce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddd2:	e1aa      	b.n	800e12a <UART_SetConfig+0x5a6>
 800ddd4:	2320      	movs	r3, #32
 800ddd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddda:	e1a6      	b.n	800e12a <UART_SetConfig+0x5a6>
 800dddc:	2340      	movs	r3, #64	; 0x40
 800ddde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dde2:	e1a2      	b.n	800e12a <UART_SetConfig+0x5a6>
 800dde4:	2380      	movs	r3, #128	; 0x80
 800dde6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddea:	e19e      	b.n	800e12a <UART_SetConfig+0x5a6>
 800ddec:	697b      	ldr	r3, [r7, #20]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	4a35      	ldr	r2, [pc, #212]	; (800dec8 <UART_SetConfig+0x344>)
 800ddf2:	4293      	cmp	r3, r2
 800ddf4:	d130      	bne.n	800de58 <UART_SetConfig+0x2d4>
 800ddf6:	4b31      	ldr	r3, [pc, #196]	; (800debc <UART_SetConfig+0x338>)
 800ddf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddfa:	f003 0307 	and.w	r3, r3, #7
 800ddfe:	2b05      	cmp	r3, #5
 800de00:	d826      	bhi.n	800de50 <UART_SetConfig+0x2cc>
 800de02:	a201      	add	r2, pc, #4	; (adr r2, 800de08 <UART_SetConfig+0x284>)
 800de04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de08:	0800de21 	.word	0x0800de21
 800de0c:	0800de29 	.word	0x0800de29
 800de10:	0800de31 	.word	0x0800de31
 800de14:	0800de39 	.word	0x0800de39
 800de18:	0800de41 	.word	0x0800de41
 800de1c:	0800de49 	.word	0x0800de49
 800de20:	2300      	movs	r3, #0
 800de22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de26:	e180      	b.n	800e12a <UART_SetConfig+0x5a6>
 800de28:	2304      	movs	r3, #4
 800de2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de2e:	e17c      	b.n	800e12a <UART_SetConfig+0x5a6>
 800de30:	2308      	movs	r3, #8
 800de32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de36:	e178      	b.n	800e12a <UART_SetConfig+0x5a6>
 800de38:	2310      	movs	r3, #16
 800de3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de3e:	e174      	b.n	800e12a <UART_SetConfig+0x5a6>
 800de40:	2320      	movs	r3, #32
 800de42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de46:	e170      	b.n	800e12a <UART_SetConfig+0x5a6>
 800de48:	2340      	movs	r3, #64	; 0x40
 800de4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de4e:	e16c      	b.n	800e12a <UART_SetConfig+0x5a6>
 800de50:	2380      	movs	r3, #128	; 0x80
 800de52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de56:	e168      	b.n	800e12a <UART_SetConfig+0x5a6>
 800de58:	697b      	ldr	r3, [r7, #20]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	4a1b      	ldr	r2, [pc, #108]	; (800decc <UART_SetConfig+0x348>)
 800de5e:	4293      	cmp	r3, r2
 800de60:	d142      	bne.n	800dee8 <UART_SetConfig+0x364>
 800de62:	4b16      	ldr	r3, [pc, #88]	; (800debc <UART_SetConfig+0x338>)
 800de64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de66:	f003 0307 	and.w	r3, r3, #7
 800de6a:	2b05      	cmp	r3, #5
 800de6c:	d838      	bhi.n	800dee0 <UART_SetConfig+0x35c>
 800de6e:	a201      	add	r2, pc, #4	; (adr r2, 800de74 <UART_SetConfig+0x2f0>)
 800de70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de74:	0800de8d 	.word	0x0800de8d
 800de78:	0800de95 	.word	0x0800de95
 800de7c:	0800de9d 	.word	0x0800de9d
 800de80:	0800dea5 	.word	0x0800dea5
 800de84:	0800ded1 	.word	0x0800ded1
 800de88:	0800ded9 	.word	0x0800ded9
 800de8c:	2300      	movs	r3, #0
 800de8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de92:	e14a      	b.n	800e12a <UART_SetConfig+0x5a6>
 800de94:	2304      	movs	r3, #4
 800de96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de9a:	e146      	b.n	800e12a <UART_SetConfig+0x5a6>
 800de9c:	2308      	movs	r3, #8
 800de9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dea2:	e142      	b.n	800e12a <UART_SetConfig+0x5a6>
 800dea4:	2310      	movs	r3, #16
 800dea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deaa:	e13e      	b.n	800e12a <UART_SetConfig+0x5a6>
 800deac:	cfff69f3 	.word	0xcfff69f3
 800deb0:	58000c00 	.word	0x58000c00
 800deb4:	11fff4ff 	.word	0x11fff4ff
 800deb8:	40011000 	.word	0x40011000
 800debc:	58024400 	.word	0x58024400
 800dec0:	40004400 	.word	0x40004400
 800dec4:	40004800 	.word	0x40004800
 800dec8:	40004c00 	.word	0x40004c00
 800decc:	40005000 	.word	0x40005000
 800ded0:	2320      	movs	r3, #32
 800ded2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ded6:	e128      	b.n	800e12a <UART_SetConfig+0x5a6>
 800ded8:	2340      	movs	r3, #64	; 0x40
 800deda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dede:	e124      	b.n	800e12a <UART_SetConfig+0x5a6>
 800dee0:	2380      	movs	r3, #128	; 0x80
 800dee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dee6:	e120      	b.n	800e12a <UART_SetConfig+0x5a6>
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	4acb      	ldr	r2, [pc, #812]	; (800e21c <UART_SetConfig+0x698>)
 800deee:	4293      	cmp	r3, r2
 800def0:	d176      	bne.n	800dfe0 <UART_SetConfig+0x45c>
 800def2:	4bcb      	ldr	r3, [pc, #812]	; (800e220 <UART_SetConfig+0x69c>)
 800def4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800def6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800defa:	2b28      	cmp	r3, #40	; 0x28
 800defc:	d86c      	bhi.n	800dfd8 <UART_SetConfig+0x454>
 800defe:	a201      	add	r2, pc, #4	; (adr r2, 800df04 <UART_SetConfig+0x380>)
 800df00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df04:	0800dfa9 	.word	0x0800dfa9
 800df08:	0800dfd9 	.word	0x0800dfd9
 800df0c:	0800dfd9 	.word	0x0800dfd9
 800df10:	0800dfd9 	.word	0x0800dfd9
 800df14:	0800dfd9 	.word	0x0800dfd9
 800df18:	0800dfd9 	.word	0x0800dfd9
 800df1c:	0800dfd9 	.word	0x0800dfd9
 800df20:	0800dfd9 	.word	0x0800dfd9
 800df24:	0800dfb1 	.word	0x0800dfb1
 800df28:	0800dfd9 	.word	0x0800dfd9
 800df2c:	0800dfd9 	.word	0x0800dfd9
 800df30:	0800dfd9 	.word	0x0800dfd9
 800df34:	0800dfd9 	.word	0x0800dfd9
 800df38:	0800dfd9 	.word	0x0800dfd9
 800df3c:	0800dfd9 	.word	0x0800dfd9
 800df40:	0800dfd9 	.word	0x0800dfd9
 800df44:	0800dfb9 	.word	0x0800dfb9
 800df48:	0800dfd9 	.word	0x0800dfd9
 800df4c:	0800dfd9 	.word	0x0800dfd9
 800df50:	0800dfd9 	.word	0x0800dfd9
 800df54:	0800dfd9 	.word	0x0800dfd9
 800df58:	0800dfd9 	.word	0x0800dfd9
 800df5c:	0800dfd9 	.word	0x0800dfd9
 800df60:	0800dfd9 	.word	0x0800dfd9
 800df64:	0800dfc1 	.word	0x0800dfc1
 800df68:	0800dfd9 	.word	0x0800dfd9
 800df6c:	0800dfd9 	.word	0x0800dfd9
 800df70:	0800dfd9 	.word	0x0800dfd9
 800df74:	0800dfd9 	.word	0x0800dfd9
 800df78:	0800dfd9 	.word	0x0800dfd9
 800df7c:	0800dfd9 	.word	0x0800dfd9
 800df80:	0800dfd9 	.word	0x0800dfd9
 800df84:	0800dfc9 	.word	0x0800dfc9
 800df88:	0800dfd9 	.word	0x0800dfd9
 800df8c:	0800dfd9 	.word	0x0800dfd9
 800df90:	0800dfd9 	.word	0x0800dfd9
 800df94:	0800dfd9 	.word	0x0800dfd9
 800df98:	0800dfd9 	.word	0x0800dfd9
 800df9c:	0800dfd9 	.word	0x0800dfd9
 800dfa0:	0800dfd9 	.word	0x0800dfd9
 800dfa4:	0800dfd1 	.word	0x0800dfd1
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfae:	e0bc      	b.n	800e12a <UART_SetConfig+0x5a6>
 800dfb0:	2304      	movs	r3, #4
 800dfb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfb6:	e0b8      	b.n	800e12a <UART_SetConfig+0x5a6>
 800dfb8:	2308      	movs	r3, #8
 800dfba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfbe:	e0b4      	b.n	800e12a <UART_SetConfig+0x5a6>
 800dfc0:	2310      	movs	r3, #16
 800dfc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfc6:	e0b0      	b.n	800e12a <UART_SetConfig+0x5a6>
 800dfc8:	2320      	movs	r3, #32
 800dfca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfce:	e0ac      	b.n	800e12a <UART_SetConfig+0x5a6>
 800dfd0:	2340      	movs	r3, #64	; 0x40
 800dfd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfd6:	e0a8      	b.n	800e12a <UART_SetConfig+0x5a6>
 800dfd8:	2380      	movs	r3, #128	; 0x80
 800dfda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfde:	e0a4      	b.n	800e12a <UART_SetConfig+0x5a6>
 800dfe0:	697b      	ldr	r3, [r7, #20]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	4a8f      	ldr	r2, [pc, #572]	; (800e224 <UART_SetConfig+0x6a0>)
 800dfe6:	4293      	cmp	r3, r2
 800dfe8:	d130      	bne.n	800e04c <UART_SetConfig+0x4c8>
 800dfea:	4b8d      	ldr	r3, [pc, #564]	; (800e220 <UART_SetConfig+0x69c>)
 800dfec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfee:	f003 0307 	and.w	r3, r3, #7
 800dff2:	2b05      	cmp	r3, #5
 800dff4:	d826      	bhi.n	800e044 <UART_SetConfig+0x4c0>
 800dff6:	a201      	add	r2, pc, #4	; (adr r2, 800dffc <UART_SetConfig+0x478>)
 800dff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dffc:	0800e015 	.word	0x0800e015
 800e000:	0800e01d 	.word	0x0800e01d
 800e004:	0800e025 	.word	0x0800e025
 800e008:	0800e02d 	.word	0x0800e02d
 800e00c:	0800e035 	.word	0x0800e035
 800e010:	0800e03d 	.word	0x0800e03d
 800e014:	2300      	movs	r3, #0
 800e016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e01a:	e086      	b.n	800e12a <UART_SetConfig+0x5a6>
 800e01c:	2304      	movs	r3, #4
 800e01e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e022:	e082      	b.n	800e12a <UART_SetConfig+0x5a6>
 800e024:	2308      	movs	r3, #8
 800e026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e02a:	e07e      	b.n	800e12a <UART_SetConfig+0x5a6>
 800e02c:	2310      	movs	r3, #16
 800e02e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e032:	e07a      	b.n	800e12a <UART_SetConfig+0x5a6>
 800e034:	2320      	movs	r3, #32
 800e036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e03a:	e076      	b.n	800e12a <UART_SetConfig+0x5a6>
 800e03c:	2340      	movs	r3, #64	; 0x40
 800e03e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e042:	e072      	b.n	800e12a <UART_SetConfig+0x5a6>
 800e044:	2380      	movs	r3, #128	; 0x80
 800e046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e04a:	e06e      	b.n	800e12a <UART_SetConfig+0x5a6>
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	4a75      	ldr	r2, [pc, #468]	; (800e228 <UART_SetConfig+0x6a4>)
 800e052:	4293      	cmp	r3, r2
 800e054:	d130      	bne.n	800e0b8 <UART_SetConfig+0x534>
 800e056:	4b72      	ldr	r3, [pc, #456]	; (800e220 <UART_SetConfig+0x69c>)
 800e058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e05a:	f003 0307 	and.w	r3, r3, #7
 800e05e:	2b05      	cmp	r3, #5
 800e060:	d826      	bhi.n	800e0b0 <UART_SetConfig+0x52c>
 800e062:	a201      	add	r2, pc, #4	; (adr r2, 800e068 <UART_SetConfig+0x4e4>)
 800e064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e068:	0800e081 	.word	0x0800e081
 800e06c:	0800e089 	.word	0x0800e089
 800e070:	0800e091 	.word	0x0800e091
 800e074:	0800e099 	.word	0x0800e099
 800e078:	0800e0a1 	.word	0x0800e0a1
 800e07c:	0800e0a9 	.word	0x0800e0a9
 800e080:	2300      	movs	r3, #0
 800e082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e086:	e050      	b.n	800e12a <UART_SetConfig+0x5a6>
 800e088:	2304      	movs	r3, #4
 800e08a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e08e:	e04c      	b.n	800e12a <UART_SetConfig+0x5a6>
 800e090:	2308      	movs	r3, #8
 800e092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e096:	e048      	b.n	800e12a <UART_SetConfig+0x5a6>
 800e098:	2310      	movs	r3, #16
 800e09a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e09e:	e044      	b.n	800e12a <UART_SetConfig+0x5a6>
 800e0a0:	2320      	movs	r3, #32
 800e0a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0a6:	e040      	b.n	800e12a <UART_SetConfig+0x5a6>
 800e0a8:	2340      	movs	r3, #64	; 0x40
 800e0aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ae:	e03c      	b.n	800e12a <UART_SetConfig+0x5a6>
 800e0b0:	2380      	movs	r3, #128	; 0x80
 800e0b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0b6:	e038      	b.n	800e12a <UART_SetConfig+0x5a6>
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	4a5b      	ldr	r2, [pc, #364]	; (800e22c <UART_SetConfig+0x6a8>)
 800e0be:	4293      	cmp	r3, r2
 800e0c0:	d130      	bne.n	800e124 <UART_SetConfig+0x5a0>
 800e0c2:	4b57      	ldr	r3, [pc, #348]	; (800e220 <UART_SetConfig+0x69c>)
 800e0c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0c6:	f003 0307 	and.w	r3, r3, #7
 800e0ca:	2b05      	cmp	r3, #5
 800e0cc:	d826      	bhi.n	800e11c <UART_SetConfig+0x598>
 800e0ce:	a201      	add	r2, pc, #4	; (adr r2, 800e0d4 <UART_SetConfig+0x550>)
 800e0d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0d4:	0800e0ed 	.word	0x0800e0ed
 800e0d8:	0800e0f5 	.word	0x0800e0f5
 800e0dc:	0800e0fd 	.word	0x0800e0fd
 800e0e0:	0800e105 	.word	0x0800e105
 800e0e4:	0800e10d 	.word	0x0800e10d
 800e0e8:	0800e115 	.word	0x0800e115
 800e0ec:	2302      	movs	r3, #2
 800e0ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0f2:	e01a      	b.n	800e12a <UART_SetConfig+0x5a6>
 800e0f4:	2304      	movs	r3, #4
 800e0f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0fa:	e016      	b.n	800e12a <UART_SetConfig+0x5a6>
 800e0fc:	2308      	movs	r3, #8
 800e0fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e102:	e012      	b.n	800e12a <UART_SetConfig+0x5a6>
 800e104:	2310      	movs	r3, #16
 800e106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e10a:	e00e      	b.n	800e12a <UART_SetConfig+0x5a6>
 800e10c:	2320      	movs	r3, #32
 800e10e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e112:	e00a      	b.n	800e12a <UART_SetConfig+0x5a6>
 800e114:	2340      	movs	r3, #64	; 0x40
 800e116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e11a:	e006      	b.n	800e12a <UART_SetConfig+0x5a6>
 800e11c:	2380      	movs	r3, #128	; 0x80
 800e11e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e122:	e002      	b.n	800e12a <UART_SetConfig+0x5a6>
 800e124:	2380      	movs	r3, #128	; 0x80
 800e126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e12a:	697b      	ldr	r3, [r7, #20]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	4a3f      	ldr	r2, [pc, #252]	; (800e22c <UART_SetConfig+0x6a8>)
 800e130:	4293      	cmp	r3, r2
 800e132:	f040 80f8 	bne.w	800e326 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e136:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e13a:	2b20      	cmp	r3, #32
 800e13c:	dc46      	bgt.n	800e1cc <UART_SetConfig+0x648>
 800e13e:	2b02      	cmp	r3, #2
 800e140:	f2c0 8082 	blt.w	800e248 <UART_SetConfig+0x6c4>
 800e144:	3b02      	subs	r3, #2
 800e146:	2b1e      	cmp	r3, #30
 800e148:	d87e      	bhi.n	800e248 <UART_SetConfig+0x6c4>
 800e14a:	a201      	add	r2, pc, #4	; (adr r2, 800e150 <UART_SetConfig+0x5cc>)
 800e14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e150:	0800e1d3 	.word	0x0800e1d3
 800e154:	0800e249 	.word	0x0800e249
 800e158:	0800e1db 	.word	0x0800e1db
 800e15c:	0800e249 	.word	0x0800e249
 800e160:	0800e249 	.word	0x0800e249
 800e164:	0800e249 	.word	0x0800e249
 800e168:	0800e1eb 	.word	0x0800e1eb
 800e16c:	0800e249 	.word	0x0800e249
 800e170:	0800e249 	.word	0x0800e249
 800e174:	0800e249 	.word	0x0800e249
 800e178:	0800e249 	.word	0x0800e249
 800e17c:	0800e249 	.word	0x0800e249
 800e180:	0800e249 	.word	0x0800e249
 800e184:	0800e249 	.word	0x0800e249
 800e188:	0800e1fb 	.word	0x0800e1fb
 800e18c:	0800e249 	.word	0x0800e249
 800e190:	0800e249 	.word	0x0800e249
 800e194:	0800e249 	.word	0x0800e249
 800e198:	0800e249 	.word	0x0800e249
 800e19c:	0800e249 	.word	0x0800e249
 800e1a0:	0800e249 	.word	0x0800e249
 800e1a4:	0800e249 	.word	0x0800e249
 800e1a8:	0800e249 	.word	0x0800e249
 800e1ac:	0800e249 	.word	0x0800e249
 800e1b0:	0800e249 	.word	0x0800e249
 800e1b4:	0800e249 	.word	0x0800e249
 800e1b8:	0800e249 	.word	0x0800e249
 800e1bc:	0800e249 	.word	0x0800e249
 800e1c0:	0800e249 	.word	0x0800e249
 800e1c4:	0800e249 	.word	0x0800e249
 800e1c8:	0800e23b 	.word	0x0800e23b
 800e1cc:	2b40      	cmp	r3, #64	; 0x40
 800e1ce:	d037      	beq.n	800e240 <UART_SetConfig+0x6bc>
 800e1d0:	e03a      	b.n	800e248 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e1d2:	f7fd fd2b 	bl	800bc2c <HAL_RCCEx_GetD3PCLK1Freq>
 800e1d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e1d8:	e03c      	b.n	800e254 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e1da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f7fd fd3a 	bl	800bc58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1e8:	e034      	b.n	800e254 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e1ea:	f107 0318 	add.w	r3, r7, #24
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7fd fe86 	bl	800bf00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e1f4:	69fb      	ldr	r3, [r7, #28]
 800e1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1f8:	e02c      	b.n	800e254 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e1fa:	4b09      	ldr	r3, [pc, #36]	; (800e220 <UART_SetConfig+0x69c>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f003 0320 	and.w	r3, r3, #32
 800e202:	2b00      	cmp	r3, #0
 800e204:	d016      	beq.n	800e234 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e206:	4b06      	ldr	r3, [pc, #24]	; (800e220 <UART_SetConfig+0x69c>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	08db      	lsrs	r3, r3, #3
 800e20c:	f003 0303 	and.w	r3, r3, #3
 800e210:	4a07      	ldr	r2, [pc, #28]	; (800e230 <UART_SetConfig+0x6ac>)
 800e212:	fa22 f303 	lsr.w	r3, r2, r3
 800e216:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e218:	e01c      	b.n	800e254 <UART_SetConfig+0x6d0>
 800e21a:	bf00      	nop
 800e21c:	40011400 	.word	0x40011400
 800e220:	58024400 	.word	0x58024400
 800e224:	40007800 	.word	0x40007800
 800e228:	40007c00 	.word	0x40007c00
 800e22c:	58000c00 	.word	0x58000c00
 800e230:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e234:	4b9d      	ldr	r3, [pc, #628]	; (800e4ac <UART_SetConfig+0x928>)
 800e236:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e238:	e00c      	b.n	800e254 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e23a:	4b9d      	ldr	r3, [pc, #628]	; (800e4b0 <UART_SetConfig+0x92c>)
 800e23c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e23e:	e009      	b.n	800e254 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e240:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e244:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e246:	e005      	b.n	800e254 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e248:	2300      	movs	r3, #0
 800e24a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e24c:	2301      	movs	r3, #1
 800e24e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e252:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e256:	2b00      	cmp	r3, #0
 800e258:	f000 81de 	beq.w	800e618 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e260:	4a94      	ldr	r2, [pc, #592]	; (800e4b4 <UART_SetConfig+0x930>)
 800e262:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e266:	461a      	mov	r2, r3
 800e268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e26a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e26e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e270:	697b      	ldr	r3, [r7, #20]
 800e272:	685a      	ldr	r2, [r3, #4]
 800e274:	4613      	mov	r3, r2
 800e276:	005b      	lsls	r3, r3, #1
 800e278:	4413      	add	r3, r2
 800e27a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e27c:	429a      	cmp	r2, r3
 800e27e:	d305      	bcc.n	800e28c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e280:	697b      	ldr	r3, [r7, #20]
 800e282:	685b      	ldr	r3, [r3, #4]
 800e284:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e288:	429a      	cmp	r2, r3
 800e28a:	d903      	bls.n	800e294 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e28c:	2301      	movs	r3, #1
 800e28e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e292:	e1c1      	b.n	800e618 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e296:	2200      	movs	r2, #0
 800e298:	60bb      	str	r3, [r7, #8]
 800e29a:	60fa      	str	r2, [r7, #12]
 800e29c:	697b      	ldr	r3, [r7, #20]
 800e29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2a0:	4a84      	ldr	r2, [pc, #528]	; (800e4b4 <UART_SetConfig+0x930>)
 800e2a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e2a6:	b29b      	uxth	r3, r3
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	603b      	str	r3, [r7, #0]
 800e2ac:	607a      	str	r2, [r7, #4]
 800e2ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e2b6:	f7f2 f80f 	bl	80002d8 <__aeabi_uldivmod>
 800e2ba:	4602      	mov	r2, r0
 800e2bc:	460b      	mov	r3, r1
 800e2be:	4610      	mov	r0, r2
 800e2c0:	4619      	mov	r1, r3
 800e2c2:	f04f 0200 	mov.w	r2, #0
 800e2c6:	f04f 0300 	mov.w	r3, #0
 800e2ca:	020b      	lsls	r3, r1, #8
 800e2cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e2d0:	0202      	lsls	r2, r0, #8
 800e2d2:	6979      	ldr	r1, [r7, #20]
 800e2d4:	6849      	ldr	r1, [r1, #4]
 800e2d6:	0849      	lsrs	r1, r1, #1
 800e2d8:	2000      	movs	r0, #0
 800e2da:	460c      	mov	r4, r1
 800e2dc:	4605      	mov	r5, r0
 800e2de:	eb12 0804 	adds.w	r8, r2, r4
 800e2e2:	eb43 0905 	adc.w	r9, r3, r5
 800e2e6:	697b      	ldr	r3, [r7, #20]
 800e2e8:	685b      	ldr	r3, [r3, #4]
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	469a      	mov	sl, r3
 800e2ee:	4693      	mov	fp, r2
 800e2f0:	4652      	mov	r2, sl
 800e2f2:	465b      	mov	r3, fp
 800e2f4:	4640      	mov	r0, r8
 800e2f6:	4649      	mov	r1, r9
 800e2f8:	f7f1 ffee 	bl	80002d8 <__aeabi_uldivmod>
 800e2fc:	4602      	mov	r2, r0
 800e2fe:	460b      	mov	r3, r1
 800e300:	4613      	mov	r3, r2
 800e302:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e306:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e30a:	d308      	bcc.n	800e31e <UART_SetConfig+0x79a>
 800e30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e30e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e312:	d204      	bcs.n	800e31e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e31a:	60da      	str	r2, [r3, #12]
 800e31c:	e17c      	b.n	800e618 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e31e:	2301      	movs	r3, #1
 800e320:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e324:	e178      	b.n	800e618 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e326:	697b      	ldr	r3, [r7, #20]
 800e328:	69db      	ldr	r3, [r3, #28]
 800e32a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e32e:	f040 80c5 	bne.w	800e4bc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e332:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e336:	2b20      	cmp	r3, #32
 800e338:	dc48      	bgt.n	800e3cc <UART_SetConfig+0x848>
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	db7b      	blt.n	800e436 <UART_SetConfig+0x8b2>
 800e33e:	2b20      	cmp	r3, #32
 800e340:	d879      	bhi.n	800e436 <UART_SetConfig+0x8b2>
 800e342:	a201      	add	r2, pc, #4	; (adr r2, 800e348 <UART_SetConfig+0x7c4>)
 800e344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e348:	0800e3d3 	.word	0x0800e3d3
 800e34c:	0800e3db 	.word	0x0800e3db
 800e350:	0800e437 	.word	0x0800e437
 800e354:	0800e437 	.word	0x0800e437
 800e358:	0800e3e3 	.word	0x0800e3e3
 800e35c:	0800e437 	.word	0x0800e437
 800e360:	0800e437 	.word	0x0800e437
 800e364:	0800e437 	.word	0x0800e437
 800e368:	0800e3f3 	.word	0x0800e3f3
 800e36c:	0800e437 	.word	0x0800e437
 800e370:	0800e437 	.word	0x0800e437
 800e374:	0800e437 	.word	0x0800e437
 800e378:	0800e437 	.word	0x0800e437
 800e37c:	0800e437 	.word	0x0800e437
 800e380:	0800e437 	.word	0x0800e437
 800e384:	0800e437 	.word	0x0800e437
 800e388:	0800e403 	.word	0x0800e403
 800e38c:	0800e437 	.word	0x0800e437
 800e390:	0800e437 	.word	0x0800e437
 800e394:	0800e437 	.word	0x0800e437
 800e398:	0800e437 	.word	0x0800e437
 800e39c:	0800e437 	.word	0x0800e437
 800e3a0:	0800e437 	.word	0x0800e437
 800e3a4:	0800e437 	.word	0x0800e437
 800e3a8:	0800e437 	.word	0x0800e437
 800e3ac:	0800e437 	.word	0x0800e437
 800e3b0:	0800e437 	.word	0x0800e437
 800e3b4:	0800e437 	.word	0x0800e437
 800e3b8:	0800e437 	.word	0x0800e437
 800e3bc:	0800e437 	.word	0x0800e437
 800e3c0:	0800e437 	.word	0x0800e437
 800e3c4:	0800e437 	.word	0x0800e437
 800e3c8:	0800e429 	.word	0x0800e429
 800e3cc:	2b40      	cmp	r3, #64	; 0x40
 800e3ce:	d02e      	beq.n	800e42e <UART_SetConfig+0x8aa>
 800e3d0:	e031      	b.n	800e436 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e3d2:	f7fb ffe7 	bl	800a3a4 <HAL_RCC_GetPCLK1Freq>
 800e3d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e3d8:	e033      	b.n	800e442 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e3da:	f7fb fff9 	bl	800a3d0 <HAL_RCC_GetPCLK2Freq>
 800e3de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e3e0:	e02f      	b.n	800e442 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e3e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f7fd fc36 	bl	800bc58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3f0:	e027      	b.n	800e442 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e3f2:	f107 0318 	add.w	r3, r7, #24
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f7fd fd82 	bl	800bf00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e3fc:	69fb      	ldr	r3, [r7, #28]
 800e3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e400:	e01f      	b.n	800e442 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e402:	4b2d      	ldr	r3, [pc, #180]	; (800e4b8 <UART_SetConfig+0x934>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	f003 0320 	and.w	r3, r3, #32
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d009      	beq.n	800e422 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e40e:	4b2a      	ldr	r3, [pc, #168]	; (800e4b8 <UART_SetConfig+0x934>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	08db      	lsrs	r3, r3, #3
 800e414:	f003 0303 	and.w	r3, r3, #3
 800e418:	4a24      	ldr	r2, [pc, #144]	; (800e4ac <UART_SetConfig+0x928>)
 800e41a:	fa22 f303 	lsr.w	r3, r2, r3
 800e41e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e420:	e00f      	b.n	800e442 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e422:	4b22      	ldr	r3, [pc, #136]	; (800e4ac <UART_SetConfig+0x928>)
 800e424:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e426:	e00c      	b.n	800e442 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e428:	4b21      	ldr	r3, [pc, #132]	; (800e4b0 <UART_SetConfig+0x92c>)
 800e42a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e42c:	e009      	b.n	800e442 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e42e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e432:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e434:	e005      	b.n	800e442 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e436:	2300      	movs	r3, #0
 800e438:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e43a:	2301      	movs	r3, #1
 800e43c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e440:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e444:	2b00      	cmp	r3, #0
 800e446:	f000 80e7 	beq.w	800e618 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e44a:	697b      	ldr	r3, [r7, #20]
 800e44c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e44e:	4a19      	ldr	r2, [pc, #100]	; (800e4b4 <UART_SetConfig+0x930>)
 800e450:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e454:	461a      	mov	r2, r3
 800e456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e458:	fbb3 f3f2 	udiv	r3, r3, r2
 800e45c:	005a      	lsls	r2, r3, #1
 800e45e:	697b      	ldr	r3, [r7, #20]
 800e460:	685b      	ldr	r3, [r3, #4]
 800e462:	085b      	lsrs	r3, r3, #1
 800e464:	441a      	add	r2, r3
 800e466:	697b      	ldr	r3, [r7, #20]
 800e468:	685b      	ldr	r3, [r3, #4]
 800e46a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e46e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e472:	2b0f      	cmp	r3, #15
 800e474:	d916      	bls.n	800e4a4 <UART_SetConfig+0x920>
 800e476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e47c:	d212      	bcs.n	800e4a4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e480:	b29b      	uxth	r3, r3
 800e482:	f023 030f 	bic.w	r3, r3, #15
 800e486:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e48a:	085b      	lsrs	r3, r3, #1
 800e48c:	b29b      	uxth	r3, r3
 800e48e:	f003 0307 	and.w	r3, r3, #7
 800e492:	b29a      	uxth	r2, r3
 800e494:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e496:	4313      	orrs	r3, r2
 800e498:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e4a0:	60da      	str	r2, [r3, #12]
 800e4a2:	e0b9      	b.n	800e618 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e4aa:	e0b5      	b.n	800e618 <UART_SetConfig+0xa94>
 800e4ac:	03d09000 	.word	0x03d09000
 800e4b0:	003d0900 	.word	0x003d0900
 800e4b4:	08013078 	.word	0x08013078
 800e4b8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e4bc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e4c0:	2b20      	cmp	r3, #32
 800e4c2:	dc49      	bgt.n	800e558 <UART_SetConfig+0x9d4>
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	db7c      	blt.n	800e5c2 <UART_SetConfig+0xa3e>
 800e4c8:	2b20      	cmp	r3, #32
 800e4ca:	d87a      	bhi.n	800e5c2 <UART_SetConfig+0xa3e>
 800e4cc:	a201      	add	r2, pc, #4	; (adr r2, 800e4d4 <UART_SetConfig+0x950>)
 800e4ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4d2:	bf00      	nop
 800e4d4:	0800e55f 	.word	0x0800e55f
 800e4d8:	0800e567 	.word	0x0800e567
 800e4dc:	0800e5c3 	.word	0x0800e5c3
 800e4e0:	0800e5c3 	.word	0x0800e5c3
 800e4e4:	0800e56f 	.word	0x0800e56f
 800e4e8:	0800e5c3 	.word	0x0800e5c3
 800e4ec:	0800e5c3 	.word	0x0800e5c3
 800e4f0:	0800e5c3 	.word	0x0800e5c3
 800e4f4:	0800e57f 	.word	0x0800e57f
 800e4f8:	0800e5c3 	.word	0x0800e5c3
 800e4fc:	0800e5c3 	.word	0x0800e5c3
 800e500:	0800e5c3 	.word	0x0800e5c3
 800e504:	0800e5c3 	.word	0x0800e5c3
 800e508:	0800e5c3 	.word	0x0800e5c3
 800e50c:	0800e5c3 	.word	0x0800e5c3
 800e510:	0800e5c3 	.word	0x0800e5c3
 800e514:	0800e58f 	.word	0x0800e58f
 800e518:	0800e5c3 	.word	0x0800e5c3
 800e51c:	0800e5c3 	.word	0x0800e5c3
 800e520:	0800e5c3 	.word	0x0800e5c3
 800e524:	0800e5c3 	.word	0x0800e5c3
 800e528:	0800e5c3 	.word	0x0800e5c3
 800e52c:	0800e5c3 	.word	0x0800e5c3
 800e530:	0800e5c3 	.word	0x0800e5c3
 800e534:	0800e5c3 	.word	0x0800e5c3
 800e538:	0800e5c3 	.word	0x0800e5c3
 800e53c:	0800e5c3 	.word	0x0800e5c3
 800e540:	0800e5c3 	.word	0x0800e5c3
 800e544:	0800e5c3 	.word	0x0800e5c3
 800e548:	0800e5c3 	.word	0x0800e5c3
 800e54c:	0800e5c3 	.word	0x0800e5c3
 800e550:	0800e5c3 	.word	0x0800e5c3
 800e554:	0800e5b5 	.word	0x0800e5b5
 800e558:	2b40      	cmp	r3, #64	; 0x40
 800e55a:	d02e      	beq.n	800e5ba <UART_SetConfig+0xa36>
 800e55c:	e031      	b.n	800e5c2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e55e:	f7fb ff21 	bl	800a3a4 <HAL_RCC_GetPCLK1Freq>
 800e562:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e564:	e033      	b.n	800e5ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e566:	f7fb ff33 	bl	800a3d0 <HAL_RCC_GetPCLK2Freq>
 800e56a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e56c:	e02f      	b.n	800e5ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e56e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e572:	4618      	mov	r0, r3
 800e574:	f7fd fb70 	bl	800bc58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e57a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e57c:	e027      	b.n	800e5ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e57e:	f107 0318 	add.w	r3, r7, #24
 800e582:	4618      	mov	r0, r3
 800e584:	f7fd fcbc 	bl	800bf00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e588:	69fb      	ldr	r3, [r7, #28]
 800e58a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e58c:	e01f      	b.n	800e5ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e58e:	4b2d      	ldr	r3, [pc, #180]	; (800e644 <UART_SetConfig+0xac0>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	f003 0320 	and.w	r3, r3, #32
 800e596:	2b00      	cmp	r3, #0
 800e598:	d009      	beq.n	800e5ae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e59a:	4b2a      	ldr	r3, [pc, #168]	; (800e644 <UART_SetConfig+0xac0>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	08db      	lsrs	r3, r3, #3
 800e5a0:	f003 0303 	and.w	r3, r3, #3
 800e5a4:	4a28      	ldr	r2, [pc, #160]	; (800e648 <UART_SetConfig+0xac4>)
 800e5a6:	fa22 f303 	lsr.w	r3, r2, r3
 800e5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e5ac:	e00f      	b.n	800e5ce <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e5ae:	4b26      	ldr	r3, [pc, #152]	; (800e648 <UART_SetConfig+0xac4>)
 800e5b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5b2:	e00c      	b.n	800e5ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e5b4:	4b25      	ldr	r3, [pc, #148]	; (800e64c <UART_SetConfig+0xac8>)
 800e5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5b8:	e009      	b.n	800e5ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e5ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e5be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5c0:	e005      	b.n	800e5ce <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e5cc:	bf00      	nop
    }

    if (pclk != 0U)
 800e5ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d021      	beq.n	800e618 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5d8:	4a1d      	ldr	r2, [pc, #116]	; (800e650 <UART_SetConfig+0xacc>)
 800e5da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e5de:	461a      	mov	r2, r3
 800e5e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5e2:	fbb3 f2f2 	udiv	r2, r3, r2
 800e5e6:	697b      	ldr	r3, [r7, #20]
 800e5e8:	685b      	ldr	r3, [r3, #4]
 800e5ea:	085b      	lsrs	r3, r3, #1
 800e5ec:	441a      	add	r2, r3
 800e5ee:	697b      	ldr	r3, [r7, #20]
 800e5f0:	685b      	ldr	r3, [r3, #4]
 800e5f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5f6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5fa:	2b0f      	cmp	r3, #15
 800e5fc:	d909      	bls.n	800e612 <UART_SetConfig+0xa8e>
 800e5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e604:	d205      	bcs.n	800e612 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e608:	b29a      	uxth	r2, r3
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	60da      	str	r2, [r3, #12]
 800e610:	e002      	b.n	800e618 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e612:	2301      	movs	r3, #1
 800e614:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e618:	697b      	ldr	r3, [r7, #20]
 800e61a:	2201      	movs	r2, #1
 800e61c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e620:	697b      	ldr	r3, [r7, #20]
 800e622:	2201      	movs	r2, #1
 800e624:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e628:	697b      	ldr	r3, [r7, #20]
 800e62a:	2200      	movs	r2, #0
 800e62c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e62e:	697b      	ldr	r3, [r7, #20]
 800e630:	2200      	movs	r2, #0
 800e632:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e634:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e638:	4618      	mov	r0, r3
 800e63a:	3748      	adds	r7, #72	; 0x48
 800e63c:	46bd      	mov	sp, r7
 800e63e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e642:	bf00      	nop
 800e644:	58024400 	.word	0x58024400
 800e648:	03d09000 	.word	0x03d09000
 800e64c:	003d0900 	.word	0x003d0900
 800e650:	08013078 	.word	0x08013078

0800e654 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e654:	b480      	push	{r7}
 800e656:	b083      	sub	sp, #12
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e660:	f003 0301 	and.w	r3, r3, #1
 800e664:	2b00      	cmp	r3, #0
 800e666:	d00a      	beq.n	800e67e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	685b      	ldr	r3, [r3, #4]
 800e66e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	430a      	orrs	r2, r1
 800e67c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e682:	f003 0302 	and.w	r3, r3, #2
 800e686:	2b00      	cmp	r3, #0
 800e688:	d00a      	beq.n	800e6a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	685b      	ldr	r3, [r3, #4]
 800e690:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	430a      	orrs	r2, r1
 800e69e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6a4:	f003 0304 	and.w	r3, r3, #4
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d00a      	beq.n	800e6c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	685b      	ldr	r3, [r3, #4]
 800e6b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	430a      	orrs	r2, r1
 800e6c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6c6:	f003 0308 	and.w	r3, r3, #8
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d00a      	beq.n	800e6e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	685b      	ldr	r3, [r3, #4]
 800e6d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	430a      	orrs	r2, r1
 800e6e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6e8:	f003 0310 	and.w	r3, r3, #16
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d00a      	beq.n	800e706 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	689b      	ldr	r3, [r3, #8]
 800e6f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	430a      	orrs	r2, r1
 800e704:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e70a:	f003 0320 	and.w	r3, r3, #32
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d00a      	beq.n	800e728 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	689b      	ldr	r3, [r3, #8]
 800e718:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	430a      	orrs	r2, r1
 800e726:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e72c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e730:	2b00      	cmp	r3, #0
 800e732:	d01a      	beq.n	800e76a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	685b      	ldr	r3, [r3, #4]
 800e73a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	430a      	orrs	r2, r1
 800e748:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e74e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e752:	d10a      	bne.n	800e76a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	685b      	ldr	r3, [r3, #4]
 800e75a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	430a      	orrs	r2, r1
 800e768:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e76e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e772:	2b00      	cmp	r3, #0
 800e774:	d00a      	beq.n	800e78c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	685b      	ldr	r3, [r3, #4]
 800e77c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	430a      	orrs	r2, r1
 800e78a:	605a      	str	r2, [r3, #4]
  }
}
 800e78c:	bf00      	nop
 800e78e:	370c      	adds	r7, #12
 800e790:	46bd      	mov	sp, r7
 800e792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e796:	4770      	bx	lr

0800e798 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b086      	sub	sp, #24
 800e79c:	af02      	add	r7, sp, #8
 800e79e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e7a8:	f7f3 feca 	bl	8002540 <HAL_GetTick>
 800e7ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	f003 0308 	and.w	r3, r3, #8
 800e7b8:	2b08      	cmp	r3, #8
 800e7ba:	d10e      	bne.n	800e7da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e7bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e7c0:	9300      	str	r3, [sp, #0]
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f000 f82f 	bl	800e82e <UART_WaitOnFlagUntilTimeout>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d001      	beq.n	800e7da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e7d6:	2303      	movs	r3, #3
 800e7d8:	e025      	b.n	800e826 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	f003 0304 	and.w	r3, r3, #4
 800e7e4:	2b04      	cmp	r3, #4
 800e7e6:	d10e      	bne.n	800e806 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e7e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e7ec:	9300      	str	r3, [sp, #0]
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	f000 f819 	bl	800e82e <UART_WaitOnFlagUntilTimeout>
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d001      	beq.n	800e806 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e802:	2303      	movs	r3, #3
 800e804:	e00f      	b.n	800e826 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	2220      	movs	r2, #32
 800e80a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	2220      	movs	r2, #32
 800e812:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	2200      	movs	r2, #0
 800e81a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2200      	movs	r2, #0
 800e820:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e824:	2300      	movs	r3, #0
}
 800e826:	4618      	mov	r0, r3
 800e828:	3710      	adds	r7, #16
 800e82a:	46bd      	mov	sp, r7
 800e82c:	bd80      	pop	{r7, pc}

0800e82e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e82e:	b580      	push	{r7, lr}
 800e830:	b09c      	sub	sp, #112	; 0x70
 800e832:	af00      	add	r7, sp, #0
 800e834:	60f8      	str	r0, [r7, #12]
 800e836:	60b9      	str	r1, [r7, #8]
 800e838:	603b      	str	r3, [r7, #0]
 800e83a:	4613      	mov	r3, r2
 800e83c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e83e:	e0a9      	b.n	800e994 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e840:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e842:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e846:	f000 80a5 	beq.w	800e994 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e84a:	f7f3 fe79 	bl	8002540 <HAL_GetTick>
 800e84e:	4602      	mov	r2, r0
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	1ad3      	subs	r3, r2, r3
 800e854:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e856:	429a      	cmp	r2, r3
 800e858:	d302      	bcc.n	800e860 <UART_WaitOnFlagUntilTimeout+0x32>
 800e85a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d140      	bne.n	800e8e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e868:	e853 3f00 	ldrex	r3, [r3]
 800e86c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e86e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e870:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e874:	667b      	str	r3, [r7, #100]	; 0x64
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	461a      	mov	r2, r3
 800e87c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e87e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e880:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e882:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e884:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e886:	e841 2300 	strex	r3, r2, [r1]
 800e88a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e88c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d1e6      	bne.n	800e860 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	3308      	adds	r3, #8
 800e898:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e89a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e89c:	e853 3f00 	ldrex	r3, [r3]
 800e8a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8a4:	f023 0301 	bic.w	r3, r3, #1
 800e8a8:	663b      	str	r3, [r7, #96]	; 0x60
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	3308      	adds	r3, #8
 800e8b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e8b2:	64ba      	str	r2, [r7, #72]	; 0x48
 800e8b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e8b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e8ba:	e841 2300 	strex	r3, r2, [r1]
 800e8be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e8c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d1e5      	bne.n	800e892 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	2220      	movs	r2, #32
 800e8ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	2220      	movs	r2, #32
 800e8d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	2200      	movs	r2, #0
 800e8da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e8de:	2303      	movs	r3, #3
 800e8e0:	e069      	b.n	800e9b6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	f003 0304 	and.w	r3, r3, #4
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d051      	beq.n	800e994 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	69db      	ldr	r3, [r3, #28]
 800e8f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e8fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e8fe:	d149      	bne.n	800e994 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e908:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e912:	e853 3f00 	ldrex	r3, [r3]
 800e916:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e91a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e91e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	461a      	mov	r2, r3
 800e926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e928:	637b      	str	r3, [r7, #52]	; 0x34
 800e92a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e92c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e92e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e930:	e841 2300 	strex	r3, r2, [r1]
 800e934:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d1e6      	bne.n	800e90a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	3308      	adds	r3, #8
 800e942:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e944:	697b      	ldr	r3, [r7, #20]
 800e946:	e853 3f00 	ldrex	r3, [r3]
 800e94a:	613b      	str	r3, [r7, #16]
   return(result);
 800e94c:	693b      	ldr	r3, [r7, #16]
 800e94e:	f023 0301 	bic.w	r3, r3, #1
 800e952:	66bb      	str	r3, [r7, #104]	; 0x68
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	3308      	adds	r3, #8
 800e95a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e95c:	623a      	str	r2, [r7, #32]
 800e95e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e960:	69f9      	ldr	r1, [r7, #28]
 800e962:	6a3a      	ldr	r2, [r7, #32]
 800e964:	e841 2300 	strex	r3, r2, [r1]
 800e968:	61bb      	str	r3, [r7, #24]
   return(result);
 800e96a:	69bb      	ldr	r3, [r7, #24]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d1e5      	bne.n	800e93c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	2220      	movs	r2, #32
 800e974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	2220      	movs	r2, #32
 800e97c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	2220      	movs	r2, #32
 800e984:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	2200      	movs	r2, #0
 800e98c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e990:	2303      	movs	r3, #3
 800e992:	e010      	b.n	800e9b6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	69da      	ldr	r2, [r3, #28]
 800e99a:	68bb      	ldr	r3, [r7, #8]
 800e99c:	4013      	ands	r3, r2
 800e99e:	68ba      	ldr	r2, [r7, #8]
 800e9a0:	429a      	cmp	r2, r3
 800e9a2:	bf0c      	ite	eq
 800e9a4:	2301      	moveq	r3, #1
 800e9a6:	2300      	movne	r3, #0
 800e9a8:	b2db      	uxtb	r3, r3
 800e9aa:	461a      	mov	r2, r3
 800e9ac:	79fb      	ldrb	r3, [r7, #7]
 800e9ae:	429a      	cmp	r2, r3
 800e9b0:	f43f af46 	beq.w	800e840 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e9b4:	2300      	movs	r3, #0
}
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	3770      	adds	r7, #112	; 0x70
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}

0800e9be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e9be:	b480      	push	{r7}
 800e9c0:	b085      	sub	sp, #20
 800e9c2:	af00      	add	r7, sp, #0
 800e9c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e9cc:	2b01      	cmp	r3, #1
 800e9ce:	d101      	bne.n	800e9d4 <HAL_UARTEx_DisableFifoMode+0x16>
 800e9d0:	2302      	movs	r3, #2
 800e9d2:	e027      	b.n	800ea24 <HAL_UARTEx_DisableFifoMode+0x66>
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2201      	movs	r2, #1
 800e9d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2224      	movs	r2, #36	; 0x24
 800e9e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	681a      	ldr	r2, [r3, #0]
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	f022 0201 	bic.w	r2, r2, #1
 800e9fa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ea02:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	2200      	movs	r2, #0
 800ea08:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	68fa      	ldr	r2, [r7, #12]
 800ea10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2220      	movs	r2, #32
 800ea16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ea22:	2300      	movs	r3, #0
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	3714      	adds	r7, #20
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2e:	4770      	bx	lr

0800ea30 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b084      	sub	sp, #16
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
 800ea38:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ea40:	2b01      	cmp	r3, #1
 800ea42:	d101      	bne.n	800ea48 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ea44:	2302      	movs	r3, #2
 800ea46:	e02d      	b.n	800eaa4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2224      	movs	r2, #36	; 0x24
 800ea54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	681a      	ldr	r2, [r3, #0]
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	f022 0201 	bic.w	r2, r2, #1
 800ea6e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	689b      	ldr	r3, [r3, #8]
 800ea76:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	683a      	ldr	r2, [r7, #0]
 800ea80:	430a      	orrs	r2, r1
 800ea82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ea84:	6878      	ldr	r0, [r7, #4]
 800ea86:	f000 f84f 	bl	800eb28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	68fa      	ldr	r2, [r7, #12]
 800ea90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2220      	movs	r2, #32
 800ea96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eaa2:	2300      	movs	r3, #0
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3710      	adds	r7, #16
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}

0800eaac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b084      	sub	sp, #16
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
 800eab4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eabc:	2b01      	cmp	r3, #1
 800eabe:	d101      	bne.n	800eac4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800eac0:	2302      	movs	r3, #2
 800eac2:	e02d      	b.n	800eb20 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2201      	movs	r2, #1
 800eac8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2224      	movs	r2, #36	; 0x24
 800ead0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	681a      	ldr	r2, [r3, #0]
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	f022 0201 	bic.w	r2, r2, #1
 800eaea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	689b      	ldr	r3, [r3, #8]
 800eaf2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	683a      	ldr	r2, [r7, #0]
 800eafc:	430a      	orrs	r2, r1
 800eafe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eb00:	6878      	ldr	r0, [r7, #4]
 800eb02:	f000 f811 	bl	800eb28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	68fa      	ldr	r2, [r7, #12]
 800eb0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2220      	movs	r2, #32
 800eb12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	2200      	movs	r2, #0
 800eb1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eb1e:	2300      	movs	r3, #0
}
 800eb20:	4618      	mov	r0, r3
 800eb22:	3710      	adds	r7, #16
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}

0800eb28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b085      	sub	sp, #20
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d108      	bne.n	800eb4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2201      	movs	r2, #1
 800eb3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2201      	movs	r2, #1
 800eb44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800eb48:	e031      	b.n	800ebae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800eb4a:	2310      	movs	r3, #16
 800eb4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800eb4e:	2310      	movs	r3, #16
 800eb50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	689b      	ldr	r3, [r3, #8]
 800eb58:	0e5b      	lsrs	r3, r3, #25
 800eb5a:	b2db      	uxtb	r3, r3
 800eb5c:	f003 0307 	and.w	r3, r3, #7
 800eb60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	689b      	ldr	r3, [r3, #8]
 800eb68:	0f5b      	lsrs	r3, r3, #29
 800eb6a:	b2db      	uxtb	r3, r3
 800eb6c:	f003 0307 	and.w	r3, r3, #7
 800eb70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eb72:	7bbb      	ldrb	r3, [r7, #14]
 800eb74:	7b3a      	ldrb	r2, [r7, #12]
 800eb76:	4911      	ldr	r1, [pc, #68]	; (800ebbc <UARTEx_SetNbDataToProcess+0x94>)
 800eb78:	5c8a      	ldrb	r2, [r1, r2]
 800eb7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800eb7e:	7b3a      	ldrb	r2, [r7, #12]
 800eb80:	490f      	ldr	r1, [pc, #60]	; (800ebc0 <UARTEx_SetNbDataToProcess+0x98>)
 800eb82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eb84:	fb93 f3f2 	sdiv	r3, r3, r2
 800eb88:	b29a      	uxth	r2, r3
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800eb90:	7bfb      	ldrb	r3, [r7, #15]
 800eb92:	7b7a      	ldrb	r2, [r7, #13]
 800eb94:	4909      	ldr	r1, [pc, #36]	; (800ebbc <UARTEx_SetNbDataToProcess+0x94>)
 800eb96:	5c8a      	ldrb	r2, [r1, r2]
 800eb98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800eb9c:	7b7a      	ldrb	r2, [r7, #13]
 800eb9e:	4908      	ldr	r1, [pc, #32]	; (800ebc0 <UARTEx_SetNbDataToProcess+0x98>)
 800eba0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800eba2:	fb93 f3f2 	sdiv	r3, r3, r2
 800eba6:	b29a      	uxth	r2, r3
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ebae:	bf00      	nop
 800ebb0:	3714      	adds	r7, #20
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb8:	4770      	bx	lr
 800ebba:	bf00      	nop
 800ebbc:	08013090 	.word	0x08013090
 800ebc0:	08013098 	.word	0x08013098

0800ebc4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ebc4:	b084      	sub	sp, #16
 800ebc6:	b580      	push	{r7, lr}
 800ebc8:	b084      	sub	sp, #16
 800ebca:	af00      	add	r7, sp, #0
 800ebcc:	6078      	str	r0, [r7, #4]
 800ebce:	f107 001c 	add.w	r0, r7, #28
 800ebd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ebd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd8:	2b01      	cmp	r3, #1
 800ebda:	d120      	bne.n	800ec1e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebe0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	68da      	ldr	r2, [r3, #12]
 800ebec:	4b2a      	ldr	r3, [pc, #168]	; (800ec98 <USB_CoreInit+0xd4>)
 800ebee:	4013      	ands	r3, r2
 800ebf0:	687a      	ldr	r2, [r7, #4]
 800ebf2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	68db      	ldr	r3, [r3, #12]
 800ebf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ec00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec02:	2b01      	cmp	r3, #1
 800ec04:	d105      	bne.n	800ec12 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	68db      	ldr	r3, [r3, #12]
 800ec0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ec12:	6878      	ldr	r0, [r7, #4]
 800ec14:	f001 fc04 	bl	8010420 <USB_CoreReset>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	73fb      	strb	r3, [r7, #15]
 800ec1c:	e01a      	b.n	800ec54 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	68db      	ldr	r3, [r3, #12]
 800ec22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ec2a:	6878      	ldr	r0, [r7, #4]
 800ec2c:	f001 fbf8 	bl	8010420 <USB_CoreReset>
 800ec30:	4603      	mov	r3, r0
 800ec32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ec34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d106      	bne.n	800ec48 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	639a      	str	r2, [r3, #56]	; 0x38
 800ec46:	e005      	b.n	800ec54 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ec54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec56:	2b01      	cmp	r3, #1
 800ec58:	d116      	bne.n	800ec88 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec5e:	b29a      	uxth	r2, r3
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ec68:	4b0c      	ldr	r3, [pc, #48]	; (800ec9c <USB_CoreInit+0xd8>)
 800ec6a:	4313      	orrs	r3, r2
 800ec6c:	687a      	ldr	r2, [r7, #4]
 800ec6e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	689b      	ldr	r3, [r3, #8]
 800ec74:	f043 0206 	orr.w	r2, r3, #6
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	689b      	ldr	r3, [r3, #8]
 800ec80:	f043 0220 	orr.w	r2, r3, #32
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ec88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	3710      	adds	r7, #16
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ec94:	b004      	add	sp, #16
 800ec96:	4770      	bx	lr
 800ec98:	ffbdffbf 	.word	0xffbdffbf
 800ec9c:	03ee0000 	.word	0x03ee0000

0800eca0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800eca0:	b480      	push	{r7}
 800eca2:	b087      	sub	sp, #28
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	60f8      	str	r0, [r7, #12]
 800eca8:	60b9      	str	r1, [r7, #8]
 800ecaa:	4613      	mov	r3, r2
 800ecac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ecae:	79fb      	ldrb	r3, [r7, #7]
 800ecb0:	2b02      	cmp	r3, #2
 800ecb2:	d165      	bne.n	800ed80 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	4a41      	ldr	r2, [pc, #260]	; (800edbc <USB_SetTurnaroundTime+0x11c>)
 800ecb8:	4293      	cmp	r3, r2
 800ecba:	d906      	bls.n	800ecca <USB_SetTurnaroundTime+0x2a>
 800ecbc:	68bb      	ldr	r3, [r7, #8]
 800ecbe:	4a40      	ldr	r2, [pc, #256]	; (800edc0 <USB_SetTurnaroundTime+0x120>)
 800ecc0:	4293      	cmp	r3, r2
 800ecc2:	d202      	bcs.n	800ecca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ecc4:	230f      	movs	r3, #15
 800ecc6:	617b      	str	r3, [r7, #20]
 800ecc8:	e062      	b.n	800ed90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ecca:	68bb      	ldr	r3, [r7, #8]
 800eccc:	4a3c      	ldr	r2, [pc, #240]	; (800edc0 <USB_SetTurnaroundTime+0x120>)
 800ecce:	4293      	cmp	r3, r2
 800ecd0:	d306      	bcc.n	800ece0 <USB_SetTurnaroundTime+0x40>
 800ecd2:	68bb      	ldr	r3, [r7, #8]
 800ecd4:	4a3b      	ldr	r2, [pc, #236]	; (800edc4 <USB_SetTurnaroundTime+0x124>)
 800ecd6:	4293      	cmp	r3, r2
 800ecd8:	d202      	bcs.n	800ece0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ecda:	230e      	movs	r3, #14
 800ecdc:	617b      	str	r3, [r7, #20]
 800ecde:	e057      	b.n	800ed90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ece0:	68bb      	ldr	r3, [r7, #8]
 800ece2:	4a38      	ldr	r2, [pc, #224]	; (800edc4 <USB_SetTurnaroundTime+0x124>)
 800ece4:	4293      	cmp	r3, r2
 800ece6:	d306      	bcc.n	800ecf6 <USB_SetTurnaroundTime+0x56>
 800ece8:	68bb      	ldr	r3, [r7, #8]
 800ecea:	4a37      	ldr	r2, [pc, #220]	; (800edc8 <USB_SetTurnaroundTime+0x128>)
 800ecec:	4293      	cmp	r3, r2
 800ecee:	d202      	bcs.n	800ecf6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ecf0:	230d      	movs	r3, #13
 800ecf2:	617b      	str	r3, [r7, #20]
 800ecf4:	e04c      	b.n	800ed90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	4a33      	ldr	r2, [pc, #204]	; (800edc8 <USB_SetTurnaroundTime+0x128>)
 800ecfa:	4293      	cmp	r3, r2
 800ecfc:	d306      	bcc.n	800ed0c <USB_SetTurnaroundTime+0x6c>
 800ecfe:	68bb      	ldr	r3, [r7, #8]
 800ed00:	4a32      	ldr	r2, [pc, #200]	; (800edcc <USB_SetTurnaroundTime+0x12c>)
 800ed02:	4293      	cmp	r3, r2
 800ed04:	d802      	bhi.n	800ed0c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ed06:	230c      	movs	r3, #12
 800ed08:	617b      	str	r3, [r7, #20]
 800ed0a:	e041      	b.n	800ed90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ed0c:	68bb      	ldr	r3, [r7, #8]
 800ed0e:	4a2f      	ldr	r2, [pc, #188]	; (800edcc <USB_SetTurnaroundTime+0x12c>)
 800ed10:	4293      	cmp	r3, r2
 800ed12:	d906      	bls.n	800ed22 <USB_SetTurnaroundTime+0x82>
 800ed14:	68bb      	ldr	r3, [r7, #8]
 800ed16:	4a2e      	ldr	r2, [pc, #184]	; (800edd0 <USB_SetTurnaroundTime+0x130>)
 800ed18:	4293      	cmp	r3, r2
 800ed1a:	d802      	bhi.n	800ed22 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ed1c:	230b      	movs	r3, #11
 800ed1e:	617b      	str	r3, [r7, #20]
 800ed20:	e036      	b.n	800ed90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ed22:	68bb      	ldr	r3, [r7, #8]
 800ed24:	4a2a      	ldr	r2, [pc, #168]	; (800edd0 <USB_SetTurnaroundTime+0x130>)
 800ed26:	4293      	cmp	r3, r2
 800ed28:	d906      	bls.n	800ed38 <USB_SetTurnaroundTime+0x98>
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	4a29      	ldr	r2, [pc, #164]	; (800edd4 <USB_SetTurnaroundTime+0x134>)
 800ed2e:	4293      	cmp	r3, r2
 800ed30:	d802      	bhi.n	800ed38 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ed32:	230a      	movs	r3, #10
 800ed34:	617b      	str	r3, [r7, #20]
 800ed36:	e02b      	b.n	800ed90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ed38:	68bb      	ldr	r3, [r7, #8]
 800ed3a:	4a26      	ldr	r2, [pc, #152]	; (800edd4 <USB_SetTurnaroundTime+0x134>)
 800ed3c:	4293      	cmp	r3, r2
 800ed3e:	d906      	bls.n	800ed4e <USB_SetTurnaroundTime+0xae>
 800ed40:	68bb      	ldr	r3, [r7, #8]
 800ed42:	4a25      	ldr	r2, [pc, #148]	; (800edd8 <USB_SetTurnaroundTime+0x138>)
 800ed44:	4293      	cmp	r3, r2
 800ed46:	d202      	bcs.n	800ed4e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ed48:	2309      	movs	r3, #9
 800ed4a:	617b      	str	r3, [r7, #20]
 800ed4c:	e020      	b.n	800ed90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	4a21      	ldr	r2, [pc, #132]	; (800edd8 <USB_SetTurnaroundTime+0x138>)
 800ed52:	4293      	cmp	r3, r2
 800ed54:	d306      	bcc.n	800ed64 <USB_SetTurnaroundTime+0xc4>
 800ed56:	68bb      	ldr	r3, [r7, #8]
 800ed58:	4a20      	ldr	r2, [pc, #128]	; (800eddc <USB_SetTurnaroundTime+0x13c>)
 800ed5a:	4293      	cmp	r3, r2
 800ed5c:	d802      	bhi.n	800ed64 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ed5e:	2308      	movs	r3, #8
 800ed60:	617b      	str	r3, [r7, #20]
 800ed62:	e015      	b.n	800ed90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ed64:	68bb      	ldr	r3, [r7, #8]
 800ed66:	4a1d      	ldr	r2, [pc, #116]	; (800eddc <USB_SetTurnaroundTime+0x13c>)
 800ed68:	4293      	cmp	r3, r2
 800ed6a:	d906      	bls.n	800ed7a <USB_SetTurnaroundTime+0xda>
 800ed6c:	68bb      	ldr	r3, [r7, #8]
 800ed6e:	4a1c      	ldr	r2, [pc, #112]	; (800ede0 <USB_SetTurnaroundTime+0x140>)
 800ed70:	4293      	cmp	r3, r2
 800ed72:	d202      	bcs.n	800ed7a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ed74:	2307      	movs	r3, #7
 800ed76:	617b      	str	r3, [r7, #20]
 800ed78:	e00a      	b.n	800ed90 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ed7a:	2306      	movs	r3, #6
 800ed7c:	617b      	str	r3, [r7, #20]
 800ed7e:	e007      	b.n	800ed90 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ed80:	79fb      	ldrb	r3, [r7, #7]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d102      	bne.n	800ed8c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ed86:	2309      	movs	r3, #9
 800ed88:	617b      	str	r3, [r7, #20]
 800ed8a:	e001      	b.n	800ed90 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ed8c:	2309      	movs	r3, #9
 800ed8e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	68db      	ldr	r3, [r3, #12]
 800ed94:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	68da      	ldr	r2, [r3, #12]
 800eda0:	697b      	ldr	r3, [r7, #20]
 800eda2:	029b      	lsls	r3, r3, #10
 800eda4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800eda8:	431a      	orrs	r2, r3
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800edae:	2300      	movs	r3, #0
}
 800edb0:	4618      	mov	r0, r3
 800edb2:	371c      	adds	r7, #28
 800edb4:	46bd      	mov	sp, r7
 800edb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edba:	4770      	bx	lr
 800edbc:	00d8acbf 	.word	0x00d8acbf
 800edc0:	00e4e1c0 	.word	0x00e4e1c0
 800edc4:	00f42400 	.word	0x00f42400
 800edc8:	01067380 	.word	0x01067380
 800edcc:	011a499f 	.word	0x011a499f
 800edd0:	01312cff 	.word	0x01312cff
 800edd4:	014ca43f 	.word	0x014ca43f
 800edd8:	016e3600 	.word	0x016e3600
 800eddc:	01a6ab1f 	.word	0x01a6ab1f
 800ede0:	01e84800 	.word	0x01e84800

0800ede4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ede4:	b480      	push	{r7}
 800ede6:	b083      	sub	sp, #12
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	689b      	ldr	r3, [r3, #8]
 800edf0:	f043 0201 	orr.w	r2, r3, #1
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800edf8:	2300      	movs	r3, #0
}
 800edfa:	4618      	mov	r0, r3
 800edfc:	370c      	adds	r7, #12
 800edfe:	46bd      	mov	sp, r7
 800ee00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee04:	4770      	bx	lr

0800ee06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ee06:	b480      	push	{r7}
 800ee08:	b083      	sub	sp, #12
 800ee0a:	af00      	add	r7, sp, #0
 800ee0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	689b      	ldr	r3, [r3, #8]
 800ee12:	f023 0201 	bic.w	r2, r3, #1
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ee1a:	2300      	movs	r3, #0
}
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	370c      	adds	r7, #12
 800ee20:	46bd      	mov	sp, r7
 800ee22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee26:	4770      	bx	lr

0800ee28 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b084      	sub	sp, #16
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
 800ee30:	460b      	mov	r3, r1
 800ee32:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ee34:	2300      	movs	r3, #0
 800ee36:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	68db      	ldr	r3, [r3, #12]
 800ee3c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ee44:	78fb      	ldrb	r3, [r7, #3]
 800ee46:	2b01      	cmp	r3, #1
 800ee48:	d115      	bne.n	800ee76 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	68db      	ldr	r3, [r3, #12]
 800ee4e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ee56:	2001      	movs	r0, #1
 800ee58:	f7f3 fb7e 	bl	8002558 <HAL_Delay>
      ms++;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	3301      	adds	r3, #1
 800ee60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ee62:	6878      	ldr	r0, [r7, #4]
 800ee64:	f001 fa4b 	bl	80102fe <USB_GetMode>
 800ee68:	4603      	mov	r3, r0
 800ee6a:	2b01      	cmp	r3, #1
 800ee6c:	d01e      	beq.n	800eeac <USB_SetCurrentMode+0x84>
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	2b31      	cmp	r3, #49	; 0x31
 800ee72:	d9f0      	bls.n	800ee56 <USB_SetCurrentMode+0x2e>
 800ee74:	e01a      	b.n	800eeac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ee76:	78fb      	ldrb	r3, [r7, #3]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d115      	bne.n	800eea8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	68db      	ldr	r3, [r3, #12]
 800ee80:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ee88:	2001      	movs	r0, #1
 800ee8a:	f7f3 fb65 	bl	8002558 <HAL_Delay>
      ms++;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	3301      	adds	r3, #1
 800ee92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f001 fa32 	bl	80102fe <USB_GetMode>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d005      	beq.n	800eeac <USB_SetCurrentMode+0x84>
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	2b31      	cmp	r3, #49	; 0x31
 800eea4:	d9f0      	bls.n	800ee88 <USB_SetCurrentMode+0x60>
 800eea6:	e001      	b.n	800eeac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800eea8:	2301      	movs	r3, #1
 800eeaa:	e005      	b.n	800eeb8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	2b32      	cmp	r3, #50	; 0x32
 800eeb0:	d101      	bne.n	800eeb6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800eeb2:	2301      	movs	r3, #1
 800eeb4:	e000      	b.n	800eeb8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800eeb6:	2300      	movs	r3, #0
}
 800eeb8:	4618      	mov	r0, r3
 800eeba:	3710      	adds	r7, #16
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bd80      	pop	{r7, pc}

0800eec0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800eec0:	b084      	sub	sp, #16
 800eec2:	b580      	push	{r7, lr}
 800eec4:	b086      	sub	sp, #24
 800eec6:	af00      	add	r7, sp, #0
 800eec8:	6078      	str	r0, [r7, #4]
 800eeca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800eece:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800eed2:	2300      	movs	r3, #0
 800eed4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800eeda:	2300      	movs	r3, #0
 800eedc:	613b      	str	r3, [r7, #16]
 800eede:	e009      	b.n	800eef4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800eee0:	687a      	ldr	r2, [r7, #4]
 800eee2:	693b      	ldr	r3, [r7, #16]
 800eee4:	3340      	adds	r3, #64	; 0x40
 800eee6:	009b      	lsls	r3, r3, #2
 800eee8:	4413      	add	r3, r2
 800eeea:	2200      	movs	r2, #0
 800eeec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800eeee:	693b      	ldr	r3, [r7, #16]
 800eef0:	3301      	adds	r3, #1
 800eef2:	613b      	str	r3, [r7, #16]
 800eef4:	693b      	ldr	r3, [r7, #16]
 800eef6:	2b0e      	cmp	r3, #14
 800eef8:	d9f2      	bls.n	800eee0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800eefa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d11c      	bne.n	800ef3a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef06:	685b      	ldr	r3, [r3, #4]
 800ef08:	68fa      	ldr	r2, [r7, #12]
 800ef0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ef0e:	f043 0302 	orr.w	r3, r3, #2
 800ef12:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef18:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	601a      	str	r2, [r3, #0]
 800ef38:	e005      	b.n	800ef46 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef3e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ef4c:	461a      	mov	r2, r3
 800ef4e:	2300      	movs	r3, #0
 800ef50:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef58:	4619      	mov	r1, r3
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef60:	461a      	mov	r2, r3
 800ef62:	680b      	ldr	r3, [r1, #0]
 800ef64:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ef66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef68:	2b01      	cmp	r3, #1
 800ef6a:	d10c      	bne.n	800ef86 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ef6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d104      	bne.n	800ef7c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ef72:	2100      	movs	r1, #0
 800ef74:	6878      	ldr	r0, [r7, #4]
 800ef76:	f000 f965 	bl	800f244 <USB_SetDevSpeed>
 800ef7a:	e008      	b.n	800ef8e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ef7c:	2101      	movs	r1, #1
 800ef7e:	6878      	ldr	r0, [r7, #4]
 800ef80:	f000 f960 	bl	800f244 <USB_SetDevSpeed>
 800ef84:	e003      	b.n	800ef8e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ef86:	2103      	movs	r1, #3
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f000 f95b 	bl	800f244 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ef8e:	2110      	movs	r1, #16
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f000 f8f3 	bl	800f17c <USB_FlushTxFifo>
 800ef96:	4603      	mov	r3, r0
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d001      	beq.n	800efa0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ef9c:	2301      	movs	r3, #1
 800ef9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800efa0:	6878      	ldr	r0, [r7, #4]
 800efa2:	f000 f91f 	bl	800f1e4 <USB_FlushRxFifo>
 800efa6:	4603      	mov	r3, r0
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d001      	beq.n	800efb0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800efac:	2301      	movs	r3, #1
 800efae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efb6:	461a      	mov	r2, r3
 800efb8:	2300      	movs	r3, #0
 800efba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efc2:	461a      	mov	r2, r3
 800efc4:	2300      	movs	r3, #0
 800efc6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efce:	461a      	mov	r2, r3
 800efd0:	2300      	movs	r3, #0
 800efd2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800efd4:	2300      	movs	r3, #0
 800efd6:	613b      	str	r3, [r7, #16]
 800efd8:	e043      	b.n	800f062 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800efda:	693b      	ldr	r3, [r7, #16]
 800efdc:	015a      	lsls	r2, r3, #5
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	4413      	add	r3, r2
 800efe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800efec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eff0:	d118      	bne.n	800f024 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800eff2:	693b      	ldr	r3, [r7, #16]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d10a      	bne.n	800f00e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800eff8:	693b      	ldr	r3, [r7, #16]
 800effa:	015a      	lsls	r2, r3, #5
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	4413      	add	r3, r2
 800f000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f004:	461a      	mov	r2, r3
 800f006:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f00a:	6013      	str	r3, [r2, #0]
 800f00c:	e013      	b.n	800f036 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f00e:	693b      	ldr	r3, [r7, #16]
 800f010:	015a      	lsls	r2, r3, #5
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	4413      	add	r3, r2
 800f016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f01a:	461a      	mov	r2, r3
 800f01c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f020:	6013      	str	r3, [r2, #0]
 800f022:	e008      	b.n	800f036 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f024:	693b      	ldr	r3, [r7, #16]
 800f026:	015a      	lsls	r2, r3, #5
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	4413      	add	r3, r2
 800f02c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f030:	461a      	mov	r2, r3
 800f032:	2300      	movs	r3, #0
 800f034:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f036:	693b      	ldr	r3, [r7, #16]
 800f038:	015a      	lsls	r2, r3, #5
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	4413      	add	r3, r2
 800f03e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f042:	461a      	mov	r2, r3
 800f044:	2300      	movs	r3, #0
 800f046:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f048:	693b      	ldr	r3, [r7, #16]
 800f04a:	015a      	lsls	r2, r3, #5
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	4413      	add	r3, r2
 800f050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f054:	461a      	mov	r2, r3
 800f056:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f05a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f05c:	693b      	ldr	r3, [r7, #16]
 800f05e:	3301      	adds	r3, #1
 800f060:	613b      	str	r3, [r7, #16]
 800f062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f064:	693a      	ldr	r2, [r7, #16]
 800f066:	429a      	cmp	r2, r3
 800f068:	d3b7      	bcc.n	800efda <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f06a:	2300      	movs	r3, #0
 800f06c:	613b      	str	r3, [r7, #16]
 800f06e:	e043      	b.n	800f0f8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f070:	693b      	ldr	r3, [r7, #16]
 800f072:	015a      	lsls	r2, r3, #5
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	4413      	add	r3, r2
 800f078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f082:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f086:	d118      	bne.n	800f0ba <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800f088:	693b      	ldr	r3, [r7, #16]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d10a      	bne.n	800f0a4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f08e:	693b      	ldr	r3, [r7, #16]
 800f090:	015a      	lsls	r2, r3, #5
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	4413      	add	r3, r2
 800f096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f09a:	461a      	mov	r2, r3
 800f09c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f0a0:	6013      	str	r3, [r2, #0]
 800f0a2:	e013      	b.n	800f0cc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f0a4:	693b      	ldr	r3, [r7, #16]
 800f0a6:	015a      	lsls	r2, r3, #5
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	4413      	add	r3, r2
 800f0ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0b0:	461a      	mov	r2, r3
 800f0b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f0b6:	6013      	str	r3, [r2, #0]
 800f0b8:	e008      	b.n	800f0cc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f0ba:	693b      	ldr	r3, [r7, #16]
 800f0bc:	015a      	lsls	r2, r3, #5
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	4413      	add	r3, r2
 800f0c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0c6:	461a      	mov	r2, r3
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f0cc:	693b      	ldr	r3, [r7, #16]
 800f0ce:	015a      	lsls	r2, r3, #5
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	4413      	add	r3, r2
 800f0d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0d8:	461a      	mov	r2, r3
 800f0da:	2300      	movs	r3, #0
 800f0dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f0de:	693b      	ldr	r3, [r7, #16]
 800f0e0:	015a      	lsls	r2, r3, #5
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	4413      	add	r3, r2
 800f0e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0ea:	461a      	mov	r2, r3
 800f0ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f0f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f0f2:	693b      	ldr	r3, [r7, #16]
 800f0f4:	3301      	adds	r3, #1
 800f0f6:	613b      	str	r3, [r7, #16]
 800f0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0fa:	693a      	ldr	r2, [r7, #16]
 800f0fc:	429a      	cmp	r2, r3
 800f0fe:	d3b7      	bcc.n	800f070 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f106:	691b      	ldr	r3, [r3, #16]
 800f108:	68fa      	ldr	r2, [r7, #12]
 800f10a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f10e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f112:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2200      	movs	r2, #0
 800f118:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f120:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f124:	2b00      	cmp	r3, #0
 800f126:	d105      	bne.n	800f134 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	699b      	ldr	r3, [r3, #24]
 800f12c:	f043 0210 	orr.w	r2, r3, #16
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	699a      	ldr	r2, [r3, #24]
 800f138:	4b0e      	ldr	r3, [pc, #56]	; (800f174 <USB_DevInit+0x2b4>)
 800f13a:	4313      	orrs	r3, r2
 800f13c:	687a      	ldr	r2, [r7, #4]
 800f13e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f142:	2b00      	cmp	r3, #0
 800f144:	d005      	beq.n	800f152 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	699b      	ldr	r3, [r3, #24]
 800f14a:	f043 0208 	orr.w	r2, r3, #8
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f154:	2b01      	cmp	r3, #1
 800f156:	d105      	bne.n	800f164 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	699a      	ldr	r2, [r3, #24]
 800f15c:	4b06      	ldr	r3, [pc, #24]	; (800f178 <USB_DevInit+0x2b8>)
 800f15e:	4313      	orrs	r3, r2
 800f160:	687a      	ldr	r2, [r7, #4]
 800f162:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f164:	7dfb      	ldrb	r3, [r7, #23]
}
 800f166:	4618      	mov	r0, r3
 800f168:	3718      	adds	r7, #24
 800f16a:	46bd      	mov	sp, r7
 800f16c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f170:	b004      	add	sp, #16
 800f172:	4770      	bx	lr
 800f174:	803c3800 	.word	0x803c3800
 800f178:	40000004 	.word	0x40000004

0800f17c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f17c:	b480      	push	{r7}
 800f17e:	b085      	sub	sp, #20
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
 800f184:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f186:	2300      	movs	r3, #0
 800f188:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	3301      	adds	r3, #1
 800f18e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	4a13      	ldr	r2, [pc, #76]	; (800f1e0 <USB_FlushTxFifo+0x64>)
 800f194:	4293      	cmp	r3, r2
 800f196:	d901      	bls.n	800f19c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f198:	2303      	movs	r3, #3
 800f19a:	e01b      	b.n	800f1d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	691b      	ldr	r3, [r3, #16]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	daf2      	bge.n	800f18a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	019b      	lsls	r3, r3, #6
 800f1ac:	f043 0220 	orr.w	r2, r3, #32
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	3301      	adds	r3, #1
 800f1b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	4a08      	ldr	r2, [pc, #32]	; (800f1e0 <USB_FlushTxFifo+0x64>)
 800f1be:	4293      	cmp	r3, r2
 800f1c0:	d901      	bls.n	800f1c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800f1c2:	2303      	movs	r3, #3
 800f1c4:	e006      	b.n	800f1d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	691b      	ldr	r3, [r3, #16]
 800f1ca:	f003 0320 	and.w	r3, r3, #32
 800f1ce:	2b20      	cmp	r3, #32
 800f1d0:	d0f0      	beq.n	800f1b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800f1d2:	2300      	movs	r3, #0
}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3714      	adds	r7, #20
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1de:	4770      	bx	lr
 800f1e0:	00030d40 	.word	0x00030d40

0800f1e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f1e4:	b480      	push	{r7}
 800f1e6:	b085      	sub	sp, #20
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	3301      	adds	r3, #1
 800f1f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	4a11      	ldr	r2, [pc, #68]	; (800f240 <USB_FlushRxFifo+0x5c>)
 800f1fa:	4293      	cmp	r3, r2
 800f1fc:	d901      	bls.n	800f202 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800f1fe:	2303      	movs	r3, #3
 800f200:	e018      	b.n	800f234 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	691b      	ldr	r3, [r3, #16]
 800f206:	2b00      	cmp	r3, #0
 800f208:	daf2      	bge.n	800f1f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800f20a:	2300      	movs	r3, #0
 800f20c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	2210      	movs	r2, #16
 800f212:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	3301      	adds	r3, #1
 800f218:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	4a08      	ldr	r2, [pc, #32]	; (800f240 <USB_FlushRxFifo+0x5c>)
 800f21e:	4293      	cmp	r3, r2
 800f220:	d901      	bls.n	800f226 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800f222:	2303      	movs	r3, #3
 800f224:	e006      	b.n	800f234 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	691b      	ldr	r3, [r3, #16]
 800f22a:	f003 0310 	and.w	r3, r3, #16
 800f22e:	2b10      	cmp	r3, #16
 800f230:	d0f0      	beq.n	800f214 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800f232:	2300      	movs	r3, #0
}
 800f234:	4618      	mov	r0, r3
 800f236:	3714      	adds	r7, #20
 800f238:	46bd      	mov	sp, r7
 800f23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23e:	4770      	bx	lr
 800f240:	00030d40 	.word	0x00030d40

0800f244 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f244:	b480      	push	{r7}
 800f246:	b085      	sub	sp, #20
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
 800f24c:	460b      	mov	r3, r1
 800f24e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f25a:	681a      	ldr	r2, [r3, #0]
 800f25c:	78fb      	ldrb	r3, [r7, #3]
 800f25e:	68f9      	ldr	r1, [r7, #12]
 800f260:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f264:	4313      	orrs	r3, r2
 800f266:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f268:	2300      	movs	r3, #0
}
 800f26a:	4618      	mov	r0, r3
 800f26c:	3714      	adds	r7, #20
 800f26e:	46bd      	mov	sp, r7
 800f270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f274:	4770      	bx	lr

0800f276 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800f276:	b480      	push	{r7}
 800f278:	b087      	sub	sp, #28
 800f27a:	af00      	add	r7, sp, #0
 800f27c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f282:	693b      	ldr	r3, [r7, #16]
 800f284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f288:	689b      	ldr	r3, [r3, #8]
 800f28a:	f003 0306 	and.w	r3, r3, #6
 800f28e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d102      	bne.n	800f29c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800f296:	2300      	movs	r3, #0
 800f298:	75fb      	strb	r3, [r7, #23]
 800f29a:	e00a      	b.n	800f2b2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	2b02      	cmp	r3, #2
 800f2a0:	d002      	beq.n	800f2a8 <USB_GetDevSpeed+0x32>
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	2b06      	cmp	r3, #6
 800f2a6:	d102      	bne.n	800f2ae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800f2a8:	2302      	movs	r3, #2
 800f2aa:	75fb      	strb	r3, [r7, #23]
 800f2ac:	e001      	b.n	800f2b2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800f2ae:	230f      	movs	r3, #15
 800f2b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800f2b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	371c      	adds	r7, #28
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2be:	4770      	bx	lr

0800f2c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f2c0:	b480      	push	{r7}
 800f2c2:	b085      	sub	sp, #20
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
 800f2c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	781b      	ldrb	r3, [r3, #0]
 800f2d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	785b      	ldrb	r3, [r3, #1]
 800f2d8:	2b01      	cmp	r3, #1
 800f2da:	d139      	bne.n	800f350 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2e2:	69da      	ldr	r2, [r3, #28]
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	781b      	ldrb	r3, [r3, #0]
 800f2e8:	f003 030f 	and.w	r3, r3, #15
 800f2ec:	2101      	movs	r1, #1
 800f2ee:	fa01 f303 	lsl.w	r3, r1, r3
 800f2f2:	b29b      	uxth	r3, r3
 800f2f4:	68f9      	ldr	r1, [r7, #12]
 800f2f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f2fa:	4313      	orrs	r3, r2
 800f2fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f2fe:	68bb      	ldr	r3, [r7, #8]
 800f300:	015a      	lsls	r2, r3, #5
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	4413      	add	r3, r2
 800f306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f310:	2b00      	cmp	r3, #0
 800f312:	d153      	bne.n	800f3bc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	015a      	lsls	r2, r3, #5
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	4413      	add	r3, r2
 800f31c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f320:	681a      	ldr	r2, [r3, #0]
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	68db      	ldr	r3, [r3, #12]
 800f326:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	791b      	ldrb	r3, [r3, #4]
 800f32e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f330:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f332:	68bb      	ldr	r3, [r7, #8]
 800f334:	059b      	lsls	r3, r3, #22
 800f336:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f338:	431a      	orrs	r2, r3
 800f33a:	68bb      	ldr	r3, [r7, #8]
 800f33c:	0159      	lsls	r1, r3, #5
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	440b      	add	r3, r1
 800f342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f346:	4619      	mov	r1, r3
 800f348:	4b20      	ldr	r3, [pc, #128]	; (800f3cc <USB_ActivateEndpoint+0x10c>)
 800f34a:	4313      	orrs	r3, r2
 800f34c:	600b      	str	r3, [r1, #0]
 800f34e:	e035      	b.n	800f3bc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f356:	69da      	ldr	r2, [r3, #28]
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	781b      	ldrb	r3, [r3, #0]
 800f35c:	f003 030f 	and.w	r3, r3, #15
 800f360:	2101      	movs	r1, #1
 800f362:	fa01 f303 	lsl.w	r3, r1, r3
 800f366:	041b      	lsls	r3, r3, #16
 800f368:	68f9      	ldr	r1, [r7, #12]
 800f36a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f36e:	4313      	orrs	r3, r2
 800f370:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f372:	68bb      	ldr	r3, [r7, #8]
 800f374:	015a      	lsls	r2, r3, #5
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	4413      	add	r3, r2
 800f37a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f384:	2b00      	cmp	r3, #0
 800f386:	d119      	bne.n	800f3bc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f388:	68bb      	ldr	r3, [r7, #8]
 800f38a:	015a      	lsls	r2, r3, #5
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	4413      	add	r3, r2
 800f390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f394:	681a      	ldr	r2, [r3, #0]
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	68db      	ldr	r3, [r3, #12]
 800f39a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	791b      	ldrb	r3, [r3, #4]
 800f3a2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f3a4:	430b      	orrs	r3, r1
 800f3a6:	431a      	orrs	r2, r3
 800f3a8:	68bb      	ldr	r3, [r7, #8]
 800f3aa:	0159      	lsls	r1, r3, #5
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	440b      	add	r3, r1
 800f3b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3b4:	4619      	mov	r1, r3
 800f3b6:	4b05      	ldr	r3, [pc, #20]	; (800f3cc <USB_ActivateEndpoint+0x10c>)
 800f3b8:	4313      	orrs	r3, r2
 800f3ba:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f3bc:	2300      	movs	r3, #0
}
 800f3be:	4618      	mov	r0, r3
 800f3c0:	3714      	adds	r7, #20
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c8:	4770      	bx	lr
 800f3ca:	bf00      	nop
 800f3cc:	10008000 	.word	0x10008000

0800f3d0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f3d0:	b480      	push	{r7}
 800f3d2:	b085      	sub	sp, #20
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
 800f3d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	781b      	ldrb	r3, [r3, #0]
 800f3e2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	785b      	ldrb	r3, [r3, #1]
 800f3e8:	2b01      	cmp	r3, #1
 800f3ea:	d161      	bne.n	800f4b0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f3ec:	68bb      	ldr	r3, [r7, #8]
 800f3ee:	015a      	lsls	r2, r3, #5
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	4413      	add	r3, r2
 800f3f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f3fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f402:	d11f      	bne.n	800f444 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f404:	68bb      	ldr	r3, [r7, #8]
 800f406:	015a      	lsls	r2, r3, #5
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	4413      	add	r3, r2
 800f40c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	68ba      	ldr	r2, [r7, #8]
 800f414:	0151      	lsls	r1, r2, #5
 800f416:	68fa      	ldr	r2, [r7, #12]
 800f418:	440a      	add	r2, r1
 800f41a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f41e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f422:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f424:	68bb      	ldr	r3, [r7, #8]
 800f426:	015a      	lsls	r2, r3, #5
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	4413      	add	r3, r2
 800f42c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	68ba      	ldr	r2, [r7, #8]
 800f434:	0151      	lsls	r1, r2, #5
 800f436:	68fa      	ldr	r2, [r7, #12]
 800f438:	440a      	add	r2, r1
 800f43a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f43e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f442:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f44a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	781b      	ldrb	r3, [r3, #0]
 800f450:	f003 030f 	and.w	r3, r3, #15
 800f454:	2101      	movs	r1, #1
 800f456:	fa01 f303 	lsl.w	r3, r1, r3
 800f45a:	b29b      	uxth	r3, r3
 800f45c:	43db      	mvns	r3, r3
 800f45e:	68f9      	ldr	r1, [r7, #12]
 800f460:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f464:	4013      	ands	r3, r2
 800f466:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f46e:	69da      	ldr	r2, [r3, #28]
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	781b      	ldrb	r3, [r3, #0]
 800f474:	f003 030f 	and.w	r3, r3, #15
 800f478:	2101      	movs	r1, #1
 800f47a:	fa01 f303 	lsl.w	r3, r1, r3
 800f47e:	b29b      	uxth	r3, r3
 800f480:	43db      	mvns	r3, r3
 800f482:	68f9      	ldr	r1, [r7, #12]
 800f484:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f488:	4013      	ands	r3, r2
 800f48a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	015a      	lsls	r2, r3, #5
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	4413      	add	r3, r2
 800f494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f498:	681a      	ldr	r2, [r3, #0]
 800f49a:	68bb      	ldr	r3, [r7, #8]
 800f49c:	0159      	lsls	r1, r3, #5
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	440b      	add	r3, r1
 800f4a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4a6:	4619      	mov	r1, r3
 800f4a8:	4b35      	ldr	r3, [pc, #212]	; (800f580 <USB_DeactivateEndpoint+0x1b0>)
 800f4aa:	4013      	ands	r3, r2
 800f4ac:	600b      	str	r3, [r1, #0]
 800f4ae:	e060      	b.n	800f572 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	015a      	lsls	r2, r3, #5
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	4413      	add	r3, r2
 800f4b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f4c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f4c6:	d11f      	bne.n	800f508 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f4c8:	68bb      	ldr	r3, [r7, #8]
 800f4ca:	015a      	lsls	r2, r3, #5
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	4413      	add	r3, r2
 800f4d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	68ba      	ldr	r2, [r7, #8]
 800f4d8:	0151      	lsls	r1, r2, #5
 800f4da:	68fa      	ldr	r2, [r7, #12]
 800f4dc:	440a      	add	r2, r1
 800f4de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f4e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f4e6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	015a      	lsls	r2, r3, #5
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	4413      	add	r3, r2
 800f4f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	68ba      	ldr	r2, [r7, #8]
 800f4f8:	0151      	lsls	r1, r2, #5
 800f4fa:	68fa      	ldr	r2, [r7, #12]
 800f4fc:	440a      	add	r2, r1
 800f4fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f502:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f506:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f50e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	781b      	ldrb	r3, [r3, #0]
 800f514:	f003 030f 	and.w	r3, r3, #15
 800f518:	2101      	movs	r1, #1
 800f51a:	fa01 f303 	lsl.w	r3, r1, r3
 800f51e:	041b      	lsls	r3, r3, #16
 800f520:	43db      	mvns	r3, r3
 800f522:	68f9      	ldr	r1, [r7, #12]
 800f524:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f528:	4013      	ands	r3, r2
 800f52a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f532:	69da      	ldr	r2, [r3, #28]
 800f534:	683b      	ldr	r3, [r7, #0]
 800f536:	781b      	ldrb	r3, [r3, #0]
 800f538:	f003 030f 	and.w	r3, r3, #15
 800f53c:	2101      	movs	r1, #1
 800f53e:	fa01 f303 	lsl.w	r3, r1, r3
 800f542:	041b      	lsls	r3, r3, #16
 800f544:	43db      	mvns	r3, r3
 800f546:	68f9      	ldr	r1, [r7, #12]
 800f548:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f54c:	4013      	ands	r3, r2
 800f54e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	015a      	lsls	r2, r3, #5
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	4413      	add	r3, r2
 800f558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f55c:	681a      	ldr	r2, [r3, #0]
 800f55e:	68bb      	ldr	r3, [r7, #8]
 800f560:	0159      	lsls	r1, r3, #5
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	440b      	add	r3, r1
 800f566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f56a:	4619      	mov	r1, r3
 800f56c:	4b05      	ldr	r3, [pc, #20]	; (800f584 <USB_DeactivateEndpoint+0x1b4>)
 800f56e:	4013      	ands	r3, r2
 800f570:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f572:	2300      	movs	r3, #0
}
 800f574:	4618      	mov	r0, r3
 800f576:	3714      	adds	r7, #20
 800f578:	46bd      	mov	sp, r7
 800f57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57e:	4770      	bx	lr
 800f580:	ec337800 	.word	0xec337800
 800f584:	eff37800 	.word	0xeff37800

0800f588 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b08a      	sub	sp, #40	; 0x28
 800f58c:	af02      	add	r7, sp, #8
 800f58e:	60f8      	str	r0, [r7, #12]
 800f590:	60b9      	str	r1, [r7, #8]
 800f592:	4613      	mov	r3, r2
 800f594:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	781b      	ldrb	r3, [r3, #0]
 800f59e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f5a0:	68bb      	ldr	r3, [r7, #8]
 800f5a2:	785b      	ldrb	r3, [r3, #1]
 800f5a4:	2b01      	cmp	r3, #1
 800f5a6:	f040 8163 	bne.w	800f870 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f5aa:	68bb      	ldr	r3, [r7, #8]
 800f5ac:	699b      	ldr	r3, [r3, #24]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d132      	bne.n	800f618 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f5b2:	69bb      	ldr	r3, [r7, #24]
 800f5b4:	015a      	lsls	r2, r3, #5
 800f5b6:	69fb      	ldr	r3, [r7, #28]
 800f5b8:	4413      	add	r3, r2
 800f5ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5be:	691a      	ldr	r2, [r3, #16]
 800f5c0:	69bb      	ldr	r3, [r7, #24]
 800f5c2:	0159      	lsls	r1, r3, #5
 800f5c4:	69fb      	ldr	r3, [r7, #28]
 800f5c6:	440b      	add	r3, r1
 800f5c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5cc:	4619      	mov	r1, r3
 800f5ce:	4ba5      	ldr	r3, [pc, #660]	; (800f864 <USB_EPStartXfer+0x2dc>)
 800f5d0:	4013      	ands	r3, r2
 800f5d2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f5d4:	69bb      	ldr	r3, [r7, #24]
 800f5d6:	015a      	lsls	r2, r3, #5
 800f5d8:	69fb      	ldr	r3, [r7, #28]
 800f5da:	4413      	add	r3, r2
 800f5dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5e0:	691b      	ldr	r3, [r3, #16]
 800f5e2:	69ba      	ldr	r2, [r7, #24]
 800f5e4:	0151      	lsls	r1, r2, #5
 800f5e6:	69fa      	ldr	r2, [r7, #28]
 800f5e8:	440a      	add	r2, r1
 800f5ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f5f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f5f4:	69bb      	ldr	r3, [r7, #24]
 800f5f6:	015a      	lsls	r2, r3, #5
 800f5f8:	69fb      	ldr	r3, [r7, #28]
 800f5fa:	4413      	add	r3, r2
 800f5fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f600:	691a      	ldr	r2, [r3, #16]
 800f602:	69bb      	ldr	r3, [r7, #24]
 800f604:	0159      	lsls	r1, r3, #5
 800f606:	69fb      	ldr	r3, [r7, #28]
 800f608:	440b      	add	r3, r1
 800f60a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f60e:	4619      	mov	r1, r3
 800f610:	4b95      	ldr	r3, [pc, #596]	; (800f868 <USB_EPStartXfer+0x2e0>)
 800f612:	4013      	ands	r3, r2
 800f614:	610b      	str	r3, [r1, #16]
 800f616:	e074      	b.n	800f702 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f618:	69bb      	ldr	r3, [r7, #24]
 800f61a:	015a      	lsls	r2, r3, #5
 800f61c:	69fb      	ldr	r3, [r7, #28]
 800f61e:	4413      	add	r3, r2
 800f620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f624:	691a      	ldr	r2, [r3, #16]
 800f626:	69bb      	ldr	r3, [r7, #24]
 800f628:	0159      	lsls	r1, r3, #5
 800f62a:	69fb      	ldr	r3, [r7, #28]
 800f62c:	440b      	add	r3, r1
 800f62e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f632:	4619      	mov	r1, r3
 800f634:	4b8c      	ldr	r3, [pc, #560]	; (800f868 <USB_EPStartXfer+0x2e0>)
 800f636:	4013      	ands	r3, r2
 800f638:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f63a:	69bb      	ldr	r3, [r7, #24]
 800f63c:	015a      	lsls	r2, r3, #5
 800f63e:	69fb      	ldr	r3, [r7, #28]
 800f640:	4413      	add	r3, r2
 800f642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f646:	691a      	ldr	r2, [r3, #16]
 800f648:	69bb      	ldr	r3, [r7, #24]
 800f64a:	0159      	lsls	r1, r3, #5
 800f64c:	69fb      	ldr	r3, [r7, #28]
 800f64e:	440b      	add	r3, r1
 800f650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f654:	4619      	mov	r1, r3
 800f656:	4b83      	ldr	r3, [pc, #524]	; (800f864 <USB_EPStartXfer+0x2dc>)
 800f658:	4013      	ands	r3, r2
 800f65a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f65c:	69bb      	ldr	r3, [r7, #24]
 800f65e:	015a      	lsls	r2, r3, #5
 800f660:	69fb      	ldr	r3, [r7, #28]
 800f662:	4413      	add	r3, r2
 800f664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f668:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f66a:	68bb      	ldr	r3, [r7, #8]
 800f66c:	6999      	ldr	r1, [r3, #24]
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	68db      	ldr	r3, [r3, #12]
 800f672:	440b      	add	r3, r1
 800f674:	1e59      	subs	r1, r3, #1
 800f676:	68bb      	ldr	r3, [r7, #8]
 800f678:	68db      	ldr	r3, [r3, #12]
 800f67a:	fbb1 f3f3 	udiv	r3, r1, r3
 800f67e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f680:	4b7a      	ldr	r3, [pc, #488]	; (800f86c <USB_EPStartXfer+0x2e4>)
 800f682:	400b      	ands	r3, r1
 800f684:	69b9      	ldr	r1, [r7, #24]
 800f686:	0148      	lsls	r0, r1, #5
 800f688:	69f9      	ldr	r1, [r7, #28]
 800f68a:	4401      	add	r1, r0
 800f68c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f690:	4313      	orrs	r3, r2
 800f692:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f694:	69bb      	ldr	r3, [r7, #24]
 800f696:	015a      	lsls	r2, r3, #5
 800f698:	69fb      	ldr	r3, [r7, #28]
 800f69a:	4413      	add	r3, r2
 800f69c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6a0:	691a      	ldr	r2, [r3, #16]
 800f6a2:	68bb      	ldr	r3, [r7, #8]
 800f6a4:	699b      	ldr	r3, [r3, #24]
 800f6a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f6aa:	69b9      	ldr	r1, [r7, #24]
 800f6ac:	0148      	lsls	r0, r1, #5
 800f6ae:	69f9      	ldr	r1, [r7, #28]
 800f6b0:	4401      	add	r1, r0
 800f6b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f6b6:	4313      	orrs	r3, r2
 800f6b8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	791b      	ldrb	r3, [r3, #4]
 800f6be:	2b01      	cmp	r3, #1
 800f6c0:	d11f      	bne.n	800f702 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f6c2:	69bb      	ldr	r3, [r7, #24]
 800f6c4:	015a      	lsls	r2, r3, #5
 800f6c6:	69fb      	ldr	r3, [r7, #28]
 800f6c8:	4413      	add	r3, r2
 800f6ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6ce:	691b      	ldr	r3, [r3, #16]
 800f6d0:	69ba      	ldr	r2, [r7, #24]
 800f6d2:	0151      	lsls	r1, r2, #5
 800f6d4:	69fa      	ldr	r2, [r7, #28]
 800f6d6:	440a      	add	r2, r1
 800f6d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f6dc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f6e0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f6e2:	69bb      	ldr	r3, [r7, #24]
 800f6e4:	015a      	lsls	r2, r3, #5
 800f6e6:	69fb      	ldr	r3, [r7, #28]
 800f6e8:	4413      	add	r3, r2
 800f6ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6ee:	691b      	ldr	r3, [r3, #16]
 800f6f0:	69ba      	ldr	r2, [r7, #24]
 800f6f2:	0151      	lsls	r1, r2, #5
 800f6f4:	69fa      	ldr	r2, [r7, #28]
 800f6f6:	440a      	add	r2, r1
 800f6f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f6fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f700:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800f702:	79fb      	ldrb	r3, [r7, #7]
 800f704:	2b01      	cmp	r3, #1
 800f706:	d14b      	bne.n	800f7a0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	695b      	ldr	r3, [r3, #20]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d009      	beq.n	800f724 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f710:	69bb      	ldr	r3, [r7, #24]
 800f712:	015a      	lsls	r2, r3, #5
 800f714:	69fb      	ldr	r3, [r7, #28]
 800f716:	4413      	add	r3, r2
 800f718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f71c:	461a      	mov	r2, r3
 800f71e:	68bb      	ldr	r3, [r7, #8]
 800f720:	695b      	ldr	r3, [r3, #20]
 800f722:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f724:	68bb      	ldr	r3, [r7, #8]
 800f726:	791b      	ldrb	r3, [r3, #4]
 800f728:	2b01      	cmp	r3, #1
 800f72a:	d128      	bne.n	800f77e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f72c:	69fb      	ldr	r3, [r7, #28]
 800f72e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f732:	689b      	ldr	r3, [r3, #8]
 800f734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d110      	bne.n	800f75e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f73c:	69bb      	ldr	r3, [r7, #24]
 800f73e:	015a      	lsls	r2, r3, #5
 800f740:	69fb      	ldr	r3, [r7, #28]
 800f742:	4413      	add	r3, r2
 800f744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	69ba      	ldr	r2, [r7, #24]
 800f74c:	0151      	lsls	r1, r2, #5
 800f74e:	69fa      	ldr	r2, [r7, #28]
 800f750:	440a      	add	r2, r1
 800f752:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f756:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f75a:	6013      	str	r3, [r2, #0]
 800f75c:	e00f      	b.n	800f77e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f75e:	69bb      	ldr	r3, [r7, #24]
 800f760:	015a      	lsls	r2, r3, #5
 800f762:	69fb      	ldr	r3, [r7, #28]
 800f764:	4413      	add	r3, r2
 800f766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	69ba      	ldr	r2, [r7, #24]
 800f76e:	0151      	lsls	r1, r2, #5
 800f770:	69fa      	ldr	r2, [r7, #28]
 800f772:	440a      	add	r2, r1
 800f774:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f77c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f77e:	69bb      	ldr	r3, [r7, #24]
 800f780:	015a      	lsls	r2, r3, #5
 800f782:	69fb      	ldr	r3, [r7, #28]
 800f784:	4413      	add	r3, r2
 800f786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	69ba      	ldr	r2, [r7, #24]
 800f78e:	0151      	lsls	r1, r2, #5
 800f790:	69fa      	ldr	r2, [r7, #28]
 800f792:	440a      	add	r2, r1
 800f794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f798:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f79c:	6013      	str	r3, [r2, #0]
 800f79e:	e137      	b.n	800fa10 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f7a0:	69bb      	ldr	r3, [r7, #24]
 800f7a2:	015a      	lsls	r2, r3, #5
 800f7a4:	69fb      	ldr	r3, [r7, #28]
 800f7a6:	4413      	add	r3, r2
 800f7a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	69ba      	ldr	r2, [r7, #24]
 800f7b0:	0151      	lsls	r1, r2, #5
 800f7b2:	69fa      	ldr	r2, [r7, #28]
 800f7b4:	440a      	add	r2, r1
 800f7b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f7ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f7be:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f7c0:	68bb      	ldr	r3, [r7, #8]
 800f7c2:	791b      	ldrb	r3, [r3, #4]
 800f7c4:	2b01      	cmp	r3, #1
 800f7c6:	d015      	beq.n	800f7f4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f7c8:	68bb      	ldr	r3, [r7, #8]
 800f7ca:	699b      	ldr	r3, [r3, #24]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	f000 811f 	beq.w	800fa10 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f7d2:	69fb      	ldr	r3, [r7, #28]
 800f7d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f7da:	68bb      	ldr	r3, [r7, #8]
 800f7dc:	781b      	ldrb	r3, [r3, #0]
 800f7de:	f003 030f 	and.w	r3, r3, #15
 800f7e2:	2101      	movs	r1, #1
 800f7e4:	fa01 f303 	lsl.w	r3, r1, r3
 800f7e8:	69f9      	ldr	r1, [r7, #28]
 800f7ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f7ee:	4313      	orrs	r3, r2
 800f7f0:	634b      	str	r3, [r1, #52]	; 0x34
 800f7f2:	e10d      	b.n	800fa10 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f7f4:	69fb      	ldr	r3, [r7, #28]
 800f7f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7fa:	689b      	ldr	r3, [r3, #8]
 800f7fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f800:	2b00      	cmp	r3, #0
 800f802:	d110      	bne.n	800f826 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f804:	69bb      	ldr	r3, [r7, #24]
 800f806:	015a      	lsls	r2, r3, #5
 800f808:	69fb      	ldr	r3, [r7, #28]
 800f80a:	4413      	add	r3, r2
 800f80c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	69ba      	ldr	r2, [r7, #24]
 800f814:	0151      	lsls	r1, r2, #5
 800f816:	69fa      	ldr	r2, [r7, #28]
 800f818:	440a      	add	r2, r1
 800f81a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f81e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f822:	6013      	str	r3, [r2, #0]
 800f824:	e00f      	b.n	800f846 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f826:	69bb      	ldr	r3, [r7, #24]
 800f828:	015a      	lsls	r2, r3, #5
 800f82a:	69fb      	ldr	r3, [r7, #28]
 800f82c:	4413      	add	r3, r2
 800f82e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	69ba      	ldr	r2, [r7, #24]
 800f836:	0151      	lsls	r1, r2, #5
 800f838:	69fa      	ldr	r2, [r7, #28]
 800f83a:	440a      	add	r2, r1
 800f83c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f844:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f846:	68bb      	ldr	r3, [r7, #8]
 800f848:	6919      	ldr	r1, [r3, #16]
 800f84a:	68bb      	ldr	r3, [r7, #8]
 800f84c:	781a      	ldrb	r2, [r3, #0]
 800f84e:	68bb      	ldr	r3, [r7, #8]
 800f850:	699b      	ldr	r3, [r3, #24]
 800f852:	b298      	uxth	r0, r3
 800f854:	79fb      	ldrb	r3, [r7, #7]
 800f856:	9300      	str	r3, [sp, #0]
 800f858:	4603      	mov	r3, r0
 800f85a:	68f8      	ldr	r0, [r7, #12]
 800f85c:	f000 faea 	bl	800fe34 <USB_WritePacket>
 800f860:	e0d6      	b.n	800fa10 <USB_EPStartXfer+0x488>
 800f862:	bf00      	nop
 800f864:	e007ffff 	.word	0xe007ffff
 800f868:	fff80000 	.word	0xfff80000
 800f86c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f870:	69bb      	ldr	r3, [r7, #24]
 800f872:	015a      	lsls	r2, r3, #5
 800f874:	69fb      	ldr	r3, [r7, #28]
 800f876:	4413      	add	r3, r2
 800f878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f87c:	691a      	ldr	r2, [r3, #16]
 800f87e:	69bb      	ldr	r3, [r7, #24]
 800f880:	0159      	lsls	r1, r3, #5
 800f882:	69fb      	ldr	r3, [r7, #28]
 800f884:	440b      	add	r3, r1
 800f886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f88a:	4619      	mov	r1, r3
 800f88c:	4b63      	ldr	r3, [pc, #396]	; (800fa1c <USB_EPStartXfer+0x494>)
 800f88e:	4013      	ands	r3, r2
 800f890:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f892:	69bb      	ldr	r3, [r7, #24]
 800f894:	015a      	lsls	r2, r3, #5
 800f896:	69fb      	ldr	r3, [r7, #28]
 800f898:	4413      	add	r3, r2
 800f89a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f89e:	691a      	ldr	r2, [r3, #16]
 800f8a0:	69bb      	ldr	r3, [r7, #24]
 800f8a2:	0159      	lsls	r1, r3, #5
 800f8a4:	69fb      	ldr	r3, [r7, #28]
 800f8a6:	440b      	add	r3, r1
 800f8a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8ac:	4619      	mov	r1, r3
 800f8ae:	4b5c      	ldr	r3, [pc, #368]	; (800fa20 <USB_EPStartXfer+0x498>)
 800f8b0:	4013      	ands	r3, r2
 800f8b2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800f8b4:	68bb      	ldr	r3, [r7, #8]
 800f8b6:	699b      	ldr	r3, [r3, #24]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d123      	bne.n	800f904 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f8bc:	69bb      	ldr	r3, [r7, #24]
 800f8be:	015a      	lsls	r2, r3, #5
 800f8c0:	69fb      	ldr	r3, [r7, #28]
 800f8c2:	4413      	add	r3, r2
 800f8c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8c8:	691a      	ldr	r2, [r3, #16]
 800f8ca:	68bb      	ldr	r3, [r7, #8]
 800f8cc:	68db      	ldr	r3, [r3, #12]
 800f8ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f8d2:	69b9      	ldr	r1, [r7, #24]
 800f8d4:	0148      	lsls	r0, r1, #5
 800f8d6:	69f9      	ldr	r1, [r7, #28]
 800f8d8:	4401      	add	r1, r0
 800f8da:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f8de:	4313      	orrs	r3, r2
 800f8e0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f8e2:	69bb      	ldr	r3, [r7, #24]
 800f8e4:	015a      	lsls	r2, r3, #5
 800f8e6:	69fb      	ldr	r3, [r7, #28]
 800f8e8:	4413      	add	r3, r2
 800f8ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8ee:	691b      	ldr	r3, [r3, #16]
 800f8f0:	69ba      	ldr	r2, [r7, #24]
 800f8f2:	0151      	lsls	r1, r2, #5
 800f8f4:	69fa      	ldr	r2, [r7, #28]
 800f8f6:	440a      	add	r2, r1
 800f8f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f900:	6113      	str	r3, [r2, #16]
 800f902:	e037      	b.n	800f974 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f904:	68bb      	ldr	r3, [r7, #8]
 800f906:	699a      	ldr	r2, [r3, #24]
 800f908:	68bb      	ldr	r3, [r7, #8]
 800f90a:	68db      	ldr	r3, [r3, #12]
 800f90c:	4413      	add	r3, r2
 800f90e:	1e5a      	subs	r2, r3, #1
 800f910:	68bb      	ldr	r3, [r7, #8]
 800f912:	68db      	ldr	r3, [r3, #12]
 800f914:	fbb2 f3f3 	udiv	r3, r2, r3
 800f918:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800f91a:	68bb      	ldr	r3, [r7, #8]
 800f91c:	68db      	ldr	r3, [r3, #12]
 800f91e:	8afa      	ldrh	r2, [r7, #22]
 800f920:	fb03 f202 	mul.w	r2, r3, r2
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f928:	69bb      	ldr	r3, [r7, #24]
 800f92a:	015a      	lsls	r2, r3, #5
 800f92c:	69fb      	ldr	r3, [r7, #28]
 800f92e:	4413      	add	r3, r2
 800f930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f934:	691a      	ldr	r2, [r3, #16]
 800f936:	8afb      	ldrh	r3, [r7, #22]
 800f938:	04d9      	lsls	r1, r3, #19
 800f93a:	4b3a      	ldr	r3, [pc, #232]	; (800fa24 <USB_EPStartXfer+0x49c>)
 800f93c:	400b      	ands	r3, r1
 800f93e:	69b9      	ldr	r1, [r7, #24]
 800f940:	0148      	lsls	r0, r1, #5
 800f942:	69f9      	ldr	r1, [r7, #28]
 800f944:	4401      	add	r1, r0
 800f946:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f94a:	4313      	orrs	r3, r2
 800f94c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800f94e:	69bb      	ldr	r3, [r7, #24]
 800f950:	015a      	lsls	r2, r3, #5
 800f952:	69fb      	ldr	r3, [r7, #28]
 800f954:	4413      	add	r3, r2
 800f956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f95a:	691a      	ldr	r2, [r3, #16]
 800f95c:	68bb      	ldr	r3, [r7, #8]
 800f95e:	69db      	ldr	r3, [r3, #28]
 800f960:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f964:	69b9      	ldr	r1, [r7, #24]
 800f966:	0148      	lsls	r0, r1, #5
 800f968:	69f9      	ldr	r1, [r7, #28]
 800f96a:	4401      	add	r1, r0
 800f96c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f970:	4313      	orrs	r3, r2
 800f972:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f974:	79fb      	ldrb	r3, [r7, #7]
 800f976:	2b01      	cmp	r3, #1
 800f978:	d10d      	bne.n	800f996 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f97a:	68bb      	ldr	r3, [r7, #8]
 800f97c:	691b      	ldr	r3, [r3, #16]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d009      	beq.n	800f996 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f982:	68bb      	ldr	r3, [r7, #8]
 800f984:	6919      	ldr	r1, [r3, #16]
 800f986:	69bb      	ldr	r3, [r7, #24]
 800f988:	015a      	lsls	r2, r3, #5
 800f98a:	69fb      	ldr	r3, [r7, #28]
 800f98c:	4413      	add	r3, r2
 800f98e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f992:	460a      	mov	r2, r1
 800f994:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f996:	68bb      	ldr	r3, [r7, #8]
 800f998:	791b      	ldrb	r3, [r3, #4]
 800f99a:	2b01      	cmp	r3, #1
 800f99c:	d128      	bne.n	800f9f0 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f99e:	69fb      	ldr	r3, [r7, #28]
 800f9a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9a4:	689b      	ldr	r3, [r3, #8]
 800f9a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d110      	bne.n	800f9d0 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f9ae:	69bb      	ldr	r3, [r7, #24]
 800f9b0:	015a      	lsls	r2, r3, #5
 800f9b2:	69fb      	ldr	r3, [r7, #28]
 800f9b4:	4413      	add	r3, r2
 800f9b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	69ba      	ldr	r2, [r7, #24]
 800f9be:	0151      	lsls	r1, r2, #5
 800f9c0:	69fa      	ldr	r2, [r7, #28]
 800f9c2:	440a      	add	r2, r1
 800f9c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f9c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f9cc:	6013      	str	r3, [r2, #0]
 800f9ce:	e00f      	b.n	800f9f0 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f9d0:	69bb      	ldr	r3, [r7, #24]
 800f9d2:	015a      	lsls	r2, r3, #5
 800f9d4:	69fb      	ldr	r3, [r7, #28]
 800f9d6:	4413      	add	r3, r2
 800f9d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	69ba      	ldr	r2, [r7, #24]
 800f9e0:	0151      	lsls	r1, r2, #5
 800f9e2:	69fa      	ldr	r2, [r7, #28]
 800f9e4:	440a      	add	r2, r1
 800f9e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f9ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f9ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f9f0:	69bb      	ldr	r3, [r7, #24]
 800f9f2:	015a      	lsls	r2, r3, #5
 800f9f4:	69fb      	ldr	r3, [r7, #28]
 800f9f6:	4413      	add	r3, r2
 800f9f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	69ba      	ldr	r2, [r7, #24]
 800fa00:	0151      	lsls	r1, r2, #5
 800fa02:	69fa      	ldr	r2, [r7, #28]
 800fa04:	440a      	add	r2, r1
 800fa06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fa0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fa0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fa10:	2300      	movs	r3, #0
}
 800fa12:	4618      	mov	r0, r3
 800fa14:	3720      	adds	r7, #32
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd80      	pop	{r7, pc}
 800fa1a:	bf00      	nop
 800fa1c:	fff80000 	.word	0xfff80000
 800fa20:	e007ffff 	.word	0xe007ffff
 800fa24:	1ff80000 	.word	0x1ff80000

0800fa28 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800fa28:	b480      	push	{r7}
 800fa2a:	b087      	sub	sp, #28
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	60f8      	str	r0, [r7, #12]
 800fa30:	60b9      	str	r1, [r7, #8]
 800fa32:	4613      	mov	r3, r2
 800fa34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800fa3a:	68bb      	ldr	r3, [r7, #8]
 800fa3c:	781b      	ldrb	r3, [r3, #0]
 800fa3e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fa40:	68bb      	ldr	r3, [r7, #8]
 800fa42:	785b      	ldrb	r3, [r3, #1]
 800fa44:	2b01      	cmp	r3, #1
 800fa46:	f040 80ce 	bne.w	800fbe6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800fa4a:	68bb      	ldr	r3, [r7, #8]
 800fa4c:	699b      	ldr	r3, [r3, #24]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d132      	bne.n	800fab8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fa52:	693b      	ldr	r3, [r7, #16]
 800fa54:	015a      	lsls	r2, r3, #5
 800fa56:	697b      	ldr	r3, [r7, #20]
 800fa58:	4413      	add	r3, r2
 800fa5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa5e:	691a      	ldr	r2, [r3, #16]
 800fa60:	693b      	ldr	r3, [r7, #16]
 800fa62:	0159      	lsls	r1, r3, #5
 800fa64:	697b      	ldr	r3, [r7, #20]
 800fa66:	440b      	add	r3, r1
 800fa68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa6c:	4619      	mov	r1, r3
 800fa6e:	4b9a      	ldr	r3, [pc, #616]	; (800fcd8 <USB_EP0StartXfer+0x2b0>)
 800fa70:	4013      	ands	r3, r2
 800fa72:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fa74:	693b      	ldr	r3, [r7, #16]
 800fa76:	015a      	lsls	r2, r3, #5
 800fa78:	697b      	ldr	r3, [r7, #20]
 800fa7a:	4413      	add	r3, r2
 800fa7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa80:	691b      	ldr	r3, [r3, #16]
 800fa82:	693a      	ldr	r2, [r7, #16]
 800fa84:	0151      	lsls	r1, r2, #5
 800fa86:	697a      	ldr	r2, [r7, #20]
 800fa88:	440a      	add	r2, r1
 800fa8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fa92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fa94:	693b      	ldr	r3, [r7, #16]
 800fa96:	015a      	lsls	r2, r3, #5
 800fa98:	697b      	ldr	r3, [r7, #20]
 800fa9a:	4413      	add	r3, r2
 800fa9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800faa0:	691a      	ldr	r2, [r3, #16]
 800faa2:	693b      	ldr	r3, [r7, #16]
 800faa4:	0159      	lsls	r1, r3, #5
 800faa6:	697b      	ldr	r3, [r7, #20]
 800faa8:	440b      	add	r3, r1
 800faaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800faae:	4619      	mov	r1, r3
 800fab0:	4b8a      	ldr	r3, [pc, #552]	; (800fcdc <USB_EP0StartXfer+0x2b4>)
 800fab2:	4013      	ands	r3, r2
 800fab4:	610b      	str	r3, [r1, #16]
 800fab6:	e04e      	b.n	800fb56 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fab8:	693b      	ldr	r3, [r7, #16]
 800faba:	015a      	lsls	r2, r3, #5
 800fabc:	697b      	ldr	r3, [r7, #20]
 800fabe:	4413      	add	r3, r2
 800fac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fac4:	691a      	ldr	r2, [r3, #16]
 800fac6:	693b      	ldr	r3, [r7, #16]
 800fac8:	0159      	lsls	r1, r3, #5
 800faca:	697b      	ldr	r3, [r7, #20]
 800facc:	440b      	add	r3, r1
 800face:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fad2:	4619      	mov	r1, r3
 800fad4:	4b81      	ldr	r3, [pc, #516]	; (800fcdc <USB_EP0StartXfer+0x2b4>)
 800fad6:	4013      	ands	r3, r2
 800fad8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fada:	693b      	ldr	r3, [r7, #16]
 800fadc:	015a      	lsls	r2, r3, #5
 800fade:	697b      	ldr	r3, [r7, #20]
 800fae0:	4413      	add	r3, r2
 800fae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fae6:	691a      	ldr	r2, [r3, #16]
 800fae8:	693b      	ldr	r3, [r7, #16]
 800faea:	0159      	lsls	r1, r3, #5
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	440b      	add	r3, r1
 800faf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800faf4:	4619      	mov	r1, r3
 800faf6:	4b78      	ldr	r3, [pc, #480]	; (800fcd8 <USB_EP0StartXfer+0x2b0>)
 800faf8:	4013      	ands	r3, r2
 800fafa:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800fafc:	68bb      	ldr	r3, [r7, #8]
 800fafe:	699a      	ldr	r2, [r3, #24]
 800fb00:	68bb      	ldr	r3, [r7, #8]
 800fb02:	68db      	ldr	r3, [r3, #12]
 800fb04:	429a      	cmp	r2, r3
 800fb06:	d903      	bls.n	800fb10 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	68da      	ldr	r2, [r3, #12]
 800fb0c:	68bb      	ldr	r3, [r7, #8]
 800fb0e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fb10:	693b      	ldr	r3, [r7, #16]
 800fb12:	015a      	lsls	r2, r3, #5
 800fb14:	697b      	ldr	r3, [r7, #20]
 800fb16:	4413      	add	r3, r2
 800fb18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb1c:	691b      	ldr	r3, [r3, #16]
 800fb1e:	693a      	ldr	r2, [r7, #16]
 800fb20:	0151      	lsls	r1, r2, #5
 800fb22:	697a      	ldr	r2, [r7, #20]
 800fb24:	440a      	add	r2, r1
 800fb26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fb2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fb30:	693b      	ldr	r3, [r7, #16]
 800fb32:	015a      	lsls	r2, r3, #5
 800fb34:	697b      	ldr	r3, [r7, #20]
 800fb36:	4413      	add	r3, r2
 800fb38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb3c:	691a      	ldr	r2, [r3, #16]
 800fb3e:	68bb      	ldr	r3, [r7, #8]
 800fb40:	699b      	ldr	r3, [r3, #24]
 800fb42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fb46:	6939      	ldr	r1, [r7, #16]
 800fb48:	0148      	lsls	r0, r1, #5
 800fb4a:	6979      	ldr	r1, [r7, #20]
 800fb4c:	4401      	add	r1, r0
 800fb4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fb52:	4313      	orrs	r3, r2
 800fb54:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800fb56:	79fb      	ldrb	r3, [r7, #7]
 800fb58:	2b01      	cmp	r3, #1
 800fb5a:	d11e      	bne.n	800fb9a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800fb5c:	68bb      	ldr	r3, [r7, #8]
 800fb5e:	695b      	ldr	r3, [r3, #20]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d009      	beq.n	800fb78 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800fb64:	693b      	ldr	r3, [r7, #16]
 800fb66:	015a      	lsls	r2, r3, #5
 800fb68:	697b      	ldr	r3, [r7, #20]
 800fb6a:	4413      	add	r3, r2
 800fb6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb70:	461a      	mov	r2, r3
 800fb72:	68bb      	ldr	r3, [r7, #8]
 800fb74:	695b      	ldr	r3, [r3, #20]
 800fb76:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fb78:	693b      	ldr	r3, [r7, #16]
 800fb7a:	015a      	lsls	r2, r3, #5
 800fb7c:	697b      	ldr	r3, [r7, #20]
 800fb7e:	4413      	add	r3, r2
 800fb80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	693a      	ldr	r2, [r7, #16]
 800fb88:	0151      	lsls	r1, r2, #5
 800fb8a:	697a      	ldr	r2, [r7, #20]
 800fb8c:	440a      	add	r2, r1
 800fb8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fb96:	6013      	str	r3, [r2, #0]
 800fb98:	e097      	b.n	800fcca <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fb9a:	693b      	ldr	r3, [r7, #16]
 800fb9c:	015a      	lsls	r2, r3, #5
 800fb9e:	697b      	ldr	r3, [r7, #20]
 800fba0:	4413      	add	r3, r2
 800fba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	693a      	ldr	r2, [r7, #16]
 800fbaa:	0151      	lsls	r1, r2, #5
 800fbac:	697a      	ldr	r2, [r7, #20]
 800fbae:	440a      	add	r2, r1
 800fbb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fbb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fbb8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800fbba:	68bb      	ldr	r3, [r7, #8]
 800fbbc:	699b      	ldr	r3, [r3, #24]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	f000 8083 	beq.w	800fcca <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800fbc4:	697b      	ldr	r3, [r7, #20]
 800fbc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fbcc:	68bb      	ldr	r3, [r7, #8]
 800fbce:	781b      	ldrb	r3, [r3, #0]
 800fbd0:	f003 030f 	and.w	r3, r3, #15
 800fbd4:	2101      	movs	r1, #1
 800fbd6:	fa01 f303 	lsl.w	r3, r1, r3
 800fbda:	6979      	ldr	r1, [r7, #20]
 800fbdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fbe0:	4313      	orrs	r3, r2
 800fbe2:	634b      	str	r3, [r1, #52]	; 0x34
 800fbe4:	e071      	b.n	800fcca <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fbe6:	693b      	ldr	r3, [r7, #16]
 800fbe8:	015a      	lsls	r2, r3, #5
 800fbea:	697b      	ldr	r3, [r7, #20]
 800fbec:	4413      	add	r3, r2
 800fbee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbf2:	691a      	ldr	r2, [r3, #16]
 800fbf4:	693b      	ldr	r3, [r7, #16]
 800fbf6:	0159      	lsls	r1, r3, #5
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	440b      	add	r3, r1
 800fbfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc00:	4619      	mov	r1, r3
 800fc02:	4b36      	ldr	r3, [pc, #216]	; (800fcdc <USB_EP0StartXfer+0x2b4>)
 800fc04:	4013      	ands	r3, r2
 800fc06:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800fc08:	693b      	ldr	r3, [r7, #16]
 800fc0a:	015a      	lsls	r2, r3, #5
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	4413      	add	r3, r2
 800fc10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc14:	691a      	ldr	r2, [r3, #16]
 800fc16:	693b      	ldr	r3, [r7, #16]
 800fc18:	0159      	lsls	r1, r3, #5
 800fc1a:	697b      	ldr	r3, [r7, #20]
 800fc1c:	440b      	add	r3, r1
 800fc1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc22:	4619      	mov	r1, r3
 800fc24:	4b2c      	ldr	r3, [pc, #176]	; (800fcd8 <USB_EP0StartXfer+0x2b0>)
 800fc26:	4013      	ands	r3, r2
 800fc28:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800fc2a:	68bb      	ldr	r3, [r7, #8]
 800fc2c:	699b      	ldr	r3, [r3, #24]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d003      	beq.n	800fc3a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800fc32:	68bb      	ldr	r3, [r7, #8]
 800fc34:	68da      	ldr	r2, [r3, #12]
 800fc36:	68bb      	ldr	r3, [r7, #8]
 800fc38:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800fc3a:	68bb      	ldr	r3, [r7, #8]
 800fc3c:	68da      	ldr	r2, [r3, #12]
 800fc3e:	68bb      	ldr	r3, [r7, #8]
 800fc40:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fc42:	693b      	ldr	r3, [r7, #16]
 800fc44:	015a      	lsls	r2, r3, #5
 800fc46:	697b      	ldr	r3, [r7, #20]
 800fc48:	4413      	add	r3, r2
 800fc4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc4e:	691b      	ldr	r3, [r3, #16]
 800fc50:	693a      	ldr	r2, [r7, #16]
 800fc52:	0151      	lsls	r1, r2, #5
 800fc54:	697a      	ldr	r2, [r7, #20]
 800fc56:	440a      	add	r2, r1
 800fc58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fc60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800fc62:	693b      	ldr	r3, [r7, #16]
 800fc64:	015a      	lsls	r2, r3, #5
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	4413      	add	r3, r2
 800fc6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc6e:	691a      	ldr	r2, [r3, #16]
 800fc70:	68bb      	ldr	r3, [r7, #8]
 800fc72:	69db      	ldr	r3, [r3, #28]
 800fc74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fc78:	6939      	ldr	r1, [r7, #16]
 800fc7a:	0148      	lsls	r0, r1, #5
 800fc7c:	6979      	ldr	r1, [r7, #20]
 800fc7e:	4401      	add	r1, r0
 800fc80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fc84:	4313      	orrs	r3, r2
 800fc86:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800fc88:	79fb      	ldrb	r3, [r7, #7]
 800fc8a:	2b01      	cmp	r3, #1
 800fc8c:	d10d      	bne.n	800fcaa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800fc8e:	68bb      	ldr	r3, [r7, #8]
 800fc90:	691b      	ldr	r3, [r3, #16]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d009      	beq.n	800fcaa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800fc96:	68bb      	ldr	r3, [r7, #8]
 800fc98:	6919      	ldr	r1, [r3, #16]
 800fc9a:	693b      	ldr	r3, [r7, #16]
 800fc9c:	015a      	lsls	r2, r3, #5
 800fc9e:	697b      	ldr	r3, [r7, #20]
 800fca0:	4413      	add	r3, r2
 800fca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fca6:	460a      	mov	r2, r1
 800fca8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800fcaa:	693b      	ldr	r3, [r7, #16]
 800fcac:	015a      	lsls	r2, r3, #5
 800fcae:	697b      	ldr	r3, [r7, #20]
 800fcb0:	4413      	add	r3, r2
 800fcb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	693a      	ldr	r2, [r7, #16]
 800fcba:	0151      	lsls	r1, r2, #5
 800fcbc:	697a      	ldr	r2, [r7, #20]
 800fcbe:	440a      	add	r2, r1
 800fcc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fcc4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fcc8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fcca:	2300      	movs	r3, #0
}
 800fccc:	4618      	mov	r0, r3
 800fcce:	371c      	adds	r7, #28
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd6:	4770      	bx	lr
 800fcd8:	e007ffff 	.word	0xe007ffff
 800fcdc:	fff80000 	.word	0xfff80000

0800fce0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fce0:	b480      	push	{r7}
 800fce2:	b087      	sub	sp, #28
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
 800fce8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800fcea:	2300      	movs	r3, #0
 800fcec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800fcee:	2300      	movs	r3, #0
 800fcf0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	785b      	ldrb	r3, [r3, #1]
 800fcfa:	2b01      	cmp	r3, #1
 800fcfc:	d14a      	bne.n	800fd94 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	781b      	ldrb	r3, [r3, #0]
 800fd02:	015a      	lsls	r2, r3, #5
 800fd04:	693b      	ldr	r3, [r7, #16]
 800fd06:	4413      	add	r3, r2
 800fd08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fd12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fd16:	f040 8086 	bne.w	800fe26 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800fd1a:	683b      	ldr	r3, [r7, #0]
 800fd1c:	781b      	ldrb	r3, [r3, #0]
 800fd1e:	015a      	lsls	r2, r3, #5
 800fd20:	693b      	ldr	r3, [r7, #16]
 800fd22:	4413      	add	r3, r2
 800fd24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	683a      	ldr	r2, [r7, #0]
 800fd2c:	7812      	ldrb	r2, [r2, #0]
 800fd2e:	0151      	lsls	r1, r2, #5
 800fd30:	693a      	ldr	r2, [r7, #16]
 800fd32:	440a      	add	r2, r1
 800fd34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fd3c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800fd3e:	683b      	ldr	r3, [r7, #0]
 800fd40:	781b      	ldrb	r3, [r3, #0]
 800fd42:	015a      	lsls	r2, r3, #5
 800fd44:	693b      	ldr	r3, [r7, #16]
 800fd46:	4413      	add	r3, r2
 800fd48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	683a      	ldr	r2, [r7, #0]
 800fd50:	7812      	ldrb	r2, [r2, #0]
 800fd52:	0151      	lsls	r1, r2, #5
 800fd54:	693a      	ldr	r2, [r7, #16]
 800fd56:	440a      	add	r2, r1
 800fd58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fd60:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	3301      	adds	r3, #1
 800fd66:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	f242 7210 	movw	r2, #10000	; 0x2710
 800fd6e:	4293      	cmp	r3, r2
 800fd70:	d902      	bls.n	800fd78 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800fd72:	2301      	movs	r3, #1
 800fd74:	75fb      	strb	r3, [r7, #23]
          break;
 800fd76:	e056      	b.n	800fe26 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800fd78:	683b      	ldr	r3, [r7, #0]
 800fd7a:	781b      	ldrb	r3, [r3, #0]
 800fd7c:	015a      	lsls	r2, r3, #5
 800fd7e:	693b      	ldr	r3, [r7, #16]
 800fd80:	4413      	add	r3, r2
 800fd82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fd8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fd90:	d0e7      	beq.n	800fd62 <USB_EPStopXfer+0x82>
 800fd92:	e048      	b.n	800fe26 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fd94:	683b      	ldr	r3, [r7, #0]
 800fd96:	781b      	ldrb	r3, [r3, #0]
 800fd98:	015a      	lsls	r2, r3, #5
 800fd9a:	693b      	ldr	r3, [r7, #16]
 800fd9c:	4413      	add	r3, r2
 800fd9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fda8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fdac:	d13b      	bne.n	800fe26 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	781b      	ldrb	r3, [r3, #0]
 800fdb2:	015a      	lsls	r2, r3, #5
 800fdb4:	693b      	ldr	r3, [r7, #16]
 800fdb6:	4413      	add	r3, r2
 800fdb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	683a      	ldr	r2, [r7, #0]
 800fdc0:	7812      	ldrb	r2, [r2, #0]
 800fdc2:	0151      	lsls	r1, r2, #5
 800fdc4:	693a      	ldr	r2, [r7, #16]
 800fdc6:	440a      	add	r2, r1
 800fdc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fdcc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fdd0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800fdd2:	683b      	ldr	r3, [r7, #0]
 800fdd4:	781b      	ldrb	r3, [r3, #0]
 800fdd6:	015a      	lsls	r2, r3, #5
 800fdd8:	693b      	ldr	r3, [r7, #16]
 800fdda:	4413      	add	r3, r2
 800fddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	683a      	ldr	r2, [r7, #0]
 800fde4:	7812      	ldrb	r2, [r2, #0]
 800fde6:	0151      	lsls	r1, r2, #5
 800fde8:	693a      	ldr	r2, [r7, #16]
 800fdea:	440a      	add	r2, r1
 800fdec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fdf0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fdf4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	3301      	adds	r3, #1
 800fdfa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	f242 7210 	movw	r2, #10000	; 0x2710
 800fe02:	4293      	cmp	r3, r2
 800fe04:	d902      	bls.n	800fe0c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800fe06:	2301      	movs	r3, #1
 800fe08:	75fb      	strb	r3, [r7, #23]
          break;
 800fe0a:	e00c      	b.n	800fe26 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	781b      	ldrb	r3, [r3, #0]
 800fe10:	015a      	lsls	r2, r3, #5
 800fe12:	693b      	ldr	r3, [r7, #16]
 800fe14:	4413      	add	r3, r2
 800fe16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fe20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fe24:	d0e7      	beq.n	800fdf6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800fe26:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe28:	4618      	mov	r0, r3
 800fe2a:	371c      	adds	r7, #28
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe32:	4770      	bx	lr

0800fe34 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800fe34:	b480      	push	{r7}
 800fe36:	b089      	sub	sp, #36	; 0x24
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	60f8      	str	r0, [r7, #12]
 800fe3c:	60b9      	str	r1, [r7, #8]
 800fe3e:	4611      	mov	r1, r2
 800fe40:	461a      	mov	r2, r3
 800fe42:	460b      	mov	r3, r1
 800fe44:	71fb      	strb	r3, [r7, #7]
 800fe46:	4613      	mov	r3, r2
 800fe48:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800fe4e:	68bb      	ldr	r3, [r7, #8]
 800fe50:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800fe52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d123      	bne.n	800fea2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800fe5a:	88bb      	ldrh	r3, [r7, #4]
 800fe5c:	3303      	adds	r3, #3
 800fe5e:	089b      	lsrs	r3, r3, #2
 800fe60:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800fe62:	2300      	movs	r3, #0
 800fe64:	61bb      	str	r3, [r7, #24]
 800fe66:	e018      	b.n	800fe9a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800fe68:	79fb      	ldrb	r3, [r7, #7]
 800fe6a:	031a      	lsls	r2, r3, #12
 800fe6c:	697b      	ldr	r3, [r7, #20]
 800fe6e:	4413      	add	r3, r2
 800fe70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe74:	461a      	mov	r2, r3
 800fe76:	69fb      	ldr	r3, [r7, #28]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800fe7c:	69fb      	ldr	r3, [r7, #28]
 800fe7e:	3301      	adds	r3, #1
 800fe80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fe82:	69fb      	ldr	r3, [r7, #28]
 800fe84:	3301      	adds	r3, #1
 800fe86:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fe88:	69fb      	ldr	r3, [r7, #28]
 800fe8a:	3301      	adds	r3, #1
 800fe8c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fe8e:	69fb      	ldr	r3, [r7, #28]
 800fe90:	3301      	adds	r3, #1
 800fe92:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800fe94:	69bb      	ldr	r3, [r7, #24]
 800fe96:	3301      	adds	r3, #1
 800fe98:	61bb      	str	r3, [r7, #24]
 800fe9a:	69ba      	ldr	r2, [r7, #24]
 800fe9c:	693b      	ldr	r3, [r7, #16]
 800fe9e:	429a      	cmp	r2, r3
 800fea0:	d3e2      	bcc.n	800fe68 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800fea2:	2300      	movs	r3, #0
}
 800fea4:	4618      	mov	r0, r3
 800fea6:	3724      	adds	r7, #36	; 0x24
 800fea8:	46bd      	mov	sp, r7
 800feaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feae:	4770      	bx	lr

0800feb0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800feb0:	b480      	push	{r7}
 800feb2:	b08b      	sub	sp, #44	; 0x2c
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	60f8      	str	r0, [r7, #12]
 800feb8:	60b9      	str	r1, [r7, #8]
 800feba:	4613      	mov	r3, r2
 800febc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800fec2:	68bb      	ldr	r3, [r7, #8]
 800fec4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800fec6:	88fb      	ldrh	r3, [r7, #6]
 800fec8:	089b      	lsrs	r3, r3, #2
 800feca:	b29b      	uxth	r3, r3
 800fecc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800fece:	88fb      	ldrh	r3, [r7, #6]
 800fed0:	f003 0303 	and.w	r3, r3, #3
 800fed4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800fed6:	2300      	movs	r3, #0
 800fed8:	623b      	str	r3, [r7, #32]
 800feda:	e014      	b.n	800ff06 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800fedc:	69bb      	ldr	r3, [r7, #24]
 800fede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fee2:	681a      	ldr	r2, [r3, #0]
 800fee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fee6:	601a      	str	r2, [r3, #0]
    pDest++;
 800fee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feea:	3301      	adds	r3, #1
 800feec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800feee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fef0:	3301      	adds	r3, #1
 800fef2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800fef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fef6:	3301      	adds	r3, #1
 800fef8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800fefa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fefc:	3301      	adds	r3, #1
 800fefe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800ff00:	6a3b      	ldr	r3, [r7, #32]
 800ff02:	3301      	adds	r3, #1
 800ff04:	623b      	str	r3, [r7, #32]
 800ff06:	6a3a      	ldr	r2, [r7, #32]
 800ff08:	697b      	ldr	r3, [r7, #20]
 800ff0a:	429a      	cmp	r2, r3
 800ff0c:	d3e6      	bcc.n	800fedc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ff0e:	8bfb      	ldrh	r3, [r7, #30]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d01e      	beq.n	800ff52 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ff14:	2300      	movs	r3, #0
 800ff16:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ff18:	69bb      	ldr	r3, [r7, #24]
 800ff1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ff1e:	461a      	mov	r2, r3
 800ff20:	f107 0310 	add.w	r3, r7, #16
 800ff24:	6812      	ldr	r2, [r2, #0]
 800ff26:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ff28:	693a      	ldr	r2, [r7, #16]
 800ff2a:	6a3b      	ldr	r3, [r7, #32]
 800ff2c:	b2db      	uxtb	r3, r3
 800ff2e:	00db      	lsls	r3, r3, #3
 800ff30:	fa22 f303 	lsr.w	r3, r2, r3
 800ff34:	b2da      	uxtb	r2, r3
 800ff36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff38:	701a      	strb	r2, [r3, #0]
      i++;
 800ff3a:	6a3b      	ldr	r3, [r7, #32]
 800ff3c:	3301      	adds	r3, #1
 800ff3e:	623b      	str	r3, [r7, #32]
      pDest++;
 800ff40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff42:	3301      	adds	r3, #1
 800ff44:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800ff46:	8bfb      	ldrh	r3, [r7, #30]
 800ff48:	3b01      	subs	r3, #1
 800ff4a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ff4c:	8bfb      	ldrh	r3, [r7, #30]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d1ea      	bne.n	800ff28 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ff52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ff54:	4618      	mov	r0, r3
 800ff56:	372c      	adds	r7, #44	; 0x2c
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5e:	4770      	bx	lr

0800ff60 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ff60:	b480      	push	{r7}
 800ff62:	b085      	sub	sp, #20
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
 800ff68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ff6e:	683b      	ldr	r3, [r7, #0]
 800ff70:	781b      	ldrb	r3, [r3, #0]
 800ff72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ff74:	683b      	ldr	r3, [r7, #0]
 800ff76:	785b      	ldrb	r3, [r3, #1]
 800ff78:	2b01      	cmp	r3, #1
 800ff7a:	d12c      	bne.n	800ffd6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	015a      	lsls	r2, r3, #5
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	4413      	add	r3, r2
 800ff84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	db12      	blt.n	800ffb4 <USB_EPSetStall+0x54>
 800ff8e:	68bb      	ldr	r3, [r7, #8]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d00f      	beq.n	800ffb4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ff94:	68bb      	ldr	r3, [r7, #8]
 800ff96:	015a      	lsls	r2, r3, #5
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	4413      	add	r3, r2
 800ff9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	68ba      	ldr	r2, [r7, #8]
 800ffa4:	0151      	lsls	r1, r2, #5
 800ffa6:	68fa      	ldr	r2, [r7, #12]
 800ffa8:	440a      	add	r2, r1
 800ffaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ffae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ffb2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ffb4:	68bb      	ldr	r3, [r7, #8]
 800ffb6:	015a      	lsls	r2, r3, #5
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	4413      	add	r3, r2
 800ffbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	68ba      	ldr	r2, [r7, #8]
 800ffc4:	0151      	lsls	r1, r2, #5
 800ffc6:	68fa      	ldr	r2, [r7, #12]
 800ffc8:	440a      	add	r2, r1
 800ffca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ffce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ffd2:	6013      	str	r3, [r2, #0]
 800ffd4:	e02b      	b.n	801002e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	015a      	lsls	r2, r3, #5
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	4413      	add	r3, r2
 800ffde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	db12      	blt.n	801000e <USB_EPSetStall+0xae>
 800ffe8:	68bb      	ldr	r3, [r7, #8]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d00f      	beq.n	801000e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ffee:	68bb      	ldr	r3, [r7, #8]
 800fff0:	015a      	lsls	r2, r3, #5
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	4413      	add	r3, r2
 800fff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	68ba      	ldr	r2, [r7, #8]
 800fffe:	0151      	lsls	r1, r2, #5
 8010000:	68fa      	ldr	r2, [r7, #12]
 8010002:	440a      	add	r2, r1
 8010004:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010008:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801000c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801000e:	68bb      	ldr	r3, [r7, #8]
 8010010:	015a      	lsls	r2, r3, #5
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	4413      	add	r3, r2
 8010016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	68ba      	ldr	r2, [r7, #8]
 801001e:	0151      	lsls	r1, r2, #5
 8010020:	68fa      	ldr	r2, [r7, #12]
 8010022:	440a      	add	r2, r1
 8010024:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010028:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801002c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801002e:	2300      	movs	r3, #0
}
 8010030:	4618      	mov	r0, r3
 8010032:	3714      	adds	r7, #20
 8010034:	46bd      	mov	sp, r7
 8010036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003a:	4770      	bx	lr

0801003c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801003c:	b480      	push	{r7}
 801003e:	b085      	sub	sp, #20
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
 8010044:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801004a:	683b      	ldr	r3, [r7, #0]
 801004c:	781b      	ldrb	r3, [r3, #0]
 801004e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010050:	683b      	ldr	r3, [r7, #0]
 8010052:	785b      	ldrb	r3, [r3, #1]
 8010054:	2b01      	cmp	r3, #1
 8010056:	d128      	bne.n	80100aa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010058:	68bb      	ldr	r3, [r7, #8]
 801005a:	015a      	lsls	r2, r3, #5
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	4413      	add	r3, r2
 8010060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	68ba      	ldr	r2, [r7, #8]
 8010068:	0151      	lsls	r1, r2, #5
 801006a:	68fa      	ldr	r2, [r7, #12]
 801006c:	440a      	add	r2, r1
 801006e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010072:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010076:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	791b      	ldrb	r3, [r3, #4]
 801007c:	2b03      	cmp	r3, #3
 801007e:	d003      	beq.n	8010088 <USB_EPClearStall+0x4c>
 8010080:	683b      	ldr	r3, [r7, #0]
 8010082:	791b      	ldrb	r3, [r3, #4]
 8010084:	2b02      	cmp	r3, #2
 8010086:	d138      	bne.n	80100fa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010088:	68bb      	ldr	r3, [r7, #8]
 801008a:	015a      	lsls	r2, r3, #5
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	4413      	add	r3, r2
 8010090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	68ba      	ldr	r2, [r7, #8]
 8010098:	0151      	lsls	r1, r2, #5
 801009a:	68fa      	ldr	r2, [r7, #12]
 801009c:	440a      	add	r2, r1
 801009e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80100a6:	6013      	str	r3, [r2, #0]
 80100a8:	e027      	b.n	80100fa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80100aa:	68bb      	ldr	r3, [r7, #8]
 80100ac:	015a      	lsls	r2, r3, #5
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	4413      	add	r3, r2
 80100b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	68ba      	ldr	r2, [r7, #8]
 80100ba:	0151      	lsls	r1, r2, #5
 80100bc:	68fa      	ldr	r2, [r7, #12]
 80100be:	440a      	add	r2, r1
 80100c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80100c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80100c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	791b      	ldrb	r3, [r3, #4]
 80100ce:	2b03      	cmp	r3, #3
 80100d0:	d003      	beq.n	80100da <USB_EPClearStall+0x9e>
 80100d2:	683b      	ldr	r3, [r7, #0]
 80100d4:	791b      	ldrb	r3, [r3, #4]
 80100d6:	2b02      	cmp	r3, #2
 80100d8:	d10f      	bne.n	80100fa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80100da:	68bb      	ldr	r3, [r7, #8]
 80100dc:	015a      	lsls	r2, r3, #5
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	4413      	add	r3, r2
 80100e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	68ba      	ldr	r2, [r7, #8]
 80100ea:	0151      	lsls	r1, r2, #5
 80100ec:	68fa      	ldr	r2, [r7, #12]
 80100ee:	440a      	add	r2, r1
 80100f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80100f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80100f8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80100fa:	2300      	movs	r3, #0
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3714      	adds	r7, #20
 8010100:	46bd      	mov	sp, r7
 8010102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010106:	4770      	bx	lr

08010108 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010108:	b480      	push	{r7}
 801010a:	b085      	sub	sp, #20
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
 8010110:	460b      	mov	r3, r1
 8010112:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	68fa      	ldr	r2, [r7, #12]
 8010122:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010126:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801012a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010132:	681a      	ldr	r2, [r3, #0]
 8010134:	78fb      	ldrb	r3, [r7, #3]
 8010136:	011b      	lsls	r3, r3, #4
 8010138:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801013c:	68f9      	ldr	r1, [r7, #12]
 801013e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010142:	4313      	orrs	r3, r2
 8010144:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010146:	2300      	movs	r3, #0
}
 8010148:	4618      	mov	r0, r3
 801014a:	3714      	adds	r7, #20
 801014c:	46bd      	mov	sp, r7
 801014e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010152:	4770      	bx	lr

08010154 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010154:	b480      	push	{r7}
 8010156:	b085      	sub	sp, #20
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	68fa      	ldr	r2, [r7, #12]
 801016a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801016e:	f023 0303 	bic.w	r3, r3, #3
 8010172:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801017a:	685b      	ldr	r3, [r3, #4]
 801017c:	68fa      	ldr	r2, [r7, #12]
 801017e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010182:	f023 0302 	bic.w	r3, r3, #2
 8010186:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010188:	2300      	movs	r3, #0
}
 801018a:	4618      	mov	r0, r3
 801018c:	3714      	adds	r7, #20
 801018e:	46bd      	mov	sp, r7
 8010190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010194:	4770      	bx	lr

08010196 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010196:	b480      	push	{r7}
 8010198:	b085      	sub	sp, #20
 801019a:	af00      	add	r7, sp, #0
 801019c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	68fa      	ldr	r2, [r7, #12]
 80101ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80101b0:	f023 0303 	bic.w	r3, r3, #3
 80101b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101bc:	685b      	ldr	r3, [r3, #4]
 80101be:	68fa      	ldr	r2, [r7, #12]
 80101c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80101c4:	f043 0302 	orr.w	r3, r3, #2
 80101c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80101ca:	2300      	movs	r3, #0
}
 80101cc:	4618      	mov	r0, r3
 80101ce:	3714      	adds	r7, #20
 80101d0:	46bd      	mov	sp, r7
 80101d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d6:	4770      	bx	lr

080101d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80101d8:	b480      	push	{r7}
 80101da:	b085      	sub	sp, #20
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	695b      	ldr	r3, [r3, #20]
 80101e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	699b      	ldr	r3, [r3, #24]
 80101ea:	68fa      	ldr	r2, [r7, #12]
 80101ec:	4013      	ands	r3, r2
 80101ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80101f0:	68fb      	ldr	r3, [r7, #12]
}
 80101f2:	4618      	mov	r0, r3
 80101f4:	3714      	adds	r7, #20
 80101f6:	46bd      	mov	sp, r7
 80101f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fc:	4770      	bx	lr

080101fe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80101fe:	b480      	push	{r7}
 8010200:	b085      	sub	sp, #20
 8010202:	af00      	add	r7, sp, #0
 8010204:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010210:	699b      	ldr	r3, [r3, #24]
 8010212:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801021a:	69db      	ldr	r3, [r3, #28]
 801021c:	68ba      	ldr	r2, [r7, #8]
 801021e:	4013      	ands	r3, r2
 8010220:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010222:	68bb      	ldr	r3, [r7, #8]
 8010224:	0c1b      	lsrs	r3, r3, #16
}
 8010226:	4618      	mov	r0, r3
 8010228:	3714      	adds	r7, #20
 801022a:	46bd      	mov	sp, r7
 801022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010230:	4770      	bx	lr

08010232 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010232:	b480      	push	{r7}
 8010234:	b085      	sub	sp, #20
 8010236:	af00      	add	r7, sp, #0
 8010238:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010244:	699b      	ldr	r3, [r3, #24]
 8010246:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801024e:	69db      	ldr	r3, [r3, #28]
 8010250:	68ba      	ldr	r2, [r7, #8]
 8010252:	4013      	ands	r3, r2
 8010254:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010256:	68bb      	ldr	r3, [r7, #8]
 8010258:	b29b      	uxth	r3, r3
}
 801025a:	4618      	mov	r0, r3
 801025c:	3714      	adds	r7, #20
 801025e:	46bd      	mov	sp, r7
 8010260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010264:	4770      	bx	lr

08010266 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010266:	b480      	push	{r7}
 8010268:	b085      	sub	sp, #20
 801026a:	af00      	add	r7, sp, #0
 801026c:	6078      	str	r0, [r7, #4]
 801026e:	460b      	mov	r3, r1
 8010270:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010276:	78fb      	ldrb	r3, [r7, #3]
 8010278:	015a      	lsls	r2, r3, #5
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	4413      	add	r3, r2
 801027e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010282:	689b      	ldr	r3, [r3, #8]
 8010284:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801028c:	695b      	ldr	r3, [r3, #20]
 801028e:	68ba      	ldr	r2, [r7, #8]
 8010290:	4013      	ands	r3, r2
 8010292:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010294:	68bb      	ldr	r3, [r7, #8]
}
 8010296:	4618      	mov	r0, r3
 8010298:	3714      	adds	r7, #20
 801029a:	46bd      	mov	sp, r7
 801029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a0:	4770      	bx	lr

080102a2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80102a2:	b480      	push	{r7}
 80102a4:	b087      	sub	sp, #28
 80102a6:	af00      	add	r7, sp, #0
 80102a8:	6078      	str	r0, [r7, #4]
 80102aa:	460b      	mov	r3, r1
 80102ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80102b2:	697b      	ldr	r3, [r7, #20]
 80102b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102b8:	691b      	ldr	r3, [r3, #16]
 80102ba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80102bc:	697b      	ldr	r3, [r7, #20]
 80102be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102c4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80102c6:	78fb      	ldrb	r3, [r7, #3]
 80102c8:	f003 030f 	and.w	r3, r3, #15
 80102cc:	68fa      	ldr	r2, [r7, #12]
 80102ce:	fa22 f303 	lsr.w	r3, r2, r3
 80102d2:	01db      	lsls	r3, r3, #7
 80102d4:	b2db      	uxtb	r3, r3
 80102d6:	693a      	ldr	r2, [r7, #16]
 80102d8:	4313      	orrs	r3, r2
 80102da:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80102dc:	78fb      	ldrb	r3, [r7, #3]
 80102de:	015a      	lsls	r2, r3, #5
 80102e0:	697b      	ldr	r3, [r7, #20]
 80102e2:	4413      	add	r3, r2
 80102e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102e8:	689b      	ldr	r3, [r3, #8]
 80102ea:	693a      	ldr	r2, [r7, #16]
 80102ec:	4013      	ands	r3, r2
 80102ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80102f0:	68bb      	ldr	r3, [r7, #8]
}
 80102f2:	4618      	mov	r0, r3
 80102f4:	371c      	adds	r7, #28
 80102f6:	46bd      	mov	sp, r7
 80102f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fc:	4770      	bx	lr

080102fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80102fe:	b480      	push	{r7}
 8010300:	b083      	sub	sp, #12
 8010302:	af00      	add	r7, sp, #0
 8010304:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	695b      	ldr	r3, [r3, #20]
 801030a:	f003 0301 	and.w	r3, r3, #1
}
 801030e:	4618      	mov	r0, r3
 8010310:	370c      	adds	r7, #12
 8010312:	46bd      	mov	sp, r7
 8010314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010318:	4770      	bx	lr
	...

0801031c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801031c:	b480      	push	{r7}
 801031e:	b085      	sub	sp, #20
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801032e:	681a      	ldr	r2, [r3, #0]
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010336:	4619      	mov	r1, r3
 8010338:	4b09      	ldr	r3, [pc, #36]	; (8010360 <USB_ActivateSetup+0x44>)
 801033a:	4013      	ands	r3, r2
 801033c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010344:	685b      	ldr	r3, [r3, #4]
 8010346:	68fa      	ldr	r2, [r7, #12]
 8010348:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801034c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010350:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010352:	2300      	movs	r3, #0
}
 8010354:	4618      	mov	r0, r3
 8010356:	3714      	adds	r7, #20
 8010358:	46bd      	mov	sp, r7
 801035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035e:	4770      	bx	lr
 8010360:	fffff800 	.word	0xfffff800

08010364 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010364:	b480      	push	{r7}
 8010366:	b087      	sub	sp, #28
 8010368:	af00      	add	r7, sp, #0
 801036a:	60f8      	str	r0, [r7, #12]
 801036c:	460b      	mov	r3, r1
 801036e:	607a      	str	r2, [r7, #4]
 8010370:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	333c      	adds	r3, #60	; 0x3c
 801037a:	3304      	adds	r3, #4
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010380:	693b      	ldr	r3, [r7, #16]
 8010382:	4a26      	ldr	r2, [pc, #152]	; (801041c <USB_EP0_OutStart+0xb8>)
 8010384:	4293      	cmp	r3, r2
 8010386:	d90a      	bls.n	801039e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010388:	697b      	ldr	r3, [r7, #20]
 801038a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010394:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010398:	d101      	bne.n	801039e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801039a:	2300      	movs	r3, #0
 801039c:	e037      	b.n	801040e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801039e:	697b      	ldr	r3, [r7, #20]
 80103a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103a4:	461a      	mov	r2, r3
 80103a6:	2300      	movs	r3, #0
 80103a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80103aa:	697b      	ldr	r3, [r7, #20]
 80103ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103b0:	691b      	ldr	r3, [r3, #16]
 80103b2:	697a      	ldr	r2, [r7, #20]
 80103b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80103b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80103bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80103be:	697b      	ldr	r3, [r7, #20]
 80103c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103c4:	691b      	ldr	r3, [r3, #16]
 80103c6:	697a      	ldr	r2, [r7, #20]
 80103c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80103cc:	f043 0318 	orr.w	r3, r3, #24
 80103d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80103d2:	697b      	ldr	r3, [r7, #20]
 80103d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103d8:	691b      	ldr	r3, [r3, #16]
 80103da:	697a      	ldr	r2, [r7, #20]
 80103dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80103e0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80103e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80103e6:	7afb      	ldrb	r3, [r7, #11]
 80103e8:	2b01      	cmp	r3, #1
 80103ea:	d10f      	bne.n	801040c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80103ec:	697b      	ldr	r3, [r7, #20]
 80103ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103f2:	461a      	mov	r2, r3
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80103f8:	697b      	ldr	r3, [r7, #20]
 80103fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	697a      	ldr	r2, [r7, #20]
 8010402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010406:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801040a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801040c:	2300      	movs	r3, #0
}
 801040e:	4618      	mov	r0, r3
 8010410:	371c      	adds	r7, #28
 8010412:	46bd      	mov	sp, r7
 8010414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010418:	4770      	bx	lr
 801041a:	bf00      	nop
 801041c:	4f54300a 	.word	0x4f54300a

08010420 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010420:	b480      	push	{r7}
 8010422:	b085      	sub	sp, #20
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010428:	2300      	movs	r3, #0
 801042a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	3301      	adds	r3, #1
 8010430:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	4a13      	ldr	r2, [pc, #76]	; (8010484 <USB_CoreReset+0x64>)
 8010436:	4293      	cmp	r3, r2
 8010438:	d901      	bls.n	801043e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801043a:	2303      	movs	r3, #3
 801043c:	e01b      	b.n	8010476 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	691b      	ldr	r3, [r3, #16]
 8010442:	2b00      	cmp	r3, #0
 8010444:	daf2      	bge.n	801042c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010446:	2300      	movs	r3, #0
 8010448:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	691b      	ldr	r3, [r3, #16]
 801044e:	f043 0201 	orr.w	r2, r3, #1
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	3301      	adds	r3, #1
 801045a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	4a09      	ldr	r2, [pc, #36]	; (8010484 <USB_CoreReset+0x64>)
 8010460:	4293      	cmp	r3, r2
 8010462:	d901      	bls.n	8010468 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010464:	2303      	movs	r3, #3
 8010466:	e006      	b.n	8010476 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	691b      	ldr	r3, [r3, #16]
 801046c:	f003 0301 	and.w	r3, r3, #1
 8010470:	2b01      	cmp	r3, #1
 8010472:	d0f0      	beq.n	8010456 <USB_CoreReset+0x36>

  return HAL_OK;
 8010474:	2300      	movs	r3, #0
}
 8010476:	4618      	mov	r0, r3
 8010478:	3714      	adds	r7, #20
 801047a:	46bd      	mov	sp, r7
 801047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010480:	4770      	bx	lr
 8010482:	bf00      	nop
 8010484:	00030d40 	.word	0x00030d40

08010488 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b084      	sub	sp, #16
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
 8010490:	460b      	mov	r3, r1
 8010492:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010494:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010498:	f002 fd34 	bl	8012f04 <USBD_static_malloc>
 801049c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d109      	bne.n	80104b8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	32b0      	adds	r2, #176	; 0xb0
 80104ae:	2100      	movs	r1, #0
 80104b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80104b4:	2302      	movs	r3, #2
 80104b6:	e0d4      	b.n	8010662 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80104b8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80104bc:	2100      	movs	r1, #0
 80104be:	68f8      	ldr	r0, [r7, #12]
 80104c0:	f002 fd96 	bl	8012ff0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	32b0      	adds	r2, #176	; 0xb0
 80104ce:	68f9      	ldr	r1, [r7, #12]
 80104d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	32b0      	adds	r2, #176	; 0xb0
 80104de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	7c1b      	ldrb	r3, [r3, #16]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d138      	bne.n	8010562 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80104f0:	4b5e      	ldr	r3, [pc, #376]	; (801066c <USBD_CDC_Init+0x1e4>)
 80104f2:	7819      	ldrb	r1, [r3, #0]
 80104f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80104f8:	2202      	movs	r2, #2
 80104fa:	6878      	ldr	r0, [r7, #4]
 80104fc:	f002 fbdf 	bl	8012cbe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010500:	4b5a      	ldr	r3, [pc, #360]	; (801066c <USBD_CDC_Init+0x1e4>)
 8010502:	781b      	ldrb	r3, [r3, #0]
 8010504:	f003 020f 	and.w	r2, r3, #15
 8010508:	6879      	ldr	r1, [r7, #4]
 801050a:	4613      	mov	r3, r2
 801050c:	009b      	lsls	r3, r3, #2
 801050e:	4413      	add	r3, r2
 8010510:	009b      	lsls	r3, r3, #2
 8010512:	440b      	add	r3, r1
 8010514:	3324      	adds	r3, #36	; 0x24
 8010516:	2201      	movs	r2, #1
 8010518:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801051a:	4b55      	ldr	r3, [pc, #340]	; (8010670 <USBD_CDC_Init+0x1e8>)
 801051c:	7819      	ldrb	r1, [r3, #0]
 801051e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010522:	2202      	movs	r2, #2
 8010524:	6878      	ldr	r0, [r7, #4]
 8010526:	f002 fbca 	bl	8012cbe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801052a:	4b51      	ldr	r3, [pc, #324]	; (8010670 <USBD_CDC_Init+0x1e8>)
 801052c:	781b      	ldrb	r3, [r3, #0]
 801052e:	f003 020f 	and.w	r2, r3, #15
 8010532:	6879      	ldr	r1, [r7, #4]
 8010534:	4613      	mov	r3, r2
 8010536:	009b      	lsls	r3, r3, #2
 8010538:	4413      	add	r3, r2
 801053a:	009b      	lsls	r3, r3, #2
 801053c:	440b      	add	r3, r1
 801053e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010542:	2201      	movs	r2, #1
 8010544:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010546:	4b4b      	ldr	r3, [pc, #300]	; (8010674 <USBD_CDC_Init+0x1ec>)
 8010548:	781b      	ldrb	r3, [r3, #0]
 801054a:	f003 020f 	and.w	r2, r3, #15
 801054e:	6879      	ldr	r1, [r7, #4]
 8010550:	4613      	mov	r3, r2
 8010552:	009b      	lsls	r3, r3, #2
 8010554:	4413      	add	r3, r2
 8010556:	009b      	lsls	r3, r3, #2
 8010558:	440b      	add	r3, r1
 801055a:	3326      	adds	r3, #38	; 0x26
 801055c:	2210      	movs	r2, #16
 801055e:	801a      	strh	r2, [r3, #0]
 8010560:	e035      	b.n	80105ce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010562:	4b42      	ldr	r3, [pc, #264]	; (801066c <USBD_CDC_Init+0x1e4>)
 8010564:	7819      	ldrb	r1, [r3, #0]
 8010566:	2340      	movs	r3, #64	; 0x40
 8010568:	2202      	movs	r2, #2
 801056a:	6878      	ldr	r0, [r7, #4]
 801056c:	f002 fba7 	bl	8012cbe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010570:	4b3e      	ldr	r3, [pc, #248]	; (801066c <USBD_CDC_Init+0x1e4>)
 8010572:	781b      	ldrb	r3, [r3, #0]
 8010574:	f003 020f 	and.w	r2, r3, #15
 8010578:	6879      	ldr	r1, [r7, #4]
 801057a:	4613      	mov	r3, r2
 801057c:	009b      	lsls	r3, r3, #2
 801057e:	4413      	add	r3, r2
 8010580:	009b      	lsls	r3, r3, #2
 8010582:	440b      	add	r3, r1
 8010584:	3324      	adds	r3, #36	; 0x24
 8010586:	2201      	movs	r2, #1
 8010588:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801058a:	4b39      	ldr	r3, [pc, #228]	; (8010670 <USBD_CDC_Init+0x1e8>)
 801058c:	7819      	ldrb	r1, [r3, #0]
 801058e:	2340      	movs	r3, #64	; 0x40
 8010590:	2202      	movs	r2, #2
 8010592:	6878      	ldr	r0, [r7, #4]
 8010594:	f002 fb93 	bl	8012cbe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010598:	4b35      	ldr	r3, [pc, #212]	; (8010670 <USBD_CDC_Init+0x1e8>)
 801059a:	781b      	ldrb	r3, [r3, #0]
 801059c:	f003 020f 	and.w	r2, r3, #15
 80105a0:	6879      	ldr	r1, [r7, #4]
 80105a2:	4613      	mov	r3, r2
 80105a4:	009b      	lsls	r3, r3, #2
 80105a6:	4413      	add	r3, r2
 80105a8:	009b      	lsls	r3, r3, #2
 80105aa:	440b      	add	r3, r1
 80105ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80105b0:	2201      	movs	r2, #1
 80105b2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80105b4:	4b2f      	ldr	r3, [pc, #188]	; (8010674 <USBD_CDC_Init+0x1ec>)
 80105b6:	781b      	ldrb	r3, [r3, #0]
 80105b8:	f003 020f 	and.w	r2, r3, #15
 80105bc:	6879      	ldr	r1, [r7, #4]
 80105be:	4613      	mov	r3, r2
 80105c0:	009b      	lsls	r3, r3, #2
 80105c2:	4413      	add	r3, r2
 80105c4:	009b      	lsls	r3, r3, #2
 80105c6:	440b      	add	r3, r1
 80105c8:	3326      	adds	r3, #38	; 0x26
 80105ca:	2210      	movs	r2, #16
 80105cc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80105ce:	4b29      	ldr	r3, [pc, #164]	; (8010674 <USBD_CDC_Init+0x1ec>)
 80105d0:	7819      	ldrb	r1, [r3, #0]
 80105d2:	2308      	movs	r3, #8
 80105d4:	2203      	movs	r2, #3
 80105d6:	6878      	ldr	r0, [r7, #4]
 80105d8:	f002 fb71 	bl	8012cbe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80105dc:	4b25      	ldr	r3, [pc, #148]	; (8010674 <USBD_CDC_Init+0x1ec>)
 80105de:	781b      	ldrb	r3, [r3, #0]
 80105e0:	f003 020f 	and.w	r2, r3, #15
 80105e4:	6879      	ldr	r1, [r7, #4]
 80105e6:	4613      	mov	r3, r2
 80105e8:	009b      	lsls	r3, r3, #2
 80105ea:	4413      	add	r3, r2
 80105ec:	009b      	lsls	r3, r3, #2
 80105ee:	440b      	add	r3, r1
 80105f0:	3324      	adds	r3, #36	; 0x24
 80105f2:	2201      	movs	r2, #1
 80105f4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	2200      	movs	r2, #0
 80105fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010604:	687a      	ldr	r2, [r7, #4]
 8010606:	33b0      	adds	r3, #176	; 0xb0
 8010608:	009b      	lsls	r3, r3, #2
 801060a:	4413      	add	r3, r2
 801060c:	685b      	ldr	r3, [r3, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	2200      	movs	r2, #0
 8010616:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	2200      	movs	r2, #0
 801061e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8010628:	2b00      	cmp	r3, #0
 801062a:	d101      	bne.n	8010630 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801062c:	2302      	movs	r3, #2
 801062e:	e018      	b.n	8010662 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	7c1b      	ldrb	r3, [r3, #16]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d10a      	bne.n	801064e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010638:	4b0d      	ldr	r3, [pc, #52]	; (8010670 <USBD_CDC_Init+0x1e8>)
 801063a:	7819      	ldrb	r1, [r3, #0]
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010642:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010646:	6878      	ldr	r0, [r7, #4]
 8010648:	f002 fc28 	bl	8012e9c <USBD_LL_PrepareReceive>
 801064c:	e008      	b.n	8010660 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801064e:	4b08      	ldr	r3, [pc, #32]	; (8010670 <USBD_CDC_Init+0x1e8>)
 8010650:	7819      	ldrb	r1, [r3, #0]
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010658:	2340      	movs	r3, #64	; 0x40
 801065a:	6878      	ldr	r0, [r7, #4]
 801065c:	f002 fc1e 	bl	8012e9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010660:	2300      	movs	r3, #0
}
 8010662:	4618      	mov	r0, r3
 8010664:	3710      	adds	r7, #16
 8010666:	46bd      	mov	sp, r7
 8010668:	bd80      	pop	{r7, pc}
 801066a:	bf00      	nop
 801066c:	24000097 	.word	0x24000097
 8010670:	24000098 	.word	0x24000098
 8010674:	24000099 	.word	0x24000099

08010678 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b082      	sub	sp, #8
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
 8010680:	460b      	mov	r3, r1
 8010682:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8010684:	4b3a      	ldr	r3, [pc, #232]	; (8010770 <USBD_CDC_DeInit+0xf8>)
 8010686:	781b      	ldrb	r3, [r3, #0]
 8010688:	4619      	mov	r1, r3
 801068a:	6878      	ldr	r0, [r7, #4]
 801068c:	f002 fb3d 	bl	8012d0a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8010690:	4b37      	ldr	r3, [pc, #220]	; (8010770 <USBD_CDC_DeInit+0xf8>)
 8010692:	781b      	ldrb	r3, [r3, #0]
 8010694:	f003 020f 	and.w	r2, r3, #15
 8010698:	6879      	ldr	r1, [r7, #4]
 801069a:	4613      	mov	r3, r2
 801069c:	009b      	lsls	r3, r3, #2
 801069e:	4413      	add	r3, r2
 80106a0:	009b      	lsls	r3, r3, #2
 80106a2:	440b      	add	r3, r1
 80106a4:	3324      	adds	r3, #36	; 0x24
 80106a6:	2200      	movs	r2, #0
 80106a8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80106aa:	4b32      	ldr	r3, [pc, #200]	; (8010774 <USBD_CDC_DeInit+0xfc>)
 80106ac:	781b      	ldrb	r3, [r3, #0]
 80106ae:	4619      	mov	r1, r3
 80106b0:	6878      	ldr	r0, [r7, #4]
 80106b2:	f002 fb2a 	bl	8012d0a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80106b6:	4b2f      	ldr	r3, [pc, #188]	; (8010774 <USBD_CDC_DeInit+0xfc>)
 80106b8:	781b      	ldrb	r3, [r3, #0]
 80106ba:	f003 020f 	and.w	r2, r3, #15
 80106be:	6879      	ldr	r1, [r7, #4]
 80106c0:	4613      	mov	r3, r2
 80106c2:	009b      	lsls	r3, r3, #2
 80106c4:	4413      	add	r3, r2
 80106c6:	009b      	lsls	r3, r3, #2
 80106c8:	440b      	add	r3, r1
 80106ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80106ce:	2200      	movs	r2, #0
 80106d0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80106d2:	4b29      	ldr	r3, [pc, #164]	; (8010778 <USBD_CDC_DeInit+0x100>)
 80106d4:	781b      	ldrb	r3, [r3, #0]
 80106d6:	4619      	mov	r1, r3
 80106d8:	6878      	ldr	r0, [r7, #4]
 80106da:	f002 fb16 	bl	8012d0a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80106de:	4b26      	ldr	r3, [pc, #152]	; (8010778 <USBD_CDC_DeInit+0x100>)
 80106e0:	781b      	ldrb	r3, [r3, #0]
 80106e2:	f003 020f 	and.w	r2, r3, #15
 80106e6:	6879      	ldr	r1, [r7, #4]
 80106e8:	4613      	mov	r3, r2
 80106ea:	009b      	lsls	r3, r3, #2
 80106ec:	4413      	add	r3, r2
 80106ee:	009b      	lsls	r3, r3, #2
 80106f0:	440b      	add	r3, r1
 80106f2:	3324      	adds	r3, #36	; 0x24
 80106f4:	2200      	movs	r2, #0
 80106f6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80106f8:	4b1f      	ldr	r3, [pc, #124]	; (8010778 <USBD_CDC_DeInit+0x100>)
 80106fa:	781b      	ldrb	r3, [r3, #0]
 80106fc:	f003 020f 	and.w	r2, r3, #15
 8010700:	6879      	ldr	r1, [r7, #4]
 8010702:	4613      	mov	r3, r2
 8010704:	009b      	lsls	r3, r3, #2
 8010706:	4413      	add	r3, r2
 8010708:	009b      	lsls	r3, r3, #2
 801070a:	440b      	add	r3, r1
 801070c:	3326      	adds	r3, #38	; 0x26
 801070e:	2200      	movs	r2, #0
 8010710:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	32b0      	adds	r2, #176	; 0xb0
 801071c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d01f      	beq.n	8010764 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801072a:	687a      	ldr	r2, [r7, #4]
 801072c:	33b0      	adds	r3, #176	; 0xb0
 801072e:	009b      	lsls	r3, r3, #2
 8010730:	4413      	add	r3, r2
 8010732:	685b      	ldr	r3, [r3, #4]
 8010734:	685b      	ldr	r3, [r3, #4]
 8010736:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	32b0      	adds	r2, #176	; 0xb0
 8010742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010746:	4618      	mov	r0, r3
 8010748:	f002 fbea 	bl	8012f20 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	32b0      	adds	r2, #176	; 0xb0
 8010756:	2100      	movs	r1, #0
 8010758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2200      	movs	r2, #0
 8010760:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8010764:	2300      	movs	r3, #0
}
 8010766:	4618      	mov	r0, r3
 8010768:	3708      	adds	r7, #8
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}
 801076e:	bf00      	nop
 8010770:	24000097 	.word	0x24000097
 8010774:	24000098 	.word	0x24000098
 8010778:	24000099 	.word	0x24000099

0801077c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b086      	sub	sp, #24
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
 8010784:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	32b0      	adds	r2, #176	; 0xb0
 8010790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010794:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8010796:	2300      	movs	r3, #0
 8010798:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801079a:	2300      	movs	r3, #0
 801079c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801079e:	2300      	movs	r3, #0
 80107a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80107a2:	693b      	ldr	r3, [r7, #16]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d101      	bne.n	80107ac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80107a8:	2303      	movs	r3, #3
 80107aa:	e0bf      	b.n	801092c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80107ac:	683b      	ldr	r3, [r7, #0]
 80107ae:	781b      	ldrb	r3, [r3, #0]
 80107b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d050      	beq.n	801085a <USBD_CDC_Setup+0xde>
 80107b8:	2b20      	cmp	r3, #32
 80107ba:	f040 80af 	bne.w	801091c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	88db      	ldrh	r3, [r3, #6]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d03a      	beq.n	801083c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80107c6:	683b      	ldr	r3, [r7, #0]
 80107c8:	781b      	ldrb	r3, [r3, #0]
 80107ca:	b25b      	sxtb	r3, r3
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	da1b      	bge.n	8010808 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80107d6:	687a      	ldr	r2, [r7, #4]
 80107d8:	33b0      	adds	r3, #176	; 0xb0
 80107da:	009b      	lsls	r3, r3, #2
 80107dc:	4413      	add	r3, r2
 80107de:	685b      	ldr	r3, [r3, #4]
 80107e0:	689b      	ldr	r3, [r3, #8]
 80107e2:	683a      	ldr	r2, [r7, #0]
 80107e4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80107e6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80107e8:	683a      	ldr	r2, [r7, #0]
 80107ea:	88d2      	ldrh	r2, [r2, #6]
 80107ec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80107ee:	683b      	ldr	r3, [r7, #0]
 80107f0:	88db      	ldrh	r3, [r3, #6]
 80107f2:	2b07      	cmp	r3, #7
 80107f4:	bf28      	it	cs
 80107f6:	2307      	movcs	r3, #7
 80107f8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80107fa:	693b      	ldr	r3, [r7, #16]
 80107fc:	89fa      	ldrh	r2, [r7, #14]
 80107fe:	4619      	mov	r1, r3
 8010800:	6878      	ldr	r0, [r7, #4]
 8010802:	f001 fd89 	bl	8012318 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8010806:	e090      	b.n	801092a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8010808:	683b      	ldr	r3, [r7, #0]
 801080a:	785a      	ldrb	r2, [r3, #1]
 801080c:	693b      	ldr	r3, [r7, #16]
 801080e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8010812:	683b      	ldr	r3, [r7, #0]
 8010814:	88db      	ldrh	r3, [r3, #6]
 8010816:	2b3f      	cmp	r3, #63	; 0x3f
 8010818:	d803      	bhi.n	8010822 <USBD_CDC_Setup+0xa6>
 801081a:	683b      	ldr	r3, [r7, #0]
 801081c:	88db      	ldrh	r3, [r3, #6]
 801081e:	b2da      	uxtb	r2, r3
 8010820:	e000      	b.n	8010824 <USBD_CDC_Setup+0xa8>
 8010822:	2240      	movs	r2, #64	; 0x40
 8010824:	693b      	ldr	r3, [r7, #16]
 8010826:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801082a:	6939      	ldr	r1, [r7, #16]
 801082c:	693b      	ldr	r3, [r7, #16]
 801082e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8010832:	461a      	mov	r2, r3
 8010834:	6878      	ldr	r0, [r7, #4]
 8010836:	f001 fd9b 	bl	8012370 <USBD_CtlPrepareRx>
      break;
 801083a:	e076      	b.n	801092a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010842:	687a      	ldr	r2, [r7, #4]
 8010844:	33b0      	adds	r3, #176	; 0xb0
 8010846:	009b      	lsls	r3, r3, #2
 8010848:	4413      	add	r3, r2
 801084a:	685b      	ldr	r3, [r3, #4]
 801084c:	689b      	ldr	r3, [r3, #8]
 801084e:	683a      	ldr	r2, [r7, #0]
 8010850:	7850      	ldrb	r0, [r2, #1]
 8010852:	2200      	movs	r2, #0
 8010854:	6839      	ldr	r1, [r7, #0]
 8010856:	4798      	blx	r3
      break;
 8010858:	e067      	b.n	801092a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801085a:	683b      	ldr	r3, [r7, #0]
 801085c:	785b      	ldrb	r3, [r3, #1]
 801085e:	2b0b      	cmp	r3, #11
 8010860:	d851      	bhi.n	8010906 <USBD_CDC_Setup+0x18a>
 8010862:	a201      	add	r2, pc, #4	; (adr r2, 8010868 <USBD_CDC_Setup+0xec>)
 8010864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010868:	08010899 	.word	0x08010899
 801086c:	08010915 	.word	0x08010915
 8010870:	08010907 	.word	0x08010907
 8010874:	08010907 	.word	0x08010907
 8010878:	08010907 	.word	0x08010907
 801087c:	08010907 	.word	0x08010907
 8010880:	08010907 	.word	0x08010907
 8010884:	08010907 	.word	0x08010907
 8010888:	08010907 	.word	0x08010907
 801088c:	08010907 	.word	0x08010907
 8010890:	080108c3 	.word	0x080108c3
 8010894:	080108ed 	.word	0x080108ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801089e:	b2db      	uxtb	r3, r3
 80108a0:	2b03      	cmp	r3, #3
 80108a2:	d107      	bne.n	80108b4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80108a4:	f107 030a 	add.w	r3, r7, #10
 80108a8:	2202      	movs	r2, #2
 80108aa:	4619      	mov	r1, r3
 80108ac:	6878      	ldr	r0, [r7, #4]
 80108ae:	f001 fd33 	bl	8012318 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80108b2:	e032      	b.n	801091a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80108b4:	6839      	ldr	r1, [r7, #0]
 80108b6:	6878      	ldr	r0, [r7, #4]
 80108b8:	f001 fcbd 	bl	8012236 <USBD_CtlError>
            ret = USBD_FAIL;
 80108bc:	2303      	movs	r3, #3
 80108be:	75fb      	strb	r3, [r7, #23]
          break;
 80108c0:	e02b      	b.n	801091a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80108c8:	b2db      	uxtb	r3, r3
 80108ca:	2b03      	cmp	r3, #3
 80108cc:	d107      	bne.n	80108de <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80108ce:	f107 030d 	add.w	r3, r7, #13
 80108d2:	2201      	movs	r2, #1
 80108d4:	4619      	mov	r1, r3
 80108d6:	6878      	ldr	r0, [r7, #4]
 80108d8:	f001 fd1e 	bl	8012318 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80108dc:	e01d      	b.n	801091a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80108de:	6839      	ldr	r1, [r7, #0]
 80108e0:	6878      	ldr	r0, [r7, #4]
 80108e2:	f001 fca8 	bl	8012236 <USBD_CtlError>
            ret = USBD_FAIL;
 80108e6:	2303      	movs	r3, #3
 80108e8:	75fb      	strb	r3, [r7, #23]
          break;
 80108ea:	e016      	b.n	801091a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80108f2:	b2db      	uxtb	r3, r3
 80108f4:	2b03      	cmp	r3, #3
 80108f6:	d00f      	beq.n	8010918 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80108f8:	6839      	ldr	r1, [r7, #0]
 80108fa:	6878      	ldr	r0, [r7, #4]
 80108fc:	f001 fc9b 	bl	8012236 <USBD_CtlError>
            ret = USBD_FAIL;
 8010900:	2303      	movs	r3, #3
 8010902:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010904:	e008      	b.n	8010918 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010906:	6839      	ldr	r1, [r7, #0]
 8010908:	6878      	ldr	r0, [r7, #4]
 801090a:	f001 fc94 	bl	8012236 <USBD_CtlError>
          ret = USBD_FAIL;
 801090e:	2303      	movs	r3, #3
 8010910:	75fb      	strb	r3, [r7, #23]
          break;
 8010912:	e002      	b.n	801091a <USBD_CDC_Setup+0x19e>
          break;
 8010914:	bf00      	nop
 8010916:	e008      	b.n	801092a <USBD_CDC_Setup+0x1ae>
          break;
 8010918:	bf00      	nop
      }
      break;
 801091a:	e006      	b.n	801092a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801091c:	6839      	ldr	r1, [r7, #0]
 801091e:	6878      	ldr	r0, [r7, #4]
 8010920:	f001 fc89 	bl	8012236 <USBD_CtlError>
      ret = USBD_FAIL;
 8010924:	2303      	movs	r3, #3
 8010926:	75fb      	strb	r3, [r7, #23]
      break;
 8010928:	bf00      	nop
  }

  return (uint8_t)ret;
 801092a:	7dfb      	ldrb	r3, [r7, #23]
}
 801092c:	4618      	mov	r0, r3
 801092e:	3718      	adds	r7, #24
 8010930:	46bd      	mov	sp, r7
 8010932:	bd80      	pop	{r7, pc}

08010934 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b084      	sub	sp, #16
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
 801093c:	460b      	mov	r3, r1
 801093e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010946:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	32b0      	adds	r2, #176	; 0xb0
 8010952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d101      	bne.n	801095e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801095a:	2303      	movs	r3, #3
 801095c:	e065      	b.n	8010a2a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	32b0      	adds	r2, #176	; 0xb0
 8010968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801096c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801096e:	78fb      	ldrb	r3, [r7, #3]
 8010970:	f003 020f 	and.w	r2, r3, #15
 8010974:	6879      	ldr	r1, [r7, #4]
 8010976:	4613      	mov	r3, r2
 8010978:	009b      	lsls	r3, r3, #2
 801097a:	4413      	add	r3, r2
 801097c:	009b      	lsls	r3, r3, #2
 801097e:	440b      	add	r3, r1
 8010980:	3318      	adds	r3, #24
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d02f      	beq.n	80109e8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8010988:	78fb      	ldrb	r3, [r7, #3]
 801098a:	f003 020f 	and.w	r2, r3, #15
 801098e:	6879      	ldr	r1, [r7, #4]
 8010990:	4613      	mov	r3, r2
 8010992:	009b      	lsls	r3, r3, #2
 8010994:	4413      	add	r3, r2
 8010996:	009b      	lsls	r3, r3, #2
 8010998:	440b      	add	r3, r1
 801099a:	3318      	adds	r3, #24
 801099c:	681a      	ldr	r2, [r3, #0]
 801099e:	78fb      	ldrb	r3, [r7, #3]
 80109a0:	f003 010f 	and.w	r1, r3, #15
 80109a4:	68f8      	ldr	r0, [r7, #12]
 80109a6:	460b      	mov	r3, r1
 80109a8:	00db      	lsls	r3, r3, #3
 80109aa:	440b      	add	r3, r1
 80109ac:	009b      	lsls	r3, r3, #2
 80109ae:	4403      	add	r3, r0
 80109b0:	3348      	adds	r3, #72	; 0x48
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	fbb2 f1f3 	udiv	r1, r2, r3
 80109b8:	fb01 f303 	mul.w	r3, r1, r3
 80109bc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d112      	bne.n	80109e8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80109c2:	78fb      	ldrb	r3, [r7, #3]
 80109c4:	f003 020f 	and.w	r2, r3, #15
 80109c8:	6879      	ldr	r1, [r7, #4]
 80109ca:	4613      	mov	r3, r2
 80109cc:	009b      	lsls	r3, r3, #2
 80109ce:	4413      	add	r3, r2
 80109d0:	009b      	lsls	r3, r3, #2
 80109d2:	440b      	add	r3, r1
 80109d4:	3318      	adds	r3, #24
 80109d6:	2200      	movs	r2, #0
 80109d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80109da:	78f9      	ldrb	r1, [r7, #3]
 80109dc:	2300      	movs	r3, #0
 80109de:	2200      	movs	r2, #0
 80109e0:	6878      	ldr	r0, [r7, #4]
 80109e2:	f002 fa3a 	bl	8012e5a <USBD_LL_Transmit>
 80109e6:	e01f      	b.n	8010a28 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80109e8:	68bb      	ldr	r3, [r7, #8]
 80109ea:	2200      	movs	r2, #0
 80109ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80109f6:	687a      	ldr	r2, [r7, #4]
 80109f8:	33b0      	adds	r3, #176	; 0xb0
 80109fa:	009b      	lsls	r3, r3, #2
 80109fc:	4413      	add	r3, r2
 80109fe:	685b      	ldr	r3, [r3, #4]
 8010a00:	691b      	ldr	r3, [r3, #16]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d010      	beq.n	8010a28 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010a0c:	687a      	ldr	r2, [r7, #4]
 8010a0e:	33b0      	adds	r3, #176	; 0xb0
 8010a10:	009b      	lsls	r3, r3, #2
 8010a12:	4413      	add	r3, r2
 8010a14:	685b      	ldr	r3, [r3, #4]
 8010a16:	691b      	ldr	r3, [r3, #16]
 8010a18:	68ba      	ldr	r2, [r7, #8]
 8010a1a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8010a1e:	68ba      	ldr	r2, [r7, #8]
 8010a20:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8010a24:	78fa      	ldrb	r2, [r7, #3]
 8010a26:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010a28:	2300      	movs	r3, #0
}
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	3710      	adds	r7, #16
 8010a2e:	46bd      	mov	sp, r7
 8010a30:	bd80      	pop	{r7, pc}

08010a32 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010a32:	b580      	push	{r7, lr}
 8010a34:	b084      	sub	sp, #16
 8010a36:	af00      	add	r7, sp, #0
 8010a38:	6078      	str	r0, [r7, #4]
 8010a3a:	460b      	mov	r3, r1
 8010a3c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	32b0      	adds	r2, #176	; 0xb0
 8010a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a4c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	32b0      	adds	r2, #176	; 0xb0
 8010a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d101      	bne.n	8010a64 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8010a60:	2303      	movs	r3, #3
 8010a62:	e01a      	b.n	8010a9a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010a64:	78fb      	ldrb	r3, [r7, #3]
 8010a66:	4619      	mov	r1, r3
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f002 fa38 	bl	8012ede <USBD_LL_GetRxDataSize>
 8010a6e:	4602      	mov	r2, r0
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010a7c:	687a      	ldr	r2, [r7, #4]
 8010a7e:	33b0      	adds	r3, #176	; 0xb0
 8010a80:	009b      	lsls	r3, r3, #2
 8010a82:	4413      	add	r3, r2
 8010a84:	685b      	ldr	r3, [r3, #4]
 8010a86:	68db      	ldr	r3, [r3, #12]
 8010a88:	68fa      	ldr	r2, [r7, #12]
 8010a8a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8010a8e:	68fa      	ldr	r2, [r7, #12]
 8010a90:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8010a94:	4611      	mov	r1, r2
 8010a96:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010a98:	2300      	movs	r3, #0
}
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	3710      	adds	r7, #16
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	bd80      	pop	{r7, pc}

08010aa2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010aa2:	b580      	push	{r7, lr}
 8010aa4:	b084      	sub	sp, #16
 8010aa6:	af00      	add	r7, sp, #0
 8010aa8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	32b0      	adds	r2, #176	; 0xb0
 8010ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ab8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d101      	bne.n	8010ac4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010ac0:	2303      	movs	r3, #3
 8010ac2:	e025      	b.n	8010b10 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010aca:	687a      	ldr	r2, [r7, #4]
 8010acc:	33b0      	adds	r3, #176	; 0xb0
 8010ace:	009b      	lsls	r3, r3, #2
 8010ad0:	4413      	add	r3, r2
 8010ad2:	685b      	ldr	r3, [r3, #4]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d01a      	beq.n	8010b0e <USBD_CDC_EP0_RxReady+0x6c>
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010ade:	2bff      	cmp	r3, #255	; 0xff
 8010ae0:	d015      	beq.n	8010b0e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010ae8:	687a      	ldr	r2, [r7, #4]
 8010aea:	33b0      	adds	r3, #176	; 0xb0
 8010aec:	009b      	lsls	r3, r3, #2
 8010aee:	4413      	add	r3, r2
 8010af0:	685b      	ldr	r3, [r3, #4]
 8010af2:	689b      	ldr	r3, [r3, #8]
 8010af4:	68fa      	ldr	r2, [r7, #12]
 8010af6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8010afa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8010afc:	68fa      	ldr	r2, [r7, #12]
 8010afe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010b02:	b292      	uxth	r2, r2
 8010b04:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	22ff      	movs	r2, #255	; 0xff
 8010b0a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8010b0e:	2300      	movs	r3, #0
}
 8010b10:	4618      	mov	r0, r3
 8010b12:	3710      	adds	r7, #16
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bd80      	pop	{r7, pc}

08010b18 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b086      	sub	sp, #24
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010b20:	2182      	movs	r1, #130	; 0x82
 8010b22:	4818      	ldr	r0, [pc, #96]	; (8010b84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010b24:	f000 fd4f 	bl	80115c6 <USBD_GetEpDesc>
 8010b28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010b2a:	2101      	movs	r1, #1
 8010b2c:	4815      	ldr	r0, [pc, #84]	; (8010b84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010b2e:	f000 fd4a 	bl	80115c6 <USBD_GetEpDesc>
 8010b32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010b34:	2181      	movs	r1, #129	; 0x81
 8010b36:	4813      	ldr	r0, [pc, #76]	; (8010b84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010b38:	f000 fd45 	bl	80115c6 <USBD_GetEpDesc>
 8010b3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010b3e:	697b      	ldr	r3, [r7, #20]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d002      	beq.n	8010b4a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010b44:	697b      	ldr	r3, [r7, #20]
 8010b46:	2210      	movs	r2, #16
 8010b48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010b4a:	693b      	ldr	r3, [r7, #16]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d006      	beq.n	8010b5e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010b50:	693b      	ldr	r3, [r7, #16]
 8010b52:	2200      	movs	r2, #0
 8010b54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010b58:	711a      	strb	r2, [r3, #4]
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d006      	beq.n	8010b72 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	2200      	movs	r2, #0
 8010b68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010b6c:	711a      	strb	r2, [r3, #4]
 8010b6e:	2200      	movs	r2, #0
 8010b70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	2243      	movs	r2, #67	; 0x43
 8010b76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010b78:	4b02      	ldr	r3, [pc, #8]	; (8010b84 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	3718      	adds	r7, #24
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	bd80      	pop	{r7, pc}
 8010b82:	bf00      	nop
 8010b84:	24000054 	.word	0x24000054

08010b88 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b086      	sub	sp, #24
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010b90:	2182      	movs	r1, #130	; 0x82
 8010b92:	4818      	ldr	r0, [pc, #96]	; (8010bf4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010b94:	f000 fd17 	bl	80115c6 <USBD_GetEpDesc>
 8010b98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010b9a:	2101      	movs	r1, #1
 8010b9c:	4815      	ldr	r0, [pc, #84]	; (8010bf4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010b9e:	f000 fd12 	bl	80115c6 <USBD_GetEpDesc>
 8010ba2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010ba4:	2181      	movs	r1, #129	; 0x81
 8010ba6:	4813      	ldr	r0, [pc, #76]	; (8010bf4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010ba8:	f000 fd0d 	bl	80115c6 <USBD_GetEpDesc>
 8010bac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010bae:	697b      	ldr	r3, [r7, #20]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d002      	beq.n	8010bba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8010bb4:	697b      	ldr	r3, [r7, #20]
 8010bb6:	2210      	movs	r2, #16
 8010bb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010bba:	693b      	ldr	r3, [r7, #16]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d006      	beq.n	8010bce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010bc0:	693b      	ldr	r3, [r7, #16]
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	711a      	strb	r2, [r3, #4]
 8010bc6:	2200      	movs	r2, #0
 8010bc8:	f042 0202 	orr.w	r2, r2, #2
 8010bcc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d006      	beq.n	8010be2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	2200      	movs	r2, #0
 8010bd8:	711a      	strb	r2, [r3, #4]
 8010bda:	2200      	movs	r2, #0
 8010bdc:	f042 0202 	orr.w	r2, r2, #2
 8010be0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	2243      	movs	r2, #67	; 0x43
 8010be6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010be8:	4b02      	ldr	r3, [pc, #8]	; (8010bf4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8010bea:	4618      	mov	r0, r3
 8010bec:	3718      	adds	r7, #24
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	bd80      	pop	{r7, pc}
 8010bf2:	bf00      	nop
 8010bf4:	24000054 	.word	0x24000054

08010bf8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b086      	sub	sp, #24
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010c00:	2182      	movs	r1, #130	; 0x82
 8010c02:	4818      	ldr	r0, [pc, #96]	; (8010c64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010c04:	f000 fcdf 	bl	80115c6 <USBD_GetEpDesc>
 8010c08:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010c0a:	2101      	movs	r1, #1
 8010c0c:	4815      	ldr	r0, [pc, #84]	; (8010c64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010c0e:	f000 fcda 	bl	80115c6 <USBD_GetEpDesc>
 8010c12:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010c14:	2181      	movs	r1, #129	; 0x81
 8010c16:	4813      	ldr	r0, [pc, #76]	; (8010c64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010c18:	f000 fcd5 	bl	80115c6 <USBD_GetEpDesc>
 8010c1c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010c1e:	697b      	ldr	r3, [r7, #20]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d002      	beq.n	8010c2a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010c24:	697b      	ldr	r3, [r7, #20]
 8010c26:	2210      	movs	r2, #16
 8010c28:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010c2a:	693b      	ldr	r3, [r7, #16]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d006      	beq.n	8010c3e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010c30:	693b      	ldr	r3, [r7, #16]
 8010c32:	2200      	movs	r2, #0
 8010c34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010c38:	711a      	strb	r2, [r3, #4]
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d006      	beq.n	8010c52 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	2200      	movs	r2, #0
 8010c48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010c4c:	711a      	strb	r2, [r3, #4]
 8010c4e:	2200      	movs	r2, #0
 8010c50:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	2243      	movs	r2, #67	; 0x43
 8010c56:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010c58:	4b02      	ldr	r3, [pc, #8]	; (8010c64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	3718      	adds	r7, #24
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}
 8010c62:	bf00      	nop
 8010c64:	24000054 	.word	0x24000054

08010c68 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010c68:	b480      	push	{r7}
 8010c6a:	b083      	sub	sp, #12
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	220a      	movs	r2, #10
 8010c74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010c76:	4b03      	ldr	r3, [pc, #12]	; (8010c84 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010c78:	4618      	mov	r0, r3
 8010c7a:	370c      	adds	r7, #12
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c82:	4770      	bx	lr
 8010c84:	24000010 	.word	0x24000010

08010c88 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010c88:	b480      	push	{r7}
 8010c8a:	b083      	sub	sp, #12
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
 8010c90:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010c92:	683b      	ldr	r3, [r7, #0]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d101      	bne.n	8010c9c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010c98:	2303      	movs	r3, #3
 8010c9a:	e009      	b.n	8010cb0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010ca2:	687a      	ldr	r2, [r7, #4]
 8010ca4:	33b0      	adds	r3, #176	; 0xb0
 8010ca6:	009b      	lsls	r3, r3, #2
 8010ca8:	4413      	add	r3, r2
 8010caa:	683a      	ldr	r2, [r7, #0]
 8010cac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8010cae:	2300      	movs	r3, #0
}
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	370c      	adds	r7, #12
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cba:	4770      	bx	lr

08010cbc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010cbc:	b480      	push	{r7}
 8010cbe:	b087      	sub	sp, #28
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	60f8      	str	r0, [r7, #12]
 8010cc4:	60b9      	str	r1, [r7, #8]
 8010cc6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	32b0      	adds	r2, #176	; 0xb0
 8010cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010cd6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8010cd8:	697b      	ldr	r3, [r7, #20]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d101      	bne.n	8010ce2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8010cde:	2303      	movs	r3, #3
 8010ce0:	e008      	b.n	8010cf4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8010ce2:	697b      	ldr	r3, [r7, #20]
 8010ce4:	68ba      	ldr	r2, [r7, #8]
 8010ce6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8010cea:	697b      	ldr	r3, [r7, #20]
 8010cec:	687a      	ldr	r2, [r7, #4]
 8010cee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8010cf2:	2300      	movs	r3, #0
}
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	371c      	adds	r7, #28
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cfe:	4770      	bx	lr

08010d00 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010d00:	b480      	push	{r7}
 8010d02:	b085      	sub	sp, #20
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
 8010d08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	32b0      	adds	r2, #176	; 0xb0
 8010d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d18:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d101      	bne.n	8010d24 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8010d20:	2303      	movs	r3, #3
 8010d22:	e004      	b.n	8010d2e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	683a      	ldr	r2, [r7, #0]
 8010d28:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8010d2c:	2300      	movs	r3, #0
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3714      	adds	r7, #20
 8010d32:	46bd      	mov	sp, r7
 8010d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d38:	4770      	bx	lr
	...

08010d3c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b084      	sub	sp, #16
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	32b0      	adds	r2, #176	; 0xb0
 8010d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d52:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8010d54:	2301      	movs	r3, #1
 8010d56:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	32b0      	adds	r2, #176	; 0xb0
 8010d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d101      	bne.n	8010d6e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8010d6a:	2303      	movs	r3, #3
 8010d6c:	e025      	b.n	8010dba <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8010d6e:	68bb      	ldr	r3, [r7, #8]
 8010d70:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d11f      	bne.n	8010db8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8010d78:	68bb      	ldr	r3, [r7, #8]
 8010d7a:	2201      	movs	r2, #1
 8010d7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8010d80:	4b10      	ldr	r3, [pc, #64]	; (8010dc4 <USBD_CDC_TransmitPacket+0x88>)
 8010d82:	781b      	ldrb	r3, [r3, #0]
 8010d84:	f003 020f 	and.w	r2, r3, #15
 8010d88:	68bb      	ldr	r3, [r7, #8]
 8010d8a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8010d8e:	6878      	ldr	r0, [r7, #4]
 8010d90:	4613      	mov	r3, r2
 8010d92:	009b      	lsls	r3, r3, #2
 8010d94:	4413      	add	r3, r2
 8010d96:	009b      	lsls	r3, r3, #2
 8010d98:	4403      	add	r3, r0
 8010d9a:	3318      	adds	r3, #24
 8010d9c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8010d9e:	4b09      	ldr	r3, [pc, #36]	; (8010dc4 <USBD_CDC_TransmitPacket+0x88>)
 8010da0:	7819      	ldrb	r1, [r3, #0]
 8010da2:	68bb      	ldr	r3, [r7, #8]
 8010da4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010dae:	6878      	ldr	r0, [r7, #4]
 8010db0:	f002 f853 	bl	8012e5a <USBD_LL_Transmit>

    ret = USBD_OK;
 8010db4:	2300      	movs	r3, #0
 8010db6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8010db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010dba:	4618      	mov	r0, r3
 8010dbc:	3710      	adds	r7, #16
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	bd80      	pop	{r7, pc}
 8010dc2:	bf00      	nop
 8010dc4:	24000097 	.word	0x24000097

08010dc8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b084      	sub	sp, #16
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	32b0      	adds	r2, #176	; 0xb0
 8010dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010dde:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	32b0      	adds	r2, #176	; 0xb0
 8010dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d101      	bne.n	8010df6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8010df2:	2303      	movs	r3, #3
 8010df4:	e018      	b.n	8010e28 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	7c1b      	ldrb	r3, [r3, #16]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d10a      	bne.n	8010e14 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010dfe:	4b0c      	ldr	r3, [pc, #48]	; (8010e30 <USBD_CDC_ReceivePacket+0x68>)
 8010e00:	7819      	ldrb	r1, [r3, #0]
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010e08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010e0c:	6878      	ldr	r0, [r7, #4]
 8010e0e:	f002 f845 	bl	8012e9c <USBD_LL_PrepareReceive>
 8010e12:	e008      	b.n	8010e26 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010e14:	4b06      	ldr	r3, [pc, #24]	; (8010e30 <USBD_CDC_ReceivePacket+0x68>)
 8010e16:	7819      	ldrb	r1, [r3, #0]
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010e1e:	2340      	movs	r3, #64	; 0x40
 8010e20:	6878      	ldr	r0, [r7, #4]
 8010e22:	f002 f83b 	bl	8012e9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010e26:	2300      	movs	r3, #0
}
 8010e28:	4618      	mov	r0, r3
 8010e2a:	3710      	adds	r7, #16
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	bd80      	pop	{r7, pc}
 8010e30:	24000098 	.word	0x24000098

08010e34 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b086      	sub	sp, #24
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	60f8      	str	r0, [r7, #12]
 8010e3c:	60b9      	str	r1, [r7, #8]
 8010e3e:	4613      	mov	r3, r2
 8010e40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d101      	bne.n	8010e4c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010e48:	2303      	movs	r3, #3
 8010e4a:	e01f      	b.n	8010e8c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	2200      	movs	r2, #0
 8010e50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	2200      	movs	r2, #0
 8010e58:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	2200      	movs	r2, #0
 8010e60:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010e64:	68bb      	ldr	r3, [r7, #8]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d003      	beq.n	8010e72 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	68ba      	ldr	r2, [r7, #8]
 8010e6e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	2201      	movs	r2, #1
 8010e76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	79fa      	ldrb	r2, [r7, #7]
 8010e7e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010e80:	68f8      	ldr	r0, [r7, #12]
 8010e82:	f001 feb1 	bl	8012be8 <USBD_LL_Init>
 8010e86:	4603      	mov	r3, r0
 8010e88:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	3718      	adds	r7, #24
 8010e90:	46bd      	mov	sp, r7
 8010e92:	bd80      	pop	{r7, pc}

08010e94 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b084      	sub	sp, #16
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
 8010e9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010ea2:	683b      	ldr	r3, [r7, #0]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d101      	bne.n	8010eac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010ea8:	2303      	movs	r3, #3
 8010eaa:	e025      	b.n	8010ef8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	683a      	ldr	r2, [r7, #0]
 8010eb0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	32ae      	adds	r2, #174	; 0xae
 8010ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d00f      	beq.n	8010ee8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	32ae      	adds	r2, #174	; 0xae
 8010ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ed8:	f107 020e 	add.w	r2, r7, #14
 8010edc:	4610      	mov	r0, r2
 8010ede:	4798      	blx	r3
 8010ee0:	4602      	mov	r2, r0
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8010eee:	1c5a      	adds	r2, r3, #1
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8010ef6:	2300      	movs	r3, #0
}
 8010ef8:	4618      	mov	r0, r3
 8010efa:	3710      	adds	r7, #16
 8010efc:	46bd      	mov	sp, r7
 8010efe:	bd80      	pop	{r7, pc}

08010f00 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b082      	sub	sp, #8
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010f08:	6878      	ldr	r0, [r7, #4]
 8010f0a:	f001 febd 	bl	8012c88 <USBD_LL_Start>
 8010f0e:	4603      	mov	r3, r0
}
 8010f10:	4618      	mov	r0, r3
 8010f12:	3708      	adds	r7, #8
 8010f14:	46bd      	mov	sp, r7
 8010f16:	bd80      	pop	{r7, pc}

08010f18 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8010f18:	b480      	push	{r7}
 8010f1a:	b083      	sub	sp, #12
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010f20:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8010f22:	4618      	mov	r0, r3
 8010f24:	370c      	adds	r7, #12
 8010f26:	46bd      	mov	sp, r7
 8010f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2c:	4770      	bx	lr

08010f2e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010f2e:	b580      	push	{r7, lr}
 8010f30:	b084      	sub	sp, #16
 8010f32:	af00      	add	r7, sp, #0
 8010f34:	6078      	str	r0, [r7, #4]
 8010f36:	460b      	mov	r3, r1
 8010f38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010f3a:	2300      	movs	r3, #0
 8010f3c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d009      	beq.n	8010f5c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	78fa      	ldrb	r2, [r7, #3]
 8010f52:	4611      	mov	r1, r2
 8010f54:	6878      	ldr	r0, [r7, #4]
 8010f56:	4798      	blx	r3
 8010f58:	4603      	mov	r3, r0
 8010f5a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f5e:	4618      	mov	r0, r3
 8010f60:	3710      	adds	r7, #16
 8010f62:	46bd      	mov	sp, r7
 8010f64:	bd80      	pop	{r7, pc}

08010f66 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010f66:	b580      	push	{r7, lr}
 8010f68:	b084      	sub	sp, #16
 8010f6a:	af00      	add	r7, sp, #0
 8010f6c:	6078      	str	r0, [r7, #4]
 8010f6e:	460b      	mov	r3, r1
 8010f70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010f72:	2300      	movs	r3, #0
 8010f74:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f7c:	685b      	ldr	r3, [r3, #4]
 8010f7e:	78fa      	ldrb	r2, [r7, #3]
 8010f80:	4611      	mov	r1, r2
 8010f82:	6878      	ldr	r0, [r7, #4]
 8010f84:	4798      	blx	r3
 8010f86:	4603      	mov	r3, r0
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d001      	beq.n	8010f90 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8010f8c:	2303      	movs	r3, #3
 8010f8e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f92:	4618      	mov	r0, r3
 8010f94:	3710      	adds	r7, #16
 8010f96:	46bd      	mov	sp, r7
 8010f98:	bd80      	pop	{r7, pc}

08010f9a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010f9a:	b580      	push	{r7, lr}
 8010f9c:	b084      	sub	sp, #16
 8010f9e:	af00      	add	r7, sp, #0
 8010fa0:	6078      	str	r0, [r7, #4]
 8010fa2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010faa:	6839      	ldr	r1, [r7, #0]
 8010fac:	4618      	mov	r0, r3
 8010fae:	f001 f908 	bl	80121c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	2201      	movs	r2, #1
 8010fb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8010fc0:	461a      	mov	r2, r3
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010fce:	f003 031f 	and.w	r3, r3, #31
 8010fd2:	2b02      	cmp	r3, #2
 8010fd4:	d01a      	beq.n	801100c <USBD_LL_SetupStage+0x72>
 8010fd6:	2b02      	cmp	r3, #2
 8010fd8:	d822      	bhi.n	8011020 <USBD_LL_SetupStage+0x86>
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d002      	beq.n	8010fe4 <USBD_LL_SetupStage+0x4a>
 8010fde:	2b01      	cmp	r3, #1
 8010fe0:	d00a      	beq.n	8010ff8 <USBD_LL_SetupStage+0x5e>
 8010fe2:	e01d      	b.n	8011020 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010fea:	4619      	mov	r1, r3
 8010fec:	6878      	ldr	r0, [r7, #4]
 8010fee:	f000 fb5f 	bl	80116b0 <USBD_StdDevReq>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	73fb      	strb	r3, [r7, #15]
      break;
 8010ff6:	e020      	b.n	801103a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010ffe:	4619      	mov	r1, r3
 8011000:	6878      	ldr	r0, [r7, #4]
 8011002:	f000 fbc7 	bl	8011794 <USBD_StdItfReq>
 8011006:	4603      	mov	r3, r0
 8011008:	73fb      	strb	r3, [r7, #15]
      break;
 801100a:	e016      	b.n	801103a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011012:	4619      	mov	r1, r3
 8011014:	6878      	ldr	r0, [r7, #4]
 8011016:	f000 fc29 	bl	801186c <USBD_StdEPReq>
 801101a:	4603      	mov	r3, r0
 801101c:	73fb      	strb	r3, [r7, #15]
      break;
 801101e:	e00c      	b.n	801103a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011026:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801102a:	b2db      	uxtb	r3, r3
 801102c:	4619      	mov	r1, r3
 801102e:	6878      	ldr	r0, [r7, #4]
 8011030:	f001 fe8a 	bl	8012d48 <USBD_LL_StallEP>
 8011034:	4603      	mov	r3, r0
 8011036:	73fb      	strb	r3, [r7, #15]
      break;
 8011038:	bf00      	nop
  }

  return ret;
 801103a:	7bfb      	ldrb	r3, [r7, #15]
}
 801103c:	4618      	mov	r0, r3
 801103e:	3710      	adds	r7, #16
 8011040:	46bd      	mov	sp, r7
 8011042:	bd80      	pop	{r7, pc}

08011044 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011044:	b580      	push	{r7, lr}
 8011046:	b086      	sub	sp, #24
 8011048:	af00      	add	r7, sp, #0
 801104a:	60f8      	str	r0, [r7, #12]
 801104c:	460b      	mov	r3, r1
 801104e:	607a      	str	r2, [r7, #4]
 8011050:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8011052:	2300      	movs	r3, #0
 8011054:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8011056:	7afb      	ldrb	r3, [r7, #11]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d16e      	bne.n	801113a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011062:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801106a:	2b03      	cmp	r3, #3
 801106c:	f040 8098 	bne.w	80111a0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8011070:	693b      	ldr	r3, [r7, #16]
 8011072:	689a      	ldr	r2, [r3, #8]
 8011074:	693b      	ldr	r3, [r7, #16]
 8011076:	68db      	ldr	r3, [r3, #12]
 8011078:	429a      	cmp	r2, r3
 801107a:	d913      	bls.n	80110a4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801107c:	693b      	ldr	r3, [r7, #16]
 801107e:	689a      	ldr	r2, [r3, #8]
 8011080:	693b      	ldr	r3, [r7, #16]
 8011082:	68db      	ldr	r3, [r3, #12]
 8011084:	1ad2      	subs	r2, r2, r3
 8011086:	693b      	ldr	r3, [r7, #16]
 8011088:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801108a:	693b      	ldr	r3, [r7, #16]
 801108c:	68da      	ldr	r2, [r3, #12]
 801108e:	693b      	ldr	r3, [r7, #16]
 8011090:	689b      	ldr	r3, [r3, #8]
 8011092:	4293      	cmp	r3, r2
 8011094:	bf28      	it	cs
 8011096:	4613      	movcs	r3, r2
 8011098:	461a      	mov	r2, r3
 801109a:	6879      	ldr	r1, [r7, #4]
 801109c:	68f8      	ldr	r0, [r7, #12]
 801109e:	f001 f984 	bl	80123aa <USBD_CtlContinueRx>
 80110a2:	e07d      	b.n	80111a0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80110aa:	f003 031f 	and.w	r3, r3, #31
 80110ae:	2b02      	cmp	r3, #2
 80110b0:	d014      	beq.n	80110dc <USBD_LL_DataOutStage+0x98>
 80110b2:	2b02      	cmp	r3, #2
 80110b4:	d81d      	bhi.n	80110f2 <USBD_LL_DataOutStage+0xae>
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d002      	beq.n	80110c0 <USBD_LL_DataOutStage+0x7c>
 80110ba:	2b01      	cmp	r3, #1
 80110bc:	d003      	beq.n	80110c6 <USBD_LL_DataOutStage+0x82>
 80110be:	e018      	b.n	80110f2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80110c0:	2300      	movs	r3, #0
 80110c2:	75bb      	strb	r3, [r7, #22]
            break;
 80110c4:	e018      	b.n	80110f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80110cc:	b2db      	uxtb	r3, r3
 80110ce:	4619      	mov	r1, r3
 80110d0:	68f8      	ldr	r0, [r7, #12]
 80110d2:	f000 fa5e 	bl	8011592 <USBD_CoreFindIF>
 80110d6:	4603      	mov	r3, r0
 80110d8:	75bb      	strb	r3, [r7, #22]
            break;
 80110da:	e00d      	b.n	80110f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80110e2:	b2db      	uxtb	r3, r3
 80110e4:	4619      	mov	r1, r3
 80110e6:	68f8      	ldr	r0, [r7, #12]
 80110e8:	f000 fa60 	bl	80115ac <USBD_CoreFindEP>
 80110ec:	4603      	mov	r3, r0
 80110ee:	75bb      	strb	r3, [r7, #22]
            break;
 80110f0:	e002      	b.n	80110f8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80110f2:	2300      	movs	r3, #0
 80110f4:	75bb      	strb	r3, [r7, #22]
            break;
 80110f6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80110f8:	7dbb      	ldrb	r3, [r7, #22]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d119      	bne.n	8011132 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011104:	b2db      	uxtb	r3, r3
 8011106:	2b03      	cmp	r3, #3
 8011108:	d113      	bne.n	8011132 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801110a:	7dba      	ldrb	r2, [r7, #22]
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	32ae      	adds	r2, #174	; 0xae
 8011110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011114:	691b      	ldr	r3, [r3, #16]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d00b      	beq.n	8011132 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801111a:	7dba      	ldrb	r2, [r7, #22]
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8011122:	7dba      	ldrb	r2, [r7, #22]
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	32ae      	adds	r2, #174	; 0xae
 8011128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801112c:	691b      	ldr	r3, [r3, #16]
 801112e:	68f8      	ldr	r0, [r7, #12]
 8011130:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8011132:	68f8      	ldr	r0, [r7, #12]
 8011134:	f001 f94a 	bl	80123cc <USBD_CtlSendStatus>
 8011138:	e032      	b.n	80111a0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801113a:	7afb      	ldrb	r3, [r7, #11]
 801113c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011140:	b2db      	uxtb	r3, r3
 8011142:	4619      	mov	r1, r3
 8011144:	68f8      	ldr	r0, [r7, #12]
 8011146:	f000 fa31 	bl	80115ac <USBD_CoreFindEP>
 801114a:	4603      	mov	r3, r0
 801114c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801114e:	7dbb      	ldrb	r3, [r7, #22]
 8011150:	2bff      	cmp	r3, #255	; 0xff
 8011152:	d025      	beq.n	80111a0 <USBD_LL_DataOutStage+0x15c>
 8011154:	7dbb      	ldrb	r3, [r7, #22]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d122      	bne.n	80111a0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011160:	b2db      	uxtb	r3, r3
 8011162:	2b03      	cmp	r3, #3
 8011164:	d117      	bne.n	8011196 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8011166:	7dba      	ldrb	r2, [r7, #22]
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	32ae      	adds	r2, #174	; 0xae
 801116c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011170:	699b      	ldr	r3, [r3, #24]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d00f      	beq.n	8011196 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8011176:	7dba      	ldrb	r2, [r7, #22]
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801117e:	7dba      	ldrb	r2, [r7, #22]
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	32ae      	adds	r2, #174	; 0xae
 8011184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011188:	699b      	ldr	r3, [r3, #24]
 801118a:	7afa      	ldrb	r2, [r7, #11]
 801118c:	4611      	mov	r1, r2
 801118e:	68f8      	ldr	r0, [r7, #12]
 8011190:	4798      	blx	r3
 8011192:	4603      	mov	r3, r0
 8011194:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8011196:	7dfb      	ldrb	r3, [r7, #23]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d001      	beq.n	80111a0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801119c:	7dfb      	ldrb	r3, [r7, #23]
 801119e:	e000      	b.n	80111a2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80111a0:	2300      	movs	r3, #0
}
 80111a2:	4618      	mov	r0, r3
 80111a4:	3718      	adds	r7, #24
 80111a6:	46bd      	mov	sp, r7
 80111a8:	bd80      	pop	{r7, pc}

080111aa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80111aa:	b580      	push	{r7, lr}
 80111ac:	b086      	sub	sp, #24
 80111ae:	af00      	add	r7, sp, #0
 80111b0:	60f8      	str	r0, [r7, #12]
 80111b2:	460b      	mov	r3, r1
 80111b4:	607a      	str	r2, [r7, #4]
 80111b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80111b8:	7afb      	ldrb	r3, [r7, #11]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d16f      	bne.n	801129e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	3314      	adds	r3, #20
 80111c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80111ca:	2b02      	cmp	r3, #2
 80111cc:	d15a      	bne.n	8011284 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80111ce:	693b      	ldr	r3, [r7, #16]
 80111d0:	689a      	ldr	r2, [r3, #8]
 80111d2:	693b      	ldr	r3, [r7, #16]
 80111d4:	68db      	ldr	r3, [r3, #12]
 80111d6:	429a      	cmp	r2, r3
 80111d8:	d914      	bls.n	8011204 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80111da:	693b      	ldr	r3, [r7, #16]
 80111dc:	689a      	ldr	r2, [r3, #8]
 80111de:	693b      	ldr	r3, [r7, #16]
 80111e0:	68db      	ldr	r3, [r3, #12]
 80111e2:	1ad2      	subs	r2, r2, r3
 80111e4:	693b      	ldr	r3, [r7, #16]
 80111e6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80111e8:	693b      	ldr	r3, [r7, #16]
 80111ea:	689b      	ldr	r3, [r3, #8]
 80111ec:	461a      	mov	r2, r3
 80111ee:	6879      	ldr	r1, [r7, #4]
 80111f0:	68f8      	ldr	r0, [r7, #12]
 80111f2:	f001 f8ac 	bl	801234e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80111f6:	2300      	movs	r3, #0
 80111f8:	2200      	movs	r2, #0
 80111fa:	2100      	movs	r1, #0
 80111fc:	68f8      	ldr	r0, [r7, #12]
 80111fe:	f001 fe4d 	bl	8012e9c <USBD_LL_PrepareReceive>
 8011202:	e03f      	b.n	8011284 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011204:	693b      	ldr	r3, [r7, #16]
 8011206:	68da      	ldr	r2, [r3, #12]
 8011208:	693b      	ldr	r3, [r7, #16]
 801120a:	689b      	ldr	r3, [r3, #8]
 801120c:	429a      	cmp	r2, r3
 801120e:	d11c      	bne.n	801124a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011210:	693b      	ldr	r3, [r7, #16]
 8011212:	685a      	ldr	r2, [r3, #4]
 8011214:	693b      	ldr	r3, [r7, #16]
 8011216:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011218:	429a      	cmp	r2, r3
 801121a:	d316      	bcc.n	801124a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801121c:	693b      	ldr	r3, [r7, #16]
 801121e:	685a      	ldr	r2, [r3, #4]
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011226:	429a      	cmp	r2, r3
 8011228:	d20f      	bcs.n	801124a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801122a:	2200      	movs	r2, #0
 801122c:	2100      	movs	r1, #0
 801122e:	68f8      	ldr	r0, [r7, #12]
 8011230:	f001 f88d 	bl	801234e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	2200      	movs	r2, #0
 8011238:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801123c:	2300      	movs	r3, #0
 801123e:	2200      	movs	r2, #0
 8011240:	2100      	movs	r1, #0
 8011242:	68f8      	ldr	r0, [r7, #12]
 8011244:	f001 fe2a 	bl	8012e9c <USBD_LL_PrepareReceive>
 8011248:	e01c      	b.n	8011284 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011250:	b2db      	uxtb	r3, r3
 8011252:	2b03      	cmp	r3, #3
 8011254:	d10f      	bne.n	8011276 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801125c:	68db      	ldr	r3, [r3, #12]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d009      	beq.n	8011276 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	2200      	movs	r2, #0
 8011266:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011270:	68db      	ldr	r3, [r3, #12]
 8011272:	68f8      	ldr	r0, [r7, #12]
 8011274:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011276:	2180      	movs	r1, #128	; 0x80
 8011278:	68f8      	ldr	r0, [r7, #12]
 801127a:	f001 fd65 	bl	8012d48 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801127e:	68f8      	ldr	r0, [r7, #12]
 8011280:	f001 f8b7 	bl	80123f2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801128a:	2b00      	cmp	r3, #0
 801128c:	d03a      	beq.n	8011304 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801128e:	68f8      	ldr	r0, [r7, #12]
 8011290:	f7ff fe42 	bl	8010f18 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	2200      	movs	r2, #0
 8011298:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801129c:	e032      	b.n	8011304 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801129e:	7afb      	ldrb	r3, [r7, #11]
 80112a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80112a4:	b2db      	uxtb	r3, r3
 80112a6:	4619      	mov	r1, r3
 80112a8:	68f8      	ldr	r0, [r7, #12]
 80112aa:	f000 f97f 	bl	80115ac <USBD_CoreFindEP>
 80112ae:	4603      	mov	r3, r0
 80112b0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80112b2:	7dfb      	ldrb	r3, [r7, #23]
 80112b4:	2bff      	cmp	r3, #255	; 0xff
 80112b6:	d025      	beq.n	8011304 <USBD_LL_DataInStage+0x15a>
 80112b8:	7dfb      	ldrb	r3, [r7, #23]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d122      	bne.n	8011304 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80112c4:	b2db      	uxtb	r3, r3
 80112c6:	2b03      	cmp	r3, #3
 80112c8:	d11c      	bne.n	8011304 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80112ca:	7dfa      	ldrb	r2, [r7, #23]
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	32ae      	adds	r2, #174	; 0xae
 80112d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112d4:	695b      	ldr	r3, [r3, #20]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d014      	beq.n	8011304 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80112da:	7dfa      	ldrb	r2, [r7, #23]
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80112e2:	7dfa      	ldrb	r2, [r7, #23]
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	32ae      	adds	r2, #174	; 0xae
 80112e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112ec:	695b      	ldr	r3, [r3, #20]
 80112ee:	7afa      	ldrb	r2, [r7, #11]
 80112f0:	4611      	mov	r1, r2
 80112f2:	68f8      	ldr	r0, [r7, #12]
 80112f4:	4798      	blx	r3
 80112f6:	4603      	mov	r3, r0
 80112f8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80112fa:	7dbb      	ldrb	r3, [r7, #22]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d001      	beq.n	8011304 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8011300:	7dbb      	ldrb	r3, [r7, #22]
 8011302:	e000      	b.n	8011306 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8011304:	2300      	movs	r3, #0
}
 8011306:	4618      	mov	r0, r3
 8011308:	3718      	adds	r7, #24
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}

0801130e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801130e:	b580      	push	{r7, lr}
 8011310:	b084      	sub	sp, #16
 8011312:	af00      	add	r7, sp, #0
 8011314:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8011316:	2300      	movs	r3, #0
 8011318:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	2201      	movs	r2, #1
 801131e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	2200      	movs	r2, #0
 8011326:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	2200      	movs	r2, #0
 801132e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	2200      	movs	r2, #0
 8011334:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	2200      	movs	r2, #0
 801133c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011346:	2b00      	cmp	r3, #0
 8011348:	d014      	beq.n	8011374 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011350:	685b      	ldr	r3, [r3, #4]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d00e      	beq.n	8011374 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801135c:	685b      	ldr	r3, [r3, #4]
 801135e:	687a      	ldr	r2, [r7, #4]
 8011360:	6852      	ldr	r2, [r2, #4]
 8011362:	b2d2      	uxtb	r2, r2
 8011364:	4611      	mov	r1, r2
 8011366:	6878      	ldr	r0, [r7, #4]
 8011368:	4798      	blx	r3
 801136a:	4603      	mov	r3, r0
 801136c:	2b00      	cmp	r3, #0
 801136e:	d001      	beq.n	8011374 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8011370:	2303      	movs	r3, #3
 8011372:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011374:	2340      	movs	r3, #64	; 0x40
 8011376:	2200      	movs	r2, #0
 8011378:	2100      	movs	r1, #0
 801137a:	6878      	ldr	r0, [r7, #4]
 801137c:	f001 fc9f 	bl	8012cbe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	2201      	movs	r2, #1
 8011384:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	2240      	movs	r2, #64	; 0x40
 801138c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011390:	2340      	movs	r3, #64	; 0x40
 8011392:	2200      	movs	r2, #0
 8011394:	2180      	movs	r1, #128	; 0x80
 8011396:	6878      	ldr	r0, [r7, #4]
 8011398:	f001 fc91 	bl	8012cbe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	2201      	movs	r2, #1
 80113a0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	2240      	movs	r2, #64	; 0x40
 80113a6:	621a      	str	r2, [r3, #32]

  return ret;
 80113a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80113aa:	4618      	mov	r0, r3
 80113ac:	3710      	adds	r7, #16
 80113ae:	46bd      	mov	sp, r7
 80113b0:	bd80      	pop	{r7, pc}

080113b2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80113b2:	b480      	push	{r7}
 80113b4:	b083      	sub	sp, #12
 80113b6:	af00      	add	r7, sp, #0
 80113b8:	6078      	str	r0, [r7, #4]
 80113ba:	460b      	mov	r3, r1
 80113bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	78fa      	ldrb	r2, [r7, #3]
 80113c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80113c4:	2300      	movs	r3, #0
}
 80113c6:	4618      	mov	r0, r3
 80113c8:	370c      	adds	r7, #12
 80113ca:	46bd      	mov	sp, r7
 80113cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d0:	4770      	bx	lr

080113d2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80113d2:	b480      	push	{r7}
 80113d4:	b083      	sub	sp, #12
 80113d6:	af00      	add	r7, sp, #0
 80113d8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80113e0:	b2da      	uxtb	r2, r3
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	2204      	movs	r2, #4
 80113ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80113f0:	2300      	movs	r3, #0
}
 80113f2:	4618      	mov	r0, r3
 80113f4:	370c      	adds	r7, #12
 80113f6:	46bd      	mov	sp, r7
 80113f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fc:	4770      	bx	lr

080113fe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80113fe:	b480      	push	{r7}
 8011400:	b083      	sub	sp, #12
 8011402:	af00      	add	r7, sp, #0
 8011404:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801140c:	b2db      	uxtb	r3, r3
 801140e:	2b04      	cmp	r3, #4
 8011410:	d106      	bne.n	8011420 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8011418:	b2da      	uxtb	r2, r3
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011420:	2300      	movs	r3, #0
}
 8011422:	4618      	mov	r0, r3
 8011424:	370c      	adds	r7, #12
 8011426:	46bd      	mov	sp, r7
 8011428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801142c:	4770      	bx	lr

0801142e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801142e:	b580      	push	{r7, lr}
 8011430:	b082      	sub	sp, #8
 8011432:	af00      	add	r7, sp, #0
 8011434:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801143c:	b2db      	uxtb	r3, r3
 801143e:	2b03      	cmp	r3, #3
 8011440:	d110      	bne.n	8011464 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011448:	2b00      	cmp	r3, #0
 801144a:	d00b      	beq.n	8011464 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011452:	69db      	ldr	r3, [r3, #28]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d005      	beq.n	8011464 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801145e:	69db      	ldr	r3, [r3, #28]
 8011460:	6878      	ldr	r0, [r7, #4]
 8011462:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8011464:	2300      	movs	r3, #0
}
 8011466:	4618      	mov	r0, r3
 8011468:	3708      	adds	r7, #8
 801146a:	46bd      	mov	sp, r7
 801146c:	bd80      	pop	{r7, pc}

0801146e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801146e:	b580      	push	{r7, lr}
 8011470:	b082      	sub	sp, #8
 8011472:	af00      	add	r7, sp, #0
 8011474:	6078      	str	r0, [r7, #4]
 8011476:	460b      	mov	r3, r1
 8011478:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	32ae      	adds	r2, #174	; 0xae
 8011484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d101      	bne.n	8011490 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801148c:	2303      	movs	r3, #3
 801148e:	e01c      	b.n	80114ca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011496:	b2db      	uxtb	r3, r3
 8011498:	2b03      	cmp	r3, #3
 801149a:	d115      	bne.n	80114c8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	32ae      	adds	r2, #174	; 0xae
 80114a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114aa:	6a1b      	ldr	r3, [r3, #32]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d00b      	beq.n	80114c8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	32ae      	adds	r2, #174	; 0xae
 80114ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114be:	6a1b      	ldr	r3, [r3, #32]
 80114c0:	78fa      	ldrb	r2, [r7, #3]
 80114c2:	4611      	mov	r1, r2
 80114c4:	6878      	ldr	r0, [r7, #4]
 80114c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80114c8:	2300      	movs	r3, #0
}
 80114ca:	4618      	mov	r0, r3
 80114cc:	3708      	adds	r7, #8
 80114ce:	46bd      	mov	sp, r7
 80114d0:	bd80      	pop	{r7, pc}

080114d2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80114d2:	b580      	push	{r7, lr}
 80114d4:	b082      	sub	sp, #8
 80114d6:	af00      	add	r7, sp, #0
 80114d8:	6078      	str	r0, [r7, #4]
 80114da:	460b      	mov	r3, r1
 80114dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	32ae      	adds	r2, #174	; 0xae
 80114e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d101      	bne.n	80114f4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80114f0:	2303      	movs	r3, #3
 80114f2:	e01c      	b.n	801152e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80114fa:	b2db      	uxtb	r3, r3
 80114fc:	2b03      	cmp	r3, #3
 80114fe:	d115      	bne.n	801152c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	32ae      	adds	r2, #174	; 0xae
 801150a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011510:	2b00      	cmp	r3, #0
 8011512:	d00b      	beq.n	801152c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	32ae      	adds	r2, #174	; 0xae
 801151e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011524:	78fa      	ldrb	r2, [r7, #3]
 8011526:	4611      	mov	r1, r2
 8011528:	6878      	ldr	r0, [r7, #4]
 801152a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801152c:	2300      	movs	r3, #0
}
 801152e:	4618      	mov	r0, r3
 8011530:	3708      	adds	r7, #8
 8011532:	46bd      	mov	sp, r7
 8011534:	bd80      	pop	{r7, pc}

08011536 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011536:	b480      	push	{r7}
 8011538:	b083      	sub	sp, #12
 801153a:	af00      	add	r7, sp, #0
 801153c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801153e:	2300      	movs	r3, #0
}
 8011540:	4618      	mov	r0, r3
 8011542:	370c      	adds	r7, #12
 8011544:	46bd      	mov	sp, r7
 8011546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154a:	4770      	bx	lr

0801154c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801154c:	b580      	push	{r7, lr}
 801154e:	b084      	sub	sp, #16
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8011554:	2300      	movs	r3, #0
 8011556:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	2201      	movs	r2, #1
 801155c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011566:	2b00      	cmp	r3, #0
 8011568:	d00e      	beq.n	8011588 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011570:	685b      	ldr	r3, [r3, #4]
 8011572:	687a      	ldr	r2, [r7, #4]
 8011574:	6852      	ldr	r2, [r2, #4]
 8011576:	b2d2      	uxtb	r2, r2
 8011578:	4611      	mov	r1, r2
 801157a:	6878      	ldr	r0, [r7, #4]
 801157c:	4798      	blx	r3
 801157e:	4603      	mov	r3, r0
 8011580:	2b00      	cmp	r3, #0
 8011582:	d001      	beq.n	8011588 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8011584:	2303      	movs	r3, #3
 8011586:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011588:	7bfb      	ldrb	r3, [r7, #15]
}
 801158a:	4618      	mov	r0, r3
 801158c:	3710      	adds	r7, #16
 801158e:	46bd      	mov	sp, r7
 8011590:	bd80      	pop	{r7, pc}

08011592 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011592:	b480      	push	{r7}
 8011594:	b083      	sub	sp, #12
 8011596:	af00      	add	r7, sp, #0
 8011598:	6078      	str	r0, [r7, #4]
 801159a:	460b      	mov	r3, r1
 801159c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801159e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80115a0:	4618      	mov	r0, r3
 80115a2:	370c      	adds	r7, #12
 80115a4:	46bd      	mov	sp, r7
 80115a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115aa:	4770      	bx	lr

080115ac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80115ac:	b480      	push	{r7}
 80115ae:	b083      	sub	sp, #12
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	6078      	str	r0, [r7, #4]
 80115b4:	460b      	mov	r3, r1
 80115b6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80115b8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80115ba:	4618      	mov	r0, r3
 80115bc:	370c      	adds	r7, #12
 80115be:	46bd      	mov	sp, r7
 80115c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c4:	4770      	bx	lr

080115c6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80115c6:	b580      	push	{r7, lr}
 80115c8:	b086      	sub	sp, #24
 80115ca:	af00      	add	r7, sp, #0
 80115cc:	6078      	str	r0, [r7, #4]
 80115ce:	460b      	mov	r3, r1
 80115d0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80115da:	2300      	movs	r3, #0
 80115dc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	885b      	ldrh	r3, [r3, #2]
 80115e2:	b29a      	uxth	r2, r3
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	781b      	ldrb	r3, [r3, #0]
 80115e8:	b29b      	uxth	r3, r3
 80115ea:	429a      	cmp	r2, r3
 80115ec:	d920      	bls.n	8011630 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	781b      	ldrb	r3, [r3, #0]
 80115f2:	b29b      	uxth	r3, r3
 80115f4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80115f6:	e013      	b.n	8011620 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80115f8:	f107 030a 	add.w	r3, r7, #10
 80115fc:	4619      	mov	r1, r3
 80115fe:	6978      	ldr	r0, [r7, #20]
 8011600:	f000 f81b 	bl	801163a <USBD_GetNextDesc>
 8011604:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8011606:	697b      	ldr	r3, [r7, #20]
 8011608:	785b      	ldrb	r3, [r3, #1]
 801160a:	2b05      	cmp	r3, #5
 801160c:	d108      	bne.n	8011620 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801160e:	697b      	ldr	r3, [r7, #20]
 8011610:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8011612:	693b      	ldr	r3, [r7, #16]
 8011614:	789b      	ldrb	r3, [r3, #2]
 8011616:	78fa      	ldrb	r2, [r7, #3]
 8011618:	429a      	cmp	r2, r3
 801161a:	d008      	beq.n	801162e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801161c:	2300      	movs	r3, #0
 801161e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	885b      	ldrh	r3, [r3, #2]
 8011624:	b29a      	uxth	r2, r3
 8011626:	897b      	ldrh	r3, [r7, #10]
 8011628:	429a      	cmp	r2, r3
 801162a:	d8e5      	bhi.n	80115f8 <USBD_GetEpDesc+0x32>
 801162c:	e000      	b.n	8011630 <USBD_GetEpDesc+0x6a>
          break;
 801162e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8011630:	693b      	ldr	r3, [r7, #16]
}
 8011632:	4618      	mov	r0, r3
 8011634:	3718      	adds	r7, #24
 8011636:	46bd      	mov	sp, r7
 8011638:	bd80      	pop	{r7, pc}

0801163a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801163a:	b480      	push	{r7}
 801163c:	b085      	sub	sp, #20
 801163e:	af00      	add	r7, sp, #0
 8011640:	6078      	str	r0, [r7, #4]
 8011642:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8011648:	683b      	ldr	r3, [r7, #0]
 801164a:	881a      	ldrh	r2, [r3, #0]
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	781b      	ldrb	r3, [r3, #0]
 8011650:	b29b      	uxth	r3, r3
 8011652:	4413      	add	r3, r2
 8011654:	b29a      	uxth	r2, r3
 8011656:	683b      	ldr	r3, [r7, #0]
 8011658:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	781b      	ldrb	r3, [r3, #0]
 801165e:	461a      	mov	r2, r3
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	4413      	add	r3, r2
 8011664:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011666:	68fb      	ldr	r3, [r7, #12]
}
 8011668:	4618      	mov	r0, r3
 801166a:	3714      	adds	r7, #20
 801166c:	46bd      	mov	sp, r7
 801166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011672:	4770      	bx	lr

08011674 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011674:	b480      	push	{r7}
 8011676:	b087      	sub	sp, #28
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011680:	697b      	ldr	r3, [r7, #20]
 8011682:	781b      	ldrb	r3, [r3, #0]
 8011684:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011686:	697b      	ldr	r3, [r7, #20]
 8011688:	3301      	adds	r3, #1
 801168a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801168c:	697b      	ldr	r3, [r7, #20]
 801168e:	781b      	ldrb	r3, [r3, #0]
 8011690:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011692:	8a3b      	ldrh	r3, [r7, #16]
 8011694:	021b      	lsls	r3, r3, #8
 8011696:	b21a      	sxth	r2, r3
 8011698:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801169c:	4313      	orrs	r3, r2
 801169e:	b21b      	sxth	r3, r3
 80116a0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80116a2:	89fb      	ldrh	r3, [r7, #14]
}
 80116a4:	4618      	mov	r0, r3
 80116a6:	371c      	adds	r7, #28
 80116a8:	46bd      	mov	sp, r7
 80116aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ae:	4770      	bx	lr

080116b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b084      	sub	sp, #16
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	6078      	str	r0, [r7, #4]
 80116b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80116ba:	2300      	movs	r3, #0
 80116bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80116be:	683b      	ldr	r3, [r7, #0]
 80116c0:	781b      	ldrb	r3, [r3, #0]
 80116c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80116c6:	2b40      	cmp	r3, #64	; 0x40
 80116c8:	d005      	beq.n	80116d6 <USBD_StdDevReq+0x26>
 80116ca:	2b40      	cmp	r3, #64	; 0x40
 80116cc:	d857      	bhi.n	801177e <USBD_StdDevReq+0xce>
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d00f      	beq.n	80116f2 <USBD_StdDevReq+0x42>
 80116d2:	2b20      	cmp	r3, #32
 80116d4:	d153      	bne.n	801177e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	32ae      	adds	r2, #174	; 0xae
 80116e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116e4:	689b      	ldr	r3, [r3, #8]
 80116e6:	6839      	ldr	r1, [r7, #0]
 80116e8:	6878      	ldr	r0, [r7, #4]
 80116ea:	4798      	blx	r3
 80116ec:	4603      	mov	r3, r0
 80116ee:	73fb      	strb	r3, [r7, #15]
      break;
 80116f0:	e04a      	b.n	8011788 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80116f2:	683b      	ldr	r3, [r7, #0]
 80116f4:	785b      	ldrb	r3, [r3, #1]
 80116f6:	2b09      	cmp	r3, #9
 80116f8:	d83b      	bhi.n	8011772 <USBD_StdDevReq+0xc2>
 80116fa:	a201      	add	r2, pc, #4	; (adr r2, 8011700 <USBD_StdDevReq+0x50>)
 80116fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011700:	08011755 	.word	0x08011755
 8011704:	08011769 	.word	0x08011769
 8011708:	08011773 	.word	0x08011773
 801170c:	0801175f 	.word	0x0801175f
 8011710:	08011773 	.word	0x08011773
 8011714:	08011733 	.word	0x08011733
 8011718:	08011729 	.word	0x08011729
 801171c:	08011773 	.word	0x08011773
 8011720:	0801174b 	.word	0x0801174b
 8011724:	0801173d 	.word	0x0801173d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011728:	6839      	ldr	r1, [r7, #0]
 801172a:	6878      	ldr	r0, [r7, #4]
 801172c:	f000 fa3c 	bl	8011ba8 <USBD_GetDescriptor>
          break;
 8011730:	e024      	b.n	801177c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011732:	6839      	ldr	r1, [r7, #0]
 8011734:	6878      	ldr	r0, [r7, #4]
 8011736:	f000 fba1 	bl	8011e7c <USBD_SetAddress>
          break;
 801173a:	e01f      	b.n	801177c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801173c:	6839      	ldr	r1, [r7, #0]
 801173e:	6878      	ldr	r0, [r7, #4]
 8011740:	f000 fbe0 	bl	8011f04 <USBD_SetConfig>
 8011744:	4603      	mov	r3, r0
 8011746:	73fb      	strb	r3, [r7, #15]
          break;
 8011748:	e018      	b.n	801177c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801174a:	6839      	ldr	r1, [r7, #0]
 801174c:	6878      	ldr	r0, [r7, #4]
 801174e:	f000 fc83 	bl	8012058 <USBD_GetConfig>
          break;
 8011752:	e013      	b.n	801177c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011754:	6839      	ldr	r1, [r7, #0]
 8011756:	6878      	ldr	r0, [r7, #4]
 8011758:	f000 fcb4 	bl	80120c4 <USBD_GetStatus>
          break;
 801175c:	e00e      	b.n	801177c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801175e:	6839      	ldr	r1, [r7, #0]
 8011760:	6878      	ldr	r0, [r7, #4]
 8011762:	f000 fce3 	bl	801212c <USBD_SetFeature>
          break;
 8011766:	e009      	b.n	801177c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011768:	6839      	ldr	r1, [r7, #0]
 801176a:	6878      	ldr	r0, [r7, #4]
 801176c:	f000 fd07 	bl	801217e <USBD_ClrFeature>
          break;
 8011770:	e004      	b.n	801177c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8011772:	6839      	ldr	r1, [r7, #0]
 8011774:	6878      	ldr	r0, [r7, #4]
 8011776:	f000 fd5e 	bl	8012236 <USBD_CtlError>
          break;
 801177a:	bf00      	nop
      }
      break;
 801177c:	e004      	b.n	8011788 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801177e:	6839      	ldr	r1, [r7, #0]
 8011780:	6878      	ldr	r0, [r7, #4]
 8011782:	f000 fd58 	bl	8012236 <USBD_CtlError>
      break;
 8011786:	bf00      	nop
  }

  return ret;
 8011788:	7bfb      	ldrb	r3, [r7, #15]
}
 801178a:	4618      	mov	r0, r3
 801178c:	3710      	adds	r7, #16
 801178e:	46bd      	mov	sp, r7
 8011790:	bd80      	pop	{r7, pc}
 8011792:	bf00      	nop

08011794 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b084      	sub	sp, #16
 8011798:	af00      	add	r7, sp, #0
 801179a:	6078      	str	r0, [r7, #4]
 801179c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801179e:	2300      	movs	r3, #0
 80117a0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80117a2:	683b      	ldr	r3, [r7, #0]
 80117a4:	781b      	ldrb	r3, [r3, #0]
 80117a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80117aa:	2b40      	cmp	r3, #64	; 0x40
 80117ac:	d005      	beq.n	80117ba <USBD_StdItfReq+0x26>
 80117ae:	2b40      	cmp	r3, #64	; 0x40
 80117b0:	d852      	bhi.n	8011858 <USBD_StdItfReq+0xc4>
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d001      	beq.n	80117ba <USBD_StdItfReq+0x26>
 80117b6:	2b20      	cmp	r3, #32
 80117b8:	d14e      	bne.n	8011858 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80117c0:	b2db      	uxtb	r3, r3
 80117c2:	3b01      	subs	r3, #1
 80117c4:	2b02      	cmp	r3, #2
 80117c6:	d840      	bhi.n	801184a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80117c8:	683b      	ldr	r3, [r7, #0]
 80117ca:	889b      	ldrh	r3, [r3, #4]
 80117cc:	b2db      	uxtb	r3, r3
 80117ce:	2b01      	cmp	r3, #1
 80117d0:	d836      	bhi.n	8011840 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80117d2:	683b      	ldr	r3, [r7, #0]
 80117d4:	889b      	ldrh	r3, [r3, #4]
 80117d6:	b2db      	uxtb	r3, r3
 80117d8:	4619      	mov	r1, r3
 80117da:	6878      	ldr	r0, [r7, #4]
 80117dc:	f7ff fed9 	bl	8011592 <USBD_CoreFindIF>
 80117e0:	4603      	mov	r3, r0
 80117e2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80117e4:	7bbb      	ldrb	r3, [r7, #14]
 80117e6:	2bff      	cmp	r3, #255	; 0xff
 80117e8:	d01d      	beq.n	8011826 <USBD_StdItfReq+0x92>
 80117ea:	7bbb      	ldrb	r3, [r7, #14]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d11a      	bne.n	8011826 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80117f0:	7bba      	ldrb	r2, [r7, #14]
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	32ae      	adds	r2, #174	; 0xae
 80117f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117fa:	689b      	ldr	r3, [r3, #8]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d00f      	beq.n	8011820 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8011800:	7bba      	ldrb	r2, [r7, #14]
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011808:	7bba      	ldrb	r2, [r7, #14]
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	32ae      	adds	r2, #174	; 0xae
 801180e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011812:	689b      	ldr	r3, [r3, #8]
 8011814:	6839      	ldr	r1, [r7, #0]
 8011816:	6878      	ldr	r0, [r7, #4]
 8011818:	4798      	blx	r3
 801181a:	4603      	mov	r3, r0
 801181c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801181e:	e004      	b.n	801182a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8011820:	2303      	movs	r3, #3
 8011822:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011824:	e001      	b.n	801182a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8011826:	2303      	movs	r3, #3
 8011828:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801182a:	683b      	ldr	r3, [r7, #0]
 801182c:	88db      	ldrh	r3, [r3, #6]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d110      	bne.n	8011854 <USBD_StdItfReq+0xc0>
 8011832:	7bfb      	ldrb	r3, [r7, #15]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d10d      	bne.n	8011854 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011838:	6878      	ldr	r0, [r7, #4]
 801183a:	f000 fdc7 	bl	80123cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801183e:	e009      	b.n	8011854 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8011840:	6839      	ldr	r1, [r7, #0]
 8011842:	6878      	ldr	r0, [r7, #4]
 8011844:	f000 fcf7 	bl	8012236 <USBD_CtlError>
          break;
 8011848:	e004      	b.n	8011854 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801184a:	6839      	ldr	r1, [r7, #0]
 801184c:	6878      	ldr	r0, [r7, #4]
 801184e:	f000 fcf2 	bl	8012236 <USBD_CtlError>
          break;
 8011852:	e000      	b.n	8011856 <USBD_StdItfReq+0xc2>
          break;
 8011854:	bf00      	nop
      }
      break;
 8011856:	e004      	b.n	8011862 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8011858:	6839      	ldr	r1, [r7, #0]
 801185a:	6878      	ldr	r0, [r7, #4]
 801185c:	f000 fceb 	bl	8012236 <USBD_CtlError>
      break;
 8011860:	bf00      	nop
  }

  return ret;
 8011862:	7bfb      	ldrb	r3, [r7, #15]
}
 8011864:	4618      	mov	r0, r3
 8011866:	3710      	adds	r7, #16
 8011868:	46bd      	mov	sp, r7
 801186a:	bd80      	pop	{r7, pc}

0801186c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801186c:	b580      	push	{r7, lr}
 801186e:	b084      	sub	sp, #16
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
 8011874:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8011876:	2300      	movs	r3, #0
 8011878:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801187a:	683b      	ldr	r3, [r7, #0]
 801187c:	889b      	ldrh	r3, [r3, #4]
 801187e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011880:	683b      	ldr	r3, [r7, #0]
 8011882:	781b      	ldrb	r3, [r3, #0]
 8011884:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011888:	2b40      	cmp	r3, #64	; 0x40
 801188a:	d007      	beq.n	801189c <USBD_StdEPReq+0x30>
 801188c:	2b40      	cmp	r3, #64	; 0x40
 801188e:	f200 817f 	bhi.w	8011b90 <USBD_StdEPReq+0x324>
 8011892:	2b00      	cmp	r3, #0
 8011894:	d02a      	beq.n	80118ec <USBD_StdEPReq+0x80>
 8011896:	2b20      	cmp	r3, #32
 8011898:	f040 817a 	bne.w	8011b90 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801189c:	7bbb      	ldrb	r3, [r7, #14]
 801189e:	4619      	mov	r1, r3
 80118a0:	6878      	ldr	r0, [r7, #4]
 80118a2:	f7ff fe83 	bl	80115ac <USBD_CoreFindEP>
 80118a6:	4603      	mov	r3, r0
 80118a8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80118aa:	7b7b      	ldrb	r3, [r7, #13]
 80118ac:	2bff      	cmp	r3, #255	; 0xff
 80118ae:	f000 8174 	beq.w	8011b9a <USBD_StdEPReq+0x32e>
 80118b2:	7b7b      	ldrb	r3, [r7, #13]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	f040 8170 	bne.w	8011b9a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80118ba:	7b7a      	ldrb	r2, [r7, #13]
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80118c2:	7b7a      	ldrb	r2, [r7, #13]
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	32ae      	adds	r2, #174	; 0xae
 80118c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118cc:	689b      	ldr	r3, [r3, #8]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	f000 8163 	beq.w	8011b9a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80118d4:	7b7a      	ldrb	r2, [r7, #13]
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	32ae      	adds	r2, #174	; 0xae
 80118da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118de:	689b      	ldr	r3, [r3, #8]
 80118e0:	6839      	ldr	r1, [r7, #0]
 80118e2:	6878      	ldr	r0, [r7, #4]
 80118e4:	4798      	blx	r3
 80118e6:	4603      	mov	r3, r0
 80118e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80118ea:	e156      	b.n	8011b9a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80118ec:	683b      	ldr	r3, [r7, #0]
 80118ee:	785b      	ldrb	r3, [r3, #1]
 80118f0:	2b03      	cmp	r3, #3
 80118f2:	d008      	beq.n	8011906 <USBD_StdEPReq+0x9a>
 80118f4:	2b03      	cmp	r3, #3
 80118f6:	f300 8145 	bgt.w	8011b84 <USBD_StdEPReq+0x318>
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	f000 809b 	beq.w	8011a36 <USBD_StdEPReq+0x1ca>
 8011900:	2b01      	cmp	r3, #1
 8011902:	d03c      	beq.n	801197e <USBD_StdEPReq+0x112>
 8011904:	e13e      	b.n	8011b84 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801190c:	b2db      	uxtb	r3, r3
 801190e:	2b02      	cmp	r3, #2
 8011910:	d002      	beq.n	8011918 <USBD_StdEPReq+0xac>
 8011912:	2b03      	cmp	r3, #3
 8011914:	d016      	beq.n	8011944 <USBD_StdEPReq+0xd8>
 8011916:	e02c      	b.n	8011972 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011918:	7bbb      	ldrb	r3, [r7, #14]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d00d      	beq.n	801193a <USBD_StdEPReq+0xce>
 801191e:	7bbb      	ldrb	r3, [r7, #14]
 8011920:	2b80      	cmp	r3, #128	; 0x80
 8011922:	d00a      	beq.n	801193a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011924:	7bbb      	ldrb	r3, [r7, #14]
 8011926:	4619      	mov	r1, r3
 8011928:	6878      	ldr	r0, [r7, #4]
 801192a:	f001 fa0d 	bl	8012d48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801192e:	2180      	movs	r1, #128	; 0x80
 8011930:	6878      	ldr	r0, [r7, #4]
 8011932:	f001 fa09 	bl	8012d48 <USBD_LL_StallEP>
 8011936:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011938:	e020      	b.n	801197c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801193a:	6839      	ldr	r1, [r7, #0]
 801193c:	6878      	ldr	r0, [r7, #4]
 801193e:	f000 fc7a 	bl	8012236 <USBD_CtlError>
              break;
 8011942:	e01b      	b.n	801197c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011944:	683b      	ldr	r3, [r7, #0]
 8011946:	885b      	ldrh	r3, [r3, #2]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d10e      	bne.n	801196a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801194c:	7bbb      	ldrb	r3, [r7, #14]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d00b      	beq.n	801196a <USBD_StdEPReq+0xfe>
 8011952:	7bbb      	ldrb	r3, [r7, #14]
 8011954:	2b80      	cmp	r3, #128	; 0x80
 8011956:	d008      	beq.n	801196a <USBD_StdEPReq+0xfe>
 8011958:	683b      	ldr	r3, [r7, #0]
 801195a:	88db      	ldrh	r3, [r3, #6]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d104      	bne.n	801196a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011960:	7bbb      	ldrb	r3, [r7, #14]
 8011962:	4619      	mov	r1, r3
 8011964:	6878      	ldr	r0, [r7, #4]
 8011966:	f001 f9ef 	bl	8012d48 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801196a:	6878      	ldr	r0, [r7, #4]
 801196c:	f000 fd2e 	bl	80123cc <USBD_CtlSendStatus>

              break;
 8011970:	e004      	b.n	801197c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8011972:	6839      	ldr	r1, [r7, #0]
 8011974:	6878      	ldr	r0, [r7, #4]
 8011976:	f000 fc5e 	bl	8012236 <USBD_CtlError>
              break;
 801197a:	bf00      	nop
          }
          break;
 801197c:	e107      	b.n	8011b8e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011984:	b2db      	uxtb	r3, r3
 8011986:	2b02      	cmp	r3, #2
 8011988:	d002      	beq.n	8011990 <USBD_StdEPReq+0x124>
 801198a:	2b03      	cmp	r3, #3
 801198c:	d016      	beq.n	80119bc <USBD_StdEPReq+0x150>
 801198e:	e04b      	b.n	8011a28 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011990:	7bbb      	ldrb	r3, [r7, #14]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d00d      	beq.n	80119b2 <USBD_StdEPReq+0x146>
 8011996:	7bbb      	ldrb	r3, [r7, #14]
 8011998:	2b80      	cmp	r3, #128	; 0x80
 801199a:	d00a      	beq.n	80119b2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801199c:	7bbb      	ldrb	r3, [r7, #14]
 801199e:	4619      	mov	r1, r3
 80119a0:	6878      	ldr	r0, [r7, #4]
 80119a2:	f001 f9d1 	bl	8012d48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80119a6:	2180      	movs	r1, #128	; 0x80
 80119a8:	6878      	ldr	r0, [r7, #4]
 80119aa:	f001 f9cd 	bl	8012d48 <USBD_LL_StallEP>
 80119ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80119b0:	e040      	b.n	8011a34 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80119b2:	6839      	ldr	r1, [r7, #0]
 80119b4:	6878      	ldr	r0, [r7, #4]
 80119b6:	f000 fc3e 	bl	8012236 <USBD_CtlError>
              break;
 80119ba:	e03b      	b.n	8011a34 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80119bc:	683b      	ldr	r3, [r7, #0]
 80119be:	885b      	ldrh	r3, [r3, #2]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d136      	bne.n	8011a32 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80119c4:	7bbb      	ldrb	r3, [r7, #14]
 80119c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d004      	beq.n	80119d8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80119ce:	7bbb      	ldrb	r3, [r7, #14]
 80119d0:	4619      	mov	r1, r3
 80119d2:	6878      	ldr	r0, [r7, #4]
 80119d4:	f001 f9d7 	bl	8012d86 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80119d8:	6878      	ldr	r0, [r7, #4]
 80119da:	f000 fcf7 	bl	80123cc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80119de:	7bbb      	ldrb	r3, [r7, #14]
 80119e0:	4619      	mov	r1, r3
 80119e2:	6878      	ldr	r0, [r7, #4]
 80119e4:	f7ff fde2 	bl	80115ac <USBD_CoreFindEP>
 80119e8:	4603      	mov	r3, r0
 80119ea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80119ec:	7b7b      	ldrb	r3, [r7, #13]
 80119ee:	2bff      	cmp	r3, #255	; 0xff
 80119f0:	d01f      	beq.n	8011a32 <USBD_StdEPReq+0x1c6>
 80119f2:	7b7b      	ldrb	r3, [r7, #13]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d11c      	bne.n	8011a32 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80119f8:	7b7a      	ldrb	r2, [r7, #13]
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8011a00:	7b7a      	ldrb	r2, [r7, #13]
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	32ae      	adds	r2, #174	; 0xae
 8011a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a0a:	689b      	ldr	r3, [r3, #8]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d010      	beq.n	8011a32 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011a10:	7b7a      	ldrb	r2, [r7, #13]
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	32ae      	adds	r2, #174	; 0xae
 8011a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a1a:	689b      	ldr	r3, [r3, #8]
 8011a1c:	6839      	ldr	r1, [r7, #0]
 8011a1e:	6878      	ldr	r0, [r7, #4]
 8011a20:	4798      	blx	r3
 8011a22:	4603      	mov	r3, r0
 8011a24:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8011a26:	e004      	b.n	8011a32 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8011a28:	6839      	ldr	r1, [r7, #0]
 8011a2a:	6878      	ldr	r0, [r7, #4]
 8011a2c:	f000 fc03 	bl	8012236 <USBD_CtlError>
              break;
 8011a30:	e000      	b.n	8011a34 <USBD_StdEPReq+0x1c8>
              break;
 8011a32:	bf00      	nop
          }
          break;
 8011a34:	e0ab      	b.n	8011b8e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a3c:	b2db      	uxtb	r3, r3
 8011a3e:	2b02      	cmp	r3, #2
 8011a40:	d002      	beq.n	8011a48 <USBD_StdEPReq+0x1dc>
 8011a42:	2b03      	cmp	r3, #3
 8011a44:	d032      	beq.n	8011aac <USBD_StdEPReq+0x240>
 8011a46:	e097      	b.n	8011b78 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011a48:	7bbb      	ldrb	r3, [r7, #14]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d007      	beq.n	8011a5e <USBD_StdEPReq+0x1f2>
 8011a4e:	7bbb      	ldrb	r3, [r7, #14]
 8011a50:	2b80      	cmp	r3, #128	; 0x80
 8011a52:	d004      	beq.n	8011a5e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011a54:	6839      	ldr	r1, [r7, #0]
 8011a56:	6878      	ldr	r0, [r7, #4]
 8011a58:	f000 fbed 	bl	8012236 <USBD_CtlError>
                break;
 8011a5c:	e091      	b.n	8011b82 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011a5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	da0b      	bge.n	8011a7e <USBD_StdEPReq+0x212>
 8011a66:	7bbb      	ldrb	r3, [r7, #14]
 8011a68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011a6c:	4613      	mov	r3, r2
 8011a6e:	009b      	lsls	r3, r3, #2
 8011a70:	4413      	add	r3, r2
 8011a72:	009b      	lsls	r3, r3, #2
 8011a74:	3310      	adds	r3, #16
 8011a76:	687a      	ldr	r2, [r7, #4]
 8011a78:	4413      	add	r3, r2
 8011a7a:	3304      	adds	r3, #4
 8011a7c:	e00b      	b.n	8011a96 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011a7e:	7bbb      	ldrb	r3, [r7, #14]
 8011a80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011a84:	4613      	mov	r3, r2
 8011a86:	009b      	lsls	r3, r3, #2
 8011a88:	4413      	add	r3, r2
 8011a8a:	009b      	lsls	r3, r3, #2
 8011a8c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011a90:	687a      	ldr	r2, [r7, #4]
 8011a92:	4413      	add	r3, r2
 8011a94:	3304      	adds	r3, #4
 8011a96:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011a98:	68bb      	ldr	r3, [r7, #8]
 8011a9a:	2200      	movs	r2, #0
 8011a9c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011a9e:	68bb      	ldr	r3, [r7, #8]
 8011aa0:	2202      	movs	r2, #2
 8011aa2:	4619      	mov	r1, r3
 8011aa4:	6878      	ldr	r0, [r7, #4]
 8011aa6:	f000 fc37 	bl	8012318 <USBD_CtlSendData>
              break;
 8011aaa:	e06a      	b.n	8011b82 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011aac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	da11      	bge.n	8011ad8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011ab4:	7bbb      	ldrb	r3, [r7, #14]
 8011ab6:	f003 020f 	and.w	r2, r3, #15
 8011aba:	6879      	ldr	r1, [r7, #4]
 8011abc:	4613      	mov	r3, r2
 8011abe:	009b      	lsls	r3, r3, #2
 8011ac0:	4413      	add	r3, r2
 8011ac2:	009b      	lsls	r3, r3, #2
 8011ac4:	440b      	add	r3, r1
 8011ac6:	3324      	adds	r3, #36	; 0x24
 8011ac8:	881b      	ldrh	r3, [r3, #0]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d117      	bne.n	8011afe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011ace:	6839      	ldr	r1, [r7, #0]
 8011ad0:	6878      	ldr	r0, [r7, #4]
 8011ad2:	f000 fbb0 	bl	8012236 <USBD_CtlError>
                  break;
 8011ad6:	e054      	b.n	8011b82 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011ad8:	7bbb      	ldrb	r3, [r7, #14]
 8011ada:	f003 020f 	and.w	r2, r3, #15
 8011ade:	6879      	ldr	r1, [r7, #4]
 8011ae0:	4613      	mov	r3, r2
 8011ae2:	009b      	lsls	r3, r3, #2
 8011ae4:	4413      	add	r3, r2
 8011ae6:	009b      	lsls	r3, r3, #2
 8011ae8:	440b      	add	r3, r1
 8011aea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011aee:	881b      	ldrh	r3, [r3, #0]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d104      	bne.n	8011afe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011af4:	6839      	ldr	r1, [r7, #0]
 8011af6:	6878      	ldr	r0, [r7, #4]
 8011af8:	f000 fb9d 	bl	8012236 <USBD_CtlError>
                  break;
 8011afc:	e041      	b.n	8011b82 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011afe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	da0b      	bge.n	8011b1e <USBD_StdEPReq+0x2b2>
 8011b06:	7bbb      	ldrb	r3, [r7, #14]
 8011b08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011b0c:	4613      	mov	r3, r2
 8011b0e:	009b      	lsls	r3, r3, #2
 8011b10:	4413      	add	r3, r2
 8011b12:	009b      	lsls	r3, r3, #2
 8011b14:	3310      	adds	r3, #16
 8011b16:	687a      	ldr	r2, [r7, #4]
 8011b18:	4413      	add	r3, r2
 8011b1a:	3304      	adds	r3, #4
 8011b1c:	e00b      	b.n	8011b36 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011b1e:	7bbb      	ldrb	r3, [r7, #14]
 8011b20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011b24:	4613      	mov	r3, r2
 8011b26:	009b      	lsls	r3, r3, #2
 8011b28:	4413      	add	r3, r2
 8011b2a:	009b      	lsls	r3, r3, #2
 8011b2c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011b30:	687a      	ldr	r2, [r7, #4]
 8011b32:	4413      	add	r3, r2
 8011b34:	3304      	adds	r3, #4
 8011b36:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011b38:	7bbb      	ldrb	r3, [r7, #14]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d002      	beq.n	8011b44 <USBD_StdEPReq+0x2d8>
 8011b3e:	7bbb      	ldrb	r3, [r7, #14]
 8011b40:	2b80      	cmp	r3, #128	; 0x80
 8011b42:	d103      	bne.n	8011b4c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8011b44:	68bb      	ldr	r3, [r7, #8]
 8011b46:	2200      	movs	r2, #0
 8011b48:	601a      	str	r2, [r3, #0]
 8011b4a:	e00e      	b.n	8011b6a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011b4c:	7bbb      	ldrb	r3, [r7, #14]
 8011b4e:	4619      	mov	r1, r3
 8011b50:	6878      	ldr	r0, [r7, #4]
 8011b52:	f001 f937 	bl	8012dc4 <USBD_LL_IsStallEP>
 8011b56:	4603      	mov	r3, r0
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d003      	beq.n	8011b64 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8011b5c:	68bb      	ldr	r3, [r7, #8]
 8011b5e:	2201      	movs	r2, #1
 8011b60:	601a      	str	r2, [r3, #0]
 8011b62:	e002      	b.n	8011b6a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8011b64:	68bb      	ldr	r3, [r7, #8]
 8011b66:	2200      	movs	r2, #0
 8011b68:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011b6a:	68bb      	ldr	r3, [r7, #8]
 8011b6c:	2202      	movs	r2, #2
 8011b6e:	4619      	mov	r1, r3
 8011b70:	6878      	ldr	r0, [r7, #4]
 8011b72:	f000 fbd1 	bl	8012318 <USBD_CtlSendData>
              break;
 8011b76:	e004      	b.n	8011b82 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8011b78:	6839      	ldr	r1, [r7, #0]
 8011b7a:	6878      	ldr	r0, [r7, #4]
 8011b7c:	f000 fb5b 	bl	8012236 <USBD_CtlError>
              break;
 8011b80:	bf00      	nop
          }
          break;
 8011b82:	e004      	b.n	8011b8e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8011b84:	6839      	ldr	r1, [r7, #0]
 8011b86:	6878      	ldr	r0, [r7, #4]
 8011b88:	f000 fb55 	bl	8012236 <USBD_CtlError>
          break;
 8011b8c:	bf00      	nop
      }
      break;
 8011b8e:	e005      	b.n	8011b9c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8011b90:	6839      	ldr	r1, [r7, #0]
 8011b92:	6878      	ldr	r0, [r7, #4]
 8011b94:	f000 fb4f 	bl	8012236 <USBD_CtlError>
      break;
 8011b98:	e000      	b.n	8011b9c <USBD_StdEPReq+0x330>
      break;
 8011b9a:	bf00      	nop
  }

  return ret;
 8011b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	3710      	adds	r7, #16
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	bd80      	pop	{r7, pc}
	...

08011ba8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	b084      	sub	sp, #16
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]
 8011bb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011bba:	2300      	movs	r3, #0
 8011bbc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011bbe:	683b      	ldr	r3, [r7, #0]
 8011bc0:	885b      	ldrh	r3, [r3, #2]
 8011bc2:	0a1b      	lsrs	r3, r3, #8
 8011bc4:	b29b      	uxth	r3, r3
 8011bc6:	3b01      	subs	r3, #1
 8011bc8:	2b06      	cmp	r3, #6
 8011bca:	f200 8128 	bhi.w	8011e1e <USBD_GetDescriptor+0x276>
 8011bce:	a201      	add	r2, pc, #4	; (adr r2, 8011bd4 <USBD_GetDescriptor+0x2c>)
 8011bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bd4:	08011bf1 	.word	0x08011bf1
 8011bd8:	08011c09 	.word	0x08011c09
 8011bdc:	08011c49 	.word	0x08011c49
 8011be0:	08011e1f 	.word	0x08011e1f
 8011be4:	08011e1f 	.word	0x08011e1f
 8011be8:	08011dbf 	.word	0x08011dbf
 8011bec:	08011deb 	.word	0x08011deb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	687a      	ldr	r2, [r7, #4]
 8011bfa:	7c12      	ldrb	r2, [r2, #16]
 8011bfc:	f107 0108 	add.w	r1, r7, #8
 8011c00:	4610      	mov	r0, r2
 8011c02:	4798      	blx	r3
 8011c04:	60f8      	str	r0, [r7, #12]
      break;
 8011c06:	e112      	b.n	8011e2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	7c1b      	ldrb	r3, [r3, #16]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d10d      	bne.n	8011c2c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c18:	f107 0208 	add.w	r2, r7, #8
 8011c1c:	4610      	mov	r0, r2
 8011c1e:	4798      	blx	r3
 8011c20:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	3301      	adds	r3, #1
 8011c26:	2202      	movs	r2, #2
 8011c28:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011c2a:	e100      	b.n	8011e2e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c34:	f107 0208 	add.w	r2, r7, #8
 8011c38:	4610      	mov	r0, r2
 8011c3a:	4798      	blx	r3
 8011c3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	3301      	adds	r3, #1
 8011c42:	2202      	movs	r2, #2
 8011c44:	701a      	strb	r2, [r3, #0]
      break;
 8011c46:	e0f2      	b.n	8011e2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011c48:	683b      	ldr	r3, [r7, #0]
 8011c4a:	885b      	ldrh	r3, [r3, #2]
 8011c4c:	b2db      	uxtb	r3, r3
 8011c4e:	2b05      	cmp	r3, #5
 8011c50:	f200 80ac 	bhi.w	8011dac <USBD_GetDescriptor+0x204>
 8011c54:	a201      	add	r2, pc, #4	; (adr r2, 8011c5c <USBD_GetDescriptor+0xb4>)
 8011c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c5a:	bf00      	nop
 8011c5c:	08011c75 	.word	0x08011c75
 8011c60:	08011ca9 	.word	0x08011ca9
 8011c64:	08011cdd 	.word	0x08011cdd
 8011c68:	08011d11 	.word	0x08011d11
 8011c6c:	08011d45 	.word	0x08011d45
 8011c70:	08011d79 	.word	0x08011d79
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c7a:	685b      	ldr	r3, [r3, #4]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d00b      	beq.n	8011c98 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c86:	685b      	ldr	r3, [r3, #4]
 8011c88:	687a      	ldr	r2, [r7, #4]
 8011c8a:	7c12      	ldrb	r2, [r2, #16]
 8011c8c:	f107 0108 	add.w	r1, r7, #8
 8011c90:	4610      	mov	r0, r2
 8011c92:	4798      	blx	r3
 8011c94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011c96:	e091      	b.n	8011dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011c98:	6839      	ldr	r1, [r7, #0]
 8011c9a:	6878      	ldr	r0, [r7, #4]
 8011c9c:	f000 facb 	bl	8012236 <USBD_CtlError>
            err++;
 8011ca0:	7afb      	ldrb	r3, [r7, #11]
 8011ca2:	3301      	adds	r3, #1
 8011ca4:	72fb      	strb	r3, [r7, #11]
          break;
 8011ca6:	e089      	b.n	8011dbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011cae:	689b      	ldr	r3, [r3, #8]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d00b      	beq.n	8011ccc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011cba:	689b      	ldr	r3, [r3, #8]
 8011cbc:	687a      	ldr	r2, [r7, #4]
 8011cbe:	7c12      	ldrb	r2, [r2, #16]
 8011cc0:	f107 0108 	add.w	r1, r7, #8
 8011cc4:	4610      	mov	r0, r2
 8011cc6:	4798      	blx	r3
 8011cc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011cca:	e077      	b.n	8011dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011ccc:	6839      	ldr	r1, [r7, #0]
 8011cce:	6878      	ldr	r0, [r7, #4]
 8011cd0:	f000 fab1 	bl	8012236 <USBD_CtlError>
            err++;
 8011cd4:	7afb      	ldrb	r3, [r7, #11]
 8011cd6:	3301      	adds	r3, #1
 8011cd8:	72fb      	strb	r3, [r7, #11]
          break;
 8011cda:	e06f      	b.n	8011dbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ce2:	68db      	ldr	r3, [r3, #12]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d00b      	beq.n	8011d00 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011cee:	68db      	ldr	r3, [r3, #12]
 8011cf0:	687a      	ldr	r2, [r7, #4]
 8011cf2:	7c12      	ldrb	r2, [r2, #16]
 8011cf4:	f107 0108 	add.w	r1, r7, #8
 8011cf8:	4610      	mov	r0, r2
 8011cfa:	4798      	blx	r3
 8011cfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011cfe:	e05d      	b.n	8011dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011d00:	6839      	ldr	r1, [r7, #0]
 8011d02:	6878      	ldr	r0, [r7, #4]
 8011d04:	f000 fa97 	bl	8012236 <USBD_CtlError>
            err++;
 8011d08:	7afb      	ldrb	r3, [r7, #11]
 8011d0a:	3301      	adds	r3, #1
 8011d0c:	72fb      	strb	r3, [r7, #11]
          break;
 8011d0e:	e055      	b.n	8011dbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d16:	691b      	ldr	r3, [r3, #16]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d00b      	beq.n	8011d34 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d22:	691b      	ldr	r3, [r3, #16]
 8011d24:	687a      	ldr	r2, [r7, #4]
 8011d26:	7c12      	ldrb	r2, [r2, #16]
 8011d28:	f107 0108 	add.w	r1, r7, #8
 8011d2c:	4610      	mov	r0, r2
 8011d2e:	4798      	blx	r3
 8011d30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011d32:	e043      	b.n	8011dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011d34:	6839      	ldr	r1, [r7, #0]
 8011d36:	6878      	ldr	r0, [r7, #4]
 8011d38:	f000 fa7d 	bl	8012236 <USBD_CtlError>
            err++;
 8011d3c:	7afb      	ldrb	r3, [r7, #11]
 8011d3e:	3301      	adds	r3, #1
 8011d40:	72fb      	strb	r3, [r7, #11]
          break;
 8011d42:	e03b      	b.n	8011dbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d4a:	695b      	ldr	r3, [r3, #20]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d00b      	beq.n	8011d68 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d56:	695b      	ldr	r3, [r3, #20]
 8011d58:	687a      	ldr	r2, [r7, #4]
 8011d5a:	7c12      	ldrb	r2, [r2, #16]
 8011d5c:	f107 0108 	add.w	r1, r7, #8
 8011d60:	4610      	mov	r0, r2
 8011d62:	4798      	blx	r3
 8011d64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011d66:	e029      	b.n	8011dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011d68:	6839      	ldr	r1, [r7, #0]
 8011d6a:	6878      	ldr	r0, [r7, #4]
 8011d6c:	f000 fa63 	bl	8012236 <USBD_CtlError>
            err++;
 8011d70:	7afb      	ldrb	r3, [r7, #11]
 8011d72:	3301      	adds	r3, #1
 8011d74:	72fb      	strb	r3, [r7, #11]
          break;
 8011d76:	e021      	b.n	8011dbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d7e:	699b      	ldr	r3, [r3, #24]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d00b      	beq.n	8011d9c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d8a:	699b      	ldr	r3, [r3, #24]
 8011d8c:	687a      	ldr	r2, [r7, #4]
 8011d8e:	7c12      	ldrb	r2, [r2, #16]
 8011d90:	f107 0108 	add.w	r1, r7, #8
 8011d94:	4610      	mov	r0, r2
 8011d96:	4798      	blx	r3
 8011d98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011d9a:	e00f      	b.n	8011dbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011d9c:	6839      	ldr	r1, [r7, #0]
 8011d9e:	6878      	ldr	r0, [r7, #4]
 8011da0:	f000 fa49 	bl	8012236 <USBD_CtlError>
            err++;
 8011da4:	7afb      	ldrb	r3, [r7, #11]
 8011da6:	3301      	adds	r3, #1
 8011da8:	72fb      	strb	r3, [r7, #11]
          break;
 8011daa:	e007      	b.n	8011dbc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011dac:	6839      	ldr	r1, [r7, #0]
 8011dae:	6878      	ldr	r0, [r7, #4]
 8011db0:	f000 fa41 	bl	8012236 <USBD_CtlError>
          err++;
 8011db4:	7afb      	ldrb	r3, [r7, #11]
 8011db6:	3301      	adds	r3, #1
 8011db8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8011dba:	bf00      	nop
      }
      break;
 8011dbc:	e037      	b.n	8011e2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	7c1b      	ldrb	r3, [r3, #16]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d109      	bne.n	8011dda <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011dce:	f107 0208 	add.w	r2, r7, #8
 8011dd2:	4610      	mov	r0, r2
 8011dd4:	4798      	blx	r3
 8011dd6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011dd8:	e029      	b.n	8011e2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011dda:	6839      	ldr	r1, [r7, #0]
 8011ddc:	6878      	ldr	r0, [r7, #4]
 8011dde:	f000 fa2a 	bl	8012236 <USBD_CtlError>
        err++;
 8011de2:	7afb      	ldrb	r3, [r7, #11]
 8011de4:	3301      	adds	r3, #1
 8011de6:	72fb      	strb	r3, [r7, #11]
      break;
 8011de8:	e021      	b.n	8011e2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	7c1b      	ldrb	r3, [r3, #16]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d10d      	bne.n	8011e0e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011dfa:	f107 0208 	add.w	r2, r7, #8
 8011dfe:	4610      	mov	r0, r2
 8011e00:	4798      	blx	r3
 8011e02:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	3301      	adds	r3, #1
 8011e08:	2207      	movs	r2, #7
 8011e0a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011e0c:	e00f      	b.n	8011e2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011e0e:	6839      	ldr	r1, [r7, #0]
 8011e10:	6878      	ldr	r0, [r7, #4]
 8011e12:	f000 fa10 	bl	8012236 <USBD_CtlError>
        err++;
 8011e16:	7afb      	ldrb	r3, [r7, #11]
 8011e18:	3301      	adds	r3, #1
 8011e1a:	72fb      	strb	r3, [r7, #11]
      break;
 8011e1c:	e007      	b.n	8011e2e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8011e1e:	6839      	ldr	r1, [r7, #0]
 8011e20:	6878      	ldr	r0, [r7, #4]
 8011e22:	f000 fa08 	bl	8012236 <USBD_CtlError>
      err++;
 8011e26:	7afb      	ldrb	r3, [r7, #11]
 8011e28:	3301      	adds	r3, #1
 8011e2a:	72fb      	strb	r3, [r7, #11]
      break;
 8011e2c:	bf00      	nop
  }

  if (err != 0U)
 8011e2e:	7afb      	ldrb	r3, [r7, #11]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d11e      	bne.n	8011e72 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8011e34:	683b      	ldr	r3, [r7, #0]
 8011e36:	88db      	ldrh	r3, [r3, #6]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d016      	beq.n	8011e6a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8011e3c:	893b      	ldrh	r3, [r7, #8]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d00e      	beq.n	8011e60 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8011e42:	683b      	ldr	r3, [r7, #0]
 8011e44:	88da      	ldrh	r2, [r3, #6]
 8011e46:	893b      	ldrh	r3, [r7, #8]
 8011e48:	4293      	cmp	r3, r2
 8011e4a:	bf28      	it	cs
 8011e4c:	4613      	movcs	r3, r2
 8011e4e:	b29b      	uxth	r3, r3
 8011e50:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011e52:	893b      	ldrh	r3, [r7, #8]
 8011e54:	461a      	mov	r2, r3
 8011e56:	68f9      	ldr	r1, [r7, #12]
 8011e58:	6878      	ldr	r0, [r7, #4]
 8011e5a:	f000 fa5d 	bl	8012318 <USBD_CtlSendData>
 8011e5e:	e009      	b.n	8011e74 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011e60:	6839      	ldr	r1, [r7, #0]
 8011e62:	6878      	ldr	r0, [r7, #4]
 8011e64:	f000 f9e7 	bl	8012236 <USBD_CtlError>
 8011e68:	e004      	b.n	8011e74 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8011e6a:	6878      	ldr	r0, [r7, #4]
 8011e6c:	f000 faae 	bl	80123cc <USBD_CtlSendStatus>
 8011e70:	e000      	b.n	8011e74 <USBD_GetDescriptor+0x2cc>
    return;
 8011e72:	bf00      	nop
  }
}
 8011e74:	3710      	adds	r7, #16
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd80      	pop	{r7, pc}
 8011e7a:	bf00      	nop

08011e7c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b084      	sub	sp, #16
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
 8011e84:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011e86:	683b      	ldr	r3, [r7, #0]
 8011e88:	889b      	ldrh	r3, [r3, #4]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d131      	bne.n	8011ef2 <USBD_SetAddress+0x76>
 8011e8e:	683b      	ldr	r3, [r7, #0]
 8011e90:	88db      	ldrh	r3, [r3, #6]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d12d      	bne.n	8011ef2 <USBD_SetAddress+0x76>
 8011e96:	683b      	ldr	r3, [r7, #0]
 8011e98:	885b      	ldrh	r3, [r3, #2]
 8011e9a:	2b7f      	cmp	r3, #127	; 0x7f
 8011e9c:	d829      	bhi.n	8011ef2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011e9e:	683b      	ldr	r3, [r7, #0]
 8011ea0:	885b      	ldrh	r3, [r3, #2]
 8011ea2:	b2db      	uxtb	r3, r3
 8011ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011ea8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011eb0:	b2db      	uxtb	r3, r3
 8011eb2:	2b03      	cmp	r3, #3
 8011eb4:	d104      	bne.n	8011ec0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011eb6:	6839      	ldr	r1, [r7, #0]
 8011eb8:	6878      	ldr	r0, [r7, #4]
 8011eba:	f000 f9bc 	bl	8012236 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011ebe:	e01d      	b.n	8011efc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	7bfa      	ldrb	r2, [r7, #15]
 8011ec4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011ec8:	7bfb      	ldrb	r3, [r7, #15]
 8011eca:	4619      	mov	r1, r3
 8011ecc:	6878      	ldr	r0, [r7, #4]
 8011ece:	f000 ffa5 	bl	8012e1c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011ed2:	6878      	ldr	r0, [r7, #4]
 8011ed4:	f000 fa7a 	bl	80123cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011ed8:	7bfb      	ldrb	r3, [r7, #15]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d004      	beq.n	8011ee8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	2202      	movs	r2, #2
 8011ee2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011ee6:	e009      	b.n	8011efc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	2201      	movs	r2, #1
 8011eec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011ef0:	e004      	b.n	8011efc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011ef2:	6839      	ldr	r1, [r7, #0]
 8011ef4:	6878      	ldr	r0, [r7, #4]
 8011ef6:	f000 f99e 	bl	8012236 <USBD_CtlError>
  }
}
 8011efa:	bf00      	nop
 8011efc:	bf00      	nop
 8011efe:	3710      	adds	r7, #16
 8011f00:	46bd      	mov	sp, r7
 8011f02:	bd80      	pop	{r7, pc}

08011f04 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b084      	sub	sp, #16
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
 8011f0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011f0e:	2300      	movs	r3, #0
 8011f10:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011f12:	683b      	ldr	r3, [r7, #0]
 8011f14:	885b      	ldrh	r3, [r3, #2]
 8011f16:	b2da      	uxtb	r2, r3
 8011f18:	4b4e      	ldr	r3, [pc, #312]	; (8012054 <USBD_SetConfig+0x150>)
 8011f1a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011f1c:	4b4d      	ldr	r3, [pc, #308]	; (8012054 <USBD_SetConfig+0x150>)
 8011f1e:	781b      	ldrb	r3, [r3, #0]
 8011f20:	2b01      	cmp	r3, #1
 8011f22:	d905      	bls.n	8011f30 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011f24:	6839      	ldr	r1, [r7, #0]
 8011f26:	6878      	ldr	r0, [r7, #4]
 8011f28:	f000 f985 	bl	8012236 <USBD_CtlError>
    return USBD_FAIL;
 8011f2c:	2303      	movs	r3, #3
 8011f2e:	e08c      	b.n	801204a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f36:	b2db      	uxtb	r3, r3
 8011f38:	2b02      	cmp	r3, #2
 8011f3a:	d002      	beq.n	8011f42 <USBD_SetConfig+0x3e>
 8011f3c:	2b03      	cmp	r3, #3
 8011f3e:	d029      	beq.n	8011f94 <USBD_SetConfig+0x90>
 8011f40:	e075      	b.n	801202e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8011f42:	4b44      	ldr	r3, [pc, #272]	; (8012054 <USBD_SetConfig+0x150>)
 8011f44:	781b      	ldrb	r3, [r3, #0]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d020      	beq.n	8011f8c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8011f4a:	4b42      	ldr	r3, [pc, #264]	; (8012054 <USBD_SetConfig+0x150>)
 8011f4c:	781b      	ldrb	r3, [r3, #0]
 8011f4e:	461a      	mov	r2, r3
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011f54:	4b3f      	ldr	r3, [pc, #252]	; (8012054 <USBD_SetConfig+0x150>)
 8011f56:	781b      	ldrb	r3, [r3, #0]
 8011f58:	4619      	mov	r1, r3
 8011f5a:	6878      	ldr	r0, [r7, #4]
 8011f5c:	f7fe ffe7 	bl	8010f2e <USBD_SetClassConfig>
 8011f60:	4603      	mov	r3, r0
 8011f62:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011f64:	7bfb      	ldrb	r3, [r7, #15]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d008      	beq.n	8011f7c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8011f6a:	6839      	ldr	r1, [r7, #0]
 8011f6c:	6878      	ldr	r0, [r7, #4]
 8011f6e:	f000 f962 	bl	8012236 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	2202      	movs	r2, #2
 8011f76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011f7a:	e065      	b.n	8012048 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011f7c:	6878      	ldr	r0, [r7, #4]
 8011f7e:	f000 fa25 	bl	80123cc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	2203      	movs	r2, #3
 8011f86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011f8a:	e05d      	b.n	8012048 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011f8c:	6878      	ldr	r0, [r7, #4]
 8011f8e:	f000 fa1d 	bl	80123cc <USBD_CtlSendStatus>
      break;
 8011f92:	e059      	b.n	8012048 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011f94:	4b2f      	ldr	r3, [pc, #188]	; (8012054 <USBD_SetConfig+0x150>)
 8011f96:	781b      	ldrb	r3, [r3, #0]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d112      	bne.n	8011fc2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	2202      	movs	r2, #2
 8011fa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8011fa4:	4b2b      	ldr	r3, [pc, #172]	; (8012054 <USBD_SetConfig+0x150>)
 8011fa6:	781b      	ldrb	r3, [r3, #0]
 8011fa8:	461a      	mov	r2, r3
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011fae:	4b29      	ldr	r3, [pc, #164]	; (8012054 <USBD_SetConfig+0x150>)
 8011fb0:	781b      	ldrb	r3, [r3, #0]
 8011fb2:	4619      	mov	r1, r3
 8011fb4:	6878      	ldr	r0, [r7, #4]
 8011fb6:	f7fe ffd6 	bl	8010f66 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011fba:	6878      	ldr	r0, [r7, #4]
 8011fbc:	f000 fa06 	bl	80123cc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011fc0:	e042      	b.n	8012048 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8011fc2:	4b24      	ldr	r3, [pc, #144]	; (8012054 <USBD_SetConfig+0x150>)
 8011fc4:	781b      	ldrb	r3, [r3, #0]
 8011fc6:	461a      	mov	r2, r3
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	685b      	ldr	r3, [r3, #4]
 8011fcc:	429a      	cmp	r2, r3
 8011fce:	d02a      	beq.n	8012026 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	685b      	ldr	r3, [r3, #4]
 8011fd4:	b2db      	uxtb	r3, r3
 8011fd6:	4619      	mov	r1, r3
 8011fd8:	6878      	ldr	r0, [r7, #4]
 8011fda:	f7fe ffc4 	bl	8010f66 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011fde:	4b1d      	ldr	r3, [pc, #116]	; (8012054 <USBD_SetConfig+0x150>)
 8011fe0:	781b      	ldrb	r3, [r3, #0]
 8011fe2:	461a      	mov	r2, r3
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011fe8:	4b1a      	ldr	r3, [pc, #104]	; (8012054 <USBD_SetConfig+0x150>)
 8011fea:	781b      	ldrb	r3, [r3, #0]
 8011fec:	4619      	mov	r1, r3
 8011fee:	6878      	ldr	r0, [r7, #4]
 8011ff0:	f7fe ff9d 	bl	8010f2e <USBD_SetClassConfig>
 8011ff4:	4603      	mov	r3, r0
 8011ff6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011ff8:	7bfb      	ldrb	r3, [r7, #15]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d00f      	beq.n	801201e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8011ffe:	6839      	ldr	r1, [r7, #0]
 8012000:	6878      	ldr	r0, [r7, #4]
 8012002:	f000 f918 	bl	8012236 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	685b      	ldr	r3, [r3, #4]
 801200a:	b2db      	uxtb	r3, r3
 801200c:	4619      	mov	r1, r3
 801200e:	6878      	ldr	r0, [r7, #4]
 8012010:	f7fe ffa9 	bl	8010f66 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	2202      	movs	r2, #2
 8012018:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801201c:	e014      	b.n	8012048 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801201e:	6878      	ldr	r0, [r7, #4]
 8012020:	f000 f9d4 	bl	80123cc <USBD_CtlSendStatus>
      break;
 8012024:	e010      	b.n	8012048 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012026:	6878      	ldr	r0, [r7, #4]
 8012028:	f000 f9d0 	bl	80123cc <USBD_CtlSendStatus>
      break;
 801202c:	e00c      	b.n	8012048 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801202e:	6839      	ldr	r1, [r7, #0]
 8012030:	6878      	ldr	r0, [r7, #4]
 8012032:	f000 f900 	bl	8012236 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012036:	4b07      	ldr	r3, [pc, #28]	; (8012054 <USBD_SetConfig+0x150>)
 8012038:	781b      	ldrb	r3, [r3, #0]
 801203a:	4619      	mov	r1, r3
 801203c:	6878      	ldr	r0, [r7, #4]
 801203e:	f7fe ff92 	bl	8010f66 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012042:	2303      	movs	r3, #3
 8012044:	73fb      	strb	r3, [r7, #15]
      break;
 8012046:	bf00      	nop
  }

  return ret;
 8012048:	7bfb      	ldrb	r3, [r7, #15]
}
 801204a:	4618      	mov	r0, r3
 801204c:	3710      	adds	r7, #16
 801204e:	46bd      	mov	sp, r7
 8012050:	bd80      	pop	{r7, pc}
 8012052:	bf00      	nop
 8012054:	2406745c 	.word	0x2406745c

08012058 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012058:	b580      	push	{r7, lr}
 801205a:	b082      	sub	sp, #8
 801205c:	af00      	add	r7, sp, #0
 801205e:	6078      	str	r0, [r7, #4]
 8012060:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012062:	683b      	ldr	r3, [r7, #0]
 8012064:	88db      	ldrh	r3, [r3, #6]
 8012066:	2b01      	cmp	r3, #1
 8012068:	d004      	beq.n	8012074 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801206a:	6839      	ldr	r1, [r7, #0]
 801206c:	6878      	ldr	r0, [r7, #4]
 801206e:	f000 f8e2 	bl	8012236 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012072:	e023      	b.n	80120bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801207a:	b2db      	uxtb	r3, r3
 801207c:	2b02      	cmp	r3, #2
 801207e:	dc02      	bgt.n	8012086 <USBD_GetConfig+0x2e>
 8012080:	2b00      	cmp	r3, #0
 8012082:	dc03      	bgt.n	801208c <USBD_GetConfig+0x34>
 8012084:	e015      	b.n	80120b2 <USBD_GetConfig+0x5a>
 8012086:	2b03      	cmp	r3, #3
 8012088:	d00b      	beq.n	80120a2 <USBD_GetConfig+0x4a>
 801208a:	e012      	b.n	80120b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	2200      	movs	r2, #0
 8012090:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	3308      	adds	r3, #8
 8012096:	2201      	movs	r2, #1
 8012098:	4619      	mov	r1, r3
 801209a:	6878      	ldr	r0, [r7, #4]
 801209c:	f000 f93c 	bl	8012318 <USBD_CtlSendData>
        break;
 80120a0:	e00c      	b.n	80120bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	3304      	adds	r3, #4
 80120a6:	2201      	movs	r2, #1
 80120a8:	4619      	mov	r1, r3
 80120aa:	6878      	ldr	r0, [r7, #4]
 80120ac:	f000 f934 	bl	8012318 <USBD_CtlSendData>
        break;
 80120b0:	e004      	b.n	80120bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80120b2:	6839      	ldr	r1, [r7, #0]
 80120b4:	6878      	ldr	r0, [r7, #4]
 80120b6:	f000 f8be 	bl	8012236 <USBD_CtlError>
        break;
 80120ba:	bf00      	nop
}
 80120bc:	bf00      	nop
 80120be:	3708      	adds	r7, #8
 80120c0:	46bd      	mov	sp, r7
 80120c2:	bd80      	pop	{r7, pc}

080120c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b082      	sub	sp, #8
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
 80120cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80120d4:	b2db      	uxtb	r3, r3
 80120d6:	3b01      	subs	r3, #1
 80120d8:	2b02      	cmp	r3, #2
 80120da:	d81e      	bhi.n	801211a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80120dc:	683b      	ldr	r3, [r7, #0]
 80120de:	88db      	ldrh	r3, [r3, #6]
 80120e0:	2b02      	cmp	r3, #2
 80120e2:	d004      	beq.n	80120ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80120e4:	6839      	ldr	r1, [r7, #0]
 80120e6:	6878      	ldr	r0, [r7, #4]
 80120e8:	f000 f8a5 	bl	8012236 <USBD_CtlError>
        break;
 80120ec:	e01a      	b.n	8012124 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	2201      	movs	r2, #1
 80120f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d005      	beq.n	801210a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	68db      	ldr	r3, [r3, #12]
 8012102:	f043 0202 	orr.w	r2, r3, #2
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	330c      	adds	r3, #12
 801210e:	2202      	movs	r2, #2
 8012110:	4619      	mov	r1, r3
 8012112:	6878      	ldr	r0, [r7, #4]
 8012114:	f000 f900 	bl	8012318 <USBD_CtlSendData>
      break;
 8012118:	e004      	b.n	8012124 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801211a:	6839      	ldr	r1, [r7, #0]
 801211c:	6878      	ldr	r0, [r7, #4]
 801211e:	f000 f88a 	bl	8012236 <USBD_CtlError>
      break;
 8012122:	bf00      	nop
  }
}
 8012124:	bf00      	nop
 8012126:	3708      	adds	r7, #8
 8012128:	46bd      	mov	sp, r7
 801212a:	bd80      	pop	{r7, pc}

0801212c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801212c:	b580      	push	{r7, lr}
 801212e:	b082      	sub	sp, #8
 8012130:	af00      	add	r7, sp, #0
 8012132:	6078      	str	r0, [r7, #4]
 8012134:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012136:	683b      	ldr	r3, [r7, #0]
 8012138:	885b      	ldrh	r3, [r3, #2]
 801213a:	2b01      	cmp	r3, #1
 801213c:	d107      	bne.n	801214e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	2201      	movs	r2, #1
 8012142:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012146:	6878      	ldr	r0, [r7, #4]
 8012148:	f000 f940 	bl	80123cc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801214c:	e013      	b.n	8012176 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801214e:	683b      	ldr	r3, [r7, #0]
 8012150:	885b      	ldrh	r3, [r3, #2]
 8012152:	2b02      	cmp	r3, #2
 8012154:	d10b      	bne.n	801216e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8012156:	683b      	ldr	r3, [r7, #0]
 8012158:	889b      	ldrh	r3, [r3, #4]
 801215a:	0a1b      	lsrs	r3, r3, #8
 801215c:	b29b      	uxth	r3, r3
 801215e:	b2da      	uxtb	r2, r3
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8012166:	6878      	ldr	r0, [r7, #4]
 8012168:	f000 f930 	bl	80123cc <USBD_CtlSendStatus>
}
 801216c:	e003      	b.n	8012176 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801216e:	6839      	ldr	r1, [r7, #0]
 8012170:	6878      	ldr	r0, [r7, #4]
 8012172:	f000 f860 	bl	8012236 <USBD_CtlError>
}
 8012176:	bf00      	nop
 8012178:	3708      	adds	r7, #8
 801217a:	46bd      	mov	sp, r7
 801217c:	bd80      	pop	{r7, pc}

0801217e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801217e:	b580      	push	{r7, lr}
 8012180:	b082      	sub	sp, #8
 8012182:	af00      	add	r7, sp, #0
 8012184:	6078      	str	r0, [r7, #4]
 8012186:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801218e:	b2db      	uxtb	r3, r3
 8012190:	3b01      	subs	r3, #1
 8012192:	2b02      	cmp	r3, #2
 8012194:	d80b      	bhi.n	80121ae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012196:	683b      	ldr	r3, [r7, #0]
 8012198:	885b      	ldrh	r3, [r3, #2]
 801219a:	2b01      	cmp	r3, #1
 801219c:	d10c      	bne.n	80121b8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	2200      	movs	r2, #0
 80121a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80121a6:	6878      	ldr	r0, [r7, #4]
 80121a8:	f000 f910 	bl	80123cc <USBD_CtlSendStatus>
      }
      break;
 80121ac:	e004      	b.n	80121b8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80121ae:	6839      	ldr	r1, [r7, #0]
 80121b0:	6878      	ldr	r0, [r7, #4]
 80121b2:	f000 f840 	bl	8012236 <USBD_CtlError>
      break;
 80121b6:	e000      	b.n	80121ba <USBD_ClrFeature+0x3c>
      break;
 80121b8:	bf00      	nop
  }
}
 80121ba:	bf00      	nop
 80121bc:	3708      	adds	r7, #8
 80121be:	46bd      	mov	sp, r7
 80121c0:	bd80      	pop	{r7, pc}

080121c2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80121c2:	b580      	push	{r7, lr}
 80121c4:	b084      	sub	sp, #16
 80121c6:	af00      	add	r7, sp, #0
 80121c8:	6078      	str	r0, [r7, #4]
 80121ca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80121cc:	683b      	ldr	r3, [r7, #0]
 80121ce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	781a      	ldrb	r2, [r3, #0]
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	3301      	adds	r3, #1
 80121dc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	781a      	ldrb	r2, [r3, #0]
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	3301      	adds	r3, #1
 80121ea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80121ec:	68f8      	ldr	r0, [r7, #12]
 80121ee:	f7ff fa41 	bl	8011674 <SWAPBYTE>
 80121f2:	4603      	mov	r3, r0
 80121f4:	461a      	mov	r2, r3
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	3301      	adds	r3, #1
 80121fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	3301      	adds	r3, #1
 8012204:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012206:	68f8      	ldr	r0, [r7, #12]
 8012208:	f7ff fa34 	bl	8011674 <SWAPBYTE>
 801220c:	4603      	mov	r3, r0
 801220e:	461a      	mov	r2, r3
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	3301      	adds	r3, #1
 8012218:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	3301      	adds	r3, #1
 801221e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012220:	68f8      	ldr	r0, [r7, #12]
 8012222:	f7ff fa27 	bl	8011674 <SWAPBYTE>
 8012226:	4603      	mov	r3, r0
 8012228:	461a      	mov	r2, r3
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	80da      	strh	r2, [r3, #6]
}
 801222e:	bf00      	nop
 8012230:	3710      	adds	r7, #16
 8012232:	46bd      	mov	sp, r7
 8012234:	bd80      	pop	{r7, pc}

08012236 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012236:	b580      	push	{r7, lr}
 8012238:	b082      	sub	sp, #8
 801223a:	af00      	add	r7, sp, #0
 801223c:	6078      	str	r0, [r7, #4]
 801223e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012240:	2180      	movs	r1, #128	; 0x80
 8012242:	6878      	ldr	r0, [r7, #4]
 8012244:	f000 fd80 	bl	8012d48 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012248:	2100      	movs	r1, #0
 801224a:	6878      	ldr	r0, [r7, #4]
 801224c:	f000 fd7c 	bl	8012d48 <USBD_LL_StallEP>
}
 8012250:	bf00      	nop
 8012252:	3708      	adds	r7, #8
 8012254:	46bd      	mov	sp, r7
 8012256:	bd80      	pop	{r7, pc}

08012258 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012258:	b580      	push	{r7, lr}
 801225a:	b086      	sub	sp, #24
 801225c:	af00      	add	r7, sp, #0
 801225e:	60f8      	str	r0, [r7, #12]
 8012260:	60b9      	str	r1, [r7, #8]
 8012262:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012264:	2300      	movs	r3, #0
 8012266:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d036      	beq.n	80122dc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012272:	6938      	ldr	r0, [r7, #16]
 8012274:	f000 f836 	bl	80122e4 <USBD_GetLen>
 8012278:	4603      	mov	r3, r0
 801227a:	3301      	adds	r3, #1
 801227c:	b29b      	uxth	r3, r3
 801227e:	005b      	lsls	r3, r3, #1
 8012280:	b29a      	uxth	r2, r3
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012286:	7dfb      	ldrb	r3, [r7, #23]
 8012288:	68ba      	ldr	r2, [r7, #8]
 801228a:	4413      	add	r3, r2
 801228c:	687a      	ldr	r2, [r7, #4]
 801228e:	7812      	ldrb	r2, [r2, #0]
 8012290:	701a      	strb	r2, [r3, #0]
  idx++;
 8012292:	7dfb      	ldrb	r3, [r7, #23]
 8012294:	3301      	adds	r3, #1
 8012296:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012298:	7dfb      	ldrb	r3, [r7, #23]
 801229a:	68ba      	ldr	r2, [r7, #8]
 801229c:	4413      	add	r3, r2
 801229e:	2203      	movs	r2, #3
 80122a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80122a2:	7dfb      	ldrb	r3, [r7, #23]
 80122a4:	3301      	adds	r3, #1
 80122a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80122a8:	e013      	b.n	80122d2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80122aa:	7dfb      	ldrb	r3, [r7, #23]
 80122ac:	68ba      	ldr	r2, [r7, #8]
 80122ae:	4413      	add	r3, r2
 80122b0:	693a      	ldr	r2, [r7, #16]
 80122b2:	7812      	ldrb	r2, [r2, #0]
 80122b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80122b6:	693b      	ldr	r3, [r7, #16]
 80122b8:	3301      	adds	r3, #1
 80122ba:	613b      	str	r3, [r7, #16]
    idx++;
 80122bc:	7dfb      	ldrb	r3, [r7, #23]
 80122be:	3301      	adds	r3, #1
 80122c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80122c2:	7dfb      	ldrb	r3, [r7, #23]
 80122c4:	68ba      	ldr	r2, [r7, #8]
 80122c6:	4413      	add	r3, r2
 80122c8:	2200      	movs	r2, #0
 80122ca:	701a      	strb	r2, [r3, #0]
    idx++;
 80122cc:	7dfb      	ldrb	r3, [r7, #23]
 80122ce:	3301      	adds	r3, #1
 80122d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80122d2:	693b      	ldr	r3, [r7, #16]
 80122d4:	781b      	ldrb	r3, [r3, #0]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d1e7      	bne.n	80122aa <USBD_GetString+0x52>
 80122da:	e000      	b.n	80122de <USBD_GetString+0x86>
    return;
 80122dc:	bf00      	nop
  }
}
 80122de:	3718      	adds	r7, #24
 80122e0:	46bd      	mov	sp, r7
 80122e2:	bd80      	pop	{r7, pc}

080122e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80122e4:	b480      	push	{r7}
 80122e6:	b085      	sub	sp, #20
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80122ec:	2300      	movs	r3, #0
 80122ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80122f4:	e005      	b.n	8012302 <USBD_GetLen+0x1e>
  {
    len++;
 80122f6:	7bfb      	ldrb	r3, [r7, #15]
 80122f8:	3301      	adds	r3, #1
 80122fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80122fc:	68bb      	ldr	r3, [r7, #8]
 80122fe:	3301      	adds	r3, #1
 8012300:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012302:	68bb      	ldr	r3, [r7, #8]
 8012304:	781b      	ldrb	r3, [r3, #0]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d1f5      	bne.n	80122f6 <USBD_GetLen+0x12>
  }

  return len;
 801230a:	7bfb      	ldrb	r3, [r7, #15]
}
 801230c:	4618      	mov	r0, r3
 801230e:	3714      	adds	r7, #20
 8012310:	46bd      	mov	sp, r7
 8012312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012316:	4770      	bx	lr

08012318 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b084      	sub	sp, #16
 801231c:	af00      	add	r7, sp, #0
 801231e:	60f8      	str	r0, [r7, #12]
 8012320:	60b9      	str	r1, [r7, #8]
 8012322:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	2202      	movs	r2, #2
 8012328:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	687a      	ldr	r2, [r7, #4]
 8012330:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	687a      	ldr	r2, [r7, #4]
 8012336:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	68ba      	ldr	r2, [r7, #8]
 801233c:	2100      	movs	r1, #0
 801233e:	68f8      	ldr	r0, [r7, #12]
 8012340:	f000 fd8b 	bl	8012e5a <USBD_LL_Transmit>

  return USBD_OK;
 8012344:	2300      	movs	r3, #0
}
 8012346:	4618      	mov	r0, r3
 8012348:	3710      	adds	r7, #16
 801234a:	46bd      	mov	sp, r7
 801234c:	bd80      	pop	{r7, pc}

0801234e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801234e:	b580      	push	{r7, lr}
 8012350:	b084      	sub	sp, #16
 8012352:	af00      	add	r7, sp, #0
 8012354:	60f8      	str	r0, [r7, #12]
 8012356:	60b9      	str	r1, [r7, #8]
 8012358:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	68ba      	ldr	r2, [r7, #8]
 801235e:	2100      	movs	r1, #0
 8012360:	68f8      	ldr	r0, [r7, #12]
 8012362:	f000 fd7a 	bl	8012e5a <USBD_LL_Transmit>

  return USBD_OK;
 8012366:	2300      	movs	r3, #0
}
 8012368:	4618      	mov	r0, r3
 801236a:	3710      	adds	r7, #16
 801236c:	46bd      	mov	sp, r7
 801236e:	bd80      	pop	{r7, pc}

08012370 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012370:	b580      	push	{r7, lr}
 8012372:	b084      	sub	sp, #16
 8012374:	af00      	add	r7, sp, #0
 8012376:	60f8      	str	r0, [r7, #12]
 8012378:	60b9      	str	r1, [r7, #8]
 801237a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	2203      	movs	r2, #3
 8012380:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	687a      	ldr	r2, [r7, #4]
 8012388:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	687a      	ldr	r2, [r7, #4]
 8012390:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	68ba      	ldr	r2, [r7, #8]
 8012398:	2100      	movs	r1, #0
 801239a:	68f8      	ldr	r0, [r7, #12]
 801239c:	f000 fd7e 	bl	8012e9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80123a0:	2300      	movs	r3, #0
}
 80123a2:	4618      	mov	r0, r3
 80123a4:	3710      	adds	r7, #16
 80123a6:	46bd      	mov	sp, r7
 80123a8:	bd80      	pop	{r7, pc}

080123aa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80123aa:	b580      	push	{r7, lr}
 80123ac:	b084      	sub	sp, #16
 80123ae:	af00      	add	r7, sp, #0
 80123b0:	60f8      	str	r0, [r7, #12]
 80123b2:	60b9      	str	r1, [r7, #8]
 80123b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	68ba      	ldr	r2, [r7, #8]
 80123ba:	2100      	movs	r1, #0
 80123bc:	68f8      	ldr	r0, [r7, #12]
 80123be:	f000 fd6d 	bl	8012e9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80123c2:	2300      	movs	r3, #0
}
 80123c4:	4618      	mov	r0, r3
 80123c6:	3710      	adds	r7, #16
 80123c8:	46bd      	mov	sp, r7
 80123ca:	bd80      	pop	{r7, pc}

080123cc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80123cc:	b580      	push	{r7, lr}
 80123ce:	b082      	sub	sp, #8
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	2204      	movs	r2, #4
 80123d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80123dc:	2300      	movs	r3, #0
 80123de:	2200      	movs	r2, #0
 80123e0:	2100      	movs	r1, #0
 80123e2:	6878      	ldr	r0, [r7, #4]
 80123e4:	f000 fd39 	bl	8012e5a <USBD_LL_Transmit>

  return USBD_OK;
 80123e8:	2300      	movs	r3, #0
}
 80123ea:	4618      	mov	r0, r3
 80123ec:	3708      	adds	r7, #8
 80123ee:	46bd      	mov	sp, r7
 80123f0:	bd80      	pop	{r7, pc}

080123f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80123f2:	b580      	push	{r7, lr}
 80123f4:	b082      	sub	sp, #8
 80123f6:	af00      	add	r7, sp, #0
 80123f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	2205      	movs	r2, #5
 80123fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012402:	2300      	movs	r3, #0
 8012404:	2200      	movs	r2, #0
 8012406:	2100      	movs	r1, #0
 8012408:	6878      	ldr	r0, [r7, #4]
 801240a:	f000 fd47 	bl	8012e9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801240e:	2300      	movs	r3, #0
}
 8012410:	4618      	mov	r0, r3
 8012412:	3708      	adds	r7, #8
 8012414:	46bd      	mov	sp, r7
 8012416:	bd80      	pop	{r7, pc}

08012418 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012418:	b580      	push	{r7, lr}
 801241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801241c:	2200      	movs	r2, #0
 801241e:	4913      	ldr	r1, [pc, #76]	; (801246c <MX_USB_DEVICE_Init+0x54>)
 8012420:	4813      	ldr	r0, [pc, #76]	; (8012470 <MX_USB_DEVICE_Init+0x58>)
 8012422:	f7fe fd07 	bl	8010e34 <USBD_Init>
 8012426:	4603      	mov	r3, r0
 8012428:	2b00      	cmp	r3, #0
 801242a:	d001      	beq.n	8012430 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801242c:	f7ef fc2c 	bl	8001c88 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012430:	4910      	ldr	r1, [pc, #64]	; (8012474 <MX_USB_DEVICE_Init+0x5c>)
 8012432:	480f      	ldr	r0, [pc, #60]	; (8012470 <MX_USB_DEVICE_Init+0x58>)
 8012434:	f7fe fd2e 	bl	8010e94 <USBD_RegisterClass>
 8012438:	4603      	mov	r3, r0
 801243a:	2b00      	cmp	r3, #0
 801243c:	d001      	beq.n	8012442 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801243e:	f7ef fc23 	bl	8001c88 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8012442:	490d      	ldr	r1, [pc, #52]	; (8012478 <MX_USB_DEVICE_Init+0x60>)
 8012444:	480a      	ldr	r0, [pc, #40]	; (8012470 <MX_USB_DEVICE_Init+0x58>)
 8012446:	f7fe fc1f 	bl	8010c88 <USBD_CDC_RegisterInterface>
 801244a:	4603      	mov	r3, r0
 801244c:	2b00      	cmp	r3, #0
 801244e:	d001      	beq.n	8012454 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012450:	f7ef fc1a 	bl	8001c88 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012454:	4806      	ldr	r0, [pc, #24]	; (8012470 <MX_USB_DEVICE_Init+0x58>)
 8012456:	f7fe fd53 	bl	8010f00 <USBD_Start>
 801245a:	4603      	mov	r3, r0
 801245c:	2b00      	cmp	r3, #0
 801245e:	d001      	beq.n	8012464 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012460:	f7ef fc12 	bl	8001c88 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8012464:	f7f6 ff96 	bl	8009394 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012468:	bf00      	nop
 801246a:	bd80      	pop	{r7, pc}
 801246c:	240000b0 	.word	0x240000b0
 8012470:	24067460 	.word	0x24067460
 8012474:	2400001c 	.word	0x2400001c
 8012478:	2400009c 	.word	0x2400009c

0801247c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801247c:	b580      	push	{r7, lr}
 801247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012480:	2200      	movs	r2, #0
 8012482:	4907      	ldr	r1, [pc, #28]	; (80124a0 <CDC_Init_FS+0x24>)
 8012484:	4807      	ldr	r0, [pc, #28]	; (80124a4 <CDC_Init_FS+0x28>)
 8012486:	f7fe fc19 	bl	8010cbc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801248a:	4907      	ldr	r1, [pc, #28]	; (80124a8 <CDC_Init_FS+0x2c>)
 801248c:	4805      	ldr	r0, [pc, #20]	; (80124a4 <CDC_Init_FS+0x28>)
 801248e:	f7fe fc37 	bl	8010d00 <USBD_CDC_SetRxBuffer>
  start_flag = 1;
 8012492:	4b06      	ldr	r3, [pc, #24]	; (80124ac <CDC_Init_FS+0x30>)
 8012494:	2201      	movs	r2, #1
 8012496:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 8012498:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801249a:	4618      	mov	r0, r3
 801249c:	bd80      	pop	{r7, pc}
 801249e:	bf00      	nop
 80124a0:	24067750 	.word	0x24067750
 80124a4:	24067460 	.word	0x24067460
 80124a8:	24067744 	.word	0x24067744
 80124ac:	24066e63 	.word	0x24066e63

080124b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80124b0:	b480      	push	{r7}
 80124b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80124b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80124b6:	4618      	mov	r0, r3
 80124b8:	46bd      	mov	sp, r7
 80124ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124be:	4770      	bx	lr

080124c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80124c0:	b480      	push	{r7}
 80124c2:	b083      	sub	sp, #12
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	4603      	mov	r3, r0
 80124c8:	6039      	str	r1, [r7, #0]
 80124ca:	71fb      	strb	r3, [r7, #7]
 80124cc:	4613      	mov	r3, r2
 80124ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80124d0:	79fb      	ldrb	r3, [r7, #7]
 80124d2:	2b23      	cmp	r3, #35	; 0x23
 80124d4:	f200 8095 	bhi.w	8012602 <CDC_Control_FS+0x142>
 80124d8:	a201      	add	r2, pc, #4	; (adr r2, 80124e0 <CDC_Control_FS+0x20>)
 80124da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124de:	bf00      	nop
 80124e0:	08012603 	.word	0x08012603
 80124e4:	08012603 	.word	0x08012603
 80124e8:	08012603 	.word	0x08012603
 80124ec:	08012603 	.word	0x08012603
 80124f0:	08012603 	.word	0x08012603
 80124f4:	08012603 	.word	0x08012603
 80124f8:	08012603 	.word	0x08012603
 80124fc:	08012603 	.word	0x08012603
 8012500:	08012603 	.word	0x08012603
 8012504:	08012603 	.word	0x08012603
 8012508:	08012603 	.word	0x08012603
 801250c:	08012603 	.word	0x08012603
 8012510:	08012603 	.word	0x08012603
 8012514:	08012603 	.word	0x08012603
 8012518:	08012603 	.word	0x08012603
 801251c:	08012603 	.word	0x08012603
 8012520:	08012603 	.word	0x08012603
 8012524:	08012603 	.word	0x08012603
 8012528:	08012603 	.word	0x08012603
 801252c:	08012603 	.word	0x08012603
 8012530:	08012603 	.word	0x08012603
 8012534:	08012603 	.word	0x08012603
 8012538:	08012603 	.word	0x08012603
 801253c:	08012603 	.word	0x08012603
 8012540:	08012603 	.word	0x08012603
 8012544:	08012603 	.word	0x08012603
 8012548:	08012603 	.word	0x08012603
 801254c:	08012603 	.word	0x08012603
 8012550:	08012603 	.word	0x08012603
 8012554:	08012603 	.word	0x08012603
 8012558:	08012603 	.word	0x08012603
 801255c:	08012603 	.word	0x08012603
 8012560:	08012571 	.word	0x08012571
 8012564:	080125b3 	.word	0x080125b3
 8012568:	08012603 	.word	0x08012603
 801256c:	08012603 	.word	0x08012603
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	buf[0] = pbuf[0];
 8012570:	683b      	ldr	r3, [r7, #0]
 8012572:	781a      	ldrb	r2, [r3, #0]
 8012574:	4b27      	ldr	r3, [pc, #156]	; (8012614 <CDC_Control_FS+0x154>)
 8012576:	701a      	strb	r2, [r3, #0]
    	buf[1] = pbuf[1];
 8012578:	683b      	ldr	r3, [r7, #0]
 801257a:	785a      	ldrb	r2, [r3, #1]
 801257c:	4b25      	ldr	r3, [pc, #148]	; (8012614 <CDC_Control_FS+0x154>)
 801257e:	705a      	strb	r2, [r3, #1]
    	buf[2] = pbuf[2];
 8012580:	683b      	ldr	r3, [r7, #0]
 8012582:	789a      	ldrb	r2, [r3, #2]
 8012584:	4b23      	ldr	r3, [pc, #140]	; (8012614 <CDC_Control_FS+0x154>)
 8012586:	709a      	strb	r2, [r3, #2]
    	buf[3] = pbuf[3];
 8012588:	683b      	ldr	r3, [r7, #0]
 801258a:	78da      	ldrb	r2, [r3, #3]
 801258c:	4b21      	ldr	r3, [pc, #132]	; (8012614 <CDC_Control_FS+0x154>)
 801258e:	70da      	strb	r2, [r3, #3]
    	buf[4] = pbuf[4];
 8012590:	683b      	ldr	r3, [r7, #0]
 8012592:	791a      	ldrb	r2, [r3, #4]
 8012594:	4b1f      	ldr	r3, [pc, #124]	; (8012614 <CDC_Control_FS+0x154>)
 8012596:	711a      	strb	r2, [r3, #4]
    	buf[5] = pbuf[5];
 8012598:	683b      	ldr	r3, [r7, #0]
 801259a:	795a      	ldrb	r2, [r3, #5]
 801259c:	4b1d      	ldr	r3, [pc, #116]	; (8012614 <CDC_Control_FS+0x154>)
 801259e:	715a      	strb	r2, [r3, #5]
    	buf[6] = pbuf[6];
 80125a0:	683b      	ldr	r3, [r7, #0]
 80125a2:	799a      	ldrb	r2, [r3, #6]
 80125a4:	4b1b      	ldr	r3, [pc, #108]	; (8012614 <CDC_Control_FS+0x154>)
 80125a6:	719a      	strb	r2, [r3, #6]
    	buf[7] = pbuf[7];
 80125a8:	683b      	ldr	r3, [r7, #0]
 80125aa:	79da      	ldrb	r2, [r3, #7]
 80125ac:	4b19      	ldr	r3, [pc, #100]	; (8012614 <CDC_Control_FS+0x154>)
 80125ae:	71da      	strb	r2, [r3, #7]

    break;
 80125b0:	e028      	b.n	8012604 <CDC_Control_FS+0x144>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = buf[0];
 80125b2:	4b18      	ldr	r3, [pc, #96]	; (8012614 <CDC_Control_FS+0x154>)
 80125b4:	781a      	ldrb	r2, [r3, #0]
 80125b6:	683b      	ldr	r3, [r7, #0]
 80125b8:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = buf[1];
 80125ba:	683b      	ldr	r3, [r7, #0]
 80125bc:	3301      	adds	r3, #1
 80125be:	4a15      	ldr	r2, [pc, #84]	; (8012614 <CDC_Control_FS+0x154>)
 80125c0:	7852      	ldrb	r2, [r2, #1]
 80125c2:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = buf[2];
 80125c4:	683b      	ldr	r3, [r7, #0]
 80125c6:	3302      	adds	r3, #2
 80125c8:	4a12      	ldr	r2, [pc, #72]	; (8012614 <CDC_Control_FS+0x154>)
 80125ca:	7892      	ldrb	r2, [r2, #2]
 80125cc:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = buf[3];
 80125ce:	683b      	ldr	r3, [r7, #0]
 80125d0:	3303      	adds	r3, #3
 80125d2:	4a10      	ldr	r2, [pc, #64]	; (8012614 <CDC_Control_FS+0x154>)
 80125d4:	78d2      	ldrb	r2, [r2, #3]
 80125d6:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = buf[4];
 80125d8:	683b      	ldr	r3, [r7, #0]
 80125da:	3304      	adds	r3, #4
 80125dc:	4a0d      	ldr	r2, [pc, #52]	; (8012614 <CDC_Control_FS+0x154>)
 80125de:	7912      	ldrb	r2, [r2, #4]
 80125e0:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = buf[5];
 80125e2:	683b      	ldr	r3, [r7, #0]
 80125e4:	3305      	adds	r3, #5
 80125e6:	4a0b      	ldr	r2, [pc, #44]	; (8012614 <CDC_Control_FS+0x154>)
 80125e8:	7952      	ldrb	r2, [r2, #5]
 80125ea:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = buf[6];
 80125ec:	683b      	ldr	r3, [r7, #0]
 80125ee:	3306      	adds	r3, #6
 80125f0:	4a08      	ldr	r2, [pc, #32]	; (8012614 <CDC_Control_FS+0x154>)
 80125f2:	7992      	ldrb	r2, [r2, #6]
 80125f4:	701a      	strb	r2, [r3, #0]
    	pbuf[7] = buf[7];
 80125f6:	683b      	ldr	r3, [r7, #0]
 80125f8:	3307      	adds	r3, #7
 80125fa:	4a06      	ldr	r2, [pc, #24]	; (8012614 <CDC_Control_FS+0x154>)
 80125fc:	79d2      	ldrb	r2, [r2, #7]
 80125fe:	701a      	strb	r2, [r3, #0]
    break;
 8012600:	e000      	b.n	8012604 <CDC_Control_FS+0x144>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012602:	bf00      	nop
  }

  return (USBD_OK);
 8012604:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012606:	4618      	mov	r0, r3
 8012608:	370c      	adds	r7, #12
 801260a:	46bd      	mov	sp, r7
 801260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012610:	4770      	bx	lr
 8012612:	bf00      	nop
 8012614:	2406773c 	.word	0x2406773c

08012618 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012618:	b580      	push	{r7, lr}
 801261a:	b082      	sub	sp, #8
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
 8012620:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012622:	6879      	ldr	r1, [r7, #4]
 8012624:	4809      	ldr	r0, [pc, #36]	; (801264c <CDC_Receive_FS+0x34>)
 8012626:	f7fe fb6b 	bl	8010d00 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801262a:	4808      	ldr	r0, [pc, #32]	; (801264c <CDC_Receive_FS+0x34>)
 801262c:	f7fe fbcc 	bl	8010dc8 <USBD_CDC_ReceivePacket>
  memcpy(options, Buf, *Len);
 8012630:	4b07      	ldr	r3, [pc, #28]	; (8012650 <CDC_Receive_FS+0x38>)
 8012632:	6818      	ldr	r0, [r3, #0]
 8012634:	683b      	ldr	r3, [r7, #0]
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	461a      	mov	r2, r3
 801263a:	6879      	ldr	r1, [r7, #4]
 801263c:	f000 fcca 	bl	8012fd4 <memcpy>
  return (USBD_OK);
 8012640:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012642:	4618      	mov	r0, r3
 8012644:	3708      	adds	r7, #8
 8012646:	46bd      	mov	sp, r7
 8012648:	bd80      	pop	{r7, pc}
 801264a:	bf00      	nop
 801264c:	24067460 	.word	0x24067460
 8012650:	2406744c 	.word	0x2406744c

08012654 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012654:	b580      	push	{r7, lr}
 8012656:	b084      	sub	sp, #16
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
 801265c:	460b      	mov	r3, r1
 801265e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012660:	2300      	movs	r3, #0
 8012662:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012664:	4b0d      	ldr	r3, [pc, #52]	; (801269c <CDC_Transmit_FS+0x48>)
 8012666:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801266a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801266c:	68bb      	ldr	r3, [r7, #8]
 801266e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012672:	2b00      	cmp	r3, #0
 8012674:	d001      	beq.n	801267a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8012676:	2301      	movs	r3, #1
 8012678:	e00b      	b.n	8012692 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801267a:	887b      	ldrh	r3, [r7, #2]
 801267c:	461a      	mov	r2, r3
 801267e:	6879      	ldr	r1, [r7, #4]
 8012680:	4806      	ldr	r0, [pc, #24]	; (801269c <CDC_Transmit_FS+0x48>)
 8012682:	f7fe fb1b 	bl	8010cbc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012686:	4805      	ldr	r0, [pc, #20]	; (801269c <CDC_Transmit_FS+0x48>)
 8012688:	f7fe fb58 	bl	8010d3c <USBD_CDC_TransmitPacket>
 801268c:	4603      	mov	r3, r0
 801268e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8012690:	7bfb      	ldrb	r3, [r7, #15]
}
 8012692:	4618      	mov	r0, r3
 8012694:	3710      	adds	r7, #16
 8012696:	46bd      	mov	sp, r7
 8012698:	bd80      	pop	{r7, pc}
 801269a:	bf00      	nop
 801269c:	24067460 	.word	0x24067460

080126a0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80126a0:	b480      	push	{r7}
 80126a2:	b087      	sub	sp, #28
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	60f8      	str	r0, [r7, #12]
 80126a8:	60b9      	str	r1, [r7, #8]
 80126aa:	4613      	mov	r3, r2
 80126ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80126ae:	2300      	movs	r3, #0
 80126b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80126b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80126b6:	4618      	mov	r0, r3
 80126b8:	371c      	adds	r7, #28
 80126ba:	46bd      	mov	sp, r7
 80126bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c0:	4770      	bx	lr
	...

080126c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80126c4:	b480      	push	{r7}
 80126c6:	b083      	sub	sp, #12
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	4603      	mov	r3, r0
 80126cc:	6039      	str	r1, [r7, #0]
 80126ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80126d0:	683b      	ldr	r3, [r7, #0]
 80126d2:	2212      	movs	r2, #18
 80126d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80126d6:	4b03      	ldr	r3, [pc, #12]	; (80126e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80126d8:	4618      	mov	r0, r3
 80126da:	370c      	adds	r7, #12
 80126dc:	46bd      	mov	sp, r7
 80126de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e2:	4770      	bx	lr
 80126e4:	240000cc 	.word	0x240000cc

080126e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80126e8:	b480      	push	{r7}
 80126ea:	b083      	sub	sp, #12
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	4603      	mov	r3, r0
 80126f0:	6039      	str	r1, [r7, #0]
 80126f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80126f4:	683b      	ldr	r3, [r7, #0]
 80126f6:	2204      	movs	r2, #4
 80126f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80126fa:	4b03      	ldr	r3, [pc, #12]	; (8012708 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80126fc:	4618      	mov	r0, r3
 80126fe:	370c      	adds	r7, #12
 8012700:	46bd      	mov	sp, r7
 8012702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012706:	4770      	bx	lr
 8012708:	240000e0 	.word	0x240000e0

0801270c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801270c:	b580      	push	{r7, lr}
 801270e:	b082      	sub	sp, #8
 8012710:	af00      	add	r7, sp, #0
 8012712:	4603      	mov	r3, r0
 8012714:	6039      	str	r1, [r7, #0]
 8012716:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012718:	79fb      	ldrb	r3, [r7, #7]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d105      	bne.n	801272a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801271e:	683a      	ldr	r2, [r7, #0]
 8012720:	4907      	ldr	r1, [pc, #28]	; (8012740 <USBD_FS_ProductStrDescriptor+0x34>)
 8012722:	4808      	ldr	r0, [pc, #32]	; (8012744 <USBD_FS_ProductStrDescriptor+0x38>)
 8012724:	f7ff fd98 	bl	8012258 <USBD_GetString>
 8012728:	e004      	b.n	8012734 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801272a:	683a      	ldr	r2, [r7, #0]
 801272c:	4904      	ldr	r1, [pc, #16]	; (8012740 <USBD_FS_ProductStrDescriptor+0x34>)
 801272e:	4805      	ldr	r0, [pc, #20]	; (8012744 <USBD_FS_ProductStrDescriptor+0x38>)
 8012730:	f7ff fd92 	bl	8012258 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012734:	4b02      	ldr	r3, [pc, #8]	; (8012740 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012736:	4618      	mov	r0, r3
 8012738:	3708      	adds	r7, #8
 801273a:	46bd      	mov	sp, r7
 801273c:	bd80      	pop	{r7, pc}
 801273e:	bf00      	nop
 8012740:	24067f50 	.word	0x24067f50
 8012744:	08013018 	.word	0x08013018

08012748 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012748:	b580      	push	{r7, lr}
 801274a:	b082      	sub	sp, #8
 801274c:	af00      	add	r7, sp, #0
 801274e:	4603      	mov	r3, r0
 8012750:	6039      	str	r1, [r7, #0]
 8012752:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012754:	683a      	ldr	r2, [r7, #0]
 8012756:	4904      	ldr	r1, [pc, #16]	; (8012768 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012758:	4804      	ldr	r0, [pc, #16]	; (801276c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801275a:	f7ff fd7d 	bl	8012258 <USBD_GetString>
  return USBD_StrDesc;
 801275e:	4b02      	ldr	r3, [pc, #8]	; (8012768 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8012760:	4618      	mov	r0, r3
 8012762:	3708      	adds	r7, #8
 8012764:	46bd      	mov	sp, r7
 8012766:	bd80      	pop	{r7, pc}
 8012768:	24067f50 	.word	0x24067f50
 801276c:	08013030 	.word	0x08013030

08012770 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012770:	b580      	push	{r7, lr}
 8012772:	b082      	sub	sp, #8
 8012774:	af00      	add	r7, sp, #0
 8012776:	4603      	mov	r3, r0
 8012778:	6039      	str	r1, [r7, #0]
 801277a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801277c:	683b      	ldr	r3, [r7, #0]
 801277e:	221a      	movs	r2, #26
 8012780:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012782:	f000 f843 	bl	801280c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8012786:	4b02      	ldr	r3, [pc, #8]	; (8012790 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012788:	4618      	mov	r0, r3
 801278a:	3708      	adds	r7, #8
 801278c:	46bd      	mov	sp, r7
 801278e:	bd80      	pop	{r7, pc}
 8012790:	240000e4 	.word	0x240000e4

08012794 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012794:	b580      	push	{r7, lr}
 8012796:	b082      	sub	sp, #8
 8012798:	af00      	add	r7, sp, #0
 801279a:	4603      	mov	r3, r0
 801279c:	6039      	str	r1, [r7, #0]
 801279e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80127a0:	79fb      	ldrb	r3, [r7, #7]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d105      	bne.n	80127b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80127a6:	683a      	ldr	r2, [r7, #0]
 80127a8:	4907      	ldr	r1, [pc, #28]	; (80127c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80127aa:	4808      	ldr	r0, [pc, #32]	; (80127cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80127ac:	f7ff fd54 	bl	8012258 <USBD_GetString>
 80127b0:	e004      	b.n	80127bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80127b2:	683a      	ldr	r2, [r7, #0]
 80127b4:	4904      	ldr	r1, [pc, #16]	; (80127c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80127b6:	4805      	ldr	r0, [pc, #20]	; (80127cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80127b8:	f7ff fd4e 	bl	8012258 <USBD_GetString>
  }
  return USBD_StrDesc;
 80127bc:	4b02      	ldr	r3, [pc, #8]	; (80127c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80127be:	4618      	mov	r0, r3
 80127c0:	3708      	adds	r7, #8
 80127c2:	46bd      	mov	sp, r7
 80127c4:	bd80      	pop	{r7, pc}
 80127c6:	bf00      	nop
 80127c8:	24067f50 	.word	0x24067f50
 80127cc:	08013044 	.word	0x08013044

080127d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b082      	sub	sp, #8
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	4603      	mov	r3, r0
 80127d8:	6039      	str	r1, [r7, #0]
 80127da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80127dc:	79fb      	ldrb	r3, [r7, #7]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d105      	bne.n	80127ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80127e2:	683a      	ldr	r2, [r7, #0]
 80127e4:	4907      	ldr	r1, [pc, #28]	; (8012804 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80127e6:	4808      	ldr	r0, [pc, #32]	; (8012808 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80127e8:	f7ff fd36 	bl	8012258 <USBD_GetString>
 80127ec:	e004      	b.n	80127f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80127ee:	683a      	ldr	r2, [r7, #0]
 80127f0:	4904      	ldr	r1, [pc, #16]	; (8012804 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80127f2:	4805      	ldr	r0, [pc, #20]	; (8012808 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80127f4:	f7ff fd30 	bl	8012258 <USBD_GetString>
  }
  return USBD_StrDesc;
 80127f8:	4b02      	ldr	r3, [pc, #8]	; (8012804 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80127fa:	4618      	mov	r0, r3
 80127fc:	3708      	adds	r7, #8
 80127fe:	46bd      	mov	sp, r7
 8012800:	bd80      	pop	{r7, pc}
 8012802:	bf00      	nop
 8012804:	24067f50 	.word	0x24067f50
 8012808:	08013050 	.word	0x08013050

0801280c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801280c:	b580      	push	{r7, lr}
 801280e:	b084      	sub	sp, #16
 8012810:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012812:	4b0f      	ldr	r3, [pc, #60]	; (8012850 <Get_SerialNum+0x44>)
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012818:	4b0e      	ldr	r3, [pc, #56]	; (8012854 <Get_SerialNum+0x48>)
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801281e:	4b0e      	ldr	r3, [pc, #56]	; (8012858 <Get_SerialNum+0x4c>)
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012824:	68fa      	ldr	r2, [r7, #12]
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	4413      	add	r3, r2
 801282a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d009      	beq.n	8012846 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012832:	2208      	movs	r2, #8
 8012834:	4909      	ldr	r1, [pc, #36]	; (801285c <Get_SerialNum+0x50>)
 8012836:	68f8      	ldr	r0, [r7, #12]
 8012838:	f000 f814 	bl	8012864 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801283c:	2204      	movs	r2, #4
 801283e:	4908      	ldr	r1, [pc, #32]	; (8012860 <Get_SerialNum+0x54>)
 8012840:	68b8      	ldr	r0, [r7, #8]
 8012842:	f000 f80f 	bl	8012864 <IntToUnicode>
  }
}
 8012846:	bf00      	nop
 8012848:	3710      	adds	r7, #16
 801284a:	46bd      	mov	sp, r7
 801284c:	bd80      	pop	{r7, pc}
 801284e:	bf00      	nop
 8012850:	1ff1e800 	.word	0x1ff1e800
 8012854:	1ff1e804 	.word	0x1ff1e804
 8012858:	1ff1e808 	.word	0x1ff1e808
 801285c:	240000e6 	.word	0x240000e6
 8012860:	240000f6 	.word	0x240000f6

08012864 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012864:	b480      	push	{r7}
 8012866:	b087      	sub	sp, #28
 8012868:	af00      	add	r7, sp, #0
 801286a:	60f8      	str	r0, [r7, #12]
 801286c:	60b9      	str	r1, [r7, #8]
 801286e:	4613      	mov	r3, r2
 8012870:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012872:	2300      	movs	r3, #0
 8012874:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012876:	2300      	movs	r3, #0
 8012878:	75fb      	strb	r3, [r7, #23]
 801287a:	e027      	b.n	80128cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	0f1b      	lsrs	r3, r3, #28
 8012880:	2b09      	cmp	r3, #9
 8012882:	d80b      	bhi.n	801289c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	0f1b      	lsrs	r3, r3, #28
 8012888:	b2da      	uxtb	r2, r3
 801288a:	7dfb      	ldrb	r3, [r7, #23]
 801288c:	005b      	lsls	r3, r3, #1
 801288e:	4619      	mov	r1, r3
 8012890:	68bb      	ldr	r3, [r7, #8]
 8012892:	440b      	add	r3, r1
 8012894:	3230      	adds	r2, #48	; 0x30
 8012896:	b2d2      	uxtb	r2, r2
 8012898:	701a      	strb	r2, [r3, #0]
 801289a:	e00a      	b.n	80128b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	0f1b      	lsrs	r3, r3, #28
 80128a0:	b2da      	uxtb	r2, r3
 80128a2:	7dfb      	ldrb	r3, [r7, #23]
 80128a4:	005b      	lsls	r3, r3, #1
 80128a6:	4619      	mov	r1, r3
 80128a8:	68bb      	ldr	r3, [r7, #8]
 80128aa:	440b      	add	r3, r1
 80128ac:	3237      	adds	r2, #55	; 0x37
 80128ae:	b2d2      	uxtb	r2, r2
 80128b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	011b      	lsls	r3, r3, #4
 80128b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80128b8:	7dfb      	ldrb	r3, [r7, #23]
 80128ba:	005b      	lsls	r3, r3, #1
 80128bc:	3301      	adds	r3, #1
 80128be:	68ba      	ldr	r2, [r7, #8]
 80128c0:	4413      	add	r3, r2
 80128c2:	2200      	movs	r2, #0
 80128c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80128c6:	7dfb      	ldrb	r3, [r7, #23]
 80128c8:	3301      	adds	r3, #1
 80128ca:	75fb      	strb	r3, [r7, #23]
 80128cc:	7dfa      	ldrb	r2, [r7, #23]
 80128ce:	79fb      	ldrb	r3, [r7, #7]
 80128d0:	429a      	cmp	r2, r3
 80128d2:	d3d3      	bcc.n	801287c <IntToUnicode+0x18>
  }
}
 80128d4:	bf00      	nop
 80128d6:	bf00      	nop
 80128d8:	371c      	adds	r7, #28
 80128da:	46bd      	mov	sp, r7
 80128dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e0:	4770      	bx	lr
	...

080128e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b0b8      	sub	sp, #224	; 0xe0
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80128ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80128f0:	2200      	movs	r2, #0
 80128f2:	601a      	str	r2, [r3, #0]
 80128f4:	605a      	str	r2, [r3, #4]
 80128f6:	609a      	str	r2, [r3, #8]
 80128f8:	60da      	str	r2, [r3, #12]
 80128fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80128fc:	f107 0310 	add.w	r3, r7, #16
 8012900:	22bc      	movs	r2, #188	; 0xbc
 8012902:	2100      	movs	r1, #0
 8012904:	4618      	mov	r0, r3
 8012906:	f000 fb73 	bl	8012ff0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	4a3a      	ldr	r2, [pc, #232]	; (80129f8 <HAL_PCD_MspInit+0x114>)
 8012910:	4293      	cmp	r3, r2
 8012912:	d16d      	bne.n	80129f0 <HAL_PCD_MspInit+0x10c>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012914:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012918:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 801291a:	2301      	movs	r3, #1
 801291c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 60;
 801291e:	233c      	movs	r3, #60	; 0x3c
 8012920:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8012922:	2302      	movs	r3, #2
 8012924:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 10;
 8012926:	230a      	movs	r3, #10
 8012928:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 801292a:	2302      	movs	r3, #2
 801292c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 801292e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8012932:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8012934:	2300      	movs	r3, #0
 8012936:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8012938:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801293c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012940:	f107 0310 	add.w	r3, r7, #16
 8012944:	4618      	mov	r0, r3
 8012946:	f7f7 fd59 	bl	800a3fc <HAL_RCCEx_PeriphCLKConfig>
 801294a:	4603      	mov	r3, r0
 801294c:	2b00      	cmp	r3, #0
 801294e:	d001      	beq.n	8012954 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8012950:	f7ef f99a 	bl	8001c88 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8012954:	f7f6 fd1e 	bl	8009394 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012958:	4b28      	ldr	r3, [pc, #160]	; (80129fc <HAL_PCD_MspInit+0x118>)
 801295a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801295e:	4a27      	ldr	r2, [pc, #156]	; (80129fc <HAL_PCD_MspInit+0x118>)
 8012960:	f043 0301 	orr.w	r3, r3, #1
 8012964:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012968:	4b24      	ldr	r3, [pc, #144]	; (80129fc <HAL_PCD_MspInit+0x118>)
 801296a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801296e:	f003 0301 	and.w	r3, r3, #1
 8012972:	60fb      	str	r3, [r7, #12]
 8012974:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012976:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801297a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801297e:	2302      	movs	r3, #2
 8012980:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012984:	2300      	movs	r3, #0
 8012986:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801298a:	2300      	movs	r3, #0
 801298c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8012990:	230a      	movs	r3, #10
 8012992:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012996:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801299a:	4619      	mov	r1, r3
 801299c:	4818      	ldr	r0, [pc, #96]	; (8012a00 <HAL_PCD_MspInit+0x11c>)
 801299e:	f7f4 ffb7 	bl	8007910 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80129a2:	4b16      	ldr	r3, [pc, #88]	; (80129fc <HAL_PCD_MspInit+0x118>)
 80129a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80129a8:	4a14      	ldr	r2, [pc, #80]	; (80129fc <HAL_PCD_MspInit+0x118>)
 80129aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80129ae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80129b2:	4b12      	ldr	r3, [pc, #72]	; (80129fc <HAL_PCD_MspInit+0x118>)
 80129b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80129b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80129bc:	60bb      	str	r3, [r7, #8]
 80129be:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 80129c0:	2200      	movs	r2, #0
 80129c2:	2100      	movs	r1, #0
 80129c4:	2062      	movs	r0, #98	; 0x62
 80129c6:	f7f2 f99a 	bl	8004cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 80129ca:	2062      	movs	r0, #98	; 0x62
 80129cc:	f7f2 f9b1 	bl	8004d32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_EP1_IN_IRQn, 0, 0);
 80129d0:	2200      	movs	r2, #0
 80129d2:	2100      	movs	r1, #0
 80129d4:	2063      	movs	r0, #99	; 0x63
 80129d6:	f7f2 f992 	bl	8004cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_IN_IRQn);
 80129da:	2063      	movs	r0, #99	; 0x63
 80129dc:	f7f2 f9a9 	bl	8004d32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80129e0:	2200      	movs	r2, #0
 80129e2:	2100      	movs	r1, #0
 80129e4:	2065      	movs	r0, #101	; 0x65
 80129e6:	f7f2 f98a 	bl	8004cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80129ea:	2065      	movs	r0, #101	; 0x65
 80129ec:	f7f2 f9a1 	bl	8004d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80129f0:	bf00      	nop
 80129f2:	37e0      	adds	r7, #224	; 0xe0
 80129f4:	46bd      	mov	sp, r7
 80129f6:	bd80      	pop	{r7, pc}
 80129f8:	40080000 	.word	0x40080000
 80129fc:	58024400 	.word	0x58024400
 8012a00:	58020000 	.word	0x58020000

08012a04 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b082      	sub	sp, #8
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8012a18:	4619      	mov	r1, r3
 8012a1a:	4610      	mov	r0, r2
 8012a1c:	f7fe fabd 	bl	8010f9a <USBD_LL_SetupStage>
}
 8012a20:	bf00      	nop
 8012a22:	3708      	adds	r7, #8
 8012a24:	46bd      	mov	sp, r7
 8012a26:	bd80      	pop	{r7, pc}

08012a28 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b082      	sub	sp, #8
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
 8012a30:	460b      	mov	r3, r1
 8012a32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8012a3a:	78fa      	ldrb	r2, [r7, #3]
 8012a3c:	6879      	ldr	r1, [r7, #4]
 8012a3e:	4613      	mov	r3, r2
 8012a40:	00db      	lsls	r3, r3, #3
 8012a42:	4413      	add	r3, r2
 8012a44:	009b      	lsls	r3, r3, #2
 8012a46:	440b      	add	r3, r1
 8012a48:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8012a4c:	681a      	ldr	r2, [r3, #0]
 8012a4e:	78fb      	ldrb	r3, [r7, #3]
 8012a50:	4619      	mov	r1, r3
 8012a52:	f7fe faf7 	bl	8011044 <USBD_LL_DataOutStage>
}
 8012a56:	bf00      	nop
 8012a58:	3708      	adds	r7, #8
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	bd80      	pop	{r7, pc}

08012a5e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012a5e:	b580      	push	{r7, lr}
 8012a60:	b082      	sub	sp, #8
 8012a62:	af00      	add	r7, sp, #0
 8012a64:	6078      	str	r0, [r7, #4]
 8012a66:	460b      	mov	r3, r1
 8012a68:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8012a70:	78fa      	ldrb	r2, [r7, #3]
 8012a72:	6879      	ldr	r1, [r7, #4]
 8012a74:	4613      	mov	r3, r2
 8012a76:	00db      	lsls	r3, r3, #3
 8012a78:	4413      	add	r3, r2
 8012a7a:	009b      	lsls	r3, r3, #2
 8012a7c:	440b      	add	r3, r1
 8012a7e:	334c      	adds	r3, #76	; 0x4c
 8012a80:	681a      	ldr	r2, [r3, #0]
 8012a82:	78fb      	ldrb	r3, [r7, #3]
 8012a84:	4619      	mov	r1, r3
 8012a86:	f7fe fb90 	bl	80111aa <USBD_LL_DataInStage>
}
 8012a8a:	bf00      	nop
 8012a8c:	3708      	adds	r7, #8
 8012a8e:	46bd      	mov	sp, r7
 8012a90:	bd80      	pop	{r7, pc}

08012a92 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012a92:	b580      	push	{r7, lr}
 8012a94:	b082      	sub	sp, #8
 8012a96:	af00      	add	r7, sp, #0
 8012a98:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	f7fe fcc4 	bl	801142e <USBD_LL_SOF>
}
 8012aa6:	bf00      	nop
 8012aa8:	3708      	adds	r7, #8
 8012aaa:	46bd      	mov	sp, r7
 8012aac:	bd80      	pop	{r7, pc}

08012aae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012aae:	b580      	push	{r7, lr}
 8012ab0:	b084      	sub	sp, #16
 8012ab2:	af00      	add	r7, sp, #0
 8012ab4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012ab6:	2301      	movs	r3, #1
 8012ab8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	68db      	ldr	r3, [r3, #12]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d102      	bne.n	8012ac8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8012ac2:	2300      	movs	r3, #0
 8012ac4:	73fb      	strb	r3, [r7, #15]
 8012ac6:	e008      	b.n	8012ada <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	68db      	ldr	r3, [r3, #12]
 8012acc:	2b02      	cmp	r3, #2
 8012ace:	d102      	bne.n	8012ad6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8012ad0:	2301      	movs	r3, #1
 8012ad2:	73fb      	strb	r3, [r7, #15]
 8012ad4:	e001      	b.n	8012ada <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8012ad6:	f7ef f8d7 	bl	8001c88 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012ae0:	7bfa      	ldrb	r2, [r7, #15]
 8012ae2:	4611      	mov	r1, r2
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	f7fe fc64 	bl	80113b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012af0:	4618      	mov	r0, r3
 8012af2:	f7fe fc0c 	bl	801130e <USBD_LL_Reset>
}
 8012af6:	bf00      	nop
 8012af8:	3710      	adds	r7, #16
 8012afa:	46bd      	mov	sp, r7
 8012afc:	bd80      	pop	{r7, pc}
	...

08012b00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b00:	b580      	push	{r7, lr}
 8012b02:	b082      	sub	sp, #8
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012b0e:	4618      	mov	r0, r3
 8012b10:	f7fe fc5f 	bl	80113d2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	687a      	ldr	r2, [r7, #4]
 8012b20:	6812      	ldr	r2, [r2, #0]
 8012b22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012b26:	f043 0301 	orr.w	r3, r3, #1
 8012b2a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	6a1b      	ldr	r3, [r3, #32]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d005      	beq.n	8012b40 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012b34:	4b04      	ldr	r3, [pc, #16]	; (8012b48 <HAL_PCD_SuspendCallback+0x48>)
 8012b36:	691b      	ldr	r3, [r3, #16]
 8012b38:	4a03      	ldr	r2, [pc, #12]	; (8012b48 <HAL_PCD_SuspendCallback+0x48>)
 8012b3a:	f043 0306 	orr.w	r3, r3, #6
 8012b3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012b40:	bf00      	nop
 8012b42:	3708      	adds	r7, #8
 8012b44:	46bd      	mov	sp, r7
 8012b46:	bd80      	pop	{r7, pc}
 8012b48:	e000ed00 	.word	0xe000ed00

08012b4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b4c:	b580      	push	{r7, lr}
 8012b4e:	b082      	sub	sp, #8
 8012b50:	af00      	add	r7, sp, #0
 8012b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	f7fe fc4f 	bl	80113fe <USBD_LL_Resume>
}
 8012b60:	bf00      	nop
 8012b62:	3708      	adds	r7, #8
 8012b64:	46bd      	mov	sp, r7
 8012b66:	bd80      	pop	{r7, pc}

08012b68 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b082      	sub	sp, #8
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	6078      	str	r0, [r7, #4]
 8012b70:	460b      	mov	r3, r1
 8012b72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012b7a:	78fa      	ldrb	r2, [r7, #3]
 8012b7c:	4611      	mov	r1, r2
 8012b7e:	4618      	mov	r0, r3
 8012b80:	f7fe fca7 	bl	80114d2 <USBD_LL_IsoOUTIncomplete>
}
 8012b84:	bf00      	nop
 8012b86:	3708      	adds	r7, #8
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	bd80      	pop	{r7, pc}

08012b8c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b8c:	b580      	push	{r7, lr}
 8012b8e:	b082      	sub	sp, #8
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	6078      	str	r0, [r7, #4]
 8012b94:	460b      	mov	r3, r1
 8012b96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012b9e:	78fa      	ldrb	r2, [r7, #3]
 8012ba0:	4611      	mov	r1, r2
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	f7fe fc63 	bl	801146e <USBD_LL_IsoINIncomplete>
}
 8012ba8:	bf00      	nop
 8012baa:	3708      	adds	r7, #8
 8012bac:	46bd      	mov	sp, r7
 8012bae:	bd80      	pop	{r7, pc}

08012bb0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b082      	sub	sp, #8
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	f7fe fcb9 	bl	8011536 <USBD_LL_DevConnected>
}
 8012bc4:	bf00      	nop
 8012bc6:	3708      	adds	r7, #8
 8012bc8:	46bd      	mov	sp, r7
 8012bca:	bd80      	pop	{r7, pc}

08012bcc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012bcc:	b580      	push	{r7, lr}
 8012bce:	b082      	sub	sp, #8
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012bda:	4618      	mov	r0, r3
 8012bdc:	f7fe fcb6 	bl	801154c <USBD_LL_DevDisconnected>
}
 8012be0:	bf00      	nop
 8012be2:	3708      	adds	r7, #8
 8012be4:	46bd      	mov	sp, r7
 8012be6:	bd80      	pop	{r7, pc}

08012be8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b082      	sub	sp, #8
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	781b      	ldrb	r3, [r3, #0]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d13e      	bne.n	8012c76 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012bf8:	4a21      	ldr	r2, [pc, #132]	; (8012c80 <USBD_LL_Init+0x98>)
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	4a1f      	ldr	r2, [pc, #124]	; (8012c80 <USBD_LL_Init+0x98>)
 8012c04:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012c08:	4b1d      	ldr	r3, [pc, #116]	; (8012c80 <USBD_LL_Init+0x98>)
 8012c0a:	4a1e      	ldr	r2, [pc, #120]	; (8012c84 <USBD_LL_Init+0x9c>)
 8012c0c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8012c0e:	4b1c      	ldr	r3, [pc, #112]	; (8012c80 <USBD_LL_Init+0x98>)
 8012c10:	2209      	movs	r2, #9
 8012c12:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8012c14:	4b1a      	ldr	r3, [pc, #104]	; (8012c80 <USBD_LL_Init+0x98>)
 8012c16:	2202      	movs	r2, #2
 8012c18:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012c1a:	4b19      	ldr	r3, [pc, #100]	; (8012c80 <USBD_LL_Init+0x98>)
 8012c1c:	2200      	movs	r2, #0
 8012c1e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012c20:	4b17      	ldr	r3, [pc, #92]	; (8012c80 <USBD_LL_Init+0x98>)
 8012c22:	2202      	movs	r2, #2
 8012c24:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012c26:	4b16      	ldr	r3, [pc, #88]	; (8012c80 <USBD_LL_Init+0x98>)
 8012c28:	2200      	movs	r2, #0
 8012c2a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8012c2c:	4b14      	ldr	r3, [pc, #80]	; (8012c80 <USBD_LL_Init+0x98>)
 8012c2e:	2200      	movs	r2, #0
 8012c30:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8012c32:	4b13      	ldr	r3, [pc, #76]	; (8012c80 <USBD_LL_Init+0x98>)
 8012c34:	2200      	movs	r2, #0
 8012c36:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8012c38:	4b11      	ldr	r3, [pc, #68]	; (8012c80 <USBD_LL_Init+0x98>)
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8012c3e:	4b10      	ldr	r3, [pc, #64]	; (8012c80 <USBD_LL_Init+0x98>)
 8012c40:	2200      	movs	r2, #0
 8012c42:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8012c44:	4b0e      	ldr	r3, [pc, #56]	; (8012c80 <USBD_LL_Init+0x98>)
 8012c46:	2200      	movs	r2, #0
 8012c48:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8012c4a:	480d      	ldr	r0, [pc, #52]	; (8012c80 <USBD_LL_Init+0x98>)
 8012c4c:	f7f5 f872 	bl	8007d34 <HAL_PCD_Init>
 8012c50:	4603      	mov	r3, r0
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d001      	beq.n	8012c5a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8012c56:	f7ef f817 	bl	8001c88 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8012c5a:	2180      	movs	r1, #128	; 0x80
 8012c5c:	4808      	ldr	r0, [pc, #32]	; (8012c80 <USBD_LL_Init+0x98>)
 8012c5e:	f7f6 fafe 	bl	800925e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8012c62:	2240      	movs	r2, #64	; 0x40
 8012c64:	2100      	movs	r1, #0
 8012c66:	4806      	ldr	r0, [pc, #24]	; (8012c80 <USBD_LL_Init+0x98>)
 8012c68:	f7f6 fab2 	bl	80091d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8012c6c:	2280      	movs	r2, #128	; 0x80
 8012c6e:	2101      	movs	r1, #1
 8012c70:	4803      	ldr	r0, [pc, #12]	; (8012c80 <USBD_LL_Init+0x98>)
 8012c72:	f7f6 faad 	bl	80091d0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8012c76:	2300      	movs	r3, #0
}
 8012c78:	4618      	mov	r0, r3
 8012c7a:	3708      	adds	r7, #8
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	bd80      	pop	{r7, pc}
 8012c80:	24067f90 	.word	0x24067f90
 8012c84:	40080000 	.word	0x40080000

08012c88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	b084      	sub	sp, #16
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012c90:	2300      	movs	r3, #0
 8012c92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012c94:	2300      	movs	r3, #0
 8012c96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	f7f5 f96c 	bl	8007f7c <HAL_PCD_Start>
 8012ca4:	4603      	mov	r3, r0
 8012ca6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012ca8:	7bfb      	ldrb	r3, [r7, #15]
 8012caa:	4618      	mov	r0, r3
 8012cac:	f000 f942 	bl	8012f34 <USBD_Get_USB_Status>
 8012cb0:	4603      	mov	r3, r0
 8012cb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012cb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	3710      	adds	r7, #16
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	bd80      	pop	{r7, pc}

08012cbe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012cbe:	b580      	push	{r7, lr}
 8012cc0:	b084      	sub	sp, #16
 8012cc2:	af00      	add	r7, sp, #0
 8012cc4:	6078      	str	r0, [r7, #4]
 8012cc6:	4608      	mov	r0, r1
 8012cc8:	4611      	mov	r1, r2
 8012cca:	461a      	mov	r2, r3
 8012ccc:	4603      	mov	r3, r0
 8012cce:	70fb      	strb	r3, [r7, #3]
 8012cd0:	460b      	mov	r3, r1
 8012cd2:	70bb      	strb	r3, [r7, #2]
 8012cd4:	4613      	mov	r3, r2
 8012cd6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012cd8:	2300      	movs	r3, #0
 8012cda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012cdc:	2300      	movs	r3, #0
 8012cde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012ce6:	78bb      	ldrb	r3, [r7, #2]
 8012ce8:	883a      	ldrh	r2, [r7, #0]
 8012cea:	78f9      	ldrb	r1, [r7, #3]
 8012cec:	f7f5 fe6a 	bl	80089c4 <HAL_PCD_EP_Open>
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012cf4:	7bfb      	ldrb	r3, [r7, #15]
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	f000 f91c 	bl	8012f34 <USBD_Get_USB_Status>
 8012cfc:	4603      	mov	r3, r0
 8012cfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012d00:	7bbb      	ldrb	r3, [r7, #14]
}
 8012d02:	4618      	mov	r0, r3
 8012d04:	3710      	adds	r7, #16
 8012d06:	46bd      	mov	sp, r7
 8012d08:	bd80      	pop	{r7, pc}

08012d0a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012d0a:	b580      	push	{r7, lr}
 8012d0c:	b084      	sub	sp, #16
 8012d0e:	af00      	add	r7, sp, #0
 8012d10:	6078      	str	r0, [r7, #4]
 8012d12:	460b      	mov	r3, r1
 8012d14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012d16:	2300      	movs	r3, #0
 8012d18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012d1a:	2300      	movs	r3, #0
 8012d1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012d24:	78fa      	ldrb	r2, [r7, #3]
 8012d26:	4611      	mov	r1, r2
 8012d28:	4618      	mov	r0, r3
 8012d2a:	f7f5 feb3 	bl	8008a94 <HAL_PCD_EP_Close>
 8012d2e:	4603      	mov	r3, r0
 8012d30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012d32:	7bfb      	ldrb	r3, [r7, #15]
 8012d34:	4618      	mov	r0, r3
 8012d36:	f000 f8fd 	bl	8012f34 <USBD_Get_USB_Status>
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012d3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012d40:	4618      	mov	r0, r3
 8012d42:	3710      	adds	r7, #16
 8012d44:	46bd      	mov	sp, r7
 8012d46:	bd80      	pop	{r7, pc}

08012d48 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b084      	sub	sp, #16
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
 8012d50:	460b      	mov	r3, r1
 8012d52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012d54:	2300      	movs	r3, #0
 8012d56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012d58:	2300      	movs	r3, #0
 8012d5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012d62:	78fa      	ldrb	r2, [r7, #3]
 8012d64:	4611      	mov	r1, r2
 8012d66:	4618      	mov	r0, r3
 8012d68:	f7f5 ff8b 	bl	8008c82 <HAL_PCD_EP_SetStall>
 8012d6c:	4603      	mov	r3, r0
 8012d6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012d70:	7bfb      	ldrb	r3, [r7, #15]
 8012d72:	4618      	mov	r0, r3
 8012d74:	f000 f8de 	bl	8012f34 <USBD_Get_USB_Status>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012d7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8012d7e:	4618      	mov	r0, r3
 8012d80:	3710      	adds	r7, #16
 8012d82:	46bd      	mov	sp, r7
 8012d84:	bd80      	pop	{r7, pc}

08012d86 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012d86:	b580      	push	{r7, lr}
 8012d88:	b084      	sub	sp, #16
 8012d8a:	af00      	add	r7, sp, #0
 8012d8c:	6078      	str	r0, [r7, #4]
 8012d8e:	460b      	mov	r3, r1
 8012d90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012d92:	2300      	movs	r3, #0
 8012d94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012d96:	2300      	movs	r3, #0
 8012d98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012da0:	78fa      	ldrb	r2, [r7, #3]
 8012da2:	4611      	mov	r1, r2
 8012da4:	4618      	mov	r0, r3
 8012da6:	f7f5 ffd0 	bl	8008d4a <HAL_PCD_EP_ClrStall>
 8012daa:	4603      	mov	r3, r0
 8012dac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012dae:	7bfb      	ldrb	r3, [r7, #15]
 8012db0:	4618      	mov	r0, r3
 8012db2:	f000 f8bf 	bl	8012f34 <USBD_Get_USB_Status>
 8012db6:	4603      	mov	r3, r0
 8012db8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012dba:	7bbb      	ldrb	r3, [r7, #14]
}
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	3710      	adds	r7, #16
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	bd80      	pop	{r7, pc}

08012dc4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012dc4:	b480      	push	{r7}
 8012dc6:	b085      	sub	sp, #20
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	6078      	str	r0, [r7, #4]
 8012dcc:	460b      	mov	r3, r1
 8012dce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012dd6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012dd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	da0b      	bge.n	8012df8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012de0:	78fb      	ldrb	r3, [r7, #3]
 8012de2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012de6:	68f9      	ldr	r1, [r7, #12]
 8012de8:	4613      	mov	r3, r2
 8012dea:	00db      	lsls	r3, r3, #3
 8012dec:	4413      	add	r3, r2
 8012dee:	009b      	lsls	r3, r3, #2
 8012df0:	440b      	add	r3, r1
 8012df2:	333e      	adds	r3, #62	; 0x3e
 8012df4:	781b      	ldrb	r3, [r3, #0]
 8012df6:	e00b      	b.n	8012e10 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012df8:	78fb      	ldrb	r3, [r7, #3]
 8012dfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012dfe:	68f9      	ldr	r1, [r7, #12]
 8012e00:	4613      	mov	r3, r2
 8012e02:	00db      	lsls	r3, r3, #3
 8012e04:	4413      	add	r3, r2
 8012e06:	009b      	lsls	r3, r3, #2
 8012e08:	440b      	add	r3, r1
 8012e0a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8012e0e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012e10:	4618      	mov	r0, r3
 8012e12:	3714      	adds	r7, #20
 8012e14:	46bd      	mov	sp, r7
 8012e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1a:	4770      	bx	lr

08012e1c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012e1c:	b580      	push	{r7, lr}
 8012e1e:	b084      	sub	sp, #16
 8012e20:	af00      	add	r7, sp, #0
 8012e22:	6078      	str	r0, [r7, #4]
 8012e24:	460b      	mov	r3, r1
 8012e26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012e28:	2300      	movs	r3, #0
 8012e2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012e36:	78fa      	ldrb	r2, [r7, #3]
 8012e38:	4611      	mov	r1, r2
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	f7f5 fd9d 	bl	800897a <HAL_PCD_SetAddress>
 8012e40:	4603      	mov	r3, r0
 8012e42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012e44:	7bfb      	ldrb	r3, [r7, #15]
 8012e46:	4618      	mov	r0, r3
 8012e48:	f000 f874 	bl	8012f34 <USBD_Get_USB_Status>
 8012e4c:	4603      	mov	r3, r0
 8012e4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012e50:	7bbb      	ldrb	r3, [r7, #14]
}
 8012e52:	4618      	mov	r0, r3
 8012e54:	3710      	adds	r7, #16
 8012e56:	46bd      	mov	sp, r7
 8012e58:	bd80      	pop	{r7, pc}

08012e5a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012e5a:	b580      	push	{r7, lr}
 8012e5c:	b086      	sub	sp, #24
 8012e5e:	af00      	add	r7, sp, #0
 8012e60:	60f8      	str	r0, [r7, #12]
 8012e62:	607a      	str	r2, [r7, #4]
 8012e64:	603b      	str	r3, [r7, #0]
 8012e66:	460b      	mov	r3, r1
 8012e68:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012e6e:	2300      	movs	r3, #0
 8012e70:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012e78:	7af9      	ldrb	r1, [r7, #11]
 8012e7a:	683b      	ldr	r3, [r7, #0]
 8012e7c:	687a      	ldr	r2, [r7, #4]
 8012e7e:	f7f5 feb6 	bl	8008bee <HAL_PCD_EP_Transmit>
 8012e82:	4603      	mov	r3, r0
 8012e84:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012e86:	7dfb      	ldrb	r3, [r7, #23]
 8012e88:	4618      	mov	r0, r3
 8012e8a:	f000 f853 	bl	8012f34 <USBD_Get_USB_Status>
 8012e8e:	4603      	mov	r3, r0
 8012e90:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012e92:	7dbb      	ldrb	r3, [r7, #22]
}
 8012e94:	4618      	mov	r0, r3
 8012e96:	3718      	adds	r7, #24
 8012e98:	46bd      	mov	sp, r7
 8012e9a:	bd80      	pop	{r7, pc}

08012e9c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012e9c:	b580      	push	{r7, lr}
 8012e9e:	b086      	sub	sp, #24
 8012ea0:	af00      	add	r7, sp, #0
 8012ea2:	60f8      	str	r0, [r7, #12]
 8012ea4:	607a      	str	r2, [r7, #4]
 8012ea6:	603b      	str	r3, [r7, #0]
 8012ea8:	460b      	mov	r3, r1
 8012eaa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012eac:	2300      	movs	r3, #0
 8012eae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012eb0:	2300      	movs	r3, #0
 8012eb2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012eba:	7af9      	ldrb	r1, [r7, #11]
 8012ebc:	683b      	ldr	r3, [r7, #0]
 8012ebe:	687a      	ldr	r2, [r7, #4]
 8012ec0:	f7f5 fe32 	bl	8008b28 <HAL_PCD_EP_Receive>
 8012ec4:	4603      	mov	r3, r0
 8012ec6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012ec8:	7dfb      	ldrb	r3, [r7, #23]
 8012eca:	4618      	mov	r0, r3
 8012ecc:	f000 f832 	bl	8012f34 <USBD_Get_USB_Status>
 8012ed0:	4603      	mov	r3, r0
 8012ed2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012ed4:	7dbb      	ldrb	r3, [r7, #22]
}
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	3718      	adds	r7, #24
 8012eda:	46bd      	mov	sp, r7
 8012edc:	bd80      	pop	{r7, pc}

08012ede <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012ede:	b580      	push	{r7, lr}
 8012ee0:	b082      	sub	sp, #8
 8012ee2:	af00      	add	r7, sp, #0
 8012ee4:	6078      	str	r0, [r7, #4]
 8012ee6:	460b      	mov	r3, r1
 8012ee8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012ef0:	78fa      	ldrb	r2, [r7, #3]
 8012ef2:	4611      	mov	r1, r2
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f7f5 fe62 	bl	8008bbe <HAL_PCD_EP_GetRxCount>
 8012efa:	4603      	mov	r3, r0
}
 8012efc:	4618      	mov	r0, r3
 8012efe:	3708      	adds	r7, #8
 8012f00:	46bd      	mov	sp, r7
 8012f02:	bd80      	pop	{r7, pc}

08012f04 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012f04:	b480      	push	{r7}
 8012f06:	b083      	sub	sp, #12
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012f0c:	4b03      	ldr	r3, [pc, #12]	; (8012f1c <USBD_static_malloc+0x18>)
}
 8012f0e:	4618      	mov	r0, r3
 8012f10:	370c      	adds	r7, #12
 8012f12:	46bd      	mov	sp, r7
 8012f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f18:	4770      	bx	lr
 8012f1a:	bf00      	nop
 8012f1c:	2406849c 	.word	0x2406849c

08012f20 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012f20:	b480      	push	{r7}
 8012f22:	b083      	sub	sp, #12
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	6078      	str	r0, [r7, #4]

}
 8012f28:	bf00      	nop
 8012f2a:	370c      	adds	r7, #12
 8012f2c:	46bd      	mov	sp, r7
 8012f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f32:	4770      	bx	lr

08012f34 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012f34:	b480      	push	{r7}
 8012f36:	b085      	sub	sp, #20
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	4603      	mov	r3, r0
 8012f3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012f3e:	2300      	movs	r3, #0
 8012f40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012f42:	79fb      	ldrb	r3, [r7, #7]
 8012f44:	2b03      	cmp	r3, #3
 8012f46:	d817      	bhi.n	8012f78 <USBD_Get_USB_Status+0x44>
 8012f48:	a201      	add	r2, pc, #4	; (adr r2, 8012f50 <USBD_Get_USB_Status+0x1c>)
 8012f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f4e:	bf00      	nop
 8012f50:	08012f61 	.word	0x08012f61
 8012f54:	08012f67 	.word	0x08012f67
 8012f58:	08012f6d 	.word	0x08012f6d
 8012f5c:	08012f73 	.word	0x08012f73
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012f60:	2300      	movs	r3, #0
 8012f62:	73fb      	strb	r3, [r7, #15]
    break;
 8012f64:	e00b      	b.n	8012f7e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012f66:	2303      	movs	r3, #3
 8012f68:	73fb      	strb	r3, [r7, #15]
    break;
 8012f6a:	e008      	b.n	8012f7e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012f6c:	2301      	movs	r3, #1
 8012f6e:	73fb      	strb	r3, [r7, #15]
    break;
 8012f70:	e005      	b.n	8012f7e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012f72:	2303      	movs	r3, #3
 8012f74:	73fb      	strb	r3, [r7, #15]
    break;
 8012f76:	e002      	b.n	8012f7e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012f78:	2303      	movs	r3, #3
 8012f7a:	73fb      	strb	r3, [r7, #15]
    break;
 8012f7c:	bf00      	nop
  }
  return usb_status;
 8012f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f80:	4618      	mov	r0, r3
 8012f82:	3714      	adds	r7, #20
 8012f84:	46bd      	mov	sp, r7
 8012f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f8a:	4770      	bx	lr

08012f8c <__libc_init_array>:
 8012f8c:	b570      	push	{r4, r5, r6, lr}
 8012f8e:	4d0d      	ldr	r5, [pc, #52]	; (8012fc4 <__libc_init_array+0x38>)
 8012f90:	4c0d      	ldr	r4, [pc, #52]	; (8012fc8 <__libc_init_array+0x3c>)
 8012f92:	1b64      	subs	r4, r4, r5
 8012f94:	10a4      	asrs	r4, r4, #2
 8012f96:	2600      	movs	r6, #0
 8012f98:	42a6      	cmp	r6, r4
 8012f9a:	d109      	bne.n	8012fb0 <__libc_init_array+0x24>
 8012f9c:	4d0b      	ldr	r5, [pc, #44]	; (8012fcc <__libc_init_array+0x40>)
 8012f9e:	4c0c      	ldr	r4, [pc, #48]	; (8012fd0 <__libc_init_array+0x44>)
 8012fa0:	f000 f82e 	bl	8013000 <_init>
 8012fa4:	1b64      	subs	r4, r4, r5
 8012fa6:	10a4      	asrs	r4, r4, #2
 8012fa8:	2600      	movs	r6, #0
 8012faa:	42a6      	cmp	r6, r4
 8012fac:	d105      	bne.n	8012fba <__libc_init_array+0x2e>
 8012fae:	bd70      	pop	{r4, r5, r6, pc}
 8012fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8012fb4:	4798      	blx	r3
 8012fb6:	3601      	adds	r6, #1
 8012fb8:	e7ee      	b.n	8012f98 <__libc_init_array+0xc>
 8012fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8012fbe:	4798      	blx	r3
 8012fc0:	3601      	adds	r6, #1
 8012fc2:	e7f2      	b.n	8012faa <__libc_init_array+0x1e>
 8012fc4:	080130a8 	.word	0x080130a8
 8012fc8:	080130a8 	.word	0x080130a8
 8012fcc:	080130a8 	.word	0x080130a8
 8012fd0:	080130ac 	.word	0x080130ac

08012fd4 <memcpy>:
 8012fd4:	440a      	add	r2, r1
 8012fd6:	4291      	cmp	r1, r2
 8012fd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8012fdc:	d100      	bne.n	8012fe0 <memcpy+0xc>
 8012fde:	4770      	bx	lr
 8012fe0:	b510      	push	{r4, lr}
 8012fe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012fe6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012fea:	4291      	cmp	r1, r2
 8012fec:	d1f9      	bne.n	8012fe2 <memcpy+0xe>
 8012fee:	bd10      	pop	{r4, pc}

08012ff0 <memset>:
 8012ff0:	4402      	add	r2, r0
 8012ff2:	4603      	mov	r3, r0
 8012ff4:	4293      	cmp	r3, r2
 8012ff6:	d100      	bne.n	8012ffa <memset+0xa>
 8012ff8:	4770      	bx	lr
 8012ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8012ffe:	e7f9      	b.n	8012ff4 <memset+0x4>

08013000 <_init>:
 8013000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013002:	bf00      	nop
 8013004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013006:	bc08      	pop	{r3}
 8013008:	469e      	mov	lr, r3
 801300a:	4770      	bx	lr

0801300c <_fini>:
 801300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801300e:	bf00      	nop
 8013010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013012:	bc08      	pop	{r3}
 8013014:	469e      	mov	lr, r3
 8013016:	4770      	bx	lr
