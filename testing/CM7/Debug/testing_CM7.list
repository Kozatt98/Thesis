
testing_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012ee0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08013178  08013178  00023178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013200  08013200  00030100  2**0
                  CONTENTS
  4 .ARM          00000008  08013200  08013200  00023200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013208  08013208  00030100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013208  08013208  00023208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801320c  0801320c  0002320c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  24000000  08013210  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00035748  24000100  08013310  00030100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24035848  08013310  00035848  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a01e  00000000  00000000  0003012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004aea  00000000  00000000  0005a14c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001eb8  00000000  00000000  0005ec38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cf0  00000000  00000000  00060af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004155d  00000000  00000000  000627e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029a7e  00000000  00000000  000a3d3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a4dab  00000000  00000000  000cd7bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00272566  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000083f0  00000000  00000000  002725b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000100 	.word	0x24000100
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08013160 	.word	0x08013160

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000104 	.word	0x24000104
 80002d4:	08013160 	.word	0x08013160

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 800070e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000712:	60fb      	str	r3, [r7, #12]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000714:	bf00      	nop
 8000716:	4b3e      	ldr	r3, [pc, #248]	; (8000810 <main+0x108>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x24>
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	60fa      	str	r2, [r7, #12]
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf4      	bgt.n	8000716 <main+0xe>
	if (timeout < 0)
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	2b00      	cmp	r3, #0
 8000730:	da01      	bge.n	8000736 <main+0x2e>
	{
		Error_Handler();
 8000732:	f001 fb4f 	bl	8001dd4 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000736:	f001 ff2d 	bl	8002594 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800073a:	f000 f9ff 	bl	8000b3c <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 800073e:	f000 fa8b 	bl	8000c58 <PeriphCommonClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000742:	4b33      	ldr	r3, [pc, #204]	; (8000810 <main+0x108>)
 8000744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000748:	4a31      	ldr	r2, [pc, #196]	; (8000810 <main+0x108>)
 800074a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000752:	4b2f      	ldr	r3, [pc, #188]	; (8000810 <main+0x108>)
 8000754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000760:	2000      	movs	r0, #0
 8000762:	f007 fb69 	bl	8007e38 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8000766:	2100      	movs	r1, #0
 8000768:	2000      	movs	r0, #0
 800076a:	f007 fb7f 	bl	8007e6c <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800076e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000772:	60fb      	str	r3, [r7, #12]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000774:	bf00      	nop
 8000776:	4b26      	ldr	r3, [pc, #152]	; (8000810 <main+0x108>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077e:	2b00      	cmp	r3, #0
 8000780:	d104      	bne.n	800078c <main+0x84>
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	1e5a      	subs	r2, r3, #1
 8000786:	60fa      	str	r2, [r7, #12]
 8000788:	2b00      	cmp	r3, #0
 800078a:	dcf4      	bgt.n	8000776 <main+0x6e>
	if (timeout < 0)
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	2b00      	cmp	r3, #0
 8000790:	da01      	bge.n	8000796 <main+0x8e>
	{
		Error_Handler();
 8000792:	f001 fb1f 	bl	8001dd4 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000796:	f000 fdd5 	bl	8001344 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 800079a:	f000 fd13 	bl	80011c4 <MX_USART3_UART_Init>
	MX_DMA_Init();
 800079e:	f000 fd5d 	bl	800125c <MX_DMA_Init>
	MX_ADC1_Init();
 80007a2:	f000 fa85 	bl	8000cb0 <MX_ADC1_Init>
	MX_TIM1_Init();
 80007a6:	f000 fc59 	bl	800105c <MX_TIM1_Init>
	MX_USB_DEVICE_Init();
 80007aa:	f011 fee5 	bl	8012578 <MX_USB_DEVICE_Init>
	MX_ADC3_Init();
 80007ae:	f000 fb63 	bl	8000e78 <MX_ADC3_Init>
	MX_ADC2_Init();
 80007b2:	f000 faf9 	bl	8000da8 <MX_ADC2_Init>
	MX_TIM16_Init();
 80007b6:	f000 fcdd 	bl	8001174 <MX_TIM16_Init>
	MX_COMP1_Init();
 80007ba:	f000 fbc3 	bl	8000f44 <MX_COMP1_Init>
	MX_COMP2_Init();
 80007be:	f000 fbef 	bl	8000fa0 <MX_COMP2_Init>
	MX_DAC1_Init();
 80007c2:	f000 fc19 	bl	8000ff8 <MX_DAC1_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007c6:	2102      	movs	r1, #2
 80007c8:	4812      	ldr	r0, [pc, #72]	; (8000814 <main+0x10c>)
 80007ca:	f007 fb1a 	bl	8007e02 <HAL_GPIO_TogglePin>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
 80007ce:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80007d6:	4810      	ldr	r0, [pc, #64]	; (8000818 <main+0x110>)
 80007d8:	f003 fe34 	bl	8004444 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
 80007dc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80007e4:	480d      	ldr	r0, [pc, #52]	; (800081c <main+0x114>)
 80007e6:	f003 fe2d 	bl	8004444 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
 80007ea:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80007f2:	480b      	ldr	r0, [pc, #44]	; (8000820 <main+0x118>)
 80007f4:	f003 fe26 	bl	8004444 <HAL_ADCEx_Calibration_Start>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007f8:	2102      	movs	r1, #2
 80007fa:	4806      	ldr	r0, [pc, #24]	; (8000814 <main+0x10c>)
 80007fc:	f007 fb01 	bl	8007e02 <HAL_GPIO_TogglePin>

	HAL_TIM_Base_Start_IT(&htim16);
 8000800:	4808      	ldr	r0, [pc, #32]	; (8000824 <main+0x11c>)
 8000802:	f00c f88f 	bl	800c924 <HAL_TIM_Base_Start_IT>

	uint16_t i = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < DATA_TO_SEND_LEN * 3; i++)
 800080a:	2300      	movs	r3, #0
 800080c:	817b      	strh	r3, [r7, #10]
 800080e:	e013      	b.n	8000838 <main+0x130>
 8000810:	58024400 	.word	0x58024400
 8000814:	58021000 	.word	0x58021000
 8000818:	2400011c 	.word	0x2400011c
 800081c:	24000180 	.word	0x24000180
 8000820:	240001e4 	.word	0x240001e4
 8000824:	24000468 	.word	0x24000468
	{
		dummy_data_to_send[i] = i & 0xFF;
 8000828:	897b      	ldrh	r3, [r7, #10]
 800082a:	897a      	ldrh	r2, [r7, #10]
 800082c:	b2d1      	uxtb	r1, r2
 800082e:	4aa7      	ldr	r2, [pc, #668]	; (8000acc <main+0x3c4>)
 8000830:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < DATA_TO_SEND_LEN * 3; i++)
 8000832:	897b      	ldrh	r3, [r7, #10]
 8000834:	3301      	adds	r3, #1
 8000836:	817b      	strh	r3, [r7, #10]
 8000838:	897b      	ldrh	r3, [r7, #10]
 800083a:	f240 52db 	movw	r2, #1499	; 0x5db
 800083e:	4293      	cmp	r3, r2
 8000840:	d9f2      	bls.n	8000828 <main+0x120>
	}
	options->changed = 0;
 8000842:	4ba3      	ldr	r3, [pc, #652]	; (8000ad0 <main+0x3c8>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2200      	movs	r2, #0
 8000848:	721a      	strb	r2, [r3, #8]

	while (!start_flag)
 800084a:	bf00      	nop
 800084c:	4ba1      	ldr	r3, [pc, #644]	; (8000ad4 <main+0x3cc>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b2db      	uxtb	r3, r3
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0fa      	beq.n	800084c <main+0x144>
	{
		//waiting for usb connection
	}

	HAL_ADC_Stop_DMA(&hadc1);
 8000856:	48a0      	ldr	r0, [pc, #640]	; (8000ad8 <main+0x3d0>)
 8000858:	f002 fc56 	bl	8003108 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 800085c:	489f      	ldr	r0, [pc, #636]	; (8000adc <main+0x3d4>)
 800085e:	f002 fc53 	bl	8003108 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc3);
 8000862:	489f      	ldr	r0, [pc, #636]	; (8000ae0 <main+0x3d8>)
 8000864:	f002 fc50 	bl	8003108 <HAL_ADC_Stop_DMA>

	HAL_COMP_Stop(&hcomp1);
 8000868:	489e      	ldr	r0, [pc, #632]	; (8000ae4 <main+0x3dc>)
 800086a:	f004 f8d3 	bl	8004a14 <HAL_COMP_Stop>
	HAL_COMP_Stop(&hcomp2);
 800086e:	489e      	ldr	r0, [pc, #632]	; (8000ae8 <main+0x3e0>)
 8000870:	f004 f8d0 	bl	8004a14 <HAL_COMP_Stop>

	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000874:	2100      	movs	r1, #0
 8000876:	489d      	ldr	r0, [pc, #628]	; (8000aec <main+0x3e4>)
 8000878:	f004 fb5c 	bl	8004f34 <HAL_DAC_Start>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800087c:	2100      	movs	r1, #0
 800087e:	489c      	ldr	r0, [pc, #624]	; (8000af0 <main+0x3e8>)
 8000880:	f00c fa2e 	bl	800cce0 <HAL_TIM_PWM_Stop>

	HAL_Delay(500);
 8000884:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000888:	f001 ff16 	bl	80026b8 <HAL_Delay>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_Buf_A_1, ADC_HALF_BUF_LEN * 2);
 800088c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000890:	4998      	ldr	r1, [pc, #608]	; (8000af4 <main+0x3ec>)
 8000892:	4891      	ldr	r0, [pc, #580]	; (8000ad8 <main+0x3d0>)
 8000894:	f002 fb74 	bl	8002f80 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) ADC_Buf_B_1, ADC_HALF_BUF_LEN * 2);
 8000898:	f644 6220 	movw	r2, #20000	; 0x4e20
 800089c:	4996      	ldr	r1, [pc, #600]	; (8000af8 <main+0x3f0>)
 800089e:	488f      	ldr	r0, [pc, #572]	; (8000adc <main+0x3d4>)
 80008a0:	f002 fb6e 	bl	8002f80 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC_Buf_C_1, ADC_HALF_BUF_LEN * 2);
 80008a4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80008a8:	4994      	ldr	r1, [pc, #592]	; (8000afc <main+0x3f4>)
 80008aa:	488d      	ldr	r0, [pc, #564]	; (8000ae0 <main+0x3d8>)
 80008ac:	f002 fb68 	bl	8002f80 <HAL_ADC_Start_DMA>

//			HAL_COMP_Start_IT(&hcomp1);
//			HAL_COMP_Start_IT(&hcomp2);

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80008b0:	2100      	movs	r1, #0
 80008b2:	488f      	ldr	r0, [pc, #572]	; (8000af0 <main+0x3e8>)
 80008b4:	f00c f906 	bl	800cac4 <HAL_TIM_PWM_Start>

	trigger_A_pos = 0;
 80008b8:	4b91      	ldr	r3, [pc, #580]	; (8000b00 <main+0x3f8>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	801a      	strh	r2, [r3, #0]
	trigger_B_pos = 0;
 80008be:	4b91      	ldr	r3, [pc, #580]	; (8000b04 <main+0x3fc>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	801a      	strh	r2, [r3, #0]

	buf_A_pos = 0;
 80008c4:	4b90      	ldr	r3, [pc, #576]	; (8000b08 <main+0x400>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	801a      	strh	r2, [r3, #0]
	buf_B_pos = 0;
 80008ca:	4b90      	ldr	r3, [pc, #576]	; (8000b0c <main+0x404>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	801a      	strh	r2, [r3, #0]
	buf_C_pos = 0;
 80008d0:	4b8f      	ldr	r3, [pc, #572]	; (8000b10 <main+0x408>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	801a      	strh	r2, [r3, #0]

	start_flag = RESET;
 80008d6:	4b7f      	ldr	r3, [pc, #508]	; (8000ad4 <main+0x3cc>)
 80008d8:	2200      	movs	r2, #0
 80008da:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80008dc:	2101      	movs	r1, #1
 80008de:	488d      	ldr	r0, [pc, #564]	; (8000b14 <main+0x40c>)
 80008e0:	f007 fa8f 	bl	8007e02 <HAL_GPIO_TogglePin>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{

		if (trigger_flag)
 80008e4:	4b8c      	ldr	r3, [pc, #560]	; (8000b18 <main+0x410>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d039      	beq.n	8000962 <main+0x25a>
		{
			if (options->trigger_channel == 1)
 80008ee:	4b78      	ldr	r3, [pc, #480]	; (8000ad0 <main+0x3c8>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	799b      	ldrb	r3, [r3, #6]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d117      	bne.n	8000928 <main+0x220>
			{
				if (buf_A_quadrant == (trigger_quadrant + 1) & 3)
 80008f8:	4b88      	ldr	r3, [pc, #544]	; (8000b1c <main+0x414>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	461a      	mov	r2, r3
 8000900:	4b87      	ldr	r3, [pc, #540]	; (8000b20 <main+0x418>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	3301      	adds	r3, #1
 8000908:	429a      	cmp	r2, r3
 800090a:	d10d      	bne.n	8000928 <main+0x220>
				{
					copy_to_tmp_array();
 800090c:	f001 f862 	bl	80019d4 <copy_to_tmp_array>
					prepare_data_to_send(trigger_A_pos);
 8000910:	4b7b      	ldr	r3, [pc, #492]	; (8000b00 <main+0x3f8>)
 8000912:	881b      	ldrh	r3, [r3, #0]
 8000914:	b29b      	uxth	r3, r3
 8000916:	4618      	mov	r0, r3
 8000918:	f001 f996 	bl	8001c48 <prepare_data_to_send>
					ready_to_send_flag = 1;
 800091c:	4b81      	ldr	r3, [pc, #516]	; (8000b24 <main+0x41c>)
 800091e:	2201      	movs	r2, #1
 8000920:	701a      	strb	r2, [r3, #0]
					trigger_flag = 0;
 8000922:	4b7d      	ldr	r3, [pc, #500]	; (8000b18 <main+0x410>)
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]
				}
			}
			if (options->trigger_channel == 2)
 8000928:	4b69      	ldr	r3, [pc, #420]	; (8000ad0 <main+0x3c8>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	799b      	ldrb	r3, [r3, #6]
 800092e:	2b02      	cmp	r3, #2
 8000930:	d117      	bne.n	8000962 <main+0x25a>
			{
				if (buf_B_quadrant == (trigger_quadrant + 1) & 3)
 8000932:	4b7d      	ldr	r3, [pc, #500]	; (8000b28 <main+0x420>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	b2db      	uxtb	r3, r3
 8000938:	461a      	mov	r2, r3
 800093a:	4b79      	ldr	r3, [pc, #484]	; (8000b20 <main+0x418>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	3301      	adds	r3, #1
 8000942:	429a      	cmp	r2, r3
 8000944:	d10d      	bne.n	8000962 <main+0x25a>
				{
					copy_to_tmp_array();
 8000946:	f001 f845 	bl	80019d4 <copy_to_tmp_array>
					prepare_data_to_send(trigger_B_pos);
 800094a:	4b6e      	ldr	r3, [pc, #440]	; (8000b04 <main+0x3fc>)
 800094c:	881b      	ldrh	r3, [r3, #0]
 800094e:	b29b      	uxth	r3, r3
 8000950:	4618      	mov	r0, r3
 8000952:	f001 f979 	bl	8001c48 <prepare_data_to_send>
					ready_to_send_flag = 1;
 8000956:	4b73      	ldr	r3, [pc, #460]	; (8000b24 <main+0x41c>)
 8000958:	2201      	movs	r2, #1
 800095a:	701a      	strb	r2, [r3, #0]
					trigger_flag = 0;
 800095c:	4b6e      	ldr	r3, [pc, #440]	; (8000b18 <main+0x410>)
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		if (options->changed)
 8000962:	4b5b      	ldr	r3, [pc, #364]	; (8000ad0 <main+0x3c8>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	7a1b      	ldrb	r3, [r3, #8]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d0bb      	beq.n	80008e4 <main+0x1dc>
		{

			first_triggering = 0;
 800096c:	4b6f      	ldr	r3, [pc, #444]	; (8000b2c <main+0x424>)
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]
			//TODO(Attila): Set everything

			//MUX 1
			HAL_GPIO_WritePin(MUX_1_A_GPIO_Port, MUX_1_A_Pin, !(options->channelA & 1));
 8000972:	4b57      	ldr	r3, [pc, #348]	; (8000ad0 <main+0x3c8>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	f003 0301 	and.w	r3, r3, #1
 800097c:	2b00      	cmp	r3, #0
 800097e:	bf0c      	ite	eq
 8000980:	2301      	moveq	r3, #1
 8000982:	2300      	movne	r3, #0
 8000984:	b2db      	uxtb	r3, r3
 8000986:	461a      	mov	r2, r3
 8000988:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800098c:	4868      	ldr	r0, [pc, #416]	; (8000b30 <main+0x428>)
 800098e:	f007 fa1f 	bl	8007dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_1_B_GPIO_Port, MUX_1_B_Pin, !(options->channelA & 2));
 8000992:	4b4f      	ldr	r3, [pc, #316]	; (8000ad0 <main+0x3c8>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	f003 0302 	and.w	r3, r3, #2
 800099c:	2b00      	cmp	r3, #0
 800099e:	bf0c      	ite	eq
 80009a0:	2301      	moveq	r3, #1
 80009a2:	2300      	movne	r3, #0
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	461a      	mov	r2, r3
 80009a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009ac:	4860      	ldr	r0, [pc, #384]	; (8000b30 <main+0x428>)
 80009ae:	f007 fa0f 	bl	8007dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_1_C_GPIO_Port, MUX_1_C_Pin, !(options->channelA & 4));
 80009b2:	4b47      	ldr	r3, [pc, #284]	; (8000ad0 <main+0x3c8>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	f003 0304 	and.w	r3, r3, #4
 80009bc:	2b00      	cmp	r3, #0
 80009be:	bf0c      	ite	eq
 80009c0:	2301      	moveq	r3, #1
 80009c2:	2300      	movne	r3, #0
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	461a      	mov	r2, r3
 80009c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009cc:	4858      	ldr	r0, [pc, #352]	; (8000b30 <main+0x428>)
 80009ce:	f007 f9ff 	bl	8007dd0 <HAL_GPIO_WritePin>

			//MUX 2
			HAL_GPIO_WritePin(MUX_2_A_GPIO_Port, MUX_2_A_Pin, !(options->channelB & 1));
 80009d2:	4b3f      	ldr	r3, [pc, #252]	; (8000ad0 <main+0x3c8>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	785b      	ldrb	r3, [r3, #1]
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	2b00      	cmp	r3, #0
 80009de:	bf0c      	ite	eq
 80009e0:	2301      	moveq	r3, #1
 80009e2:	2300      	movne	r3, #0
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	461a      	mov	r2, r3
 80009e8:	2104      	movs	r1, #4
 80009ea:	4852      	ldr	r0, [pc, #328]	; (8000b34 <main+0x42c>)
 80009ec:	f007 f9f0 	bl	8007dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_2_B_GPIO_Port, MUX_2_B_Pin, !(options->channelB & 2));
 80009f0:	4b37      	ldr	r3, [pc, #220]	; (8000ad0 <main+0x3c8>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	785b      	ldrb	r3, [r3, #1]
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	bf0c      	ite	eq
 80009fe:	2301      	moveq	r3, #1
 8000a00:	2300      	movne	r3, #0
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	461a      	mov	r2, r3
 8000a06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a0a:	484b      	ldr	r0, [pc, #300]	; (8000b38 <main+0x430>)
 8000a0c:	f007 f9e0 	bl	8007dd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_2_C_GPIO_Port, MUX_2_C_Pin, !(options->channelB & 4));
 8000a10:	4b2f      	ldr	r3, [pc, #188]	; (8000ad0 <main+0x3c8>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	785b      	ldrb	r3, [r3, #1]
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	bf0c      	ite	eq
 8000a1e:	2301      	moveq	r3, #1
 8000a20:	2300      	movne	r3, #0
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	461a      	mov	r2, r3
 8000a26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a2a:	4843      	ldr	r0, [pc, #268]	; (8000b38 <main+0x430>)
 8000a2c:	f007 f9d0 	bl	8007dd0 <HAL_GPIO_WritePin>

			//DAC setting
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, options->trigger_value);
 8000a30:	4b27      	ldr	r3, [pc, #156]	; (8000ad0 <main+0x3c8>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	889b      	ldrh	r3, [r3, #4]
 8000a36:	2200      	movs	r2, #0
 8000a38:	2100      	movs	r1, #0
 8000a3a:	482c      	ldr	r0, [pc, #176]	; (8000aec <main+0x3e4>)
 8000a3c:	f004 facc 	bl	8004fd8 <HAL_DAC_SetValue>

			//Trigger Mode
			switch (options->trigger_option)
 8000a40:	4b23      	ldr	r3, [pc, #140]	; (8000ad0 <main+0x3c8>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	78db      	ldrb	r3, [r3, #3]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d002      	beq.n	8000a50 <main+0x348>
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d01c      	beq.n	8000a88 <main+0x380>
 8000a4e:	e031      	b.n	8000ab4 <main+0x3ac>
			{
			case 0:
				hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 8000a50:	4b24      	ldr	r3, [pc, #144]	; (8000ae4 <main+0x3dc>)
 8000a52:	2211      	movs	r2, #17
 8000a54:	621a      	str	r2, [r3, #32]
				hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 8000a56:	4b24      	ldr	r3, [pc, #144]	; (8000ae8 <main+0x3e0>)
 8000a58:	2211      	movs	r2, #17
 8000a5a:	621a      	str	r2, [r3, #32]

				HAL_COMP_Stop_IT(&hcomp1);
 8000a5c:	4821      	ldr	r0, [pc, #132]	; (8000ae4 <main+0x3dc>)
 8000a5e:	f004 f85f 	bl	8004b20 <HAL_COMP_Stop_IT>
				HAL_COMP_Stop_IT(&hcomp2);
 8000a62:	4821      	ldr	r0, [pc, #132]	; (8000ae8 <main+0x3e0>)
 8000a64:	f004 f85c 	bl	8004b20 <HAL_COMP_Stop_IT>

				HAL_COMP_Init(&hcomp1);
 8000a68:	481e      	ldr	r0, [pc, #120]	; (8000ae4 <main+0x3dc>)
 8000a6a:	f003 fe5f 	bl	800472c <HAL_COMP_Init>
				HAL_COMP_Init(&hcomp2);
 8000a6e:	481e      	ldr	r0, [pc, #120]	; (8000ae8 <main+0x3e0>)
 8000a70:	f003 fe5c 	bl	800472c <HAL_COMP_Init>

				trigger_flag = 0;
 8000a74:	4b28      	ldr	r3, [pc, #160]	; (8000b18 <main+0x410>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]
				HAL_COMP_Start(&hcomp1);
 8000a7a:	481a      	ldr	r0, [pc, #104]	; (8000ae4 <main+0x3dc>)
 8000a7c:	f003 ff80 	bl	8004980 <HAL_COMP_Start>
				HAL_COMP_Start(&hcomp2);
 8000a80:	4819      	ldr	r0, [pc, #100]	; (8000ae8 <main+0x3e0>)
 8000a82:	f003 ff7d 	bl	8004980 <HAL_COMP_Start>
				break;
 8000a86:	e01c      	b.n	8000ac2 <main+0x3ba>

			case 1:
				hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_FALLING;
 8000a88:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <main+0x3dc>)
 8000a8a:	2221      	movs	r2, #33	; 0x21
 8000a8c:	621a      	str	r2, [r3, #32]
				hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_FALLING;
 8000a8e:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <main+0x3e0>)
 8000a90:	2221      	movs	r2, #33	; 0x21
 8000a92:	621a      	str	r2, [r3, #32]

				HAL_COMP_Init(&hcomp1);
 8000a94:	4813      	ldr	r0, [pc, #76]	; (8000ae4 <main+0x3dc>)
 8000a96:	f003 fe49 	bl	800472c <HAL_COMP_Init>
				HAL_COMP_Init(&hcomp2);
 8000a9a:	4813      	ldr	r0, [pc, #76]	; (8000ae8 <main+0x3e0>)
 8000a9c:	f003 fe46 	bl	800472c <HAL_COMP_Init>

				trigger_flag = 0;
 8000aa0:	4b1d      	ldr	r3, [pc, #116]	; (8000b18 <main+0x410>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
				HAL_COMP_Start(&hcomp1);
 8000aa6:	480f      	ldr	r0, [pc, #60]	; (8000ae4 <main+0x3dc>)
 8000aa8:	f003 ff6a 	bl	8004980 <HAL_COMP_Start>
				HAL_COMP_Start(&hcomp2);
 8000aac:	480e      	ldr	r0, [pc, #56]	; (8000ae8 <main+0x3e0>)
 8000aae:	f003 ff67 	bl	8004980 <HAL_COMP_Start>
				break;
 8000ab2:	e006      	b.n	8000ac2 <main+0x3ba>

			default:
				HAL_COMP_Stop(&hcomp1);
 8000ab4:	480b      	ldr	r0, [pc, #44]	; (8000ae4 <main+0x3dc>)
 8000ab6:	f003 ffad 	bl	8004a14 <HAL_COMP_Stop>
				HAL_COMP_Stop(&hcomp2);
 8000aba:	480b      	ldr	r0, [pc, #44]	; (8000ae8 <main+0x3e0>)
 8000abc:	f003 ffaa 	bl	8004a14 <HAL_COMP_Stop>

				break;
 8000ac0:	bf00      	nop
			}

			options->changed = 0;
 8000ac2:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <main+0x3c8>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	721a      	strb	r2, [r3, #8]
		if (trigger_flag)
 8000aca:	e70b      	b.n	80008e4 <main+0x1dc>
 8000acc:	24033ffc 	.word	0x24033ffc
 8000ad0:	240345d8 	.word	0x240345d8
 8000ad4:	24033a13 	.word	0x24033a13
 8000ad8:	2400011c 	.word	0x2400011c
 8000adc:	24000180 	.word	0x24000180
 8000ae0:	240001e4 	.word	0x240001e4
 8000ae4:	240003b0 	.word	0x240003b0
 8000ae8:	240003dc 	.word	0x240003dc
 8000aec:	24000408 	.word	0x24000408
 8000af0:	2400041c 	.word	0x2400041c
 8000af4:	240005bc 	.word	0x240005bc
 8000af8:	240053dc 	.word	0x240053dc
 8000afc:	2400a1fc 	.word	0x2400a1fc
 8000b00:	24033a0e 	.word	0x24033a0e
 8000b04:	24033a10 	.word	0x24033a10
 8000b08:	24033a16 	.word	0x24033a16
 8000b0c:	24033a18 	.word	0x24033a18
 8000b10:	24033a1a 	.word	0x24033a1a
 8000b14:	58020400 	.word	0x58020400
 8000b18:	24033a0c 	.word	0x24033a0c
 8000b1c:	24033a1c 	.word	0x24033a1c
 8000b20:	24033a12 	.word	0x24033a12
 8000b24:	24033a14 	.word	0x24033a14
 8000b28:	24033a1d 	.word	0x24033a1d
 8000b2c:	24033a1f 	.word	0x24033a1f
 8000b30:	58020800 	.word	0x58020800
 8000b34:	58020c00 	.word	0x58020c00
 8000b38:	58021800 	.word	0x58021800

08000b3c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b09c      	sub	sp, #112	; 0x70
 8000b40:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b46:	224c      	movs	r2, #76	; 0x4c
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f012 fb00 	bl	8013150 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	2220      	movs	r2, #32
 8000b54:	2100      	movs	r1, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f012 fafa 	bl	8013150 <memset>
	{ 0 };

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b5c:	2004      	movs	r0, #4
 8000b5e:	f008 fc6f 	bl	8009440 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b62:	2300      	movs	r3, #0
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	4b39      	ldr	r3, [pc, #228]	; (8000c4c <SystemClock_Config+0x110>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	4a38      	ldr	r2, [pc, #224]	; (8000c4c <SystemClock_Config+0x110>)
 8000b6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b70:	6193      	str	r3, [r2, #24]
 8000b72:	4b36      	ldr	r3, [pc, #216]	; (8000c4c <SystemClock_Config+0x110>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	4b34      	ldr	r3, [pc, #208]	; (8000c50 <SystemClock_Config+0x114>)
 8000b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b80:	4a33      	ldr	r2, [pc, #204]	; (8000c50 <SystemClock_Config+0x114>)
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b88:	4b31      	ldr	r3, [pc, #196]	; (8000c50 <SystemClock_Config+0x114>)
 8000b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000b94:	bf00      	nop
 8000b96:	4b2d      	ldr	r3, [pc, #180]	; (8000c4c <SystemClock_Config+0x110>)
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ba2:	d1f8      	bne.n	8000b96 <SystemClock_Config+0x5a>
	{
	}

	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000ba4:	4b2b      	ldr	r3, [pc, #172]	; (8000c54 <SystemClock_Config+0x118>)
 8000ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba8:	f023 0303 	bic.w	r3, r3, #3
 8000bac:	4a29      	ldr	r2, [pc, #164]	; (8000c54 <SystemClock_Config+0x118>)
 8000bae:	f043 0302 	orr.w	r3, r3, #2
 8000bb2:	6293      	str	r3, [r2, #40]	; 0x28

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSE;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bb8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bc2:	2340      	movs	r3, #64	; 0x40
 8000bc4:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 120;
 8000bd2:	2378      	movs	r3, #120	; 0x78
 8000bd4:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bda:	2304      	movs	r3, #4
 8000bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000bde:	2302      	movs	r3, #2
 8000be0:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000be2:	230c      	movs	r3, #12
 8000be4:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f008 fc8e 	bl	8009514 <HAL_RCC_OscConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8000bfe:	f001 f8e9 	bl	8001dd4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8000c02:	233f      	movs	r3, #63	; 0x3f
 8000c04:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c06:	2303      	movs	r3, #3
 8000c08:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c0e:	2308      	movs	r3, #8
 8000c10:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c12:	2340      	movs	r3, #64	; 0x40
 8000c14:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c16:	2340      	movs	r3, #64	; 0x40
 8000c18:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c1e:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c20:	2340      	movs	r3, #64	; 0x40
 8000c22:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	2104      	movs	r1, #4
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f009 f8a1 	bl	8009d70 <HAL_RCC_ClockConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <SystemClock_Config+0xfc>
	{
		Error_Handler();
 8000c34:	f001 f8ce 	bl	8001dd4 <Error_Handler>
	}
	HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_1);
 8000c38:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2001      	movs	r0, #1
 8000c40:	f009 fa4c 	bl	800a0dc <HAL_RCC_MCOConfig>
}
 8000c44:	bf00      	nop
 8000c46:	3770      	adds	r7, #112	; 0x70
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	58024800 	.word	0x58024800
 8000c50:	58000400 	.word	0x58000400
 8000c54:	58024400 	.word	0x58024400

08000c58 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b0b0      	sub	sp, #192	; 0xc0
 8000c5c:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct =
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	22bc      	movs	r2, #188	; 0xbc
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f012 fa73 	bl	8013150 <memset>
	{ 0 };

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c6a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000c6e:	607b      	str	r3, [r7, #4]
	PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000c70:	2301      	movs	r3, #1
 8000c72:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 50;
 8000c74:	2332      	movs	r3, #50	; 0x32
 8000c76:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 8;
 8000c78:	2308      	movs	r3, #8
 8000c7a:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c80:	2302      	movs	r3, #2
 8000c82:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000c84:	23c0      	movs	r3, #192	; 0xc0
 8000c86:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000c90:	2300      	movs	r3, #0
 8000c92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f009 fc5f 	bl	800a55c <HAL_RCCEx_PeriphCLKConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <PeriphCommonClock_Config+0x50>
	{
		Error_Handler();
 8000ca4:	f001 f896 	bl	8001dd4 <Error_Handler>
	}
}
 8000ca8:	bf00      	nop
 8000caa:	37c0      	adds	r7, #192	; 0xc0
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	; 0x28
 8000cb4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode =
 8000cb6:	f107 031c 	add.w	r3, r7, #28
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
	{ 0 };
	ADC_ChannelConfTypeDef sConfig =
 8000cc2:	463b      	mov	r3, r7
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
 8000cd0:	615a      	str	r2, [r3, #20]
 8000cd2:	619a      	str	r2, [r3, #24]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000cd4:	4b31      	ldr	r3, [pc, #196]	; (8000d9c <MX_ADC1_Init+0xec>)
 8000cd6:	4a32      	ldr	r2, [pc, #200]	; (8000da0 <MX_ADC1_Init+0xf0>)
 8000cd8:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cda:	4b30      	ldr	r3, [pc, #192]	; (8000d9c <MX_ADC1_Init+0xec>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000ce0:	4b2e      	ldr	r3, [pc, #184]	; (8000d9c <MX_ADC1_Init+0xec>)
 8000ce2:	2210      	movs	r2, #16
 8000ce4:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ce6:	4b2d      	ldr	r3, [pc, #180]	; (8000d9c <MX_ADC1_Init+0xec>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	60da      	str	r2, [r3, #12]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cec:	4b2b      	ldr	r3, [pc, #172]	; (8000d9c <MX_ADC1_Init+0xec>)
 8000cee:	2204      	movs	r2, #4
 8000cf0:	611a      	str	r2, [r3, #16]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cf2:	4b2a      	ldr	r3, [pc, #168]	; (8000d9c <MX_ADC1_Init+0xec>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000cf8:	4b28      	ldr	r3, [pc, #160]	; (8000d9c <MX_ADC1_Init+0xec>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	755a      	strb	r2, [r3, #21]
	hadc1.Init.NbrOfConversion = 1;
 8000cfe:	4b27      	ldr	r3, [pc, #156]	; (8000d9c <MX_ADC1_Init+0xec>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d04:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <MX_ADC1_Init+0xec>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000d0a:	4b24      	ldr	r3, [pc, #144]	; (8000d9c <MX_ADC1_Init+0xec>)
 8000d0c:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000d10:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d12:	4b22      	ldr	r3, [pc, #136]	; (8000d9c <MX_ADC1_Init+0xec>)
 8000d14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d18:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 8000d1a:	4b20      	ldr	r3, [pc, #128]	; (8000d9c <MX_ADC1_Init+0xec>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d20:	4b1e      	ldr	r3, [pc, #120]	; (8000d9c <MX_ADC1_Init+0xec>)
 8000d22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d26:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d28:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <MX_ADC1_Init+0xec>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8000d2e:	4b1b      	ldr	r3, [pc, #108]	; (8000d9c <MX_ADC1_Init+0xec>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d36:	4819      	ldr	r0, [pc, #100]	; (8000d9c <MX_ADC1_Init+0xec>)
 8000d38:	f001 ff80 	bl	8002c3c <HAL_ADC_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_ADC1_Init+0x96>
	{
		Error_Handler();
 8000d42:	f001 f847 	bl	8001dd4 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4812      	ldr	r0, [pc, #72]	; (8000d9c <MX_ADC1_Init+0xec>)
 8000d52:	f003 fc0d 	bl	8004570 <HAL_ADCEx_MultiModeConfigChannel>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_ADC1_Init+0xb0>
	{
		Error_Handler();
 8000d5c:	f001 f83a 	bl	8001dd4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8000d60:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <MX_ADC1_Init+0xf4>)
 8000d62:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d64:	2306      	movs	r3, #6
 8000d66:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d6c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d70:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d72:	2304      	movs	r3, #4
 8000d74:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	767b      	strb	r3, [r7, #25]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d7e:	463b      	mov	r3, r7
 8000d80:	4619      	mov	r1, r3
 8000d82:	4806      	ldr	r0, [pc, #24]	; (8000d9c <MX_ADC1_Init+0xec>)
 8000d84:	f002 fc70 	bl	8003668 <HAL_ADC_ConfigChannel>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_ADC1_Init+0xe2>
	{
		Error_Handler();
 8000d8e:	f001 f821 	bl	8001dd4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	3728      	adds	r7, #40	; 0x28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2400011c 	.word	0x2400011c
 8000da0:	40022000 	.word	0x40022000
 8000da4:	08600004 	.word	0x08600004

08000da8 <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig =
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
 8000dbc:	615a      	str	r2, [r3, #20]
 8000dbe:	619a      	str	r2, [r3, #24]

	/* USER CODE END ADC2_Init 1 */

	/** Common config
	 */
	hadc2.Instance = ADC2;
 8000dc0:	4b2a      	ldr	r3, [pc, #168]	; (8000e6c <MX_ADC2_Init+0xc4>)
 8000dc2:	4a2b      	ldr	r2, [pc, #172]	; (8000e70 <MX_ADC2_Init+0xc8>)
 8000dc4:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000dc6:	4b29      	ldr	r3, [pc, #164]	; (8000e6c <MX_ADC2_Init+0xc4>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8000dcc:	4b27      	ldr	r3, [pc, #156]	; (8000e6c <MX_ADC2_Init+0xc4>)
 8000dce:	2210      	movs	r2, #16
 8000dd0:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dd2:	4b26      	ldr	r3, [pc, #152]	; (8000e6c <MX_ADC2_Init+0xc4>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dd8:	4b24      	ldr	r3, [pc, #144]	; (8000e6c <MX_ADC2_Init+0xc4>)
 8000dda:	2204      	movs	r2, #4
 8000ddc:	611a      	str	r2, [r3, #16]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 8000dde:	4b23      	ldr	r3, [pc, #140]	; (8000e6c <MX_ADC2_Init+0xc4>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	751a      	strb	r2, [r3, #20]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8000de4:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <MX_ADC2_Init+0xc4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	755a      	strb	r2, [r3, #21]
	hadc2.Init.NbrOfConversion = 1;
 8000dea:	4b20      	ldr	r3, [pc, #128]	; (8000e6c <MX_ADC2_Init+0xc4>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	619a      	str	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000df0:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <MX_ADC2_Init+0xc4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	771a      	strb	r2, [r3, #28]
	hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000df6:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <MX_ADC2_Init+0xc4>)
 8000df8:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000dfc:	625a      	str	r2, [r3, #36]	; 0x24
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000dfe:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <MX_ADC2_Init+0xc4>)
 8000e00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e04:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <MX_ADC2_Init+0xc4>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e0c:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <MX_ADC2_Init+0xc4>)
 8000e0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e12:	631a      	str	r2, [r3, #48]	; 0x30
	hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <MX_ADC2_Init+0xc4>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	635a      	str	r2, [r3, #52]	; 0x34
	hadc2.Init.OversamplingMode = DISABLE;
 8000e1a:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <MX_ADC2_Init+0xc4>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e22:	4812      	ldr	r0, [pc, #72]	; (8000e6c <MX_ADC2_Init+0xc4>)
 8000e24:	f001 ff0a 	bl	8002c3c <HAL_ADC_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_ADC2_Init+0x8a>
	{
		Error_Handler();
 8000e2e:	f000 ffd1 	bl	8001dd4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <MX_ADC2_Init+0xcc>)
 8000e34:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e36:	2306      	movs	r3, #6
 8000e38:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e3e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e42:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e44:	2304      	movs	r3, #4
 8000e46:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61bb      	str	r3, [r7, #24]
	sConfig.OffsetSignedSaturation = DISABLE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	777b      	strb	r3, [r7, #29]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	4619      	mov	r1, r3
 8000e54:	4805      	ldr	r0, [pc, #20]	; (8000e6c <MX_ADC2_Init+0xc4>)
 8000e56:	f002 fc07 	bl	8003668 <HAL_ADC_ConfigChannel>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_ADC2_Init+0xbc>
	{
		Error_Handler();
 8000e60:	f000 ffb8 	bl	8001dd4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	3720      	adds	r7, #32
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	24000180 	.word	0x24000180
 8000e70:	40022100 	.word	0x40022100
 8000e74:	19200040 	.word	0x19200040

08000e78 <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig =
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
 8000e8c:	615a      	str	r2, [r3, #20]
 8000e8e:	619a      	str	r2, [r3, #24]

	/* USER CODE END ADC3_Init 1 */

	/** Common config
	 */
	hadc3.Instance = ADC3;
 8000e90:	4b2a      	ldr	r3, [pc, #168]	; (8000f3c <MX_ADC3_Init+0xc4>)
 8000e92:	4a2b      	ldr	r2, [pc, #172]	; (8000f40 <MX_ADC3_Init+0xc8>)
 8000e94:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e96:	4b29      	ldr	r3, [pc, #164]	; (8000f3c <MX_ADC3_Init+0xc4>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_8B;
 8000e9c:	4b27      	ldr	r3, [pc, #156]	; (8000f3c <MX_ADC3_Init+0xc4>)
 8000e9e:	2210      	movs	r2, #16
 8000ea0:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ea2:	4b26      	ldr	r3, [pc, #152]	; (8000f3c <MX_ADC3_Init+0xc4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	60da      	str	r2, [r3, #12]
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ea8:	4b24      	ldr	r3, [pc, #144]	; (8000f3c <MX_ADC3_Init+0xc4>)
 8000eaa:	2204      	movs	r2, #4
 8000eac:	611a      	str	r2, [r3, #16]
	hadc3.Init.LowPowerAutoWait = DISABLE;
 8000eae:	4b23      	ldr	r3, [pc, #140]	; (8000f3c <MX_ADC3_Init+0xc4>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	751a      	strb	r2, [r3, #20]
	hadc3.Init.ContinuousConvMode = DISABLE;
 8000eb4:	4b21      	ldr	r3, [pc, #132]	; (8000f3c <MX_ADC3_Init+0xc4>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	755a      	strb	r2, [r3, #21]
	hadc3.Init.NbrOfConversion = 1;
 8000eba:	4b20      	ldr	r3, [pc, #128]	; (8000f3c <MX_ADC3_Init+0xc4>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ec0:	4b1e      	ldr	r3, [pc, #120]	; (8000f3c <MX_ADC3_Init+0xc4>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	771a      	strb	r2, [r3, #28]
	hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000ec6:	4b1d      	ldr	r3, [pc, #116]	; (8000f3c <MX_ADC3_Init+0xc4>)
 8000ec8:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000ecc:	625a      	str	r2, [r3, #36]	; 0x24
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ece:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <MX_ADC3_Init+0xc4>)
 8000ed0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ed4:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 8000ed6:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <MX_ADC3_Init+0xc4>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000edc:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <MX_ADC3_Init+0xc4>)
 8000ede:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ee2:	631a      	str	r2, [r3, #48]	; 0x30
	hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ee4:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <MX_ADC3_Init+0xc4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	635a      	str	r2, [r3, #52]	; 0x34
	hadc3.Init.OversamplingMode = DISABLE;
 8000eea:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <MX_ADC3_Init+0xc4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ef2:	4812      	ldr	r0, [pc, #72]	; (8000f3c <MX_ADC3_Init+0xc4>)
 8000ef4:	f001 fea2 	bl	8002c3c <HAL_ADC_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_ADC3_Init+0x8a>
	{
		Error_Handler();
 8000efe:	f000 ff69 	bl	8001dd4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000f02:	2301      	movs	r3, #1
 8000f04:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f06:	2306      	movs	r3, #6
 8000f08:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f0e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f12:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f14:	2304      	movs	r3, #4
 8000f16:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61bb      	str	r3, [r7, #24]
	sConfig.OffsetSignedSaturation = DISABLE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	777b      	strb	r3, [r7, #29]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	4619      	mov	r1, r3
 8000f24:	4805      	ldr	r0, [pc, #20]	; (8000f3c <MX_ADC3_Init+0xc4>)
 8000f26:	f002 fb9f 	bl	8003668 <HAL_ADC_ConfigChannel>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_ADC3_Init+0xbc>
	{
		Error_Handler();
 8000f30:	f000 ff50 	bl	8001dd4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8000f34:	bf00      	nop
 8000f36:	3720      	adds	r7, #32
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	240001e4 	.word	0x240001e4
 8000f40:	58026000 	.word	0x58026000

08000f44 <MX_COMP1_Init>:
 * @brief COMP1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_COMP1_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	/* USER CODE END COMP1_Init 0 */

	/* USER CODE BEGIN COMP1_Init 1 */

	/* USER CODE END COMP1_Init 1 */
	hcomp1.Instance = COMP1;
 8000f48:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <MX_COMP1_Init+0x54>)
 8000f4a:	4a14      	ldr	r2, [pc, #80]	; (8000f9c <MX_COMP1_Init+0x58>)
 8000f4c:	601a      	str	r2, [r3, #0]
	hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 8000f4e:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <MX_COMP1_Init+0x54>)
 8000f50:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f54:	611a      	str	r2, [r3, #16]
	hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <MX_COMP1_Init+0x54>)
 8000f58:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000f5c:	60da      	str	r2, [r3, #12]
	hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <MX_COMP1_Init+0x54>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
	hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <MX_COMP1_Init+0x54>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	615a      	str	r2, [r3, #20]
	hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <MX_COMP1_Init+0x54>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	61da      	str	r2, [r3, #28]
	hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000f70:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <MX_COMP1_Init+0x54>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
	hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <MX_COMP1_Init+0x54>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	605a      	str	r2, [r3, #4]
	hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <MX_COMP1_Init+0x54>)
 8000f7e:	2211      	movs	r2, #17
 8000f80:	621a      	str	r2, [r3, #32]
	if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000f82:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_COMP1_Init+0x54>)
 8000f84:	f003 fbd2 	bl	800472c <HAL_COMP_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_COMP1_Init+0x4e>
	{
		Error_Handler();
 8000f8e:	f000 ff21 	bl	8001dd4 <Error_Handler>
	}
	/* USER CODE BEGIN COMP1_Init 2 */

	/* USER CODE END COMP1_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	240003b0 	.word	0x240003b0
 8000f9c:	5800380c 	.word	0x5800380c

08000fa0 <MX_COMP2_Init>:
 * @brief COMP2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_COMP2_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	/* USER CODE END COMP2_Init 0 */

	/* USER CODE BEGIN COMP2_Init 1 */

	/* USER CODE END COMP2_Init 1 */
	hcomp2.Instance = COMP2;
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <MX_COMP2_Init+0x50>)
 8000fa6:	4a13      	ldr	r2, [pc, #76]	; (8000ff4 <MX_COMP2_Init+0x54>)
 8000fa8:	601a      	str	r2, [r3, #0]
	hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 8000faa:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_COMP2_Init+0x50>)
 8000fac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000fb0:	611a      	str	r2, [r3, #16]
	hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <MX_COMP2_Init+0x50>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	60da      	str	r2, [r3, #12]
	hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000fb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <MX_COMP2_Init+0x50>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	619a      	str	r2, [r3, #24]
	hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <MX_COMP2_Init+0x50>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	615a      	str	r2, [r3, #20]
	hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <MX_COMP2_Init+0x50>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]
	hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <MX_COMP2_Init+0x50>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
	hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <MX_COMP2_Init+0x50>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	605a      	str	r2, [r3, #4]
	hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <MX_COMP2_Init+0x50>)
 8000fd8:	2211      	movs	r2, #17
 8000fda:	621a      	str	r2, [r3, #32]
	if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000fdc:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <MX_COMP2_Init+0x50>)
 8000fde:	f003 fba5 	bl	800472c <HAL_COMP_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_COMP2_Init+0x4c>
	{
		Error_Handler();
 8000fe8:	f000 fef4 	bl	8001dd4 <Error_Handler>
	}
	/* USER CODE BEGIN COMP2_Init 2 */

	/* USER CODE END COMP2_Init 2 */

}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	240003dc 	.word	0x240003dc
 8000ff4:	58003810 	.word	0x58003810

08000ff8 <MX_DAC1_Init>:
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig =
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	2224      	movs	r2, #36	; 0x24
 8001002:	2100      	movs	r1, #0
 8001004:	4618      	mov	r0, r3
 8001006:	f012 f8a3 	bl	8013150 <memset>

	/* USER CODE END DAC1_Init 1 */

	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <MX_DAC1_Init+0x5c>)
 800100c:	4a12      	ldr	r2, [pc, #72]	; (8001058 <MX_DAC1_Init+0x60>)
 800100e:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001010:	4810      	ldr	r0, [pc, #64]	; (8001054 <MX_DAC1_Init+0x5c>)
 8001012:	f003 ff6d 	bl	8004ef0 <HAL_DAC_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_DAC1_Init+0x28>
	{
		Error_Handler();
 800101c:	f000 feda 	bl	8001dd4 <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001028:	2302      	movs	r3, #2
 800102a:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 800102c:	2302      	movs	r3, #2
 800102e:	613b      	str	r3, [r7, #16]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	2200      	movs	r2, #0
 8001038:	4619      	mov	r1, r3
 800103a:	4806      	ldr	r0, [pc, #24]	; (8001054 <MX_DAC1_Init+0x5c>)
 800103c:	f003 fff2 	bl	8005024 <HAL_DAC_ConfigChannel>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_DAC1_Init+0x52>
	{
		Error_Handler();
 8001046:	f000 fec5 	bl	8001dd4 <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 800104a:	bf00      	nop
 800104c:	3728      	adds	r7, #40	; 0x28
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	24000408 	.word	0x24000408
 8001058:	40007400 	.word	0x40007400

0800105c <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b096      	sub	sp, #88	; 0x58
 8001060:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig =
 8001062:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
	{ 0 };
	TIM_OC_InitTypeDef sConfigOC =
 800106e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]
 800107e:	615a      	str	r2, [r3, #20]
 8001080:	619a      	str	r2, [r3, #24]
	{ 0 };
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig =
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	222c      	movs	r2, #44	; 0x2c
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f012 f861 	bl	8013150 <memset>
	{ 0 };

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800108e:	4b37      	ldr	r3, [pc, #220]	; (800116c <MX_TIM1_Init+0x110>)
 8001090:	4a37      	ldr	r2, [pc, #220]	; (8001170 <MX_TIM1_Init+0x114>)
 8001092:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001094:	4b35      	ldr	r3, [pc, #212]	; (800116c <MX_TIM1_Init+0x110>)
 8001096:	2200      	movs	r2, #0
 8001098:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109a:	4b34      	ldr	r3, [pc, #208]	; (800116c <MX_TIM1_Init+0x110>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 48 - 1;
 80010a0:	4b32      	ldr	r3, [pc, #200]	; (800116c <MX_TIM1_Init+0x110>)
 80010a2:	222f      	movs	r2, #47	; 0x2f
 80010a4:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a6:	4b31      	ldr	r3, [pc, #196]	; (800116c <MX_TIM1_Init+0x110>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80010ac:	4b2f      	ldr	r3, [pc, #188]	; (800116c <MX_TIM1_Init+0x110>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b2:	4b2e      	ldr	r3, [pc, #184]	; (800116c <MX_TIM1_Init+0x110>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010b8:	482c      	ldr	r0, [pc, #176]	; (800116c <MX_TIM1_Init+0x110>)
 80010ba:	f00b fcab 	bl	800ca14 <HAL_TIM_PWM_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM1_Init+0x6c>
	{
		Error_Handler();
 80010c4:	f000 fe86 	bl	8001dd4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010c8:	2320      	movs	r3, #32
 80010ca:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010cc:	2300      	movs	r3, #0
 80010ce:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010d8:	4619      	mov	r1, r3
 80010da:	4824      	ldr	r0, [pc, #144]	; (800116c <MX_TIM1_Init+0x110>)
 80010dc:	f00c fc88 	bl	800d9f0 <HAL_TIMEx_MasterConfigSynchronization>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM1_Init+0x8e>
	{
		Error_Handler();
 80010e6:	f000 fe75 	bl	8001dd4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ea:	2360      	movs	r3, #96	; 0x60
 80010ec:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010f2:	2300      	movs	r3, #0
 80010f4:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010f6:	2300      	movs	r3, #0
 80010f8:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010fe:	2300      	movs	r3, #0
 8001100:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001102:	2300      	movs	r3, #0
 8001104:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001106:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800110a:	2200      	movs	r2, #0
 800110c:	4619      	mov	r1, r3
 800110e:	4817      	ldr	r0, [pc, #92]	; (800116c <MX_TIM1_Init+0x110>)
 8001110:	f00b ff9c 	bl	800d04c <HAL_TIM_PWM_ConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM1_Init+0xc2>
	{
		Error_Handler();
 800111a:	f000 fe5b 	bl	8001dd4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001132:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001136:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800113c:	2300      	movs	r3, #0
 800113e:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001140:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	4619      	mov	r1, r3
 8001152:	4806      	ldr	r0, [pc, #24]	; (800116c <MX_TIM1_Init+0x110>)
 8001154:	f00c fcda 	bl	800db0c <HAL_TIMEx_ConfigBreakDeadTime>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM1_Init+0x106>
	{
		Error_Handler();
 800115e:	f000 fe39 	bl	8001dd4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	3758      	adds	r7, #88	; 0x58
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	2400041c 	.word	0x2400041c
 8001170:	40010000 	.word	0x40010000

08001174 <MX_TIM16_Init>:
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8001178:	4b10      	ldr	r3, [pc, #64]	; (80011bc <MX_TIM16_Init+0x48>)
 800117a:	4a11      	ldr	r2, [pc, #68]	; (80011c0 <MX_TIM16_Init+0x4c>)
 800117c:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 2000 - 1;
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <MX_TIM16_Init+0x48>)
 8001180:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001184:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001186:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <MX_TIM16_Init+0x48>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 2000 - 1;
 800118c:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <MX_TIM16_Init+0x48>)
 800118e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001192:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <MX_TIM16_Init+0x48>)
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <MX_TIM16_Init+0x48>)
 800119c:	2200      	movs	r2, #0
 800119e:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <MX_TIM16_Init+0x48>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80011a6:	4805      	ldr	r0, [pc, #20]	; (80011bc <MX_TIM16_Init+0x48>)
 80011a8:	f00b fb64 	bl	800c874 <HAL_TIM_Base_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM16_Init+0x42>
	{
		Error_Handler();
 80011b2:	f000 fe0f 	bl	8001dd4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	24000468 	.word	0x24000468
 80011c0:	40014400 	.word	0x40014400

080011c4 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80011c8:	4b22      	ldr	r3, [pc, #136]	; (8001254 <MX_USART3_UART_Init+0x90>)
 80011ca:	4a23      	ldr	r2, [pc, #140]	; (8001258 <MX_USART3_UART_Init+0x94>)
 80011cc:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80011ce:	4b21      	ldr	r3, [pc, #132]	; (8001254 <MX_USART3_UART_Init+0x90>)
 80011d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011d4:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011d6:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <MX_USART3_UART_Init+0x90>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80011dc:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <MX_USART3_UART_Init+0x90>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80011e2:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <MX_USART3_UART_Init+0x90>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX;
 80011e8:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <MX_USART3_UART_Init+0x90>)
 80011ea:	2208      	movs	r2, #8
 80011ec:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ee:	4b19      	ldr	r3, [pc, #100]	; (8001254 <MX_USART3_UART_Init+0x90>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f4:	4b17      	ldr	r3, [pc, #92]	; (8001254 <MX_USART3_UART_Init+0x90>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011fa:	4b16      	ldr	r3, [pc, #88]	; (8001254 <MX_USART3_UART_Init+0x90>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001200:	4b14      	ldr	r3, [pc, #80]	; (8001254 <MX_USART3_UART_Init+0x90>)
 8001202:	2200      	movs	r2, #0
 8001204:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <MX_USART3_UART_Init+0x90>)
 8001208:	2200      	movs	r2, #0
 800120a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800120c:	4811      	ldr	r0, [pc, #68]	; (8001254 <MX_USART3_UART_Init+0x90>)
 800120e:	f00c fd19 	bl	800dc44 <HAL_UART_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_USART3_UART_Init+0x58>
	{
		Error_Handler();
 8001218:	f000 fddc 	bl	8001dd4 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800121c:	2100      	movs	r1, #0
 800121e:	480d      	ldr	r0, [pc, #52]	; (8001254 <MX_USART3_UART_Init+0x90>)
 8001220:	f00d fcb6 	bl	800eb90 <HAL_UARTEx_SetTxFifoThreshold>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_USART3_UART_Init+0x6a>
	{
		Error_Handler();
 800122a:	f000 fdd3 	bl	8001dd4 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800122e:	2100      	movs	r1, #0
 8001230:	4808      	ldr	r0, [pc, #32]	; (8001254 <MX_USART3_UART_Init+0x90>)
 8001232:	f00d fceb 	bl	800ec0c <HAL_UARTEx_SetRxFifoThreshold>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_USART3_UART_Init+0x7c>
	{
		Error_Handler();
 800123c:	f000 fdca 	bl	8001dd4 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001240:	4804      	ldr	r0, [pc, #16]	; (8001254 <MX_USART3_UART_Init+0x90>)
 8001242:	f00d fc6c 	bl	800eb1e <HAL_UARTEx_DisableFifoMode>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_USART3_UART_Init+0x8c>
	{
		Error_Handler();
 800124c:	f000 fdc2 	bl	8001dd4 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	240004b4 	.word	0x240004b4
 8001258:	40004800 	.word	0x40004800

0800125c <MX_DMA_Init>:
 * Enable DMA controller clock
 * Configure DMA for memory to memory transfers
 *   hdma_memtomem_dma2_stream0
 */
static void MX_DMA_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001262:	4b35      	ldr	r3, [pc, #212]	; (8001338 <MX_DMA_Init+0xdc>)
 8001264:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001268:	4a33      	ldr	r2, [pc, #204]	; (8001338 <MX_DMA_Init+0xdc>)
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001272:	4b31      	ldr	r3, [pc, #196]	; (8001338 <MX_DMA_Init+0xdc>)
 8001274:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001280:	4b2d      	ldr	r3, [pc, #180]	; (8001338 <MX_DMA_Init+0xdc>)
 8001282:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001286:	4a2c      	ldr	r2, [pc, #176]	; (8001338 <MX_DMA_Init+0xdc>)
 8001288:	f043 0302 	orr.w	r3, r3, #2
 800128c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001290:	4b29      	ldr	r3, [pc, #164]	; (8001338 <MX_DMA_Init+0xdc>)
 8001292:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	683b      	ldr	r3, [r7, #0]

	/* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
	hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 800129e:	4b27      	ldr	r3, [pc, #156]	; (800133c <MX_DMA_Init+0xe0>)
 80012a0:	4a27      	ldr	r2, [pc, #156]	; (8001340 <MX_DMA_Init+0xe4>)
 80012a2:	601a      	str	r2, [r3, #0]
	hdma_memtomem_dma2_stream0.Init.Request = DMA_REQUEST_MEM2MEM;
 80012a4:	4b25      	ldr	r3, [pc, #148]	; (800133c <MX_DMA_Init+0xe0>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	605a      	str	r2, [r3, #4]
	hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80012aa:	4b24      	ldr	r3, [pc, #144]	; (800133c <MX_DMA_Init+0xe0>)
 80012ac:	2280      	movs	r2, #128	; 0x80
 80012ae:	609a      	str	r2, [r3, #8]
	hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 80012b0:	4b22      	ldr	r3, [pc, #136]	; (800133c <MX_DMA_Init+0xe0>)
 80012b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012b6:	60da      	str	r2, [r3, #12]
	hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 80012b8:	4b20      	ldr	r3, [pc, #128]	; (800133c <MX_DMA_Init+0xe0>)
 80012ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012be:	611a      	str	r2, [r3, #16]
	hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012c0:	4b1e      	ldr	r3, [pc, #120]	; (800133c <MX_DMA_Init+0xe0>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	615a      	str	r2, [r3, #20]
	hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012c6:	4b1d      	ldr	r3, [pc, #116]	; (800133c <MX_DMA_Init+0xe0>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
	hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 80012cc:	4b1b      	ldr	r3, [pc, #108]	; (800133c <MX_DMA_Init+0xe0>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]
	hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 80012d2:	4b1a      	ldr	r3, [pc, #104]	; (800133c <MX_DMA_Init+0xe0>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	621a      	str	r2, [r3, #32]
	hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80012d8:	4b18      	ldr	r3, [pc, #96]	; (800133c <MX_DMA_Init+0xe0>)
 80012da:	2204      	movs	r2, #4
 80012dc:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80012de:	4b17      	ldr	r3, [pc, #92]	; (800133c <MX_DMA_Init+0xe0>)
 80012e0:	2203      	movs	r2, #3
 80012e2:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 80012e4:	4b15      	ldr	r3, [pc, #84]	; (800133c <MX_DMA_Init+0xe0>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80012ea:	4b14      	ldr	r3, [pc, #80]	; (800133c <MX_DMA_Init+0xe0>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 80012f0:	4812      	ldr	r0, [pc, #72]	; (800133c <MX_DMA_Init+0xe0>)
 80012f2:	f003 ffc7 	bl	8005284 <HAL_DMA_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_DMA_Init+0xa4>
	{
		Error_Handler();
 80012fc:	f000 fd6a 	bl	8001dd4 <Error_Handler>
	}

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001300:	2200      	movs	r2, #0
 8001302:	2100      	movs	r1, #0
 8001304:	200b      	movs	r0, #11
 8001306:	f003 fdaa 	bl	8004e5e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800130a:	200b      	movs	r0, #11
 800130c:	f003 fdc1 	bl	8004e92 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	2100      	movs	r1, #0
 8001314:	200c      	movs	r0, #12
 8001316:	f003 fda2 	bl	8004e5e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800131a:	200c      	movs	r0, #12
 800131c:	f003 fdb9 	bl	8004e92 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	2100      	movs	r1, #0
 8001324:	200d      	movs	r0, #13
 8001326:	f003 fd9a 	bl	8004e5e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800132a:	200d      	movs	r0, #13
 800132c:	f003 fdb1 	bl	8004e92 <HAL_NVIC_EnableIRQ>

}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	58024400 	.word	0x58024400
 800133c:	24000544 	.word	0x24000544
 8001340:	40020410 	.word	0x40020410

08001344 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08e      	sub	sp, #56	; 0x38
 8001348:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 800134a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800135a:	4b87      	ldr	r3, [pc, #540]	; (8001578 <MX_GPIO_Init+0x234>)
 800135c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001360:	4a85      	ldr	r2, [pc, #532]	; (8001578 <MX_GPIO_Init+0x234>)
 8001362:	f043 0304 	orr.w	r3, r3, #4
 8001366:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800136a:	4b83      	ldr	r3, [pc, #524]	; (8001578 <MX_GPIO_Init+0x234>)
 800136c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	623b      	str	r3, [r7, #32]
 8001376:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001378:	4b7f      	ldr	r3, [pc, #508]	; (8001578 <MX_GPIO_Init+0x234>)
 800137a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800137e:	4a7e      	ldr	r2, [pc, #504]	; (8001578 <MX_GPIO_Init+0x234>)
 8001380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001384:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001388:	4b7b      	ldr	r3, [pc, #492]	; (8001578 <MX_GPIO_Init+0x234>)
 800138a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800138e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001392:	61fb      	str	r3, [r7, #28]
 8001394:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001396:	4b78      	ldr	r3, [pc, #480]	; (8001578 <MX_GPIO_Init+0x234>)
 8001398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800139c:	4a76      	ldr	r2, [pc, #472]	; (8001578 <MX_GPIO_Init+0x234>)
 800139e:	f043 0302 	orr.w	r3, r3, #2
 80013a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013a6:	4b74      	ldr	r3, [pc, #464]	; (8001578 <MX_GPIO_Init+0x234>)
 80013a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	61bb      	str	r3, [r7, #24]
 80013b2:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80013b4:	4b70      	ldr	r3, [pc, #448]	; (8001578 <MX_GPIO_Init+0x234>)
 80013b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ba:	4a6f      	ldr	r2, [pc, #444]	; (8001578 <MX_GPIO_Init+0x234>)
 80013bc:	f043 0320 	orr.w	r3, r3, #32
 80013c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013c4:	4b6c      	ldr	r3, [pc, #432]	; (8001578 <MX_GPIO_Init+0x234>)
 80013c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ca:	f003 0320 	and.w	r3, r3, #32
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80013d2:	4b69      	ldr	r3, [pc, #420]	; (8001578 <MX_GPIO_Init+0x234>)
 80013d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d8:	4a67      	ldr	r2, [pc, #412]	; (8001578 <MX_GPIO_Init+0x234>)
 80013da:	f043 0310 	orr.w	r3, r3, #16
 80013de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013e2:	4b65      	ldr	r3, [pc, #404]	; (8001578 <MX_GPIO_Init+0x234>)
 80013e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e8:	f003 0310 	and.w	r3, r3, #16
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80013f0:	4b61      	ldr	r3, [pc, #388]	; (8001578 <MX_GPIO_Init+0x234>)
 80013f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f6:	4a60      	ldr	r2, [pc, #384]	; (8001578 <MX_GPIO_Init+0x234>)
 80013f8:	f043 0308 	orr.w	r3, r3, #8
 80013fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001400:	4b5d      	ldr	r3, [pc, #372]	; (8001578 <MX_GPIO_Init+0x234>)
 8001402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800140e:	4b5a      	ldr	r3, [pc, #360]	; (8001578 <MX_GPIO_Init+0x234>)
 8001410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001414:	4a58      	ldr	r2, [pc, #352]	; (8001578 <MX_GPIO_Init+0x234>)
 8001416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800141a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800141e:	4b56      	ldr	r3, [pc, #344]	; (8001578 <MX_GPIO_Init+0x234>)
 8001420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800142c:	4b52      	ldr	r3, [pc, #328]	; (8001578 <MX_GPIO_Init+0x234>)
 800142e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001432:	4a51      	ldr	r2, [pc, #324]	; (8001578 <MX_GPIO_Init+0x234>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800143c:	4b4e      	ldr	r3, [pc, #312]	; (8001578 <MX_GPIO_Init+0x234>)
 800143e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin, GPIO_PIN_RESET);
 800144a:	2200      	movs	r2, #0
 800144c:	f244 0101 	movw	r1, #16385	; 0x4001
 8001450:	484a      	ldr	r0, [pc, #296]	; (800157c <MX_GPIO_Init+0x238>)
 8001452:	f006 fcbd 	bl	8007dd0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin | MUX_2_A_Pin, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	f240 4104 	movw	r1, #1028	; 0x404
 800145c:	4848      	ldr	r0, [pc, #288]	; (8001580 <MX_GPIO_Init+0x23c>)
 800145e:	f006 fcb7 	bl	8007dd0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, MUX_2_C_Pin | MUX_2_B_Pin, GPIO_PIN_RESET);
 8001462:	2200      	movs	r2, #0
 8001464:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001468:	4846      	ldr	r0, [pc, #280]	; (8001584 <MX_GPIO_Init+0x240>)
 800146a:	f006 fcb1 	bl	8007dd0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, MUX_1_A_Pin | MUX_1_B_Pin | MUX_1_C_Pin, GPIO_PIN_RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001474:	4844      	ldr	r0, [pc, #272]	; (8001588 <MX_GPIO_Init+0x244>)
 8001476:	f006 fcab 	bl	8007dd0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800147a:	2200      	movs	r2, #0
 800147c:	2102      	movs	r1, #2
 800147e:	4843      	ldr	r0, [pc, #268]	; (800158c <MX_GPIO_Init+0x248>)
 8001480:	f006 fca6 	bl	8007dd0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001484:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148a:	2300      	movs	r3, #0
 800148c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001496:	4619      	mov	r1, r3
 8001498:	483b      	ldr	r0, [pc, #236]	; (8001588 <MX_GPIO_Init+0x244>)
 800149a:	f006 fae9 	bl	8007a70 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin;
 800149e:	f244 0301 	movw	r3, #16385	; 0x4001
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a4:	2301      	movs	r3, #1
 80014a6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ac:	2300      	movs	r3, #0
 80014ae:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b4:	4619      	mov	r1, r3
 80014b6:	4831      	ldr	r0, [pc, #196]	; (800157c <MX_GPIO_Init+0x238>)
 80014b8:	f006 fada 	bl	8007a70 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin MUX_2_A_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin | MUX_2_A_Pin;
 80014bc:	f240 4304 	movw	r3, #1028	; 0x404
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c2:	2301      	movs	r3, #1
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d2:	4619      	mov	r1, r3
 80014d4:	482a      	ldr	r0, [pc, #168]	; (8001580 <MX_GPIO_Init+0x23c>)
 80014d6:	f006 facb 	bl	8007a70 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80014da:	2380      	movs	r3, #128	; 0x80
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80014e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ec:	4619      	mov	r1, r3
 80014ee:	4825      	ldr	r0, [pc, #148]	; (8001584 <MX_GPIO_Init+0x240>)
 80014f0:	f006 fabe 	bl	8007a70 <HAL_GPIO_Init>

	/*Configure GPIO pins : MUX_2_C_Pin MUX_2_B_Pin */
	GPIO_InitStruct.Pin = MUX_2_C_Pin | MUX_2_B_Pin;
 80014f4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fa:	2301      	movs	r3, #1
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	2300      	movs	r3, #0
 8001504:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150a:	4619      	mov	r1, r3
 800150c:	481d      	ldr	r0, [pc, #116]	; (8001584 <MX_GPIO_Init+0x240>)
 800150e:	f006 faaf 	bl	8007a70 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001512:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001518:	2302      	movs	r3, #2
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001520:	2300      	movs	r3, #0
 8001522:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001524:	2300      	movs	r3, #0
 8001526:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800152c:	4619      	mov	r1, r3
 800152e:	4816      	ldr	r0, [pc, #88]	; (8001588 <MX_GPIO_Init+0x244>)
 8001530:	f006 fa9e 	bl	8007a70 <HAL_GPIO_Init>

	/*Configure GPIO pins : MUX_1_A_Pin MUX_1_B_Pin MUX_1_C_Pin */
	GPIO_InitStruct.Pin = MUX_1_A_Pin | MUX_1_B_Pin | MUX_1_C_Pin;
 8001534:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153a:	2301      	movs	r3, #1
 800153c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	2300      	movs	r3, #0
 8001544:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154a:	4619      	mov	r1, r3
 800154c:	480e      	ldr	r0, [pc, #56]	; (8001588 <MX_GPIO_Init+0x244>)
 800154e:	f006 fa8f 	bl	8007a70 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001552:	2302      	movs	r3, #2
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001556:	2301      	movs	r3, #1
 8001558:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001566:	4619      	mov	r1, r3
 8001568:	4808      	ldr	r0, [pc, #32]	; (800158c <MX_GPIO_Init+0x248>)
 800156a:	f006 fa81 	bl	8007a70 <HAL_GPIO_Init>

}
 800156e:	bf00      	nop
 8001570:	3738      	adds	r7, #56	; 0x38
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	58024400 	.word	0x58024400
 800157c:	58020400 	.word	0x58020400
 8001580:	58020c00 	.word	0x58020c00
 8001584:	58021800 	.word	0x58021800
 8001588:	58020800 	.word	0x58020800
 800158c:	58021000 	.word	0x58021000

08001590 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over (60Hz)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim16)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d115      	bne.n	80015cc <HAL_TIM_PeriodElapsedCallback+0x3c>
	{

		if (ready_to_send_flag)
 80015a0:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d010      	beq.n	80015cc <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
			//CDC_Transmit_FS((uint8_t*) dummy_data_to_send, DATA_TO_SEND_LEN * 3);
			CDC_Transmit_FS((uint8_t*) data_to_send, DATA_TO_SEND_LEN * 3);
 80015aa:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80015ae:	480b      	ldr	r0, [pc, #44]	; (80015dc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80015b0:	f011 f900 	bl	80127b4 <CDC_Transmit_FS>
			trigger_flag = 0;
 80015b4:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
			ready_to_send_flag = 0;
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Start_IT(&hcomp1);
 80015c0:	4808      	ldr	r0, [pc, #32]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80015c2:	f003 fa5b 	bl	8004a7c <HAL_COMP_Start_IT>
			HAL_COMP_Start_IT(&hcomp2);
 80015c6:	4808      	ldr	r0, [pc, #32]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80015c8:	f003 fa58 	bl	8004a7c <HAL_COMP_Start_IT>

		}
		//trigger_flag = RESET;

	}
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	24000468 	.word	0x24000468
 80015d8:	24033a14 	.word	0x24033a14
 80015dc:	24033a20 	.word	0x24033a20
 80015e0:	24033a0c 	.word	0x24033a0c
 80015e4:	240003b0 	.word	0x240003b0
 80015e8:	240003dc 	.word	0x240003dc

080015ec <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

	if (hadc == &hadc1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a13      	ldr	r2, [pc, #76]	; (8001644 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d106      	bne.n	800160a <HAL_ADC_ConvHalfCpltCallback+0x1e>
	{
		buf_A_quadrant++;
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	3301      	adds	r3, #1
 8001604:	b2da      	uxtb	r2, r3
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 8001608:	701a      	strb	r2, [r3, #0]
	}
	if (hadc == &hadc2)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a0f      	ldr	r2, [pc, #60]	; (800164c <HAL_ADC_ConvHalfCpltCallback+0x60>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d106      	bne.n	8001620 <HAL_ADC_ConvHalfCpltCallback+0x34>
	{
		buf_B_quadrant++;
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	3301      	adds	r3, #1
 800161a:	b2da      	uxtb	r2, r3
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 800161e:	701a      	strb	r2, [r3, #0]
	}
	if (hadc == &hadc3)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a0c      	ldr	r2, [pc, #48]	; (8001654 <HAL_ADC_ConvHalfCpltCallback+0x68>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d106      	bne.n	8001636 <HAL_ADC_ConvHalfCpltCallback+0x4a>
	{
		buf_C_quadrant++;
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <HAL_ADC_ConvHalfCpltCallback+0x6c>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	3301      	adds	r3, #1
 8001630:	b2da      	uxtb	r2, r3
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <HAL_ADC_ConvHalfCpltCallback+0x6c>)
 8001634:	701a      	strb	r2, [r3, #0]
	}
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	2400011c 	.word	0x2400011c
 8001648:	24033a1c 	.word	0x24033a1c
 800164c:	24000180 	.word	0x24000180
 8001650:	24033a1d 	.word	0x24033a1d
 8001654:	240001e4 	.word	0x240001e4
 8001658:	24033a1e 	.word	0x24033a1e

0800165c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]

	if (hadc == &hadc1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a37      	ldr	r2, [pc, #220]	; (8001744 <HAL_ADC_ConvCpltCallback+0xe8>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d11f      	bne.n	80016ac <HAL_ADC_ConvCpltCallback+0x50>
	{
		buf_A_quadrant++;
 800166c:	4b36      	ldr	r3, [pc, #216]	; (8001748 <HAL_ADC_ConvCpltCallback+0xec>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	b2db      	uxtb	r3, r3
 8001672:	3301      	adds	r3, #1
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b34      	ldr	r3, [pc, #208]	; (8001748 <HAL_ADC_ConvCpltCallback+0xec>)
 8001678:	701a      	strb	r2, [r3, #0]
		if (buf_A_quadrant >= 4)
 800167a:	4b33      	ldr	r3, [pc, #204]	; (8001748 <HAL_ADC_ConvCpltCallback+0xec>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b03      	cmp	r3, #3
 8001682:	d908      	bls.n	8001696 <HAL_ADC_ConvCpltCallback+0x3a>
		{
			//HAL_ADC_Stop_DMA(&hadc1);
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_Buf_A_1, ADC_HALF_BUF_LEN * 2);
 8001684:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001688:	4930      	ldr	r1, [pc, #192]	; (800174c <HAL_ADC_ConvCpltCallback+0xf0>)
 800168a:	482e      	ldr	r0, [pc, #184]	; (8001744 <HAL_ADC_ConvCpltCallback+0xe8>)
 800168c:	f001 fc78 	bl	8002f80 <HAL_ADC_Start_DMA>
			buf_A_quadrant = 0;
 8001690:	4b2d      	ldr	r3, [pc, #180]	; (8001748 <HAL_ADC_ConvCpltCallback+0xec>)
 8001692:	2200      	movs	r2, #0
 8001694:	701a      	strb	r2, [r3, #0]
		}
		if (buf_A_quadrant == 2)
 8001696:	4b2c      	ldr	r3, [pc, #176]	; (8001748 <HAL_ADC_ConvCpltCallback+0xec>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d105      	bne.n	80016ac <HAL_ADC_ConvCpltCallback+0x50>
		{
			//HAL_ADC_Stop_DMA(&hadc1);
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_Buf_A_2, ADC_HALF_BUF_LEN * 2);
 80016a0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80016a4:	492a      	ldr	r1, [pc, #168]	; (8001750 <HAL_ADC_ConvCpltCallback+0xf4>)
 80016a6:	4827      	ldr	r0, [pc, #156]	; (8001744 <HAL_ADC_ConvCpltCallback+0xe8>)
 80016a8:	f001 fc6a 	bl	8002f80 <HAL_ADC_Start_DMA>
		}
	}
	if (hadc == &hadc2)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a29      	ldr	r2, [pc, #164]	; (8001754 <HAL_ADC_ConvCpltCallback+0xf8>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d11f      	bne.n	80016f4 <HAL_ADC_ConvCpltCallback+0x98>
	{
		buf_B_quadrant++;
 80016b4:	4b28      	ldr	r3, [pc, #160]	; (8001758 <HAL_ADC_ConvCpltCallback+0xfc>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	3301      	adds	r3, #1
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4b26      	ldr	r3, [pc, #152]	; (8001758 <HAL_ADC_ConvCpltCallback+0xfc>)
 80016c0:	701a      	strb	r2, [r3, #0]
		if (buf_B_quadrant >= 4)
 80016c2:	4b25      	ldr	r3, [pc, #148]	; (8001758 <HAL_ADC_ConvCpltCallback+0xfc>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b03      	cmp	r3, #3
 80016ca:	d908      	bls.n	80016de <HAL_ADC_ConvCpltCallback+0x82>
		{
			//HAL_ADC_Stop_DMA(&hadc2);
			HAL_ADC_Start_DMA(&hadc2, (uint32_t*) ADC_Buf_B_1, ADC_HALF_BUF_LEN * 2);
 80016cc:	f644 6220 	movw	r2, #20000	; 0x4e20
 80016d0:	4922      	ldr	r1, [pc, #136]	; (800175c <HAL_ADC_ConvCpltCallback+0x100>)
 80016d2:	4820      	ldr	r0, [pc, #128]	; (8001754 <HAL_ADC_ConvCpltCallback+0xf8>)
 80016d4:	f001 fc54 	bl	8002f80 <HAL_ADC_Start_DMA>
			buf_B_quadrant = 0;
 80016d8:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <HAL_ADC_ConvCpltCallback+0xfc>)
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]
		}
		if (buf_B_quadrant == 2)
 80016de:	4b1e      	ldr	r3, [pc, #120]	; (8001758 <HAL_ADC_ConvCpltCallback+0xfc>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d105      	bne.n	80016f4 <HAL_ADC_ConvCpltCallback+0x98>
		{
			//HAL_ADC_Stop_DMA(&hadc2);
			HAL_ADC_Start_DMA(&hadc2, (uint32_t*) ADC_Buf_B_2, ADC_HALF_BUF_LEN * 2);
 80016e8:	f644 6220 	movw	r2, #20000	; 0x4e20
 80016ec:	491c      	ldr	r1, [pc, #112]	; (8001760 <HAL_ADC_ConvCpltCallback+0x104>)
 80016ee:	4819      	ldr	r0, [pc, #100]	; (8001754 <HAL_ADC_ConvCpltCallback+0xf8>)
 80016f0:	f001 fc46 	bl	8002f80 <HAL_ADC_Start_DMA>
		}
	}
	if (hadc == &hadc3)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a1b      	ldr	r2, [pc, #108]	; (8001764 <HAL_ADC_ConvCpltCallback+0x108>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d11f      	bne.n	800173c <HAL_ADC_ConvCpltCallback+0xe0>
	{
		buf_C_quadrant++;
 80016fc:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <HAL_ADC_ConvCpltCallback+0x10c>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	b2db      	uxtb	r3, r3
 8001702:	3301      	adds	r3, #1
 8001704:	b2da      	uxtb	r2, r3
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <HAL_ADC_ConvCpltCallback+0x10c>)
 8001708:	701a      	strb	r2, [r3, #0]
		if (buf_C_quadrant >= 4)
 800170a:	4b17      	ldr	r3, [pc, #92]	; (8001768 <HAL_ADC_ConvCpltCallback+0x10c>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b03      	cmp	r3, #3
 8001712:	d908      	bls.n	8001726 <HAL_ADC_ConvCpltCallback+0xca>
		{
			//HAL_ADC_Stop_DMA(&hadc3);
			HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC_Buf_C_1, ADC_HALF_BUF_LEN * 2);
 8001714:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001718:	4914      	ldr	r1, [pc, #80]	; (800176c <HAL_ADC_ConvCpltCallback+0x110>)
 800171a:	4812      	ldr	r0, [pc, #72]	; (8001764 <HAL_ADC_ConvCpltCallback+0x108>)
 800171c:	f001 fc30 	bl	8002f80 <HAL_ADC_Start_DMA>
			buf_C_quadrant = 0;
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <HAL_ADC_ConvCpltCallback+0x10c>)
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]
		}
		if (buf_C_quadrant == 2)
 8001726:	4b10      	ldr	r3, [pc, #64]	; (8001768 <HAL_ADC_ConvCpltCallback+0x10c>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d105      	bne.n	800173c <HAL_ADC_ConvCpltCallback+0xe0>
		{
			//HAL_ADC_Stop_DMA(&hadc3);
			HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC_Buf_C_2, ADC_HALF_BUF_LEN * 2);
 8001730:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001734:	490e      	ldr	r1, [pc, #56]	; (8001770 <HAL_ADC_ConvCpltCallback+0x114>)
 8001736:	480b      	ldr	r0, [pc, #44]	; (8001764 <HAL_ADC_ConvCpltCallback+0x108>)
 8001738:	f001 fc22 	bl	8002f80 <HAL_ADC_Start_DMA>
		}
	}

}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	2400011c 	.word	0x2400011c
 8001748:	24033a1c 	.word	0x24033a1c
 800174c:	240005bc 	.word	0x240005bc
 8001750:	2400f01c 	.word	0x2400f01c
 8001754:	24000180 	.word	0x24000180
 8001758:	24033a1d 	.word	0x24033a1d
 800175c:	240053dc 	.word	0x240053dc
 8001760:	24013e3c 	.word	0x24013e3c
 8001764:	240001e4 	.word	0x240001e4
 8001768:	24033a1e 	.word	0x24033a1e
 800176c:	2400a1fc 	.word	0x2400a1fc
 8001770:	24018c5c 	.word	0x24018c5c

08001774 <HAL_COMP_TriggerCallback>:

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	if (!first_triggering)
 800177c:	4b79      	ldr	r3, [pc, #484]	; (8001964 <HAL_COMP_TriggerCallback+0x1f0>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d103      	bne.n	800178e <HAL_COMP_TriggerCallback+0x1a>
	{
		first_triggering = 1;
 8001786:	4b77      	ldr	r3, [pc, #476]	; (8001964 <HAL_COMP_TriggerCallback+0x1f0>)
 8001788:	2201      	movs	r2, #1
 800178a:	701a      	strb	r2, [r3, #0]
		return;
 800178c:	e0e7      	b.n	800195e <HAL_COMP_TriggerCallback+0x1ea>
	}
	//TODO(Attila): event handling
	if (hcomp == &hcomp1 && trigger_flag == 0)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a75      	ldr	r2, [pc, #468]	; (8001968 <HAL_COMP_TriggerCallback+0x1f4>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d16f      	bne.n	8001876 <HAL_COMP_TriggerCallback+0x102>
 8001796:	4b75      	ldr	r3, [pc, #468]	; (800196c <HAL_COMP_TriggerCallback+0x1f8>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	d16a      	bne.n	8001876 <HAL_COMP_TriggerCallback+0x102>
	{
		trigger_A_pos = __HAL_DMA_GET_COUNTER(&hdma_adc1);
 80017a0:	4b73      	ldr	r3, [pc, #460]	; (8001970 <HAL_COMP_TriggerCallback+0x1fc>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a73      	ldr	r2, [pc, #460]	; (8001974 <HAL_COMP_TriggerCallback+0x200>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d04a      	beq.n	8001840 <HAL_COMP_TriggerCallback+0xcc>
 80017aa:	4b71      	ldr	r3, [pc, #452]	; (8001970 <HAL_COMP_TriggerCallback+0x1fc>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a72      	ldr	r2, [pc, #456]	; (8001978 <HAL_COMP_TriggerCallback+0x204>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d045      	beq.n	8001840 <HAL_COMP_TriggerCallback+0xcc>
 80017b4:	4b6e      	ldr	r3, [pc, #440]	; (8001970 <HAL_COMP_TriggerCallback+0x1fc>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a70      	ldr	r2, [pc, #448]	; (800197c <HAL_COMP_TriggerCallback+0x208>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d040      	beq.n	8001840 <HAL_COMP_TriggerCallback+0xcc>
 80017be:	4b6c      	ldr	r3, [pc, #432]	; (8001970 <HAL_COMP_TriggerCallback+0x1fc>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a6f      	ldr	r2, [pc, #444]	; (8001980 <HAL_COMP_TriggerCallback+0x20c>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d03b      	beq.n	8001840 <HAL_COMP_TriggerCallback+0xcc>
 80017c8:	4b69      	ldr	r3, [pc, #420]	; (8001970 <HAL_COMP_TriggerCallback+0x1fc>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a6d      	ldr	r2, [pc, #436]	; (8001984 <HAL_COMP_TriggerCallback+0x210>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d036      	beq.n	8001840 <HAL_COMP_TriggerCallback+0xcc>
 80017d2:	4b67      	ldr	r3, [pc, #412]	; (8001970 <HAL_COMP_TriggerCallback+0x1fc>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a6c      	ldr	r2, [pc, #432]	; (8001988 <HAL_COMP_TriggerCallback+0x214>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d031      	beq.n	8001840 <HAL_COMP_TriggerCallback+0xcc>
 80017dc:	4b64      	ldr	r3, [pc, #400]	; (8001970 <HAL_COMP_TriggerCallback+0x1fc>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a6a      	ldr	r2, [pc, #424]	; (800198c <HAL_COMP_TriggerCallback+0x218>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d02c      	beq.n	8001840 <HAL_COMP_TriggerCallback+0xcc>
 80017e6:	4b62      	ldr	r3, [pc, #392]	; (8001970 <HAL_COMP_TriggerCallback+0x1fc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a69      	ldr	r2, [pc, #420]	; (8001990 <HAL_COMP_TriggerCallback+0x21c>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d027      	beq.n	8001840 <HAL_COMP_TriggerCallback+0xcc>
 80017f0:	4b5f      	ldr	r3, [pc, #380]	; (8001970 <HAL_COMP_TriggerCallback+0x1fc>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a67      	ldr	r2, [pc, #412]	; (8001994 <HAL_COMP_TriggerCallback+0x220>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d022      	beq.n	8001840 <HAL_COMP_TriggerCallback+0xcc>
 80017fa:	4b5d      	ldr	r3, [pc, #372]	; (8001970 <HAL_COMP_TriggerCallback+0x1fc>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a66      	ldr	r2, [pc, #408]	; (8001998 <HAL_COMP_TriggerCallback+0x224>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d01d      	beq.n	8001840 <HAL_COMP_TriggerCallback+0xcc>
 8001804:	4b5a      	ldr	r3, [pc, #360]	; (8001970 <HAL_COMP_TriggerCallback+0x1fc>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a64      	ldr	r2, [pc, #400]	; (800199c <HAL_COMP_TriggerCallback+0x228>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d018      	beq.n	8001840 <HAL_COMP_TriggerCallback+0xcc>
 800180e:	4b58      	ldr	r3, [pc, #352]	; (8001970 <HAL_COMP_TriggerCallback+0x1fc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a63      	ldr	r2, [pc, #396]	; (80019a0 <HAL_COMP_TriggerCallback+0x22c>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d013      	beq.n	8001840 <HAL_COMP_TriggerCallback+0xcc>
 8001818:	4b55      	ldr	r3, [pc, #340]	; (8001970 <HAL_COMP_TriggerCallback+0x1fc>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a61      	ldr	r2, [pc, #388]	; (80019a4 <HAL_COMP_TriggerCallback+0x230>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d00e      	beq.n	8001840 <HAL_COMP_TriggerCallback+0xcc>
 8001822:	4b53      	ldr	r3, [pc, #332]	; (8001970 <HAL_COMP_TriggerCallback+0x1fc>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a60      	ldr	r2, [pc, #384]	; (80019a8 <HAL_COMP_TriggerCallback+0x234>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d009      	beq.n	8001840 <HAL_COMP_TriggerCallback+0xcc>
 800182c:	4b50      	ldr	r3, [pc, #320]	; (8001970 <HAL_COMP_TriggerCallback+0x1fc>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a5e      	ldr	r2, [pc, #376]	; (80019ac <HAL_COMP_TriggerCallback+0x238>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d004      	beq.n	8001840 <HAL_COMP_TriggerCallback+0xcc>
 8001836:	4b4e      	ldr	r3, [pc, #312]	; (8001970 <HAL_COMP_TriggerCallback+0x1fc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a5d      	ldr	r2, [pc, #372]	; (80019b0 <HAL_COMP_TriggerCallback+0x23c>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d104      	bne.n	800184a <HAL_COMP_TriggerCallback+0xd6>
 8001840:	4b4b      	ldr	r3, [pc, #300]	; (8001970 <HAL_COMP_TriggerCallback+0x1fc>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	b29b      	uxth	r3, r3
 8001848:	e003      	b.n	8001852 <HAL_COMP_TriggerCallback+0xde>
 800184a:	4b49      	ldr	r3, [pc, #292]	; (8001970 <HAL_COMP_TriggerCallback+0x1fc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	b29b      	uxth	r3, r3
 8001852:	4a58      	ldr	r2, [pc, #352]	; (80019b4 <HAL_COMP_TriggerCallback+0x240>)
 8001854:	8013      	strh	r3, [r2, #0]
		if (options->trigger_channel == 1)
 8001856:	4b58      	ldr	r3, [pc, #352]	; (80019b8 <HAL_COMP_TriggerCallback+0x244>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	799b      	ldrb	r3, [r3, #6]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d10a      	bne.n	8001876 <HAL_COMP_TriggerCallback+0x102>
		{
			trigger_flag = 1;
 8001860:	4b42      	ldr	r3, [pc, #264]	; (800196c <HAL_COMP_TriggerCallback+0x1f8>)
 8001862:	2201      	movs	r2, #1
 8001864:	701a      	strb	r2, [r3, #0]
			trigger_quadrant = buf_A_quadrant;
 8001866:	4b55      	ldr	r3, [pc, #340]	; (80019bc <HAL_COMP_TriggerCallback+0x248>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	b2da      	uxtb	r2, r3
 800186c:	4b54      	ldr	r3, [pc, #336]	; (80019c0 <HAL_COMP_TriggerCallback+0x24c>)
 800186e:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Stop(&hcomp1);
 8001870:	483d      	ldr	r0, [pc, #244]	; (8001968 <HAL_COMP_TriggerCallback+0x1f4>)
 8001872:	f003 f8cf 	bl	8004a14 <HAL_COMP_Stop>
		}

	}
	if (hcomp == &hcomp2 && trigger_flag == 0)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a52      	ldr	r2, [pc, #328]	; (80019c4 <HAL_COMP_TriggerCallback+0x250>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d16f      	bne.n	800195e <HAL_COMP_TriggerCallback+0x1ea>
 800187e:	4b3b      	ldr	r3, [pc, #236]	; (800196c <HAL_COMP_TriggerCallback+0x1f8>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b00      	cmp	r3, #0
 8001886:	d16a      	bne.n	800195e <HAL_COMP_TriggerCallback+0x1ea>
	{
		trigger_B_pos = __HAL_DMA_GET_COUNTER(&hdma_adc2);
 8001888:	4b4f      	ldr	r3, [pc, #316]	; (80019c8 <HAL_COMP_TriggerCallback+0x254>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a39      	ldr	r2, [pc, #228]	; (8001974 <HAL_COMP_TriggerCallback+0x200>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d04a      	beq.n	8001928 <HAL_COMP_TriggerCallback+0x1b4>
 8001892:	4b4d      	ldr	r3, [pc, #308]	; (80019c8 <HAL_COMP_TriggerCallback+0x254>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a38      	ldr	r2, [pc, #224]	; (8001978 <HAL_COMP_TriggerCallback+0x204>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d045      	beq.n	8001928 <HAL_COMP_TriggerCallback+0x1b4>
 800189c:	4b4a      	ldr	r3, [pc, #296]	; (80019c8 <HAL_COMP_TriggerCallback+0x254>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a36      	ldr	r2, [pc, #216]	; (800197c <HAL_COMP_TriggerCallback+0x208>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d040      	beq.n	8001928 <HAL_COMP_TriggerCallback+0x1b4>
 80018a6:	4b48      	ldr	r3, [pc, #288]	; (80019c8 <HAL_COMP_TriggerCallback+0x254>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a35      	ldr	r2, [pc, #212]	; (8001980 <HAL_COMP_TriggerCallback+0x20c>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d03b      	beq.n	8001928 <HAL_COMP_TriggerCallback+0x1b4>
 80018b0:	4b45      	ldr	r3, [pc, #276]	; (80019c8 <HAL_COMP_TriggerCallback+0x254>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a33      	ldr	r2, [pc, #204]	; (8001984 <HAL_COMP_TriggerCallback+0x210>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d036      	beq.n	8001928 <HAL_COMP_TriggerCallback+0x1b4>
 80018ba:	4b43      	ldr	r3, [pc, #268]	; (80019c8 <HAL_COMP_TriggerCallback+0x254>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a32      	ldr	r2, [pc, #200]	; (8001988 <HAL_COMP_TriggerCallback+0x214>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d031      	beq.n	8001928 <HAL_COMP_TriggerCallback+0x1b4>
 80018c4:	4b40      	ldr	r3, [pc, #256]	; (80019c8 <HAL_COMP_TriggerCallback+0x254>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a30      	ldr	r2, [pc, #192]	; (800198c <HAL_COMP_TriggerCallback+0x218>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d02c      	beq.n	8001928 <HAL_COMP_TriggerCallback+0x1b4>
 80018ce:	4b3e      	ldr	r3, [pc, #248]	; (80019c8 <HAL_COMP_TriggerCallback+0x254>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a2f      	ldr	r2, [pc, #188]	; (8001990 <HAL_COMP_TriggerCallback+0x21c>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d027      	beq.n	8001928 <HAL_COMP_TriggerCallback+0x1b4>
 80018d8:	4b3b      	ldr	r3, [pc, #236]	; (80019c8 <HAL_COMP_TriggerCallback+0x254>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a2d      	ldr	r2, [pc, #180]	; (8001994 <HAL_COMP_TriggerCallback+0x220>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d022      	beq.n	8001928 <HAL_COMP_TriggerCallback+0x1b4>
 80018e2:	4b39      	ldr	r3, [pc, #228]	; (80019c8 <HAL_COMP_TriggerCallback+0x254>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a2c      	ldr	r2, [pc, #176]	; (8001998 <HAL_COMP_TriggerCallback+0x224>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d01d      	beq.n	8001928 <HAL_COMP_TriggerCallback+0x1b4>
 80018ec:	4b36      	ldr	r3, [pc, #216]	; (80019c8 <HAL_COMP_TriggerCallback+0x254>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a2a      	ldr	r2, [pc, #168]	; (800199c <HAL_COMP_TriggerCallback+0x228>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d018      	beq.n	8001928 <HAL_COMP_TriggerCallback+0x1b4>
 80018f6:	4b34      	ldr	r3, [pc, #208]	; (80019c8 <HAL_COMP_TriggerCallback+0x254>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a29      	ldr	r2, [pc, #164]	; (80019a0 <HAL_COMP_TriggerCallback+0x22c>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d013      	beq.n	8001928 <HAL_COMP_TriggerCallback+0x1b4>
 8001900:	4b31      	ldr	r3, [pc, #196]	; (80019c8 <HAL_COMP_TriggerCallback+0x254>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a27      	ldr	r2, [pc, #156]	; (80019a4 <HAL_COMP_TriggerCallback+0x230>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d00e      	beq.n	8001928 <HAL_COMP_TriggerCallback+0x1b4>
 800190a:	4b2f      	ldr	r3, [pc, #188]	; (80019c8 <HAL_COMP_TriggerCallback+0x254>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a26      	ldr	r2, [pc, #152]	; (80019a8 <HAL_COMP_TriggerCallback+0x234>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d009      	beq.n	8001928 <HAL_COMP_TriggerCallback+0x1b4>
 8001914:	4b2c      	ldr	r3, [pc, #176]	; (80019c8 <HAL_COMP_TriggerCallback+0x254>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a24      	ldr	r2, [pc, #144]	; (80019ac <HAL_COMP_TriggerCallback+0x238>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d004      	beq.n	8001928 <HAL_COMP_TriggerCallback+0x1b4>
 800191e:	4b2a      	ldr	r3, [pc, #168]	; (80019c8 <HAL_COMP_TriggerCallback+0x254>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a23      	ldr	r2, [pc, #140]	; (80019b0 <HAL_COMP_TriggerCallback+0x23c>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d104      	bne.n	8001932 <HAL_COMP_TriggerCallback+0x1be>
 8001928:	4b27      	ldr	r3, [pc, #156]	; (80019c8 <HAL_COMP_TriggerCallback+0x254>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	b29b      	uxth	r3, r3
 8001930:	e003      	b.n	800193a <HAL_COMP_TriggerCallback+0x1c6>
 8001932:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <HAL_COMP_TriggerCallback+0x254>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	b29b      	uxth	r3, r3
 800193a:	4a24      	ldr	r2, [pc, #144]	; (80019cc <HAL_COMP_TriggerCallback+0x258>)
 800193c:	8013      	strh	r3, [r2, #0]
		if (options->trigger_channel == 2)
 800193e:	4b1e      	ldr	r3, [pc, #120]	; (80019b8 <HAL_COMP_TriggerCallback+0x244>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	799b      	ldrb	r3, [r3, #6]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d10a      	bne.n	800195e <HAL_COMP_TriggerCallback+0x1ea>
		{
			trigger_flag = 1;
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <HAL_COMP_TriggerCallback+0x1f8>)
 800194a:	2201      	movs	r2, #1
 800194c:	701a      	strb	r2, [r3, #0]
			trigger_quadrant = buf_B_quadrant;
 800194e:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <HAL_COMP_TriggerCallback+0x25c>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	b2da      	uxtb	r2, r3
 8001954:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <HAL_COMP_TriggerCallback+0x24c>)
 8001956:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Stop(&hcomp2);
 8001958:	481a      	ldr	r0, [pc, #104]	; (80019c4 <HAL_COMP_TriggerCallback+0x250>)
 800195a:	f003 f85b 	bl	8004a14 <HAL_COMP_Stop>
		}

	}

}
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	24033a1f 	.word	0x24033a1f
 8001968:	240003b0 	.word	0x240003b0
 800196c:	24033a0c 	.word	0x24033a0c
 8001970:	24000248 	.word	0x24000248
 8001974:	40020010 	.word	0x40020010
 8001978:	40020028 	.word	0x40020028
 800197c:	40020040 	.word	0x40020040
 8001980:	40020058 	.word	0x40020058
 8001984:	40020070 	.word	0x40020070
 8001988:	40020088 	.word	0x40020088
 800198c:	400200a0 	.word	0x400200a0
 8001990:	400200b8 	.word	0x400200b8
 8001994:	40020410 	.word	0x40020410
 8001998:	40020428 	.word	0x40020428
 800199c:	40020440 	.word	0x40020440
 80019a0:	40020458 	.word	0x40020458
 80019a4:	40020470 	.word	0x40020470
 80019a8:	40020488 	.word	0x40020488
 80019ac:	400204a0 	.word	0x400204a0
 80019b0:	400204b8 	.word	0x400204b8
 80019b4:	24033a0e 	.word	0x24033a0e
 80019b8:	240345d8 	.word	0x240345d8
 80019bc:	24033a1c 	.word	0x24033a1c
 80019c0:	24033a12 	.word	0x24033a12
 80019c4:	240003dc 	.word	0x240003dc
 80019c8:	240002c0 	.word	0x240002c0
 80019cc:	24033a10 	.word	0x24033a10
 80019d0:	24033a1d 	.word	0x24033a1d

080019d4 <copy_to_tmp_array>:

void copy_to_tmp_array()
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
//		ADC_Buf_B_2[k] = k + adc_buf_len;
//
//		ADC_Buf_C_1[k] = k;
//		ADC_Buf_C_2[k] = k + adc_buf_len;
//	}
	if (trigger_quadrant == 0)
 80019d8:	4b85      	ldr	r3, [pc, #532]	; (8001bf0 <copy_to_tmp_array+0x21c>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d13e      	bne.n	8001a60 <copy_to_tmp_array+0x8c>
	{
		memcpy(ADC_Tmp_Buf_A, ADC_Buf_A_2 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 80019e2:	4b84      	ldr	r3, [pc, #528]	; (8001bf4 <copy_to_tmp_array+0x220>)
 80019e4:	f242 7210 	movw	r2, #10000	; 0x2710
 80019e8:	4619      	mov	r1, r3
 80019ea:	4883      	ldr	r0, [pc, #524]	; (8001bf8 <copy_to_tmp_array+0x224>)
 80019ec:	f011 fba2 	bl	8013134 <memcpy>
		memcpy(ADC_Tmp_Buf_A + ADC_HALF_BUF_LEN, ADC_Buf_A_1, ADC_HALF_BUF_LEN);
 80019f0:	4b82      	ldr	r3, [pc, #520]	; (8001bfc <copy_to_tmp_array+0x228>)
 80019f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80019f6:	4982      	ldr	r1, [pc, #520]	; (8001c00 <copy_to_tmp_array+0x22c>)
 80019f8:	4618      	mov	r0, r3
 80019fa:	f011 fb9b 	bl	8013134 <memcpy>
		memcpy(ADC_Tmp_Buf_A + 2 * ADC_HALF_BUF_LEN, ADC_Buf_A_1 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 80019fe:	4b81      	ldr	r3, [pc, #516]	; (8001c04 <copy_to_tmp_array+0x230>)
 8001a00:	4981      	ldr	r1, [pc, #516]	; (8001c08 <copy_to_tmp_array+0x234>)
 8001a02:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a06:	4618      	mov	r0, r3
 8001a08:	f011 fb94 	bl	8013134 <memcpy>

		memcpy(ADC_Tmp_Buf_B, ADC_Buf_B_2 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001a0c:	4b7f      	ldr	r3, [pc, #508]	; (8001c0c <copy_to_tmp_array+0x238>)
 8001a0e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a12:	4619      	mov	r1, r3
 8001a14:	487e      	ldr	r0, [pc, #504]	; (8001c10 <copy_to_tmp_array+0x23c>)
 8001a16:	f011 fb8d 	bl	8013134 <memcpy>
		memcpy(ADC_Tmp_Buf_B + ADC_HALF_BUF_LEN, ADC_Buf_B_1, ADC_HALF_BUF_LEN);
 8001a1a:	4b7e      	ldr	r3, [pc, #504]	; (8001c14 <copy_to_tmp_array+0x240>)
 8001a1c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a20:	497d      	ldr	r1, [pc, #500]	; (8001c18 <copy_to_tmp_array+0x244>)
 8001a22:	4618      	mov	r0, r3
 8001a24:	f011 fb86 	bl	8013134 <memcpy>
		memcpy(ADC_Tmp_Buf_B + 2 * ADC_HALF_BUF_LEN, ADC_Buf_B_1 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001a28:	4b7c      	ldr	r3, [pc, #496]	; (8001c1c <copy_to_tmp_array+0x248>)
 8001a2a:	497d      	ldr	r1, [pc, #500]	; (8001c20 <copy_to_tmp_array+0x24c>)
 8001a2c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a30:	4618      	mov	r0, r3
 8001a32:	f011 fb7f 	bl	8013134 <memcpy>

		memcpy(ADC_Tmp_Buf_C, ADC_Buf_C_2 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001a36:	4b7b      	ldr	r3, [pc, #492]	; (8001c24 <copy_to_tmp_array+0x250>)
 8001a38:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	487a      	ldr	r0, [pc, #488]	; (8001c28 <copy_to_tmp_array+0x254>)
 8001a40:	f011 fb78 	bl	8013134 <memcpy>
		memcpy(ADC_Tmp_Buf_C + ADC_HALF_BUF_LEN, ADC_Buf_C_1, ADC_HALF_BUF_LEN);
 8001a44:	4b79      	ldr	r3, [pc, #484]	; (8001c2c <copy_to_tmp_array+0x258>)
 8001a46:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a4a:	4979      	ldr	r1, [pc, #484]	; (8001c30 <copy_to_tmp_array+0x25c>)
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f011 fb71 	bl	8013134 <memcpy>
		memcpy(ADC_Tmp_Buf_C + 2 * ADC_HALF_BUF_LEN, ADC_Buf_C_1 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001a52:	4b78      	ldr	r3, [pc, #480]	; (8001c34 <copy_to_tmp_array+0x260>)
 8001a54:	4978      	ldr	r1, [pc, #480]	; (8001c38 <copy_to_tmp_array+0x264>)
 8001a56:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f011 fb6a 	bl	8013134 <memcpy>

	}

	if (trigger_quadrant == 1)
 8001a60:	4b63      	ldr	r3, [pc, #396]	; (8001bf0 <copy_to_tmp_array+0x21c>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d13b      	bne.n	8001ae2 <copy_to_tmp_array+0x10e>
	{
		memcpy(ADC_Tmp_Buf_A, ADC_Buf_A_1, ADC_HALF_BUF_LEN);
 8001a6a:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a6e:	4964      	ldr	r1, [pc, #400]	; (8001c00 <copy_to_tmp_array+0x22c>)
 8001a70:	4861      	ldr	r0, [pc, #388]	; (8001bf8 <copy_to_tmp_array+0x224>)
 8001a72:	f011 fb5f 	bl	8013134 <memcpy>
		memcpy(ADC_Tmp_Buf_A + ADC_HALF_BUF_LEN, ADC_Buf_A_1 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001a76:	4b61      	ldr	r3, [pc, #388]	; (8001bfc <copy_to_tmp_array+0x228>)
 8001a78:	4963      	ldr	r1, [pc, #396]	; (8001c08 <copy_to_tmp_array+0x234>)
 8001a7a:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f011 fb58 	bl	8013134 <memcpy>
		memcpy(ADC_Tmp_Buf_A + 2 * ADC_HALF_BUF_LEN, ADC_Buf_A_2, ADC_HALF_BUF_LEN);
 8001a84:	4b5f      	ldr	r3, [pc, #380]	; (8001c04 <copy_to_tmp_array+0x230>)
 8001a86:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a8a:	496c      	ldr	r1, [pc, #432]	; (8001c3c <copy_to_tmp_array+0x268>)
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f011 fb51 	bl	8013134 <memcpy>

		memcpy(ADC_Tmp_Buf_B, ADC_Buf_B_1, ADC_HALF_BUF_LEN);
 8001a92:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a96:	4960      	ldr	r1, [pc, #384]	; (8001c18 <copy_to_tmp_array+0x244>)
 8001a98:	485d      	ldr	r0, [pc, #372]	; (8001c10 <copy_to_tmp_array+0x23c>)
 8001a9a:	f011 fb4b 	bl	8013134 <memcpy>
		memcpy(ADC_Tmp_Buf_B + ADC_HALF_BUF_LEN, ADC_Buf_B_1 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001a9e:	4b5d      	ldr	r3, [pc, #372]	; (8001c14 <copy_to_tmp_array+0x240>)
 8001aa0:	495f      	ldr	r1, [pc, #380]	; (8001c20 <copy_to_tmp_array+0x24c>)
 8001aa2:	f242 7210 	movw	r2, #10000	; 0x2710
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f011 fb44 	bl	8013134 <memcpy>
		memcpy(ADC_Tmp_Buf_B + 2 * ADC_HALF_BUF_LEN, ADC_Buf_B_2, ADC_HALF_BUF_LEN);
 8001aac:	4b5b      	ldr	r3, [pc, #364]	; (8001c1c <copy_to_tmp_array+0x248>)
 8001aae:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ab2:	4963      	ldr	r1, [pc, #396]	; (8001c40 <copy_to_tmp_array+0x26c>)
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f011 fb3d 	bl	8013134 <memcpy>

		memcpy(ADC_Tmp_Buf_C, ADC_Buf_C_1, ADC_HALF_BUF_LEN);
 8001aba:	f242 7210 	movw	r2, #10000	; 0x2710
 8001abe:	495c      	ldr	r1, [pc, #368]	; (8001c30 <copy_to_tmp_array+0x25c>)
 8001ac0:	4859      	ldr	r0, [pc, #356]	; (8001c28 <copy_to_tmp_array+0x254>)
 8001ac2:	f011 fb37 	bl	8013134 <memcpy>
		memcpy(ADC_Tmp_Buf_C + ADC_HALF_BUF_LEN, ADC_Buf_C_1 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001ac6:	4b59      	ldr	r3, [pc, #356]	; (8001c2c <copy_to_tmp_array+0x258>)
 8001ac8:	495b      	ldr	r1, [pc, #364]	; (8001c38 <copy_to_tmp_array+0x264>)
 8001aca:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f011 fb30 	bl	8013134 <memcpy>
		memcpy(ADC_Tmp_Buf_C + 2 * ADC_HALF_BUF_LEN, ADC_Buf_C_2, ADC_HALF_BUF_LEN);
 8001ad4:	4b57      	ldr	r3, [pc, #348]	; (8001c34 <copy_to_tmp_array+0x260>)
 8001ad6:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ada:	495a      	ldr	r1, [pc, #360]	; (8001c44 <copy_to_tmp_array+0x270>)
 8001adc:	4618      	mov	r0, r3
 8001ade:	f011 fb29 	bl	8013134 <memcpy>

	}

	if (trigger_quadrant == 2)
 8001ae2:	4b43      	ldr	r3, [pc, #268]	; (8001bf0 <copy_to_tmp_array+0x21c>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d13e      	bne.n	8001b6a <copy_to_tmp_array+0x196>
	{
		memcpy(ADC_Tmp_Buf_A, ADC_Buf_A_1 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001aec:	4b46      	ldr	r3, [pc, #280]	; (8001c08 <copy_to_tmp_array+0x234>)
 8001aee:	f242 7210 	movw	r2, #10000	; 0x2710
 8001af2:	4619      	mov	r1, r3
 8001af4:	4840      	ldr	r0, [pc, #256]	; (8001bf8 <copy_to_tmp_array+0x224>)
 8001af6:	f011 fb1d 	bl	8013134 <memcpy>
		memcpy(ADC_Tmp_Buf_A + ADC_HALF_BUF_LEN, ADC_Buf_A_2, ADC_HALF_BUF_LEN);
 8001afa:	4b40      	ldr	r3, [pc, #256]	; (8001bfc <copy_to_tmp_array+0x228>)
 8001afc:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b00:	494e      	ldr	r1, [pc, #312]	; (8001c3c <copy_to_tmp_array+0x268>)
 8001b02:	4618      	mov	r0, r3
 8001b04:	f011 fb16 	bl	8013134 <memcpy>
		memcpy(ADC_Tmp_Buf_A + 2 * ADC_HALF_BUF_LEN, ADC_Buf_A_2 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001b08:	4b3e      	ldr	r3, [pc, #248]	; (8001c04 <copy_to_tmp_array+0x230>)
 8001b0a:	493a      	ldr	r1, [pc, #232]	; (8001bf4 <copy_to_tmp_array+0x220>)
 8001b0c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b10:	4618      	mov	r0, r3
 8001b12:	f011 fb0f 	bl	8013134 <memcpy>

		memcpy(ADC_Tmp_Buf_B, ADC_Buf_B_1 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001b16:	4b42      	ldr	r3, [pc, #264]	; (8001c20 <copy_to_tmp_array+0x24c>)
 8001b18:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	483c      	ldr	r0, [pc, #240]	; (8001c10 <copy_to_tmp_array+0x23c>)
 8001b20:	f011 fb08 	bl	8013134 <memcpy>
		memcpy(ADC_Tmp_Buf_B + ADC_HALF_BUF_LEN, ADC_Buf_B_2, ADC_HALF_BUF_LEN);
 8001b24:	4b3b      	ldr	r3, [pc, #236]	; (8001c14 <copy_to_tmp_array+0x240>)
 8001b26:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b2a:	4945      	ldr	r1, [pc, #276]	; (8001c40 <copy_to_tmp_array+0x26c>)
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f011 fb01 	bl	8013134 <memcpy>
		memcpy(ADC_Tmp_Buf_B + 2 * ADC_HALF_BUF_LEN, ADC_Buf_B_2 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001b32:	4b3a      	ldr	r3, [pc, #232]	; (8001c1c <copy_to_tmp_array+0x248>)
 8001b34:	4935      	ldr	r1, [pc, #212]	; (8001c0c <copy_to_tmp_array+0x238>)
 8001b36:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f011 fafa 	bl	8013134 <memcpy>

		memcpy(ADC_Tmp_Buf_C, ADC_Buf_C_1 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001b40:	4b3d      	ldr	r3, [pc, #244]	; (8001c38 <copy_to_tmp_array+0x264>)
 8001b42:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b46:	4619      	mov	r1, r3
 8001b48:	4837      	ldr	r0, [pc, #220]	; (8001c28 <copy_to_tmp_array+0x254>)
 8001b4a:	f011 faf3 	bl	8013134 <memcpy>
		memcpy(ADC_Tmp_Buf_C + ADC_HALF_BUF_LEN, ADC_Buf_C_2, ADC_HALF_BUF_LEN);
 8001b4e:	4b37      	ldr	r3, [pc, #220]	; (8001c2c <copy_to_tmp_array+0x258>)
 8001b50:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b54:	493b      	ldr	r1, [pc, #236]	; (8001c44 <copy_to_tmp_array+0x270>)
 8001b56:	4618      	mov	r0, r3
 8001b58:	f011 faec 	bl	8013134 <memcpy>
		memcpy(ADC_Tmp_Buf_C + 2 * ADC_HALF_BUF_LEN, ADC_Buf_C_2 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001b5c:	4b35      	ldr	r3, [pc, #212]	; (8001c34 <copy_to_tmp_array+0x260>)
 8001b5e:	4931      	ldr	r1, [pc, #196]	; (8001c24 <copy_to_tmp_array+0x250>)
 8001b60:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b64:	4618      	mov	r0, r3
 8001b66:	f011 fae5 	bl	8013134 <memcpy>

	}

	if (trigger_quadrant == 3)
 8001b6a:	4b21      	ldr	r3, [pc, #132]	; (8001bf0 <copy_to_tmp_array+0x21c>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b03      	cmp	r3, #3
 8001b72:	d13b      	bne.n	8001bec <copy_to_tmp_array+0x218>
	{
		memcpy(ADC_Tmp_Buf_A, ADC_Buf_A_2, ADC_HALF_BUF_LEN);
 8001b74:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b78:	4930      	ldr	r1, [pc, #192]	; (8001c3c <copy_to_tmp_array+0x268>)
 8001b7a:	481f      	ldr	r0, [pc, #124]	; (8001bf8 <copy_to_tmp_array+0x224>)
 8001b7c:	f011 fada 	bl	8013134 <memcpy>
		memcpy(ADC_Tmp_Buf_A + ADC_HALF_BUF_LEN, ADC_Buf_A_2 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001b80:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <copy_to_tmp_array+0x228>)
 8001b82:	491c      	ldr	r1, [pc, #112]	; (8001bf4 <copy_to_tmp_array+0x220>)
 8001b84:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f011 fad3 	bl	8013134 <memcpy>
		memcpy(ADC_Tmp_Buf_A + 2 * ADC_HALF_BUF_LEN, ADC_Buf_A_1, ADC_HALF_BUF_LEN);
 8001b8e:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <copy_to_tmp_array+0x230>)
 8001b90:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b94:	491a      	ldr	r1, [pc, #104]	; (8001c00 <copy_to_tmp_array+0x22c>)
 8001b96:	4618      	mov	r0, r3
 8001b98:	f011 facc 	bl	8013134 <memcpy>

		memcpy(ADC_Tmp_Buf_B, ADC_Buf_B_2, ADC_HALF_BUF_LEN);
 8001b9c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ba0:	4927      	ldr	r1, [pc, #156]	; (8001c40 <copy_to_tmp_array+0x26c>)
 8001ba2:	481b      	ldr	r0, [pc, #108]	; (8001c10 <copy_to_tmp_array+0x23c>)
 8001ba4:	f011 fac6 	bl	8013134 <memcpy>
		memcpy(ADC_Tmp_Buf_B + ADC_HALF_BUF_LEN, ADC_Buf_B_2 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001ba8:	4b1a      	ldr	r3, [pc, #104]	; (8001c14 <copy_to_tmp_array+0x240>)
 8001baa:	4918      	ldr	r1, [pc, #96]	; (8001c0c <copy_to_tmp_array+0x238>)
 8001bac:	f242 7210 	movw	r2, #10000	; 0x2710
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f011 fabf 	bl	8013134 <memcpy>
		memcpy(ADC_Tmp_Buf_B + 2 * ADC_HALF_BUF_LEN, ADC_Buf_B_1, ADC_HALF_BUF_LEN);
 8001bb6:	4b19      	ldr	r3, [pc, #100]	; (8001c1c <copy_to_tmp_array+0x248>)
 8001bb8:	f242 7210 	movw	r2, #10000	; 0x2710
 8001bbc:	4916      	ldr	r1, [pc, #88]	; (8001c18 <copy_to_tmp_array+0x244>)
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f011 fab8 	bl	8013134 <memcpy>

		memcpy(ADC_Tmp_Buf_C, ADC_Buf_C_2, ADC_HALF_BUF_LEN);
 8001bc4:	f242 7210 	movw	r2, #10000	; 0x2710
 8001bc8:	491e      	ldr	r1, [pc, #120]	; (8001c44 <copy_to_tmp_array+0x270>)
 8001bca:	4817      	ldr	r0, [pc, #92]	; (8001c28 <copy_to_tmp_array+0x254>)
 8001bcc:	f011 fab2 	bl	8013134 <memcpy>
		memcpy(ADC_Tmp_Buf_C + ADC_HALF_BUF_LEN, ADC_Buf_C_2 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001bd0:	4b16      	ldr	r3, [pc, #88]	; (8001c2c <copy_to_tmp_array+0x258>)
 8001bd2:	4914      	ldr	r1, [pc, #80]	; (8001c24 <copy_to_tmp_array+0x250>)
 8001bd4:	f242 7210 	movw	r2, #10000	; 0x2710
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f011 faab 	bl	8013134 <memcpy>
		memcpy(ADC_Tmp_Buf_C + 2 * ADC_HALF_BUF_LEN, ADC_Buf_C_1, ADC_HALF_BUF_LEN);
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <copy_to_tmp_array+0x260>)
 8001be0:	f242 7210 	movw	r2, #10000	; 0x2710
 8001be4:	4912      	ldr	r1, [pc, #72]	; (8001c30 <copy_to_tmp_array+0x25c>)
 8001be6:	4618      	mov	r0, r3
 8001be8:	f011 faa4 	bl	8013134 <memcpy>
	}
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	24033a12 	.word	0x24033a12
 8001bf4:	2401172c 	.word	0x2401172c
 8001bf8:	2401da7c 	.word	0x2401da7c
 8001bfc:	2402018c 	.word	0x2402018c
 8001c00:	240005bc 	.word	0x240005bc
 8001c04:	2402289c 	.word	0x2402289c
 8001c08:	24002ccc 	.word	0x24002ccc
 8001c0c:	2401654c 	.word	0x2401654c
 8001c10:	24024fac 	.word	0x24024fac
 8001c14:	240276bc 	.word	0x240276bc
 8001c18:	240053dc 	.word	0x240053dc
 8001c1c:	24029dcc 	.word	0x24029dcc
 8001c20:	24007aec 	.word	0x24007aec
 8001c24:	2401b36c 	.word	0x2401b36c
 8001c28:	2402c4dc 	.word	0x2402c4dc
 8001c2c:	2402ebec 	.word	0x2402ebec
 8001c30:	2400a1fc 	.word	0x2400a1fc
 8001c34:	240312fc 	.word	0x240312fc
 8001c38:	2400c90c 	.word	0x2400c90c
 8001c3c:	2400f01c 	.word	0x2400f01c
 8001c40:	24013e3c 	.word	0x24013e3c
 8001c44:	24018c5c 	.word	0x24018c5c

08001c48 <prepare_data_to_send>:

void prepare_data_to_send(uint16_t trigger_pos)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b087      	sub	sp, #28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	80fb      	strh	r3, [r7, #6]
	if (trigger_quadrant == 1 || trigger_quadrant == 3)
 8001c52:	4b58      	ldr	r3, [pc, #352]	; (8001db4 <prepare_data_to_send+0x16c>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d004      	beq.n	8001c66 <prepare_data_to_send+0x1e>
 8001c5c:	4b55      	ldr	r3, [pc, #340]	; (8001db4 <prepare_data_to_send+0x16c>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b03      	cmp	r3, #3
 8001c64:	d104      	bne.n	8001c70 <prepare_data_to_send+0x28>
	{
		trigger_pos += ADC_HALF_BUF_LEN;
 8001c66:	88fb      	ldrh	r3, [r7, #6]
 8001c68:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001c6c:	3310      	adds	r3, #16
 8001c6e:	80fb      	strh	r3, [r7, #6]
	}
	uint32_t i = trigger_pos;
 8001c70:	88fb      	ldrh	r3, [r7, #6]
 8001c72:	617b      	str	r3, [r7, #20]
	uint8_t step = options->time_scale + 1;
 8001c74:	4b50      	ldr	r3, [pc, #320]	; (8001db8 <prepare_data_to_send+0x170>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	79db      	ldrb	r3, [r3, #7]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	74fb      	strb	r3, [r7, #19]
	uint16_t interval = DATA_TO_SEND_LEN * step - 1;
 8001c7e:	7cfb      	ldrb	r3, [r7, #19]
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	461a      	mov	r2, r3
 8001c84:	0152      	lsls	r2, r2, #5
 8001c86:	1ad2      	subs	r2, r2, r3
 8001c88:	0092      	lsls	r2, r2, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	3b01      	subs	r3, #1
 8001c92:	823b      	strh	r3, [r7, #16]
	uint16_t half_interval = interval / 2;
 8001c94:	8a3b      	ldrh	r3, [r7, #16]
 8001c96:	085b      	lsrs	r3, r3, #1
 8001c98:	81fb      	strh	r3, [r7, #14]
	uint16_t half_data_to_send_len = DATA_TO_SEND_LEN / 2;
 8001c9a:	23fa      	movs	r3, #250	; 0xfa
 8001c9c:	81bb      	strh	r3, [r7, #12]
	data_to_send[0] = 0;
 8001c9e:	4b47      	ldr	r3, [pc, #284]	; (8001dbc <prepare_data_to_send+0x174>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
	data_to_send[DATA_TO_SEND_LEN] = 1;
 8001ca4:	4b45      	ldr	r3, [pc, #276]	; (8001dbc <prepare_data_to_send+0x174>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
	data_to_send[DATA_TO_SEND_LEN * 2] = 2;
 8001cac:	4b43      	ldr	r3, [pc, #268]	; (8001dbc <prepare_data_to_send+0x174>)
 8001cae:	2202      	movs	r2, #2
 8001cb0:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
	data_to_send[250] = ADC_Tmp_Buf_A[trigger_pos];
 8001cb4:	88fb      	ldrh	r3, [r7, #6]
 8001cb6:	4a42      	ldr	r2, [pc, #264]	; (8001dc0 <prepare_data_to_send+0x178>)
 8001cb8:	5cd2      	ldrb	r2, [r2, r3]
 8001cba:	4b40      	ldr	r3, [pc, #256]	; (8001dbc <prepare_data_to_send+0x174>)
 8001cbc:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
	data_to_send[DATA_TO_SEND_LEN + 250] = ADC_Tmp_Buf_B[trigger_pos];
 8001cc0:	88fb      	ldrh	r3, [r7, #6]
 8001cc2:	4a40      	ldr	r2, [pc, #256]	; (8001dc4 <prepare_data_to_send+0x17c>)
 8001cc4:	5cd2      	ldrb	r2, [r2, r3]
 8001cc6:	4b3d      	ldr	r3, [pc, #244]	; (8001dbc <prepare_data_to_send+0x174>)
 8001cc8:	f883 22ee 	strb.w	r2, [r3, #750]	; 0x2ee
	data_to_send[DATA_TO_SEND_LEN * 2 + 250] = ADC_Tmp_Buf_C[trigger_pos];
 8001ccc:	88fb      	ldrh	r3, [r7, #6]
 8001cce:	4a3e      	ldr	r2, [pc, #248]	; (8001dc8 <prepare_data_to_send+0x180>)
 8001cd0:	5cd2      	ldrb	r2, [r2, r3]
 8001cd2:	4b3a      	ldr	r3, [pc, #232]	; (8001dbc <prepare_data_to_send+0x174>)
 8001cd4:	f883 24e2 	strb.w	r2, [r3, #1250]	; 0x4e2
//		ADC_Tmp_Buf_A[k] = k;
//		ADC_Tmp_Buf_B[k] = k;
//		ADC_Tmp_Buf_C[k] = k;
//	}

	for (i = 1; i < half_data_to_send_len; i++ )
 8001cd8:	2301      	movs	r3, #1
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	e029      	b.n	8001d32 <prepare_data_to_send+0xea>
	{
		data_to_send[i] = ADC_Tmp_Buf_A[trigger_pos + i * step];
 8001cde:	88fa      	ldrh	r2, [r7, #6]
 8001ce0:	7cfb      	ldrb	r3, [r7, #19]
 8001ce2:	6979      	ldr	r1, [r7, #20]
 8001ce4:	fb01 f303 	mul.w	r3, r1, r3
 8001ce8:	4413      	add	r3, r2
 8001cea:	4a35      	ldr	r2, [pc, #212]	; (8001dc0 <prepare_data_to_send+0x178>)
 8001cec:	5cd1      	ldrb	r1, [r2, r3]
 8001cee:	4a33      	ldr	r2, [pc, #204]	; (8001dbc <prepare_data_to_send+0x174>)
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	460a      	mov	r2, r1
 8001cf6:	701a      	strb	r2, [r3, #0]
		data_to_send[DATA_TO_SEND_LEN + i] = ADC_Tmp_Buf_B[trigger_pos + i * step];
 8001cf8:	88fa      	ldrh	r2, [r7, #6]
 8001cfa:	7cfb      	ldrb	r3, [r7, #19]
 8001cfc:	6979      	ldr	r1, [r7, #20]
 8001cfe:	fb01 f303 	mul.w	r3, r1, r3
 8001d02:	441a      	add	r2, r3
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001d0a:	492e      	ldr	r1, [pc, #184]	; (8001dc4 <prepare_data_to_send+0x17c>)
 8001d0c:	5c89      	ldrb	r1, [r1, r2]
 8001d0e:	4a2b      	ldr	r2, [pc, #172]	; (8001dbc <prepare_data_to_send+0x174>)
 8001d10:	54d1      	strb	r1, [r2, r3]
		data_to_send[DATA_TO_SEND_LEN + DATA_TO_SEND_LEN + i] = ADC_Tmp_Buf_C[trigger_pos + i * step];
 8001d12:	88fa      	ldrh	r2, [r7, #6]
 8001d14:	7cfb      	ldrb	r3, [r7, #19]
 8001d16:	6979      	ldr	r1, [r7, #20]
 8001d18:	fb01 f303 	mul.w	r3, r1, r3
 8001d1c:	441a      	add	r2, r3
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001d24:	4928      	ldr	r1, [pc, #160]	; (8001dc8 <prepare_data_to_send+0x180>)
 8001d26:	5c89      	ldrb	r1, [r1, r2]
 8001d28:	4a24      	ldr	r2, [pc, #144]	; (8001dbc <prepare_data_to_send+0x174>)
 8001d2a:	54d1      	strb	r1, [r2, r3]
	for (i = 1; i < half_data_to_send_len; i++ )
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	89bb      	ldrh	r3, [r7, #12]
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d3d1      	bcc.n	8001cde <prepare_data_to_send+0x96>

	}

	for (i = half_data_to_send_len; i < DATA_TO_SEND_LEN; i++)
 8001d3a:	89bb      	ldrh	r3, [r7, #12]
 8001d3c:	617b      	str	r3, [r7, #20]
 8001d3e:	e029      	b.n	8001d94 <prepare_data_to_send+0x14c>
	{
		data_to_send[i] = ADC_Tmp_Buf_A[trigger_pos + i * step];
 8001d40:	88fa      	ldrh	r2, [r7, #6]
 8001d42:	7cfb      	ldrb	r3, [r7, #19]
 8001d44:	6979      	ldr	r1, [r7, #20]
 8001d46:	fb01 f303 	mul.w	r3, r1, r3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	4a1c      	ldr	r2, [pc, #112]	; (8001dc0 <prepare_data_to_send+0x178>)
 8001d4e:	5cd1      	ldrb	r1, [r2, r3]
 8001d50:	4a1a      	ldr	r2, [pc, #104]	; (8001dbc <prepare_data_to_send+0x174>)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	4413      	add	r3, r2
 8001d56:	460a      	mov	r2, r1
 8001d58:	701a      	strb	r2, [r3, #0]
		data_to_send[i + DATA_TO_SEND_LEN] = ADC_Tmp_Buf_B[trigger_pos + i * step];
 8001d5a:	88fa      	ldrh	r2, [r7, #6]
 8001d5c:	7cfb      	ldrb	r3, [r7, #19]
 8001d5e:	6979      	ldr	r1, [r7, #20]
 8001d60:	fb01 f303 	mul.w	r3, r1, r3
 8001d64:	441a      	add	r2, r3
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001d6c:	4915      	ldr	r1, [pc, #84]	; (8001dc4 <prepare_data_to_send+0x17c>)
 8001d6e:	5c89      	ldrb	r1, [r1, r2]
 8001d70:	4a12      	ldr	r2, [pc, #72]	; (8001dbc <prepare_data_to_send+0x174>)
 8001d72:	54d1      	strb	r1, [r2, r3]
		data_to_send[i + DATA_TO_SEND_LEN + DATA_TO_SEND_LEN] = ADC_Tmp_Buf_C[trigger_pos + i * step];
 8001d74:	88fa      	ldrh	r2, [r7, #6]
 8001d76:	7cfb      	ldrb	r3, [r7, #19]
 8001d78:	6979      	ldr	r1, [r7, #20]
 8001d7a:	fb01 f303 	mul.w	r3, r1, r3
 8001d7e:	441a      	add	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001d86:	4910      	ldr	r1, [pc, #64]	; (8001dc8 <prepare_data_to_send+0x180>)
 8001d88:	5c89      	ldrb	r1, [r1, r2]
 8001d8a:	4a0c      	ldr	r2, [pc, #48]	; (8001dbc <prepare_data_to_send+0x174>)
 8001d8c:	54d1      	strb	r1, [r2, r3]
	for (i = half_data_to_send_len; i < DATA_TO_SEND_LEN; i++)
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	3301      	adds	r3, #1
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d9a:	d3d1      	bcc.n	8001d40 <prepare_data_to_send+0xf8>

	}

	trigger_flag = 0;
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <prepare_data_to_send+0x184>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	701a      	strb	r2, [r3, #0]
	ready_to_send_flag = 1;
 8001da2:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <prepare_data_to_send+0x188>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	701a      	strb	r2, [r3, #0]
}
 8001da8:	bf00      	nop
 8001daa:	371c      	adds	r7, #28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	24033a12 	.word	0x24033a12
 8001db8:	240345d8 	.word	0x240345d8
 8001dbc:	24033a20 	.word	0x24033a20
 8001dc0:	2401da7c 	.word	0x2401da7c
 8001dc4:	24024fac 	.word	0x24024fac
 8001dc8:	2402c4dc 	.word	0x2402c4dc
 8001dcc:	24033a0c 	.word	0x24033a0c
 8001dd0:	24033a14 	.word	0x24033a14

08001dd4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001dd8:	2101      	movs	r1, #1
 8001dda:	4806      	ldr	r0, [pc, #24]	; (8001df4 <Error_Handler+0x20>)
 8001ddc:	f006 f811 	bl	8007e02 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001de0:	2201      	movs	r2, #1
 8001de2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001de6:	4803      	ldr	r0, [pc, #12]	; (8001df4 <Error_Handler+0x20>)
 8001de8:	f005 fff2 	bl	8007dd0 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dec:	b672      	cpsid	i
}
 8001dee:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001df0:	e7fe      	b.n	8001df0 <Error_Handler+0x1c>
 8001df2:	bf00      	nop
 8001df4:	58020400 	.word	0x58020400

08001df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfe:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <HAL_MspInit+0x54>)
 8001e00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e04:	4a11      	ldr	r2, [pc, #68]	; (8001e4c <HAL_MspInit+0x54>)
 8001e06:	f043 0302 	orr.w	r3, r3, #2
 8001e0a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e0e:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <HAL_MspInit+0x54>)
 8001e10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	607b      	str	r3, [r7, #4]
 8001e1a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <HAL_MspInit+0x54>)
 8001e1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e22:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <HAL_MspInit+0x54>)
 8001e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e28:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e2c:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <HAL_MspInit+0x54>)
 8001e2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	683b      	ldr	r3, [r7, #0]

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8001e3a:	f000 fc81 	bl	8002740 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8001e3e:	2002      	movs	r0, #2
 8001e40:	f000 fc6a 	bl	8002718 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	58024400 	.word	0x58024400

08001e50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08e      	sub	sp, #56	; 0x38
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4aa0      	ldr	r2, [pc, #640]	; (80020f0 <HAL_ADC_MspInit+0x2a0>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d16a      	bne.n	8001f48 <HAL_ADC_MspInit+0xf8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001e72:	4ba0      	ldr	r3, [pc, #640]	; (80020f4 <HAL_ADC_MspInit+0x2a4>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	3301      	adds	r3, #1
 8001e78:	4a9e      	ldr	r2, [pc, #632]	; (80020f4 <HAL_ADC_MspInit+0x2a4>)
 8001e7a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001e7c:	4b9d      	ldr	r3, [pc, #628]	; (80020f4 <HAL_ADC_MspInit+0x2a4>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d10e      	bne.n	8001ea2 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001e84:	4b9c      	ldr	r3, [pc, #624]	; (80020f8 <HAL_ADC_MspInit+0x2a8>)
 8001e86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e8a:	4a9b      	ldr	r2, [pc, #620]	; (80020f8 <HAL_ADC_MspInit+0x2a8>)
 8001e8c:	f043 0320 	orr.w	r3, r3, #32
 8001e90:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e94:	4b98      	ldr	r3, [pc, #608]	; (80020f8 <HAL_ADC_MspInit+0x2a8>)
 8001e96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e9a:	f003 0320 	and.w	r3, r3, #32
 8001e9e:	623b      	str	r3, [r7, #32]
 8001ea0:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ea2:	4b95      	ldr	r3, [pc, #596]	; (80020f8 <HAL_ADC_MspInit+0x2a8>)
 8001ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea8:	4a93      	ldr	r2, [pc, #588]	; (80020f8 <HAL_ADC_MspInit+0x2a8>)
 8001eaa:	f043 0320 	orr.w	r3, r3, #32
 8001eae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eb2:	4b91      	ldr	r3, [pc, #580]	; (80020f8 <HAL_ADC_MspInit+0x2a8>)
 8001eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb8:	f003 0320 	and.w	r3, r3, #32
 8001ebc:	61fb      	str	r3, [r7, #28]
 8001ebe:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ec0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4889      	ldr	r0, [pc, #548]	; (80020fc <HAL_ADC_MspInit+0x2ac>)
 8001ed6:	f005 fdcb 	bl	8007a70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001eda:	4b89      	ldr	r3, [pc, #548]	; (8002100 <HAL_ADC_MspInit+0x2b0>)
 8001edc:	4a89      	ldr	r2, [pc, #548]	; (8002104 <HAL_ADC_MspInit+0x2b4>)
 8001ede:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001ee0:	4b87      	ldr	r3, [pc, #540]	; (8002100 <HAL_ADC_MspInit+0x2b0>)
 8001ee2:	2209      	movs	r2, #9
 8001ee4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ee6:	4b86      	ldr	r3, [pc, #536]	; (8002100 <HAL_ADC_MspInit+0x2b0>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eec:	4b84      	ldr	r3, [pc, #528]	; (8002100 <HAL_ADC_MspInit+0x2b0>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ef2:	4b83      	ldr	r3, [pc, #524]	; (8002100 <HAL_ADC_MspInit+0x2b0>)
 8001ef4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ef8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001efa:	4b81      	ldr	r3, [pc, #516]	; (8002100 <HAL_ADC_MspInit+0x2b0>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f00:	4b7f      	ldr	r3, [pc, #508]	; (8002100 <HAL_ADC_MspInit+0x2b0>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001f06:	4b7e      	ldr	r3, [pc, #504]	; (8002100 <HAL_ADC_MspInit+0x2b0>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001f0c:	4b7c      	ldr	r3, [pc, #496]	; (8002100 <HAL_ADC_MspInit+0x2b0>)
 8001f0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f12:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f14:	4b7a      	ldr	r3, [pc, #488]	; (8002100 <HAL_ADC_MspInit+0x2b0>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f1a:	4879      	ldr	r0, [pc, #484]	; (8002100 <HAL_ADC_MspInit+0x2b0>)
 8001f1c:	f003 f9b2 	bl	8005284 <HAL_DMA_Init>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_ADC_MspInit+0xda>
    {
      Error_Handler();
 8001f26:	f7ff ff55 	bl	8001dd4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a74      	ldr	r2, [pc, #464]	; (8002100 <HAL_ADC_MspInit+0x2b0>)
 8001f2e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f30:	4a73      	ldr	r2, [pc, #460]	; (8002100 <HAL_ADC_MspInit+0x2b0>)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	2100      	movs	r1, #0
 8001f3a:	2012      	movs	r0, #18
 8001f3c:	f002 ff8f 	bl	8004e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001f40:	2012      	movs	r0, #18
 8001f42:	f002 ffa6 	bl	8004e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001f46:	e0ce      	b.n	80020e6 <HAL_ADC_MspInit+0x296>
  else if(hadc->Instance==ADC2)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a6e      	ldr	r2, [pc, #440]	; (8002108 <HAL_ADC_MspInit+0x2b8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d16a      	bne.n	8002028 <HAL_ADC_MspInit+0x1d8>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001f52:	4b68      	ldr	r3, [pc, #416]	; (80020f4 <HAL_ADC_MspInit+0x2a4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	3301      	adds	r3, #1
 8001f58:	4a66      	ldr	r2, [pc, #408]	; (80020f4 <HAL_ADC_MspInit+0x2a4>)
 8001f5a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001f5c:	4b65      	ldr	r3, [pc, #404]	; (80020f4 <HAL_ADC_MspInit+0x2a4>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d10e      	bne.n	8001f82 <HAL_ADC_MspInit+0x132>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001f64:	4b64      	ldr	r3, [pc, #400]	; (80020f8 <HAL_ADC_MspInit+0x2a8>)
 8001f66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f6a:	4a63      	ldr	r2, [pc, #396]	; (80020f8 <HAL_ADC_MspInit+0x2a8>)
 8001f6c:	f043 0320 	orr.w	r3, r3, #32
 8001f70:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001f74:	4b60      	ldr	r3, [pc, #384]	; (80020f8 <HAL_ADC_MspInit+0x2a8>)
 8001f76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f7a:	f003 0320 	and.w	r3, r3, #32
 8001f7e:	61bb      	str	r3, [r7, #24]
 8001f80:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f82:	4b5d      	ldr	r3, [pc, #372]	; (80020f8 <HAL_ADC_MspInit+0x2a8>)
 8001f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f88:	4a5b      	ldr	r2, [pc, #364]	; (80020f8 <HAL_ADC_MspInit+0x2a8>)
 8001f8a:	f043 0320 	orr.w	r3, r3, #32
 8001f8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f92:	4b59      	ldr	r3, [pc, #356]	; (80020f8 <HAL_ADC_MspInit+0x2a8>)
 8001f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f98:	f003 0320 	and.w	r3, r3, #32
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001fa0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4851      	ldr	r0, [pc, #324]	; (80020fc <HAL_ADC_MspInit+0x2ac>)
 8001fb6:	f005 fd5b 	bl	8007a70 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 8001fba:	4b54      	ldr	r3, [pc, #336]	; (800210c <HAL_ADC_MspInit+0x2bc>)
 8001fbc:	4a54      	ldr	r2, [pc, #336]	; (8002110 <HAL_ADC_MspInit+0x2c0>)
 8001fbe:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001fc0:	4b52      	ldr	r3, [pc, #328]	; (800210c <HAL_ADC_MspInit+0x2bc>)
 8001fc2:	220a      	movs	r2, #10
 8001fc4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fc6:	4b51      	ldr	r3, [pc, #324]	; (800210c <HAL_ADC_MspInit+0x2bc>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fcc:	4b4f      	ldr	r3, [pc, #316]	; (800210c <HAL_ADC_MspInit+0x2bc>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001fd2:	4b4e      	ldr	r3, [pc, #312]	; (800210c <HAL_ADC_MspInit+0x2bc>)
 8001fd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fd8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fda:	4b4c      	ldr	r3, [pc, #304]	; (800210c <HAL_ADC_MspInit+0x2bc>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fe0:	4b4a      	ldr	r3, [pc, #296]	; (800210c <HAL_ADC_MspInit+0x2bc>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8001fe6:	4b49      	ldr	r3, [pc, #292]	; (800210c <HAL_ADC_MspInit+0x2bc>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8001fec:	4b47      	ldr	r3, [pc, #284]	; (800210c <HAL_ADC_MspInit+0x2bc>)
 8001fee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ff2:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ff4:	4b45      	ldr	r3, [pc, #276]	; (800210c <HAL_ADC_MspInit+0x2bc>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001ffa:	4844      	ldr	r0, [pc, #272]	; (800210c <HAL_ADC_MspInit+0x2bc>)
 8001ffc:	f003 f942 	bl	8005284 <HAL_DMA_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_ADC_MspInit+0x1ba>
      Error_Handler();
 8002006:	f7ff fee5 	bl	8001dd4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a3f      	ldr	r2, [pc, #252]	; (800210c <HAL_ADC_MspInit+0x2bc>)
 800200e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002010:	4a3e      	ldr	r2, [pc, #248]	; (800210c <HAL_ADC_MspInit+0x2bc>)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002016:	2200      	movs	r2, #0
 8002018:	2100      	movs	r1, #0
 800201a:	2012      	movs	r0, #18
 800201c:	f002 ff1f 	bl	8004e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002020:	2012      	movs	r0, #18
 8002022:	f002 ff36 	bl	8004e92 <HAL_NVIC_EnableIRQ>
}
 8002026:	e05e      	b.n	80020e6 <HAL_ADC_MspInit+0x296>
  else if(hadc->Instance==ADC3)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a39      	ldr	r2, [pc, #228]	; (8002114 <HAL_ADC_MspInit+0x2c4>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d159      	bne.n	80020e6 <HAL_ADC_MspInit+0x296>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002032:	4b31      	ldr	r3, [pc, #196]	; (80020f8 <HAL_ADC_MspInit+0x2a8>)
 8002034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002038:	4a2f      	ldr	r2, [pc, #188]	; (80020f8 <HAL_ADC_MspInit+0x2a8>)
 800203a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800203e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002042:	4b2d      	ldr	r3, [pc, #180]	; (80020f8 <HAL_ADC_MspInit+0x2a8>)
 8002044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002048:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002050:	4b29      	ldr	r3, [pc, #164]	; (80020f8 <HAL_ADC_MspInit+0x2a8>)
 8002052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002056:	4a28      	ldr	r2, [pc, #160]	; (80020f8 <HAL_ADC_MspInit+0x2a8>)
 8002058:	f043 0304 	orr.w	r3, r3, #4
 800205c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002060:	4b25      	ldr	r3, [pc, #148]	; (80020f8 <HAL_ADC_MspInit+0x2a8>)
 8002062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002066:	f003 0304 	and.w	r3, r3, #4
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800206e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002072:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002076:	f000 fb73 	bl	8002760 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream2;
 800207a:	4b27      	ldr	r3, [pc, #156]	; (8002118 <HAL_ADC_MspInit+0x2c8>)
 800207c:	4a27      	ldr	r2, [pc, #156]	; (800211c <HAL_ADC_MspInit+0x2cc>)
 800207e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002080:	4b25      	ldr	r3, [pc, #148]	; (8002118 <HAL_ADC_MspInit+0x2c8>)
 8002082:	2273      	movs	r2, #115	; 0x73
 8002084:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002086:	4b24      	ldr	r3, [pc, #144]	; (8002118 <HAL_ADC_MspInit+0x2c8>)
 8002088:	2200      	movs	r2, #0
 800208a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800208c:	4b22      	ldr	r3, [pc, #136]	; (8002118 <HAL_ADC_MspInit+0x2c8>)
 800208e:	2200      	movs	r2, #0
 8002090:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002092:	4b21      	ldr	r3, [pc, #132]	; (8002118 <HAL_ADC_MspInit+0x2c8>)
 8002094:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002098:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800209a:	4b1f      	ldr	r3, [pc, #124]	; (8002118 <HAL_ADC_MspInit+0x2c8>)
 800209c:	2200      	movs	r2, #0
 800209e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020a0:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <HAL_ADC_MspInit+0x2c8>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 80020a6:	4b1c      	ldr	r3, [pc, #112]	; (8002118 <HAL_ADC_MspInit+0x2c8>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 80020ac:	4b1a      	ldr	r3, [pc, #104]	; (8002118 <HAL_ADC_MspInit+0x2c8>)
 80020ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020b2:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020b4:	4b18      	ldr	r3, [pc, #96]	; (8002118 <HAL_ADC_MspInit+0x2c8>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80020ba:	4817      	ldr	r0, [pc, #92]	; (8002118 <HAL_ADC_MspInit+0x2c8>)
 80020bc:	f003 f8e2 	bl	8005284 <HAL_DMA_Init>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_ADC_MspInit+0x27a>
      Error_Handler();
 80020c6:	f7ff fe85 	bl	8001dd4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a12      	ldr	r2, [pc, #72]	; (8002118 <HAL_ADC_MspInit+0x2c8>)
 80020ce:	64da      	str	r2, [r3, #76]	; 0x4c
 80020d0:	4a11      	ldr	r2, [pc, #68]	; (8002118 <HAL_ADC_MspInit+0x2c8>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80020d6:	2200      	movs	r2, #0
 80020d8:	2100      	movs	r1, #0
 80020da:	207f      	movs	r0, #127	; 0x7f
 80020dc:	f002 febf 	bl	8004e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80020e0:	207f      	movs	r0, #127	; 0x7f
 80020e2:	f002 fed6 	bl	8004e92 <HAL_NVIC_EnableIRQ>
}
 80020e6:	bf00      	nop
 80020e8:	3738      	adds	r7, #56	; 0x38
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40022000 	.word	0x40022000
 80020f4:	240345dc 	.word	0x240345dc
 80020f8:	58024400 	.word	0x58024400
 80020fc:	58021400 	.word	0x58021400
 8002100:	24000248 	.word	0x24000248
 8002104:	40020010 	.word	0x40020010
 8002108:	40022100 	.word	0x40022100
 800210c:	240002c0 	.word	0x240002c0
 8002110:	40020028 	.word	0x40020028
 8002114:	58026000 	.word	0x58026000
 8002118:	24000338 	.word	0x24000338
 800211c:	40020040 	.word	0x40020040

08002120 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08c      	sub	sp, #48	; 0x30
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002128:	f107 031c 	add.w	r3, r7, #28
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a41      	ldr	r2, [pc, #260]	; (8002244 <HAL_COMP_MspInit+0x124>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d13b      	bne.n	80021ba <HAL_COMP_MspInit+0x9a>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_COMP12_CLK_ENABLED++;
 8002142:	4b41      	ldr	r3, [pc, #260]	; (8002248 <HAL_COMP_MspInit+0x128>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	3301      	adds	r3, #1
 8002148:	4a3f      	ldr	r2, [pc, #252]	; (8002248 <HAL_COMP_MspInit+0x128>)
 800214a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_COMP12_CLK_ENABLED==1){
 800214c:	4b3e      	ldr	r3, [pc, #248]	; (8002248 <HAL_COMP_MspInit+0x128>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d10e      	bne.n	8002172 <HAL_COMP_MspInit+0x52>
      __HAL_RCC_COMP12_CLK_ENABLE();
 8002154:	4b3d      	ldr	r3, [pc, #244]	; (800224c <HAL_COMP_MspInit+0x12c>)
 8002156:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800215a:	4a3c      	ldr	r2, [pc, #240]	; (800224c <HAL_COMP_MspInit+0x12c>)
 800215c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002160:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002164:	4b39      	ldr	r3, [pc, #228]	; (800224c <HAL_COMP_MspInit+0x12c>)
 8002166:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800216a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800216e:	61bb      	str	r3, [r7, #24]
 8002170:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002172:	4b36      	ldr	r3, [pc, #216]	; (800224c <HAL_COMP_MspInit+0x12c>)
 8002174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002178:	4a34      	ldr	r2, [pc, #208]	; (800224c <HAL_COMP_MspInit+0x12c>)
 800217a:	f043 0302 	orr.w	r3, r3, #2
 800217e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002182:	4b32      	ldr	r3, [pc, #200]	; (800224c <HAL_COMP_MspInit+0x12c>)
 8002184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	697b      	ldr	r3, [r7, #20]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002190:	2304      	movs	r3, #4
 8002192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002194:	2303      	movs	r3, #3
 8002196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800219c:	f107 031c 	add.w	r3, r7, #28
 80021a0:	4619      	mov	r1, r3
 80021a2:	482b      	ldr	r0, [pc, #172]	; (8002250 <HAL_COMP_MspInit+0x130>)
 80021a4:	f005 fc64 	bl	8007a70 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 0, 0);
 80021a8:	2200      	movs	r2, #0
 80021aa:	2100      	movs	r1, #0
 80021ac:	2089      	movs	r0, #137	; 0x89
 80021ae:	f002 fe56 	bl	8004e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 80021b2:	2089      	movs	r0, #137	; 0x89
 80021b4:	f002 fe6d 	bl	8004e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 80021b8:	e040      	b.n	800223c <HAL_COMP_MspInit+0x11c>
  else if(hcomp->Instance==COMP2)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a25      	ldr	r2, [pc, #148]	; (8002254 <HAL_COMP_MspInit+0x134>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d13b      	bne.n	800223c <HAL_COMP_MspInit+0x11c>
    HAL_RCC_COMP12_CLK_ENABLED++;
 80021c4:	4b20      	ldr	r3, [pc, #128]	; (8002248 <HAL_COMP_MspInit+0x128>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	3301      	adds	r3, #1
 80021ca:	4a1f      	ldr	r2, [pc, #124]	; (8002248 <HAL_COMP_MspInit+0x128>)
 80021cc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_COMP12_CLK_ENABLED==1){
 80021ce:	4b1e      	ldr	r3, [pc, #120]	; (8002248 <HAL_COMP_MspInit+0x128>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d10e      	bne.n	80021f4 <HAL_COMP_MspInit+0xd4>
      __HAL_RCC_COMP12_CLK_ENABLE();
 80021d6:	4b1d      	ldr	r3, [pc, #116]	; (800224c <HAL_COMP_MspInit+0x12c>)
 80021d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021dc:	4a1b      	ldr	r2, [pc, #108]	; (800224c <HAL_COMP_MspInit+0x12c>)
 80021de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021e2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80021e6:	4b19      	ldr	r3, [pc, #100]	; (800224c <HAL_COMP_MspInit+0x12c>)
 80021e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021f4:	4b15      	ldr	r3, [pc, #84]	; (800224c <HAL_COMP_MspInit+0x12c>)
 80021f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021fa:	4a14      	ldr	r2, [pc, #80]	; (800224c <HAL_COMP_MspInit+0x12c>)
 80021fc:	f043 0310 	orr.w	r3, r3, #16
 8002200:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002204:	4b11      	ldr	r3, [pc, #68]	; (800224c <HAL_COMP_MspInit+0x12c>)
 8002206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800220a:	f003 0310 	and.w	r3, r3, #16
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002212:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002218:	2303      	movs	r3, #3
 800221a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002220:	f107 031c 	add.w	r3, r7, #28
 8002224:	4619      	mov	r1, r3
 8002226:	480c      	ldr	r0, [pc, #48]	; (8002258 <HAL_COMP_MspInit+0x138>)
 8002228:	f005 fc22 	bl	8007a70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(COMP_IRQn, 0, 0);
 800222c:	2200      	movs	r2, #0
 800222e:	2100      	movs	r1, #0
 8002230:	2089      	movs	r0, #137	; 0x89
 8002232:	f002 fe14 	bl	8004e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 8002236:	2089      	movs	r0, #137	; 0x89
 8002238:	f002 fe2b 	bl	8004e92 <HAL_NVIC_EnableIRQ>
}
 800223c:	bf00      	nop
 800223e:	3730      	adds	r7, #48	; 0x30
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	5800380c 	.word	0x5800380c
 8002248:	240345e0 	.word	0x240345e0
 800224c:	58024400 	.word	0x58024400
 8002250:	58020400 	.word	0x58020400
 8002254:	58003810 	.word	0x58003810
 8002258:	58021000 	.word	0x58021000

0800225c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0b      	ldr	r2, [pc, #44]	; (8002298 <HAL_DAC_MspInit+0x3c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d10e      	bne.n	800228c <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800226e:	4b0b      	ldr	r3, [pc, #44]	; (800229c <HAL_DAC_MspInit+0x40>)
 8002270:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002274:	4a09      	ldr	r2, [pc, #36]	; (800229c <HAL_DAC_MspInit+0x40>)
 8002276:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800227a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800227e:	4b07      	ldr	r3, [pc, #28]	; (800229c <HAL_DAC_MspInit+0x40>)
 8002280:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002284:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	40007400 	.word	0x40007400
 800229c:	58024400 	.word	0x58024400

080022a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a0b      	ldr	r2, [pc, #44]	; (80022dc <HAL_TIM_PWM_MspInit+0x3c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d10e      	bne.n	80022d0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022b2:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <HAL_TIM_PWM_MspInit+0x40>)
 80022b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022b8:	4a09      	ldr	r2, [pc, #36]	; (80022e0 <HAL_TIM_PWM_MspInit+0x40>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022c2:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <HAL_TIM_PWM_MspInit+0x40>)
 80022c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80022d0:	bf00      	nop
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	40010000 	.word	0x40010000
 80022e0:	58024400 	.word	0x58024400

080022e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a0e      	ldr	r2, [pc, #56]	; (800232c <HAL_TIM_Base_MspInit+0x48>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d116      	bne.n	8002324 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80022f6:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <HAL_TIM_Base_MspInit+0x4c>)
 80022f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022fc:	4a0c      	ldr	r2, [pc, #48]	; (8002330 <HAL_TIM_Base_MspInit+0x4c>)
 80022fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002302:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002306:	4b0a      	ldr	r3, [pc, #40]	; (8002330 <HAL_TIM_Base_MspInit+0x4c>)
 8002308:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800230c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002314:	2200      	movs	r2, #0
 8002316:	2100      	movs	r1, #0
 8002318:	2075      	movs	r0, #117	; 0x75
 800231a:	f002 fda0 	bl	8004e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800231e:	2075      	movs	r0, #117	; 0x75
 8002320:	f002 fdb7 	bl	8004e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002324:	bf00      	nop
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40014400 	.word	0x40014400
 8002330:	58024400 	.word	0x58024400

08002334 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b0b8      	sub	sp, #224	; 0xe0
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800234c:	f107 0310 	add.w	r3, r7, #16
 8002350:	22bc      	movs	r2, #188	; 0xbc
 8002352:	2100      	movs	r1, #0
 8002354:	4618      	mov	r0, r3
 8002356:	f010 fefb 	bl	8013150 <memset>
  if(huart->Instance==USART3)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a25      	ldr	r2, [pc, #148]	; (80023f4 <HAL_UART_MspInit+0xc0>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d142      	bne.n	80023ea <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002364:	2302      	movs	r3, #2
 8002366:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8002368:	2303      	movs	r3, #3
 800236a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800236e:	f107 0310 	add.w	r3, r7, #16
 8002372:	4618      	mov	r0, r3
 8002374:	f008 f8f2 	bl	800a55c <HAL_RCCEx_PeriphCLKConfig>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800237e:	f7ff fd29 	bl	8001dd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002382:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <HAL_UART_MspInit+0xc4>)
 8002384:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002388:	4a1b      	ldr	r2, [pc, #108]	; (80023f8 <HAL_UART_MspInit+0xc4>)
 800238a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800238e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002392:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <HAL_UART_MspInit+0xc4>)
 8002394:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002398:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023a0:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <HAL_UART_MspInit+0xc4>)
 80023a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023a6:	4a14      	ldr	r2, [pc, #80]	; (80023f8 <HAL_UART_MspInit+0xc4>)
 80023a8:	f043 0308 	orr.w	r3, r3, #8
 80023ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <HAL_UART_MspInit+0xc4>)
 80023b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80023be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c6:	2302      	movs	r3, #2
 80023c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d2:	2300      	movs	r3, #0
 80023d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023d8:	2307      	movs	r3, #7
 80023da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023de:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80023e2:	4619      	mov	r1, r3
 80023e4:	4805      	ldr	r0, [pc, #20]	; (80023fc <HAL_UART_MspInit+0xc8>)
 80023e6:	f005 fb43 	bl	8007a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80023ea:	bf00      	nop
 80023ec:	37e0      	adds	r7, #224	; 0xe0
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40004800 	.word	0x40004800
 80023f8:	58024400 	.word	0x58024400
 80023fc:	58020c00 	.word	0x58020c00

08002400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002404:	e7fe      	b.n	8002404 <NMI_Handler+0x4>
	...

08002408 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800240c:	2201      	movs	r2, #1
 800240e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002412:	4802      	ldr	r0, [pc, #8]	; (800241c <HardFault_Handler+0x14>)
 8002414:	f005 fcdc 	bl	8007dd0 <HAL_GPIO_WritePin>
 8002418:	e7f8      	b.n	800240c <HardFault_Handler+0x4>
 800241a:	bf00      	nop
 800241c:	58020400 	.word	0x58020400

08002420 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002424:	e7fe      	b.n	8002424 <MemManage_Handler+0x4>

08002426 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002426:	b480      	push	{r7}
 8002428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800242a:	e7fe      	b.n	800242a <BusFault_Handler+0x4>

0800242c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002430:	e7fe      	b.n	8002430 <UsageFault_Handler+0x4>

08002432 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002432:	b480      	push	{r7}
 8002434:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800244e:	b480      	push	{r7}
 8002450:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002460:	f000 f90a 	bl	8002678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002464:	bf00      	nop
 8002466:	bd80      	pop	{r7, pc}

08002468 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <DMA1_Stream0_IRQHandler+0x10>)
 800246e:	f003 ffed 	bl	800644c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	24000248 	.word	0x24000248

0800247c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002480:	4802      	ldr	r0, [pc, #8]	; (800248c <DMA1_Stream1_IRQHandler+0x10>)
 8002482:	f003 ffe3 	bl	800644c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	240002c0 	.word	0x240002c0

08002490 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002494:	4802      	ldr	r0, [pc, #8]	; (80024a0 <DMA1_Stream2_IRQHandler+0x10>)
 8002496:	f003 ffd9 	bl	800644c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	24000338 	.word	0x24000338

080024a4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80024a8:	4803      	ldr	r0, [pc, #12]	; (80024b8 <ADC_IRQHandler+0x14>)
 80024aa:	f000 fe8f 	bl	80031cc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80024ae:	4803      	ldr	r0, [pc, #12]	; (80024bc <ADC_IRQHandler+0x18>)
 80024b0:	f000 fe8c 	bl	80031cc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80024b4:	bf00      	nop
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	2400011c 	.word	0x2400011c
 80024bc:	24000180 	.word	0x24000180

080024c0 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80024c4:	4802      	ldr	r0, [pc, #8]	; (80024d0 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 80024c6:	f005 fe3c 	bl	8008142 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	2403511c 	.word	0x2403511c

080024d4 <OTG_FS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 In global interrupt.
  */
void OTG_FS_EP1_IN_IRQHandler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80024d8:	4802      	ldr	r0, [pc, #8]	; (80024e4 <OTG_FS_EP1_IN_IRQHandler+0x10>)
 80024da:	f005 fe32 	bl	8008142 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	2403511c 	.word	0x2403511c

080024e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80024ec:	4802      	ldr	r0, [pc, #8]	; (80024f8 <OTG_FS_IRQHandler+0x10>)
 80024ee:	f005 fe28 	bl	8008142 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	2403511c 	.word	0x2403511c

080024fc <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002500:	4802      	ldr	r0, [pc, #8]	; (800250c <TIM16_IRQHandler+0x10>)
 8002502:	f00a fc83 	bl	800ce0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	24000468 	.word	0x24000468

08002510 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8002514:	4802      	ldr	r0, [pc, #8]	; (8002520 <ADC3_IRQHandler+0x10>)
 8002516:	f000 fe59 	bl	80031cc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	240001e4 	.word	0x240001e4

08002524 <COMP1_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8002528:	4803      	ldr	r0, [pc, #12]	; (8002538 <COMP1_IRQHandler+0x14>)
 800252a:	f002 fb25 	bl	8004b78 <HAL_COMP_IRQHandler>
  HAL_COMP_IRQHandler(&hcomp2);
 800252e:	4803      	ldr	r0, [pc, #12]	; (800253c <COMP1_IRQHandler+0x18>)
 8002530:	f002 fb22 	bl	8004b78 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 8002534:	bf00      	nop
 8002536:	bd80      	pop	{r7, pc}
 8002538:	240003b0 	.word	0x240003b0
 800253c:	240003dc 	.word	0x240003dc

08002540 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002578 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002544:	f7fe f84a 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002548:	480c      	ldr	r0, [pc, #48]	; (800257c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800254a:	490d      	ldr	r1, [pc, #52]	; (8002580 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800254c:	4a0d      	ldr	r2, [pc, #52]	; (8002584 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800254e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002550:	e002      	b.n	8002558 <LoopCopyDataInit>

08002552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002556:	3304      	adds	r3, #4

08002558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800255a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800255c:	d3f9      	bcc.n	8002552 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800255e:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002560:	4c0a      	ldr	r4, [pc, #40]	; (800258c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002564:	e001      	b.n	800256a <LoopFillZerobss>

08002566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002568:	3204      	adds	r2, #4

0800256a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800256a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800256c:	d3fb      	bcc.n	8002566 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800256e:	f010 fdbd 	bl	80130ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002572:	f7fe f8c9 	bl	8000708 <main>
  bx  lr
 8002576:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002578:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800257c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002580:	24000100 	.word	0x24000100
  ldr r2, =_sidata
 8002584:	08013210 	.word	0x08013210
  ldr r2, =_sbss
 8002588:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 800258c:	24035848 	.word	0x24035848

08002590 <BDMA_Channel0_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002590:	e7fe      	b.n	8002590 <BDMA_Channel0_IRQHandler>
	...

08002594 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800259a:	2003      	movs	r0, #3
 800259c:	f002 fc54 	bl	8004e48 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80025a0:	f007 fe06 	bl	800a1b0 <HAL_RCC_GetSysClockFreq>
 80025a4:	4602      	mov	r2, r0
 80025a6:	4b15      	ldr	r3, [pc, #84]	; (80025fc <HAL_Init+0x68>)
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	0a1b      	lsrs	r3, r3, #8
 80025ac:	f003 030f 	and.w	r3, r3, #15
 80025b0:	4913      	ldr	r1, [pc, #76]	; (8002600 <HAL_Init+0x6c>)
 80025b2:	5ccb      	ldrb	r3, [r1, r3]
 80025b4:	f003 031f 	and.w	r3, r3, #31
 80025b8:	fa22 f303 	lsr.w	r3, r2, r3
 80025bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025be:	4b0f      	ldr	r3, [pc, #60]	; (80025fc <HAL_Init+0x68>)
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	4a0e      	ldr	r2, [pc, #56]	; (8002600 <HAL_Init+0x6c>)
 80025c8:	5cd3      	ldrb	r3, [r2, r3]
 80025ca:	f003 031f 	and.w	r3, r3, #31
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	fa22 f303 	lsr.w	r3, r2, r3
 80025d4:	4a0b      	ldr	r2, [pc, #44]	; (8002604 <HAL_Init+0x70>)
 80025d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025d8:	4a0b      	ldr	r2, [pc, #44]	; (8002608 <HAL_Init+0x74>)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025de:	2000      	movs	r0, #0
 80025e0:	f000 f814 	bl	800260c <HAL_InitTick>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e002      	b.n	80025f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80025ee:	f7ff fc03 	bl	8001df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	58024400 	.word	0x58024400
 8002600:	080131c0 	.word	0x080131c0
 8002604:	24000004 	.word	0x24000004
 8002608:	24000000 	.word	0x24000000

0800260c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002614:	4b15      	ldr	r3, [pc, #84]	; (800266c <HAL_InitTick+0x60>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e021      	b.n	8002664 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002620:	4b13      	ldr	r3, [pc, #76]	; (8002670 <HAL_InitTick+0x64>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4b11      	ldr	r3, [pc, #68]	; (800266c <HAL_InitTick+0x60>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	4619      	mov	r1, r3
 800262a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800262e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002632:	fbb2 f3f3 	udiv	r3, r2, r3
 8002636:	4618      	mov	r0, r3
 8002638:	f002 fc39 	bl	8004eae <HAL_SYSTICK_Config>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e00e      	b.n	8002664 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b0f      	cmp	r3, #15
 800264a:	d80a      	bhi.n	8002662 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800264c:	2200      	movs	r2, #0
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	f04f 30ff 	mov.w	r0, #4294967295
 8002654:	f002 fc03 	bl	8004e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002658:	4a06      	ldr	r2, [pc, #24]	; (8002674 <HAL_InitTick+0x68>)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800265e:	2300      	movs	r3, #0
 8002660:	e000      	b.n	8002664 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
}
 8002664:	4618      	mov	r0, r3
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	2400000c 	.word	0x2400000c
 8002670:	24000000 	.word	0x24000000
 8002674:	24000008 	.word	0x24000008

08002678 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800267c:	4b06      	ldr	r3, [pc, #24]	; (8002698 <HAL_IncTick+0x20>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	461a      	mov	r2, r3
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_IncTick+0x24>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4413      	add	r3, r2
 8002688:	4a04      	ldr	r2, [pc, #16]	; (800269c <HAL_IncTick+0x24>)
 800268a:	6013      	str	r3, [r2, #0]
}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	2400000c 	.word	0x2400000c
 800269c:	240345e4 	.word	0x240345e4

080026a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  return uwTick;
 80026a4:	4b03      	ldr	r3, [pc, #12]	; (80026b4 <HAL_GetTick+0x14>)
 80026a6:	681b      	ldr	r3, [r3, #0]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	240345e4 	.word	0x240345e4

080026b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026c0:	f7ff ffee 	bl	80026a0 <HAL_GetTick>
 80026c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d0:	d005      	beq.n	80026de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026d2:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <HAL_Delay+0x44>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	461a      	mov	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4413      	add	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026de:	bf00      	nop
 80026e0:	f7ff ffde 	bl	80026a0 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d8f7      	bhi.n	80026e0 <HAL_Delay+0x28>
  {
  }
}
 80026f0:	bf00      	nop
 80026f2:	bf00      	nop
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	2400000c 	.word	0x2400000c

08002700 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002704:	4b03      	ldr	r3, [pc, #12]	; (8002714 <HAL_GetREVID+0x14>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	0c1b      	lsrs	r3, r3, #16
}
 800270a:	4618      	mov	r0, r3
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	5c001000 	.word	0x5c001000

08002718 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f023 0202 	bic.w	r2, r3, #2
 8002728:	4904      	ldr	r1, [pc, #16]	; (800273c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4313      	orrs	r3, r2
 800272e:	600b      	str	r3, [r1, #0]
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	58003c00 	.word	0x58003c00

08002740 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8002744:	4b05      	ldr	r3, [pc, #20]	; (800275c <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a04      	ldr	r2, [pc, #16]	; (800275c <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 800274a:	f023 0301 	bic.w	r3, r3, #1
 800274e:	6013      	str	r3, [r2, #0]
}
 8002750:	bf00      	nop
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	58003c00 	.word	0x58003c00

08002760 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800276a:	4b07      	ldr	r3, [pc, #28]	; (8002788 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	43db      	mvns	r3, r3
 8002772:	401a      	ands	r2, r3
 8002774:	4904      	ldr	r1, [pc, #16]	; (8002788 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	4313      	orrs	r3, r2
 800277a:	604b      	str	r3, [r1, #4]
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	58000400 	.word	0x58000400

0800278c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	431a      	orrs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	609a      	str	r2, [r3, #8]
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
 80027ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	609a      	str	r2, [r3, #8]
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b087      	sub	sp, #28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
 8002800:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	3360      	adds	r3, #96	; 0x60
 8002806:	461a      	mov	r2, r3
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	430b      	orrs	r3, r1
 8002822:	431a      	orrs	r2, r3
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002828:	bf00      	nop
 800282a:	371c      	adds	r7, #28
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	f003 031f 	and.w	r3, r3, #31
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	fa01 f303 	lsl.w	r3, r1, r3
 8002854:	431a      	orrs	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	611a      	str	r2, [r3, #16]
}
 800285a:	bf00      	nop
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002866:	b480      	push	{r7}
 8002868:	b087      	sub	sp, #28
 800286a:	af00      	add	r7, sp, #0
 800286c:	60f8      	str	r0, [r7, #12]
 800286e:	60b9      	str	r1, [r7, #8]
 8002870:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	3360      	adds	r3, #96	; 0x60
 8002876:	461a      	mov	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	431a      	orrs	r2, r3
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	601a      	str	r2, [r3, #0]
  }
}
 8002890:	bf00      	nop
 8002892:	371c      	adds	r7, #28
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80028b0:	2301      	movs	r3, #1
 80028b2:	e000      	b.n	80028b6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b087      	sub	sp, #28
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	60f8      	str	r0, [r7, #12]
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	3330      	adds	r3, #48	; 0x30
 80028d2:	461a      	mov	r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	0a1b      	lsrs	r3, r3, #8
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	f003 030c 	and.w	r3, r3, #12
 80028de:	4413      	add	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	f003 031f 	and.w	r3, r3, #31
 80028ec:	211f      	movs	r1, #31
 80028ee:	fa01 f303 	lsl.w	r3, r1, r3
 80028f2:	43db      	mvns	r3, r3
 80028f4:	401a      	ands	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	0e9b      	lsrs	r3, r3, #26
 80028fa:	f003 011f 	and.w	r1, r3, #31
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	f003 031f 	and.w	r3, r3, #31
 8002904:	fa01 f303 	lsl.w	r3, r1, r3
 8002908:	431a      	orrs	r2, r3
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800290e:	bf00      	nop
 8002910:	371c      	adds	r7, #28
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
 8002922:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f023 0203 	bic.w	r2, r3, #3
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	60da      	str	r2, [r3, #12]
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002954:	2301      	movs	r3, #1
 8002956:	e000      	b.n	800295a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002966:	b480      	push	{r7}
 8002968:	b087      	sub	sp, #28
 800296a:	af00      	add	r7, sp, #0
 800296c:	60f8      	str	r0, [r7, #12]
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	3314      	adds	r3, #20
 8002976:	461a      	mov	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	0e5b      	lsrs	r3, r3, #25
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	f003 0304 	and.w	r3, r3, #4
 8002982:	4413      	add	r3, r2
 8002984:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	0d1b      	lsrs	r3, r3, #20
 800298e:	f003 031f 	and.w	r3, r3, #31
 8002992:	2107      	movs	r1, #7
 8002994:	fa01 f303 	lsl.w	r3, r1, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	401a      	ands	r2, r3
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	0d1b      	lsrs	r3, r3, #20
 80029a0:	f003 031f 	and.w	r3, r3, #31
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	fa01 f303 	lsl.w	r3, r1, r3
 80029aa:	431a      	orrs	r2, r3
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80029b0:	bf00      	nop
 80029b2:	371c      	adds	r7, #28
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029d4:	43db      	mvns	r3, r3
 80029d6:	401a      	ands	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f003 0318 	and.w	r3, r3, #24
 80029de:	4908      	ldr	r1, [pc, #32]	; (8002a00 <LL_ADC_SetChannelSingleDiff+0x44>)
 80029e0:	40d9      	lsrs	r1, r3
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	400b      	ands	r3, r1
 80029e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029ea:	431a      	orrs	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80029f2:	bf00      	nop
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	000fffff 	.word	0x000fffff

08002a04 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 031f 	and.w	r3, r3, #31
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <LL_ADC_DisableDeepPowerDown+0x20>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6093      	str	r3, [r2, #8]
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	5fffffc0 	.word	0x5fffffc0

08002a60 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a74:	d101      	bne.n	8002a7a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a76:	2301      	movs	r3, #1
 8002a78:	e000      	b.n	8002a7c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	4b05      	ldr	r3, [pc, #20]	; (8002aac <LL_ADC_EnableInternalRegulator+0x24>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	6fffffc0 	.word	0x6fffffc0

08002ab0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ac4:	d101      	bne.n	8002aca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	4b05      	ldr	r3, [pc, #20]	; (8002afc <LL_ADC_Enable+0x24>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	f043 0201 	orr.w	r2, r3, #1
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	7fffffc0 	.word	0x7fffffc0

08002b00 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <LL_ADC_Disable+0x24>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	f043 0202 	orr.w	r2, r3, #2
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	7fffffc0 	.word	0x7fffffc0

08002b28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d101      	bne.n	8002b40 <LL_ADC_IsEnabled+0x18>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e000      	b.n	8002b42 <LL_ADC_IsEnabled+0x1a>
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d101      	bne.n	8002b66 <LL_ADC_IsDisableOngoing+0x18>
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <LL_ADC_IsDisableOngoing+0x1a>
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <LL_ADC_REG_StartConversion+0x24>)
 8002b82:	4013      	ands	r3, r2
 8002b84:	f043 0204 	orr.w	r2, r3, #4
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	7fffffc0 	.word	0x7fffffc0

08002b9c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <LL_ADC_REG_StopConversion+0x24>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	f043 0210 	orr.w	r2, r3, #16
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	7fffffc0 	.word	0x7fffffc0

08002bc4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d101      	bne.n	8002bdc <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e000      	b.n	8002bde <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
	...

08002bec <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <LL_ADC_INJ_StopConversion+0x24>)
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	f043 0220 	orr.w	r2, r3, #32
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	7fffffc0 	.word	0x7fffffc0

08002c14 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d101      	bne.n	8002c2c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e000      	b.n	8002c2e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
	...

08002c3c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c3c:	b590      	push	{r4, r7, lr}
 8002c3e:	b089      	sub	sp, #36	; 0x24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c44:	2300      	movs	r3, #0
 8002c46:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e18f      	b.n	8002f76 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d109      	bne.n	8002c78 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7ff f8f3 	bl	8001e50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff feef 	bl	8002a60 <LL_ADC_IsDeepPowerDownEnabled>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d004      	beq.n	8002c92 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff fed5 	bl	8002a3c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff ff0a 	bl	8002ab0 <LL_ADC_IsInternalRegulatorEnabled>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d114      	bne.n	8002ccc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff feee 	bl	8002a88 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cac:	4b87      	ldr	r3, [pc, #540]	; (8002ecc <HAL_ADC_Init+0x290>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	099b      	lsrs	r3, r3, #6
 8002cb2:	4a87      	ldr	r2, [pc, #540]	; (8002ed0 <HAL_ADC_Init+0x294>)
 8002cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb8:	099b      	lsrs	r3, r3, #6
 8002cba:	3301      	adds	r3, #1
 8002cbc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002cbe:	e002      	b.n	8002cc6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1f9      	bne.n	8002cc0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff feed 	bl	8002ab0 <LL_ADC_IsInternalRegulatorEnabled>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10d      	bne.n	8002cf8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce0:	f043 0210 	orr.w	r2, r3, #16
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cec:	f043 0201 	orr.w	r2, r3, #1
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff ff61 	bl	8002bc4 <LL_ADC_REG_IsConversionOngoing>
 8002d02:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d08:	f003 0310 	and.w	r3, r3, #16
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f040 8129 	bne.w	8002f64 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f040 8125 	bne.w	8002f64 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d22:	f043 0202 	orr.w	r2, r3, #2
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff fefa 	bl	8002b28 <LL_ADC_IsEnabled>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d136      	bne.n	8002da8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a65      	ldr	r2, [pc, #404]	; (8002ed4 <HAL_ADC_Init+0x298>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d004      	beq.n	8002d4e <HAL_ADC_Init+0x112>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a63      	ldr	r2, [pc, #396]	; (8002ed8 <HAL_ADC_Init+0x29c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d10e      	bne.n	8002d6c <HAL_ADC_Init+0x130>
 8002d4e:	4861      	ldr	r0, [pc, #388]	; (8002ed4 <HAL_ADC_Init+0x298>)
 8002d50:	f7ff feea 	bl	8002b28 <LL_ADC_IsEnabled>
 8002d54:	4604      	mov	r4, r0
 8002d56:	4860      	ldr	r0, [pc, #384]	; (8002ed8 <HAL_ADC_Init+0x29c>)
 8002d58:	f7ff fee6 	bl	8002b28 <LL_ADC_IsEnabled>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	4323      	orrs	r3, r4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	bf0c      	ite	eq
 8002d64:	2301      	moveq	r3, #1
 8002d66:	2300      	movne	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	e008      	b.n	8002d7e <HAL_ADC_Init+0x142>
 8002d6c:	485b      	ldr	r0, [pc, #364]	; (8002edc <HAL_ADC_Init+0x2a0>)
 8002d6e:	f7ff fedb 	bl	8002b28 <LL_ADC_IsEnabled>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	bf0c      	ite	eq
 8002d78:	2301      	moveq	r3, #1
 8002d7a:	2300      	movne	r3, #0
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d012      	beq.n	8002da8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a53      	ldr	r2, [pc, #332]	; (8002ed4 <HAL_ADC_Init+0x298>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d004      	beq.n	8002d96 <HAL_ADC_Init+0x15a>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a51      	ldr	r2, [pc, #324]	; (8002ed8 <HAL_ADC_Init+0x29c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d101      	bne.n	8002d9a <HAL_ADC_Init+0x15e>
 8002d96:	4a52      	ldr	r2, [pc, #328]	; (8002ee0 <HAL_ADC_Init+0x2a4>)
 8002d98:	e000      	b.n	8002d9c <HAL_ADC_Init+0x160>
 8002d9a:	4a52      	ldr	r2, [pc, #328]	; (8002ee4 <HAL_ADC_Init+0x2a8>)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	4619      	mov	r1, r3
 8002da2:	4610      	mov	r0, r2
 8002da4:	f7ff fcf2 	bl	800278c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002da8:	f7ff fcaa 	bl	8002700 <HAL_GetREVID>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f241 0203 	movw	r2, #4099	; 0x1003
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d914      	bls.n	8002de0 <HAL_ADC_Init+0x1a4>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	2b10      	cmp	r3, #16
 8002dbc:	d110      	bne.n	8002de0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	7d5b      	ldrb	r3, [r3, #21]
 8002dc2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002dc8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002dce:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	7f1b      	ldrb	r3, [r3, #28]
 8002dd4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002dd6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002dd8:	f043 030c 	orr.w	r3, r3, #12
 8002ddc:	61bb      	str	r3, [r7, #24]
 8002dde:	e00d      	b.n	8002dfc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	7d5b      	ldrb	r3, [r3, #21]
 8002de4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002dea:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002df0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	7f1b      	ldrb	r3, [r3, #28]
 8002df6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	7f1b      	ldrb	r3, [r3, #28]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d106      	bne.n	8002e12 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	045b      	lsls	r3, r3, #17
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d009      	beq.n	8002e2e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e26:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68da      	ldr	r2, [r3, #12]
 8002e34:	4b2c      	ldr	r3, [pc, #176]	; (8002ee8 <HAL_ADC_Init+0x2ac>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6812      	ldr	r2, [r2, #0]
 8002e3c:	69b9      	ldr	r1, [r7, #24]
 8002e3e:	430b      	orrs	r3, r1
 8002e40:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff febc 	bl	8002bc4 <LL_ADC_REG_IsConversionOngoing>
 8002e4c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff fede 	bl	8002c14 <LL_ADC_INJ_IsConversionOngoing>
 8002e58:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d15f      	bne.n	8002f20 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d15c      	bne.n	8002f20 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	7d1b      	ldrb	r3, [r3, #20]
 8002e6a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	4b1c      	ldr	r3, [pc, #112]	; (8002eec <HAL_ADC_Init+0x2b0>)
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6812      	ldr	r2, [r2, #0]
 8002e82:	69b9      	ldr	r1, [r7, #24]
 8002e84:	430b      	orrs	r3, r1
 8002e86:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d130      	bne.n	8002ef4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	691a      	ldr	r2, [r3, #16]
 8002e9e:	4b14      	ldr	r3, [pc, #80]	; (8002ef0 <HAL_ADC_Init+0x2b4>)
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ea6:	3a01      	subs	r2, #1
 8002ea8:	0411      	lsls	r1, r2, #16
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002eae:	4311      	orrs	r1, r2
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002eb4:	4311      	orrs	r1, r2
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0201 	orr.w	r2, r2, #1
 8002ec6:	611a      	str	r2, [r3, #16]
 8002ec8:	e01c      	b.n	8002f04 <HAL_ADC_Init+0x2c8>
 8002eca:	bf00      	nop
 8002ecc:	24000000 	.word	0x24000000
 8002ed0:	053e2d63 	.word	0x053e2d63
 8002ed4:	40022000 	.word	0x40022000
 8002ed8:	40022100 	.word	0x40022100
 8002edc:	58026000 	.word	0x58026000
 8002ee0:	40022300 	.word	0x40022300
 8002ee4:	58026300 	.word	0x58026300
 8002ee8:	fff0c003 	.word	0xfff0c003
 8002eec:	ffffbffc 	.word	0xffffbffc
 8002ef0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691a      	ldr	r2, [r3, #16]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0201 	bic.w	r2, r2, #1
 8002f02:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f001 f92e 	bl	800417c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d10c      	bne.n	8002f42 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	f023 010f 	bic.w	r1, r3, #15
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	1e5a      	subs	r2, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	631a      	str	r2, [r3, #48]	; 0x30
 8002f40:	e007      	b.n	8002f52 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 020f 	bic.w	r2, r2, #15
 8002f50:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f56:	f023 0303 	bic.w	r3, r3, #3
 8002f5a:	f043 0201 	orr.w	r2, r3, #1
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	655a      	str	r2, [r3, #84]	; 0x54
 8002f62:	e007      	b.n	8002f74 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f68:	f043 0210 	orr.w	r2, r3, #16
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f74:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3724      	adds	r7, #36	; 0x24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd90      	pop	{r4, r7, pc}
 8002f7e:	bf00      	nop

08002f80 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a55      	ldr	r2, [pc, #340]	; (80030e8 <HAL_ADC_Start_DMA+0x168>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d004      	beq.n	8002fa0 <HAL_ADC_Start_DMA+0x20>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a54      	ldr	r2, [pc, #336]	; (80030ec <HAL_ADC_Start_DMA+0x16c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d101      	bne.n	8002fa4 <HAL_ADC_Start_DMA+0x24>
 8002fa0:	4b53      	ldr	r3, [pc, #332]	; (80030f0 <HAL_ADC_Start_DMA+0x170>)
 8002fa2:	e000      	b.n	8002fa6 <HAL_ADC_Start_DMA+0x26>
 8002fa4:	4b53      	ldr	r3, [pc, #332]	; (80030f4 <HAL_ADC_Start_DMA+0x174>)
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff fd2c 	bl	8002a04 <LL_ADC_GetMultimode>
 8002fac:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff fe06 	bl	8002bc4 <LL_ADC_REG_IsConversionOngoing>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f040 808c 	bne.w	80030d8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <HAL_ADC_Start_DMA+0x4e>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e087      	b.n	80030de <HAL_ADC_Start_DMA+0x15e>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	2b05      	cmp	r3, #5
 8002fe0:	d002      	beq.n	8002fe8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	2b09      	cmp	r3, #9
 8002fe6:	d170      	bne.n	80030ca <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 ff49 	bl	8003e80 <ADC_Enable>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002ff2:	7dfb      	ldrb	r3, [r7, #23]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d163      	bne.n	80030c0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ffc:	4b3e      	ldr	r3, [pc, #248]	; (80030f8 <HAL_ADC_Start_DMA+0x178>)
 8002ffe:	4013      	ands	r3, r2
 8003000:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a37      	ldr	r2, [pc, #220]	; (80030ec <HAL_ADC_Start_DMA+0x16c>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d002      	beq.n	8003018 <HAL_ADC_Start_DMA+0x98>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	e000      	b.n	800301a <HAL_ADC_Start_DMA+0x9a>
 8003018:	4b33      	ldr	r3, [pc, #204]	; (80030e8 <HAL_ADC_Start_DMA+0x168>)
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	6812      	ldr	r2, [r2, #0]
 800301e:	4293      	cmp	r3, r2
 8003020:	d002      	beq.n	8003028 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d105      	bne.n	8003034 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003038:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d006      	beq.n	800304e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003044:	f023 0206 	bic.w	r2, r3, #6
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	659a      	str	r2, [r3, #88]	; 0x58
 800304c:	e002      	b.n	8003054 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003058:	4a28      	ldr	r2, [pc, #160]	; (80030fc <HAL_ADC_Start_DMA+0x17c>)
 800305a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003060:	4a27      	ldr	r2, [pc, #156]	; (8003100 <HAL_ADC_Start_DMA+0x180>)
 8003062:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003068:	4a26      	ldr	r2, [pc, #152]	; (8003104 <HAL_ADC_Start_DMA+0x184>)
 800306a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	221c      	movs	r2, #28
 8003072:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0210 	orr.w	r2, r2, #16
 800308a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003094:	4619      	mov	r1, r3
 8003096:	4610      	mov	r0, r2
 8003098:	f7ff fc3f 	bl	800291a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	3340      	adds	r3, #64	; 0x40
 80030a6:	4619      	mov	r1, r3
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f002 fc46 	bl	800593c <HAL_DMA_Start_IT>
 80030b0:	4603      	mov	r3, r0
 80030b2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff fd5b 	bl	8002b74 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80030be:	e00d      	b.n	80030dc <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80030c8:	e008      	b.n	80030dc <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80030d6:	e001      	b.n	80030dc <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80030d8:	2302      	movs	r3, #2
 80030da:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80030dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3718      	adds	r7, #24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40022000 	.word	0x40022000
 80030ec:	40022100 	.word	0x40022100
 80030f0:	40022300 	.word	0x40022300
 80030f4:	58026300 	.word	0x58026300
 80030f8:	fffff0fe 	.word	0xfffff0fe
 80030fc:	08004053 	.word	0x08004053
 8003100:	0800412b 	.word	0x0800412b
 8003104:	08004147 	.word	0x08004147

08003108 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_ADC_Stop_DMA+0x16>
 800311a:	2302      	movs	r3, #2
 800311c:	e04f      	b.n	80031be <HAL_ADC_Stop_DMA+0xb6>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003126:	2103      	movs	r1, #3
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 fded 	bl	8003d08 <ADC_ConversionStop>
 800312e:	4603      	mov	r3, r0
 8003130:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003132:	7bfb      	ldrb	r3, [r7, #15]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d13d      	bne.n	80031b4 <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68da      	ldr	r2, [r3, #12]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0203 	bic.w	r2, r2, #3
 8003146:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800314c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d10f      	bne.n	8003176 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800315a:	4618      	mov	r0, r3
 800315c:	f002 fe58 	bl	8005e10 <HAL_DMA_Abort>
 8003160:	4603      	mov	r3, r0
 8003162:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003164:	7bfb      	ldrb	r3, [r7, #15]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d005      	beq.n	8003176 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0210 	bic.w	r2, r2, #16
 8003184:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8003186:	7bfb      	ldrb	r3, [r7, #15]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d105      	bne.n	8003198 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 ff01 	bl	8003f94 <ADC_Disable>
 8003192:	4603      	mov	r3, r0
 8003194:	73fb      	strb	r3, [r7, #15]
 8003196:	e002      	b.n	800319e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 fefb 	bl	8003f94 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800319e:	7bfb      	ldrb	r3, [r7, #15]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d107      	bne.n	80031b4 <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031a8:	4b07      	ldr	r3, [pc, #28]	; (80031c8 <HAL_ADC_Stop_DMA+0xc0>)
 80031aa:	4013      	ands	r3, r2
 80031ac:	f043 0201 	orr.w	r2, r3, #1
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	ffffeefe 	.word	0xffffeefe

080031cc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b08a      	sub	sp, #40	; 0x28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80031d4:	2300      	movs	r3, #0
 80031d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a87      	ldr	r2, [pc, #540]	; (800340c <HAL_ADC_IRQHandler+0x240>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d004      	beq.n	80031fc <HAL_ADC_IRQHandler+0x30>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a86      	ldr	r2, [pc, #536]	; (8003410 <HAL_ADC_IRQHandler+0x244>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d101      	bne.n	8003200 <HAL_ADC_IRQHandler+0x34>
 80031fc:	4b85      	ldr	r3, [pc, #532]	; (8003414 <HAL_ADC_IRQHandler+0x248>)
 80031fe:	e000      	b.n	8003202 <HAL_ADC_IRQHandler+0x36>
 8003200:	4b85      	ldr	r3, [pc, #532]	; (8003418 <HAL_ADC_IRQHandler+0x24c>)
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff fbfe 	bl	8002a04 <LL_ADC_GetMultimode>
 8003208:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d017      	beq.n	8003244 <HAL_ADC_IRQHandler+0x78>
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d012      	beq.n	8003244 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003222:	f003 0310 	and.w	r3, r3, #16
 8003226:	2b00      	cmp	r3, #0
 8003228:	d105      	bne.n	8003236 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f001 f990 	bl	800455c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2202      	movs	r2, #2
 8003242:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	2b00      	cmp	r3, #0
 800324c:	d004      	beq.n	8003258 <HAL_ADC_IRQHandler+0x8c>
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10a      	bne.n	800326e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 8083 	beq.w	800336a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	d07d      	beq.n	800336a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003272:	f003 0310 	and.w	r3, r3, #16
 8003276:	2b00      	cmp	r3, #0
 8003278:	d105      	bne.n	8003286 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff fb06 	bl	800289c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d062      	beq.n	800335c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a5d      	ldr	r2, [pc, #372]	; (8003410 <HAL_ADC_IRQHandler+0x244>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d002      	beq.n	80032a6 <HAL_ADC_IRQHandler+0xda>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	e000      	b.n	80032a8 <HAL_ADC_IRQHandler+0xdc>
 80032a6:	4b59      	ldr	r3, [pc, #356]	; (800340c <HAL_ADC_IRQHandler+0x240>)
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6812      	ldr	r2, [r2, #0]
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d008      	beq.n	80032c2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d005      	beq.n	80032c2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2b05      	cmp	r3, #5
 80032ba:	d002      	beq.n	80032c2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2b09      	cmp	r3, #9
 80032c0:	d104      	bne.n	80032cc <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	623b      	str	r3, [r7, #32]
 80032ca:	e00c      	b.n	80032e6 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a4f      	ldr	r2, [pc, #316]	; (8003410 <HAL_ADC_IRQHandler+0x244>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d002      	beq.n	80032dc <HAL_ADC_IRQHandler+0x110>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	e000      	b.n	80032de <HAL_ADC_IRQHandler+0x112>
 80032dc:	4b4b      	ldr	r3, [pc, #300]	; (800340c <HAL_ADC_IRQHandler+0x240>)
 80032de:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80032e6:	6a3b      	ldr	r3, [r7, #32]
 80032e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d135      	bne.n	800335c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d12e      	bne.n	800335c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff fc5e 	bl	8002bc4 <LL_ADC_REG_IsConversionOngoing>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d11a      	bne.n	8003344 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 020c 	bic.w	r2, r2, #12
 800331c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003322:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d112      	bne.n	800335c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333a:	f043 0201 	orr.w	r2, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	655a      	str	r2, [r3, #84]	; 0x54
 8003342:	e00b      	b.n	800335c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003348:	f043 0210 	orr.w	r2, r3, #16
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003354:	f043 0201 	orr.w	r2, r3, #1
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7fe f97d 	bl	800165c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	220c      	movs	r2, #12
 8003368:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	f003 0320 	and.w	r3, r3, #32
 8003370:	2b00      	cmp	r3, #0
 8003372:	d004      	beq.n	800337e <HAL_ADC_IRQHandler+0x1b2>
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	f003 0320 	and.w	r3, r3, #32
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10b      	bne.n	8003396 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 80a0 	beq.w	80034ca <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 809a 	beq.w	80034ca <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339a:	f003 0310 	and.w	r3, r3, #16
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d105      	bne.n	80033ae <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff fac4 	bl	8002940 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80033b8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff fa6c 	bl	800289c <LL_ADC_REG_IsTriggerSourceSWStart>
 80033c4:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a11      	ldr	r2, [pc, #68]	; (8003410 <HAL_ADC_IRQHandler+0x244>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d002      	beq.n	80033d6 <HAL_ADC_IRQHandler+0x20a>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	e000      	b.n	80033d8 <HAL_ADC_IRQHandler+0x20c>
 80033d6:	4b0d      	ldr	r3, [pc, #52]	; (800340c <HAL_ADC_IRQHandler+0x240>)
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6812      	ldr	r2, [r2, #0]
 80033dc:	4293      	cmp	r3, r2
 80033de:	d008      	beq.n	80033f2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d005      	beq.n	80033f2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	2b06      	cmp	r3, #6
 80033ea:	d002      	beq.n	80033f2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2b07      	cmp	r3, #7
 80033f0:	d104      	bne.n	80033fc <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	623b      	str	r3, [r7, #32]
 80033fa:	e014      	b.n	8003426 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a03      	ldr	r2, [pc, #12]	; (8003410 <HAL_ADC_IRQHandler+0x244>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d00a      	beq.n	800341c <HAL_ADC_IRQHandler+0x250>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	e008      	b.n	800341e <HAL_ADC_IRQHandler+0x252>
 800340c:	40022000 	.word	0x40022000
 8003410:	40022100 	.word	0x40022100
 8003414:	40022300 	.word	0x40022300
 8003418:	58026300 	.word	0x58026300
 800341c:	4b84      	ldr	r3, [pc, #528]	; (8003630 <HAL_ADC_IRQHandler+0x464>)
 800341e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d047      	beq.n	80034bc <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d007      	beq.n	8003446 <HAL_ADC_IRQHandler+0x27a>
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d03f      	beq.n	80034bc <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003442:	2b00      	cmp	r3, #0
 8003444:	d13a      	bne.n	80034bc <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003450:	2b40      	cmp	r3, #64	; 0x40
 8003452:	d133      	bne.n	80034bc <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003454:	6a3b      	ldr	r3, [r7, #32]
 8003456:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d12e      	bne.n	80034bc <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff fbd6 	bl	8002c14 <LL_ADC_INJ_IsConversionOngoing>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d11a      	bne.n	80034a4 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800347c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003482:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003492:	2b00      	cmp	r3, #0
 8003494:	d112      	bne.n	80034bc <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349a:	f043 0201 	orr.w	r2, r3, #1
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	655a      	str	r2, [r3, #84]	; 0x54
 80034a2:	e00b      	b.n	80034bc <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a8:	f043 0210 	orr.w	r2, r3, #16
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b4:	f043 0201 	orr.w	r2, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f001 f825 	bl	800450c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2260      	movs	r2, #96	; 0x60
 80034c8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d011      	beq.n	80034f8 <HAL_ADC_IRQHandler+0x32c>
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00c      	beq.n	80034f8 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f8a8 	bl	8003640 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2280      	movs	r2, #128	; 0x80
 80034f6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d012      	beq.n	8003528 <HAL_ADC_IRQHandler+0x35c>
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00d      	beq.n	8003528 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003510:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f001 f80b 	bl	8004534 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003526:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800352e:	2b00      	cmp	r3, #0
 8003530:	d012      	beq.n	8003558 <HAL_ADC_IRQHandler+0x38c>
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00d      	beq.n	8003558 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003540:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 fffd 	bl	8004548 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003556:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	f003 0310 	and.w	r3, r3, #16
 800355e:	2b00      	cmp	r3, #0
 8003560:	d043      	beq.n	80035ea <HAL_ADC_IRQHandler+0x41e>
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	f003 0310 	and.w	r3, r3, #16
 8003568:	2b00      	cmp	r3, #0
 800356a:	d03e      	beq.n	80035ea <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003570:	2b00      	cmp	r3, #0
 8003572:	d102      	bne.n	800357a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003574:	2301      	movs	r3, #1
 8003576:	627b      	str	r3, [r7, #36]	; 0x24
 8003578:	e021      	b.n	80035be <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d015      	beq.n	80035ac <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a2a      	ldr	r2, [pc, #168]	; (8003630 <HAL_ADC_IRQHandler+0x464>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d004      	beq.n	8003594 <HAL_ADC_IRQHandler+0x3c8>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a29      	ldr	r2, [pc, #164]	; (8003634 <HAL_ADC_IRQHandler+0x468>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d101      	bne.n	8003598 <HAL_ADC_IRQHandler+0x3cc>
 8003594:	4b28      	ldr	r3, [pc, #160]	; (8003638 <HAL_ADC_IRQHandler+0x46c>)
 8003596:	e000      	b.n	800359a <HAL_ADC_IRQHandler+0x3ce>
 8003598:	4b28      	ldr	r3, [pc, #160]	; (800363c <HAL_ADC_IRQHandler+0x470>)
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff fa40 	bl	8002a20 <LL_ADC_GetMultiDMATransfer>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00b      	beq.n	80035be <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80035a6:	2301      	movs	r3, #1
 80035a8:	627b      	str	r3, [r7, #36]	; 0x24
 80035aa:	e008      	b.n	80035be <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80035ba:	2301      	movs	r3, #1
 80035bc:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d10e      	bne.n	80035e2 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d4:	f043 0202 	orr.w	r2, r3, #2
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f839 	bl	8003654 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2210      	movs	r2, #16
 80035e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d018      	beq.n	8003626 <HAL_ADC_IRQHandler+0x45a>
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d013      	beq.n	8003626 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003602:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360e:	f043 0208 	orr.w	r2, r3, #8
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800361e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 ff7d 	bl	8004520 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003626:	bf00      	nop
 8003628:	3728      	adds	r7, #40	; 0x28
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40022000 	.word	0x40022000
 8003634:	40022100 	.word	0x40022100
 8003638:	40022300 	.word	0x40022300
 800363c:	58026300 	.word	0x58026300

08003640 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003668:	b590      	push	{r4, r7, lr}
 800366a:	b0a1      	sub	sp, #132	; 0x84
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003678:	2300      	movs	r3, #0
 800367a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	4a9d      	ldr	r2, [pc, #628]	; (80038f8 <HAL_ADC_ConfigChannel+0x290>)
 8003682:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800368a:	2b01      	cmp	r3, #1
 800368c:	d101      	bne.n	8003692 <HAL_ADC_ConfigChannel+0x2a>
 800368e:	2302      	movs	r3, #2
 8003690:	e321      	b.n	8003cd6 <HAL_ADC_ConfigChannel+0x66e>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff fa90 	bl	8002bc4 <LL_ADC_REG_IsConversionOngoing>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f040 8306 	bne.w	8003cb8 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d108      	bne.n	80036ca <HAL_ADC_ConfigChannel+0x62>
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	0e9b      	lsrs	r3, r3, #26
 80036be:	f003 031f 	and.w	r3, r3, #31
 80036c2:	2201      	movs	r2, #1
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	e016      	b.n	80036f8 <HAL_ADC_ConfigChannel+0x90>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036d2:	fa93 f3a3 	rbit	r3, r3
 80036d6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036da:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80036dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80036e2:	2320      	movs	r3, #32
 80036e4:	e003      	b.n	80036ee <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80036e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036e8:	fab3 f383 	clz	r3, r3
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	f003 031f 	and.w	r3, r3, #31
 80036f2:	2201      	movs	r2, #1
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	69d1      	ldr	r1, [r2, #28]
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6812      	ldr	r2, [r2, #0]
 8003702:	430b      	orrs	r3, r1
 8003704:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6818      	ldr	r0, [r3, #0]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	6859      	ldr	r1, [r3, #4]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	f7ff f8d5 	bl	80028c2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff fa51 	bl	8002bc4 <LL_ADC_REG_IsConversionOngoing>
 8003722:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f7ff fa73 	bl	8002c14 <LL_ADC_INJ_IsConversionOngoing>
 800372e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003730:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003732:	2b00      	cmp	r3, #0
 8003734:	f040 80b3 	bne.w	800389e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003738:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800373a:	2b00      	cmp	r3, #0
 800373c:	f040 80af 	bne.w	800389e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6818      	ldr	r0, [r3, #0]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	6819      	ldr	r1, [r3, #0]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	461a      	mov	r2, r3
 800374e:	f7ff f90a 	bl	8002966 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003752:	4b6a      	ldr	r3, [pc, #424]	; (80038fc <HAL_ADC_ConfigChannel+0x294>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800375a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800375e:	d10b      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x110>
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	695a      	ldr	r2, [r3, #20]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	089b      	lsrs	r3, r3, #2
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	e01d      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x14c>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	f003 0310 	and.w	r3, r3, #16
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10b      	bne.n	800379e <HAL_ADC_ConfigChannel+0x136>
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	695a      	ldr	r2, [r3, #20]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	089b      	lsrs	r3, r3, #2
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	e00a      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x14c>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	695a      	ldr	r2, [r3, #20]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	089b      	lsrs	r3, r3, #2
 80037aa:	f003 0304 	and.w	r3, r3, #4
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d027      	beq.n	800380e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6818      	ldr	r0, [r3, #0]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	6919      	ldr	r1, [r3, #16]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037cc:	f7ff f812 	bl	80027f4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6818      	ldr	r0, [r3, #0]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	6919      	ldr	r1, [r3, #16]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	7e5b      	ldrb	r3, [r3, #25]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d102      	bne.n	80037e6 <HAL_ADC_ConfigChannel+0x17e>
 80037e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80037e4:	e000      	b.n	80037e8 <HAL_ADC_ConfigChannel+0x180>
 80037e6:	2300      	movs	r3, #0
 80037e8:	461a      	mov	r2, r3
 80037ea:	f7ff f83c 	bl	8002866 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6818      	ldr	r0, [r3, #0]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	6919      	ldr	r1, [r3, #16]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	7e1b      	ldrb	r3, [r3, #24]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d102      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x19c>
 80037fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003802:	e000      	b.n	8003806 <HAL_ADC_ConfigChannel+0x19e>
 8003804:	2300      	movs	r3, #0
 8003806:	461a      	mov	r2, r3
 8003808:	f7ff f814 	bl	8002834 <LL_ADC_SetDataRightShift>
 800380c:	e047      	b.n	800389e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003814:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	069b      	lsls	r3, r3, #26
 800381e:	429a      	cmp	r2, r3
 8003820:	d107      	bne.n	8003832 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003830:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003838:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	069b      	lsls	r3, r3, #26
 8003842:	429a      	cmp	r2, r3
 8003844:	d107      	bne.n	8003856 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003854:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800385c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	069b      	lsls	r3, r3, #26
 8003866:	429a      	cmp	r2, r3
 8003868:	d107      	bne.n	800387a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003878:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003880:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	069b      	lsls	r3, r3, #26
 800388a:	429a      	cmp	r2, r3
 800388c:	d107      	bne.n	800389e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800389c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7ff f940 	bl	8002b28 <LL_ADC_IsEnabled>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f040 820d 	bne.w	8003cca <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6818      	ldr	r0, [r3, #0]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	6819      	ldr	r1, [r3, #0]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	461a      	mov	r2, r3
 80038be:	f7ff f87d 	bl	80029bc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	4a0c      	ldr	r2, [pc, #48]	; (80038f8 <HAL_ADC_ConfigChannel+0x290>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	f040 8133 	bne.w	8003b34 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d110      	bne.n	8003900 <HAL_ADC_ConfigChannel+0x298>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	0e9b      	lsrs	r3, r3, #26
 80038e4:	3301      	adds	r3, #1
 80038e6:	f003 031f 	and.w	r3, r3, #31
 80038ea:	2b09      	cmp	r3, #9
 80038ec:	bf94      	ite	ls
 80038ee:	2301      	movls	r3, #1
 80038f0:	2300      	movhi	r3, #0
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	e01e      	b.n	8003934 <HAL_ADC_ConfigChannel+0x2cc>
 80038f6:	bf00      	nop
 80038f8:	47ff0000 	.word	0x47ff0000
 80038fc:	5c001000 	.word	0x5c001000
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003906:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003908:	fa93 f3a3 	rbit	r3, r3
 800390c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800390e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003910:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003912:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003918:	2320      	movs	r3, #32
 800391a:	e003      	b.n	8003924 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800391c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800391e:	fab3 f383 	clz	r3, r3
 8003922:	b2db      	uxtb	r3, r3
 8003924:	3301      	adds	r3, #1
 8003926:	f003 031f 	and.w	r3, r3, #31
 800392a:	2b09      	cmp	r3, #9
 800392c:	bf94      	ite	ls
 800392e:	2301      	movls	r3, #1
 8003930:	2300      	movhi	r3, #0
 8003932:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003934:	2b00      	cmp	r3, #0
 8003936:	d079      	beq.n	8003a2c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003940:	2b00      	cmp	r3, #0
 8003942:	d107      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x2ec>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	0e9b      	lsrs	r3, r3, #26
 800394a:	3301      	adds	r3, #1
 800394c:	069b      	lsls	r3, r3, #26
 800394e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003952:	e015      	b.n	8003980 <HAL_ADC_ConfigChannel+0x318>
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800395c:	fa93 f3a3 	rbit	r3, r3
 8003960:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003964:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800396c:	2320      	movs	r3, #32
 800396e:	e003      	b.n	8003978 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003972:	fab3 f383 	clz	r3, r3
 8003976:	b2db      	uxtb	r3, r3
 8003978:	3301      	adds	r3, #1
 800397a:	069b      	lsls	r3, r3, #26
 800397c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003988:	2b00      	cmp	r3, #0
 800398a:	d109      	bne.n	80039a0 <HAL_ADC_ConfigChannel+0x338>
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	0e9b      	lsrs	r3, r3, #26
 8003992:	3301      	adds	r3, #1
 8003994:	f003 031f 	and.w	r3, r3, #31
 8003998:	2101      	movs	r1, #1
 800399a:	fa01 f303 	lsl.w	r3, r1, r3
 800399e:	e017      	b.n	80039d0 <HAL_ADC_ConfigChannel+0x368>
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039a8:	fa93 f3a3 	rbit	r3, r3
 80039ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80039ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039b0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80039b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80039b8:	2320      	movs	r3, #32
 80039ba:	e003      	b.n	80039c4 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80039bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039be:	fab3 f383 	clz	r3, r3
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	3301      	adds	r3, #1
 80039c6:	f003 031f 	and.w	r3, r3, #31
 80039ca:	2101      	movs	r1, #1
 80039cc:	fa01 f303 	lsl.w	r3, r1, r3
 80039d0:	ea42 0103 	orr.w	r1, r2, r3
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10a      	bne.n	80039f6 <HAL_ADC_ConfigChannel+0x38e>
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	0e9b      	lsrs	r3, r3, #26
 80039e6:	3301      	adds	r3, #1
 80039e8:	f003 021f 	and.w	r2, r3, #31
 80039ec:	4613      	mov	r3, r2
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	4413      	add	r3, r2
 80039f2:	051b      	lsls	r3, r3, #20
 80039f4:	e018      	b.n	8003a28 <HAL_ADC_ConfigChannel+0x3c0>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039fe:	fa93 f3a3 	rbit	r3, r3
 8003a02:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a06:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003a0e:	2320      	movs	r3, #32
 8003a10:	e003      	b.n	8003a1a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a14:	fab3 f383 	clz	r3, r3
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	f003 021f 	and.w	r2, r3, #31
 8003a20:	4613      	mov	r3, r2
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	4413      	add	r3, r2
 8003a26:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	e07e      	b.n	8003b2a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d107      	bne.n	8003a48 <HAL_ADC_ConfigChannel+0x3e0>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	0e9b      	lsrs	r3, r3, #26
 8003a3e:	3301      	adds	r3, #1
 8003a40:	069b      	lsls	r3, r3, #26
 8003a42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a46:	e015      	b.n	8003a74 <HAL_ADC_ConfigChannel+0x40c>
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a50:	fa93 f3a3 	rbit	r3, r3
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003a60:	2320      	movs	r3, #32
 8003a62:	e003      	b.n	8003a6c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a66:	fab3 f383 	clz	r3, r3
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	069b      	lsls	r3, r3, #26
 8003a70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d109      	bne.n	8003a94 <HAL_ADC_ConfigChannel+0x42c>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	0e9b      	lsrs	r3, r3, #26
 8003a86:	3301      	adds	r3, #1
 8003a88:	f003 031f 	and.w	r3, r3, #31
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a92:	e017      	b.n	8003ac4 <HAL_ADC_ConfigChannel+0x45c>
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	fa93 f3a3 	rbit	r3, r3
 8003aa0:	61bb      	str	r3, [r7, #24]
  return result;
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003aac:	2320      	movs	r3, #32
 8003aae:	e003      	b.n	8003ab8 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	fab3 f383 	clz	r3, r3
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	3301      	adds	r3, #1
 8003aba:	f003 031f 	and.w	r3, r3, #31
 8003abe:	2101      	movs	r1, #1
 8003ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac4:	ea42 0103 	orr.w	r1, r2, r3
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10d      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x488>
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	0e9b      	lsrs	r3, r3, #26
 8003ada:	3301      	adds	r3, #1
 8003adc:	f003 021f 	and.w	r2, r3, #31
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	4413      	add	r3, r2
 8003ae6:	3b1e      	subs	r3, #30
 8003ae8:	051b      	lsls	r3, r3, #20
 8003aea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003aee:	e01b      	b.n	8003b28 <HAL_ADC_ConfigChannel+0x4c0>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	fa93 f3a3 	rbit	r3, r3
 8003afc:	60fb      	str	r3, [r7, #12]
  return result;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003b08:	2320      	movs	r3, #32
 8003b0a:	e003      	b.n	8003b14 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	fab3 f383 	clz	r3, r3
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	3301      	adds	r3, #1
 8003b16:	f003 021f 	and.w	r2, r3, #31
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	4413      	add	r3, r2
 8003b20:	3b1e      	subs	r3, #30
 8003b22:	051b      	lsls	r3, r3, #20
 8003b24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b28:	430b      	orrs	r3, r1
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	6892      	ldr	r2, [r2, #8]
 8003b2e:	4619      	mov	r1, r3
 8003b30:	f7fe ff19 	bl	8002966 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f280 80c6 	bge.w	8003cca <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a67      	ldr	r2, [pc, #412]	; (8003ce0 <HAL_ADC_ConfigChannel+0x678>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d004      	beq.n	8003b52 <HAL_ADC_ConfigChannel+0x4ea>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a65      	ldr	r2, [pc, #404]	; (8003ce4 <HAL_ADC_ConfigChannel+0x67c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d101      	bne.n	8003b56 <HAL_ADC_ConfigChannel+0x4ee>
 8003b52:	4b65      	ldr	r3, [pc, #404]	; (8003ce8 <HAL_ADC_ConfigChannel+0x680>)
 8003b54:	e000      	b.n	8003b58 <HAL_ADC_ConfigChannel+0x4f0>
 8003b56:	4b65      	ldr	r3, [pc, #404]	; (8003cec <HAL_ADC_ConfigChannel+0x684>)
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fe fe3d 	bl	80027d8 <LL_ADC_GetCommonPathInternalCh>
 8003b5e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a5e      	ldr	r2, [pc, #376]	; (8003ce0 <HAL_ADC_ConfigChannel+0x678>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d004      	beq.n	8003b74 <HAL_ADC_ConfigChannel+0x50c>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a5d      	ldr	r2, [pc, #372]	; (8003ce4 <HAL_ADC_ConfigChannel+0x67c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d10e      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x52a>
 8003b74:	485a      	ldr	r0, [pc, #360]	; (8003ce0 <HAL_ADC_ConfigChannel+0x678>)
 8003b76:	f7fe ffd7 	bl	8002b28 <LL_ADC_IsEnabled>
 8003b7a:	4604      	mov	r4, r0
 8003b7c:	4859      	ldr	r0, [pc, #356]	; (8003ce4 <HAL_ADC_ConfigChannel+0x67c>)
 8003b7e:	f7fe ffd3 	bl	8002b28 <LL_ADC_IsEnabled>
 8003b82:	4603      	mov	r3, r0
 8003b84:	4323      	orrs	r3, r4
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	bf0c      	ite	eq
 8003b8a:	2301      	moveq	r3, #1
 8003b8c:	2300      	movne	r3, #0
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	e008      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x53c>
 8003b92:	4857      	ldr	r0, [pc, #348]	; (8003cf0 <HAL_ADC_ConfigChannel+0x688>)
 8003b94:	f7fe ffc8 	bl	8002b28 <LL_ADC_IsEnabled>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	bf0c      	ite	eq
 8003b9e:	2301      	moveq	r3, #1
 8003ba0:	2300      	movne	r3, #0
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d07d      	beq.n	8003ca4 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a51      	ldr	r2, [pc, #324]	; (8003cf4 <HAL_ADC_ConfigChannel+0x68c>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d130      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x5ac>
 8003bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d12b      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a4b      	ldr	r2, [pc, #300]	; (8003cf0 <HAL_ADC_ConfigChannel+0x688>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	f040 8081 	bne.w	8003cca <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a44      	ldr	r2, [pc, #272]	; (8003ce0 <HAL_ADC_ConfigChannel+0x678>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d004      	beq.n	8003bdc <HAL_ADC_ConfigChannel+0x574>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a43      	ldr	r2, [pc, #268]	; (8003ce4 <HAL_ADC_ConfigChannel+0x67c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d101      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0x578>
 8003bdc:	4a42      	ldr	r2, [pc, #264]	; (8003ce8 <HAL_ADC_ConfigChannel+0x680>)
 8003bde:	e000      	b.n	8003be2 <HAL_ADC_ConfigChannel+0x57a>
 8003be0:	4a42      	ldr	r2, [pc, #264]	; (8003cec <HAL_ADC_ConfigChannel+0x684>)
 8003be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003be4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003be8:	4619      	mov	r1, r3
 8003bea:	4610      	mov	r0, r2
 8003bec:	f7fe fde1 	bl	80027b2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bf0:	4b41      	ldr	r3, [pc, #260]	; (8003cf8 <HAL_ADC_ConfigChannel+0x690>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	099b      	lsrs	r3, r3, #6
 8003bf6:	4a41      	ldr	r2, [pc, #260]	; (8003cfc <HAL_ADC_ConfigChannel+0x694>)
 8003bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfc:	099b      	lsrs	r3, r3, #6
 8003bfe:	3301      	adds	r3, #1
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003c04:	e002      	b.n	8003c0c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f9      	bne.n	8003c06 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c12:	e05a      	b.n	8003cca <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a39      	ldr	r2, [pc, #228]	; (8003d00 <HAL_ADC_ConfigChannel+0x698>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d11e      	bne.n	8003c5c <HAL_ADC_ConfigChannel+0x5f4>
 8003c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d119      	bne.n	8003c5c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a30      	ldr	r2, [pc, #192]	; (8003cf0 <HAL_ADC_ConfigChannel+0x688>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d14b      	bne.n	8003cca <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a2a      	ldr	r2, [pc, #168]	; (8003ce0 <HAL_ADC_ConfigChannel+0x678>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d004      	beq.n	8003c46 <HAL_ADC_ConfigChannel+0x5de>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a28      	ldr	r2, [pc, #160]	; (8003ce4 <HAL_ADC_ConfigChannel+0x67c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d101      	bne.n	8003c4a <HAL_ADC_ConfigChannel+0x5e2>
 8003c46:	4a28      	ldr	r2, [pc, #160]	; (8003ce8 <HAL_ADC_ConfigChannel+0x680>)
 8003c48:	e000      	b.n	8003c4c <HAL_ADC_ConfigChannel+0x5e4>
 8003c4a:	4a28      	ldr	r2, [pc, #160]	; (8003cec <HAL_ADC_ConfigChannel+0x684>)
 8003c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c52:	4619      	mov	r1, r3
 8003c54:	4610      	mov	r0, r2
 8003c56:	f7fe fdac 	bl	80027b2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c5a:	e036      	b.n	8003cca <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a28      	ldr	r2, [pc, #160]	; (8003d04 <HAL_ADC_ConfigChannel+0x69c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d131      	bne.n	8003cca <HAL_ADC_ConfigChannel+0x662>
 8003c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d12c      	bne.n	8003cca <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a1e      	ldr	r2, [pc, #120]	; (8003cf0 <HAL_ADC_ConfigChannel+0x688>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d127      	bne.n	8003cca <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a18      	ldr	r2, [pc, #96]	; (8003ce0 <HAL_ADC_ConfigChannel+0x678>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d004      	beq.n	8003c8e <HAL_ADC_ConfigChannel+0x626>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a16      	ldr	r2, [pc, #88]	; (8003ce4 <HAL_ADC_ConfigChannel+0x67c>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d101      	bne.n	8003c92 <HAL_ADC_ConfigChannel+0x62a>
 8003c8e:	4a16      	ldr	r2, [pc, #88]	; (8003ce8 <HAL_ADC_ConfigChannel+0x680>)
 8003c90:	e000      	b.n	8003c94 <HAL_ADC_ConfigChannel+0x62c>
 8003c92:	4a16      	ldr	r2, [pc, #88]	; (8003cec <HAL_ADC_ConfigChannel+0x684>)
 8003c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	f7fe fd88 	bl	80027b2 <LL_ADC_SetCommonPathInternalCh>
 8003ca2:	e012      	b.n	8003cca <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca8:	f043 0220 	orr.w	r2, r3, #32
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003cb6:	e008      	b.n	8003cca <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cbc:	f043 0220 	orr.w	r2, r3, #32
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003cd2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3784      	adds	r7, #132	; 0x84
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd90      	pop	{r4, r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40022000 	.word	0x40022000
 8003ce4:	40022100 	.word	0x40022100
 8003ce8:	40022300 	.word	0x40022300
 8003cec:	58026300 	.word	0x58026300
 8003cf0:	58026000 	.word	0x58026000
 8003cf4:	cb840000 	.word	0xcb840000
 8003cf8:	24000000 	.word	0x24000000
 8003cfc:	053e2d63 	.word	0x053e2d63
 8003d00:	c7520000 	.word	0xc7520000
 8003d04:	cfb80000 	.word	0xcfb80000

08003d08 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fe ff50 	bl	8002bc4 <LL_ADC_REG_IsConversionOngoing>
 8003d24:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fe ff72 	bl	8002c14 <LL_ADC_INJ_IsConversionOngoing>
 8003d30:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d103      	bne.n	8003d40 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 8098 	beq.w	8003e70 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d02a      	beq.n	8003da4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	7d5b      	ldrb	r3, [r3, #21]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d126      	bne.n	8003da4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	7d1b      	ldrb	r3, [r3, #20]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d122      	bne.n	8003da4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003d62:	e014      	b.n	8003d8e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	4a45      	ldr	r2, [pc, #276]	; (8003e7c <ADC_ConversionStop+0x174>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d90d      	bls.n	8003d88 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d70:	f043 0210 	orr.w	r2, r3, #16
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7c:	f043 0201 	orr.w	r2, r3, #1
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e074      	b.n	8003e72 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d98:	2b40      	cmp	r3, #64	; 0x40
 8003d9a:	d1e3      	bne.n	8003d64 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2240      	movs	r2, #64	; 0x40
 8003da2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d014      	beq.n	8003dd4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fe ff08 	bl	8002bc4 <LL_ADC_REG_IsConversionOngoing>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00c      	beq.n	8003dd4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7fe fec5 	bl	8002b4e <LL_ADC_IsDisableOngoing>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d104      	bne.n	8003dd4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7fe fee4 	bl	8002b9c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d014      	beq.n	8003e04 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fe ff18 	bl	8002c14 <LL_ADC_INJ_IsConversionOngoing>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00c      	beq.n	8003e04 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fe fead 	bl	8002b4e <LL_ADC_IsDisableOngoing>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d104      	bne.n	8003e04 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fe fef4 	bl	8002bec <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d005      	beq.n	8003e16 <ADC_ConversionStop+0x10e>
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	2b03      	cmp	r3, #3
 8003e0e:	d105      	bne.n	8003e1c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003e10:	230c      	movs	r3, #12
 8003e12:	617b      	str	r3, [r7, #20]
        break;
 8003e14:	e005      	b.n	8003e22 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003e16:	2308      	movs	r3, #8
 8003e18:	617b      	str	r3, [r7, #20]
        break;
 8003e1a:	e002      	b.n	8003e22 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003e1c:	2304      	movs	r3, #4
 8003e1e:	617b      	str	r3, [r7, #20]
        break;
 8003e20:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003e22:	f7fe fc3d 	bl	80026a0 <HAL_GetTick>
 8003e26:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003e28:	e01b      	b.n	8003e62 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003e2a:	f7fe fc39 	bl	80026a0 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b05      	cmp	r3, #5
 8003e36:	d914      	bls.n	8003e62 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	4013      	ands	r3, r2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00d      	beq.n	8003e62 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4a:	f043 0210 	orr.w	r2, r3, #16
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e56:	f043 0201 	orr.w	r2, r3, #1
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e007      	b.n	8003e72 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1dc      	bne.n	8003e2a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3720      	adds	r7, #32
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	000cdbff 	.word	0x000cdbff

08003e80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fe fe4b 	bl	8002b28 <LL_ADC_IsEnabled>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d16e      	bne.n	8003f76 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	4b38      	ldr	r3, [pc, #224]	; (8003f80 <ADC_Enable+0x100>)
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00d      	beq.n	8003ec2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eaa:	f043 0210 	orr.w	r2, r3, #16
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb6:	f043 0201 	orr.w	r2, r3, #1
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e05a      	b.n	8003f78 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fe fe06 	bl	8002ad8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003ecc:	f7fe fbe8 	bl	80026a0 <HAL_GetTick>
 8003ed0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a2b      	ldr	r2, [pc, #172]	; (8003f84 <ADC_Enable+0x104>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d004      	beq.n	8003ee6 <ADC_Enable+0x66>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a29      	ldr	r2, [pc, #164]	; (8003f88 <ADC_Enable+0x108>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d101      	bne.n	8003eea <ADC_Enable+0x6a>
 8003ee6:	4b29      	ldr	r3, [pc, #164]	; (8003f8c <ADC_Enable+0x10c>)
 8003ee8:	e000      	b.n	8003eec <ADC_Enable+0x6c>
 8003eea:	4b29      	ldr	r3, [pc, #164]	; (8003f90 <ADC_Enable+0x110>)
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7fe fd89 	bl	8002a04 <LL_ADC_GetMultimode>
 8003ef2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a23      	ldr	r2, [pc, #140]	; (8003f88 <ADC_Enable+0x108>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d002      	beq.n	8003f04 <ADC_Enable+0x84>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	e000      	b.n	8003f06 <ADC_Enable+0x86>
 8003f04:	4b1f      	ldr	r3, [pc, #124]	; (8003f84 <ADC_Enable+0x104>)
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6812      	ldr	r2, [r2, #0]
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d02c      	beq.n	8003f68 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d130      	bne.n	8003f76 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f14:	e028      	b.n	8003f68 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fe fe04 	bl	8002b28 <LL_ADC_IsEnabled>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d104      	bne.n	8003f30 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fe fdd4 	bl	8002ad8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003f30:	f7fe fbb6 	bl	80026a0 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d914      	bls.n	8003f68 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d00d      	beq.n	8003f68 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f50:	f043 0210 	orr.w	r2, r3, #16
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5c:	f043 0201 	orr.w	r2, r3, #1
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e007      	b.n	8003f78 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d1cf      	bne.n	8003f16 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	8000003f 	.word	0x8000003f
 8003f84:	40022000 	.word	0x40022000
 8003f88:	40022100 	.word	0x40022100
 8003f8c:	40022300 	.word	0x40022300
 8003f90:	58026300 	.word	0x58026300

08003f94 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fe fdd4 	bl	8002b4e <LL_ADC_IsDisableOngoing>
 8003fa6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7fe fdbb 	bl	8002b28 <LL_ADC_IsEnabled>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d047      	beq.n	8004048 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d144      	bne.n	8004048 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 030d 	and.w	r3, r3, #13
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d10c      	bne.n	8003fe6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fe fd95 	bl	8002b00 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2203      	movs	r2, #3
 8003fdc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003fde:	f7fe fb5f 	bl	80026a0 <HAL_GetTick>
 8003fe2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fe4:	e029      	b.n	800403a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fea:	f043 0210 	orr.w	r2, r3, #16
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff6:	f043 0201 	orr.w	r2, r3, #1
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e023      	b.n	800404a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004002:	f7fe fb4d 	bl	80026a0 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d914      	bls.n	800403a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00d      	beq.n	800403a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004022:	f043 0210 	orr.w	r2, r3, #16
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402e:	f043 0201 	orr.w	r2, r3, #1
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e007      	b.n	800404a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1dc      	bne.n	8004002 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b084      	sub	sp, #16
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004064:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004068:	2b00      	cmp	r3, #0
 800406a:	d14b      	bne.n	8004104 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004070:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0308 	and.w	r3, r3, #8
 8004082:	2b00      	cmp	r3, #0
 8004084:	d021      	beq.n	80040ca <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4618      	mov	r0, r3
 800408c:	f7fe fc06 	bl	800289c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d032      	beq.n	80040fc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d12b      	bne.n	80040fc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d11f      	bne.n	80040fc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c0:	f043 0201 	orr.w	r2, r3, #1
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	655a      	str	r2, [r3, #84]	; 0x54
 80040c8:	e018      	b.n	80040fc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f003 0303 	and.w	r3, r3, #3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d111      	bne.n	80040fc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d105      	bne.n	80040fc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f4:	f043 0201 	orr.w	r2, r3, #1
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f7fd faad 	bl	800165c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004102:	e00e      	b.n	8004122 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004108:	f003 0310 	and.w	r3, r3, #16
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f7ff fa9f 	bl	8003654 <HAL_ADC_ErrorCallback>
}
 8004116:	e004      	b.n	8004122 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800411c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	4798      	blx	r3
}
 8004122:	bf00      	nop
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b084      	sub	sp, #16
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004136:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f7fd fa57 	bl	80015ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800413e:	bf00      	nop
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b084      	sub	sp, #16
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004152:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004158:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004164:	f043 0204 	orr.w	r2, r3, #4
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f7ff fa71 	bl	8003654 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004172:	bf00      	nop
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a79      	ldr	r2, [pc, #484]	; (8004370 <ADC_ConfigureBoostMode+0x1f4>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d004      	beq.n	8004198 <ADC_ConfigureBoostMode+0x1c>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a78      	ldr	r2, [pc, #480]	; (8004374 <ADC_ConfigureBoostMode+0x1f8>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d109      	bne.n	80041ac <ADC_ConfigureBoostMode+0x30>
 8004198:	4b77      	ldr	r3, [pc, #476]	; (8004378 <ADC_ConfigureBoostMode+0x1fc>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	bf14      	ite	ne
 80041a4:	2301      	movne	r3, #1
 80041a6:	2300      	moveq	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	e008      	b.n	80041be <ADC_ConfigureBoostMode+0x42>
 80041ac:	4b73      	ldr	r3, [pc, #460]	; (800437c <ADC_ConfigureBoostMode+0x200>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	bf14      	ite	ne
 80041b8:	2301      	movne	r3, #1
 80041ba:	2300      	moveq	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d01c      	beq.n	80041fc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80041c2:	f006 f96f 	bl	800a4a4 <HAL_RCC_GetHCLKFreq>
 80041c6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041d0:	d010      	beq.n	80041f4 <ADC_ConfigureBoostMode+0x78>
 80041d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041d6:	d871      	bhi.n	80042bc <ADC_ConfigureBoostMode+0x140>
 80041d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041dc:	d002      	beq.n	80041e4 <ADC_ConfigureBoostMode+0x68>
 80041de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041e2:	d16b      	bne.n	80042bc <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	0c1b      	lsrs	r3, r3, #16
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f0:	60fb      	str	r3, [r7, #12]
        break;
 80041f2:	e066      	b.n	80042c2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	089b      	lsrs	r3, r3, #2
 80041f8:	60fb      	str	r3, [r7, #12]
        break;
 80041fa:	e062      	b.n	80042c2 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80041fc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004200:	f007 f8f2 	bl	800b3e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004204:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800420e:	d051      	beq.n	80042b4 <ADC_ConfigureBoostMode+0x138>
 8004210:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004214:	d854      	bhi.n	80042c0 <ADC_ConfigureBoostMode+0x144>
 8004216:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800421a:	d047      	beq.n	80042ac <ADC_ConfigureBoostMode+0x130>
 800421c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004220:	d84e      	bhi.n	80042c0 <ADC_ConfigureBoostMode+0x144>
 8004222:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004226:	d03d      	beq.n	80042a4 <ADC_ConfigureBoostMode+0x128>
 8004228:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800422c:	d848      	bhi.n	80042c0 <ADC_ConfigureBoostMode+0x144>
 800422e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004232:	d033      	beq.n	800429c <ADC_ConfigureBoostMode+0x120>
 8004234:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004238:	d842      	bhi.n	80042c0 <ADC_ConfigureBoostMode+0x144>
 800423a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800423e:	d029      	beq.n	8004294 <ADC_ConfigureBoostMode+0x118>
 8004240:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004244:	d83c      	bhi.n	80042c0 <ADC_ConfigureBoostMode+0x144>
 8004246:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800424a:	d01a      	beq.n	8004282 <ADC_ConfigureBoostMode+0x106>
 800424c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004250:	d836      	bhi.n	80042c0 <ADC_ConfigureBoostMode+0x144>
 8004252:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004256:	d014      	beq.n	8004282 <ADC_ConfigureBoostMode+0x106>
 8004258:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800425c:	d830      	bhi.n	80042c0 <ADC_ConfigureBoostMode+0x144>
 800425e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004262:	d00e      	beq.n	8004282 <ADC_ConfigureBoostMode+0x106>
 8004264:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004268:	d82a      	bhi.n	80042c0 <ADC_ConfigureBoostMode+0x144>
 800426a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800426e:	d008      	beq.n	8004282 <ADC_ConfigureBoostMode+0x106>
 8004270:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004274:	d824      	bhi.n	80042c0 <ADC_ConfigureBoostMode+0x144>
 8004276:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800427a:	d002      	beq.n	8004282 <ADC_ConfigureBoostMode+0x106>
 800427c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004280:	d11e      	bne.n	80042c0 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	0c9b      	lsrs	r3, r3, #18
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004290:	60fb      	str	r3, [r7, #12]
        break;
 8004292:	e016      	b.n	80042c2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	091b      	lsrs	r3, r3, #4
 8004298:	60fb      	str	r3, [r7, #12]
        break;
 800429a:	e012      	b.n	80042c2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	095b      	lsrs	r3, r3, #5
 80042a0:	60fb      	str	r3, [r7, #12]
        break;
 80042a2:	e00e      	b.n	80042c2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	099b      	lsrs	r3, r3, #6
 80042a8:	60fb      	str	r3, [r7, #12]
        break;
 80042aa:	e00a      	b.n	80042c2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	09db      	lsrs	r3, r3, #7
 80042b0:	60fb      	str	r3, [r7, #12]
        break;
 80042b2:	e006      	b.n	80042c2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	0a1b      	lsrs	r3, r3, #8
 80042b8:	60fb      	str	r3, [r7, #12]
        break;
 80042ba:	e002      	b.n	80042c2 <ADC_ConfigureBoostMode+0x146>
        break;
 80042bc:	bf00      	nop
 80042be:	e000      	b.n	80042c2 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80042c0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80042c2:	f7fe fa1d 	bl	8002700 <HAL_GetREVID>
 80042c6:	4603      	mov	r3, r0
 80042c8:	f241 0203 	movw	r2, #4099	; 0x1003
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d815      	bhi.n	80042fc <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4a2b      	ldr	r2, [pc, #172]	; (8004380 <ADC_ConfigureBoostMode+0x204>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d908      	bls.n	80042ea <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689a      	ldr	r2, [r3, #8]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042e6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80042e8:	e03e      	b.n	8004368 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042f8:	609a      	str	r2, [r3, #8]
}
 80042fa:	e035      	b.n	8004368 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	085b      	lsrs	r3, r3, #1
 8004300:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	4a1f      	ldr	r2, [pc, #124]	; (8004384 <ADC_ConfigureBoostMode+0x208>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d808      	bhi.n	800431c <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004318:	609a      	str	r2, [r3, #8]
}
 800431a:	e025      	b.n	8004368 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4a1a      	ldr	r2, [pc, #104]	; (8004388 <ADC_ConfigureBoostMode+0x20c>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d80a      	bhi.n	800433a <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004336:	609a      	str	r2, [r3, #8]
}
 8004338:	e016      	b.n	8004368 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	4a13      	ldr	r2, [pc, #76]	; (800438c <ADC_ConfigureBoostMode+0x210>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d80a      	bhi.n	8004358 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004354:	609a      	str	r2, [r3, #8]
}
 8004356:	e007      	b.n	8004368 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689a      	ldr	r2, [r3, #8]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004366:	609a      	str	r2, [r3, #8]
}
 8004368:	bf00      	nop
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40022000 	.word	0x40022000
 8004374:	40022100 	.word	0x40022100
 8004378:	40022300 	.word	0x40022300
 800437c:	58026300 	.word	0x58026300
 8004380:	01312d00 	.word	0x01312d00
 8004384:	005f5e10 	.word	0x005f5e10
 8004388:	00bebc20 	.word	0x00bebc20
 800438c:	017d7840 	.word	0x017d7840

08004390 <LL_ADC_IsEnabled>:
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d101      	bne.n	80043a8 <LL_ADC_IsEnabled+0x18>
 80043a4:	2301      	movs	r3, #1
 80043a6:	e000      	b.n	80043aa <LL_ADC_IsEnabled+0x1a>
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
	...

080043b8 <LL_ADC_StartCalibration>:
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	4b09      	ldr	r3, [pc, #36]	; (80043f0 <LL_ADC_StartCalibration+0x38>)
 80043ca:	4013      	ands	r3, r2
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80043d8:	430a      	orrs	r2, r1
 80043da:	4313      	orrs	r3, r2
 80043dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	609a      	str	r2, [r3, #8]
}
 80043e4:	bf00      	nop
 80043e6:	3714      	adds	r7, #20
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	3ffeffc0 	.word	0x3ffeffc0

080043f4 <LL_ADC_IsCalibrationOnGoing>:
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004404:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004408:	d101      	bne.n	800440e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800440a:	2301      	movs	r3, #1
 800440c:	e000      	b.n	8004410 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <LL_ADC_REG_IsConversionOngoing>:
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b04      	cmp	r3, #4
 800442e:	d101      	bne.n	8004434 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004430:	2301      	movs	r3, #1
 8004432:	e000      	b.n	8004436 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
	...

08004444 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004450:	2300      	movs	r3, #0
 8004452:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800445a:	2b01      	cmp	r3, #1
 800445c:	d101      	bne.n	8004462 <HAL_ADCEx_Calibration_Start+0x1e>
 800445e:	2302      	movs	r3, #2
 8004460:	e04c      	b.n	80044fc <HAL_ADCEx_Calibration_Start+0xb8>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f7ff fd92 	bl	8003f94 <ADC_Disable>
 8004470:	4603      	mov	r3, r0
 8004472:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004474:	7dfb      	ldrb	r3, [r7, #23]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d135      	bne.n	80044e6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800447e:	4b21      	ldr	r3, [pc, #132]	; (8004504 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004480:	4013      	ands	r3, r2
 8004482:	f043 0202 	orr.w	r2, r3, #2
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	68b9      	ldr	r1, [r7, #8]
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff ff90 	bl	80043b8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004498:	e014      	b.n	80044c4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	3301      	adds	r3, #1
 800449e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	4a19      	ldr	r2, [pc, #100]	; (8004508 <HAL_ADCEx_Calibration_Start+0xc4>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d30d      	bcc.n	80044c4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ac:	f023 0312 	bic.w	r3, r3, #18
 80044b0:	f043 0210 	orr.w	r2, r3, #16
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e01b      	b.n	80044fc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff ff93 	bl	80043f4 <LL_ADC_IsCalibrationOnGoing>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1e2      	bne.n	800449a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d8:	f023 0303 	bic.w	r3, r3, #3
 80044dc:	f043 0201 	orr.w	r2, r3, #1
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	655a      	str	r2, [r3, #84]	; 0x54
 80044e4:	e005      	b.n	80044f2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ea:	f043 0210 	orr.w	r2, r3, #16
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80044fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	ffffeefd 	.word	0xffffeefd
 8004508:	25c3f800 	.word	0x25c3f800

0800450c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004570:	b590      	push	{r4, r7, lr}
 8004572:	b09f      	sub	sp, #124	; 0x7c
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800457a:	2300      	movs	r3, #0
 800457c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004586:	2b01      	cmp	r3, #1
 8004588:	d101      	bne.n	800458e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800458a:	2302      	movs	r3, #2
 800458c:	e0be      	b.n	800470c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004596:	2300      	movs	r3, #0
 8004598:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800459a:	2300      	movs	r3, #0
 800459c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a5c      	ldr	r2, [pc, #368]	; (8004714 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d102      	bne.n	80045ae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80045a8:	4b5b      	ldr	r3, [pc, #364]	; (8004718 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80045aa:	60bb      	str	r3, [r7, #8]
 80045ac:	e001      	b.n	80045b2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80045ae:	2300      	movs	r3, #0
 80045b0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10b      	bne.n	80045d0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045bc:	f043 0220 	orr.w	r2, r3, #32
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e09d      	b.n	800470c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7ff ff22 	bl	800441c <LL_ADC_REG_IsConversionOngoing>
 80045d8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff ff1c 	bl	800441c <LL_ADC_REG_IsConversionOngoing>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d17f      	bne.n	80046ea <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80045ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d17c      	bne.n	80046ea <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a47      	ldr	r2, [pc, #284]	; (8004714 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d004      	beq.n	8004604 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a46      	ldr	r2, [pc, #280]	; (8004718 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d101      	bne.n	8004608 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004604:	4b45      	ldr	r3, [pc, #276]	; (800471c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004606:	e000      	b.n	800460a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004608:	4b45      	ldr	r3, [pc, #276]	; (8004720 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800460a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d039      	beq.n	8004688 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	431a      	orrs	r2, r3
 8004622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004624:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a3a      	ldr	r2, [pc, #232]	; (8004714 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d004      	beq.n	800463a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a38      	ldr	r2, [pc, #224]	; (8004718 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d10e      	bne.n	8004658 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800463a:	4836      	ldr	r0, [pc, #216]	; (8004714 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800463c:	f7ff fea8 	bl	8004390 <LL_ADC_IsEnabled>
 8004640:	4604      	mov	r4, r0
 8004642:	4835      	ldr	r0, [pc, #212]	; (8004718 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004644:	f7ff fea4 	bl	8004390 <LL_ADC_IsEnabled>
 8004648:	4603      	mov	r3, r0
 800464a:	4323      	orrs	r3, r4
 800464c:	2b00      	cmp	r3, #0
 800464e:	bf0c      	ite	eq
 8004650:	2301      	moveq	r3, #1
 8004652:	2300      	movne	r3, #0
 8004654:	b2db      	uxtb	r3, r3
 8004656:	e008      	b.n	800466a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004658:	4832      	ldr	r0, [pc, #200]	; (8004724 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800465a:	f7ff fe99 	bl	8004390 <LL_ADC_IsEnabled>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	bf0c      	ite	eq
 8004664:	2301      	moveq	r3, #1
 8004666:	2300      	movne	r3, #0
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d047      	beq.n	80046fe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800466e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004670:	689a      	ldr	r2, [r3, #8]
 8004672:	4b2d      	ldr	r3, [pc, #180]	; (8004728 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004674:	4013      	ands	r3, r2
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	6811      	ldr	r1, [r2, #0]
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	6892      	ldr	r2, [r2, #8]
 800467e:	430a      	orrs	r2, r1
 8004680:	431a      	orrs	r2, r3
 8004682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004684:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004686:	e03a      	b.n	80046fe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004692:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a1e      	ldr	r2, [pc, #120]	; (8004714 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d004      	beq.n	80046a8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a1d      	ldr	r2, [pc, #116]	; (8004718 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d10e      	bne.n	80046c6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80046a8:	481a      	ldr	r0, [pc, #104]	; (8004714 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80046aa:	f7ff fe71 	bl	8004390 <LL_ADC_IsEnabled>
 80046ae:	4604      	mov	r4, r0
 80046b0:	4819      	ldr	r0, [pc, #100]	; (8004718 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80046b2:	f7ff fe6d 	bl	8004390 <LL_ADC_IsEnabled>
 80046b6:	4603      	mov	r3, r0
 80046b8:	4323      	orrs	r3, r4
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	bf0c      	ite	eq
 80046be:	2301      	moveq	r3, #1
 80046c0:	2300      	movne	r3, #0
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	e008      	b.n	80046d8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80046c6:	4817      	ldr	r0, [pc, #92]	; (8004724 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80046c8:	f7ff fe62 	bl	8004390 <LL_ADC_IsEnabled>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	bf0c      	ite	eq
 80046d2:	2301      	moveq	r3, #1
 80046d4:	2300      	movne	r3, #0
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d010      	beq.n	80046fe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80046dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	4b11      	ldr	r3, [pc, #68]	; (8004728 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80046e2:	4013      	ands	r3, r2
 80046e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046e6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046e8:	e009      	b.n	80046fe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ee:	f043 0220 	orr.w	r2, r3, #32
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80046fc:	e000      	b.n	8004700 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046fe:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004708:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800470c:	4618      	mov	r0, r3
 800470e:	377c      	adds	r7, #124	; 0x7c
 8004710:	46bd      	mov	sp, r7
 8004712:	bd90      	pop	{r4, r7, pc}
 8004714:	40022000 	.word	0x40022000
 8004718:	40022100 	.word	0x40022100
 800471c:	40022300 	.word	0x40022300
 8004720:	58026300 	.word	0x58026300
 8004724:	58026000 	.word	0x58026000
 8004728:	fffff0e0 	.word	0xfffff0e0

0800472c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b088      	sub	sp, #32
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8004734:	2300      	movs	r3, #0
 8004736:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 8004738:	2300      	movs	r3, #0
 800473a:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d102      	bne.n	8004748 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	77fb      	strb	r3, [r7, #31]
 8004746:	e10e      	b.n	8004966 <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004752:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004756:	d102      	bne.n	800475e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	77fb      	strb	r3, [r7, #31]
 800475c:	e103      	b.n	8004966 <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d109      	bne.n	800477e <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7fd fcd1 	bl	8002120 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8004792:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 8004798:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 800479e:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 80047a4:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 80047aa:	4313      	orrs	r3, r2
 80047ac:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	4b6e      	ldr	r3, [pc, #440]	; (8004970 <HAL_COMP_Init+0x244>)
 80047b6:	4013      	ands	r3, r2
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	6812      	ldr	r2, [r2, #0]
 80047bc:	6979      	ldr	r1, [r7, #20]
 80047be:	430b      	orrs	r3, r1
 80047c0:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	2b10      	cmp	r3, #16
 80047c8:	d108      	bne.n	80047dc <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f042 0210 	orr.w	r2, r2, #16
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	e007      	b.n	80047ec <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0210 	bic.w	r2, r2, #16
 80047ea:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0304 	and.w	r3, r3, #4
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d016      	beq.n	8004828 <HAL_COMP_Init+0xfc>
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d013      	beq.n	8004828 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004800:	4b5c      	ldr	r3, [pc, #368]	; (8004974 <HAL_COMP_Init+0x248>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	099b      	lsrs	r3, r3, #6
 8004806:	4a5c      	ldr	r2, [pc, #368]	; (8004978 <HAL_COMP_Init+0x24c>)
 8004808:	fba2 2303 	umull	r2, r3, r2, r3
 800480c:	099b      	lsrs	r3, r3, #6
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	4613      	mov	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 800481a:	e002      	b.n	8004822 <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	3b01      	subs	r3, #1
 8004820:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1f9      	bne.n	800481c <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a53      	ldr	r2, [pc, #332]	; (800497c <HAL_COMP_Init+0x250>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d102      	bne.n	8004838 <HAL_COMP_Init+0x10c>
 8004832:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004836:	e001      	b.n	800483c <HAL_COMP_Init+0x110>
 8004838:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800483c:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d06d      	beq.n	8004926 <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	f003 0310 	and.w	r3, r3, #16
 8004852:	2b00      	cmp	r3, #0
 8004854:	d008      	beq.n	8004868 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 8004856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	4313      	orrs	r3, r2
 8004864:	600b      	str	r3, [r1, #0]
 8004866:	e008      	b.n	800487a <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 8004868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	43db      	mvns	r3, r3
 8004872:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004876:	4013      	ands	r3, r2
 8004878:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	f003 0320 	and.w	r3, r3, #32
 8004882:	2b00      	cmp	r3, #0
 8004884:	d008      	beq.n	8004898 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 8004886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	4313      	orrs	r3, r2
 8004894:	604b      	str	r3, [r1, #4]
 8004896:	e008      	b.n	80048aa <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 8004898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	43db      	mvns	r3, r3
 80048a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048a6:	4013      	ands	r3, r2
 80048a8:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 80048aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00a      	beq.n	80048d6 <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 80048c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80048c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 80048d4:	e00a      	b.n	80048ec <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 80048d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048da:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	43db      	mvns	r3, r3
 80048e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048e6:	4013      	ands	r3, r2
 80048e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00a      	beq.n	800490e <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 80048f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048fc:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004900:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 800490c:	e021      	b.n	8004952 <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 800490e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004912:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	43db      	mvns	r3, r3
 800491a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800491e:	4013      	ands	r3, r2
 8004920:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 8004924:	e015      	b.n	8004952 <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 8004926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800492a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	43db      	mvns	r3, r3
 8004932:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004936:	4013      	ands	r3, r2
 8004938:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 800493c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004940:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	43db      	mvns	r3, r3
 8004948:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800494c:	4013      	ands	r3, r2
 800494e:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d103      	bne.n	8004966 <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
   
  }
  
  return status;
 8004966:	7ffb      	ldrb	r3, [r7, #31]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3720      	adds	r7, #32
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	f0e8cce1 	.word	0xf0e8cce1
 8004974:	24000000 	.word	0x24000000
 8004978:	053e2d63 	.word	0x053e2d63
 800497c:	5800380c 	.word	0x5800380c

08004980 <HAL_COMP_Start>:
  * @brief  Start the comparator. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{ 
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8004988:	2300      	movs	r3, #0
 800498a:	60bb      	str	r3, [r7, #8]

  HAL_StatusTypeDef status = HAL_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d102      	bne.n	800499c <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	73fb      	strb	r3, [r7, #15]
 800499a:	e030      	b.n	80049fe <HAL_COMP_Start+0x7e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049aa:	d102      	bne.n	80049b2 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	73fb      	strb	r3, [r7, #15]
 80049b0:	e025      	b.n	80049fe <HAL_COMP_Start+0x7e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d11d      	bne.n	80049fa <HAL_COMP_Start+0x7a>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_EN);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f042 0201 	orr.w	r2, r2, #1
 80049cc:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2202      	movs	r2, #2
 80049d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
     /* Delay for COMP startup time */
     /* Wait loop initialization and execution */
     /* Note: Variable divided by 2 to compensate partially    */
     /*       CPU processing cycles.                           */
    
     wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049d6:	4b0d      	ldr	r3, [pc, #52]	; (8004a0c <HAL_COMP_Start+0x8c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	099b      	lsrs	r3, r3, #6
 80049dc:	4a0c      	ldr	r2, [pc, #48]	; (8004a10 <HAL_COMP_Start+0x90>)
 80049de:	fba2 2303 	umull	r2, r3, r2, r3
 80049e2:	099b      	lsrs	r3, r3, #6
 80049e4:	3301      	adds	r3, #1
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 80049ea:	e002      	b.n	80049f2 <HAL_COMP_Start+0x72>
     {
       wait_loop_index--;
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	3b01      	subs	r3, #1
 80049f0:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1f9      	bne.n	80049ec <HAL_COMP_Start+0x6c>
 80049f8:	e001      	b.n	80049fe <HAL_COMP_Start+0x7e>
     }      
    }
    else
    {
      status = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80049fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	24000000 	.word	0x24000000
 8004a10:	053e2d63 	.word	0x053e2d63

08004a14 <HAL_COMP_Stop>:
  * @brief  Stop the comparator. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{ 
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d102      	bne.n	8004a2c <HAL_COMP_Stop+0x18>
  {
    status = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	73fb      	strb	r3, [r7, #15]
 8004a2a:	e01f      	b.n	8004a6c <HAL_COMP_Stop+0x58>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a3a:	d102      	bne.n	8004a42 <HAL_COMP_Stop+0x2e>
  {
    status = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	73fb      	strb	r3, [r7, #15]
 8004a40:	e014      	b.n	8004a6c <HAL_COMP_Stop+0x58>
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Check compliant states: HAL_COMP_STATE_READY or HAL_COMP_STATE_BUSY    */
    /* (all states except HAL_COMP_STATE_RESET and except locked status.      */
    if(hcomp->State != HAL_COMP_STATE_RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00c      	beq.n	8004a68 <HAL_COMP_Stop+0x54>
    {

      /* Disable the selected comparator */
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_EN);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0201 	bic.w	r2, r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_READY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8004a66:	e001      	b.n	8004a6c <HAL_COMP_Stop+0x58>
    }
    else
    {
      status = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  return status;
 8004a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
	...

08004a7c <HAL_COMP_Start_IT>:
  * @brief  Enable the interrupt and start the comparator.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start_IT(COMP_HandleTypeDef *hcomp)
{ 
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  
 __IO uint32_t wait_loop_index = 0UL;
 8004a84:	2300      	movs	r3, #0
 8004a86:	60bb      	str	r3, [r7, #8]
 HAL_StatusTypeDef status = HAL_OK;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d102      	bne.n	8004a98 <HAL_COMP_Start_IT+0x1c>
  {
    status = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	73fb      	strb	r3, [r7, #15]
 8004a96:	e038      	b.n	8004b0a <HAL_COMP_Start_IT+0x8e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aa2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004aa6:	d102      	bne.n	8004aae <HAL_COMP_Start_IT+0x32>
  {
    status = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	73fb      	strb	r3, [r7, #15]
 8004aac:	e02d      	b.n	8004b0a <HAL_COMP_Start_IT+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));
    /* Set HAL COMP handle state */
    if(hcomp->State == HAL_COMP_STATE_READY)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d125      	bne.n	8004b06 <HAL_COMP_Start_IT+0x8a>
    {

    /* Enable the selected comparator */
    SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_EN);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f042 0201 	orr.w	r2, r2, #1
 8004ac8:	601a      	str	r2, [r3, #0]
    /* Enable the Interrupt comparator */
    SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_ITEN);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ad8:	601a      	str	r2, [r3, #0]

    hcomp->State = HAL_COMP_STATE_BUSY; 
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2202      	movs	r2, #2
 8004ade:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */

     wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ae2:	4b0d      	ldr	r3, [pc, #52]	; (8004b18 <HAL_COMP_Start_IT+0x9c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	099b      	lsrs	r3, r3, #6
 8004ae8:	4a0c      	ldr	r2, [pc, #48]	; (8004b1c <HAL_COMP_Start_IT+0xa0>)
 8004aea:	fba2 2303 	umull	r2, r3, r2, r3
 8004aee:	099b      	lsrs	r3, r3, #6
 8004af0:	3301      	adds	r3, #1
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 8004af6:	e002      	b.n	8004afe <HAL_COMP_Start_IT+0x82>
     {
       wait_loop_index--;
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	3b01      	subs	r3, #1
 8004afc:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1f9      	bne.n	8004af8 <HAL_COMP_Start_IT+0x7c>
 8004b04:	e001      	b.n	8004b0a <HAL_COMP_Start_IT+0x8e>
     }

    }
    else
    {
       status = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	73fb      	strb	r3, [r7, #15]
    }
   }

  return status;
 8004b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	24000000 	.word	0x24000000
 8004b1c:	053e2d63 	.word	0x053e2d63

08004b20 <HAL_COMP_Stop_IT>:
  * @brief  Disable the interrupt and Stop the comparator. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop_IT(COMP_HandleTypeDef *hcomp)
{  
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  /* Disable the EXTI Line interrupt mode */
#if !defined (CORE_CM4)
   CLEAR_BIT(EXTI->IMR1, COMP_GET_EXTI_LINE(hcomp->Instance));
 8004b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6812      	ldr	r2, [r2, #0]
 8004b34:	490f      	ldr	r1, [pc, #60]	; (8004b74 <HAL_COMP_Stop_IT+0x54>)
 8004b36:	428a      	cmp	r2, r1
 8004b38:	d102      	bne.n	8004b40 <HAL_COMP_Stop_IT+0x20>
 8004b3a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004b3e:	e001      	b.n	8004b44 <HAL_COMP_Stop_IT+0x24>
 8004b40:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004b44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b48:	4013      	ands	r3, r2
 8004b4a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
#else
   CLEAR_BIT(EXTI->C2IMR1, COMP_GET_EXTI_LINE(hcomp->Instance));
#endif   
  /* Disable the Interrupt comparator */
   CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_ITEN);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b5c:	601a      	str	r2, [r3, #0]

  status = HAL_COMP_Stop(hcomp);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7ff ff58 	bl	8004a14 <HAL_COMP_Stop>
 8004b64:	4603      	mov	r3, r0
 8004b66:	73fb      	strb	r3, [r7, #15]
  
  return status;
 8004b68:	7bfb      	ldrb	r3, [r7, #15]
  
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	5800380c 	.word	0x5800380c

08004b78 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a45      	ldr	r2, [pc, #276]	; (8004c9c <HAL_COMP_IRQHandler+0x124>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d102      	bne.n	8004b90 <HAL_COMP_IRQHandler+0x18>
 8004b8a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004b8e:	e001      	b.n	8004b94 <HAL_COMP_IRQHandler+0x1c>
 8004b90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004b94:	60fb      	str	r3, [r7, #12]
  

#if defined(DUAL_CORE)
  /* EXTI line interrupt detected */
 if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8004b96:	f000 f997 	bl	8004ec8 <HAL_GetCurrentCPUID>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b03      	cmp	r3, #3
 8004b9e:	d11d      	bne.n	8004bdc <HAL_COMP_IRQHandler+0x64>
 {
    /* Check COMP EXTI flag */
    if(READ_BIT(EXTI->PR1, exti_line) != 0UL)
 8004ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ba4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4013      	ands	r3, r2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d032      	beq.n	8004c16 <HAL_COMP_IRQHandler+0x9e>
    {    
       /* Check whether comparator is in independent or window mode */
        if(READ_BIT(COMP12_COMMON->CFGR, COMP_CFGRx_WINMODE) != 0UL)
 8004bb0:	4b3b      	ldr	r3, [pc, #236]	; (8004ca0 <HAL_COMP_IRQHandler+0x128>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0310 	and.w	r3, r3, #16
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d006      	beq.n	8004bca <HAL_COMP_IRQHandler+0x52>
          /* Note: Pair of comparators in window mode can both trig IRQ when      */
          /*       input voltage is changing from "out of window" area            */
          /*       (low or high ) to the other "out of window" area (high or low).*/
          /*       Both flags must be cleared to call comparator trigger          */
          /*       callback is called once.                                       */
          WRITE_REG(EXTI->PR1, (COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 8004bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bc0:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8004bc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8004bc8:	e004      	b.n	8004bd4 <HAL_COMP_IRQHandler+0x5c>
        }
        else
        {
          /* Clear COMP EXTI line pending bit */
          WRITE_REG(EXTI->PR1, exti_line);
 8004bca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7fc fdcd 	bl	8001774 <HAL_COMP_TriggerCallback>
 8004bda:	e01c      	b.n	8004c16 <HAL_COMP_IRQHandler+0x9e>

 }
 else
 {
    /* Check COMP EXTI flag */
    if(READ_BIT(EXTI->C2PR1, exti_line) != 0UL)
 8004bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4013      	ands	r3, r2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d014      	beq.n	8004c16 <HAL_COMP_IRQHandler+0x9e>
    {    
       /* Check whether comparator is in independent or window mode */
        if(READ_BIT(COMP12_COMMON->CFGR, COMP_CFGRx_WINMODE) != 0UL)
 8004bec:	4b2c      	ldr	r3, [pc, #176]	; (8004ca0 <HAL_COMP_IRQHandler+0x128>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0310 	and.w	r3, r3, #16
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d006      	beq.n	8004c06 <HAL_COMP_IRQHandler+0x8e>
          /* Note: Pair of comparators in window mode can both trig IRQ when      */
          /*       input voltage is changing from "out of window" area            */
          /*       (low or high ) to the other "out of window" area (high or low).*/
          /*       Both flags must be cleared to call comparator trigger          */
          /*       callback is called once.                                       */
          WRITE_REG(EXTI->C2PR1, (COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 8004bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bfc:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8004c00:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8004c04:	e004      	b.n	8004c10 <HAL_COMP_IRQHandler+0x98>
        }
        else
        {
          /* Clear COMP EXTI line pending bit */
          WRITE_REG(EXTI->C2PR1, exti_line);
 8004c06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f7fc fdaf 	bl	8001774 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
#endif /*DUAL_CORE*/

   /* Get COMP interrupt source */
  if (__HAL_COMP_GET_IT_SOURCE(hcomp, COMP_IT_EN) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c20:	2b40      	cmp	r3, #64	; 0x40
 8004c22:	d136      	bne.n	8004c92 <HAL_COMP_IRQHandler+0x11a>
  {

    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C1I)) != 0UL)
 8004c24:	4b1f      	ldr	r3, [pc, #124]	; (8004ca4 <HAL_COMP_IRQHandler+0x12c>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c30:	d101      	bne.n	8004c36 <HAL_COMP_IRQHandler+0xbe>
 8004c32:	2301      	movs	r3, #1
 8004c34:	e000      	b.n	8004c38 <HAL_COMP_IRQHandler+0xc0>
 8004c36:	2300      	movs	r3, #0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00b      	beq.n	8004c54 <HAL_COMP_IRQHandler+0xdc>
    {
      /* Clear the COMP channel 1 interrupt flag */
         __HAL_COMP_CLEAR_C1IFLAG();
 8004c3c:	4b19      	ldr	r3, [pc, #100]	; (8004ca4 <HAL_COMP_IRQHandler+0x12c>)
 8004c3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004c42:	605a      	str	r2, [r3, #4]
   
      /* Disable COMP interrupt */
       __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c52:	601a      	str	r2, [r3, #0]
   
    }
    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C2I)) != 0UL)
 8004c54:	4b13      	ldr	r3, [pc, #76]	; (8004ca4 <HAL_COMP_IRQHandler+0x12c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c60:	d101      	bne.n	8004c66 <HAL_COMP_IRQHandler+0xee>
 8004c62:	2301      	movs	r3, #1
 8004c64:	e000      	b.n	8004c68 <HAL_COMP_IRQHandler+0xf0>
 8004c66:	2300      	movs	r3, #0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00b      	beq.n	8004c84 <HAL_COMP_IRQHandler+0x10c>
    {
     /* Clear the COMP channel 2 interrupt flag */
       __HAL_COMP_CLEAR_C2IFLAG();
 8004c6c:	4b0d      	ldr	r3, [pc, #52]	; (8004ca4 <HAL_COMP_IRQHandler+0x12c>)
 8004c6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c72:	605a      	str	r2, [r3, #4]
   
     /* Disable COMP interrupt */
     __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c82:	601a      	str	r2, [r3, #0]
       
    }

    /* Change COMP state */
    hcomp->State = HAL_COMP_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f7fc fd71 	bl	8001774 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }    
 

}
 8004c92:	bf00      	nop
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	5800380c 	.word	0x5800380c
 8004ca0:	58003810 	.word	0x58003810
 8004ca4:	58003800 	.word	0x58003800

08004ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004cb8:	4b0b      	ldr	r3, [pc, #44]	; (8004ce8 <__NVIC_SetPriorityGrouping+0x40>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004cd0:	4b06      	ldr	r3, [pc, #24]	; (8004cec <__NVIC_SetPriorityGrouping+0x44>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cd6:	4a04      	ldr	r2, [pc, #16]	; (8004ce8 <__NVIC_SetPriorityGrouping+0x40>)
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	60d3      	str	r3, [r2, #12]
}
 8004cdc:	bf00      	nop
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	e000ed00 	.word	0xe000ed00
 8004cec:	05fa0000 	.word	0x05fa0000

08004cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004cf4:	4b04      	ldr	r3, [pc, #16]	; (8004d08 <__NVIC_GetPriorityGrouping+0x18>)
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	0a1b      	lsrs	r3, r3, #8
 8004cfa:	f003 0307 	and.w	r3, r3, #7
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	e000ed00 	.word	0xe000ed00

08004d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	4603      	mov	r3, r0
 8004d14:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004d16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	db0b      	blt.n	8004d36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d1e:	88fb      	ldrh	r3, [r7, #6]
 8004d20:	f003 021f 	and.w	r2, r3, #31
 8004d24:	4907      	ldr	r1, [pc, #28]	; (8004d44 <__NVIC_EnableIRQ+0x38>)
 8004d26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d2a:	095b      	lsrs	r3, r3, #5
 8004d2c:	2001      	movs	r0, #1
 8004d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8004d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004d36:	bf00      	nop
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	e000e100 	.word	0xe000e100

08004d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	4603      	mov	r3, r0
 8004d50:	6039      	str	r1, [r7, #0]
 8004d52:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004d54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	db0a      	blt.n	8004d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	b2da      	uxtb	r2, r3
 8004d60:	490c      	ldr	r1, [pc, #48]	; (8004d94 <__NVIC_SetPriority+0x4c>)
 8004d62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d66:	0112      	lsls	r2, r2, #4
 8004d68:	b2d2      	uxtb	r2, r2
 8004d6a:	440b      	add	r3, r1
 8004d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d70:	e00a      	b.n	8004d88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	b2da      	uxtb	r2, r3
 8004d76:	4908      	ldr	r1, [pc, #32]	; (8004d98 <__NVIC_SetPriority+0x50>)
 8004d78:	88fb      	ldrh	r3, [r7, #6]
 8004d7a:	f003 030f 	and.w	r3, r3, #15
 8004d7e:	3b04      	subs	r3, #4
 8004d80:	0112      	lsls	r2, r2, #4
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	440b      	add	r3, r1
 8004d86:	761a      	strb	r2, [r3, #24]
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr
 8004d94:	e000e100 	.word	0xe000e100
 8004d98:	e000ed00 	.word	0xe000ed00

08004d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b089      	sub	sp, #36	; 0x24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f003 0307 	and.w	r3, r3, #7
 8004dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	f1c3 0307 	rsb	r3, r3, #7
 8004db6:	2b04      	cmp	r3, #4
 8004db8:	bf28      	it	cs
 8004dba:	2304      	movcs	r3, #4
 8004dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	2b06      	cmp	r3, #6
 8004dc4:	d902      	bls.n	8004dcc <NVIC_EncodePriority+0x30>
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	3b03      	subs	r3, #3
 8004dca:	e000      	b.n	8004dce <NVIC_EncodePriority+0x32>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dda:	43da      	mvns	r2, r3
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	401a      	ands	r2, r3
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004de4:	f04f 31ff 	mov.w	r1, #4294967295
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	fa01 f303 	lsl.w	r3, r1, r3
 8004dee:	43d9      	mvns	r1, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004df4:	4313      	orrs	r3, r2
         );
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3724      	adds	r7, #36	; 0x24
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
	...

08004e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e14:	d301      	bcc.n	8004e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e16:	2301      	movs	r3, #1
 8004e18:	e00f      	b.n	8004e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e1a:	4a0a      	ldr	r2, [pc, #40]	; (8004e44 <SysTick_Config+0x40>)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e22:	210f      	movs	r1, #15
 8004e24:	f04f 30ff 	mov.w	r0, #4294967295
 8004e28:	f7ff ff8e 	bl	8004d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e2c:	4b05      	ldr	r3, [pc, #20]	; (8004e44 <SysTick_Config+0x40>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e32:	4b04      	ldr	r3, [pc, #16]	; (8004e44 <SysTick_Config+0x40>)
 8004e34:	2207      	movs	r2, #7
 8004e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3708      	adds	r7, #8
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	e000e010 	.word	0xe000e010

08004e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f7ff ff29 	bl	8004ca8 <__NVIC_SetPriorityGrouping>
}
 8004e56:	bf00      	nop
 8004e58:	3708      	adds	r7, #8
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b086      	sub	sp, #24
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	4603      	mov	r3, r0
 8004e66:	60b9      	str	r1, [r7, #8]
 8004e68:	607a      	str	r2, [r7, #4]
 8004e6a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004e6c:	f7ff ff40 	bl	8004cf0 <__NVIC_GetPriorityGrouping>
 8004e70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	68b9      	ldr	r1, [r7, #8]
 8004e76:	6978      	ldr	r0, [r7, #20]
 8004e78:	f7ff ff90 	bl	8004d9c <NVIC_EncodePriority>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004e82:	4611      	mov	r1, r2
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7ff ff5f 	bl	8004d48 <__NVIC_SetPriority>
}
 8004e8a:	bf00      	nop
 8004e8c:	3718      	adds	r7, #24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b082      	sub	sp, #8
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	4603      	mov	r3, r0
 8004e9a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7ff ff33 	bl	8004d0c <__NVIC_EnableIRQ>
}
 8004ea6:	bf00      	nop
 8004ea8:	3708      	adds	r7, #8
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b082      	sub	sp, #8
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7ff ffa4 	bl	8004e04 <SysTick_Config>
 8004ebc:	4603      	mov	r3, r0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
	...

08004ec8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8004ecc:	4b07      	ldr	r3, [pc, #28]	; (8004eec <HAL_GetCurrentCPUID+0x24>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	091b      	lsrs	r3, r3, #4
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	2b07      	cmp	r3, #7
 8004ed8:	d101      	bne.n	8004ede <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e000      	b.n	8004ee0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8004ede:	2301      	movs	r3, #1
  }
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	e000ed00 	.word	0xe000ed00

08004ef0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e014      	b.n	8004f2c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	791b      	ldrb	r3, [r3, #4]
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d105      	bne.n	8004f18 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7fd f9a2 	bl	800225c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3708      	adds	r7, #8
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	795b      	ldrb	r3, [r3, #5]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d101      	bne.n	8004f4a <HAL_DAC_Start+0x16>
 8004f46:	2302      	movs	r3, #2
 8004f48:	e040      	b.n	8004fcc <HAL_DAC_Start+0x98>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6819      	ldr	r1, [r3, #0]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	f003 0310 	and.w	r3, r3, #16
 8004f62:	2201      	movs	r2, #1
 8004f64:	409a      	lsls	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10f      	bne.n	8004f94 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d11d      	bne.n	8004fbe <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f042 0201 	orr.w	r2, r2, #1
 8004f90:	605a      	str	r2, [r3, #4]
 8004f92:	e014      	b.n	8004fbe <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	f003 0310 	and.w	r3, r3, #16
 8004fa4:	2102      	movs	r1, #2
 8004fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d107      	bne.n	8004fbe <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f042 0202 	orr.w	r2, r2, #2
 8004fbc:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b087      	sub	sp, #28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
 8004fe4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d105      	bne.n	8005002 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	3308      	adds	r3, #8
 8004ffe:	617b      	str	r3, [r7, #20]
 8005000:	e004      	b.n	800500c <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4413      	add	r3, r2
 8005008:	3314      	adds	r3, #20
 800500a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	461a      	mov	r2, r3
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	371c      	adds	r7, #28
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
	...

08005024 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b088      	sub	sp, #32
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	795b      	ldrb	r3, [r3, #5]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d101      	bne.n	800503c <HAL_DAC_ConfigChannel+0x18>
 8005038:	2302      	movs	r3, #2
 800503a:	e11d      	b.n	8005278 <HAL_DAC_ConfigChannel+0x254>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2201      	movs	r2, #1
 8005040:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2202      	movs	r2, #2
 8005046:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b04      	cmp	r3, #4
 800504e:	d174      	bne.n	800513a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005050:	f7fd fb26 	bl	80026a0 <HAL_GetTick>
 8005054:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d134      	bne.n	80050c6 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800505c:	e011      	b.n	8005082 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800505e:	f7fd fb1f 	bl	80026a0 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	2b01      	cmp	r3, #1
 800506a:	d90a      	bls.n	8005082 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	f043 0208 	orr.w	r2, r3, #8
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2203      	movs	r2, #3
 800507c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e0fa      	b.n	8005278 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005088:	4b7d      	ldr	r3, [pc, #500]	; (8005280 <HAL_DAC_ConfigChannel+0x25c>)
 800508a:	4013      	ands	r3, r2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1e6      	bne.n	800505e <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8005090:	2001      	movs	r0, #1
 8005092:	f7fd fb11 	bl	80026b8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	6992      	ldr	r2, [r2, #24]
 800509e:	641a      	str	r2, [r3, #64]	; 0x40
 80050a0:	e01e      	b.n	80050e0 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80050a2:	f7fd fafd 	bl	80026a0 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d90a      	bls.n	80050c6 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	f043 0208 	orr.w	r2, r3, #8
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2203      	movs	r2, #3
 80050c0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e0d8      	b.n	8005278 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	dbe8      	blt.n	80050a2 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80050d0:	2001      	movs	r0, #1
 80050d2:	f7fd faf1 	bl	80026b8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	6992      	ldr	r2, [r2, #24]
 80050de:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f003 0310 	and.w	r3, r3, #16
 80050ec:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80050f0:	fa01 f303 	lsl.w	r3, r1, r3
 80050f4:	43db      	mvns	r3, r3
 80050f6:	ea02 0103 	and.w	r1, r2, r3
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	69da      	ldr	r2, [r3, #28]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f003 0310 	and.w	r3, r3, #16
 8005104:	409a      	lsls	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f003 0310 	and.w	r3, r3, #16
 800511a:	21ff      	movs	r1, #255	; 0xff
 800511c:	fa01 f303 	lsl.w	r3, r1, r3
 8005120:	43db      	mvns	r3, r3
 8005122:	ea02 0103 	and.w	r1, r2, r3
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	6a1a      	ldr	r2, [r3, #32]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f003 0310 	and.w	r3, r3, #16
 8005130:	409a      	lsls	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	430a      	orrs	r2, r1
 8005138:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d11d      	bne.n	800517e <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005148:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f003 0310 	and.w	r3, r3, #16
 8005150:	221f      	movs	r2, #31
 8005152:	fa02 f303 	lsl.w	r3, r2, r3
 8005156:	43db      	mvns	r3, r3
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	4013      	ands	r3, r2
 800515c:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f003 0310 	and.w	r3, r3, #16
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	fa02 f303 	lsl.w	r3, r2, r3
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	4313      	orrs	r3, r2
 8005174:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005184:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f003 0310 	and.w	r3, r3, #16
 800518c:	2207      	movs	r2, #7
 800518e:	fa02 f303 	lsl.w	r3, r2, r3
 8005192:	43db      	mvns	r3, r3
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	4013      	ands	r3, r2
 8005198:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d102      	bne.n	80051a8 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80051a2:	2300      	movs	r3, #0
 80051a4:	61fb      	str	r3, [r7, #28]
 80051a6:	e00f      	b.n	80051c8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d102      	bne.n	80051b6 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80051b0:	2301      	movs	r3, #1
 80051b2:	61fb      	str	r3, [r7, #28]
 80051b4:	e008      	b.n	80051c8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d102      	bne.n	80051c4 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80051be:	2301      	movs	r3, #1
 80051c0:	61fb      	str	r3, [r7, #28]
 80051c2:	e001      	b.n	80051c8 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80051c4:	2300      	movs	r3, #0
 80051c6:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	69fa      	ldr	r2, [r7, #28]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f003 0310 	and.w	r3, r3, #16
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	fa02 f303 	lsl.w	r3, r2, r3
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6819      	ldr	r1, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f003 0310 	and.w	r3, r3, #16
 80051fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005202:	fa02 f303 	lsl.w	r3, r2, r3
 8005206:	43da      	mvns	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	400a      	ands	r2, r1
 800520e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f003 0310 	and.w	r3, r3, #16
 800521e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005222:	fa02 f303 	lsl.w	r3, r2, r3
 8005226:	43db      	mvns	r3, r3
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	4013      	ands	r3, r2
 800522c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f003 0310 	and.w	r3, r3, #16
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	fa02 f303 	lsl.w	r3, r2, r3
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	4313      	orrs	r3, r2
 8005244:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6819      	ldr	r1, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f003 0310 	and.w	r3, r3, #16
 800525a:	22c0      	movs	r2, #192	; 0xc0
 800525c:	fa02 f303 	lsl.w	r3, r2, r3
 8005260:	43da      	mvns	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	400a      	ands	r2, r1
 8005268:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2201      	movs	r2, #1
 800526e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3720      	adds	r7, #32
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	20008000 	.word	0x20008000

08005284 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800528c:	f7fd fa08 	bl	80026a0 <HAL_GetTick>
 8005290:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e316      	b.n	80058ca <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a66      	ldr	r2, [pc, #408]	; (800543c <HAL_DMA_Init+0x1b8>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d04a      	beq.n	800533c <HAL_DMA_Init+0xb8>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a65      	ldr	r2, [pc, #404]	; (8005440 <HAL_DMA_Init+0x1bc>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d045      	beq.n	800533c <HAL_DMA_Init+0xb8>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a63      	ldr	r2, [pc, #396]	; (8005444 <HAL_DMA_Init+0x1c0>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d040      	beq.n	800533c <HAL_DMA_Init+0xb8>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a62      	ldr	r2, [pc, #392]	; (8005448 <HAL_DMA_Init+0x1c4>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d03b      	beq.n	800533c <HAL_DMA_Init+0xb8>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a60      	ldr	r2, [pc, #384]	; (800544c <HAL_DMA_Init+0x1c8>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d036      	beq.n	800533c <HAL_DMA_Init+0xb8>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a5f      	ldr	r2, [pc, #380]	; (8005450 <HAL_DMA_Init+0x1cc>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d031      	beq.n	800533c <HAL_DMA_Init+0xb8>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a5d      	ldr	r2, [pc, #372]	; (8005454 <HAL_DMA_Init+0x1d0>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d02c      	beq.n	800533c <HAL_DMA_Init+0xb8>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a5c      	ldr	r2, [pc, #368]	; (8005458 <HAL_DMA_Init+0x1d4>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d027      	beq.n	800533c <HAL_DMA_Init+0xb8>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a5a      	ldr	r2, [pc, #360]	; (800545c <HAL_DMA_Init+0x1d8>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d022      	beq.n	800533c <HAL_DMA_Init+0xb8>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a59      	ldr	r2, [pc, #356]	; (8005460 <HAL_DMA_Init+0x1dc>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d01d      	beq.n	800533c <HAL_DMA_Init+0xb8>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a57      	ldr	r2, [pc, #348]	; (8005464 <HAL_DMA_Init+0x1e0>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d018      	beq.n	800533c <HAL_DMA_Init+0xb8>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a56      	ldr	r2, [pc, #344]	; (8005468 <HAL_DMA_Init+0x1e4>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d013      	beq.n	800533c <HAL_DMA_Init+0xb8>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a54      	ldr	r2, [pc, #336]	; (800546c <HAL_DMA_Init+0x1e8>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d00e      	beq.n	800533c <HAL_DMA_Init+0xb8>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a53      	ldr	r2, [pc, #332]	; (8005470 <HAL_DMA_Init+0x1ec>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d009      	beq.n	800533c <HAL_DMA_Init+0xb8>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a51      	ldr	r2, [pc, #324]	; (8005474 <HAL_DMA_Init+0x1f0>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d004      	beq.n	800533c <HAL_DMA_Init+0xb8>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a50      	ldr	r2, [pc, #320]	; (8005478 <HAL_DMA_Init+0x1f4>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d101      	bne.n	8005340 <HAL_DMA_Init+0xbc>
 800533c:	2301      	movs	r3, #1
 800533e:	e000      	b.n	8005342 <HAL_DMA_Init+0xbe>
 8005340:	2300      	movs	r3, #0
 8005342:	2b00      	cmp	r3, #0
 8005344:	f000 813b 	beq.w	80055be <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2202      	movs	r2, #2
 800534c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a37      	ldr	r2, [pc, #220]	; (800543c <HAL_DMA_Init+0x1b8>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d04a      	beq.n	80053f8 <HAL_DMA_Init+0x174>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a36      	ldr	r2, [pc, #216]	; (8005440 <HAL_DMA_Init+0x1bc>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d045      	beq.n	80053f8 <HAL_DMA_Init+0x174>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a34      	ldr	r2, [pc, #208]	; (8005444 <HAL_DMA_Init+0x1c0>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d040      	beq.n	80053f8 <HAL_DMA_Init+0x174>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a33      	ldr	r2, [pc, #204]	; (8005448 <HAL_DMA_Init+0x1c4>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d03b      	beq.n	80053f8 <HAL_DMA_Init+0x174>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a31      	ldr	r2, [pc, #196]	; (800544c <HAL_DMA_Init+0x1c8>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d036      	beq.n	80053f8 <HAL_DMA_Init+0x174>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a30      	ldr	r2, [pc, #192]	; (8005450 <HAL_DMA_Init+0x1cc>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d031      	beq.n	80053f8 <HAL_DMA_Init+0x174>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a2e      	ldr	r2, [pc, #184]	; (8005454 <HAL_DMA_Init+0x1d0>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d02c      	beq.n	80053f8 <HAL_DMA_Init+0x174>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a2d      	ldr	r2, [pc, #180]	; (8005458 <HAL_DMA_Init+0x1d4>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d027      	beq.n	80053f8 <HAL_DMA_Init+0x174>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a2b      	ldr	r2, [pc, #172]	; (800545c <HAL_DMA_Init+0x1d8>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d022      	beq.n	80053f8 <HAL_DMA_Init+0x174>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a2a      	ldr	r2, [pc, #168]	; (8005460 <HAL_DMA_Init+0x1dc>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d01d      	beq.n	80053f8 <HAL_DMA_Init+0x174>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a28      	ldr	r2, [pc, #160]	; (8005464 <HAL_DMA_Init+0x1e0>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d018      	beq.n	80053f8 <HAL_DMA_Init+0x174>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a27      	ldr	r2, [pc, #156]	; (8005468 <HAL_DMA_Init+0x1e4>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d013      	beq.n	80053f8 <HAL_DMA_Init+0x174>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a25      	ldr	r2, [pc, #148]	; (800546c <HAL_DMA_Init+0x1e8>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d00e      	beq.n	80053f8 <HAL_DMA_Init+0x174>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a24      	ldr	r2, [pc, #144]	; (8005470 <HAL_DMA_Init+0x1ec>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d009      	beq.n	80053f8 <HAL_DMA_Init+0x174>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a22      	ldr	r2, [pc, #136]	; (8005474 <HAL_DMA_Init+0x1f0>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d004      	beq.n	80053f8 <HAL_DMA_Init+0x174>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a21      	ldr	r2, [pc, #132]	; (8005478 <HAL_DMA_Init+0x1f4>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d108      	bne.n	800540a <HAL_DMA_Init+0x186>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f022 0201 	bic.w	r2, r2, #1
 8005406:	601a      	str	r2, [r3, #0]
 8005408:	e007      	b.n	800541a <HAL_DMA_Init+0x196>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f022 0201 	bic.w	r2, r2, #1
 8005418:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800541a:	e02f      	b.n	800547c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800541c:	f7fd f940 	bl	80026a0 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b05      	cmp	r3, #5
 8005428:	d928      	bls.n	800547c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2220      	movs	r2, #32
 800542e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2203      	movs	r2, #3
 8005434:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e246      	b.n	80058ca <HAL_DMA_Init+0x646>
 800543c:	40020010 	.word	0x40020010
 8005440:	40020028 	.word	0x40020028
 8005444:	40020040 	.word	0x40020040
 8005448:	40020058 	.word	0x40020058
 800544c:	40020070 	.word	0x40020070
 8005450:	40020088 	.word	0x40020088
 8005454:	400200a0 	.word	0x400200a0
 8005458:	400200b8 	.word	0x400200b8
 800545c:	40020410 	.word	0x40020410
 8005460:	40020428 	.word	0x40020428
 8005464:	40020440 	.word	0x40020440
 8005468:	40020458 	.word	0x40020458
 800546c:	40020470 	.word	0x40020470
 8005470:	40020488 	.word	0x40020488
 8005474:	400204a0 	.word	0x400204a0
 8005478:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1c8      	bne.n	800541c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	4b83      	ldr	r3, [pc, #524]	; (80056a4 <HAL_DMA_Init+0x420>)
 8005496:	4013      	ands	r3, r2
 8005498:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80054a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054ae:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054ba:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a1b      	ldr	r3, [r3, #32]
 80054c0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054cc:	2b04      	cmp	r3, #4
 80054ce:	d107      	bne.n	80054e0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d8:	4313      	orrs	r3, r2
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	4313      	orrs	r3, r2
 80054de:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80054e0:	4b71      	ldr	r3, [pc, #452]	; (80056a8 <HAL_DMA_Init+0x424>)
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	4b71      	ldr	r3, [pc, #452]	; (80056ac <HAL_DMA_Init+0x428>)
 80054e6:	4013      	ands	r3, r2
 80054e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054ec:	d328      	bcc.n	8005540 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	2b28      	cmp	r3, #40	; 0x28
 80054f4:	d903      	bls.n	80054fe <HAL_DMA_Init+0x27a>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	2b2e      	cmp	r3, #46	; 0x2e
 80054fc:	d917      	bls.n	800552e <HAL_DMA_Init+0x2aa>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b3e      	cmp	r3, #62	; 0x3e
 8005504:	d903      	bls.n	800550e <HAL_DMA_Init+0x28a>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	2b42      	cmp	r3, #66	; 0x42
 800550c:	d90f      	bls.n	800552e <HAL_DMA_Init+0x2aa>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	2b46      	cmp	r3, #70	; 0x46
 8005514:	d903      	bls.n	800551e <HAL_DMA_Init+0x29a>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	2b48      	cmp	r3, #72	; 0x48
 800551c:	d907      	bls.n	800552e <HAL_DMA_Init+0x2aa>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	2b4e      	cmp	r3, #78	; 0x4e
 8005524:	d905      	bls.n	8005532 <HAL_DMA_Init+0x2ae>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	2b52      	cmp	r3, #82	; 0x52
 800552c:	d801      	bhi.n	8005532 <HAL_DMA_Init+0x2ae>
 800552e:	2301      	movs	r3, #1
 8005530:	e000      	b.n	8005534 <HAL_DMA_Init+0x2b0>
 8005532:	2300      	movs	r3, #0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d003      	beq.n	8005540 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800553e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f023 0307 	bic.w	r3, r3, #7
 8005556:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	4313      	orrs	r3, r2
 8005560:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005566:	2b04      	cmp	r3, #4
 8005568:	d117      	bne.n	800559a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	4313      	orrs	r3, r2
 8005572:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00e      	beq.n	800559a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f002 f8ed 	bl	800775c <DMA_CheckFifoParam>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d008      	beq.n	800559a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2240      	movs	r2, #64	; 0x40
 800558c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e197      	b.n	80058ca <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f002 f828 	bl	80075f8 <DMA_CalcBaseAndBitshift>
 80055a8:	4603      	mov	r3, r0
 80055aa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055b0:	f003 031f 	and.w	r3, r3, #31
 80055b4:	223f      	movs	r2, #63	; 0x3f
 80055b6:	409a      	lsls	r2, r3
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	609a      	str	r2, [r3, #8]
 80055bc:	e0cd      	b.n	800575a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a3b      	ldr	r2, [pc, #236]	; (80056b0 <HAL_DMA_Init+0x42c>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d022      	beq.n	800560e <HAL_DMA_Init+0x38a>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a39      	ldr	r2, [pc, #228]	; (80056b4 <HAL_DMA_Init+0x430>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d01d      	beq.n	800560e <HAL_DMA_Init+0x38a>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a38      	ldr	r2, [pc, #224]	; (80056b8 <HAL_DMA_Init+0x434>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d018      	beq.n	800560e <HAL_DMA_Init+0x38a>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a36      	ldr	r2, [pc, #216]	; (80056bc <HAL_DMA_Init+0x438>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d013      	beq.n	800560e <HAL_DMA_Init+0x38a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a35      	ldr	r2, [pc, #212]	; (80056c0 <HAL_DMA_Init+0x43c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00e      	beq.n	800560e <HAL_DMA_Init+0x38a>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a33      	ldr	r2, [pc, #204]	; (80056c4 <HAL_DMA_Init+0x440>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d009      	beq.n	800560e <HAL_DMA_Init+0x38a>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a32      	ldr	r2, [pc, #200]	; (80056c8 <HAL_DMA_Init+0x444>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d004      	beq.n	800560e <HAL_DMA_Init+0x38a>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a30      	ldr	r2, [pc, #192]	; (80056cc <HAL_DMA_Init+0x448>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d101      	bne.n	8005612 <HAL_DMA_Init+0x38e>
 800560e:	2301      	movs	r3, #1
 8005610:	e000      	b.n	8005614 <HAL_DMA_Init+0x390>
 8005612:	2300      	movs	r3, #0
 8005614:	2b00      	cmp	r3, #0
 8005616:	f000 8097 	beq.w	8005748 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a24      	ldr	r2, [pc, #144]	; (80056b0 <HAL_DMA_Init+0x42c>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d021      	beq.n	8005668 <HAL_DMA_Init+0x3e4>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a22      	ldr	r2, [pc, #136]	; (80056b4 <HAL_DMA_Init+0x430>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d01c      	beq.n	8005668 <HAL_DMA_Init+0x3e4>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a21      	ldr	r2, [pc, #132]	; (80056b8 <HAL_DMA_Init+0x434>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d017      	beq.n	8005668 <HAL_DMA_Init+0x3e4>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a1f      	ldr	r2, [pc, #124]	; (80056bc <HAL_DMA_Init+0x438>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d012      	beq.n	8005668 <HAL_DMA_Init+0x3e4>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a1e      	ldr	r2, [pc, #120]	; (80056c0 <HAL_DMA_Init+0x43c>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d00d      	beq.n	8005668 <HAL_DMA_Init+0x3e4>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a1c      	ldr	r2, [pc, #112]	; (80056c4 <HAL_DMA_Init+0x440>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d008      	beq.n	8005668 <HAL_DMA_Init+0x3e4>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a1b      	ldr	r2, [pc, #108]	; (80056c8 <HAL_DMA_Init+0x444>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d003      	beq.n	8005668 <HAL_DMA_Init+0x3e4>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a19      	ldr	r2, [pc, #100]	; (80056cc <HAL_DMA_Init+0x448>)
 8005666:	4293      	cmp	r3, r2
 8005668:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2202      	movs	r2, #2
 800566e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	4b12      	ldr	r3, [pc, #72]	; (80056d0 <HAL_DMA_Init+0x44c>)
 8005686:	4013      	ands	r3, r2
 8005688:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	2b40      	cmp	r3, #64	; 0x40
 8005690:	d020      	beq.n	80056d4 <HAL_DMA_Init+0x450>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	2b80      	cmp	r3, #128	; 0x80
 8005698:	d102      	bne.n	80056a0 <HAL_DMA_Init+0x41c>
 800569a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800569e:	e01a      	b.n	80056d6 <HAL_DMA_Init+0x452>
 80056a0:	2300      	movs	r3, #0
 80056a2:	e018      	b.n	80056d6 <HAL_DMA_Init+0x452>
 80056a4:	fe10803f 	.word	0xfe10803f
 80056a8:	5c001000 	.word	0x5c001000
 80056ac:	ffff0000 	.word	0xffff0000
 80056b0:	58025408 	.word	0x58025408
 80056b4:	5802541c 	.word	0x5802541c
 80056b8:	58025430 	.word	0x58025430
 80056bc:	58025444 	.word	0x58025444
 80056c0:	58025458 	.word	0x58025458
 80056c4:	5802546c 	.word	0x5802546c
 80056c8:	58025480 	.word	0x58025480
 80056cc:	58025494 	.word	0x58025494
 80056d0:	fffe000f 	.word	0xfffe000f
 80056d4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	68d2      	ldr	r2, [r2, #12]
 80056da:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80056dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80056e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80056ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80056f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80056fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005704:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	4313      	orrs	r3, r2
 800570a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	461a      	mov	r2, r3
 800571a:	4b6e      	ldr	r3, [pc, #440]	; (80058d4 <HAL_DMA_Init+0x650>)
 800571c:	4413      	add	r3, r2
 800571e:	4a6e      	ldr	r2, [pc, #440]	; (80058d8 <HAL_DMA_Init+0x654>)
 8005720:	fba2 2303 	umull	r2, r3, r2, r3
 8005724:	091b      	lsrs	r3, r3, #4
 8005726:	009a      	lsls	r2, r3, #2
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f001 ff63 	bl	80075f8 <DMA_CalcBaseAndBitshift>
 8005732:	4603      	mov	r3, r0
 8005734:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800573a:	f003 031f 	and.w	r3, r3, #31
 800573e:	2201      	movs	r2, #1
 8005740:	409a      	lsls	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	605a      	str	r2, [r3, #4]
 8005746:	e008      	b.n	800575a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2240      	movs	r2, #64	; 0x40
 800574c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2203      	movs	r2, #3
 8005752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e0b7      	b.n	80058ca <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a5f      	ldr	r2, [pc, #380]	; (80058dc <HAL_DMA_Init+0x658>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d072      	beq.n	800584a <HAL_DMA_Init+0x5c6>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a5d      	ldr	r2, [pc, #372]	; (80058e0 <HAL_DMA_Init+0x65c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d06d      	beq.n	800584a <HAL_DMA_Init+0x5c6>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a5c      	ldr	r2, [pc, #368]	; (80058e4 <HAL_DMA_Init+0x660>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d068      	beq.n	800584a <HAL_DMA_Init+0x5c6>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a5a      	ldr	r2, [pc, #360]	; (80058e8 <HAL_DMA_Init+0x664>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d063      	beq.n	800584a <HAL_DMA_Init+0x5c6>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a59      	ldr	r2, [pc, #356]	; (80058ec <HAL_DMA_Init+0x668>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d05e      	beq.n	800584a <HAL_DMA_Init+0x5c6>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a57      	ldr	r2, [pc, #348]	; (80058f0 <HAL_DMA_Init+0x66c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d059      	beq.n	800584a <HAL_DMA_Init+0x5c6>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a56      	ldr	r2, [pc, #344]	; (80058f4 <HAL_DMA_Init+0x670>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d054      	beq.n	800584a <HAL_DMA_Init+0x5c6>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a54      	ldr	r2, [pc, #336]	; (80058f8 <HAL_DMA_Init+0x674>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d04f      	beq.n	800584a <HAL_DMA_Init+0x5c6>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a53      	ldr	r2, [pc, #332]	; (80058fc <HAL_DMA_Init+0x678>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d04a      	beq.n	800584a <HAL_DMA_Init+0x5c6>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a51      	ldr	r2, [pc, #324]	; (8005900 <HAL_DMA_Init+0x67c>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d045      	beq.n	800584a <HAL_DMA_Init+0x5c6>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a50      	ldr	r2, [pc, #320]	; (8005904 <HAL_DMA_Init+0x680>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d040      	beq.n	800584a <HAL_DMA_Init+0x5c6>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a4e      	ldr	r2, [pc, #312]	; (8005908 <HAL_DMA_Init+0x684>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d03b      	beq.n	800584a <HAL_DMA_Init+0x5c6>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a4d      	ldr	r2, [pc, #308]	; (800590c <HAL_DMA_Init+0x688>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d036      	beq.n	800584a <HAL_DMA_Init+0x5c6>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a4b      	ldr	r2, [pc, #300]	; (8005910 <HAL_DMA_Init+0x68c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d031      	beq.n	800584a <HAL_DMA_Init+0x5c6>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a4a      	ldr	r2, [pc, #296]	; (8005914 <HAL_DMA_Init+0x690>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d02c      	beq.n	800584a <HAL_DMA_Init+0x5c6>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a48      	ldr	r2, [pc, #288]	; (8005918 <HAL_DMA_Init+0x694>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d027      	beq.n	800584a <HAL_DMA_Init+0x5c6>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a47      	ldr	r2, [pc, #284]	; (800591c <HAL_DMA_Init+0x698>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d022      	beq.n	800584a <HAL_DMA_Init+0x5c6>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a45      	ldr	r2, [pc, #276]	; (8005920 <HAL_DMA_Init+0x69c>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d01d      	beq.n	800584a <HAL_DMA_Init+0x5c6>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a44      	ldr	r2, [pc, #272]	; (8005924 <HAL_DMA_Init+0x6a0>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d018      	beq.n	800584a <HAL_DMA_Init+0x5c6>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a42      	ldr	r2, [pc, #264]	; (8005928 <HAL_DMA_Init+0x6a4>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d013      	beq.n	800584a <HAL_DMA_Init+0x5c6>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a41      	ldr	r2, [pc, #260]	; (800592c <HAL_DMA_Init+0x6a8>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d00e      	beq.n	800584a <HAL_DMA_Init+0x5c6>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a3f      	ldr	r2, [pc, #252]	; (8005930 <HAL_DMA_Init+0x6ac>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d009      	beq.n	800584a <HAL_DMA_Init+0x5c6>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a3e      	ldr	r2, [pc, #248]	; (8005934 <HAL_DMA_Init+0x6b0>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d004      	beq.n	800584a <HAL_DMA_Init+0x5c6>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a3c      	ldr	r2, [pc, #240]	; (8005938 <HAL_DMA_Init+0x6b4>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d101      	bne.n	800584e <HAL_DMA_Init+0x5ca>
 800584a:	2301      	movs	r3, #1
 800584c:	e000      	b.n	8005850 <HAL_DMA_Init+0x5cc>
 800584e:	2300      	movs	r3, #0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d032      	beq.n	80058ba <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f001 fffd 	bl	8007854 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	2b80      	cmp	r3, #128	; 0x80
 8005860:	d102      	bne.n	8005868 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005870:	b2d2      	uxtb	r2, r2
 8005872:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800587c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d010      	beq.n	80058a8 <HAL_DMA_Init+0x624>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	2b08      	cmp	r3, #8
 800588c:	d80c      	bhi.n	80058a8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f002 f87a 	bl	8007988 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005898:	2200      	movs	r2, #0
 800589a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80058a4:	605a      	str	r2, [r3, #4]
 80058a6:	e008      	b.n	80058ba <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3718      	adds	r7, #24
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	a7fdabf8 	.word	0xa7fdabf8
 80058d8:	cccccccd 	.word	0xcccccccd
 80058dc:	40020010 	.word	0x40020010
 80058e0:	40020028 	.word	0x40020028
 80058e4:	40020040 	.word	0x40020040
 80058e8:	40020058 	.word	0x40020058
 80058ec:	40020070 	.word	0x40020070
 80058f0:	40020088 	.word	0x40020088
 80058f4:	400200a0 	.word	0x400200a0
 80058f8:	400200b8 	.word	0x400200b8
 80058fc:	40020410 	.word	0x40020410
 8005900:	40020428 	.word	0x40020428
 8005904:	40020440 	.word	0x40020440
 8005908:	40020458 	.word	0x40020458
 800590c:	40020470 	.word	0x40020470
 8005910:	40020488 	.word	0x40020488
 8005914:	400204a0 	.word	0x400204a0
 8005918:	400204b8 	.word	0x400204b8
 800591c:	58025408 	.word	0x58025408
 8005920:	5802541c 	.word	0x5802541c
 8005924:	58025430 	.word	0x58025430
 8005928:	58025444 	.word	0x58025444
 800592c:	58025458 	.word	0x58025458
 8005930:	5802546c 	.word	0x5802546c
 8005934:	58025480 	.word	0x58025480
 8005938:	58025494 	.word	0x58025494

0800593c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
 8005948:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800594a:	2300      	movs	r3, #0
 800594c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e226      	b.n	8005da6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800595e:	2b01      	cmp	r3, #1
 8005960:	d101      	bne.n	8005966 <HAL_DMA_Start_IT+0x2a>
 8005962:	2302      	movs	r3, #2
 8005964:	e21f      	b.n	8005da6 <HAL_DMA_Start_IT+0x46a>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b01      	cmp	r3, #1
 8005978:	f040 820a 	bne.w	8005d90 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2202      	movs	r2, #2
 8005980:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a68      	ldr	r2, [pc, #416]	; (8005b30 <HAL_DMA_Start_IT+0x1f4>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d04a      	beq.n	8005a2a <HAL_DMA_Start_IT+0xee>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a66      	ldr	r2, [pc, #408]	; (8005b34 <HAL_DMA_Start_IT+0x1f8>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d045      	beq.n	8005a2a <HAL_DMA_Start_IT+0xee>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a65      	ldr	r2, [pc, #404]	; (8005b38 <HAL_DMA_Start_IT+0x1fc>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d040      	beq.n	8005a2a <HAL_DMA_Start_IT+0xee>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a63      	ldr	r2, [pc, #396]	; (8005b3c <HAL_DMA_Start_IT+0x200>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d03b      	beq.n	8005a2a <HAL_DMA_Start_IT+0xee>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a62      	ldr	r2, [pc, #392]	; (8005b40 <HAL_DMA_Start_IT+0x204>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d036      	beq.n	8005a2a <HAL_DMA_Start_IT+0xee>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a60      	ldr	r2, [pc, #384]	; (8005b44 <HAL_DMA_Start_IT+0x208>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d031      	beq.n	8005a2a <HAL_DMA_Start_IT+0xee>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a5f      	ldr	r2, [pc, #380]	; (8005b48 <HAL_DMA_Start_IT+0x20c>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d02c      	beq.n	8005a2a <HAL_DMA_Start_IT+0xee>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a5d      	ldr	r2, [pc, #372]	; (8005b4c <HAL_DMA_Start_IT+0x210>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d027      	beq.n	8005a2a <HAL_DMA_Start_IT+0xee>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a5c      	ldr	r2, [pc, #368]	; (8005b50 <HAL_DMA_Start_IT+0x214>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d022      	beq.n	8005a2a <HAL_DMA_Start_IT+0xee>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a5a      	ldr	r2, [pc, #360]	; (8005b54 <HAL_DMA_Start_IT+0x218>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d01d      	beq.n	8005a2a <HAL_DMA_Start_IT+0xee>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a59      	ldr	r2, [pc, #356]	; (8005b58 <HAL_DMA_Start_IT+0x21c>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d018      	beq.n	8005a2a <HAL_DMA_Start_IT+0xee>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a57      	ldr	r2, [pc, #348]	; (8005b5c <HAL_DMA_Start_IT+0x220>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d013      	beq.n	8005a2a <HAL_DMA_Start_IT+0xee>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a56      	ldr	r2, [pc, #344]	; (8005b60 <HAL_DMA_Start_IT+0x224>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d00e      	beq.n	8005a2a <HAL_DMA_Start_IT+0xee>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a54      	ldr	r2, [pc, #336]	; (8005b64 <HAL_DMA_Start_IT+0x228>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d009      	beq.n	8005a2a <HAL_DMA_Start_IT+0xee>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a53      	ldr	r2, [pc, #332]	; (8005b68 <HAL_DMA_Start_IT+0x22c>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d004      	beq.n	8005a2a <HAL_DMA_Start_IT+0xee>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a51      	ldr	r2, [pc, #324]	; (8005b6c <HAL_DMA_Start_IT+0x230>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d108      	bne.n	8005a3c <HAL_DMA_Start_IT+0x100>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 0201 	bic.w	r2, r2, #1
 8005a38:	601a      	str	r2, [r3, #0]
 8005a3a:	e007      	b.n	8005a4c <HAL_DMA_Start_IT+0x110>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f022 0201 	bic.w	r2, r2, #1
 8005a4a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	68b9      	ldr	r1, [r7, #8]
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f001 fc24 	bl	80072a0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a34      	ldr	r2, [pc, #208]	; (8005b30 <HAL_DMA_Start_IT+0x1f4>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d04a      	beq.n	8005af8 <HAL_DMA_Start_IT+0x1bc>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a33      	ldr	r2, [pc, #204]	; (8005b34 <HAL_DMA_Start_IT+0x1f8>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d045      	beq.n	8005af8 <HAL_DMA_Start_IT+0x1bc>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a31      	ldr	r2, [pc, #196]	; (8005b38 <HAL_DMA_Start_IT+0x1fc>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d040      	beq.n	8005af8 <HAL_DMA_Start_IT+0x1bc>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a30      	ldr	r2, [pc, #192]	; (8005b3c <HAL_DMA_Start_IT+0x200>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d03b      	beq.n	8005af8 <HAL_DMA_Start_IT+0x1bc>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a2e      	ldr	r2, [pc, #184]	; (8005b40 <HAL_DMA_Start_IT+0x204>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d036      	beq.n	8005af8 <HAL_DMA_Start_IT+0x1bc>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a2d      	ldr	r2, [pc, #180]	; (8005b44 <HAL_DMA_Start_IT+0x208>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d031      	beq.n	8005af8 <HAL_DMA_Start_IT+0x1bc>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a2b      	ldr	r2, [pc, #172]	; (8005b48 <HAL_DMA_Start_IT+0x20c>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d02c      	beq.n	8005af8 <HAL_DMA_Start_IT+0x1bc>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a2a      	ldr	r2, [pc, #168]	; (8005b4c <HAL_DMA_Start_IT+0x210>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d027      	beq.n	8005af8 <HAL_DMA_Start_IT+0x1bc>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a28      	ldr	r2, [pc, #160]	; (8005b50 <HAL_DMA_Start_IT+0x214>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d022      	beq.n	8005af8 <HAL_DMA_Start_IT+0x1bc>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a27      	ldr	r2, [pc, #156]	; (8005b54 <HAL_DMA_Start_IT+0x218>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d01d      	beq.n	8005af8 <HAL_DMA_Start_IT+0x1bc>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a25      	ldr	r2, [pc, #148]	; (8005b58 <HAL_DMA_Start_IT+0x21c>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d018      	beq.n	8005af8 <HAL_DMA_Start_IT+0x1bc>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a24      	ldr	r2, [pc, #144]	; (8005b5c <HAL_DMA_Start_IT+0x220>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d013      	beq.n	8005af8 <HAL_DMA_Start_IT+0x1bc>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a22      	ldr	r2, [pc, #136]	; (8005b60 <HAL_DMA_Start_IT+0x224>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d00e      	beq.n	8005af8 <HAL_DMA_Start_IT+0x1bc>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a21      	ldr	r2, [pc, #132]	; (8005b64 <HAL_DMA_Start_IT+0x228>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d009      	beq.n	8005af8 <HAL_DMA_Start_IT+0x1bc>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a1f      	ldr	r2, [pc, #124]	; (8005b68 <HAL_DMA_Start_IT+0x22c>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d004      	beq.n	8005af8 <HAL_DMA_Start_IT+0x1bc>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a1e      	ldr	r2, [pc, #120]	; (8005b6c <HAL_DMA_Start_IT+0x230>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d101      	bne.n	8005afc <HAL_DMA_Start_IT+0x1c0>
 8005af8:	2301      	movs	r3, #1
 8005afa:	e000      	b.n	8005afe <HAL_DMA_Start_IT+0x1c2>
 8005afc:	2300      	movs	r3, #0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d036      	beq.n	8005b70 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f023 021e 	bic.w	r2, r3, #30
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f042 0216 	orr.w	r2, r2, #22
 8005b14:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d03e      	beq.n	8005b9c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f042 0208 	orr.w	r2, r2, #8
 8005b2c:	601a      	str	r2, [r3, #0]
 8005b2e:	e035      	b.n	8005b9c <HAL_DMA_Start_IT+0x260>
 8005b30:	40020010 	.word	0x40020010
 8005b34:	40020028 	.word	0x40020028
 8005b38:	40020040 	.word	0x40020040
 8005b3c:	40020058 	.word	0x40020058
 8005b40:	40020070 	.word	0x40020070
 8005b44:	40020088 	.word	0x40020088
 8005b48:	400200a0 	.word	0x400200a0
 8005b4c:	400200b8 	.word	0x400200b8
 8005b50:	40020410 	.word	0x40020410
 8005b54:	40020428 	.word	0x40020428
 8005b58:	40020440 	.word	0x40020440
 8005b5c:	40020458 	.word	0x40020458
 8005b60:	40020470 	.word	0x40020470
 8005b64:	40020488 	.word	0x40020488
 8005b68:	400204a0 	.word	0x400204a0
 8005b6c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f023 020e 	bic.w	r2, r3, #14
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f042 020a 	orr.w	r2, r2, #10
 8005b82:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d007      	beq.n	8005b9c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f042 0204 	orr.w	r2, r2, #4
 8005b9a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a83      	ldr	r2, [pc, #524]	; (8005db0 <HAL_DMA_Start_IT+0x474>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d072      	beq.n	8005c8c <HAL_DMA_Start_IT+0x350>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a82      	ldr	r2, [pc, #520]	; (8005db4 <HAL_DMA_Start_IT+0x478>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d06d      	beq.n	8005c8c <HAL_DMA_Start_IT+0x350>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a80      	ldr	r2, [pc, #512]	; (8005db8 <HAL_DMA_Start_IT+0x47c>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d068      	beq.n	8005c8c <HAL_DMA_Start_IT+0x350>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a7f      	ldr	r2, [pc, #508]	; (8005dbc <HAL_DMA_Start_IT+0x480>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d063      	beq.n	8005c8c <HAL_DMA_Start_IT+0x350>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a7d      	ldr	r2, [pc, #500]	; (8005dc0 <HAL_DMA_Start_IT+0x484>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d05e      	beq.n	8005c8c <HAL_DMA_Start_IT+0x350>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a7c      	ldr	r2, [pc, #496]	; (8005dc4 <HAL_DMA_Start_IT+0x488>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d059      	beq.n	8005c8c <HAL_DMA_Start_IT+0x350>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a7a      	ldr	r2, [pc, #488]	; (8005dc8 <HAL_DMA_Start_IT+0x48c>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d054      	beq.n	8005c8c <HAL_DMA_Start_IT+0x350>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a79      	ldr	r2, [pc, #484]	; (8005dcc <HAL_DMA_Start_IT+0x490>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d04f      	beq.n	8005c8c <HAL_DMA_Start_IT+0x350>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a77      	ldr	r2, [pc, #476]	; (8005dd0 <HAL_DMA_Start_IT+0x494>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d04a      	beq.n	8005c8c <HAL_DMA_Start_IT+0x350>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a76      	ldr	r2, [pc, #472]	; (8005dd4 <HAL_DMA_Start_IT+0x498>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d045      	beq.n	8005c8c <HAL_DMA_Start_IT+0x350>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a74      	ldr	r2, [pc, #464]	; (8005dd8 <HAL_DMA_Start_IT+0x49c>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d040      	beq.n	8005c8c <HAL_DMA_Start_IT+0x350>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a73      	ldr	r2, [pc, #460]	; (8005ddc <HAL_DMA_Start_IT+0x4a0>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d03b      	beq.n	8005c8c <HAL_DMA_Start_IT+0x350>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a71      	ldr	r2, [pc, #452]	; (8005de0 <HAL_DMA_Start_IT+0x4a4>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d036      	beq.n	8005c8c <HAL_DMA_Start_IT+0x350>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a70      	ldr	r2, [pc, #448]	; (8005de4 <HAL_DMA_Start_IT+0x4a8>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d031      	beq.n	8005c8c <HAL_DMA_Start_IT+0x350>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a6e      	ldr	r2, [pc, #440]	; (8005de8 <HAL_DMA_Start_IT+0x4ac>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d02c      	beq.n	8005c8c <HAL_DMA_Start_IT+0x350>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a6d      	ldr	r2, [pc, #436]	; (8005dec <HAL_DMA_Start_IT+0x4b0>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d027      	beq.n	8005c8c <HAL_DMA_Start_IT+0x350>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a6b      	ldr	r2, [pc, #428]	; (8005df0 <HAL_DMA_Start_IT+0x4b4>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d022      	beq.n	8005c8c <HAL_DMA_Start_IT+0x350>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a6a      	ldr	r2, [pc, #424]	; (8005df4 <HAL_DMA_Start_IT+0x4b8>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d01d      	beq.n	8005c8c <HAL_DMA_Start_IT+0x350>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a68      	ldr	r2, [pc, #416]	; (8005df8 <HAL_DMA_Start_IT+0x4bc>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d018      	beq.n	8005c8c <HAL_DMA_Start_IT+0x350>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a67      	ldr	r2, [pc, #412]	; (8005dfc <HAL_DMA_Start_IT+0x4c0>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d013      	beq.n	8005c8c <HAL_DMA_Start_IT+0x350>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a65      	ldr	r2, [pc, #404]	; (8005e00 <HAL_DMA_Start_IT+0x4c4>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d00e      	beq.n	8005c8c <HAL_DMA_Start_IT+0x350>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a64      	ldr	r2, [pc, #400]	; (8005e04 <HAL_DMA_Start_IT+0x4c8>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d009      	beq.n	8005c8c <HAL_DMA_Start_IT+0x350>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a62      	ldr	r2, [pc, #392]	; (8005e08 <HAL_DMA_Start_IT+0x4cc>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d004      	beq.n	8005c8c <HAL_DMA_Start_IT+0x350>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a61      	ldr	r2, [pc, #388]	; (8005e0c <HAL_DMA_Start_IT+0x4d0>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d101      	bne.n	8005c90 <HAL_DMA_Start_IT+0x354>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e000      	b.n	8005c92 <HAL_DMA_Start_IT+0x356>
 8005c90:	2300      	movs	r3, #0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d01a      	beq.n	8005ccc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d007      	beq.n	8005cb4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cb2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d007      	beq.n	8005ccc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cca:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a37      	ldr	r2, [pc, #220]	; (8005db0 <HAL_DMA_Start_IT+0x474>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d04a      	beq.n	8005d6c <HAL_DMA_Start_IT+0x430>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a36      	ldr	r2, [pc, #216]	; (8005db4 <HAL_DMA_Start_IT+0x478>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d045      	beq.n	8005d6c <HAL_DMA_Start_IT+0x430>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a34      	ldr	r2, [pc, #208]	; (8005db8 <HAL_DMA_Start_IT+0x47c>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d040      	beq.n	8005d6c <HAL_DMA_Start_IT+0x430>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a33      	ldr	r2, [pc, #204]	; (8005dbc <HAL_DMA_Start_IT+0x480>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d03b      	beq.n	8005d6c <HAL_DMA_Start_IT+0x430>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a31      	ldr	r2, [pc, #196]	; (8005dc0 <HAL_DMA_Start_IT+0x484>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d036      	beq.n	8005d6c <HAL_DMA_Start_IT+0x430>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a30      	ldr	r2, [pc, #192]	; (8005dc4 <HAL_DMA_Start_IT+0x488>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d031      	beq.n	8005d6c <HAL_DMA_Start_IT+0x430>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a2e      	ldr	r2, [pc, #184]	; (8005dc8 <HAL_DMA_Start_IT+0x48c>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d02c      	beq.n	8005d6c <HAL_DMA_Start_IT+0x430>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a2d      	ldr	r2, [pc, #180]	; (8005dcc <HAL_DMA_Start_IT+0x490>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d027      	beq.n	8005d6c <HAL_DMA_Start_IT+0x430>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a2b      	ldr	r2, [pc, #172]	; (8005dd0 <HAL_DMA_Start_IT+0x494>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d022      	beq.n	8005d6c <HAL_DMA_Start_IT+0x430>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a2a      	ldr	r2, [pc, #168]	; (8005dd4 <HAL_DMA_Start_IT+0x498>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d01d      	beq.n	8005d6c <HAL_DMA_Start_IT+0x430>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a28      	ldr	r2, [pc, #160]	; (8005dd8 <HAL_DMA_Start_IT+0x49c>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d018      	beq.n	8005d6c <HAL_DMA_Start_IT+0x430>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a27      	ldr	r2, [pc, #156]	; (8005ddc <HAL_DMA_Start_IT+0x4a0>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d013      	beq.n	8005d6c <HAL_DMA_Start_IT+0x430>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a25      	ldr	r2, [pc, #148]	; (8005de0 <HAL_DMA_Start_IT+0x4a4>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d00e      	beq.n	8005d6c <HAL_DMA_Start_IT+0x430>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a24      	ldr	r2, [pc, #144]	; (8005de4 <HAL_DMA_Start_IT+0x4a8>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d009      	beq.n	8005d6c <HAL_DMA_Start_IT+0x430>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a22      	ldr	r2, [pc, #136]	; (8005de8 <HAL_DMA_Start_IT+0x4ac>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d004      	beq.n	8005d6c <HAL_DMA_Start_IT+0x430>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a21      	ldr	r2, [pc, #132]	; (8005dec <HAL_DMA_Start_IT+0x4b0>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d108      	bne.n	8005d7e <HAL_DMA_Start_IT+0x442>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f042 0201 	orr.w	r2, r2, #1
 8005d7a:	601a      	str	r2, [r3, #0]
 8005d7c:	e012      	b.n	8005da4 <HAL_DMA_Start_IT+0x468>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f042 0201 	orr.w	r2, r2, #1
 8005d8c:	601a      	str	r2, [r3, #0]
 8005d8e:	e009      	b.n	8005da4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d96:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3718      	adds	r7, #24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	40020010 	.word	0x40020010
 8005db4:	40020028 	.word	0x40020028
 8005db8:	40020040 	.word	0x40020040
 8005dbc:	40020058 	.word	0x40020058
 8005dc0:	40020070 	.word	0x40020070
 8005dc4:	40020088 	.word	0x40020088
 8005dc8:	400200a0 	.word	0x400200a0
 8005dcc:	400200b8 	.word	0x400200b8
 8005dd0:	40020410 	.word	0x40020410
 8005dd4:	40020428 	.word	0x40020428
 8005dd8:	40020440 	.word	0x40020440
 8005ddc:	40020458 	.word	0x40020458
 8005de0:	40020470 	.word	0x40020470
 8005de4:	40020488 	.word	0x40020488
 8005de8:	400204a0 	.word	0x400204a0
 8005dec:	400204b8 	.word	0x400204b8
 8005df0:	58025408 	.word	0x58025408
 8005df4:	5802541c 	.word	0x5802541c
 8005df8:	58025430 	.word	0x58025430
 8005dfc:	58025444 	.word	0x58025444
 8005e00:	58025458 	.word	0x58025458
 8005e04:	5802546c 	.word	0x5802546c
 8005e08:	58025480 	.word	0x58025480
 8005e0c:	58025494 	.word	0x58025494

08005e10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005e18:	f7fc fc42 	bl	80026a0 <HAL_GetTick>
 8005e1c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d101      	bne.n	8005e28 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e2dc      	b.n	80063e2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d008      	beq.n	8005e46 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2280      	movs	r2, #128	; 0x80
 8005e38:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e2cd      	b.n	80063e2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a76      	ldr	r2, [pc, #472]	; (8006024 <HAL_DMA_Abort+0x214>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d04a      	beq.n	8005ee6 <HAL_DMA_Abort+0xd6>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a74      	ldr	r2, [pc, #464]	; (8006028 <HAL_DMA_Abort+0x218>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d045      	beq.n	8005ee6 <HAL_DMA_Abort+0xd6>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a73      	ldr	r2, [pc, #460]	; (800602c <HAL_DMA_Abort+0x21c>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d040      	beq.n	8005ee6 <HAL_DMA_Abort+0xd6>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a71      	ldr	r2, [pc, #452]	; (8006030 <HAL_DMA_Abort+0x220>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d03b      	beq.n	8005ee6 <HAL_DMA_Abort+0xd6>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a70      	ldr	r2, [pc, #448]	; (8006034 <HAL_DMA_Abort+0x224>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d036      	beq.n	8005ee6 <HAL_DMA_Abort+0xd6>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a6e      	ldr	r2, [pc, #440]	; (8006038 <HAL_DMA_Abort+0x228>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d031      	beq.n	8005ee6 <HAL_DMA_Abort+0xd6>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a6d      	ldr	r2, [pc, #436]	; (800603c <HAL_DMA_Abort+0x22c>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d02c      	beq.n	8005ee6 <HAL_DMA_Abort+0xd6>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a6b      	ldr	r2, [pc, #428]	; (8006040 <HAL_DMA_Abort+0x230>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d027      	beq.n	8005ee6 <HAL_DMA_Abort+0xd6>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a6a      	ldr	r2, [pc, #424]	; (8006044 <HAL_DMA_Abort+0x234>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d022      	beq.n	8005ee6 <HAL_DMA_Abort+0xd6>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a68      	ldr	r2, [pc, #416]	; (8006048 <HAL_DMA_Abort+0x238>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d01d      	beq.n	8005ee6 <HAL_DMA_Abort+0xd6>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a67      	ldr	r2, [pc, #412]	; (800604c <HAL_DMA_Abort+0x23c>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d018      	beq.n	8005ee6 <HAL_DMA_Abort+0xd6>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a65      	ldr	r2, [pc, #404]	; (8006050 <HAL_DMA_Abort+0x240>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d013      	beq.n	8005ee6 <HAL_DMA_Abort+0xd6>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a64      	ldr	r2, [pc, #400]	; (8006054 <HAL_DMA_Abort+0x244>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d00e      	beq.n	8005ee6 <HAL_DMA_Abort+0xd6>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a62      	ldr	r2, [pc, #392]	; (8006058 <HAL_DMA_Abort+0x248>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d009      	beq.n	8005ee6 <HAL_DMA_Abort+0xd6>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a61      	ldr	r2, [pc, #388]	; (800605c <HAL_DMA_Abort+0x24c>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d004      	beq.n	8005ee6 <HAL_DMA_Abort+0xd6>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a5f      	ldr	r2, [pc, #380]	; (8006060 <HAL_DMA_Abort+0x250>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d101      	bne.n	8005eea <HAL_DMA_Abort+0xda>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e000      	b.n	8005eec <HAL_DMA_Abort+0xdc>
 8005eea:	2300      	movs	r3, #0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d013      	beq.n	8005f18 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 021e 	bic.w	r2, r2, #30
 8005efe:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	695a      	ldr	r2, [r3, #20]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f0e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	617b      	str	r3, [r7, #20]
 8005f16:	e00a      	b.n	8005f2e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f022 020e 	bic.w	r2, r2, #14
 8005f26:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a3c      	ldr	r2, [pc, #240]	; (8006024 <HAL_DMA_Abort+0x214>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d072      	beq.n	800601e <HAL_DMA_Abort+0x20e>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a3a      	ldr	r2, [pc, #232]	; (8006028 <HAL_DMA_Abort+0x218>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d06d      	beq.n	800601e <HAL_DMA_Abort+0x20e>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a39      	ldr	r2, [pc, #228]	; (800602c <HAL_DMA_Abort+0x21c>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d068      	beq.n	800601e <HAL_DMA_Abort+0x20e>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a37      	ldr	r2, [pc, #220]	; (8006030 <HAL_DMA_Abort+0x220>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d063      	beq.n	800601e <HAL_DMA_Abort+0x20e>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a36      	ldr	r2, [pc, #216]	; (8006034 <HAL_DMA_Abort+0x224>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d05e      	beq.n	800601e <HAL_DMA_Abort+0x20e>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a34      	ldr	r2, [pc, #208]	; (8006038 <HAL_DMA_Abort+0x228>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d059      	beq.n	800601e <HAL_DMA_Abort+0x20e>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a33      	ldr	r2, [pc, #204]	; (800603c <HAL_DMA_Abort+0x22c>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d054      	beq.n	800601e <HAL_DMA_Abort+0x20e>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a31      	ldr	r2, [pc, #196]	; (8006040 <HAL_DMA_Abort+0x230>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d04f      	beq.n	800601e <HAL_DMA_Abort+0x20e>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a30      	ldr	r2, [pc, #192]	; (8006044 <HAL_DMA_Abort+0x234>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d04a      	beq.n	800601e <HAL_DMA_Abort+0x20e>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a2e      	ldr	r2, [pc, #184]	; (8006048 <HAL_DMA_Abort+0x238>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d045      	beq.n	800601e <HAL_DMA_Abort+0x20e>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a2d      	ldr	r2, [pc, #180]	; (800604c <HAL_DMA_Abort+0x23c>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d040      	beq.n	800601e <HAL_DMA_Abort+0x20e>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a2b      	ldr	r2, [pc, #172]	; (8006050 <HAL_DMA_Abort+0x240>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d03b      	beq.n	800601e <HAL_DMA_Abort+0x20e>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a2a      	ldr	r2, [pc, #168]	; (8006054 <HAL_DMA_Abort+0x244>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d036      	beq.n	800601e <HAL_DMA_Abort+0x20e>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a28      	ldr	r2, [pc, #160]	; (8006058 <HAL_DMA_Abort+0x248>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d031      	beq.n	800601e <HAL_DMA_Abort+0x20e>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a27      	ldr	r2, [pc, #156]	; (800605c <HAL_DMA_Abort+0x24c>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d02c      	beq.n	800601e <HAL_DMA_Abort+0x20e>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a25      	ldr	r2, [pc, #148]	; (8006060 <HAL_DMA_Abort+0x250>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d027      	beq.n	800601e <HAL_DMA_Abort+0x20e>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a24      	ldr	r2, [pc, #144]	; (8006064 <HAL_DMA_Abort+0x254>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d022      	beq.n	800601e <HAL_DMA_Abort+0x20e>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a22      	ldr	r2, [pc, #136]	; (8006068 <HAL_DMA_Abort+0x258>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d01d      	beq.n	800601e <HAL_DMA_Abort+0x20e>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a21      	ldr	r2, [pc, #132]	; (800606c <HAL_DMA_Abort+0x25c>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d018      	beq.n	800601e <HAL_DMA_Abort+0x20e>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a1f      	ldr	r2, [pc, #124]	; (8006070 <HAL_DMA_Abort+0x260>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d013      	beq.n	800601e <HAL_DMA_Abort+0x20e>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a1e      	ldr	r2, [pc, #120]	; (8006074 <HAL_DMA_Abort+0x264>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d00e      	beq.n	800601e <HAL_DMA_Abort+0x20e>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a1c      	ldr	r2, [pc, #112]	; (8006078 <HAL_DMA_Abort+0x268>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d009      	beq.n	800601e <HAL_DMA_Abort+0x20e>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a1b      	ldr	r2, [pc, #108]	; (800607c <HAL_DMA_Abort+0x26c>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d004      	beq.n	800601e <HAL_DMA_Abort+0x20e>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a19      	ldr	r2, [pc, #100]	; (8006080 <HAL_DMA_Abort+0x270>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d132      	bne.n	8006084 <HAL_DMA_Abort+0x274>
 800601e:	2301      	movs	r3, #1
 8006020:	e031      	b.n	8006086 <HAL_DMA_Abort+0x276>
 8006022:	bf00      	nop
 8006024:	40020010 	.word	0x40020010
 8006028:	40020028 	.word	0x40020028
 800602c:	40020040 	.word	0x40020040
 8006030:	40020058 	.word	0x40020058
 8006034:	40020070 	.word	0x40020070
 8006038:	40020088 	.word	0x40020088
 800603c:	400200a0 	.word	0x400200a0
 8006040:	400200b8 	.word	0x400200b8
 8006044:	40020410 	.word	0x40020410
 8006048:	40020428 	.word	0x40020428
 800604c:	40020440 	.word	0x40020440
 8006050:	40020458 	.word	0x40020458
 8006054:	40020470 	.word	0x40020470
 8006058:	40020488 	.word	0x40020488
 800605c:	400204a0 	.word	0x400204a0
 8006060:	400204b8 	.word	0x400204b8
 8006064:	58025408 	.word	0x58025408
 8006068:	5802541c 	.word	0x5802541c
 800606c:	58025430 	.word	0x58025430
 8006070:	58025444 	.word	0x58025444
 8006074:	58025458 	.word	0x58025458
 8006078:	5802546c 	.word	0x5802546c
 800607c:	58025480 	.word	0x58025480
 8006080:	58025494 	.word	0x58025494
 8006084:	2300      	movs	r3, #0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d007      	beq.n	800609a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006094:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006098:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a6d      	ldr	r2, [pc, #436]	; (8006254 <HAL_DMA_Abort+0x444>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d04a      	beq.n	800613a <HAL_DMA_Abort+0x32a>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a6b      	ldr	r2, [pc, #428]	; (8006258 <HAL_DMA_Abort+0x448>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d045      	beq.n	800613a <HAL_DMA_Abort+0x32a>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a6a      	ldr	r2, [pc, #424]	; (800625c <HAL_DMA_Abort+0x44c>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d040      	beq.n	800613a <HAL_DMA_Abort+0x32a>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a68      	ldr	r2, [pc, #416]	; (8006260 <HAL_DMA_Abort+0x450>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d03b      	beq.n	800613a <HAL_DMA_Abort+0x32a>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a67      	ldr	r2, [pc, #412]	; (8006264 <HAL_DMA_Abort+0x454>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d036      	beq.n	800613a <HAL_DMA_Abort+0x32a>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a65      	ldr	r2, [pc, #404]	; (8006268 <HAL_DMA_Abort+0x458>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d031      	beq.n	800613a <HAL_DMA_Abort+0x32a>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a64      	ldr	r2, [pc, #400]	; (800626c <HAL_DMA_Abort+0x45c>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d02c      	beq.n	800613a <HAL_DMA_Abort+0x32a>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a62      	ldr	r2, [pc, #392]	; (8006270 <HAL_DMA_Abort+0x460>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d027      	beq.n	800613a <HAL_DMA_Abort+0x32a>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a61      	ldr	r2, [pc, #388]	; (8006274 <HAL_DMA_Abort+0x464>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d022      	beq.n	800613a <HAL_DMA_Abort+0x32a>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a5f      	ldr	r2, [pc, #380]	; (8006278 <HAL_DMA_Abort+0x468>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d01d      	beq.n	800613a <HAL_DMA_Abort+0x32a>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a5e      	ldr	r2, [pc, #376]	; (800627c <HAL_DMA_Abort+0x46c>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d018      	beq.n	800613a <HAL_DMA_Abort+0x32a>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a5c      	ldr	r2, [pc, #368]	; (8006280 <HAL_DMA_Abort+0x470>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d013      	beq.n	800613a <HAL_DMA_Abort+0x32a>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a5b      	ldr	r2, [pc, #364]	; (8006284 <HAL_DMA_Abort+0x474>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d00e      	beq.n	800613a <HAL_DMA_Abort+0x32a>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a59      	ldr	r2, [pc, #356]	; (8006288 <HAL_DMA_Abort+0x478>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d009      	beq.n	800613a <HAL_DMA_Abort+0x32a>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a58      	ldr	r2, [pc, #352]	; (800628c <HAL_DMA_Abort+0x47c>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d004      	beq.n	800613a <HAL_DMA_Abort+0x32a>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a56      	ldr	r2, [pc, #344]	; (8006290 <HAL_DMA_Abort+0x480>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d108      	bne.n	800614c <HAL_DMA_Abort+0x33c>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f022 0201 	bic.w	r2, r2, #1
 8006148:	601a      	str	r2, [r3, #0]
 800614a:	e007      	b.n	800615c <HAL_DMA_Abort+0x34c>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f022 0201 	bic.w	r2, r2, #1
 800615a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800615c:	e013      	b.n	8006186 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800615e:	f7fc fa9f 	bl	80026a0 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	2b05      	cmp	r3, #5
 800616a:	d90c      	bls.n	8006186 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2220      	movs	r2, #32
 8006170:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2203      	movs	r2, #3
 8006176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e12d      	b.n	80063e2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1e5      	bne.n	800615e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a2f      	ldr	r2, [pc, #188]	; (8006254 <HAL_DMA_Abort+0x444>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d04a      	beq.n	8006232 <HAL_DMA_Abort+0x422>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a2d      	ldr	r2, [pc, #180]	; (8006258 <HAL_DMA_Abort+0x448>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d045      	beq.n	8006232 <HAL_DMA_Abort+0x422>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a2c      	ldr	r2, [pc, #176]	; (800625c <HAL_DMA_Abort+0x44c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d040      	beq.n	8006232 <HAL_DMA_Abort+0x422>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a2a      	ldr	r2, [pc, #168]	; (8006260 <HAL_DMA_Abort+0x450>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d03b      	beq.n	8006232 <HAL_DMA_Abort+0x422>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a29      	ldr	r2, [pc, #164]	; (8006264 <HAL_DMA_Abort+0x454>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d036      	beq.n	8006232 <HAL_DMA_Abort+0x422>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a27      	ldr	r2, [pc, #156]	; (8006268 <HAL_DMA_Abort+0x458>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d031      	beq.n	8006232 <HAL_DMA_Abort+0x422>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a26      	ldr	r2, [pc, #152]	; (800626c <HAL_DMA_Abort+0x45c>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d02c      	beq.n	8006232 <HAL_DMA_Abort+0x422>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a24      	ldr	r2, [pc, #144]	; (8006270 <HAL_DMA_Abort+0x460>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d027      	beq.n	8006232 <HAL_DMA_Abort+0x422>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a23      	ldr	r2, [pc, #140]	; (8006274 <HAL_DMA_Abort+0x464>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d022      	beq.n	8006232 <HAL_DMA_Abort+0x422>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a21      	ldr	r2, [pc, #132]	; (8006278 <HAL_DMA_Abort+0x468>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d01d      	beq.n	8006232 <HAL_DMA_Abort+0x422>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a20      	ldr	r2, [pc, #128]	; (800627c <HAL_DMA_Abort+0x46c>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d018      	beq.n	8006232 <HAL_DMA_Abort+0x422>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a1e      	ldr	r2, [pc, #120]	; (8006280 <HAL_DMA_Abort+0x470>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d013      	beq.n	8006232 <HAL_DMA_Abort+0x422>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a1d      	ldr	r2, [pc, #116]	; (8006284 <HAL_DMA_Abort+0x474>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d00e      	beq.n	8006232 <HAL_DMA_Abort+0x422>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a1b      	ldr	r2, [pc, #108]	; (8006288 <HAL_DMA_Abort+0x478>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d009      	beq.n	8006232 <HAL_DMA_Abort+0x422>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a1a      	ldr	r2, [pc, #104]	; (800628c <HAL_DMA_Abort+0x47c>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d004      	beq.n	8006232 <HAL_DMA_Abort+0x422>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a18      	ldr	r2, [pc, #96]	; (8006290 <HAL_DMA_Abort+0x480>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d101      	bne.n	8006236 <HAL_DMA_Abort+0x426>
 8006232:	2301      	movs	r3, #1
 8006234:	e000      	b.n	8006238 <HAL_DMA_Abort+0x428>
 8006236:	2300      	movs	r3, #0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d02b      	beq.n	8006294 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006240:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006246:	f003 031f 	and.w	r3, r3, #31
 800624a:	223f      	movs	r2, #63	; 0x3f
 800624c:	409a      	lsls	r2, r3
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	609a      	str	r2, [r3, #8]
 8006252:	e02a      	b.n	80062aa <HAL_DMA_Abort+0x49a>
 8006254:	40020010 	.word	0x40020010
 8006258:	40020028 	.word	0x40020028
 800625c:	40020040 	.word	0x40020040
 8006260:	40020058 	.word	0x40020058
 8006264:	40020070 	.word	0x40020070
 8006268:	40020088 	.word	0x40020088
 800626c:	400200a0 	.word	0x400200a0
 8006270:	400200b8 	.word	0x400200b8
 8006274:	40020410 	.word	0x40020410
 8006278:	40020428 	.word	0x40020428
 800627c:	40020440 	.word	0x40020440
 8006280:	40020458 	.word	0x40020458
 8006284:	40020470 	.word	0x40020470
 8006288:	40020488 	.word	0x40020488
 800628c:	400204a0 	.word	0x400204a0
 8006290:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006298:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800629e:	f003 031f 	and.w	r3, r3, #31
 80062a2:	2201      	movs	r2, #1
 80062a4:	409a      	lsls	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a4f      	ldr	r2, [pc, #316]	; (80063ec <HAL_DMA_Abort+0x5dc>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d072      	beq.n	800639a <HAL_DMA_Abort+0x58a>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a4d      	ldr	r2, [pc, #308]	; (80063f0 <HAL_DMA_Abort+0x5e0>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d06d      	beq.n	800639a <HAL_DMA_Abort+0x58a>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a4c      	ldr	r2, [pc, #304]	; (80063f4 <HAL_DMA_Abort+0x5e4>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d068      	beq.n	800639a <HAL_DMA_Abort+0x58a>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a4a      	ldr	r2, [pc, #296]	; (80063f8 <HAL_DMA_Abort+0x5e8>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d063      	beq.n	800639a <HAL_DMA_Abort+0x58a>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a49      	ldr	r2, [pc, #292]	; (80063fc <HAL_DMA_Abort+0x5ec>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d05e      	beq.n	800639a <HAL_DMA_Abort+0x58a>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a47      	ldr	r2, [pc, #284]	; (8006400 <HAL_DMA_Abort+0x5f0>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d059      	beq.n	800639a <HAL_DMA_Abort+0x58a>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a46      	ldr	r2, [pc, #280]	; (8006404 <HAL_DMA_Abort+0x5f4>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d054      	beq.n	800639a <HAL_DMA_Abort+0x58a>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a44      	ldr	r2, [pc, #272]	; (8006408 <HAL_DMA_Abort+0x5f8>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d04f      	beq.n	800639a <HAL_DMA_Abort+0x58a>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a43      	ldr	r2, [pc, #268]	; (800640c <HAL_DMA_Abort+0x5fc>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d04a      	beq.n	800639a <HAL_DMA_Abort+0x58a>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a41      	ldr	r2, [pc, #260]	; (8006410 <HAL_DMA_Abort+0x600>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d045      	beq.n	800639a <HAL_DMA_Abort+0x58a>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a40      	ldr	r2, [pc, #256]	; (8006414 <HAL_DMA_Abort+0x604>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d040      	beq.n	800639a <HAL_DMA_Abort+0x58a>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a3e      	ldr	r2, [pc, #248]	; (8006418 <HAL_DMA_Abort+0x608>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d03b      	beq.n	800639a <HAL_DMA_Abort+0x58a>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a3d      	ldr	r2, [pc, #244]	; (800641c <HAL_DMA_Abort+0x60c>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d036      	beq.n	800639a <HAL_DMA_Abort+0x58a>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a3b      	ldr	r2, [pc, #236]	; (8006420 <HAL_DMA_Abort+0x610>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d031      	beq.n	800639a <HAL_DMA_Abort+0x58a>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a3a      	ldr	r2, [pc, #232]	; (8006424 <HAL_DMA_Abort+0x614>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d02c      	beq.n	800639a <HAL_DMA_Abort+0x58a>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a38      	ldr	r2, [pc, #224]	; (8006428 <HAL_DMA_Abort+0x618>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d027      	beq.n	800639a <HAL_DMA_Abort+0x58a>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a37      	ldr	r2, [pc, #220]	; (800642c <HAL_DMA_Abort+0x61c>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d022      	beq.n	800639a <HAL_DMA_Abort+0x58a>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a35      	ldr	r2, [pc, #212]	; (8006430 <HAL_DMA_Abort+0x620>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d01d      	beq.n	800639a <HAL_DMA_Abort+0x58a>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a34      	ldr	r2, [pc, #208]	; (8006434 <HAL_DMA_Abort+0x624>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d018      	beq.n	800639a <HAL_DMA_Abort+0x58a>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a32      	ldr	r2, [pc, #200]	; (8006438 <HAL_DMA_Abort+0x628>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d013      	beq.n	800639a <HAL_DMA_Abort+0x58a>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a31      	ldr	r2, [pc, #196]	; (800643c <HAL_DMA_Abort+0x62c>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d00e      	beq.n	800639a <HAL_DMA_Abort+0x58a>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a2f      	ldr	r2, [pc, #188]	; (8006440 <HAL_DMA_Abort+0x630>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d009      	beq.n	800639a <HAL_DMA_Abort+0x58a>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a2e      	ldr	r2, [pc, #184]	; (8006444 <HAL_DMA_Abort+0x634>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d004      	beq.n	800639a <HAL_DMA_Abort+0x58a>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a2c      	ldr	r2, [pc, #176]	; (8006448 <HAL_DMA_Abort+0x638>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d101      	bne.n	800639e <HAL_DMA_Abort+0x58e>
 800639a:	2301      	movs	r3, #1
 800639c:	e000      	b.n	80063a0 <HAL_DMA_Abort+0x590>
 800639e:	2300      	movs	r3, #0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d015      	beq.n	80063d0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80063ac:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00c      	beq.n	80063d0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063c4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80063ce:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3718      	adds	r7, #24
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	40020010 	.word	0x40020010
 80063f0:	40020028 	.word	0x40020028
 80063f4:	40020040 	.word	0x40020040
 80063f8:	40020058 	.word	0x40020058
 80063fc:	40020070 	.word	0x40020070
 8006400:	40020088 	.word	0x40020088
 8006404:	400200a0 	.word	0x400200a0
 8006408:	400200b8 	.word	0x400200b8
 800640c:	40020410 	.word	0x40020410
 8006410:	40020428 	.word	0x40020428
 8006414:	40020440 	.word	0x40020440
 8006418:	40020458 	.word	0x40020458
 800641c:	40020470 	.word	0x40020470
 8006420:	40020488 	.word	0x40020488
 8006424:	400204a0 	.word	0x400204a0
 8006428:	400204b8 	.word	0x400204b8
 800642c:	58025408 	.word	0x58025408
 8006430:	5802541c 	.word	0x5802541c
 8006434:	58025430 	.word	0x58025430
 8006438:	58025444 	.word	0x58025444
 800643c:	58025458 	.word	0x58025458
 8006440:	5802546c 	.word	0x5802546c
 8006444:	58025480 	.word	0x58025480
 8006448:	58025494 	.word	0x58025494

0800644c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b08a      	sub	sp, #40	; 0x28
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006454:	2300      	movs	r3, #0
 8006456:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006458:	4b67      	ldr	r3, [pc, #412]	; (80065f8 <HAL_DMA_IRQHandler+0x1ac>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a67      	ldr	r2, [pc, #412]	; (80065fc <HAL_DMA_IRQHandler+0x1b0>)
 800645e:	fba2 2303 	umull	r2, r3, r2, r3
 8006462:	0a9b      	lsrs	r3, r3, #10
 8006464:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800646a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006470:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a5f      	ldr	r2, [pc, #380]	; (8006600 <HAL_DMA_IRQHandler+0x1b4>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d04a      	beq.n	800651e <HAL_DMA_IRQHandler+0xd2>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a5d      	ldr	r2, [pc, #372]	; (8006604 <HAL_DMA_IRQHandler+0x1b8>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d045      	beq.n	800651e <HAL_DMA_IRQHandler+0xd2>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a5c      	ldr	r2, [pc, #368]	; (8006608 <HAL_DMA_IRQHandler+0x1bc>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d040      	beq.n	800651e <HAL_DMA_IRQHandler+0xd2>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a5a      	ldr	r2, [pc, #360]	; (800660c <HAL_DMA_IRQHandler+0x1c0>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d03b      	beq.n	800651e <HAL_DMA_IRQHandler+0xd2>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a59      	ldr	r2, [pc, #356]	; (8006610 <HAL_DMA_IRQHandler+0x1c4>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d036      	beq.n	800651e <HAL_DMA_IRQHandler+0xd2>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a57      	ldr	r2, [pc, #348]	; (8006614 <HAL_DMA_IRQHandler+0x1c8>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d031      	beq.n	800651e <HAL_DMA_IRQHandler+0xd2>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a56      	ldr	r2, [pc, #344]	; (8006618 <HAL_DMA_IRQHandler+0x1cc>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d02c      	beq.n	800651e <HAL_DMA_IRQHandler+0xd2>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a54      	ldr	r2, [pc, #336]	; (800661c <HAL_DMA_IRQHandler+0x1d0>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d027      	beq.n	800651e <HAL_DMA_IRQHandler+0xd2>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a53      	ldr	r2, [pc, #332]	; (8006620 <HAL_DMA_IRQHandler+0x1d4>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d022      	beq.n	800651e <HAL_DMA_IRQHandler+0xd2>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a51      	ldr	r2, [pc, #324]	; (8006624 <HAL_DMA_IRQHandler+0x1d8>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d01d      	beq.n	800651e <HAL_DMA_IRQHandler+0xd2>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a50      	ldr	r2, [pc, #320]	; (8006628 <HAL_DMA_IRQHandler+0x1dc>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d018      	beq.n	800651e <HAL_DMA_IRQHandler+0xd2>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a4e      	ldr	r2, [pc, #312]	; (800662c <HAL_DMA_IRQHandler+0x1e0>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d013      	beq.n	800651e <HAL_DMA_IRQHandler+0xd2>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a4d      	ldr	r2, [pc, #308]	; (8006630 <HAL_DMA_IRQHandler+0x1e4>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d00e      	beq.n	800651e <HAL_DMA_IRQHandler+0xd2>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a4b      	ldr	r2, [pc, #300]	; (8006634 <HAL_DMA_IRQHandler+0x1e8>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d009      	beq.n	800651e <HAL_DMA_IRQHandler+0xd2>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a4a      	ldr	r2, [pc, #296]	; (8006638 <HAL_DMA_IRQHandler+0x1ec>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d004      	beq.n	800651e <HAL_DMA_IRQHandler+0xd2>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a48      	ldr	r2, [pc, #288]	; (800663c <HAL_DMA_IRQHandler+0x1f0>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d101      	bne.n	8006522 <HAL_DMA_IRQHandler+0xd6>
 800651e:	2301      	movs	r3, #1
 8006520:	e000      	b.n	8006524 <HAL_DMA_IRQHandler+0xd8>
 8006522:	2300      	movs	r3, #0
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 842b 	beq.w	8006d80 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800652e:	f003 031f 	and.w	r3, r3, #31
 8006532:	2208      	movs	r2, #8
 8006534:	409a      	lsls	r2, r3
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	4013      	ands	r3, r2
 800653a:	2b00      	cmp	r3, #0
 800653c:	f000 80a2 	beq.w	8006684 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a2e      	ldr	r2, [pc, #184]	; (8006600 <HAL_DMA_IRQHandler+0x1b4>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d04a      	beq.n	80065e0 <HAL_DMA_IRQHandler+0x194>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a2d      	ldr	r2, [pc, #180]	; (8006604 <HAL_DMA_IRQHandler+0x1b8>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d045      	beq.n	80065e0 <HAL_DMA_IRQHandler+0x194>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a2b      	ldr	r2, [pc, #172]	; (8006608 <HAL_DMA_IRQHandler+0x1bc>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d040      	beq.n	80065e0 <HAL_DMA_IRQHandler+0x194>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a2a      	ldr	r2, [pc, #168]	; (800660c <HAL_DMA_IRQHandler+0x1c0>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d03b      	beq.n	80065e0 <HAL_DMA_IRQHandler+0x194>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a28      	ldr	r2, [pc, #160]	; (8006610 <HAL_DMA_IRQHandler+0x1c4>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d036      	beq.n	80065e0 <HAL_DMA_IRQHandler+0x194>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a27      	ldr	r2, [pc, #156]	; (8006614 <HAL_DMA_IRQHandler+0x1c8>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d031      	beq.n	80065e0 <HAL_DMA_IRQHandler+0x194>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a25      	ldr	r2, [pc, #148]	; (8006618 <HAL_DMA_IRQHandler+0x1cc>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d02c      	beq.n	80065e0 <HAL_DMA_IRQHandler+0x194>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a24      	ldr	r2, [pc, #144]	; (800661c <HAL_DMA_IRQHandler+0x1d0>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d027      	beq.n	80065e0 <HAL_DMA_IRQHandler+0x194>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a22      	ldr	r2, [pc, #136]	; (8006620 <HAL_DMA_IRQHandler+0x1d4>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d022      	beq.n	80065e0 <HAL_DMA_IRQHandler+0x194>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a21      	ldr	r2, [pc, #132]	; (8006624 <HAL_DMA_IRQHandler+0x1d8>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d01d      	beq.n	80065e0 <HAL_DMA_IRQHandler+0x194>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a1f      	ldr	r2, [pc, #124]	; (8006628 <HAL_DMA_IRQHandler+0x1dc>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d018      	beq.n	80065e0 <HAL_DMA_IRQHandler+0x194>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a1e      	ldr	r2, [pc, #120]	; (800662c <HAL_DMA_IRQHandler+0x1e0>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d013      	beq.n	80065e0 <HAL_DMA_IRQHandler+0x194>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a1c      	ldr	r2, [pc, #112]	; (8006630 <HAL_DMA_IRQHandler+0x1e4>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d00e      	beq.n	80065e0 <HAL_DMA_IRQHandler+0x194>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a1b      	ldr	r2, [pc, #108]	; (8006634 <HAL_DMA_IRQHandler+0x1e8>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d009      	beq.n	80065e0 <HAL_DMA_IRQHandler+0x194>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a19      	ldr	r2, [pc, #100]	; (8006638 <HAL_DMA_IRQHandler+0x1ec>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d004      	beq.n	80065e0 <HAL_DMA_IRQHandler+0x194>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a18      	ldr	r2, [pc, #96]	; (800663c <HAL_DMA_IRQHandler+0x1f0>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d12f      	bne.n	8006640 <HAL_DMA_IRQHandler+0x1f4>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0304 	and.w	r3, r3, #4
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	bf14      	ite	ne
 80065ee:	2301      	movne	r3, #1
 80065f0:	2300      	moveq	r3, #0
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	e02e      	b.n	8006654 <HAL_DMA_IRQHandler+0x208>
 80065f6:	bf00      	nop
 80065f8:	24000000 	.word	0x24000000
 80065fc:	1b4e81b5 	.word	0x1b4e81b5
 8006600:	40020010 	.word	0x40020010
 8006604:	40020028 	.word	0x40020028
 8006608:	40020040 	.word	0x40020040
 800660c:	40020058 	.word	0x40020058
 8006610:	40020070 	.word	0x40020070
 8006614:	40020088 	.word	0x40020088
 8006618:	400200a0 	.word	0x400200a0
 800661c:	400200b8 	.word	0x400200b8
 8006620:	40020410 	.word	0x40020410
 8006624:	40020428 	.word	0x40020428
 8006628:	40020440 	.word	0x40020440
 800662c:	40020458 	.word	0x40020458
 8006630:	40020470 	.word	0x40020470
 8006634:	40020488 	.word	0x40020488
 8006638:	400204a0 	.word	0x400204a0
 800663c:	400204b8 	.word	0x400204b8
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0308 	and.w	r3, r3, #8
 800664a:	2b00      	cmp	r3, #0
 800664c:	bf14      	ite	ne
 800664e:	2301      	movne	r3, #1
 8006650:	2300      	moveq	r3, #0
 8006652:	b2db      	uxtb	r3, r3
 8006654:	2b00      	cmp	r3, #0
 8006656:	d015      	beq.n	8006684 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f022 0204 	bic.w	r2, r2, #4
 8006666:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800666c:	f003 031f 	and.w	r3, r3, #31
 8006670:	2208      	movs	r2, #8
 8006672:	409a      	lsls	r2, r3
 8006674:	6a3b      	ldr	r3, [r7, #32]
 8006676:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800667c:	f043 0201 	orr.w	r2, r3, #1
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006688:	f003 031f 	and.w	r3, r3, #31
 800668c:	69ba      	ldr	r2, [r7, #24]
 800668e:	fa22 f303 	lsr.w	r3, r2, r3
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	2b00      	cmp	r3, #0
 8006698:	d06e      	beq.n	8006778 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a69      	ldr	r2, [pc, #420]	; (8006844 <HAL_DMA_IRQHandler+0x3f8>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d04a      	beq.n	800673a <HAL_DMA_IRQHandler+0x2ee>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a67      	ldr	r2, [pc, #412]	; (8006848 <HAL_DMA_IRQHandler+0x3fc>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d045      	beq.n	800673a <HAL_DMA_IRQHandler+0x2ee>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a66      	ldr	r2, [pc, #408]	; (800684c <HAL_DMA_IRQHandler+0x400>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d040      	beq.n	800673a <HAL_DMA_IRQHandler+0x2ee>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a64      	ldr	r2, [pc, #400]	; (8006850 <HAL_DMA_IRQHandler+0x404>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d03b      	beq.n	800673a <HAL_DMA_IRQHandler+0x2ee>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a63      	ldr	r2, [pc, #396]	; (8006854 <HAL_DMA_IRQHandler+0x408>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d036      	beq.n	800673a <HAL_DMA_IRQHandler+0x2ee>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a61      	ldr	r2, [pc, #388]	; (8006858 <HAL_DMA_IRQHandler+0x40c>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d031      	beq.n	800673a <HAL_DMA_IRQHandler+0x2ee>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a60      	ldr	r2, [pc, #384]	; (800685c <HAL_DMA_IRQHandler+0x410>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d02c      	beq.n	800673a <HAL_DMA_IRQHandler+0x2ee>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a5e      	ldr	r2, [pc, #376]	; (8006860 <HAL_DMA_IRQHandler+0x414>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d027      	beq.n	800673a <HAL_DMA_IRQHandler+0x2ee>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a5d      	ldr	r2, [pc, #372]	; (8006864 <HAL_DMA_IRQHandler+0x418>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d022      	beq.n	800673a <HAL_DMA_IRQHandler+0x2ee>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a5b      	ldr	r2, [pc, #364]	; (8006868 <HAL_DMA_IRQHandler+0x41c>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d01d      	beq.n	800673a <HAL_DMA_IRQHandler+0x2ee>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a5a      	ldr	r2, [pc, #360]	; (800686c <HAL_DMA_IRQHandler+0x420>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d018      	beq.n	800673a <HAL_DMA_IRQHandler+0x2ee>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a58      	ldr	r2, [pc, #352]	; (8006870 <HAL_DMA_IRQHandler+0x424>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d013      	beq.n	800673a <HAL_DMA_IRQHandler+0x2ee>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a57      	ldr	r2, [pc, #348]	; (8006874 <HAL_DMA_IRQHandler+0x428>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d00e      	beq.n	800673a <HAL_DMA_IRQHandler+0x2ee>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a55      	ldr	r2, [pc, #340]	; (8006878 <HAL_DMA_IRQHandler+0x42c>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d009      	beq.n	800673a <HAL_DMA_IRQHandler+0x2ee>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a54      	ldr	r2, [pc, #336]	; (800687c <HAL_DMA_IRQHandler+0x430>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d004      	beq.n	800673a <HAL_DMA_IRQHandler+0x2ee>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a52      	ldr	r2, [pc, #328]	; (8006880 <HAL_DMA_IRQHandler+0x434>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d10a      	bne.n	8006750 <HAL_DMA_IRQHandler+0x304>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006744:	2b00      	cmp	r3, #0
 8006746:	bf14      	ite	ne
 8006748:	2301      	movne	r3, #1
 800674a:	2300      	moveq	r3, #0
 800674c:	b2db      	uxtb	r3, r3
 800674e:	e003      	b.n	8006758 <HAL_DMA_IRQHandler+0x30c>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2300      	movs	r3, #0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00d      	beq.n	8006778 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006760:	f003 031f 	and.w	r3, r3, #31
 8006764:	2201      	movs	r2, #1
 8006766:	409a      	lsls	r2, r3
 8006768:	6a3b      	ldr	r3, [r7, #32]
 800676a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006770:	f043 0202 	orr.w	r2, r3, #2
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800677c:	f003 031f 	and.w	r3, r3, #31
 8006780:	2204      	movs	r2, #4
 8006782:	409a      	lsls	r2, r3
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	4013      	ands	r3, r2
 8006788:	2b00      	cmp	r3, #0
 800678a:	f000 808f 	beq.w	80068ac <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a2c      	ldr	r2, [pc, #176]	; (8006844 <HAL_DMA_IRQHandler+0x3f8>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d04a      	beq.n	800682e <HAL_DMA_IRQHandler+0x3e2>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a2a      	ldr	r2, [pc, #168]	; (8006848 <HAL_DMA_IRQHandler+0x3fc>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d045      	beq.n	800682e <HAL_DMA_IRQHandler+0x3e2>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a29      	ldr	r2, [pc, #164]	; (800684c <HAL_DMA_IRQHandler+0x400>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d040      	beq.n	800682e <HAL_DMA_IRQHandler+0x3e2>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a27      	ldr	r2, [pc, #156]	; (8006850 <HAL_DMA_IRQHandler+0x404>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d03b      	beq.n	800682e <HAL_DMA_IRQHandler+0x3e2>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a26      	ldr	r2, [pc, #152]	; (8006854 <HAL_DMA_IRQHandler+0x408>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d036      	beq.n	800682e <HAL_DMA_IRQHandler+0x3e2>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a24      	ldr	r2, [pc, #144]	; (8006858 <HAL_DMA_IRQHandler+0x40c>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d031      	beq.n	800682e <HAL_DMA_IRQHandler+0x3e2>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a23      	ldr	r2, [pc, #140]	; (800685c <HAL_DMA_IRQHandler+0x410>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d02c      	beq.n	800682e <HAL_DMA_IRQHandler+0x3e2>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a21      	ldr	r2, [pc, #132]	; (8006860 <HAL_DMA_IRQHandler+0x414>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d027      	beq.n	800682e <HAL_DMA_IRQHandler+0x3e2>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a20      	ldr	r2, [pc, #128]	; (8006864 <HAL_DMA_IRQHandler+0x418>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d022      	beq.n	800682e <HAL_DMA_IRQHandler+0x3e2>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a1e      	ldr	r2, [pc, #120]	; (8006868 <HAL_DMA_IRQHandler+0x41c>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d01d      	beq.n	800682e <HAL_DMA_IRQHandler+0x3e2>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a1d      	ldr	r2, [pc, #116]	; (800686c <HAL_DMA_IRQHandler+0x420>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d018      	beq.n	800682e <HAL_DMA_IRQHandler+0x3e2>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a1b      	ldr	r2, [pc, #108]	; (8006870 <HAL_DMA_IRQHandler+0x424>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d013      	beq.n	800682e <HAL_DMA_IRQHandler+0x3e2>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a1a      	ldr	r2, [pc, #104]	; (8006874 <HAL_DMA_IRQHandler+0x428>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d00e      	beq.n	800682e <HAL_DMA_IRQHandler+0x3e2>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a18      	ldr	r2, [pc, #96]	; (8006878 <HAL_DMA_IRQHandler+0x42c>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d009      	beq.n	800682e <HAL_DMA_IRQHandler+0x3e2>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a17      	ldr	r2, [pc, #92]	; (800687c <HAL_DMA_IRQHandler+0x430>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d004      	beq.n	800682e <HAL_DMA_IRQHandler+0x3e2>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a15      	ldr	r2, [pc, #84]	; (8006880 <HAL_DMA_IRQHandler+0x434>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d12a      	bne.n	8006884 <HAL_DMA_IRQHandler+0x438>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 0302 	and.w	r3, r3, #2
 8006838:	2b00      	cmp	r3, #0
 800683a:	bf14      	ite	ne
 800683c:	2301      	movne	r3, #1
 800683e:	2300      	moveq	r3, #0
 8006840:	b2db      	uxtb	r3, r3
 8006842:	e023      	b.n	800688c <HAL_DMA_IRQHandler+0x440>
 8006844:	40020010 	.word	0x40020010
 8006848:	40020028 	.word	0x40020028
 800684c:	40020040 	.word	0x40020040
 8006850:	40020058 	.word	0x40020058
 8006854:	40020070 	.word	0x40020070
 8006858:	40020088 	.word	0x40020088
 800685c:	400200a0 	.word	0x400200a0
 8006860:	400200b8 	.word	0x400200b8
 8006864:	40020410 	.word	0x40020410
 8006868:	40020428 	.word	0x40020428
 800686c:	40020440 	.word	0x40020440
 8006870:	40020458 	.word	0x40020458
 8006874:	40020470 	.word	0x40020470
 8006878:	40020488 	.word	0x40020488
 800687c:	400204a0 	.word	0x400204a0
 8006880:	400204b8 	.word	0x400204b8
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2300      	movs	r3, #0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00d      	beq.n	80068ac <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006894:	f003 031f 	and.w	r3, r3, #31
 8006898:	2204      	movs	r2, #4
 800689a:	409a      	lsls	r2, r3
 800689c:	6a3b      	ldr	r3, [r7, #32]
 800689e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a4:	f043 0204 	orr.w	r2, r3, #4
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068b0:	f003 031f 	and.w	r3, r3, #31
 80068b4:	2210      	movs	r2, #16
 80068b6:	409a      	lsls	r2, r3
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	4013      	ands	r3, r2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f000 80a6 	beq.w	8006a0e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a85      	ldr	r2, [pc, #532]	; (8006adc <HAL_DMA_IRQHandler+0x690>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d04a      	beq.n	8006962 <HAL_DMA_IRQHandler+0x516>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a83      	ldr	r2, [pc, #524]	; (8006ae0 <HAL_DMA_IRQHandler+0x694>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d045      	beq.n	8006962 <HAL_DMA_IRQHandler+0x516>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a82      	ldr	r2, [pc, #520]	; (8006ae4 <HAL_DMA_IRQHandler+0x698>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d040      	beq.n	8006962 <HAL_DMA_IRQHandler+0x516>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a80      	ldr	r2, [pc, #512]	; (8006ae8 <HAL_DMA_IRQHandler+0x69c>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d03b      	beq.n	8006962 <HAL_DMA_IRQHandler+0x516>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a7f      	ldr	r2, [pc, #508]	; (8006aec <HAL_DMA_IRQHandler+0x6a0>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d036      	beq.n	8006962 <HAL_DMA_IRQHandler+0x516>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a7d      	ldr	r2, [pc, #500]	; (8006af0 <HAL_DMA_IRQHandler+0x6a4>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d031      	beq.n	8006962 <HAL_DMA_IRQHandler+0x516>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a7c      	ldr	r2, [pc, #496]	; (8006af4 <HAL_DMA_IRQHandler+0x6a8>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d02c      	beq.n	8006962 <HAL_DMA_IRQHandler+0x516>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a7a      	ldr	r2, [pc, #488]	; (8006af8 <HAL_DMA_IRQHandler+0x6ac>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d027      	beq.n	8006962 <HAL_DMA_IRQHandler+0x516>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a79      	ldr	r2, [pc, #484]	; (8006afc <HAL_DMA_IRQHandler+0x6b0>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d022      	beq.n	8006962 <HAL_DMA_IRQHandler+0x516>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a77      	ldr	r2, [pc, #476]	; (8006b00 <HAL_DMA_IRQHandler+0x6b4>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d01d      	beq.n	8006962 <HAL_DMA_IRQHandler+0x516>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a76      	ldr	r2, [pc, #472]	; (8006b04 <HAL_DMA_IRQHandler+0x6b8>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d018      	beq.n	8006962 <HAL_DMA_IRQHandler+0x516>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a74      	ldr	r2, [pc, #464]	; (8006b08 <HAL_DMA_IRQHandler+0x6bc>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d013      	beq.n	8006962 <HAL_DMA_IRQHandler+0x516>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a73      	ldr	r2, [pc, #460]	; (8006b0c <HAL_DMA_IRQHandler+0x6c0>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d00e      	beq.n	8006962 <HAL_DMA_IRQHandler+0x516>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a71      	ldr	r2, [pc, #452]	; (8006b10 <HAL_DMA_IRQHandler+0x6c4>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d009      	beq.n	8006962 <HAL_DMA_IRQHandler+0x516>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a70      	ldr	r2, [pc, #448]	; (8006b14 <HAL_DMA_IRQHandler+0x6c8>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d004      	beq.n	8006962 <HAL_DMA_IRQHandler+0x516>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a6e      	ldr	r2, [pc, #440]	; (8006b18 <HAL_DMA_IRQHandler+0x6cc>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d10a      	bne.n	8006978 <HAL_DMA_IRQHandler+0x52c>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0308 	and.w	r3, r3, #8
 800696c:	2b00      	cmp	r3, #0
 800696e:	bf14      	ite	ne
 8006970:	2301      	movne	r3, #1
 8006972:	2300      	moveq	r3, #0
 8006974:	b2db      	uxtb	r3, r3
 8006976:	e009      	b.n	800698c <HAL_DMA_IRQHandler+0x540>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0304 	and.w	r3, r3, #4
 8006982:	2b00      	cmp	r3, #0
 8006984:	bf14      	ite	ne
 8006986:	2301      	movne	r3, #1
 8006988:	2300      	moveq	r3, #0
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b00      	cmp	r3, #0
 800698e:	d03e      	beq.n	8006a0e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006994:	f003 031f 	and.w	r3, r3, #31
 8006998:	2210      	movs	r2, #16
 800699a:	409a      	lsls	r2, r3
 800699c:	6a3b      	ldr	r3, [r7, #32]
 800699e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d018      	beq.n	80069e0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d108      	bne.n	80069ce <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d024      	beq.n	8006a0e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	4798      	blx	r3
 80069cc:	e01f      	b.n	8006a0e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d01b      	beq.n	8006a0e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	4798      	blx	r3
 80069de:	e016      	b.n	8006a0e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d107      	bne.n	80069fe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f022 0208 	bic.w	r2, r2, #8
 80069fc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d003      	beq.n	8006a0e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a12:	f003 031f 	and.w	r3, r3, #31
 8006a16:	2220      	movs	r2, #32
 8006a18:	409a      	lsls	r2, r3
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f000 8110 	beq.w	8006c44 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a2c      	ldr	r2, [pc, #176]	; (8006adc <HAL_DMA_IRQHandler+0x690>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d04a      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x678>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a2b      	ldr	r2, [pc, #172]	; (8006ae0 <HAL_DMA_IRQHandler+0x694>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d045      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x678>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a29      	ldr	r2, [pc, #164]	; (8006ae4 <HAL_DMA_IRQHandler+0x698>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d040      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x678>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a28      	ldr	r2, [pc, #160]	; (8006ae8 <HAL_DMA_IRQHandler+0x69c>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d03b      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x678>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a26      	ldr	r2, [pc, #152]	; (8006aec <HAL_DMA_IRQHandler+0x6a0>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d036      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x678>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a25      	ldr	r2, [pc, #148]	; (8006af0 <HAL_DMA_IRQHandler+0x6a4>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d031      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x678>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a23      	ldr	r2, [pc, #140]	; (8006af4 <HAL_DMA_IRQHandler+0x6a8>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d02c      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x678>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a22      	ldr	r2, [pc, #136]	; (8006af8 <HAL_DMA_IRQHandler+0x6ac>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d027      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x678>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a20      	ldr	r2, [pc, #128]	; (8006afc <HAL_DMA_IRQHandler+0x6b0>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d022      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x678>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a1f      	ldr	r2, [pc, #124]	; (8006b00 <HAL_DMA_IRQHandler+0x6b4>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d01d      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x678>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a1d      	ldr	r2, [pc, #116]	; (8006b04 <HAL_DMA_IRQHandler+0x6b8>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d018      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x678>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a1c      	ldr	r2, [pc, #112]	; (8006b08 <HAL_DMA_IRQHandler+0x6bc>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d013      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x678>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a1a      	ldr	r2, [pc, #104]	; (8006b0c <HAL_DMA_IRQHandler+0x6c0>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d00e      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x678>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a19      	ldr	r2, [pc, #100]	; (8006b10 <HAL_DMA_IRQHandler+0x6c4>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d009      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x678>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a17      	ldr	r2, [pc, #92]	; (8006b14 <HAL_DMA_IRQHandler+0x6c8>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d004      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x678>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a16      	ldr	r2, [pc, #88]	; (8006b18 <HAL_DMA_IRQHandler+0x6cc>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d12b      	bne.n	8006b1c <HAL_DMA_IRQHandler+0x6d0>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 0310 	and.w	r3, r3, #16
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	bf14      	ite	ne
 8006ad2:	2301      	movne	r3, #1
 8006ad4:	2300      	moveq	r3, #0
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	e02a      	b.n	8006b30 <HAL_DMA_IRQHandler+0x6e4>
 8006ada:	bf00      	nop
 8006adc:	40020010 	.word	0x40020010
 8006ae0:	40020028 	.word	0x40020028
 8006ae4:	40020040 	.word	0x40020040
 8006ae8:	40020058 	.word	0x40020058
 8006aec:	40020070 	.word	0x40020070
 8006af0:	40020088 	.word	0x40020088
 8006af4:	400200a0 	.word	0x400200a0
 8006af8:	400200b8 	.word	0x400200b8
 8006afc:	40020410 	.word	0x40020410
 8006b00:	40020428 	.word	0x40020428
 8006b04:	40020440 	.word	0x40020440
 8006b08:	40020458 	.word	0x40020458
 8006b0c:	40020470 	.word	0x40020470
 8006b10:	40020488 	.word	0x40020488
 8006b14:	400204a0 	.word	0x400204a0
 8006b18:	400204b8 	.word	0x400204b8
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0302 	and.w	r3, r3, #2
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	bf14      	ite	ne
 8006b2a:	2301      	movne	r3, #1
 8006b2c:	2300      	moveq	r3, #0
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 8087 	beq.w	8006c44 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b3a:	f003 031f 	and.w	r3, r3, #31
 8006b3e:	2220      	movs	r2, #32
 8006b40:	409a      	lsls	r2, r3
 8006b42:	6a3b      	ldr	r3, [r7, #32]
 8006b44:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b04      	cmp	r3, #4
 8006b50:	d139      	bne.n	8006bc6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f022 0216 	bic.w	r2, r2, #22
 8006b60:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	695a      	ldr	r2, [r3, #20]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b70:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d103      	bne.n	8006b82 <HAL_DMA_IRQHandler+0x736>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d007      	beq.n	8006b92 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f022 0208 	bic.w	r2, r2, #8
 8006b90:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b96:	f003 031f 	and.w	r3, r3, #31
 8006b9a:	223f      	movs	r2, #63	; 0x3f
 8006b9c:	409a      	lsls	r2, r3
 8006b9e:	6a3b      	ldr	r3, [r7, #32]
 8006ba0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f000 834a 	beq.w	8007250 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	4798      	blx	r3
          }
          return;
 8006bc4:	e344      	b.n	8007250 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d018      	beq.n	8006c06 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d108      	bne.n	8006bf4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d02c      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	4798      	blx	r3
 8006bf2:	e027      	b.n	8006c44 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d023      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	4798      	blx	r3
 8006c04:	e01e      	b.n	8006c44 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10f      	bne.n	8006c34 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f022 0210 	bic.w	r2, r2, #16
 8006c22:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d003      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f000 8306 	beq.w	800725a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f000 8088 	beq.w	8006d6c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2204      	movs	r2, #4
 8006c60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a7a      	ldr	r2, [pc, #488]	; (8006e54 <HAL_DMA_IRQHandler+0xa08>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d04a      	beq.n	8006d04 <HAL_DMA_IRQHandler+0x8b8>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a79      	ldr	r2, [pc, #484]	; (8006e58 <HAL_DMA_IRQHandler+0xa0c>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d045      	beq.n	8006d04 <HAL_DMA_IRQHandler+0x8b8>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a77      	ldr	r2, [pc, #476]	; (8006e5c <HAL_DMA_IRQHandler+0xa10>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d040      	beq.n	8006d04 <HAL_DMA_IRQHandler+0x8b8>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a76      	ldr	r2, [pc, #472]	; (8006e60 <HAL_DMA_IRQHandler+0xa14>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d03b      	beq.n	8006d04 <HAL_DMA_IRQHandler+0x8b8>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a74      	ldr	r2, [pc, #464]	; (8006e64 <HAL_DMA_IRQHandler+0xa18>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d036      	beq.n	8006d04 <HAL_DMA_IRQHandler+0x8b8>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a73      	ldr	r2, [pc, #460]	; (8006e68 <HAL_DMA_IRQHandler+0xa1c>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d031      	beq.n	8006d04 <HAL_DMA_IRQHandler+0x8b8>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a71      	ldr	r2, [pc, #452]	; (8006e6c <HAL_DMA_IRQHandler+0xa20>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d02c      	beq.n	8006d04 <HAL_DMA_IRQHandler+0x8b8>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a70      	ldr	r2, [pc, #448]	; (8006e70 <HAL_DMA_IRQHandler+0xa24>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d027      	beq.n	8006d04 <HAL_DMA_IRQHandler+0x8b8>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a6e      	ldr	r2, [pc, #440]	; (8006e74 <HAL_DMA_IRQHandler+0xa28>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d022      	beq.n	8006d04 <HAL_DMA_IRQHandler+0x8b8>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a6d      	ldr	r2, [pc, #436]	; (8006e78 <HAL_DMA_IRQHandler+0xa2c>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d01d      	beq.n	8006d04 <HAL_DMA_IRQHandler+0x8b8>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a6b      	ldr	r2, [pc, #428]	; (8006e7c <HAL_DMA_IRQHandler+0xa30>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d018      	beq.n	8006d04 <HAL_DMA_IRQHandler+0x8b8>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a6a      	ldr	r2, [pc, #424]	; (8006e80 <HAL_DMA_IRQHandler+0xa34>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d013      	beq.n	8006d04 <HAL_DMA_IRQHandler+0x8b8>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a68      	ldr	r2, [pc, #416]	; (8006e84 <HAL_DMA_IRQHandler+0xa38>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d00e      	beq.n	8006d04 <HAL_DMA_IRQHandler+0x8b8>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a67      	ldr	r2, [pc, #412]	; (8006e88 <HAL_DMA_IRQHandler+0xa3c>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d009      	beq.n	8006d04 <HAL_DMA_IRQHandler+0x8b8>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a65      	ldr	r2, [pc, #404]	; (8006e8c <HAL_DMA_IRQHandler+0xa40>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d004      	beq.n	8006d04 <HAL_DMA_IRQHandler+0x8b8>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a64      	ldr	r2, [pc, #400]	; (8006e90 <HAL_DMA_IRQHandler+0xa44>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d108      	bne.n	8006d16 <HAL_DMA_IRQHandler+0x8ca>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f022 0201 	bic.w	r2, r2, #1
 8006d12:	601a      	str	r2, [r3, #0]
 8006d14:	e007      	b.n	8006d26 <HAL_DMA_IRQHandler+0x8da>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f022 0201 	bic.w	r2, r2, #1
 8006d24:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	60fb      	str	r3, [r7, #12]
 8006d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d307      	bcc.n	8006d42 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0301 	and.w	r3, r3, #1
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d1f2      	bne.n	8006d26 <HAL_DMA_IRQHandler+0x8da>
 8006d40:	e000      	b.n	8006d44 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006d42:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0301 	and.w	r3, r3, #1
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d004      	beq.n	8006d5c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2203      	movs	r2, #3
 8006d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006d5a:	e003      	b.n	8006d64 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f000 8272 	beq.w	800725a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	4798      	blx	r3
 8006d7e:	e26c      	b.n	800725a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a43      	ldr	r2, [pc, #268]	; (8006e94 <HAL_DMA_IRQHandler+0xa48>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d022      	beq.n	8006dd0 <HAL_DMA_IRQHandler+0x984>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a42      	ldr	r2, [pc, #264]	; (8006e98 <HAL_DMA_IRQHandler+0xa4c>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d01d      	beq.n	8006dd0 <HAL_DMA_IRQHandler+0x984>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a40      	ldr	r2, [pc, #256]	; (8006e9c <HAL_DMA_IRQHandler+0xa50>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d018      	beq.n	8006dd0 <HAL_DMA_IRQHandler+0x984>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a3f      	ldr	r2, [pc, #252]	; (8006ea0 <HAL_DMA_IRQHandler+0xa54>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d013      	beq.n	8006dd0 <HAL_DMA_IRQHandler+0x984>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a3d      	ldr	r2, [pc, #244]	; (8006ea4 <HAL_DMA_IRQHandler+0xa58>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d00e      	beq.n	8006dd0 <HAL_DMA_IRQHandler+0x984>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a3c      	ldr	r2, [pc, #240]	; (8006ea8 <HAL_DMA_IRQHandler+0xa5c>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d009      	beq.n	8006dd0 <HAL_DMA_IRQHandler+0x984>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a3a      	ldr	r2, [pc, #232]	; (8006eac <HAL_DMA_IRQHandler+0xa60>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d004      	beq.n	8006dd0 <HAL_DMA_IRQHandler+0x984>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a39      	ldr	r2, [pc, #228]	; (8006eb0 <HAL_DMA_IRQHandler+0xa64>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d101      	bne.n	8006dd4 <HAL_DMA_IRQHandler+0x988>
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e000      	b.n	8006dd6 <HAL_DMA_IRQHandler+0x98a>
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f000 823f 	beq.w	800725a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006de8:	f003 031f 	and.w	r3, r3, #31
 8006dec:	2204      	movs	r2, #4
 8006dee:	409a      	lsls	r2, r3
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	4013      	ands	r3, r2
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 80cd 	beq.w	8006f94 <HAL_DMA_IRQHandler+0xb48>
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	f003 0304 	and.w	r3, r3, #4
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f000 80c7 	beq.w	8006f94 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e0a:	f003 031f 	and.w	r3, r3, #31
 8006e0e:	2204      	movs	r2, #4
 8006e10:	409a      	lsls	r2, r3
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d049      	beq.n	8006eb4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d109      	bne.n	8006e3e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f000 8210 	beq.w	8007254 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e3c:	e20a      	b.n	8007254 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f000 8206 	beq.w	8007254 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e50:	e200      	b.n	8007254 <HAL_DMA_IRQHandler+0xe08>
 8006e52:	bf00      	nop
 8006e54:	40020010 	.word	0x40020010
 8006e58:	40020028 	.word	0x40020028
 8006e5c:	40020040 	.word	0x40020040
 8006e60:	40020058 	.word	0x40020058
 8006e64:	40020070 	.word	0x40020070
 8006e68:	40020088 	.word	0x40020088
 8006e6c:	400200a0 	.word	0x400200a0
 8006e70:	400200b8 	.word	0x400200b8
 8006e74:	40020410 	.word	0x40020410
 8006e78:	40020428 	.word	0x40020428
 8006e7c:	40020440 	.word	0x40020440
 8006e80:	40020458 	.word	0x40020458
 8006e84:	40020470 	.word	0x40020470
 8006e88:	40020488 	.word	0x40020488
 8006e8c:	400204a0 	.word	0x400204a0
 8006e90:	400204b8 	.word	0x400204b8
 8006e94:	58025408 	.word	0x58025408
 8006e98:	5802541c 	.word	0x5802541c
 8006e9c:	58025430 	.word	0x58025430
 8006ea0:	58025444 	.word	0x58025444
 8006ea4:	58025458 	.word	0x58025458
 8006ea8:	5802546c 	.word	0x5802546c
 8006eac:	58025480 	.word	0x58025480
 8006eb0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	f003 0320 	and.w	r3, r3, #32
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d160      	bne.n	8006f80 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a7f      	ldr	r2, [pc, #508]	; (80070c0 <HAL_DMA_IRQHandler+0xc74>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d04a      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xb12>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a7d      	ldr	r2, [pc, #500]	; (80070c4 <HAL_DMA_IRQHandler+0xc78>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d045      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xb12>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a7c      	ldr	r2, [pc, #496]	; (80070c8 <HAL_DMA_IRQHandler+0xc7c>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d040      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xb12>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a7a      	ldr	r2, [pc, #488]	; (80070cc <HAL_DMA_IRQHandler+0xc80>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d03b      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xb12>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a79      	ldr	r2, [pc, #484]	; (80070d0 <HAL_DMA_IRQHandler+0xc84>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d036      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xb12>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a77      	ldr	r2, [pc, #476]	; (80070d4 <HAL_DMA_IRQHandler+0xc88>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d031      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xb12>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a76      	ldr	r2, [pc, #472]	; (80070d8 <HAL_DMA_IRQHandler+0xc8c>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d02c      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xb12>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a74      	ldr	r2, [pc, #464]	; (80070dc <HAL_DMA_IRQHandler+0xc90>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d027      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xb12>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a73      	ldr	r2, [pc, #460]	; (80070e0 <HAL_DMA_IRQHandler+0xc94>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d022      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xb12>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a71      	ldr	r2, [pc, #452]	; (80070e4 <HAL_DMA_IRQHandler+0xc98>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d01d      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xb12>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a70      	ldr	r2, [pc, #448]	; (80070e8 <HAL_DMA_IRQHandler+0xc9c>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d018      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xb12>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a6e      	ldr	r2, [pc, #440]	; (80070ec <HAL_DMA_IRQHandler+0xca0>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d013      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xb12>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a6d      	ldr	r2, [pc, #436]	; (80070f0 <HAL_DMA_IRQHandler+0xca4>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d00e      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xb12>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a6b      	ldr	r2, [pc, #428]	; (80070f4 <HAL_DMA_IRQHandler+0xca8>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d009      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xb12>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a6a      	ldr	r2, [pc, #424]	; (80070f8 <HAL_DMA_IRQHandler+0xcac>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d004      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xb12>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a68      	ldr	r2, [pc, #416]	; (80070fc <HAL_DMA_IRQHandler+0xcb0>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d108      	bne.n	8006f70 <HAL_DMA_IRQHandler+0xb24>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f022 0208 	bic.w	r2, r2, #8
 8006f6c:	601a      	str	r2, [r3, #0]
 8006f6e:	e007      	b.n	8006f80 <HAL_DMA_IRQHandler+0xb34>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f022 0204 	bic.w	r2, r2, #4
 8006f7e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f000 8165 	beq.w	8007254 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f92:	e15f      	b.n	8007254 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f98:	f003 031f 	and.w	r3, r3, #31
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	409a      	lsls	r2, r3
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 80c5 	beq.w	8007134 <HAL_DMA_IRQHandler+0xce8>
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	f003 0302 	and.w	r3, r3, #2
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f000 80bf 	beq.w	8007134 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fba:	f003 031f 	and.w	r3, r3, #31
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	409a      	lsls	r2, r3
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d018      	beq.n	8007002 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d109      	bne.n	8006fee <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	f000 813a 	beq.w	8007258 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fec:	e134      	b.n	8007258 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f000 8130 	beq.w	8007258 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007000:	e12a      	b.n	8007258 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	f003 0320 	and.w	r3, r3, #32
 8007008:	2b00      	cmp	r3, #0
 800700a:	f040 8089 	bne.w	8007120 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a2b      	ldr	r2, [pc, #172]	; (80070c0 <HAL_DMA_IRQHandler+0xc74>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d04a      	beq.n	80070ae <HAL_DMA_IRQHandler+0xc62>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a29      	ldr	r2, [pc, #164]	; (80070c4 <HAL_DMA_IRQHandler+0xc78>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d045      	beq.n	80070ae <HAL_DMA_IRQHandler+0xc62>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a28      	ldr	r2, [pc, #160]	; (80070c8 <HAL_DMA_IRQHandler+0xc7c>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d040      	beq.n	80070ae <HAL_DMA_IRQHandler+0xc62>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a26      	ldr	r2, [pc, #152]	; (80070cc <HAL_DMA_IRQHandler+0xc80>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d03b      	beq.n	80070ae <HAL_DMA_IRQHandler+0xc62>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a25      	ldr	r2, [pc, #148]	; (80070d0 <HAL_DMA_IRQHandler+0xc84>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d036      	beq.n	80070ae <HAL_DMA_IRQHandler+0xc62>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a23      	ldr	r2, [pc, #140]	; (80070d4 <HAL_DMA_IRQHandler+0xc88>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d031      	beq.n	80070ae <HAL_DMA_IRQHandler+0xc62>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a22      	ldr	r2, [pc, #136]	; (80070d8 <HAL_DMA_IRQHandler+0xc8c>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d02c      	beq.n	80070ae <HAL_DMA_IRQHandler+0xc62>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a20      	ldr	r2, [pc, #128]	; (80070dc <HAL_DMA_IRQHandler+0xc90>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d027      	beq.n	80070ae <HAL_DMA_IRQHandler+0xc62>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a1f      	ldr	r2, [pc, #124]	; (80070e0 <HAL_DMA_IRQHandler+0xc94>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d022      	beq.n	80070ae <HAL_DMA_IRQHandler+0xc62>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a1d      	ldr	r2, [pc, #116]	; (80070e4 <HAL_DMA_IRQHandler+0xc98>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d01d      	beq.n	80070ae <HAL_DMA_IRQHandler+0xc62>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a1c      	ldr	r2, [pc, #112]	; (80070e8 <HAL_DMA_IRQHandler+0xc9c>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d018      	beq.n	80070ae <HAL_DMA_IRQHandler+0xc62>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a1a      	ldr	r2, [pc, #104]	; (80070ec <HAL_DMA_IRQHandler+0xca0>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d013      	beq.n	80070ae <HAL_DMA_IRQHandler+0xc62>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a19      	ldr	r2, [pc, #100]	; (80070f0 <HAL_DMA_IRQHandler+0xca4>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d00e      	beq.n	80070ae <HAL_DMA_IRQHandler+0xc62>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a17      	ldr	r2, [pc, #92]	; (80070f4 <HAL_DMA_IRQHandler+0xca8>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d009      	beq.n	80070ae <HAL_DMA_IRQHandler+0xc62>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a16      	ldr	r2, [pc, #88]	; (80070f8 <HAL_DMA_IRQHandler+0xcac>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d004      	beq.n	80070ae <HAL_DMA_IRQHandler+0xc62>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a14      	ldr	r2, [pc, #80]	; (80070fc <HAL_DMA_IRQHandler+0xcb0>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d128      	bne.n	8007100 <HAL_DMA_IRQHandler+0xcb4>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f022 0214 	bic.w	r2, r2, #20
 80070bc:	601a      	str	r2, [r3, #0]
 80070be:	e027      	b.n	8007110 <HAL_DMA_IRQHandler+0xcc4>
 80070c0:	40020010 	.word	0x40020010
 80070c4:	40020028 	.word	0x40020028
 80070c8:	40020040 	.word	0x40020040
 80070cc:	40020058 	.word	0x40020058
 80070d0:	40020070 	.word	0x40020070
 80070d4:	40020088 	.word	0x40020088
 80070d8:	400200a0 	.word	0x400200a0
 80070dc:	400200b8 	.word	0x400200b8
 80070e0:	40020410 	.word	0x40020410
 80070e4:	40020428 	.word	0x40020428
 80070e8:	40020440 	.word	0x40020440
 80070ec:	40020458 	.word	0x40020458
 80070f0:	40020470 	.word	0x40020470
 80070f4:	40020488 	.word	0x40020488
 80070f8:	400204a0 	.word	0x400204a0
 80070fc:	400204b8 	.word	0x400204b8
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f022 020a 	bic.w	r2, r2, #10
 800710e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007124:	2b00      	cmp	r3, #0
 8007126:	f000 8097 	beq.w	8007258 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007132:	e091      	b.n	8007258 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007138:	f003 031f 	and.w	r3, r3, #31
 800713c:	2208      	movs	r2, #8
 800713e:	409a      	lsls	r2, r3
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	4013      	ands	r3, r2
 8007144:	2b00      	cmp	r3, #0
 8007146:	f000 8088 	beq.w	800725a <HAL_DMA_IRQHandler+0xe0e>
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	f003 0308 	and.w	r3, r3, #8
 8007150:	2b00      	cmp	r3, #0
 8007152:	f000 8082 	beq.w	800725a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a41      	ldr	r2, [pc, #260]	; (8007260 <HAL_DMA_IRQHandler+0xe14>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d04a      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xdaa>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a3f      	ldr	r2, [pc, #252]	; (8007264 <HAL_DMA_IRQHandler+0xe18>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d045      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xdaa>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a3e      	ldr	r2, [pc, #248]	; (8007268 <HAL_DMA_IRQHandler+0xe1c>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d040      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xdaa>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a3c      	ldr	r2, [pc, #240]	; (800726c <HAL_DMA_IRQHandler+0xe20>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d03b      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xdaa>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a3b      	ldr	r2, [pc, #236]	; (8007270 <HAL_DMA_IRQHandler+0xe24>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d036      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xdaa>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a39      	ldr	r2, [pc, #228]	; (8007274 <HAL_DMA_IRQHandler+0xe28>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d031      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xdaa>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a38      	ldr	r2, [pc, #224]	; (8007278 <HAL_DMA_IRQHandler+0xe2c>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d02c      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xdaa>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a36      	ldr	r2, [pc, #216]	; (800727c <HAL_DMA_IRQHandler+0xe30>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d027      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xdaa>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a35      	ldr	r2, [pc, #212]	; (8007280 <HAL_DMA_IRQHandler+0xe34>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d022      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xdaa>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a33      	ldr	r2, [pc, #204]	; (8007284 <HAL_DMA_IRQHandler+0xe38>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d01d      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xdaa>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a32      	ldr	r2, [pc, #200]	; (8007288 <HAL_DMA_IRQHandler+0xe3c>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d018      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xdaa>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a30      	ldr	r2, [pc, #192]	; (800728c <HAL_DMA_IRQHandler+0xe40>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d013      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xdaa>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a2f      	ldr	r2, [pc, #188]	; (8007290 <HAL_DMA_IRQHandler+0xe44>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d00e      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xdaa>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a2d      	ldr	r2, [pc, #180]	; (8007294 <HAL_DMA_IRQHandler+0xe48>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d009      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xdaa>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a2c      	ldr	r2, [pc, #176]	; (8007298 <HAL_DMA_IRQHandler+0xe4c>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d004      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xdaa>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a2a      	ldr	r2, [pc, #168]	; (800729c <HAL_DMA_IRQHandler+0xe50>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d108      	bne.n	8007208 <HAL_DMA_IRQHandler+0xdbc>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f022 021c 	bic.w	r2, r2, #28
 8007204:	601a      	str	r2, [r3, #0]
 8007206:	e007      	b.n	8007218 <HAL_DMA_IRQHandler+0xdcc>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f022 020e 	bic.w	r2, r2, #14
 8007216:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800721c:	f003 031f 	and.w	r3, r3, #31
 8007220:	2201      	movs	r2, #1
 8007222:	409a      	lsls	r2, r3
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007242:	2b00      	cmp	r3, #0
 8007244:	d009      	beq.n	800725a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	4798      	blx	r3
 800724e:	e004      	b.n	800725a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007250:	bf00      	nop
 8007252:	e002      	b.n	800725a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007254:	bf00      	nop
 8007256:	e000      	b.n	800725a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007258:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800725a:	3728      	adds	r7, #40	; 0x28
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}
 8007260:	40020010 	.word	0x40020010
 8007264:	40020028 	.word	0x40020028
 8007268:	40020040 	.word	0x40020040
 800726c:	40020058 	.word	0x40020058
 8007270:	40020070 	.word	0x40020070
 8007274:	40020088 	.word	0x40020088
 8007278:	400200a0 	.word	0x400200a0
 800727c:	400200b8 	.word	0x400200b8
 8007280:	40020410 	.word	0x40020410
 8007284:	40020428 	.word	0x40020428
 8007288:	40020440 	.word	0x40020440
 800728c:	40020458 	.word	0x40020458
 8007290:	40020470 	.word	0x40020470
 8007294:	40020488 	.word	0x40020488
 8007298:	400204a0 	.word	0x400204a0
 800729c:	400204b8 	.word	0x400204b8

080072a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b087      	sub	sp, #28
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
 80072ac:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072b2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072b8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a7f      	ldr	r2, [pc, #508]	; (80074bc <DMA_SetConfig+0x21c>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d072      	beq.n	80073aa <DMA_SetConfig+0x10a>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a7d      	ldr	r2, [pc, #500]	; (80074c0 <DMA_SetConfig+0x220>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d06d      	beq.n	80073aa <DMA_SetConfig+0x10a>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a7c      	ldr	r2, [pc, #496]	; (80074c4 <DMA_SetConfig+0x224>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d068      	beq.n	80073aa <DMA_SetConfig+0x10a>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a7a      	ldr	r2, [pc, #488]	; (80074c8 <DMA_SetConfig+0x228>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d063      	beq.n	80073aa <DMA_SetConfig+0x10a>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a79      	ldr	r2, [pc, #484]	; (80074cc <DMA_SetConfig+0x22c>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d05e      	beq.n	80073aa <DMA_SetConfig+0x10a>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a77      	ldr	r2, [pc, #476]	; (80074d0 <DMA_SetConfig+0x230>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d059      	beq.n	80073aa <DMA_SetConfig+0x10a>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a76      	ldr	r2, [pc, #472]	; (80074d4 <DMA_SetConfig+0x234>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d054      	beq.n	80073aa <DMA_SetConfig+0x10a>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a74      	ldr	r2, [pc, #464]	; (80074d8 <DMA_SetConfig+0x238>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d04f      	beq.n	80073aa <DMA_SetConfig+0x10a>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a73      	ldr	r2, [pc, #460]	; (80074dc <DMA_SetConfig+0x23c>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d04a      	beq.n	80073aa <DMA_SetConfig+0x10a>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a71      	ldr	r2, [pc, #452]	; (80074e0 <DMA_SetConfig+0x240>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d045      	beq.n	80073aa <DMA_SetConfig+0x10a>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a70      	ldr	r2, [pc, #448]	; (80074e4 <DMA_SetConfig+0x244>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d040      	beq.n	80073aa <DMA_SetConfig+0x10a>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a6e      	ldr	r2, [pc, #440]	; (80074e8 <DMA_SetConfig+0x248>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d03b      	beq.n	80073aa <DMA_SetConfig+0x10a>
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a6d      	ldr	r2, [pc, #436]	; (80074ec <DMA_SetConfig+0x24c>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d036      	beq.n	80073aa <DMA_SetConfig+0x10a>
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a6b      	ldr	r2, [pc, #428]	; (80074f0 <DMA_SetConfig+0x250>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d031      	beq.n	80073aa <DMA_SetConfig+0x10a>
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a6a      	ldr	r2, [pc, #424]	; (80074f4 <DMA_SetConfig+0x254>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d02c      	beq.n	80073aa <DMA_SetConfig+0x10a>
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a68      	ldr	r2, [pc, #416]	; (80074f8 <DMA_SetConfig+0x258>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d027      	beq.n	80073aa <DMA_SetConfig+0x10a>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a67      	ldr	r2, [pc, #412]	; (80074fc <DMA_SetConfig+0x25c>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d022      	beq.n	80073aa <DMA_SetConfig+0x10a>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a65      	ldr	r2, [pc, #404]	; (8007500 <DMA_SetConfig+0x260>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d01d      	beq.n	80073aa <DMA_SetConfig+0x10a>
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a64      	ldr	r2, [pc, #400]	; (8007504 <DMA_SetConfig+0x264>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d018      	beq.n	80073aa <DMA_SetConfig+0x10a>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a62      	ldr	r2, [pc, #392]	; (8007508 <DMA_SetConfig+0x268>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d013      	beq.n	80073aa <DMA_SetConfig+0x10a>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a61      	ldr	r2, [pc, #388]	; (800750c <DMA_SetConfig+0x26c>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d00e      	beq.n	80073aa <DMA_SetConfig+0x10a>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a5f      	ldr	r2, [pc, #380]	; (8007510 <DMA_SetConfig+0x270>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d009      	beq.n	80073aa <DMA_SetConfig+0x10a>
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a5e      	ldr	r2, [pc, #376]	; (8007514 <DMA_SetConfig+0x274>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d004      	beq.n	80073aa <DMA_SetConfig+0x10a>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a5c      	ldr	r2, [pc, #368]	; (8007518 <DMA_SetConfig+0x278>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d101      	bne.n	80073ae <DMA_SetConfig+0x10e>
 80073aa:	2301      	movs	r3, #1
 80073ac:	e000      	b.n	80073b0 <DMA_SetConfig+0x110>
 80073ae:	2300      	movs	r3, #0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00d      	beq.n	80073d0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80073bc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d004      	beq.n	80073d0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80073ce:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a39      	ldr	r2, [pc, #228]	; (80074bc <DMA_SetConfig+0x21c>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d04a      	beq.n	8007470 <DMA_SetConfig+0x1d0>
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a38      	ldr	r2, [pc, #224]	; (80074c0 <DMA_SetConfig+0x220>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d045      	beq.n	8007470 <DMA_SetConfig+0x1d0>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a36      	ldr	r2, [pc, #216]	; (80074c4 <DMA_SetConfig+0x224>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d040      	beq.n	8007470 <DMA_SetConfig+0x1d0>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a35      	ldr	r2, [pc, #212]	; (80074c8 <DMA_SetConfig+0x228>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d03b      	beq.n	8007470 <DMA_SetConfig+0x1d0>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a33      	ldr	r2, [pc, #204]	; (80074cc <DMA_SetConfig+0x22c>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d036      	beq.n	8007470 <DMA_SetConfig+0x1d0>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a32      	ldr	r2, [pc, #200]	; (80074d0 <DMA_SetConfig+0x230>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d031      	beq.n	8007470 <DMA_SetConfig+0x1d0>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a30      	ldr	r2, [pc, #192]	; (80074d4 <DMA_SetConfig+0x234>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d02c      	beq.n	8007470 <DMA_SetConfig+0x1d0>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a2f      	ldr	r2, [pc, #188]	; (80074d8 <DMA_SetConfig+0x238>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d027      	beq.n	8007470 <DMA_SetConfig+0x1d0>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a2d      	ldr	r2, [pc, #180]	; (80074dc <DMA_SetConfig+0x23c>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d022      	beq.n	8007470 <DMA_SetConfig+0x1d0>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a2c      	ldr	r2, [pc, #176]	; (80074e0 <DMA_SetConfig+0x240>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d01d      	beq.n	8007470 <DMA_SetConfig+0x1d0>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a2a      	ldr	r2, [pc, #168]	; (80074e4 <DMA_SetConfig+0x244>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d018      	beq.n	8007470 <DMA_SetConfig+0x1d0>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a29      	ldr	r2, [pc, #164]	; (80074e8 <DMA_SetConfig+0x248>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d013      	beq.n	8007470 <DMA_SetConfig+0x1d0>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a27      	ldr	r2, [pc, #156]	; (80074ec <DMA_SetConfig+0x24c>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d00e      	beq.n	8007470 <DMA_SetConfig+0x1d0>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a26      	ldr	r2, [pc, #152]	; (80074f0 <DMA_SetConfig+0x250>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d009      	beq.n	8007470 <DMA_SetConfig+0x1d0>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a24      	ldr	r2, [pc, #144]	; (80074f4 <DMA_SetConfig+0x254>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d004      	beq.n	8007470 <DMA_SetConfig+0x1d0>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a23      	ldr	r2, [pc, #140]	; (80074f8 <DMA_SetConfig+0x258>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d101      	bne.n	8007474 <DMA_SetConfig+0x1d4>
 8007470:	2301      	movs	r3, #1
 8007472:	e000      	b.n	8007476 <DMA_SetConfig+0x1d6>
 8007474:	2300      	movs	r3, #0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d059      	beq.n	800752e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800747e:	f003 031f 	and.w	r3, r3, #31
 8007482:	223f      	movs	r2, #63	; 0x3f
 8007484:	409a      	lsls	r2, r3
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007498:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	683a      	ldr	r2, [r7, #0]
 80074a0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	2b40      	cmp	r3, #64	; 0x40
 80074a8:	d138      	bne.n	800751c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80074ba:	e086      	b.n	80075ca <DMA_SetConfig+0x32a>
 80074bc:	40020010 	.word	0x40020010
 80074c0:	40020028 	.word	0x40020028
 80074c4:	40020040 	.word	0x40020040
 80074c8:	40020058 	.word	0x40020058
 80074cc:	40020070 	.word	0x40020070
 80074d0:	40020088 	.word	0x40020088
 80074d4:	400200a0 	.word	0x400200a0
 80074d8:	400200b8 	.word	0x400200b8
 80074dc:	40020410 	.word	0x40020410
 80074e0:	40020428 	.word	0x40020428
 80074e4:	40020440 	.word	0x40020440
 80074e8:	40020458 	.word	0x40020458
 80074ec:	40020470 	.word	0x40020470
 80074f0:	40020488 	.word	0x40020488
 80074f4:	400204a0 	.word	0x400204a0
 80074f8:	400204b8 	.word	0x400204b8
 80074fc:	58025408 	.word	0x58025408
 8007500:	5802541c 	.word	0x5802541c
 8007504:	58025430 	.word	0x58025430
 8007508:	58025444 	.word	0x58025444
 800750c:	58025458 	.word	0x58025458
 8007510:	5802546c 	.word	0x5802546c
 8007514:	58025480 	.word	0x58025480
 8007518:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	60da      	str	r2, [r3, #12]
}
 800752c:	e04d      	b.n	80075ca <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a29      	ldr	r2, [pc, #164]	; (80075d8 <DMA_SetConfig+0x338>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d022      	beq.n	800757e <DMA_SetConfig+0x2de>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a27      	ldr	r2, [pc, #156]	; (80075dc <DMA_SetConfig+0x33c>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d01d      	beq.n	800757e <DMA_SetConfig+0x2de>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a26      	ldr	r2, [pc, #152]	; (80075e0 <DMA_SetConfig+0x340>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d018      	beq.n	800757e <DMA_SetConfig+0x2de>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a24      	ldr	r2, [pc, #144]	; (80075e4 <DMA_SetConfig+0x344>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d013      	beq.n	800757e <DMA_SetConfig+0x2de>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a23      	ldr	r2, [pc, #140]	; (80075e8 <DMA_SetConfig+0x348>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d00e      	beq.n	800757e <DMA_SetConfig+0x2de>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a21      	ldr	r2, [pc, #132]	; (80075ec <DMA_SetConfig+0x34c>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d009      	beq.n	800757e <DMA_SetConfig+0x2de>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a20      	ldr	r2, [pc, #128]	; (80075f0 <DMA_SetConfig+0x350>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d004      	beq.n	800757e <DMA_SetConfig+0x2de>
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a1e      	ldr	r2, [pc, #120]	; (80075f4 <DMA_SetConfig+0x354>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d101      	bne.n	8007582 <DMA_SetConfig+0x2e2>
 800757e:	2301      	movs	r3, #1
 8007580:	e000      	b.n	8007584 <DMA_SetConfig+0x2e4>
 8007582:	2300      	movs	r3, #0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d020      	beq.n	80075ca <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800758c:	f003 031f 	and.w	r3, r3, #31
 8007590:	2201      	movs	r2, #1
 8007592:	409a      	lsls	r2, r3
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	683a      	ldr	r2, [r7, #0]
 800759e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	2b40      	cmp	r3, #64	; 0x40
 80075a6:	d108      	bne.n	80075ba <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68ba      	ldr	r2, [r7, #8]
 80075b6:	60da      	str	r2, [r3, #12]
}
 80075b8:	e007      	b.n	80075ca <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68ba      	ldr	r2, [r7, #8]
 80075c0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	60da      	str	r2, [r3, #12]
}
 80075ca:	bf00      	nop
 80075cc:	371c      	adds	r7, #28
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	58025408 	.word	0x58025408
 80075dc:	5802541c 	.word	0x5802541c
 80075e0:	58025430 	.word	0x58025430
 80075e4:	58025444 	.word	0x58025444
 80075e8:	58025458 	.word	0x58025458
 80075ec:	5802546c 	.word	0x5802546c
 80075f0:	58025480 	.word	0x58025480
 80075f4:	58025494 	.word	0x58025494

080075f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a42      	ldr	r2, [pc, #264]	; (8007710 <DMA_CalcBaseAndBitshift+0x118>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d04a      	beq.n	80076a0 <DMA_CalcBaseAndBitshift+0xa8>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a41      	ldr	r2, [pc, #260]	; (8007714 <DMA_CalcBaseAndBitshift+0x11c>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d045      	beq.n	80076a0 <DMA_CalcBaseAndBitshift+0xa8>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a3f      	ldr	r2, [pc, #252]	; (8007718 <DMA_CalcBaseAndBitshift+0x120>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d040      	beq.n	80076a0 <DMA_CalcBaseAndBitshift+0xa8>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a3e      	ldr	r2, [pc, #248]	; (800771c <DMA_CalcBaseAndBitshift+0x124>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d03b      	beq.n	80076a0 <DMA_CalcBaseAndBitshift+0xa8>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a3c      	ldr	r2, [pc, #240]	; (8007720 <DMA_CalcBaseAndBitshift+0x128>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d036      	beq.n	80076a0 <DMA_CalcBaseAndBitshift+0xa8>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a3b      	ldr	r2, [pc, #236]	; (8007724 <DMA_CalcBaseAndBitshift+0x12c>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d031      	beq.n	80076a0 <DMA_CalcBaseAndBitshift+0xa8>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a39      	ldr	r2, [pc, #228]	; (8007728 <DMA_CalcBaseAndBitshift+0x130>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d02c      	beq.n	80076a0 <DMA_CalcBaseAndBitshift+0xa8>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a38      	ldr	r2, [pc, #224]	; (800772c <DMA_CalcBaseAndBitshift+0x134>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d027      	beq.n	80076a0 <DMA_CalcBaseAndBitshift+0xa8>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a36      	ldr	r2, [pc, #216]	; (8007730 <DMA_CalcBaseAndBitshift+0x138>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d022      	beq.n	80076a0 <DMA_CalcBaseAndBitshift+0xa8>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a35      	ldr	r2, [pc, #212]	; (8007734 <DMA_CalcBaseAndBitshift+0x13c>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d01d      	beq.n	80076a0 <DMA_CalcBaseAndBitshift+0xa8>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a33      	ldr	r2, [pc, #204]	; (8007738 <DMA_CalcBaseAndBitshift+0x140>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d018      	beq.n	80076a0 <DMA_CalcBaseAndBitshift+0xa8>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a32      	ldr	r2, [pc, #200]	; (800773c <DMA_CalcBaseAndBitshift+0x144>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d013      	beq.n	80076a0 <DMA_CalcBaseAndBitshift+0xa8>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a30      	ldr	r2, [pc, #192]	; (8007740 <DMA_CalcBaseAndBitshift+0x148>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d00e      	beq.n	80076a0 <DMA_CalcBaseAndBitshift+0xa8>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a2f      	ldr	r2, [pc, #188]	; (8007744 <DMA_CalcBaseAndBitshift+0x14c>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d009      	beq.n	80076a0 <DMA_CalcBaseAndBitshift+0xa8>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a2d      	ldr	r2, [pc, #180]	; (8007748 <DMA_CalcBaseAndBitshift+0x150>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d004      	beq.n	80076a0 <DMA_CalcBaseAndBitshift+0xa8>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a2c      	ldr	r2, [pc, #176]	; (800774c <DMA_CalcBaseAndBitshift+0x154>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d101      	bne.n	80076a4 <DMA_CalcBaseAndBitshift+0xac>
 80076a0:	2301      	movs	r3, #1
 80076a2:	e000      	b.n	80076a6 <DMA_CalcBaseAndBitshift+0xae>
 80076a4:	2300      	movs	r3, #0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d024      	beq.n	80076f4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	3b10      	subs	r3, #16
 80076b2:	4a27      	ldr	r2, [pc, #156]	; (8007750 <DMA_CalcBaseAndBitshift+0x158>)
 80076b4:	fba2 2303 	umull	r2, r3, r2, r3
 80076b8:	091b      	lsrs	r3, r3, #4
 80076ba:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f003 0307 	and.w	r3, r3, #7
 80076c2:	4a24      	ldr	r2, [pc, #144]	; (8007754 <DMA_CalcBaseAndBitshift+0x15c>)
 80076c4:	5cd3      	ldrb	r3, [r2, r3]
 80076c6:	461a      	mov	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2b03      	cmp	r3, #3
 80076d0:	d908      	bls.n	80076e4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	461a      	mov	r2, r3
 80076d8:	4b1f      	ldr	r3, [pc, #124]	; (8007758 <DMA_CalcBaseAndBitshift+0x160>)
 80076da:	4013      	ands	r3, r2
 80076dc:	1d1a      	adds	r2, r3, #4
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	659a      	str	r2, [r3, #88]	; 0x58
 80076e2:	e00d      	b.n	8007700 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	461a      	mov	r2, r3
 80076ea:	4b1b      	ldr	r3, [pc, #108]	; (8007758 <DMA_CalcBaseAndBitshift+0x160>)
 80076ec:	4013      	ands	r3, r2
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	6593      	str	r3, [r2, #88]	; 0x58
 80076f2:	e005      	b.n	8007700 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007704:	4618      	mov	r0, r3
 8007706:	3714      	adds	r7, #20
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr
 8007710:	40020010 	.word	0x40020010
 8007714:	40020028 	.word	0x40020028
 8007718:	40020040 	.word	0x40020040
 800771c:	40020058 	.word	0x40020058
 8007720:	40020070 	.word	0x40020070
 8007724:	40020088 	.word	0x40020088
 8007728:	400200a0 	.word	0x400200a0
 800772c:	400200b8 	.word	0x400200b8
 8007730:	40020410 	.word	0x40020410
 8007734:	40020428 	.word	0x40020428
 8007738:	40020440 	.word	0x40020440
 800773c:	40020458 	.word	0x40020458
 8007740:	40020470 	.word	0x40020470
 8007744:	40020488 	.word	0x40020488
 8007748:	400204a0 	.word	0x400204a0
 800774c:	400204b8 	.word	0x400204b8
 8007750:	aaaaaaab 	.word	0xaaaaaaab
 8007754:	080131d0 	.word	0x080131d0
 8007758:	fffffc00 	.word	0xfffffc00

0800775c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007764:	2300      	movs	r3, #0
 8007766:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d120      	bne.n	80077b2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007774:	2b03      	cmp	r3, #3
 8007776:	d858      	bhi.n	800782a <DMA_CheckFifoParam+0xce>
 8007778:	a201      	add	r2, pc, #4	; (adr r2, 8007780 <DMA_CheckFifoParam+0x24>)
 800777a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800777e:	bf00      	nop
 8007780:	08007791 	.word	0x08007791
 8007784:	080077a3 	.word	0x080077a3
 8007788:	08007791 	.word	0x08007791
 800778c:	0800782b 	.word	0x0800782b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d048      	beq.n	800782e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80077a0:	e045      	b.n	800782e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80077aa:	d142      	bne.n	8007832 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80077b0:	e03f      	b.n	8007832 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077ba:	d123      	bne.n	8007804 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c0:	2b03      	cmp	r3, #3
 80077c2:	d838      	bhi.n	8007836 <DMA_CheckFifoParam+0xda>
 80077c4:	a201      	add	r2, pc, #4	; (adr r2, 80077cc <DMA_CheckFifoParam+0x70>)
 80077c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ca:	bf00      	nop
 80077cc:	080077dd 	.word	0x080077dd
 80077d0:	080077e3 	.word	0x080077e3
 80077d4:	080077dd 	.word	0x080077dd
 80077d8:	080077f5 	.word	0x080077f5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	73fb      	strb	r3, [r7, #15]
        break;
 80077e0:	e030      	b.n	8007844 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d025      	beq.n	800783a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80077f2:	e022      	b.n	800783a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80077fc:	d11f      	bne.n	800783e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007802:	e01c      	b.n	800783e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007808:	2b02      	cmp	r3, #2
 800780a:	d902      	bls.n	8007812 <DMA_CheckFifoParam+0xb6>
 800780c:	2b03      	cmp	r3, #3
 800780e:	d003      	beq.n	8007818 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007810:	e018      	b.n	8007844 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	73fb      	strb	r3, [r7, #15]
        break;
 8007816:	e015      	b.n	8007844 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800781c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007820:	2b00      	cmp	r3, #0
 8007822:	d00e      	beq.n	8007842 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	73fb      	strb	r3, [r7, #15]
    break;
 8007828:	e00b      	b.n	8007842 <DMA_CheckFifoParam+0xe6>
        break;
 800782a:	bf00      	nop
 800782c:	e00a      	b.n	8007844 <DMA_CheckFifoParam+0xe8>
        break;
 800782e:	bf00      	nop
 8007830:	e008      	b.n	8007844 <DMA_CheckFifoParam+0xe8>
        break;
 8007832:	bf00      	nop
 8007834:	e006      	b.n	8007844 <DMA_CheckFifoParam+0xe8>
        break;
 8007836:	bf00      	nop
 8007838:	e004      	b.n	8007844 <DMA_CheckFifoParam+0xe8>
        break;
 800783a:	bf00      	nop
 800783c:	e002      	b.n	8007844 <DMA_CheckFifoParam+0xe8>
        break;
 800783e:	bf00      	nop
 8007840:	e000      	b.n	8007844 <DMA_CheckFifoParam+0xe8>
    break;
 8007842:	bf00      	nop
    }
  }

  return status;
 8007844:	7bfb      	ldrb	r3, [r7, #15]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3714      	adds	r7, #20
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop

08007854 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007854:	b480      	push	{r7}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a38      	ldr	r2, [pc, #224]	; (8007948 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d022      	beq.n	80078b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a36      	ldr	r2, [pc, #216]	; (800794c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d01d      	beq.n	80078b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a35      	ldr	r2, [pc, #212]	; (8007950 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d018      	beq.n	80078b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a33      	ldr	r2, [pc, #204]	; (8007954 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d013      	beq.n	80078b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a32      	ldr	r2, [pc, #200]	; (8007958 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d00e      	beq.n	80078b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a30      	ldr	r2, [pc, #192]	; (800795c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d009      	beq.n	80078b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a2f      	ldr	r2, [pc, #188]	; (8007960 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d004      	beq.n	80078b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a2d      	ldr	r2, [pc, #180]	; (8007964 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d101      	bne.n	80078b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80078b2:	2301      	movs	r3, #1
 80078b4:	e000      	b.n	80078b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80078b6:	2300      	movs	r3, #0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d01a      	beq.n	80078f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	3b08      	subs	r3, #8
 80078c4:	4a28      	ldr	r2, [pc, #160]	; (8007968 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80078c6:	fba2 2303 	umull	r2, r3, r2, r3
 80078ca:	091b      	lsrs	r3, r3, #4
 80078cc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	4b26      	ldr	r3, [pc, #152]	; (800796c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80078d2:	4413      	add	r3, r2
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	461a      	mov	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a24      	ldr	r2, [pc, #144]	; (8007970 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80078e0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f003 031f 	and.w	r3, r3, #31
 80078e8:	2201      	movs	r2, #1
 80078ea:	409a      	lsls	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80078f0:	e024      	b.n	800793c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	3b10      	subs	r3, #16
 80078fa:	4a1e      	ldr	r2, [pc, #120]	; (8007974 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80078fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007900:	091b      	lsrs	r3, r3, #4
 8007902:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	4a1c      	ldr	r2, [pc, #112]	; (8007978 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d806      	bhi.n	800791a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	4a1b      	ldr	r2, [pc, #108]	; (800797c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d902      	bls.n	800791a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	3308      	adds	r3, #8
 8007918:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	4b18      	ldr	r3, [pc, #96]	; (8007980 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800791e:	4413      	add	r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	461a      	mov	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a16      	ldr	r2, [pc, #88]	; (8007984 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800792c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f003 031f 	and.w	r3, r3, #31
 8007934:	2201      	movs	r2, #1
 8007936:	409a      	lsls	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800793c:	bf00      	nop
 800793e:	3714      	adds	r7, #20
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr
 8007948:	58025408 	.word	0x58025408
 800794c:	5802541c 	.word	0x5802541c
 8007950:	58025430 	.word	0x58025430
 8007954:	58025444 	.word	0x58025444
 8007958:	58025458 	.word	0x58025458
 800795c:	5802546c 	.word	0x5802546c
 8007960:	58025480 	.word	0x58025480
 8007964:	58025494 	.word	0x58025494
 8007968:	cccccccd 	.word	0xcccccccd
 800796c:	16009600 	.word	0x16009600
 8007970:	58025880 	.word	0x58025880
 8007974:	aaaaaaab 	.word	0xaaaaaaab
 8007978:	400204b8 	.word	0x400204b8
 800797c:	4002040f 	.word	0x4002040f
 8007980:	10008200 	.word	0x10008200
 8007984:	40020880 	.word	0x40020880

08007988 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	b2db      	uxtb	r3, r3
 8007996:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d04a      	beq.n	8007a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2b08      	cmp	r3, #8
 80079a2:	d847      	bhi.n	8007a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a25      	ldr	r2, [pc, #148]	; (8007a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d022      	beq.n	80079f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a24      	ldr	r2, [pc, #144]	; (8007a44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d01d      	beq.n	80079f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a22      	ldr	r2, [pc, #136]	; (8007a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d018      	beq.n	80079f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a21      	ldr	r2, [pc, #132]	; (8007a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d013      	beq.n	80079f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a1f      	ldr	r2, [pc, #124]	; (8007a50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d00e      	beq.n	80079f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a1e      	ldr	r2, [pc, #120]	; (8007a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d009      	beq.n	80079f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a1c      	ldr	r2, [pc, #112]	; (8007a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d004      	beq.n	80079f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a1b      	ldr	r2, [pc, #108]	; (8007a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d101      	bne.n	80079f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80079f4:	2301      	movs	r3, #1
 80079f6:	e000      	b.n	80079fa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80079f8:	2300      	movs	r3, #0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00a      	beq.n	8007a14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	4b17      	ldr	r3, [pc, #92]	; (8007a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007a02:	4413      	add	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	461a      	mov	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a15      	ldr	r2, [pc, #84]	; (8007a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007a10:	671a      	str	r2, [r3, #112]	; 0x70
 8007a12:	e009      	b.n	8007a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	4b14      	ldr	r3, [pc, #80]	; (8007a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007a18:	4413      	add	r3, r2
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a11      	ldr	r2, [pc, #68]	; (8007a6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007a26:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	409a      	lsls	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007a34:	bf00      	nop
 8007a36:	3714      	adds	r7, #20
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr
 8007a40:	58025408 	.word	0x58025408
 8007a44:	5802541c 	.word	0x5802541c
 8007a48:	58025430 	.word	0x58025430
 8007a4c:	58025444 	.word	0x58025444
 8007a50:	58025458 	.word	0x58025458
 8007a54:	5802546c 	.word	0x5802546c
 8007a58:	58025480 	.word	0x58025480
 8007a5c:	58025494 	.word	0x58025494
 8007a60:	1600963f 	.word	0x1600963f
 8007a64:	58025940 	.word	0x58025940
 8007a68:	1000823f 	.word	0x1000823f
 8007a6c:	40020940 	.word	0x40020940

08007a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b089      	sub	sp, #36	; 0x24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007a7e:	4b89      	ldr	r3, [pc, #548]	; (8007ca4 <HAL_GPIO_Init+0x234>)
 8007a80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007a82:	e194      	b.n	8007dae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	2101      	movs	r1, #1
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a90:	4013      	ands	r3, r2
 8007a92:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f000 8186 	beq.w	8007da8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	f003 0303 	and.w	r3, r3, #3
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d005      	beq.n	8007ab4 <HAL_GPIO_Init+0x44>
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	f003 0303 	and.w	r3, r3, #3
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	d130      	bne.n	8007b16 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	005b      	lsls	r3, r3, #1
 8007abe:	2203      	movs	r2, #3
 8007ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac4:	43db      	mvns	r3, r3
 8007ac6:	69ba      	ldr	r2, [r7, #24]
 8007ac8:	4013      	ands	r3, r2
 8007aca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	68da      	ldr	r2, [r3, #12]
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	005b      	lsls	r3, r3, #1
 8007ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad8:	69ba      	ldr	r2, [r7, #24]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	69ba      	ldr	r2, [r7, #24]
 8007ae2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007aea:	2201      	movs	r2, #1
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	fa02 f303 	lsl.w	r3, r2, r3
 8007af2:	43db      	mvns	r3, r3
 8007af4:	69ba      	ldr	r2, [r7, #24]
 8007af6:	4013      	ands	r3, r2
 8007af8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	091b      	lsrs	r3, r3, #4
 8007b00:	f003 0201 	and.w	r2, r3, #1
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	fa02 f303 	lsl.w	r3, r2, r3
 8007b0a:	69ba      	ldr	r2, [r7, #24]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	69ba      	ldr	r2, [r7, #24]
 8007b14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	f003 0303 	and.w	r3, r3, #3
 8007b1e:	2b03      	cmp	r3, #3
 8007b20:	d017      	beq.n	8007b52 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	005b      	lsls	r3, r3, #1
 8007b2c:	2203      	movs	r2, #3
 8007b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b32:	43db      	mvns	r3, r3
 8007b34:	69ba      	ldr	r2, [r7, #24]
 8007b36:	4013      	ands	r3, r2
 8007b38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	689a      	ldr	r2, [r3, #8]
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	005b      	lsls	r3, r3, #1
 8007b42:	fa02 f303 	lsl.w	r3, r2, r3
 8007b46:	69ba      	ldr	r2, [r7, #24]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	69ba      	ldr	r2, [r7, #24]
 8007b50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	f003 0303 	and.w	r3, r3, #3
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	d123      	bne.n	8007ba6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	08da      	lsrs	r2, r3, #3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	3208      	adds	r2, #8
 8007b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	f003 0307 	and.w	r3, r3, #7
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	220f      	movs	r2, #15
 8007b76:	fa02 f303 	lsl.w	r3, r2, r3
 8007b7a:	43db      	mvns	r3, r3
 8007b7c:	69ba      	ldr	r2, [r7, #24]
 8007b7e:	4013      	ands	r3, r2
 8007b80:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	691a      	ldr	r2, [r3, #16]
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	f003 0307 	and.w	r3, r3, #7
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b92:	69ba      	ldr	r2, [r7, #24]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	08da      	lsrs	r2, r3, #3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	3208      	adds	r2, #8
 8007ba0:	69b9      	ldr	r1, [r7, #24]
 8007ba2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	005b      	lsls	r3, r3, #1
 8007bb0:	2203      	movs	r2, #3
 8007bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb6:	43db      	mvns	r3, r3
 8007bb8:	69ba      	ldr	r2, [r7, #24]
 8007bba:	4013      	ands	r3, r2
 8007bbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f003 0203 	and.w	r2, r3, #3
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	005b      	lsls	r3, r3, #1
 8007bca:	fa02 f303 	lsl.w	r3, r2, r3
 8007bce:	69ba      	ldr	r2, [r7, #24]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	69ba      	ldr	r2, [r7, #24]
 8007bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	f000 80e0 	beq.w	8007da8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007be8:	4b2f      	ldr	r3, [pc, #188]	; (8007ca8 <HAL_GPIO_Init+0x238>)
 8007bea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007bee:	4a2e      	ldr	r2, [pc, #184]	; (8007ca8 <HAL_GPIO_Init+0x238>)
 8007bf0:	f043 0302 	orr.w	r3, r3, #2
 8007bf4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007bf8:	4b2b      	ldr	r3, [pc, #172]	; (8007ca8 <HAL_GPIO_Init+0x238>)
 8007bfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007bfe:	f003 0302 	and.w	r3, r3, #2
 8007c02:	60fb      	str	r3, [r7, #12]
 8007c04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007c06:	4a29      	ldr	r2, [pc, #164]	; (8007cac <HAL_GPIO_Init+0x23c>)
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	089b      	lsrs	r3, r3, #2
 8007c0c:	3302      	adds	r3, #2
 8007c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	f003 0303 	and.w	r3, r3, #3
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	220f      	movs	r2, #15
 8007c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c22:	43db      	mvns	r3, r3
 8007c24:	69ba      	ldr	r2, [r7, #24]
 8007c26:	4013      	ands	r3, r2
 8007c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a20      	ldr	r2, [pc, #128]	; (8007cb0 <HAL_GPIO_Init+0x240>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d052      	beq.n	8007cd8 <HAL_GPIO_Init+0x268>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a1f      	ldr	r2, [pc, #124]	; (8007cb4 <HAL_GPIO_Init+0x244>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d031      	beq.n	8007c9e <HAL_GPIO_Init+0x22e>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a1e      	ldr	r2, [pc, #120]	; (8007cb8 <HAL_GPIO_Init+0x248>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d02b      	beq.n	8007c9a <HAL_GPIO_Init+0x22a>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a1d      	ldr	r2, [pc, #116]	; (8007cbc <HAL_GPIO_Init+0x24c>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d025      	beq.n	8007c96 <HAL_GPIO_Init+0x226>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a1c      	ldr	r2, [pc, #112]	; (8007cc0 <HAL_GPIO_Init+0x250>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d01f      	beq.n	8007c92 <HAL_GPIO_Init+0x222>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a1b      	ldr	r2, [pc, #108]	; (8007cc4 <HAL_GPIO_Init+0x254>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d019      	beq.n	8007c8e <HAL_GPIO_Init+0x21e>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a1a      	ldr	r2, [pc, #104]	; (8007cc8 <HAL_GPIO_Init+0x258>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d013      	beq.n	8007c8a <HAL_GPIO_Init+0x21a>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a19      	ldr	r2, [pc, #100]	; (8007ccc <HAL_GPIO_Init+0x25c>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d00d      	beq.n	8007c86 <HAL_GPIO_Init+0x216>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a18      	ldr	r2, [pc, #96]	; (8007cd0 <HAL_GPIO_Init+0x260>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d007      	beq.n	8007c82 <HAL_GPIO_Init+0x212>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a17      	ldr	r2, [pc, #92]	; (8007cd4 <HAL_GPIO_Init+0x264>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d101      	bne.n	8007c7e <HAL_GPIO_Init+0x20e>
 8007c7a:	2309      	movs	r3, #9
 8007c7c:	e02d      	b.n	8007cda <HAL_GPIO_Init+0x26a>
 8007c7e:	230a      	movs	r3, #10
 8007c80:	e02b      	b.n	8007cda <HAL_GPIO_Init+0x26a>
 8007c82:	2308      	movs	r3, #8
 8007c84:	e029      	b.n	8007cda <HAL_GPIO_Init+0x26a>
 8007c86:	2307      	movs	r3, #7
 8007c88:	e027      	b.n	8007cda <HAL_GPIO_Init+0x26a>
 8007c8a:	2306      	movs	r3, #6
 8007c8c:	e025      	b.n	8007cda <HAL_GPIO_Init+0x26a>
 8007c8e:	2305      	movs	r3, #5
 8007c90:	e023      	b.n	8007cda <HAL_GPIO_Init+0x26a>
 8007c92:	2304      	movs	r3, #4
 8007c94:	e021      	b.n	8007cda <HAL_GPIO_Init+0x26a>
 8007c96:	2303      	movs	r3, #3
 8007c98:	e01f      	b.n	8007cda <HAL_GPIO_Init+0x26a>
 8007c9a:	2302      	movs	r3, #2
 8007c9c:	e01d      	b.n	8007cda <HAL_GPIO_Init+0x26a>
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e01b      	b.n	8007cda <HAL_GPIO_Init+0x26a>
 8007ca2:	bf00      	nop
 8007ca4:	58000080 	.word	0x58000080
 8007ca8:	58024400 	.word	0x58024400
 8007cac:	58000400 	.word	0x58000400
 8007cb0:	58020000 	.word	0x58020000
 8007cb4:	58020400 	.word	0x58020400
 8007cb8:	58020800 	.word	0x58020800
 8007cbc:	58020c00 	.word	0x58020c00
 8007cc0:	58021000 	.word	0x58021000
 8007cc4:	58021400 	.word	0x58021400
 8007cc8:	58021800 	.word	0x58021800
 8007ccc:	58021c00 	.word	0x58021c00
 8007cd0:	58022000 	.word	0x58022000
 8007cd4:	58022400 	.word	0x58022400
 8007cd8:	2300      	movs	r3, #0
 8007cda:	69fa      	ldr	r2, [r7, #28]
 8007cdc:	f002 0203 	and.w	r2, r2, #3
 8007ce0:	0092      	lsls	r2, r2, #2
 8007ce2:	4093      	lsls	r3, r2
 8007ce4:	69ba      	ldr	r2, [r7, #24]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007cea:	4938      	ldr	r1, [pc, #224]	; (8007dcc <HAL_GPIO_Init+0x35c>)
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	089b      	lsrs	r3, r3, #2
 8007cf0:	3302      	adds	r3, #2
 8007cf2:	69ba      	ldr	r2, [r7, #24]
 8007cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	43db      	mvns	r3, r3
 8007d04:	69ba      	ldr	r2, [r7, #24]
 8007d06:	4013      	ands	r3, r2
 8007d08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d003      	beq.n	8007d1e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007d16:	69ba      	ldr	r2, [r7, #24]
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007d1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	43db      	mvns	r3, r3
 8007d32:	69ba      	ldr	r2, [r7, #24]
 8007d34:	4013      	ands	r3, r2
 8007d36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d003      	beq.n	8007d4c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007d44:	69ba      	ldr	r2, [r7, #24]
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007d4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	43db      	mvns	r3, r3
 8007d5e:	69ba      	ldr	r2, [r7, #24]
 8007d60:	4013      	ands	r3, r2
 8007d62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d003      	beq.n	8007d78 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007d70:	69ba      	ldr	r2, [r7, #24]
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	69ba      	ldr	r2, [r7, #24]
 8007d7c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	43db      	mvns	r3, r3
 8007d88:	69ba      	ldr	r2, [r7, #24]
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d003      	beq.n	8007da2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007d9a:	69ba      	ldr	r2, [r7, #24]
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	69ba      	ldr	r2, [r7, #24]
 8007da6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	3301      	adds	r3, #1
 8007dac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	fa22 f303 	lsr.w	r3, r2, r3
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	f47f ae63 	bne.w	8007a84 <HAL_GPIO_Init+0x14>
  }
}
 8007dbe:	bf00      	nop
 8007dc0:	bf00      	nop
 8007dc2:	3724      	adds	r7, #36	; 0x24
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr
 8007dcc:	58000400 	.word	0x58000400

08007dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	807b      	strh	r3, [r7, #2]
 8007ddc:	4613      	mov	r3, r2
 8007dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007de0:	787b      	ldrb	r3, [r7, #1]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d003      	beq.n	8007dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007de6:	887a      	ldrh	r2, [r7, #2]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007dec:	e003      	b.n	8007df6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007dee:	887b      	ldrh	r3, [r7, #2]
 8007df0:	041a      	lsls	r2, r3, #16
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	619a      	str	r2, [r3, #24]
}
 8007df6:	bf00      	nop
 8007df8:	370c      	adds	r7, #12
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007e02:	b480      	push	{r7}
 8007e04:	b085      	sub	sp, #20
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	695b      	ldr	r3, [r3, #20]
 8007e12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007e14:	887a      	ldrh	r2, [r7, #2]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	4013      	ands	r3, r2
 8007e1a:	041a      	lsls	r2, r3, #16
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	43d9      	mvns	r1, r3
 8007e20:	887b      	ldrh	r3, [r7, #2]
 8007e22:	400b      	ands	r3, r1
 8007e24:	431a      	orrs	r2, r3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	619a      	str	r2, [r3, #24]
}
 8007e2a:	bf00      	nop
 8007e2c:	3714      	adds	r7, #20
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
	...

08007e38 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007e40:	4a08      	ldr	r2, [pc, #32]	; (8007e64 <HAL_HSEM_FastTake+0x2c>)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	3320      	adds	r3, #32
 8007e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e4a:	4a07      	ldr	r2, [pc, #28]	; (8007e68 <HAL_HSEM_FastTake+0x30>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d101      	bne.n	8007e54 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8007e50:	2300      	movs	r3, #0
 8007e52:	e000      	b.n	8007e56 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	370c      	adds	r7, #12
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	58026400 	.word	0x58026400
 8007e68:	80000300 	.word	0x80000300

08007e6c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8007e76:	4906      	ldr	r1, [pc, #24]	; (8007e90 <HAL_HSEM_Release+0x24>)
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8007e84:	bf00      	nop
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr
 8007e90:	58026400 	.word	0x58026400

08007e94 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e96:	b08f      	sub	sp, #60	; 0x3c
 8007e98:	af0a      	add	r7, sp, #40	; 0x28
 8007e9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d101      	bne.n	8007ea6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e116      	b.n	80080d4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d106      	bne.n	8007ec6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f00a fdbf 	bl	8012a44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2203      	movs	r2, #3
 8007eca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d102      	bne.n	8007ee0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f007 f83e 	bl	800ef66 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	603b      	str	r3, [r7, #0]
 8007ef0:	687e      	ldr	r6, [r7, #4]
 8007ef2:	466d      	mov	r5, sp
 8007ef4:	f106 0410 	add.w	r4, r6, #16
 8007ef8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007efa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007efc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007efe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007f04:	e885 0003 	stmia.w	r5, {r0, r1}
 8007f08:	1d33      	adds	r3, r6, #4
 8007f0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f0c:	6838      	ldr	r0, [r7, #0]
 8007f0e:	f006 ff09 	bl	800ed24 <USB_CoreInit>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d005      	beq.n	8007f24 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	e0d7      	b.n	80080d4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2100      	movs	r1, #0
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f007 f82c 	bl	800ef88 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f30:	2300      	movs	r3, #0
 8007f32:	73fb      	strb	r3, [r7, #15]
 8007f34:	e04a      	b.n	8007fcc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007f36:	7bfa      	ldrb	r2, [r7, #15]
 8007f38:	6879      	ldr	r1, [r7, #4]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	00db      	lsls	r3, r3, #3
 8007f3e:	4413      	add	r3, r2
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	440b      	add	r3, r1
 8007f44:	333d      	adds	r3, #61	; 0x3d
 8007f46:	2201      	movs	r2, #1
 8007f48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007f4a:	7bfa      	ldrb	r2, [r7, #15]
 8007f4c:	6879      	ldr	r1, [r7, #4]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	00db      	lsls	r3, r3, #3
 8007f52:	4413      	add	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	440b      	add	r3, r1
 8007f58:	333c      	adds	r3, #60	; 0x3c
 8007f5a:	7bfa      	ldrb	r2, [r7, #15]
 8007f5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007f5e:	7bfa      	ldrb	r2, [r7, #15]
 8007f60:	7bfb      	ldrb	r3, [r7, #15]
 8007f62:	b298      	uxth	r0, r3
 8007f64:	6879      	ldr	r1, [r7, #4]
 8007f66:	4613      	mov	r3, r2
 8007f68:	00db      	lsls	r3, r3, #3
 8007f6a:	4413      	add	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	440b      	add	r3, r1
 8007f70:	3344      	adds	r3, #68	; 0x44
 8007f72:	4602      	mov	r2, r0
 8007f74:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007f76:	7bfa      	ldrb	r2, [r7, #15]
 8007f78:	6879      	ldr	r1, [r7, #4]
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	00db      	lsls	r3, r3, #3
 8007f7e:	4413      	add	r3, r2
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	440b      	add	r3, r1
 8007f84:	3340      	adds	r3, #64	; 0x40
 8007f86:	2200      	movs	r2, #0
 8007f88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007f8a:	7bfa      	ldrb	r2, [r7, #15]
 8007f8c:	6879      	ldr	r1, [r7, #4]
 8007f8e:	4613      	mov	r3, r2
 8007f90:	00db      	lsls	r3, r3, #3
 8007f92:	4413      	add	r3, r2
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	440b      	add	r3, r1
 8007f98:	3348      	adds	r3, #72	; 0x48
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007f9e:	7bfa      	ldrb	r2, [r7, #15]
 8007fa0:	6879      	ldr	r1, [r7, #4]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	00db      	lsls	r3, r3, #3
 8007fa6:	4413      	add	r3, r2
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	440b      	add	r3, r1
 8007fac:	334c      	adds	r3, #76	; 0x4c
 8007fae:	2200      	movs	r2, #0
 8007fb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007fb2:	7bfa      	ldrb	r2, [r7, #15]
 8007fb4:	6879      	ldr	r1, [r7, #4]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	00db      	lsls	r3, r3, #3
 8007fba:	4413      	add	r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	440b      	add	r3, r1
 8007fc0:	3354      	adds	r3, #84	; 0x54
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007fc6:	7bfb      	ldrb	r3, [r7, #15]
 8007fc8:	3301      	adds	r3, #1
 8007fca:	73fb      	strb	r3, [r7, #15]
 8007fcc:	7bfa      	ldrb	r2, [r7, #15]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d3af      	bcc.n	8007f36 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	73fb      	strb	r3, [r7, #15]
 8007fda:	e044      	b.n	8008066 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007fdc:	7bfa      	ldrb	r2, [r7, #15]
 8007fde:	6879      	ldr	r1, [r7, #4]
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	00db      	lsls	r3, r3, #3
 8007fe4:	4413      	add	r3, r2
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	440b      	add	r3, r1
 8007fea:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007fee:	2200      	movs	r2, #0
 8007ff0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007ff2:	7bfa      	ldrb	r2, [r7, #15]
 8007ff4:	6879      	ldr	r1, [r7, #4]
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	00db      	lsls	r3, r3, #3
 8007ffa:	4413      	add	r3, r2
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	440b      	add	r3, r1
 8008000:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008004:	7bfa      	ldrb	r2, [r7, #15]
 8008006:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008008:	7bfa      	ldrb	r2, [r7, #15]
 800800a:	6879      	ldr	r1, [r7, #4]
 800800c:	4613      	mov	r3, r2
 800800e:	00db      	lsls	r3, r3, #3
 8008010:	4413      	add	r3, r2
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	440b      	add	r3, r1
 8008016:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800801a:	2200      	movs	r2, #0
 800801c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800801e:	7bfa      	ldrb	r2, [r7, #15]
 8008020:	6879      	ldr	r1, [r7, #4]
 8008022:	4613      	mov	r3, r2
 8008024:	00db      	lsls	r3, r3, #3
 8008026:	4413      	add	r3, r2
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	440b      	add	r3, r1
 800802c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008030:	2200      	movs	r2, #0
 8008032:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008034:	7bfa      	ldrb	r2, [r7, #15]
 8008036:	6879      	ldr	r1, [r7, #4]
 8008038:	4613      	mov	r3, r2
 800803a:	00db      	lsls	r3, r3, #3
 800803c:	4413      	add	r3, r2
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	440b      	add	r3, r1
 8008042:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008046:	2200      	movs	r2, #0
 8008048:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800804a:	7bfa      	ldrb	r2, [r7, #15]
 800804c:	6879      	ldr	r1, [r7, #4]
 800804e:	4613      	mov	r3, r2
 8008050:	00db      	lsls	r3, r3, #3
 8008052:	4413      	add	r3, r2
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	440b      	add	r3, r1
 8008058:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800805c:	2200      	movs	r2, #0
 800805e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008060:	7bfb      	ldrb	r3, [r7, #15]
 8008062:	3301      	adds	r3, #1
 8008064:	73fb      	strb	r3, [r7, #15]
 8008066:	7bfa      	ldrb	r2, [r7, #15]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	429a      	cmp	r2, r3
 800806e:	d3b5      	bcc.n	8007fdc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	603b      	str	r3, [r7, #0]
 8008076:	687e      	ldr	r6, [r7, #4]
 8008078:	466d      	mov	r5, sp
 800807a:	f106 0410 	add.w	r4, r6, #16
 800807e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008080:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008082:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008084:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008086:	e894 0003 	ldmia.w	r4, {r0, r1}
 800808a:	e885 0003 	stmia.w	r5, {r0, r1}
 800808e:	1d33      	adds	r3, r6, #4
 8008090:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008092:	6838      	ldr	r0, [r7, #0]
 8008094:	f006 ffc4 	bl	800f020 <USB_DevInit>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d005      	beq.n	80080aa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2202      	movs	r2, #2
 80080a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e014      	b.n	80080d4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d102      	bne.n	80080c8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f001 f98c 	bl	80093e0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4618      	mov	r0, r3
 80080ce:	f008 f912 	bl	80102f6 <USB_DevDisconnect>

  return HAL_OK;
 80080d2:	2300      	movs	r3, #0
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3714      	adds	r7, #20
 80080d8:	46bd      	mov	sp, r7
 80080da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080080dc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d101      	bne.n	80080f8 <HAL_PCD_Start+0x1c>
 80080f4:	2302      	movs	r3, #2
 80080f6:	e020      	b.n	800813a <HAL_PCD_Start+0x5e>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008104:	2b01      	cmp	r3, #1
 8008106:	d109      	bne.n	800811c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800810c:	2b01      	cmp	r3, #1
 800810e:	d005      	beq.n	800811c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008114:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4618      	mov	r0, r3
 8008122:	f006 ff0f 	bl	800ef44 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4618      	mov	r0, r3
 800812c:	f008 f8c2 	bl	80102b4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008142:	b590      	push	{r4, r7, lr}
 8008144:	b08d      	sub	sp, #52	; 0x34
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008150:	6a3b      	ldr	r3, [r7, #32]
 8008152:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4618      	mov	r0, r3
 800815a:	f008 f980 	bl	801045e <USB_GetMode>
 800815e:	4603      	mov	r3, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	f040 84b7 	bne.w	8008ad4 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4618      	mov	r0, r3
 800816c:	f008 f8e4 	bl	8010338 <USB_ReadInterrupts>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	f000 84ad 	beq.w	8008ad2 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	0a1b      	lsrs	r3, r3, #8
 8008182:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4618      	mov	r0, r3
 8008192:	f008 f8d1 	bl	8010338 <USB_ReadInterrupts>
 8008196:	4603      	mov	r3, r0
 8008198:	f003 0302 	and.w	r3, r3, #2
 800819c:	2b02      	cmp	r3, #2
 800819e:	d107      	bne.n	80081b0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	695a      	ldr	r2, [r3, #20]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f002 0202 	and.w	r2, r2, #2
 80081ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4618      	mov	r0, r3
 80081b6:	f008 f8bf 	bl	8010338 <USB_ReadInterrupts>
 80081ba:	4603      	mov	r3, r0
 80081bc:	f003 0310 	and.w	r3, r3, #16
 80081c0:	2b10      	cmp	r3, #16
 80081c2:	d161      	bne.n	8008288 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	699a      	ldr	r2, [r3, #24]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f022 0210 	bic.w	r2, r2, #16
 80081d2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80081d4:	6a3b      	ldr	r3, [r7, #32]
 80081d6:	6a1b      	ldr	r3, [r3, #32]
 80081d8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	f003 020f 	and.w	r2, r3, #15
 80081e0:	4613      	mov	r3, r2
 80081e2:	00db      	lsls	r3, r3, #3
 80081e4:	4413      	add	r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	4413      	add	r3, r2
 80081f0:	3304      	adds	r3, #4
 80081f2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	0c5b      	lsrs	r3, r3, #17
 80081f8:	f003 030f 	and.w	r3, r3, #15
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	d124      	bne.n	800824a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008200:	69ba      	ldr	r2, [r7, #24]
 8008202:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008206:	4013      	ands	r3, r2
 8008208:	2b00      	cmp	r3, #0
 800820a:	d035      	beq.n	8008278 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	091b      	lsrs	r3, r3, #4
 8008214:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008216:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800821a:	b29b      	uxth	r3, r3
 800821c:	461a      	mov	r2, r3
 800821e:	6a38      	ldr	r0, [r7, #32]
 8008220:	f007 fef6 	bl	8010010 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	691a      	ldr	r2, [r3, #16]
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	091b      	lsrs	r3, r3, #4
 800822c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008230:	441a      	add	r2, r3
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	6a1a      	ldr	r2, [r3, #32]
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	091b      	lsrs	r3, r3, #4
 800823e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008242:	441a      	add	r2, r3
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	621a      	str	r2, [r3, #32]
 8008248:	e016      	b.n	8008278 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800824a:	69bb      	ldr	r3, [r7, #24]
 800824c:	0c5b      	lsrs	r3, r3, #17
 800824e:	f003 030f 	and.w	r3, r3, #15
 8008252:	2b06      	cmp	r3, #6
 8008254:	d110      	bne.n	8008278 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800825c:	2208      	movs	r2, #8
 800825e:	4619      	mov	r1, r3
 8008260:	6a38      	ldr	r0, [r7, #32]
 8008262:	f007 fed5 	bl	8010010 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	6a1a      	ldr	r2, [r3, #32]
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	091b      	lsrs	r3, r3, #4
 800826e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008272:	441a      	add	r2, r3
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	699a      	ldr	r2, [r3, #24]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f042 0210 	orr.w	r2, r2, #16
 8008286:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4618      	mov	r0, r3
 800828e:	f008 f853 	bl	8010338 <USB_ReadInterrupts>
 8008292:	4603      	mov	r3, r0
 8008294:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008298:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800829c:	f040 80a7 	bne.w	80083ee <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80082a0:	2300      	movs	r3, #0
 80082a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4618      	mov	r0, r3
 80082aa:	f008 f858 	bl	801035e <USB_ReadDevAllOutEpInterrupt>
 80082ae:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80082b0:	e099      	b.n	80083e6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80082b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b4:	f003 0301 	and.w	r3, r3, #1
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	f000 808e 	beq.w	80083da <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082c4:	b2d2      	uxtb	r2, r2
 80082c6:	4611      	mov	r1, r2
 80082c8:	4618      	mov	r0, r3
 80082ca:	f008 f87c 	bl	80103c6 <USB_ReadDevOutEPInterrupt>
 80082ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00c      	beq.n	80082f4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80082da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082dc:	015a      	lsls	r2, r3, #5
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	4413      	add	r3, r2
 80082e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e6:	461a      	mov	r2, r3
 80082e8:	2301      	movs	r3, #1
 80082ea:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80082ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fef0 	bl	80090d4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	f003 0308 	and.w	r3, r3, #8
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00c      	beq.n	8008318 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80082fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008300:	015a      	lsls	r2, r3, #5
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	4413      	add	r3, r2
 8008306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800830a:	461a      	mov	r2, r3
 800830c:	2308      	movs	r3, #8
 800830e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008310:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 ffc6 	bl	80092a4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	f003 0310 	and.w	r3, r3, #16
 800831e:	2b00      	cmp	r3, #0
 8008320:	d008      	beq.n	8008334 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008324:	015a      	lsls	r2, r3, #5
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	4413      	add	r3, r2
 800832a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800832e:	461a      	mov	r2, r3
 8008330:	2310      	movs	r3, #16
 8008332:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	f003 0302 	and.w	r3, r3, #2
 800833a:	2b00      	cmp	r3, #0
 800833c:	d030      	beq.n	80083a0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800833e:	6a3b      	ldr	r3, [r7, #32]
 8008340:	695b      	ldr	r3, [r3, #20]
 8008342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008346:	2b80      	cmp	r3, #128	; 0x80
 8008348:	d109      	bne.n	800835e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	69fa      	ldr	r2, [r7, #28]
 8008354:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008358:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800835c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800835e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008360:	4613      	mov	r3, r2
 8008362:	00db      	lsls	r3, r3, #3
 8008364:	4413      	add	r3, r2
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	4413      	add	r3, r2
 8008370:	3304      	adds	r3, #4
 8008372:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	78db      	ldrb	r3, [r3, #3]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d108      	bne.n	800838e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	2200      	movs	r2, #0
 8008380:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008384:	b2db      	uxtb	r3, r3
 8008386:	4619      	mov	r1, r3
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f00a fc9d 	bl	8012cc8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800838e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008390:	015a      	lsls	r2, r3, #5
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	4413      	add	r3, r2
 8008396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800839a:	461a      	mov	r2, r3
 800839c:	2302      	movs	r3, #2
 800839e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	f003 0320 	and.w	r3, r3, #32
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d008      	beq.n	80083bc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80083aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ac:	015a      	lsls	r2, r3, #5
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	4413      	add	r3, r2
 80083b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083b6:	461a      	mov	r2, r3
 80083b8:	2320      	movs	r3, #32
 80083ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d009      	beq.n	80083da <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80083c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c8:	015a      	lsls	r2, r3, #5
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	4413      	add	r3, r2
 80083ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d2:	461a      	mov	r2, r3
 80083d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80083d8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80083da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083dc:	3301      	adds	r3, #1
 80083de:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80083e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e2:	085b      	lsrs	r3, r3, #1
 80083e4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80083e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f47f af62 	bne.w	80082b2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4618      	mov	r0, r3
 80083f4:	f007 ffa0 	bl	8010338 <USB_ReadInterrupts>
 80083f8:	4603      	mov	r3, r0
 80083fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80083fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008402:	f040 80db 	bne.w	80085bc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4618      	mov	r0, r3
 800840c:	f007 ffc1 	bl	8010392 <USB_ReadDevAllInEpInterrupt>
 8008410:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008412:	2300      	movs	r3, #0
 8008414:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008416:	e0cd      	b.n	80085b4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841a:	f003 0301 	and.w	r3, r3, #1
 800841e:	2b00      	cmp	r3, #0
 8008420:	f000 80c2 	beq.w	80085a8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800842a:	b2d2      	uxtb	r2, r2
 800842c:	4611      	mov	r1, r2
 800842e:	4618      	mov	r0, r3
 8008430:	f007 ffe7 	bl	8010402 <USB_ReadDevInEPInterrupt>
 8008434:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	f003 0301 	and.w	r3, r3, #1
 800843c:	2b00      	cmp	r3, #0
 800843e:	d057      	beq.n	80084f0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008442:	f003 030f 	and.w	r3, r3, #15
 8008446:	2201      	movs	r2, #1
 8008448:	fa02 f303 	lsl.w	r3, r2, r3
 800844c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008454:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	43db      	mvns	r3, r3
 800845a:	69f9      	ldr	r1, [r7, #28]
 800845c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008460:	4013      	ands	r3, r2
 8008462:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008466:	015a      	lsls	r2, r3, #5
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	4413      	add	r3, r2
 800846c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008470:	461a      	mov	r2, r3
 8008472:	2301      	movs	r3, #1
 8008474:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	691b      	ldr	r3, [r3, #16]
 800847a:	2b01      	cmp	r3, #1
 800847c:	d132      	bne.n	80084e4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800847e:	6879      	ldr	r1, [r7, #4]
 8008480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008482:	4613      	mov	r3, r2
 8008484:	00db      	lsls	r3, r3, #3
 8008486:	4413      	add	r3, r2
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	440b      	add	r3, r1
 800848c:	334c      	adds	r3, #76	; 0x4c
 800848e:	6819      	ldr	r1, [r3, #0]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008494:	4613      	mov	r3, r2
 8008496:	00db      	lsls	r3, r3, #3
 8008498:	4413      	add	r3, r2
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	4403      	add	r3, r0
 800849e:	3348      	adds	r3, #72	; 0x48
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4419      	add	r1, r3
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084a8:	4613      	mov	r3, r2
 80084aa:	00db      	lsls	r3, r3, #3
 80084ac:	4413      	add	r3, r2
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	4403      	add	r3, r0
 80084b2:	334c      	adds	r3, #76	; 0x4c
 80084b4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80084b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d113      	bne.n	80084e4 <HAL_PCD_IRQHandler+0x3a2>
 80084bc:	6879      	ldr	r1, [r7, #4]
 80084be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084c0:	4613      	mov	r3, r2
 80084c2:	00db      	lsls	r3, r3, #3
 80084c4:	4413      	add	r3, r2
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	440b      	add	r3, r1
 80084ca:	3354      	adds	r3, #84	; 0x54
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d108      	bne.n	80084e4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6818      	ldr	r0, [r3, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80084dc:	461a      	mov	r2, r3
 80084de:	2101      	movs	r1, #1
 80084e0:	f007 fff0 	bl	80104c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80084e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	4619      	mov	r1, r3
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f00a fb67 	bl	8012bbe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	f003 0308 	and.w	r3, r3, #8
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d008      	beq.n	800850c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80084fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fc:	015a      	lsls	r2, r3, #5
 80084fe:	69fb      	ldr	r3, [r7, #28]
 8008500:	4413      	add	r3, r2
 8008502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008506:	461a      	mov	r2, r3
 8008508:	2308      	movs	r3, #8
 800850a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	f003 0310 	and.w	r3, r3, #16
 8008512:	2b00      	cmp	r3, #0
 8008514:	d008      	beq.n	8008528 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008518:	015a      	lsls	r2, r3, #5
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	4413      	add	r3, r2
 800851e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008522:	461a      	mov	r2, r3
 8008524:	2310      	movs	r3, #16
 8008526:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800852e:	2b00      	cmp	r3, #0
 8008530:	d008      	beq.n	8008544 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008534:	015a      	lsls	r2, r3, #5
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	4413      	add	r3, r2
 800853a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800853e:	461a      	mov	r2, r3
 8008540:	2340      	movs	r3, #64	; 0x40
 8008542:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	f003 0302 	and.w	r3, r3, #2
 800854a:	2b00      	cmp	r3, #0
 800854c:	d023      	beq.n	8008596 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800854e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008550:	6a38      	ldr	r0, [r7, #32]
 8008552:	f006 fec3 	bl	800f2dc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008558:	4613      	mov	r3, r2
 800855a:	00db      	lsls	r3, r3, #3
 800855c:	4413      	add	r3, r2
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	3338      	adds	r3, #56	; 0x38
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	4413      	add	r3, r2
 8008566:	3304      	adds	r3, #4
 8008568:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	78db      	ldrb	r3, [r3, #3]
 800856e:	2b01      	cmp	r3, #1
 8008570:	d108      	bne.n	8008584 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	2200      	movs	r2, #0
 8008576:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857a:	b2db      	uxtb	r3, r3
 800857c:	4619      	mov	r1, r3
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f00a fbb4 	bl	8012cec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008586:	015a      	lsls	r2, r3, #5
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	4413      	add	r3, r2
 800858c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008590:	461a      	mov	r2, r3
 8008592:	2302      	movs	r3, #2
 8008594:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800859c:	2b00      	cmp	r3, #0
 800859e:	d003      	beq.n	80085a8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80085a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fd08 	bl	8008fb8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80085a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085aa:	3301      	adds	r3, #1
 80085ac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80085ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b0:	085b      	lsrs	r3, r3, #1
 80085b2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80085b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	f47f af2e 	bne.w	8008418 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4618      	mov	r0, r3
 80085c2:	f007 feb9 	bl	8010338 <USB_ReadInterrupts>
 80085c6:	4603      	mov	r3, r0
 80085c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085d0:	d122      	bne.n	8008618 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	69fa      	ldr	r2, [r7, #28]
 80085dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085e0:	f023 0301 	bic.w	r3, r3, #1
 80085e4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d108      	bne.n	8008602 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80085f8:	2100      	movs	r1, #0
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 ff14 	bl	8009428 <HAL_PCDEx_LPM_Callback>
 8008600:	e002      	b.n	8008608 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f00a fb52 	bl	8012cac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	695a      	ldr	r2, [r3, #20]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008616:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4618      	mov	r0, r3
 800861e:	f007 fe8b 	bl	8010338 <USB_ReadInterrupts>
 8008622:	4603      	mov	r3, r0
 8008624:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008628:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800862c:	d112      	bne.n	8008654 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	f003 0301 	and.w	r3, r3, #1
 800863a:	2b01      	cmp	r3, #1
 800863c:	d102      	bne.n	8008644 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f00a fb0e 	bl	8012c60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	695a      	ldr	r2, [r3, #20]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008652:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4618      	mov	r0, r3
 800865a:	f007 fe6d 	bl	8010338 <USB_ReadInterrupts>
 800865e:	4603      	mov	r3, r0
 8008660:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008664:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008668:	d121      	bne.n	80086ae <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	695a      	ldr	r2, [r3, #20]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008678:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008680:	2b00      	cmp	r3, #0
 8008682:	d111      	bne.n	80086a8 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008692:	089b      	lsrs	r3, r3, #2
 8008694:	f003 020f 	and.w	r2, r3, #15
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800869e:	2101      	movs	r1, #1
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 fec1 	bl	8009428 <HAL_PCDEx_LPM_Callback>
 80086a6:	e002      	b.n	80086ae <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f00a fad9 	bl	8012c60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4618      	mov	r0, r3
 80086b4:	f007 fe40 	bl	8010338 <USB_ReadInterrupts>
 80086b8:	4603      	mov	r3, r0
 80086ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80086be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086c2:	f040 80b7 	bne.w	8008834 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	69fa      	ldr	r2, [r7, #28]
 80086d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086d4:	f023 0301 	bic.w	r3, r3, #1
 80086d8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2110      	movs	r1, #16
 80086e0:	4618      	mov	r0, r3
 80086e2:	f006 fdfb 	bl	800f2dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80086e6:	2300      	movs	r3, #0
 80086e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086ea:	e046      	b.n	800877a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80086ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ee:	015a      	lsls	r2, r3, #5
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	4413      	add	r3, r2
 80086f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086f8:	461a      	mov	r2, r3
 80086fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80086fe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008702:	015a      	lsls	r2, r3, #5
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	4413      	add	r3, r2
 8008708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008710:	0151      	lsls	r1, r2, #5
 8008712:	69fa      	ldr	r2, [r7, #28]
 8008714:	440a      	add	r2, r1
 8008716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800871a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800871e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008722:	015a      	lsls	r2, r3, #5
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	4413      	add	r3, r2
 8008728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800872c:	461a      	mov	r2, r3
 800872e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008732:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008736:	015a      	lsls	r2, r3, #5
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	4413      	add	r3, r2
 800873c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008744:	0151      	lsls	r1, r2, #5
 8008746:	69fa      	ldr	r2, [r7, #28]
 8008748:	440a      	add	r2, r1
 800874a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800874e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008752:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008756:	015a      	lsls	r2, r3, #5
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	4413      	add	r3, r2
 800875c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008764:	0151      	lsls	r1, r2, #5
 8008766:	69fa      	ldr	r2, [r7, #28]
 8008768:	440a      	add	r2, r1
 800876a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800876e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008772:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008776:	3301      	adds	r3, #1
 8008778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008780:	429a      	cmp	r2, r3
 8008782:	d3b3      	bcc.n	80086ec <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800878a:	69db      	ldr	r3, [r3, #28]
 800878c:	69fa      	ldr	r2, [r7, #28]
 800878e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008792:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008796:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800879c:	2b00      	cmp	r3, #0
 800879e:	d016      	beq.n	80087ce <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087aa:	69fa      	ldr	r2, [r7, #28]
 80087ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087b0:	f043 030b 	orr.w	r3, r3, #11
 80087b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087c0:	69fa      	ldr	r2, [r7, #28]
 80087c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087c6:	f043 030b 	orr.w	r3, r3, #11
 80087ca:	6453      	str	r3, [r2, #68]	; 0x44
 80087cc:	e015      	b.n	80087fa <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80087ce:	69fb      	ldr	r3, [r7, #28]
 80087d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087d4:	695a      	ldr	r2, [r3, #20]
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087dc:	4619      	mov	r1, r3
 80087de:	f242 032b 	movw	r3, #8235	; 0x202b
 80087e2:	4313      	orrs	r3, r2
 80087e4:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	69fa      	ldr	r2, [r7, #28]
 80087f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087f4:	f043 030b 	orr.w	r3, r3, #11
 80087f8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	69fa      	ldr	r2, [r7, #28]
 8008804:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008808:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800880c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6818      	ldr	r0, [r3, #0]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800881e:	461a      	mov	r2, r3
 8008820:	f007 fe50 	bl	80104c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	695a      	ldr	r2, [r3, #20]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008832:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4618      	mov	r0, r3
 800883a:	f007 fd7d 	bl	8010338 <USB_ReadInterrupts>
 800883e:	4603      	mov	r3, r0
 8008840:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008848:	d124      	bne.n	8008894 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4618      	mov	r0, r3
 8008850:	f007 fe14 	bl	801047c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4618      	mov	r0, r3
 800885a:	f006 fdbc 	bl	800f3d6 <USB_GetDevSpeed>
 800885e:	4603      	mov	r3, r0
 8008860:	461a      	mov	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681c      	ldr	r4, [r3, #0]
 800886a:	f001 fe1b 	bl	800a4a4 <HAL_RCC_GetHCLKFreq>
 800886e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008874:	b2db      	uxtb	r3, r3
 8008876:	461a      	mov	r2, r3
 8008878:	4620      	mov	r0, r4
 800887a:	f006 fac1 	bl	800ee00 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f00a f9c5 	bl	8012c0e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	695a      	ldr	r2, [r3, #20]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008892:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4618      	mov	r0, r3
 800889a:	f007 fd4d 	bl	8010338 <USB_ReadInterrupts>
 800889e:	4603      	mov	r3, r0
 80088a0:	f003 0308 	and.w	r3, r3, #8
 80088a4:	2b08      	cmp	r3, #8
 80088a6:	d10a      	bne.n	80088be <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f00a f9a2 	bl	8012bf2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	695a      	ldr	r2, [r3, #20]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f002 0208 	and.w	r2, r2, #8
 80088bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4618      	mov	r0, r3
 80088c4:	f007 fd38 	bl	8010338 <USB_ReadInterrupts>
 80088c8:	4603      	mov	r3, r0
 80088ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ce:	2b80      	cmp	r3, #128	; 0x80
 80088d0:	d122      	bne.n	8008918 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80088d2:	6a3b      	ldr	r3, [r7, #32]
 80088d4:	699b      	ldr	r3, [r3, #24]
 80088d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80088da:	6a3b      	ldr	r3, [r7, #32]
 80088dc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80088de:	2301      	movs	r3, #1
 80088e0:	627b      	str	r3, [r7, #36]	; 0x24
 80088e2:	e014      	b.n	800890e <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80088e4:	6879      	ldr	r1, [r7, #4]
 80088e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088e8:	4613      	mov	r3, r2
 80088ea:	00db      	lsls	r3, r3, #3
 80088ec:	4413      	add	r3, r2
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	440b      	add	r3, r1
 80088f2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d105      	bne.n	8008908 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80088fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	4619      	mov	r1, r3
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 fb27 	bl	8008f56 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890a:	3301      	adds	r3, #1
 800890c:	627b      	str	r3, [r7, #36]	; 0x24
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008914:	429a      	cmp	r2, r3
 8008916:	d3e5      	bcc.n	80088e4 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4618      	mov	r0, r3
 800891e:	f007 fd0b 	bl	8010338 <USB_ReadInterrupts>
 8008922:	4603      	mov	r3, r0
 8008924:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008928:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800892c:	d13b      	bne.n	80089a6 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800892e:	2301      	movs	r3, #1
 8008930:	627b      	str	r3, [r7, #36]	; 0x24
 8008932:	e02b      	b.n	800898c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008936:	015a      	lsls	r2, r3, #5
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	4413      	add	r3, r2
 800893c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008944:	6879      	ldr	r1, [r7, #4]
 8008946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008948:	4613      	mov	r3, r2
 800894a:	00db      	lsls	r3, r3, #3
 800894c:	4413      	add	r3, r2
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	440b      	add	r3, r1
 8008952:	3340      	adds	r3, #64	; 0x40
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	2b01      	cmp	r3, #1
 8008958:	d115      	bne.n	8008986 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800895a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800895c:	2b00      	cmp	r3, #0
 800895e:	da12      	bge.n	8008986 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008960:	6879      	ldr	r1, [r7, #4]
 8008962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008964:	4613      	mov	r3, r2
 8008966:	00db      	lsls	r3, r3, #3
 8008968:	4413      	add	r3, r2
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	440b      	add	r3, r1
 800896e:	333f      	adds	r3, #63	; 0x3f
 8008970:	2201      	movs	r2, #1
 8008972:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008976:	b2db      	uxtb	r3, r3
 8008978:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800897c:	b2db      	uxtb	r3, r3
 800897e:	4619      	mov	r1, r3
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 fae8 	bl	8008f56 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008988:	3301      	adds	r3, #1
 800898a:	627b      	str	r3, [r7, #36]	; 0x24
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008992:	429a      	cmp	r2, r3
 8008994:	d3ce      	bcc.n	8008934 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	695a      	ldr	r2, [r3, #20]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80089a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4618      	mov	r0, r3
 80089ac:	f007 fcc4 	bl	8010338 <USB_ReadInterrupts>
 80089b0:	4603      	mov	r3, r0
 80089b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089ba:	d155      	bne.n	8008a68 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80089bc:	2301      	movs	r3, #1
 80089be:	627b      	str	r3, [r7, #36]	; 0x24
 80089c0:	e045      	b.n	8008a4e <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80089c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c4:	015a      	lsls	r2, r3, #5
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	4413      	add	r3, r2
 80089ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80089d2:	6879      	ldr	r1, [r7, #4]
 80089d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089d6:	4613      	mov	r3, r2
 80089d8:	00db      	lsls	r3, r3, #3
 80089da:	4413      	add	r3, r2
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	440b      	add	r3, r1
 80089e0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d12e      	bne.n	8008a48 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80089ea:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	da2b      	bge.n	8008a48 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80089fc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d121      	bne.n	8008a48 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008a04:	6879      	ldr	r1, [r7, #4]
 8008a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a08:	4613      	mov	r3, r2
 8008a0a:	00db      	lsls	r3, r3, #3
 8008a0c:	4413      	add	r3, r2
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	440b      	add	r3, r1
 8008a12:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008a16:	2201      	movs	r2, #1
 8008a18:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008a1a:	6a3b      	ldr	r3, [r7, #32]
 8008a1c:	699b      	ldr	r3, [r3, #24]
 8008a1e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008a22:	6a3b      	ldr	r3, [r7, #32]
 8008a24:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008a26:	6a3b      	ldr	r3, [r7, #32]
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10a      	bne.n	8008a48 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	69fa      	ldr	r2, [r7, #28]
 8008a3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a44:	6053      	str	r3, [r2, #4]
            break;
 8008a46:	e007      	b.n	8008a58 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d3b4      	bcc.n	80089c2 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	695a      	ldr	r2, [r3, #20]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008a66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f007 fc63 	bl	8010338 <USB_ReadInterrupts>
 8008a72:	4603      	mov	r3, r0
 8008a74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a7c:	d10a      	bne.n	8008a94 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f00a f946 	bl	8012d10 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	695a      	ldr	r2, [r3, #20]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008a92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f007 fc4d 	bl	8010338 <USB_ReadInterrupts>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	f003 0304 	and.w	r3, r3, #4
 8008aa4:	2b04      	cmp	r3, #4
 8008aa6:	d115      	bne.n	8008ad4 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	f003 0304 	and.w	r3, r3, #4
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d002      	beq.n	8008ac0 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f00a f936 	bl	8012d2c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	6859      	ldr	r1, [r3, #4]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	69ba      	ldr	r2, [r7, #24]
 8008acc:	430a      	orrs	r2, r1
 8008ace:	605a      	str	r2, [r3, #4]
 8008ad0:	e000      	b.n	8008ad4 <HAL_PCD_IRQHandler+0x992>
      return;
 8008ad2:	bf00      	nop
    }
  }
}
 8008ad4:	3734      	adds	r7, #52	; 0x34
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd90      	pop	{r4, r7, pc}

08008ada <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b082      	sub	sp, #8
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d101      	bne.n	8008af4 <HAL_PCD_SetAddress+0x1a>
 8008af0:	2302      	movs	r3, #2
 8008af2:	e013      	b.n	8008b1c <HAL_PCD_SetAddress+0x42>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	78fa      	ldrb	r2, [r7, #3]
 8008b00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	78fa      	ldrb	r2, [r7, #3]
 8008b0a:	4611      	mov	r1, r2
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f007 fbab 	bl	8010268 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3708      	adds	r7, #8
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	4608      	mov	r0, r1
 8008b2e:	4611      	mov	r1, r2
 8008b30:	461a      	mov	r2, r3
 8008b32:	4603      	mov	r3, r0
 8008b34:	70fb      	strb	r3, [r7, #3]
 8008b36:	460b      	mov	r3, r1
 8008b38:	803b      	strh	r3, [r7, #0]
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008b42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	da0f      	bge.n	8008b6a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b4a:	78fb      	ldrb	r3, [r7, #3]
 8008b4c:	f003 020f 	and.w	r2, r3, #15
 8008b50:	4613      	mov	r3, r2
 8008b52:	00db      	lsls	r3, r3, #3
 8008b54:	4413      	add	r3, r2
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	3338      	adds	r3, #56	; 0x38
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	3304      	adds	r3, #4
 8008b60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2201      	movs	r2, #1
 8008b66:	705a      	strb	r2, [r3, #1]
 8008b68:	e00f      	b.n	8008b8a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b6a:	78fb      	ldrb	r3, [r7, #3]
 8008b6c:	f003 020f 	and.w	r2, r3, #15
 8008b70:	4613      	mov	r3, r2
 8008b72:	00db      	lsls	r3, r3, #3
 8008b74:	4413      	add	r3, r2
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	4413      	add	r3, r2
 8008b80:	3304      	adds	r3, #4
 8008b82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2200      	movs	r2, #0
 8008b88:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008b8a:	78fb      	ldrb	r3, [r7, #3]
 8008b8c:	f003 030f 	and.w	r3, r3, #15
 8008b90:	b2da      	uxtb	r2, r3
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008b96:	883a      	ldrh	r2, [r7, #0]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	78ba      	ldrb	r2, [r7, #2]
 8008ba0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	785b      	ldrb	r3, [r3, #1]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d004      	beq.n	8008bb4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008bb4:	78bb      	ldrb	r3, [r7, #2]
 8008bb6:	2b02      	cmp	r3, #2
 8008bb8:	d102      	bne.n	8008bc0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d101      	bne.n	8008bce <HAL_PCD_EP_Open+0xaa>
 8008bca:	2302      	movs	r3, #2
 8008bcc:	e00e      	b.n	8008bec <HAL_PCD_EP_Open+0xc8>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	68f9      	ldr	r1, [r7, #12]
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f006 fc1f 	bl	800f420 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8008bea:	7afb      	ldrb	r3, [r7, #11]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3710      	adds	r7, #16
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008c00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	da0f      	bge.n	8008c28 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c08:	78fb      	ldrb	r3, [r7, #3]
 8008c0a:	f003 020f 	and.w	r2, r3, #15
 8008c0e:	4613      	mov	r3, r2
 8008c10:	00db      	lsls	r3, r3, #3
 8008c12:	4413      	add	r3, r2
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	3338      	adds	r3, #56	; 0x38
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	3304      	adds	r3, #4
 8008c1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2201      	movs	r2, #1
 8008c24:	705a      	strb	r2, [r3, #1]
 8008c26:	e00f      	b.n	8008c48 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c28:	78fb      	ldrb	r3, [r7, #3]
 8008c2a:	f003 020f 	and.w	r2, r3, #15
 8008c2e:	4613      	mov	r3, r2
 8008c30:	00db      	lsls	r3, r3, #3
 8008c32:	4413      	add	r3, r2
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	3304      	adds	r3, #4
 8008c40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2200      	movs	r2, #0
 8008c46:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008c48:	78fb      	ldrb	r3, [r7, #3]
 8008c4a:	f003 030f 	and.w	r3, r3, #15
 8008c4e:	b2da      	uxtb	r2, r3
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d101      	bne.n	8008c62 <HAL_PCD_EP_Close+0x6e>
 8008c5e:	2302      	movs	r3, #2
 8008c60:	e00e      	b.n	8008c80 <HAL_PCD_EP_Close+0x8c>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2201      	movs	r2, #1
 8008c66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	68f9      	ldr	r1, [r7, #12]
 8008c70:	4618      	mov	r0, r3
 8008c72:	f006 fc5d 	bl	800f530 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8008c7e:	2300      	movs	r3, #0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3710      	adds	r7, #16
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b086      	sub	sp, #24
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	607a      	str	r2, [r7, #4]
 8008c92:	603b      	str	r3, [r7, #0]
 8008c94:	460b      	mov	r3, r1
 8008c96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c98:	7afb      	ldrb	r3, [r7, #11]
 8008c9a:	f003 020f 	and.w	r2, r3, #15
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	00db      	lsls	r3, r3, #3
 8008ca2:	4413      	add	r3, r2
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008caa:	68fa      	ldr	r2, [r7, #12]
 8008cac:	4413      	add	r3, r2
 8008cae:	3304      	adds	r3, #4
 8008cb0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	683a      	ldr	r2, [r7, #0]
 8008cbc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008cca:	7afb      	ldrb	r3, [r7, #11]
 8008ccc:	f003 030f 	and.w	r3, r3, #15
 8008cd0:	b2da      	uxtb	r2, r3
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	691b      	ldr	r3, [r3, #16]
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d102      	bne.n	8008ce4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008ce4:	7afb      	ldrb	r3, [r7, #11]
 8008ce6:	f003 030f 	and.w	r3, r3, #15
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d109      	bne.n	8008d02 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	6818      	ldr	r0, [r3, #0]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	691b      	ldr	r3, [r3, #16]
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	6979      	ldr	r1, [r7, #20]
 8008cfc:	f006 ff44 	bl	800fb88 <USB_EP0StartXfer>
 8008d00:	e008      	b.n	8008d14 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6818      	ldr	r0, [r3, #0]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	6979      	ldr	r1, [r7, #20]
 8008d10:	f006 fcea 	bl	800f6e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3718      	adds	r7, #24
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008d1e:	b480      	push	{r7}
 8008d20:	b083      	sub	sp, #12
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
 8008d26:	460b      	mov	r3, r1
 8008d28:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008d2a:	78fb      	ldrb	r3, [r7, #3]
 8008d2c:	f003 020f 	and.w	r2, r3, #15
 8008d30:	6879      	ldr	r1, [r7, #4]
 8008d32:	4613      	mov	r3, r2
 8008d34:	00db      	lsls	r3, r3, #3
 8008d36:	4413      	add	r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	440b      	add	r3, r1
 8008d3c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8008d40:	681b      	ldr	r3, [r3, #0]
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	370c      	adds	r7, #12
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr

08008d4e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b086      	sub	sp, #24
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	60f8      	str	r0, [r7, #12]
 8008d56:	607a      	str	r2, [r7, #4]
 8008d58:	603b      	str	r3, [r7, #0]
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d5e:	7afb      	ldrb	r3, [r7, #11]
 8008d60:	f003 020f 	and.w	r2, r3, #15
 8008d64:	4613      	mov	r3, r2
 8008d66:	00db      	lsls	r3, r3, #3
 8008d68:	4413      	add	r3, r2
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	3338      	adds	r3, #56	; 0x38
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	4413      	add	r3, r2
 8008d72:	3304      	adds	r3, #4
 8008d74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	683a      	ldr	r2, [r7, #0]
 8008d80:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	2200      	movs	r2, #0
 8008d86:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d8e:	7afb      	ldrb	r3, [r7, #11]
 8008d90:	f003 030f 	and.w	r3, r3, #15
 8008d94:	b2da      	uxtb	r2, r3
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d102      	bne.n	8008da8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008da8:	7afb      	ldrb	r3, [r7, #11]
 8008daa:	f003 030f 	and.w	r3, r3, #15
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d109      	bne.n	8008dc6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6818      	ldr	r0, [r3, #0]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	691b      	ldr	r3, [r3, #16]
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	6979      	ldr	r1, [r7, #20]
 8008dc0:	f006 fee2 	bl	800fb88 <USB_EP0StartXfer>
 8008dc4:	e008      	b.n	8008dd8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	6818      	ldr	r0, [r3, #0]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	691b      	ldr	r3, [r3, #16]
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	6979      	ldr	r1, [r7, #20]
 8008dd4:	f006 fc88 	bl	800f6e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3718      	adds	r7, #24
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b084      	sub	sp, #16
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
 8008dea:	460b      	mov	r3, r1
 8008dec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008dee:	78fb      	ldrb	r3, [r7, #3]
 8008df0:	f003 020f 	and.w	r2, r3, #15
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d901      	bls.n	8008e00 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	e050      	b.n	8008ea2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008e00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	da0f      	bge.n	8008e28 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e08:	78fb      	ldrb	r3, [r7, #3]
 8008e0a:	f003 020f 	and.w	r2, r3, #15
 8008e0e:	4613      	mov	r3, r2
 8008e10:	00db      	lsls	r3, r3, #3
 8008e12:	4413      	add	r3, r2
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	3338      	adds	r3, #56	; 0x38
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	4413      	add	r3, r2
 8008e1c:	3304      	adds	r3, #4
 8008e1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2201      	movs	r2, #1
 8008e24:	705a      	strb	r2, [r3, #1]
 8008e26:	e00d      	b.n	8008e44 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008e28:	78fa      	ldrb	r2, [r7, #3]
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	00db      	lsls	r3, r3, #3
 8008e2e:	4413      	add	r3, r2
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	4413      	add	r3, r2
 8008e3a:	3304      	adds	r3, #4
 8008e3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2200      	movs	r2, #0
 8008e42:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2201      	movs	r2, #1
 8008e48:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008e4a:	78fb      	ldrb	r3, [r7, #3]
 8008e4c:	f003 030f 	and.w	r3, r3, #15
 8008e50:	b2da      	uxtb	r2, r3
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d101      	bne.n	8008e64 <HAL_PCD_EP_SetStall+0x82>
 8008e60:	2302      	movs	r3, #2
 8008e62:	e01e      	b.n	8008ea2 <HAL_PCD_EP_SetStall+0xc0>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	68f9      	ldr	r1, [r7, #12]
 8008e72:	4618      	mov	r0, r3
 8008e74:	f007 f924 	bl	80100c0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008e78:	78fb      	ldrb	r3, [r7, #3]
 8008e7a:	f003 030f 	and.w	r3, r3, #15
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d10a      	bne.n	8008e98 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6818      	ldr	r0, [r3, #0]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	691b      	ldr	r3, [r3, #16]
 8008e8a:	b2d9      	uxtb	r1, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008e92:	461a      	mov	r2, r3
 8008e94:	f007 fb16 	bl	80104c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3710      	adds	r7, #16
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b084      	sub	sp, #16
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008eb6:	78fb      	ldrb	r3, [r7, #3]
 8008eb8:	f003 020f 	and.w	r2, r3, #15
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d901      	bls.n	8008ec8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e042      	b.n	8008f4e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008ec8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	da0f      	bge.n	8008ef0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008ed0:	78fb      	ldrb	r3, [r7, #3]
 8008ed2:	f003 020f 	and.w	r2, r3, #15
 8008ed6:	4613      	mov	r3, r2
 8008ed8:	00db      	lsls	r3, r3, #3
 8008eda:	4413      	add	r3, r2
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	3338      	adds	r3, #56	; 0x38
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	3304      	adds	r3, #4
 8008ee6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2201      	movs	r2, #1
 8008eec:	705a      	strb	r2, [r3, #1]
 8008eee:	e00f      	b.n	8008f10 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008ef0:	78fb      	ldrb	r3, [r7, #3]
 8008ef2:	f003 020f 	and.w	r2, r3, #15
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	00db      	lsls	r3, r3, #3
 8008efa:	4413      	add	r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	4413      	add	r3, r2
 8008f06:	3304      	adds	r3, #4
 8008f08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2200      	movs	r2, #0
 8008f14:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008f16:	78fb      	ldrb	r3, [r7, #3]
 8008f18:	f003 030f 	and.w	r3, r3, #15
 8008f1c:	b2da      	uxtb	r2, r3
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d101      	bne.n	8008f30 <HAL_PCD_EP_ClrStall+0x86>
 8008f2c:	2302      	movs	r3, #2
 8008f2e:	e00e      	b.n	8008f4e <HAL_PCD_EP_ClrStall+0xa4>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2201      	movs	r2, #1
 8008f34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68f9      	ldr	r1, [r7, #12]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f007 f92c 	bl	801019c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b084      	sub	sp, #16
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
 8008f5e:	460b      	mov	r3, r1
 8008f60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008f62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	da0c      	bge.n	8008f84 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f6a:	78fb      	ldrb	r3, [r7, #3]
 8008f6c:	f003 020f 	and.w	r2, r3, #15
 8008f70:	4613      	mov	r3, r2
 8008f72:	00db      	lsls	r3, r3, #3
 8008f74:	4413      	add	r3, r2
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	3338      	adds	r3, #56	; 0x38
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	3304      	adds	r3, #4
 8008f80:	60fb      	str	r3, [r7, #12]
 8008f82:	e00c      	b.n	8008f9e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f84:	78fb      	ldrb	r3, [r7, #3]
 8008f86:	f003 020f 	and.w	r2, r3, #15
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	00db      	lsls	r3, r3, #3
 8008f8e:	4413      	add	r3, r2
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	4413      	add	r3, r2
 8008f9a:	3304      	adds	r3, #4
 8008f9c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	68f9      	ldr	r1, [r7, #12]
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f006 ff4b 	bl	800fe40 <USB_EPStopXfer>
 8008faa:	4603      	mov	r3, r0
 8008fac:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008fae:	7afb      	ldrb	r3, [r7, #11]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b08a      	sub	sp, #40	; 0x28
 8008fbc:	af02      	add	r7, sp, #8
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008fcc:	683a      	ldr	r2, [r7, #0]
 8008fce:	4613      	mov	r3, r2
 8008fd0:	00db      	lsls	r3, r3, #3
 8008fd2:	4413      	add	r3, r2
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	3338      	adds	r3, #56	; 0x38
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	4413      	add	r3, r2
 8008fdc:	3304      	adds	r3, #4
 8008fde:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	6a1a      	ldr	r2, [r3, #32]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	699b      	ldr	r3, [r3, #24]
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d901      	bls.n	8008ff0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008fec:	2301      	movs	r3, #1
 8008fee:	e06c      	b.n	80090ca <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	699a      	ldr	r2, [r3, #24]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6a1b      	ldr	r3, [r3, #32]
 8008ff8:	1ad3      	subs	r3, r2, r3
 8008ffa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	69fa      	ldr	r2, [r7, #28]
 8009002:	429a      	cmp	r2, r3
 8009004:	d902      	bls.n	800900c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	3303      	adds	r3, #3
 8009010:	089b      	lsrs	r3, r3, #2
 8009012:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009014:	e02b      	b.n	800906e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	699a      	ldr	r2, [r3, #24]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6a1b      	ldr	r3, [r3, #32]
 800901e:	1ad3      	subs	r3, r2, r3
 8009020:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	69fa      	ldr	r2, [r7, #28]
 8009028:	429a      	cmp	r2, r3
 800902a:	d902      	bls.n	8009032 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	68db      	ldr	r3, [r3, #12]
 8009030:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	3303      	adds	r3, #3
 8009036:	089b      	lsrs	r3, r3, #2
 8009038:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6919      	ldr	r1, [r3, #16]
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	b2da      	uxtb	r2, r3
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800904a:	b2db      	uxtb	r3, r3
 800904c:	9300      	str	r3, [sp, #0]
 800904e:	4603      	mov	r3, r0
 8009050:	6978      	ldr	r0, [r7, #20]
 8009052:	f006 ff9f 	bl	800ff94 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	691a      	ldr	r2, [r3, #16]
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	441a      	add	r2, r3
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	6a1a      	ldr	r2, [r3, #32]
 8009066:	69fb      	ldr	r3, [r7, #28]
 8009068:	441a      	add	r2, r3
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	015a      	lsls	r2, r3, #5
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	4413      	add	r3, r2
 8009076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800907a:	699b      	ldr	r3, [r3, #24]
 800907c:	b29b      	uxth	r3, r3
 800907e:	69ba      	ldr	r2, [r7, #24]
 8009080:	429a      	cmp	r2, r3
 8009082:	d809      	bhi.n	8009098 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6a1a      	ldr	r2, [r3, #32]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800908c:	429a      	cmp	r2, r3
 800908e:	d203      	bcs.n	8009098 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	699b      	ldr	r3, [r3, #24]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d1be      	bne.n	8009016 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	699a      	ldr	r2, [r3, #24]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6a1b      	ldr	r3, [r3, #32]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d811      	bhi.n	80090c8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	f003 030f 	and.w	r3, r3, #15
 80090aa:	2201      	movs	r2, #1
 80090ac:	fa02 f303 	lsl.w	r3, r2, r3
 80090b0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	43db      	mvns	r3, r3
 80090be:	6939      	ldr	r1, [r7, #16]
 80090c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090c4:	4013      	ands	r3, r2
 80090c6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80090c8:	2300      	movs	r3, #0
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3720      	adds	r7, #32
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
	...

080090d4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b088      	sub	sp, #32
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	333c      	adds	r3, #60	; 0x3c
 80090ec:	3304      	adds	r3, #4
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	015a      	lsls	r2, r3, #5
 80090f6:	69bb      	ldr	r3, [r7, #24]
 80090f8:	4413      	add	r3, r2
 80090fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	2b01      	cmp	r3, #1
 8009108:	d17b      	bne.n	8009202 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	f003 0308 	and.w	r3, r3, #8
 8009110:	2b00      	cmp	r3, #0
 8009112:	d015      	beq.n	8009140 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	4a61      	ldr	r2, [pc, #388]	; (800929c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009118:	4293      	cmp	r3, r2
 800911a:	f240 80b9 	bls.w	8009290 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009124:	2b00      	cmp	r3, #0
 8009126:	f000 80b3 	beq.w	8009290 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	015a      	lsls	r2, r3, #5
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	4413      	add	r3, r2
 8009132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009136:	461a      	mov	r2, r3
 8009138:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800913c:	6093      	str	r3, [r2, #8]
 800913e:	e0a7      	b.n	8009290 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	f003 0320 	and.w	r3, r3, #32
 8009146:	2b00      	cmp	r3, #0
 8009148:	d009      	beq.n	800915e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	015a      	lsls	r2, r3, #5
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	4413      	add	r3, r2
 8009152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009156:	461a      	mov	r2, r3
 8009158:	2320      	movs	r3, #32
 800915a:	6093      	str	r3, [r2, #8]
 800915c:	e098      	b.n	8009290 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009164:	2b00      	cmp	r3, #0
 8009166:	f040 8093 	bne.w	8009290 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	4a4b      	ldr	r2, [pc, #300]	; (800929c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d90f      	bls.n	8009192 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00a      	beq.n	8009192 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	015a      	lsls	r2, r3, #5
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	4413      	add	r3, r2
 8009184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009188:	461a      	mov	r2, r3
 800918a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800918e:	6093      	str	r3, [r2, #8]
 8009190:	e07e      	b.n	8009290 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009192:	683a      	ldr	r2, [r7, #0]
 8009194:	4613      	mov	r3, r2
 8009196:	00db      	lsls	r3, r3, #3
 8009198:	4413      	add	r3, r2
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	4413      	add	r3, r2
 80091a4:	3304      	adds	r3, #4
 80091a6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	69da      	ldr	r2, [r3, #28]
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	0159      	lsls	r1, r3, #5
 80091b0:	69bb      	ldr	r3, [r7, #24]
 80091b2:	440b      	add	r3, r1
 80091b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091b8:	691b      	ldr	r3, [r3, #16]
 80091ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091be:	1ad2      	subs	r2, r2, r3
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d114      	bne.n	80091f4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	699b      	ldr	r3, [r3, #24]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d109      	bne.n	80091e6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6818      	ldr	r0, [r3, #0]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80091dc:	461a      	mov	r2, r3
 80091de:	2101      	movs	r1, #1
 80091e0:	f007 f970 	bl	80104c4 <USB_EP0_OutStart>
 80091e4:	e006      	b.n	80091f4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	691a      	ldr	r2, [r3, #16]
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6a1b      	ldr	r3, [r3, #32]
 80091ee:	441a      	add	r2, r3
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	4619      	mov	r1, r3
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f009 fcc4 	bl	8012b88 <HAL_PCD_DataOutStageCallback>
 8009200:	e046      	b.n	8009290 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	4a26      	ldr	r2, [pc, #152]	; (80092a0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d124      	bne.n	8009254 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009210:	2b00      	cmp	r3, #0
 8009212:	d00a      	beq.n	800922a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	015a      	lsls	r2, r3, #5
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	4413      	add	r3, r2
 800921c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009220:	461a      	mov	r2, r3
 8009222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009226:	6093      	str	r3, [r2, #8]
 8009228:	e032      	b.n	8009290 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	f003 0320 	and.w	r3, r3, #32
 8009230:	2b00      	cmp	r3, #0
 8009232:	d008      	beq.n	8009246 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	015a      	lsls	r2, r3, #5
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	4413      	add	r3, r2
 800923c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009240:	461a      	mov	r2, r3
 8009242:	2320      	movs	r3, #32
 8009244:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	b2db      	uxtb	r3, r3
 800924a:	4619      	mov	r1, r3
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f009 fc9b 	bl	8012b88 <HAL_PCD_DataOutStageCallback>
 8009252:	e01d      	b.n	8009290 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d114      	bne.n	8009284 <PCD_EP_OutXfrComplete_int+0x1b0>
 800925a:	6879      	ldr	r1, [r7, #4]
 800925c:	683a      	ldr	r2, [r7, #0]
 800925e:	4613      	mov	r3, r2
 8009260:	00db      	lsls	r3, r3, #3
 8009262:	4413      	add	r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	440b      	add	r3, r1
 8009268:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d108      	bne.n	8009284 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6818      	ldr	r0, [r3, #0]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800927c:	461a      	mov	r2, r3
 800927e:	2100      	movs	r1, #0
 8009280:	f007 f920 	bl	80104c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	b2db      	uxtb	r3, r3
 8009288:	4619      	mov	r1, r3
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f009 fc7c 	bl	8012b88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	3720      	adds	r7, #32
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	4f54300a 	.word	0x4f54300a
 80092a0:	4f54310a 	.word	0x4f54310a

080092a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b086      	sub	sp, #24
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	333c      	adds	r3, #60	; 0x3c
 80092bc:	3304      	adds	r3, #4
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	015a      	lsls	r2, r3, #5
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	4413      	add	r3, r2
 80092ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	4a15      	ldr	r2, [pc, #84]	; (800932c <PCD_EP_OutSetupPacket_int+0x88>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d90e      	bls.n	80092f8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d009      	beq.n	80092f8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	015a      	lsls	r2, r3, #5
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	4413      	add	r3, r2
 80092ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092f0:	461a      	mov	r2, r3
 80092f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092f6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f009 fc33 	bl	8012b64 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	4a0a      	ldr	r2, [pc, #40]	; (800932c <PCD_EP_OutSetupPacket_int+0x88>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d90c      	bls.n	8009320 <PCD_EP_OutSetupPacket_int+0x7c>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	691b      	ldr	r3, [r3, #16]
 800930a:	2b01      	cmp	r3, #1
 800930c:	d108      	bne.n	8009320 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6818      	ldr	r0, [r3, #0]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009318:	461a      	mov	r2, r3
 800931a:	2101      	movs	r1, #1
 800931c:	f007 f8d2 	bl	80104c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3718      	adds	r7, #24
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	4f54300a 	.word	0x4f54300a

08009330 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009330:	b480      	push	{r7}
 8009332:	b085      	sub	sp, #20
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	460b      	mov	r3, r1
 800933a:	70fb      	strb	r3, [r7, #3]
 800933c:	4613      	mov	r3, r2
 800933e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009346:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009348:	78fb      	ldrb	r3, [r7, #3]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d107      	bne.n	800935e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800934e:	883b      	ldrh	r3, [r7, #0]
 8009350:	0419      	lsls	r1, r3, #16
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	68ba      	ldr	r2, [r7, #8]
 8009358:	430a      	orrs	r2, r1
 800935a:	629a      	str	r2, [r3, #40]	; 0x28
 800935c:	e028      	b.n	80093b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009364:	0c1b      	lsrs	r3, r3, #16
 8009366:	68ba      	ldr	r2, [r7, #8]
 8009368:	4413      	add	r3, r2
 800936a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800936c:	2300      	movs	r3, #0
 800936e:	73fb      	strb	r3, [r7, #15]
 8009370:	e00d      	b.n	800938e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	7bfb      	ldrb	r3, [r7, #15]
 8009378:	3340      	adds	r3, #64	; 0x40
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	4413      	add	r3, r2
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	0c1b      	lsrs	r3, r3, #16
 8009382:	68ba      	ldr	r2, [r7, #8]
 8009384:	4413      	add	r3, r2
 8009386:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009388:	7bfb      	ldrb	r3, [r7, #15]
 800938a:	3301      	adds	r3, #1
 800938c:	73fb      	strb	r3, [r7, #15]
 800938e:	7bfa      	ldrb	r2, [r7, #15]
 8009390:	78fb      	ldrb	r3, [r7, #3]
 8009392:	3b01      	subs	r3, #1
 8009394:	429a      	cmp	r2, r3
 8009396:	d3ec      	bcc.n	8009372 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009398:	883b      	ldrh	r3, [r7, #0]
 800939a:	0418      	lsls	r0, r3, #16
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6819      	ldr	r1, [r3, #0]
 80093a0:	78fb      	ldrb	r3, [r7, #3]
 80093a2:	3b01      	subs	r3, #1
 80093a4:	68ba      	ldr	r2, [r7, #8]
 80093a6:	4302      	orrs	r2, r0
 80093a8:	3340      	adds	r3, #64	; 0x40
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	440b      	add	r3, r1
 80093ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80093b0:	2300      	movs	r3, #0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3714      	adds	r7, #20
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr

080093be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80093be:	b480      	push	{r7}
 80093c0:	b083      	sub	sp, #12
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
 80093c6:	460b      	mov	r3, r1
 80093c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	887a      	ldrh	r2, [r7, #2]
 80093d0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	370c      	adds	r7, #12
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b085      	sub	sp, #20
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2201      	movs	r2, #1
 80093f2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	699b      	ldr	r3, [r3, #24]
 8009402:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800940e:	4b05      	ldr	r3, [pc, #20]	; (8009424 <HAL_PCDEx_ActivateLPM+0x44>)
 8009410:	4313      	orrs	r3, r2
 8009412:	68fa      	ldr	r2, [r7, #12]
 8009414:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009416:	2300      	movs	r3, #0
}
 8009418:	4618      	mov	r0, r3
 800941a:	3714      	adds	r7, #20
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr
 8009424:	10000003 	.word	0x10000003

08009428 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	460b      	mov	r3, r1
 8009432:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009434:	bf00      	nop
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8009448:	4b29      	ldr	r3, [pc, #164]	; (80094f0 <HAL_PWREx_ConfigSupply+0xb0>)
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	f003 0307 	and.w	r3, r3, #7
 8009450:	2b06      	cmp	r3, #6
 8009452:	d00a      	beq.n	800946a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009454:	4b26      	ldr	r3, [pc, #152]	; (80094f0 <HAL_PWREx_ConfigSupply+0xb0>)
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	429a      	cmp	r2, r3
 8009460:	d001      	beq.n	8009466 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	e040      	b.n	80094e8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009466:	2300      	movs	r3, #0
 8009468:	e03e      	b.n	80094e8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800946a:	4b21      	ldr	r3, [pc, #132]	; (80094f0 <HAL_PWREx_ConfigSupply+0xb0>)
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8009472:	491f      	ldr	r1, [pc, #124]	; (80094f0 <HAL_PWREx_ConfigSupply+0xb0>)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4313      	orrs	r3, r2
 8009478:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800947a:	f7f9 f911 	bl	80026a0 <HAL_GetTick>
 800947e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009480:	e009      	b.n	8009496 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009482:	f7f9 f90d 	bl	80026a0 <HAL_GetTick>
 8009486:	4602      	mov	r2, r0
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	1ad3      	subs	r3, r2, r3
 800948c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009490:	d901      	bls.n	8009496 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	e028      	b.n	80094e8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009496:	4b16      	ldr	r3, [pc, #88]	; (80094f0 <HAL_PWREx_ConfigSupply+0xb0>)
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800949e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094a2:	d1ee      	bne.n	8009482 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2b1e      	cmp	r3, #30
 80094a8:	d008      	beq.n	80094bc <HAL_PWREx_ConfigSupply+0x7c>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2b2e      	cmp	r3, #46	; 0x2e
 80094ae:	d005      	beq.n	80094bc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2b1d      	cmp	r3, #29
 80094b4:	d002      	beq.n	80094bc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2b2d      	cmp	r3, #45	; 0x2d
 80094ba:	d114      	bne.n	80094e6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80094bc:	f7f9 f8f0 	bl	80026a0 <HAL_GetTick>
 80094c0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80094c2:	e009      	b.n	80094d8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80094c4:	f7f9 f8ec 	bl	80026a0 <HAL_GetTick>
 80094c8:	4602      	mov	r2, r0
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	1ad3      	subs	r3, r2, r3
 80094ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094d2:	d901      	bls.n	80094d8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80094d4:	2301      	movs	r3, #1
 80094d6:	e007      	b.n	80094e8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80094d8:	4b05      	ldr	r3, [pc, #20]	; (80094f0 <HAL_PWREx_ConfigSupply+0xb0>)
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094e4:	d1ee      	bne.n	80094c4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80094e6:	2300      	movs	r3, #0
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3710      	adds	r7, #16
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	58024800 	.word	0x58024800

080094f4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80094f4:	b480      	push	{r7}
 80094f6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80094f8:	4b05      	ldr	r3, [pc, #20]	; (8009510 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	4a04      	ldr	r2, [pc, #16]	; (8009510 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80094fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009502:	60d3      	str	r3, [r2, #12]
}
 8009504:	bf00      	nop
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	58024800 	.word	0x58024800

08009514 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b08c      	sub	sp, #48	; 0x30
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d102      	bne.n	8009528 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	f000 bc1d 	b.w	8009d62 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f003 0301 	and.w	r3, r3, #1
 8009530:	2b00      	cmp	r3, #0
 8009532:	f000 8087 	beq.w	8009644 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009536:	4b99      	ldr	r3, [pc, #612]	; (800979c <HAL_RCC_OscConfig+0x288>)
 8009538:	691b      	ldr	r3, [r3, #16]
 800953a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800953e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009540:	4b96      	ldr	r3, [pc, #600]	; (800979c <HAL_RCC_OscConfig+0x288>)
 8009542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009544:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009548:	2b10      	cmp	r3, #16
 800954a:	d007      	beq.n	800955c <HAL_RCC_OscConfig+0x48>
 800954c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800954e:	2b18      	cmp	r3, #24
 8009550:	d110      	bne.n	8009574 <HAL_RCC_OscConfig+0x60>
 8009552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009554:	f003 0303 	and.w	r3, r3, #3
 8009558:	2b02      	cmp	r3, #2
 800955a:	d10b      	bne.n	8009574 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800955c:	4b8f      	ldr	r3, [pc, #572]	; (800979c <HAL_RCC_OscConfig+0x288>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009564:	2b00      	cmp	r3, #0
 8009566:	d06c      	beq.n	8009642 <HAL_RCC_OscConfig+0x12e>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d168      	bne.n	8009642 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8009570:	2301      	movs	r3, #1
 8009572:	e3f6      	b.n	8009d62 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800957c:	d106      	bne.n	800958c <HAL_RCC_OscConfig+0x78>
 800957e:	4b87      	ldr	r3, [pc, #540]	; (800979c <HAL_RCC_OscConfig+0x288>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4a86      	ldr	r2, [pc, #536]	; (800979c <HAL_RCC_OscConfig+0x288>)
 8009584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009588:	6013      	str	r3, [r2, #0]
 800958a:	e02e      	b.n	80095ea <HAL_RCC_OscConfig+0xd6>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d10c      	bne.n	80095ae <HAL_RCC_OscConfig+0x9a>
 8009594:	4b81      	ldr	r3, [pc, #516]	; (800979c <HAL_RCC_OscConfig+0x288>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a80      	ldr	r2, [pc, #512]	; (800979c <HAL_RCC_OscConfig+0x288>)
 800959a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800959e:	6013      	str	r3, [r2, #0]
 80095a0:	4b7e      	ldr	r3, [pc, #504]	; (800979c <HAL_RCC_OscConfig+0x288>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a7d      	ldr	r2, [pc, #500]	; (800979c <HAL_RCC_OscConfig+0x288>)
 80095a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80095aa:	6013      	str	r3, [r2, #0]
 80095ac:	e01d      	b.n	80095ea <HAL_RCC_OscConfig+0xd6>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80095b6:	d10c      	bne.n	80095d2 <HAL_RCC_OscConfig+0xbe>
 80095b8:	4b78      	ldr	r3, [pc, #480]	; (800979c <HAL_RCC_OscConfig+0x288>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a77      	ldr	r2, [pc, #476]	; (800979c <HAL_RCC_OscConfig+0x288>)
 80095be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80095c2:	6013      	str	r3, [r2, #0]
 80095c4:	4b75      	ldr	r3, [pc, #468]	; (800979c <HAL_RCC_OscConfig+0x288>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a74      	ldr	r2, [pc, #464]	; (800979c <HAL_RCC_OscConfig+0x288>)
 80095ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095ce:	6013      	str	r3, [r2, #0]
 80095d0:	e00b      	b.n	80095ea <HAL_RCC_OscConfig+0xd6>
 80095d2:	4b72      	ldr	r3, [pc, #456]	; (800979c <HAL_RCC_OscConfig+0x288>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4a71      	ldr	r2, [pc, #452]	; (800979c <HAL_RCC_OscConfig+0x288>)
 80095d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095dc:	6013      	str	r3, [r2, #0]
 80095de:	4b6f      	ldr	r3, [pc, #444]	; (800979c <HAL_RCC_OscConfig+0x288>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a6e      	ldr	r2, [pc, #440]	; (800979c <HAL_RCC_OscConfig+0x288>)
 80095e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80095e8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d013      	beq.n	800961a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095f2:	f7f9 f855 	bl	80026a0 <HAL_GetTick>
 80095f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80095f8:	e008      	b.n	800960c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80095fa:	f7f9 f851 	bl	80026a0 <HAL_GetTick>
 80095fe:	4602      	mov	r2, r0
 8009600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009602:	1ad3      	subs	r3, r2, r3
 8009604:	2b64      	cmp	r3, #100	; 0x64
 8009606:	d901      	bls.n	800960c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8009608:	2303      	movs	r3, #3
 800960a:	e3aa      	b.n	8009d62 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800960c:	4b63      	ldr	r3, [pc, #396]	; (800979c <HAL_RCC_OscConfig+0x288>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009614:	2b00      	cmp	r3, #0
 8009616:	d0f0      	beq.n	80095fa <HAL_RCC_OscConfig+0xe6>
 8009618:	e014      	b.n	8009644 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800961a:	f7f9 f841 	bl	80026a0 <HAL_GetTick>
 800961e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009620:	e008      	b.n	8009634 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009622:	f7f9 f83d 	bl	80026a0 <HAL_GetTick>
 8009626:	4602      	mov	r2, r0
 8009628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962a:	1ad3      	subs	r3, r2, r3
 800962c:	2b64      	cmp	r3, #100	; 0x64
 800962e:	d901      	bls.n	8009634 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8009630:	2303      	movs	r3, #3
 8009632:	e396      	b.n	8009d62 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009634:	4b59      	ldr	r3, [pc, #356]	; (800979c <HAL_RCC_OscConfig+0x288>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800963c:	2b00      	cmp	r3, #0
 800963e:	d1f0      	bne.n	8009622 <HAL_RCC_OscConfig+0x10e>
 8009640:	e000      	b.n	8009644 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009642:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f003 0302 	and.w	r3, r3, #2
 800964c:	2b00      	cmp	r3, #0
 800964e:	f000 80cb 	beq.w	80097e8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009652:	4b52      	ldr	r3, [pc, #328]	; (800979c <HAL_RCC_OscConfig+0x288>)
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800965a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800965c:	4b4f      	ldr	r3, [pc, #316]	; (800979c <HAL_RCC_OscConfig+0x288>)
 800965e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009660:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009662:	6a3b      	ldr	r3, [r7, #32]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d007      	beq.n	8009678 <HAL_RCC_OscConfig+0x164>
 8009668:	6a3b      	ldr	r3, [r7, #32]
 800966a:	2b18      	cmp	r3, #24
 800966c:	d156      	bne.n	800971c <HAL_RCC_OscConfig+0x208>
 800966e:	69fb      	ldr	r3, [r7, #28]
 8009670:	f003 0303 	and.w	r3, r3, #3
 8009674:	2b00      	cmp	r3, #0
 8009676:	d151      	bne.n	800971c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009678:	4b48      	ldr	r3, [pc, #288]	; (800979c <HAL_RCC_OscConfig+0x288>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 0304 	and.w	r3, r3, #4
 8009680:	2b00      	cmp	r3, #0
 8009682:	d005      	beq.n	8009690 <HAL_RCC_OscConfig+0x17c>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d101      	bne.n	8009690 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	e368      	b.n	8009d62 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009690:	4b42      	ldr	r3, [pc, #264]	; (800979c <HAL_RCC_OscConfig+0x288>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f023 0219 	bic.w	r2, r3, #25
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	68db      	ldr	r3, [r3, #12]
 800969c:	493f      	ldr	r1, [pc, #252]	; (800979c <HAL_RCC_OscConfig+0x288>)
 800969e:	4313      	orrs	r3, r2
 80096a0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80096a2:	f7f8 fffd 	bl	80026a0 <HAL_GetTick>
 80096a6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80096a8:	e008      	b.n	80096bc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80096aa:	f7f8 fff9 	bl	80026a0 <HAL_GetTick>
 80096ae:	4602      	mov	r2, r0
 80096b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b2:	1ad3      	subs	r3, r2, r3
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	d901      	bls.n	80096bc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80096b8:	2303      	movs	r3, #3
 80096ba:	e352      	b.n	8009d62 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80096bc:	4b37      	ldr	r3, [pc, #220]	; (800979c <HAL_RCC_OscConfig+0x288>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f003 0304 	and.w	r3, r3, #4
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d0f0      	beq.n	80096aa <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80096c8:	f7f9 f81a 	bl	8002700 <HAL_GetREVID>
 80096cc:	4603      	mov	r3, r0
 80096ce:	f241 0203 	movw	r2, #4099	; 0x1003
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d817      	bhi.n	8009706 <HAL_RCC_OscConfig+0x1f2>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	691b      	ldr	r3, [r3, #16]
 80096da:	2b40      	cmp	r3, #64	; 0x40
 80096dc:	d108      	bne.n	80096f0 <HAL_RCC_OscConfig+0x1dc>
 80096de:	4b2f      	ldr	r3, [pc, #188]	; (800979c <HAL_RCC_OscConfig+0x288>)
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80096e6:	4a2d      	ldr	r2, [pc, #180]	; (800979c <HAL_RCC_OscConfig+0x288>)
 80096e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096ec:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80096ee:	e07b      	b.n	80097e8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80096f0:	4b2a      	ldr	r3, [pc, #168]	; (800979c <HAL_RCC_OscConfig+0x288>)
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	691b      	ldr	r3, [r3, #16]
 80096fc:	031b      	lsls	r3, r3, #12
 80096fe:	4927      	ldr	r1, [pc, #156]	; (800979c <HAL_RCC_OscConfig+0x288>)
 8009700:	4313      	orrs	r3, r2
 8009702:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009704:	e070      	b.n	80097e8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009706:	4b25      	ldr	r3, [pc, #148]	; (800979c <HAL_RCC_OscConfig+0x288>)
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	061b      	lsls	r3, r3, #24
 8009714:	4921      	ldr	r1, [pc, #132]	; (800979c <HAL_RCC_OscConfig+0x288>)
 8009716:	4313      	orrs	r3, r2
 8009718:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800971a:	e065      	b.n	80097e8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d048      	beq.n	80097b6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009724:	4b1d      	ldr	r3, [pc, #116]	; (800979c <HAL_RCC_OscConfig+0x288>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f023 0219 	bic.w	r2, r3, #25
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	491a      	ldr	r1, [pc, #104]	; (800979c <HAL_RCC_OscConfig+0x288>)
 8009732:	4313      	orrs	r3, r2
 8009734:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009736:	f7f8 ffb3 	bl	80026a0 <HAL_GetTick>
 800973a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800973c:	e008      	b.n	8009750 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800973e:	f7f8 ffaf 	bl	80026a0 <HAL_GetTick>
 8009742:	4602      	mov	r2, r0
 8009744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009746:	1ad3      	subs	r3, r2, r3
 8009748:	2b02      	cmp	r3, #2
 800974a:	d901      	bls.n	8009750 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800974c:	2303      	movs	r3, #3
 800974e:	e308      	b.n	8009d62 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009750:	4b12      	ldr	r3, [pc, #72]	; (800979c <HAL_RCC_OscConfig+0x288>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f003 0304 	and.w	r3, r3, #4
 8009758:	2b00      	cmp	r3, #0
 800975a:	d0f0      	beq.n	800973e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800975c:	f7f8 ffd0 	bl	8002700 <HAL_GetREVID>
 8009760:	4603      	mov	r3, r0
 8009762:	f241 0203 	movw	r2, #4099	; 0x1003
 8009766:	4293      	cmp	r3, r2
 8009768:	d81a      	bhi.n	80097a0 <HAL_RCC_OscConfig+0x28c>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	691b      	ldr	r3, [r3, #16]
 800976e:	2b40      	cmp	r3, #64	; 0x40
 8009770:	d108      	bne.n	8009784 <HAL_RCC_OscConfig+0x270>
 8009772:	4b0a      	ldr	r3, [pc, #40]	; (800979c <HAL_RCC_OscConfig+0x288>)
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800977a:	4a08      	ldr	r2, [pc, #32]	; (800979c <HAL_RCC_OscConfig+0x288>)
 800977c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009780:	6053      	str	r3, [r2, #4]
 8009782:	e031      	b.n	80097e8 <HAL_RCC_OscConfig+0x2d4>
 8009784:	4b05      	ldr	r3, [pc, #20]	; (800979c <HAL_RCC_OscConfig+0x288>)
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	691b      	ldr	r3, [r3, #16]
 8009790:	031b      	lsls	r3, r3, #12
 8009792:	4902      	ldr	r1, [pc, #8]	; (800979c <HAL_RCC_OscConfig+0x288>)
 8009794:	4313      	orrs	r3, r2
 8009796:	604b      	str	r3, [r1, #4]
 8009798:	e026      	b.n	80097e8 <HAL_RCC_OscConfig+0x2d4>
 800979a:	bf00      	nop
 800979c:	58024400 	.word	0x58024400
 80097a0:	4b9a      	ldr	r3, [pc, #616]	; (8009a0c <HAL_RCC_OscConfig+0x4f8>)
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	691b      	ldr	r3, [r3, #16]
 80097ac:	061b      	lsls	r3, r3, #24
 80097ae:	4997      	ldr	r1, [pc, #604]	; (8009a0c <HAL_RCC_OscConfig+0x4f8>)
 80097b0:	4313      	orrs	r3, r2
 80097b2:	604b      	str	r3, [r1, #4]
 80097b4:	e018      	b.n	80097e8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80097b6:	4b95      	ldr	r3, [pc, #596]	; (8009a0c <HAL_RCC_OscConfig+0x4f8>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a94      	ldr	r2, [pc, #592]	; (8009a0c <HAL_RCC_OscConfig+0x4f8>)
 80097bc:	f023 0301 	bic.w	r3, r3, #1
 80097c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097c2:	f7f8 ff6d 	bl	80026a0 <HAL_GetTick>
 80097c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80097c8:	e008      	b.n	80097dc <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80097ca:	f7f8 ff69 	bl	80026a0 <HAL_GetTick>
 80097ce:	4602      	mov	r2, r0
 80097d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d2:	1ad3      	subs	r3, r2, r3
 80097d4:	2b02      	cmp	r3, #2
 80097d6:	d901      	bls.n	80097dc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80097d8:	2303      	movs	r3, #3
 80097da:	e2c2      	b.n	8009d62 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80097dc:	4b8b      	ldr	r3, [pc, #556]	; (8009a0c <HAL_RCC_OscConfig+0x4f8>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f003 0304 	and.w	r3, r3, #4
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d1f0      	bne.n	80097ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f003 0310 	and.w	r3, r3, #16
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	f000 80a9 	beq.w	8009948 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80097f6:	4b85      	ldr	r3, [pc, #532]	; (8009a0c <HAL_RCC_OscConfig+0x4f8>)
 80097f8:	691b      	ldr	r3, [r3, #16]
 80097fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097fe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009800:	4b82      	ldr	r3, [pc, #520]	; (8009a0c <HAL_RCC_OscConfig+0x4f8>)
 8009802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009804:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009806:	69bb      	ldr	r3, [r7, #24]
 8009808:	2b08      	cmp	r3, #8
 800980a:	d007      	beq.n	800981c <HAL_RCC_OscConfig+0x308>
 800980c:	69bb      	ldr	r3, [r7, #24]
 800980e:	2b18      	cmp	r3, #24
 8009810:	d13a      	bne.n	8009888 <HAL_RCC_OscConfig+0x374>
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	f003 0303 	and.w	r3, r3, #3
 8009818:	2b01      	cmp	r3, #1
 800981a:	d135      	bne.n	8009888 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800981c:	4b7b      	ldr	r3, [pc, #492]	; (8009a0c <HAL_RCC_OscConfig+0x4f8>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009824:	2b00      	cmp	r3, #0
 8009826:	d005      	beq.n	8009834 <HAL_RCC_OscConfig+0x320>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	69db      	ldr	r3, [r3, #28]
 800982c:	2b80      	cmp	r3, #128	; 0x80
 800982e:	d001      	beq.n	8009834 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	e296      	b.n	8009d62 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009834:	f7f8 ff64 	bl	8002700 <HAL_GetREVID>
 8009838:	4603      	mov	r3, r0
 800983a:	f241 0203 	movw	r2, #4099	; 0x1003
 800983e:	4293      	cmp	r3, r2
 8009840:	d817      	bhi.n	8009872 <HAL_RCC_OscConfig+0x35e>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6a1b      	ldr	r3, [r3, #32]
 8009846:	2b20      	cmp	r3, #32
 8009848:	d108      	bne.n	800985c <HAL_RCC_OscConfig+0x348>
 800984a:	4b70      	ldr	r3, [pc, #448]	; (8009a0c <HAL_RCC_OscConfig+0x4f8>)
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009852:	4a6e      	ldr	r2, [pc, #440]	; (8009a0c <HAL_RCC_OscConfig+0x4f8>)
 8009854:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009858:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800985a:	e075      	b.n	8009948 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800985c:	4b6b      	ldr	r3, [pc, #428]	; (8009a0c <HAL_RCC_OscConfig+0x4f8>)
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6a1b      	ldr	r3, [r3, #32]
 8009868:	069b      	lsls	r3, r3, #26
 800986a:	4968      	ldr	r1, [pc, #416]	; (8009a0c <HAL_RCC_OscConfig+0x4f8>)
 800986c:	4313      	orrs	r3, r2
 800986e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009870:	e06a      	b.n	8009948 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009872:	4b66      	ldr	r3, [pc, #408]	; (8009a0c <HAL_RCC_OscConfig+0x4f8>)
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6a1b      	ldr	r3, [r3, #32]
 800987e:	061b      	lsls	r3, r3, #24
 8009880:	4962      	ldr	r1, [pc, #392]	; (8009a0c <HAL_RCC_OscConfig+0x4f8>)
 8009882:	4313      	orrs	r3, r2
 8009884:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009886:	e05f      	b.n	8009948 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	69db      	ldr	r3, [r3, #28]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d042      	beq.n	8009916 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009890:	4b5e      	ldr	r3, [pc, #376]	; (8009a0c <HAL_RCC_OscConfig+0x4f8>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a5d      	ldr	r2, [pc, #372]	; (8009a0c <HAL_RCC_OscConfig+0x4f8>)
 8009896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800989a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800989c:	f7f8 ff00 	bl	80026a0 <HAL_GetTick>
 80098a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80098a2:	e008      	b.n	80098b6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80098a4:	f7f8 fefc 	bl	80026a0 <HAL_GetTick>
 80098a8:	4602      	mov	r2, r0
 80098aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ac:	1ad3      	subs	r3, r2, r3
 80098ae:	2b02      	cmp	r3, #2
 80098b0:	d901      	bls.n	80098b6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80098b2:	2303      	movs	r3, #3
 80098b4:	e255      	b.n	8009d62 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80098b6:	4b55      	ldr	r3, [pc, #340]	; (8009a0c <HAL_RCC_OscConfig+0x4f8>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d0f0      	beq.n	80098a4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80098c2:	f7f8 ff1d 	bl	8002700 <HAL_GetREVID>
 80098c6:	4603      	mov	r3, r0
 80098c8:	f241 0203 	movw	r2, #4099	; 0x1003
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d817      	bhi.n	8009900 <HAL_RCC_OscConfig+0x3ec>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6a1b      	ldr	r3, [r3, #32]
 80098d4:	2b20      	cmp	r3, #32
 80098d6:	d108      	bne.n	80098ea <HAL_RCC_OscConfig+0x3d6>
 80098d8:	4b4c      	ldr	r3, [pc, #304]	; (8009a0c <HAL_RCC_OscConfig+0x4f8>)
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80098e0:	4a4a      	ldr	r2, [pc, #296]	; (8009a0c <HAL_RCC_OscConfig+0x4f8>)
 80098e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80098e6:	6053      	str	r3, [r2, #4]
 80098e8:	e02e      	b.n	8009948 <HAL_RCC_OscConfig+0x434>
 80098ea:	4b48      	ldr	r3, [pc, #288]	; (8009a0c <HAL_RCC_OscConfig+0x4f8>)
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6a1b      	ldr	r3, [r3, #32]
 80098f6:	069b      	lsls	r3, r3, #26
 80098f8:	4944      	ldr	r1, [pc, #272]	; (8009a0c <HAL_RCC_OscConfig+0x4f8>)
 80098fa:	4313      	orrs	r3, r2
 80098fc:	604b      	str	r3, [r1, #4]
 80098fe:	e023      	b.n	8009948 <HAL_RCC_OscConfig+0x434>
 8009900:	4b42      	ldr	r3, [pc, #264]	; (8009a0c <HAL_RCC_OscConfig+0x4f8>)
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6a1b      	ldr	r3, [r3, #32]
 800990c:	061b      	lsls	r3, r3, #24
 800990e:	493f      	ldr	r1, [pc, #252]	; (8009a0c <HAL_RCC_OscConfig+0x4f8>)
 8009910:	4313      	orrs	r3, r2
 8009912:	60cb      	str	r3, [r1, #12]
 8009914:	e018      	b.n	8009948 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009916:	4b3d      	ldr	r3, [pc, #244]	; (8009a0c <HAL_RCC_OscConfig+0x4f8>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a3c      	ldr	r2, [pc, #240]	; (8009a0c <HAL_RCC_OscConfig+0x4f8>)
 800991c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009922:	f7f8 febd 	bl	80026a0 <HAL_GetTick>
 8009926:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009928:	e008      	b.n	800993c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800992a:	f7f8 feb9 	bl	80026a0 <HAL_GetTick>
 800992e:	4602      	mov	r2, r0
 8009930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009932:	1ad3      	subs	r3, r2, r3
 8009934:	2b02      	cmp	r3, #2
 8009936:	d901      	bls.n	800993c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009938:	2303      	movs	r3, #3
 800993a:	e212      	b.n	8009d62 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800993c:	4b33      	ldr	r3, [pc, #204]	; (8009a0c <HAL_RCC_OscConfig+0x4f8>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009944:	2b00      	cmp	r3, #0
 8009946:	d1f0      	bne.n	800992a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f003 0308 	and.w	r3, r3, #8
 8009950:	2b00      	cmp	r3, #0
 8009952:	d036      	beq.n	80099c2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	695b      	ldr	r3, [r3, #20]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d019      	beq.n	8009990 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800995c:	4b2b      	ldr	r3, [pc, #172]	; (8009a0c <HAL_RCC_OscConfig+0x4f8>)
 800995e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009960:	4a2a      	ldr	r2, [pc, #168]	; (8009a0c <HAL_RCC_OscConfig+0x4f8>)
 8009962:	f043 0301 	orr.w	r3, r3, #1
 8009966:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009968:	f7f8 fe9a 	bl	80026a0 <HAL_GetTick>
 800996c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800996e:	e008      	b.n	8009982 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009970:	f7f8 fe96 	bl	80026a0 <HAL_GetTick>
 8009974:	4602      	mov	r2, r0
 8009976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009978:	1ad3      	subs	r3, r2, r3
 800997a:	2b02      	cmp	r3, #2
 800997c:	d901      	bls.n	8009982 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800997e:	2303      	movs	r3, #3
 8009980:	e1ef      	b.n	8009d62 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009982:	4b22      	ldr	r3, [pc, #136]	; (8009a0c <HAL_RCC_OscConfig+0x4f8>)
 8009984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009986:	f003 0302 	and.w	r3, r3, #2
 800998a:	2b00      	cmp	r3, #0
 800998c:	d0f0      	beq.n	8009970 <HAL_RCC_OscConfig+0x45c>
 800998e:	e018      	b.n	80099c2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009990:	4b1e      	ldr	r3, [pc, #120]	; (8009a0c <HAL_RCC_OscConfig+0x4f8>)
 8009992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009994:	4a1d      	ldr	r2, [pc, #116]	; (8009a0c <HAL_RCC_OscConfig+0x4f8>)
 8009996:	f023 0301 	bic.w	r3, r3, #1
 800999a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800999c:	f7f8 fe80 	bl	80026a0 <HAL_GetTick>
 80099a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80099a2:	e008      	b.n	80099b6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80099a4:	f7f8 fe7c 	bl	80026a0 <HAL_GetTick>
 80099a8:	4602      	mov	r2, r0
 80099aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ac:	1ad3      	subs	r3, r2, r3
 80099ae:	2b02      	cmp	r3, #2
 80099b0:	d901      	bls.n	80099b6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80099b2:	2303      	movs	r3, #3
 80099b4:	e1d5      	b.n	8009d62 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80099b6:	4b15      	ldr	r3, [pc, #84]	; (8009a0c <HAL_RCC_OscConfig+0x4f8>)
 80099b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099ba:	f003 0302 	and.w	r3, r3, #2
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d1f0      	bne.n	80099a4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f003 0320 	and.w	r3, r3, #32
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d039      	beq.n	8009a42 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	699b      	ldr	r3, [r3, #24]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d01c      	beq.n	8009a10 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80099d6:	4b0d      	ldr	r3, [pc, #52]	; (8009a0c <HAL_RCC_OscConfig+0x4f8>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a0c      	ldr	r2, [pc, #48]	; (8009a0c <HAL_RCC_OscConfig+0x4f8>)
 80099dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80099e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80099e2:	f7f8 fe5d 	bl	80026a0 <HAL_GetTick>
 80099e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80099e8:	e008      	b.n	80099fc <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80099ea:	f7f8 fe59 	bl	80026a0 <HAL_GetTick>
 80099ee:	4602      	mov	r2, r0
 80099f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f2:	1ad3      	subs	r3, r2, r3
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	d901      	bls.n	80099fc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80099f8:	2303      	movs	r3, #3
 80099fa:	e1b2      	b.n	8009d62 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80099fc:	4b03      	ldr	r3, [pc, #12]	; (8009a0c <HAL_RCC_OscConfig+0x4f8>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d0f0      	beq.n	80099ea <HAL_RCC_OscConfig+0x4d6>
 8009a08:	e01b      	b.n	8009a42 <HAL_RCC_OscConfig+0x52e>
 8009a0a:	bf00      	nop
 8009a0c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009a10:	4b9b      	ldr	r3, [pc, #620]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a9a      	ldr	r2, [pc, #616]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009a16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a1a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009a1c:	f7f8 fe40 	bl	80026a0 <HAL_GetTick>
 8009a20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009a22:	e008      	b.n	8009a36 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009a24:	f7f8 fe3c 	bl	80026a0 <HAL_GetTick>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2c:	1ad3      	subs	r3, r2, r3
 8009a2e:	2b02      	cmp	r3, #2
 8009a30:	d901      	bls.n	8009a36 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009a32:	2303      	movs	r3, #3
 8009a34:	e195      	b.n	8009d62 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009a36:	4b92      	ldr	r3, [pc, #584]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d1f0      	bne.n	8009a24 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f003 0304 	and.w	r3, r3, #4
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	f000 8081 	beq.w	8009b52 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009a50:	4b8c      	ldr	r3, [pc, #560]	; (8009c84 <HAL_RCC_OscConfig+0x770>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a8b      	ldr	r2, [pc, #556]	; (8009c84 <HAL_RCC_OscConfig+0x770>)
 8009a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009a5c:	f7f8 fe20 	bl	80026a0 <HAL_GetTick>
 8009a60:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a62:	e008      	b.n	8009a76 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009a64:	f7f8 fe1c 	bl	80026a0 <HAL_GetTick>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6c:	1ad3      	subs	r3, r2, r3
 8009a6e:	2b64      	cmp	r3, #100	; 0x64
 8009a70:	d901      	bls.n	8009a76 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009a72:	2303      	movs	r3, #3
 8009a74:	e175      	b.n	8009d62 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a76:	4b83      	ldr	r3, [pc, #524]	; (8009c84 <HAL_RCC_OscConfig+0x770>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d0f0      	beq.n	8009a64 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	d106      	bne.n	8009a98 <HAL_RCC_OscConfig+0x584>
 8009a8a:	4b7d      	ldr	r3, [pc, #500]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a8e:	4a7c      	ldr	r2, [pc, #496]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009a90:	f043 0301 	orr.w	r3, r3, #1
 8009a94:	6713      	str	r3, [r2, #112]	; 0x70
 8009a96:	e02d      	b.n	8009af4 <HAL_RCC_OscConfig+0x5e0>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	689b      	ldr	r3, [r3, #8]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d10c      	bne.n	8009aba <HAL_RCC_OscConfig+0x5a6>
 8009aa0:	4b77      	ldr	r3, [pc, #476]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aa4:	4a76      	ldr	r2, [pc, #472]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009aa6:	f023 0301 	bic.w	r3, r3, #1
 8009aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8009aac:	4b74      	ldr	r3, [pc, #464]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ab0:	4a73      	ldr	r2, [pc, #460]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009ab2:	f023 0304 	bic.w	r3, r3, #4
 8009ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8009ab8:	e01c      	b.n	8009af4 <HAL_RCC_OscConfig+0x5e0>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	689b      	ldr	r3, [r3, #8]
 8009abe:	2b05      	cmp	r3, #5
 8009ac0:	d10c      	bne.n	8009adc <HAL_RCC_OscConfig+0x5c8>
 8009ac2:	4b6f      	ldr	r3, [pc, #444]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ac6:	4a6e      	ldr	r2, [pc, #440]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009ac8:	f043 0304 	orr.w	r3, r3, #4
 8009acc:	6713      	str	r3, [r2, #112]	; 0x70
 8009ace:	4b6c      	ldr	r3, [pc, #432]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ad2:	4a6b      	ldr	r2, [pc, #428]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009ad4:	f043 0301 	orr.w	r3, r3, #1
 8009ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8009ada:	e00b      	b.n	8009af4 <HAL_RCC_OscConfig+0x5e0>
 8009adc:	4b68      	ldr	r3, [pc, #416]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ae0:	4a67      	ldr	r2, [pc, #412]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009ae2:	f023 0301 	bic.w	r3, r3, #1
 8009ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8009ae8:	4b65      	ldr	r3, [pc, #404]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aec:	4a64      	ldr	r2, [pc, #400]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009aee:	f023 0304 	bic.w	r3, r3, #4
 8009af2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d015      	beq.n	8009b28 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009afc:	f7f8 fdd0 	bl	80026a0 <HAL_GetTick>
 8009b00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009b02:	e00a      	b.n	8009b1a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b04:	f7f8 fdcc 	bl	80026a0 <HAL_GetTick>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0c:	1ad3      	subs	r3, r2, r3
 8009b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d901      	bls.n	8009b1a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8009b16:	2303      	movs	r3, #3
 8009b18:	e123      	b.n	8009d62 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009b1a:	4b59      	ldr	r3, [pc, #356]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b1e:	f003 0302 	and.w	r3, r3, #2
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d0ee      	beq.n	8009b04 <HAL_RCC_OscConfig+0x5f0>
 8009b26:	e014      	b.n	8009b52 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b28:	f7f8 fdba 	bl	80026a0 <HAL_GetTick>
 8009b2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009b2e:	e00a      	b.n	8009b46 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b30:	f7f8 fdb6 	bl	80026a0 <HAL_GetTick>
 8009b34:	4602      	mov	r2, r0
 8009b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b38:	1ad3      	subs	r3, r2, r3
 8009b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d901      	bls.n	8009b46 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009b42:	2303      	movs	r3, #3
 8009b44:	e10d      	b.n	8009d62 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009b46:	4b4e      	ldr	r3, [pc, #312]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b4a:	f003 0302 	and.w	r3, r3, #2
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d1ee      	bne.n	8009b30 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	f000 8102 	beq.w	8009d60 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009b5c:	4b48      	ldr	r3, [pc, #288]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009b5e:	691b      	ldr	r3, [r3, #16]
 8009b60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b64:	2b18      	cmp	r3, #24
 8009b66:	f000 80bd 	beq.w	8009ce4 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6e:	2b02      	cmp	r3, #2
 8009b70:	f040 809e 	bne.w	8009cb0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b74:	4b42      	ldr	r3, [pc, #264]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a41      	ldr	r2, [pc, #260]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009b7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b80:	f7f8 fd8e 	bl	80026a0 <HAL_GetTick>
 8009b84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b86:	e008      	b.n	8009b9a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b88:	f7f8 fd8a 	bl	80026a0 <HAL_GetTick>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b90:	1ad3      	subs	r3, r2, r3
 8009b92:	2b02      	cmp	r3, #2
 8009b94:	d901      	bls.n	8009b9a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009b96:	2303      	movs	r3, #3
 8009b98:	e0e3      	b.n	8009d62 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b9a:	4b39      	ldr	r3, [pc, #228]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d1f0      	bne.n	8009b88 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009ba6:	4b36      	ldr	r3, [pc, #216]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009ba8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009baa:	4b37      	ldr	r3, [pc, #220]	; (8009c88 <HAL_RCC_OscConfig+0x774>)
 8009bac:	4013      	ands	r3, r2
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009bb6:	0112      	lsls	r2, r2, #4
 8009bb8:	430a      	orrs	r2, r1
 8009bba:	4931      	ldr	r1, [pc, #196]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	628b      	str	r3, [r1, #40]	; 0x28
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bc4:	3b01      	subs	r3, #1
 8009bc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bce:	3b01      	subs	r3, #1
 8009bd0:	025b      	lsls	r3, r3, #9
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	431a      	orrs	r2, r3
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	041b      	lsls	r3, r3, #16
 8009bde:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009be2:	431a      	orrs	r2, r3
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009be8:	3b01      	subs	r3, #1
 8009bea:	061b      	lsls	r3, r3, #24
 8009bec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009bf0:	4923      	ldr	r1, [pc, #140]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009bf6:	4b22      	ldr	r3, [pc, #136]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bfa:	4a21      	ldr	r2, [pc, #132]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009bfc:	f023 0301 	bic.w	r3, r3, #1
 8009c00:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009c02:	4b1f      	ldr	r3, [pc, #124]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009c04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c06:	4b21      	ldr	r3, [pc, #132]	; (8009c8c <HAL_RCC_OscConfig+0x778>)
 8009c08:	4013      	ands	r3, r2
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009c0e:	00d2      	lsls	r2, r2, #3
 8009c10:	491b      	ldr	r1, [pc, #108]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009c12:	4313      	orrs	r3, r2
 8009c14:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009c16:	4b1a      	ldr	r3, [pc, #104]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c1a:	f023 020c 	bic.w	r2, r3, #12
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c22:	4917      	ldr	r1, [pc, #92]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009c24:	4313      	orrs	r3, r2
 8009c26:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009c28:	4b15      	ldr	r3, [pc, #84]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c2c:	f023 0202 	bic.w	r2, r3, #2
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c34:	4912      	ldr	r1, [pc, #72]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009c36:	4313      	orrs	r3, r2
 8009c38:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009c3a:	4b11      	ldr	r3, [pc, #68]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c3e:	4a10      	ldr	r2, [pc, #64]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c46:	4b0e      	ldr	r3, [pc, #56]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c4a:	4a0d      	ldr	r2, [pc, #52]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009c52:	4b0b      	ldr	r3, [pc, #44]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c56:	4a0a      	ldr	r2, [pc, #40]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009c5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009c5e:	4b08      	ldr	r3, [pc, #32]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c62:	4a07      	ldr	r2, [pc, #28]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009c64:	f043 0301 	orr.w	r3, r3, #1
 8009c68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009c6a:	4b05      	ldr	r3, [pc, #20]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4a04      	ldr	r2, [pc, #16]	; (8009c80 <HAL_RCC_OscConfig+0x76c>)
 8009c70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009c74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c76:	f7f8 fd13 	bl	80026a0 <HAL_GetTick>
 8009c7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009c7c:	e011      	b.n	8009ca2 <HAL_RCC_OscConfig+0x78e>
 8009c7e:	bf00      	nop
 8009c80:	58024400 	.word	0x58024400
 8009c84:	58024800 	.word	0x58024800
 8009c88:	fffffc0c 	.word	0xfffffc0c
 8009c8c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c90:	f7f8 fd06 	bl	80026a0 <HAL_GetTick>
 8009c94:	4602      	mov	r2, r0
 8009c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c98:	1ad3      	subs	r3, r2, r3
 8009c9a:	2b02      	cmp	r3, #2
 8009c9c:	d901      	bls.n	8009ca2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009c9e:	2303      	movs	r3, #3
 8009ca0:	e05f      	b.n	8009d62 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009ca2:	4b32      	ldr	r3, [pc, #200]	; (8009d6c <HAL_RCC_OscConfig+0x858>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d0f0      	beq.n	8009c90 <HAL_RCC_OscConfig+0x77c>
 8009cae:	e057      	b.n	8009d60 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009cb0:	4b2e      	ldr	r3, [pc, #184]	; (8009d6c <HAL_RCC_OscConfig+0x858>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a2d      	ldr	r2, [pc, #180]	; (8009d6c <HAL_RCC_OscConfig+0x858>)
 8009cb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009cba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cbc:	f7f8 fcf0 	bl	80026a0 <HAL_GetTick>
 8009cc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009cc2:	e008      	b.n	8009cd6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009cc4:	f7f8 fcec 	bl	80026a0 <HAL_GetTick>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ccc:	1ad3      	subs	r3, r2, r3
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	d901      	bls.n	8009cd6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8009cd2:	2303      	movs	r3, #3
 8009cd4:	e045      	b.n	8009d62 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009cd6:	4b25      	ldr	r3, [pc, #148]	; (8009d6c <HAL_RCC_OscConfig+0x858>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d1f0      	bne.n	8009cc4 <HAL_RCC_OscConfig+0x7b0>
 8009ce2:	e03d      	b.n	8009d60 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009ce4:	4b21      	ldr	r3, [pc, #132]	; (8009d6c <HAL_RCC_OscConfig+0x858>)
 8009ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ce8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009cea:	4b20      	ldr	r3, [pc, #128]	; (8009d6c <HAL_RCC_OscConfig+0x858>)
 8009cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cee:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d031      	beq.n	8009d5c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	f003 0203 	and.w	r2, r3, #3
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d12a      	bne.n	8009d5c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	091b      	lsrs	r3, r3, #4
 8009d0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d122      	bne.n	8009d5c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d20:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d11a      	bne.n	8009d5c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	0a5b      	lsrs	r3, r3, #9
 8009d2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d32:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d111      	bne.n	8009d5c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	0c1b      	lsrs	r3, r3, #16
 8009d3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d44:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d108      	bne.n	8009d5c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	0e1b      	lsrs	r3, r3, #24
 8009d4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d56:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d001      	beq.n	8009d60 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	e000      	b.n	8009d62 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8009d60:	2300      	movs	r3, #0
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3730      	adds	r7, #48	; 0x30
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	58024400 	.word	0x58024400

08009d70 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b086      	sub	sp, #24
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d101      	bne.n	8009d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009d80:	2301      	movs	r3, #1
 8009d82:	e19c      	b.n	800a0be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009d84:	4b8a      	ldr	r3, [pc, #552]	; (8009fb0 <HAL_RCC_ClockConfig+0x240>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f003 030f 	and.w	r3, r3, #15
 8009d8c:	683a      	ldr	r2, [r7, #0]
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d910      	bls.n	8009db4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d92:	4b87      	ldr	r3, [pc, #540]	; (8009fb0 <HAL_RCC_ClockConfig+0x240>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f023 020f 	bic.w	r2, r3, #15
 8009d9a:	4985      	ldr	r1, [pc, #532]	; (8009fb0 <HAL_RCC_ClockConfig+0x240>)
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009da2:	4b83      	ldr	r3, [pc, #524]	; (8009fb0 <HAL_RCC_ClockConfig+0x240>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f003 030f 	and.w	r3, r3, #15
 8009daa:	683a      	ldr	r2, [r7, #0]
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d001      	beq.n	8009db4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009db0:	2301      	movs	r3, #1
 8009db2:	e184      	b.n	800a0be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f003 0304 	and.w	r3, r3, #4
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d010      	beq.n	8009de2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	691a      	ldr	r2, [r3, #16]
 8009dc4:	4b7b      	ldr	r3, [pc, #492]	; (8009fb4 <HAL_RCC_ClockConfig+0x244>)
 8009dc6:	699b      	ldr	r3, [r3, #24]
 8009dc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d908      	bls.n	8009de2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009dd0:	4b78      	ldr	r3, [pc, #480]	; (8009fb4 <HAL_RCC_ClockConfig+0x244>)
 8009dd2:	699b      	ldr	r3, [r3, #24]
 8009dd4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	691b      	ldr	r3, [r3, #16]
 8009ddc:	4975      	ldr	r1, [pc, #468]	; (8009fb4 <HAL_RCC_ClockConfig+0x244>)
 8009dde:	4313      	orrs	r3, r2
 8009de0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f003 0308 	and.w	r3, r3, #8
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d010      	beq.n	8009e10 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	695a      	ldr	r2, [r3, #20]
 8009df2:	4b70      	ldr	r3, [pc, #448]	; (8009fb4 <HAL_RCC_ClockConfig+0x244>)
 8009df4:	69db      	ldr	r3, [r3, #28]
 8009df6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d908      	bls.n	8009e10 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009dfe:	4b6d      	ldr	r3, [pc, #436]	; (8009fb4 <HAL_RCC_ClockConfig+0x244>)
 8009e00:	69db      	ldr	r3, [r3, #28]
 8009e02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	695b      	ldr	r3, [r3, #20]
 8009e0a:	496a      	ldr	r1, [pc, #424]	; (8009fb4 <HAL_RCC_ClockConfig+0x244>)
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f003 0310 	and.w	r3, r3, #16
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d010      	beq.n	8009e3e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	699a      	ldr	r2, [r3, #24]
 8009e20:	4b64      	ldr	r3, [pc, #400]	; (8009fb4 <HAL_RCC_ClockConfig+0x244>)
 8009e22:	69db      	ldr	r3, [r3, #28]
 8009e24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d908      	bls.n	8009e3e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009e2c:	4b61      	ldr	r3, [pc, #388]	; (8009fb4 <HAL_RCC_ClockConfig+0x244>)
 8009e2e:	69db      	ldr	r3, [r3, #28]
 8009e30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	699b      	ldr	r3, [r3, #24]
 8009e38:	495e      	ldr	r1, [pc, #376]	; (8009fb4 <HAL_RCC_ClockConfig+0x244>)
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f003 0320 	and.w	r3, r3, #32
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d010      	beq.n	8009e6c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	69da      	ldr	r2, [r3, #28]
 8009e4e:	4b59      	ldr	r3, [pc, #356]	; (8009fb4 <HAL_RCC_ClockConfig+0x244>)
 8009e50:	6a1b      	ldr	r3, [r3, #32]
 8009e52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d908      	bls.n	8009e6c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009e5a:	4b56      	ldr	r3, [pc, #344]	; (8009fb4 <HAL_RCC_ClockConfig+0x244>)
 8009e5c:	6a1b      	ldr	r3, [r3, #32]
 8009e5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	69db      	ldr	r3, [r3, #28]
 8009e66:	4953      	ldr	r1, [pc, #332]	; (8009fb4 <HAL_RCC_ClockConfig+0x244>)
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f003 0302 	and.w	r3, r3, #2
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d010      	beq.n	8009e9a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	68da      	ldr	r2, [r3, #12]
 8009e7c:	4b4d      	ldr	r3, [pc, #308]	; (8009fb4 <HAL_RCC_ClockConfig+0x244>)
 8009e7e:	699b      	ldr	r3, [r3, #24]
 8009e80:	f003 030f 	and.w	r3, r3, #15
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d908      	bls.n	8009e9a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e88:	4b4a      	ldr	r3, [pc, #296]	; (8009fb4 <HAL_RCC_ClockConfig+0x244>)
 8009e8a:	699b      	ldr	r3, [r3, #24]
 8009e8c:	f023 020f 	bic.w	r2, r3, #15
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	4947      	ldr	r1, [pc, #284]	; (8009fb4 <HAL_RCC_ClockConfig+0x244>)
 8009e96:	4313      	orrs	r3, r2
 8009e98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f003 0301 	and.w	r3, r3, #1
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d055      	beq.n	8009f52 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009ea6:	4b43      	ldr	r3, [pc, #268]	; (8009fb4 <HAL_RCC_ClockConfig+0x244>)
 8009ea8:	699b      	ldr	r3, [r3, #24]
 8009eaa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	4940      	ldr	r1, [pc, #256]	; (8009fb4 <HAL_RCC_ClockConfig+0x244>)
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	2b02      	cmp	r3, #2
 8009ebe:	d107      	bne.n	8009ed0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009ec0:	4b3c      	ldr	r3, [pc, #240]	; (8009fb4 <HAL_RCC_ClockConfig+0x244>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d121      	bne.n	8009f10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	e0f6      	b.n	800a0be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	2b03      	cmp	r3, #3
 8009ed6:	d107      	bne.n	8009ee8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009ed8:	4b36      	ldr	r3, [pc, #216]	; (8009fb4 <HAL_RCC_ClockConfig+0x244>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d115      	bne.n	8009f10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	e0ea      	b.n	800a0be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	685b      	ldr	r3, [r3, #4]
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d107      	bne.n	8009f00 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009ef0:	4b30      	ldr	r3, [pc, #192]	; (8009fb4 <HAL_RCC_ClockConfig+0x244>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d109      	bne.n	8009f10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009efc:	2301      	movs	r3, #1
 8009efe:	e0de      	b.n	800a0be <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f00:	4b2c      	ldr	r3, [pc, #176]	; (8009fb4 <HAL_RCC_ClockConfig+0x244>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f003 0304 	and.w	r3, r3, #4
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d101      	bne.n	8009f10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e0d6      	b.n	800a0be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009f10:	4b28      	ldr	r3, [pc, #160]	; (8009fb4 <HAL_RCC_ClockConfig+0x244>)
 8009f12:	691b      	ldr	r3, [r3, #16]
 8009f14:	f023 0207 	bic.w	r2, r3, #7
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	4925      	ldr	r1, [pc, #148]	; (8009fb4 <HAL_RCC_ClockConfig+0x244>)
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f22:	f7f8 fbbd 	bl	80026a0 <HAL_GetTick>
 8009f26:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f28:	e00a      	b.n	8009f40 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f2a:	f7f8 fbb9 	bl	80026a0 <HAL_GetTick>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	1ad3      	subs	r3, r2, r3
 8009f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d901      	bls.n	8009f40 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009f3c:	2303      	movs	r3, #3
 8009f3e:	e0be      	b.n	800a0be <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f40:	4b1c      	ldr	r3, [pc, #112]	; (8009fb4 <HAL_RCC_ClockConfig+0x244>)
 8009f42:	691b      	ldr	r3, [r3, #16]
 8009f44:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	00db      	lsls	r3, r3, #3
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d1eb      	bne.n	8009f2a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f003 0302 	and.w	r3, r3, #2
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d010      	beq.n	8009f80 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	68da      	ldr	r2, [r3, #12]
 8009f62:	4b14      	ldr	r3, [pc, #80]	; (8009fb4 <HAL_RCC_ClockConfig+0x244>)
 8009f64:	699b      	ldr	r3, [r3, #24]
 8009f66:	f003 030f 	and.w	r3, r3, #15
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d208      	bcs.n	8009f80 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f6e:	4b11      	ldr	r3, [pc, #68]	; (8009fb4 <HAL_RCC_ClockConfig+0x244>)
 8009f70:	699b      	ldr	r3, [r3, #24]
 8009f72:	f023 020f 	bic.w	r2, r3, #15
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	68db      	ldr	r3, [r3, #12]
 8009f7a:	490e      	ldr	r1, [pc, #56]	; (8009fb4 <HAL_RCC_ClockConfig+0x244>)
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009f80:	4b0b      	ldr	r3, [pc, #44]	; (8009fb0 <HAL_RCC_ClockConfig+0x240>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f003 030f 	and.w	r3, r3, #15
 8009f88:	683a      	ldr	r2, [r7, #0]
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d214      	bcs.n	8009fb8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f8e:	4b08      	ldr	r3, [pc, #32]	; (8009fb0 <HAL_RCC_ClockConfig+0x240>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f023 020f 	bic.w	r2, r3, #15
 8009f96:	4906      	ldr	r1, [pc, #24]	; (8009fb0 <HAL_RCC_ClockConfig+0x240>)
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f9e:	4b04      	ldr	r3, [pc, #16]	; (8009fb0 <HAL_RCC_ClockConfig+0x240>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f003 030f 	and.w	r3, r3, #15
 8009fa6:	683a      	ldr	r2, [r7, #0]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d005      	beq.n	8009fb8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	e086      	b.n	800a0be <HAL_RCC_ClockConfig+0x34e>
 8009fb0:	52002000 	.word	0x52002000
 8009fb4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f003 0304 	and.w	r3, r3, #4
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d010      	beq.n	8009fe6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	691a      	ldr	r2, [r3, #16]
 8009fc8:	4b3f      	ldr	r3, [pc, #252]	; (800a0c8 <HAL_RCC_ClockConfig+0x358>)
 8009fca:	699b      	ldr	r3, [r3, #24]
 8009fcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d208      	bcs.n	8009fe6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009fd4:	4b3c      	ldr	r3, [pc, #240]	; (800a0c8 <HAL_RCC_ClockConfig+0x358>)
 8009fd6:	699b      	ldr	r3, [r3, #24]
 8009fd8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	691b      	ldr	r3, [r3, #16]
 8009fe0:	4939      	ldr	r1, [pc, #228]	; (800a0c8 <HAL_RCC_ClockConfig+0x358>)
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f003 0308 	and.w	r3, r3, #8
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d010      	beq.n	800a014 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	695a      	ldr	r2, [r3, #20]
 8009ff6:	4b34      	ldr	r3, [pc, #208]	; (800a0c8 <HAL_RCC_ClockConfig+0x358>)
 8009ff8:	69db      	ldr	r3, [r3, #28]
 8009ffa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d208      	bcs.n	800a014 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a002:	4b31      	ldr	r3, [pc, #196]	; (800a0c8 <HAL_RCC_ClockConfig+0x358>)
 800a004:	69db      	ldr	r3, [r3, #28]
 800a006:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	695b      	ldr	r3, [r3, #20]
 800a00e:	492e      	ldr	r1, [pc, #184]	; (800a0c8 <HAL_RCC_ClockConfig+0x358>)
 800a010:	4313      	orrs	r3, r2
 800a012:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f003 0310 	and.w	r3, r3, #16
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d010      	beq.n	800a042 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	699a      	ldr	r2, [r3, #24]
 800a024:	4b28      	ldr	r3, [pc, #160]	; (800a0c8 <HAL_RCC_ClockConfig+0x358>)
 800a026:	69db      	ldr	r3, [r3, #28]
 800a028:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d208      	bcs.n	800a042 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a030:	4b25      	ldr	r3, [pc, #148]	; (800a0c8 <HAL_RCC_ClockConfig+0x358>)
 800a032:	69db      	ldr	r3, [r3, #28]
 800a034:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	699b      	ldr	r3, [r3, #24]
 800a03c:	4922      	ldr	r1, [pc, #136]	; (800a0c8 <HAL_RCC_ClockConfig+0x358>)
 800a03e:	4313      	orrs	r3, r2
 800a040:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f003 0320 	and.w	r3, r3, #32
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d010      	beq.n	800a070 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	69da      	ldr	r2, [r3, #28]
 800a052:	4b1d      	ldr	r3, [pc, #116]	; (800a0c8 <HAL_RCC_ClockConfig+0x358>)
 800a054:	6a1b      	ldr	r3, [r3, #32]
 800a056:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d208      	bcs.n	800a070 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a05e:	4b1a      	ldr	r3, [pc, #104]	; (800a0c8 <HAL_RCC_ClockConfig+0x358>)
 800a060:	6a1b      	ldr	r3, [r3, #32]
 800a062:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	69db      	ldr	r3, [r3, #28]
 800a06a:	4917      	ldr	r1, [pc, #92]	; (800a0c8 <HAL_RCC_ClockConfig+0x358>)
 800a06c:	4313      	orrs	r3, r2
 800a06e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a070:	f000 f89e 	bl	800a1b0 <HAL_RCC_GetSysClockFreq>
 800a074:	4602      	mov	r2, r0
 800a076:	4b14      	ldr	r3, [pc, #80]	; (800a0c8 <HAL_RCC_ClockConfig+0x358>)
 800a078:	699b      	ldr	r3, [r3, #24]
 800a07a:	0a1b      	lsrs	r3, r3, #8
 800a07c:	f003 030f 	and.w	r3, r3, #15
 800a080:	4912      	ldr	r1, [pc, #72]	; (800a0cc <HAL_RCC_ClockConfig+0x35c>)
 800a082:	5ccb      	ldrb	r3, [r1, r3]
 800a084:	f003 031f 	and.w	r3, r3, #31
 800a088:	fa22 f303 	lsr.w	r3, r2, r3
 800a08c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a08e:	4b0e      	ldr	r3, [pc, #56]	; (800a0c8 <HAL_RCC_ClockConfig+0x358>)
 800a090:	699b      	ldr	r3, [r3, #24]
 800a092:	f003 030f 	and.w	r3, r3, #15
 800a096:	4a0d      	ldr	r2, [pc, #52]	; (800a0cc <HAL_RCC_ClockConfig+0x35c>)
 800a098:	5cd3      	ldrb	r3, [r2, r3]
 800a09a:	f003 031f 	and.w	r3, r3, #31
 800a09e:	693a      	ldr	r2, [r7, #16]
 800a0a0:	fa22 f303 	lsr.w	r3, r2, r3
 800a0a4:	4a0a      	ldr	r2, [pc, #40]	; (800a0d0 <HAL_RCC_ClockConfig+0x360>)
 800a0a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a0a8:	4a0a      	ldr	r2, [pc, #40]	; (800a0d4 <HAL_RCC_ClockConfig+0x364>)
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a0ae:	4b0a      	ldr	r3, [pc, #40]	; (800a0d8 <HAL_RCC_ClockConfig+0x368>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f7f8 faaa 	bl	800260c <HAL_InitTick>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a0bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3718      	adds	r7, #24
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	58024400 	.word	0x58024400
 800a0cc:	080131c0 	.word	0x080131c0
 800a0d0:	24000004 	.word	0x24000004
 800a0d4:	24000000 	.word	0x24000000
 800a0d8:	24000008 	.word	0x24000008

0800a0dc <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b08c      	sub	sp, #48	; 0x30
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d12a      	bne.n	800a144 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a0ee:	4b2d      	ldr	r3, [pc, #180]	; (800a1a4 <HAL_RCC_MCOConfig+0xc8>)
 800a0f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a0f4:	4a2b      	ldr	r2, [pc, #172]	; (800a1a4 <HAL_RCC_MCOConfig+0xc8>)
 800a0f6:	f043 0301 	orr.w	r3, r3, #1
 800a0fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a0fe:	4b29      	ldr	r3, [pc, #164]	; (800a1a4 <HAL_RCC_MCOConfig+0xc8>)
 800a100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a104:	f003 0301 	and.w	r3, r3, #1
 800a108:	61bb      	str	r3, [r7, #24]
 800a10a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a10c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a112:	2302      	movs	r3, #2
 800a114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a116:	2303      	movs	r3, #3
 800a118:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a11a:	2300      	movs	r3, #0
 800a11c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a11e:	2300      	movs	r3, #0
 800a120:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a122:	f107 031c 	add.w	r3, r7, #28
 800a126:	4619      	mov	r1, r3
 800a128:	481f      	ldr	r0, [pc, #124]	; (800a1a8 <HAL_RCC_MCOConfig+0xcc>)
 800a12a:	f7fd fca1 	bl	8007a70 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a12e:	4b1d      	ldr	r3, [pc, #116]	; (800a1a4 <HAL_RCC_MCOConfig+0xc8>)
 800a130:	691b      	ldr	r3, [r3, #16]
 800a132:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800a136:	68b9      	ldr	r1, [r7, #8]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	430b      	orrs	r3, r1
 800a13c:	4919      	ldr	r1, [pc, #100]	; (800a1a4 <HAL_RCC_MCOConfig+0xc8>)
 800a13e:	4313      	orrs	r3, r2
 800a140:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800a142:	e02a      	b.n	800a19a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800a144:	4b17      	ldr	r3, [pc, #92]	; (800a1a4 <HAL_RCC_MCOConfig+0xc8>)
 800a146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a14a:	4a16      	ldr	r2, [pc, #88]	; (800a1a4 <HAL_RCC_MCOConfig+0xc8>)
 800a14c:	f043 0304 	orr.w	r3, r3, #4
 800a150:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a154:	4b13      	ldr	r3, [pc, #76]	; (800a1a4 <HAL_RCC_MCOConfig+0xc8>)
 800a156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a15a:	f003 0304 	and.w	r3, r3, #4
 800a15e:	617b      	str	r3, [r7, #20]
 800a160:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a162:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a168:	2302      	movs	r3, #2
 800a16a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a16c:	2303      	movs	r3, #3
 800a16e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a170:	2300      	movs	r3, #0
 800a172:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a174:	2300      	movs	r3, #0
 800a176:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a178:	f107 031c 	add.w	r3, r7, #28
 800a17c:	4619      	mov	r1, r3
 800a17e:	480b      	ldr	r0, [pc, #44]	; (800a1ac <HAL_RCC_MCOConfig+0xd0>)
 800a180:	f7fd fc76 	bl	8007a70 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a184:	4b07      	ldr	r3, [pc, #28]	; (800a1a4 <HAL_RCC_MCOConfig+0xc8>)
 800a186:	691b      	ldr	r3, [r3, #16]
 800a188:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	01d9      	lsls	r1, r3, #7
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	430b      	orrs	r3, r1
 800a194:	4903      	ldr	r1, [pc, #12]	; (800a1a4 <HAL_RCC_MCOConfig+0xc8>)
 800a196:	4313      	orrs	r3, r2
 800a198:	610b      	str	r3, [r1, #16]
}
 800a19a:	bf00      	nop
 800a19c:	3730      	adds	r7, #48	; 0x30
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	58024400 	.word	0x58024400
 800a1a8:	58020000 	.word	0x58020000
 800a1ac:	58020800 	.word	0x58020800

0800a1b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b089      	sub	sp, #36	; 0x24
 800a1b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a1b6:	4bb3      	ldr	r3, [pc, #716]	; (800a484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1b8:	691b      	ldr	r3, [r3, #16]
 800a1ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1be:	2b18      	cmp	r3, #24
 800a1c0:	f200 8155 	bhi.w	800a46e <HAL_RCC_GetSysClockFreq+0x2be>
 800a1c4:	a201      	add	r2, pc, #4	; (adr r2, 800a1cc <HAL_RCC_GetSysClockFreq+0x1c>)
 800a1c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ca:	bf00      	nop
 800a1cc:	0800a231 	.word	0x0800a231
 800a1d0:	0800a46f 	.word	0x0800a46f
 800a1d4:	0800a46f 	.word	0x0800a46f
 800a1d8:	0800a46f 	.word	0x0800a46f
 800a1dc:	0800a46f 	.word	0x0800a46f
 800a1e0:	0800a46f 	.word	0x0800a46f
 800a1e4:	0800a46f 	.word	0x0800a46f
 800a1e8:	0800a46f 	.word	0x0800a46f
 800a1ec:	0800a257 	.word	0x0800a257
 800a1f0:	0800a46f 	.word	0x0800a46f
 800a1f4:	0800a46f 	.word	0x0800a46f
 800a1f8:	0800a46f 	.word	0x0800a46f
 800a1fc:	0800a46f 	.word	0x0800a46f
 800a200:	0800a46f 	.word	0x0800a46f
 800a204:	0800a46f 	.word	0x0800a46f
 800a208:	0800a46f 	.word	0x0800a46f
 800a20c:	0800a25d 	.word	0x0800a25d
 800a210:	0800a46f 	.word	0x0800a46f
 800a214:	0800a46f 	.word	0x0800a46f
 800a218:	0800a46f 	.word	0x0800a46f
 800a21c:	0800a46f 	.word	0x0800a46f
 800a220:	0800a46f 	.word	0x0800a46f
 800a224:	0800a46f 	.word	0x0800a46f
 800a228:	0800a46f 	.word	0x0800a46f
 800a22c:	0800a263 	.word	0x0800a263
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a230:	4b94      	ldr	r3, [pc, #592]	; (800a484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f003 0320 	and.w	r3, r3, #32
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d009      	beq.n	800a250 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a23c:	4b91      	ldr	r3, [pc, #580]	; (800a484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	08db      	lsrs	r3, r3, #3
 800a242:	f003 0303 	and.w	r3, r3, #3
 800a246:	4a90      	ldr	r2, [pc, #576]	; (800a488 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a248:	fa22 f303 	lsr.w	r3, r2, r3
 800a24c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a24e:	e111      	b.n	800a474 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a250:	4b8d      	ldr	r3, [pc, #564]	; (800a488 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a252:	61bb      	str	r3, [r7, #24]
    break;
 800a254:	e10e      	b.n	800a474 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a256:	4b8d      	ldr	r3, [pc, #564]	; (800a48c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a258:	61bb      	str	r3, [r7, #24]
    break;
 800a25a:	e10b      	b.n	800a474 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a25c:	4b8c      	ldr	r3, [pc, #560]	; (800a490 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a25e:	61bb      	str	r3, [r7, #24]
    break;
 800a260:	e108      	b.n	800a474 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a262:	4b88      	ldr	r3, [pc, #544]	; (800a484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a266:	f003 0303 	and.w	r3, r3, #3
 800a26a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a26c:	4b85      	ldr	r3, [pc, #532]	; (800a484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a26e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a270:	091b      	lsrs	r3, r3, #4
 800a272:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a276:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a278:	4b82      	ldr	r3, [pc, #520]	; (800a484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a27a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a27c:	f003 0301 	and.w	r3, r3, #1
 800a280:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a282:	4b80      	ldr	r3, [pc, #512]	; (800a484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a286:	08db      	lsrs	r3, r3, #3
 800a288:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a28c:	68fa      	ldr	r2, [r7, #12]
 800a28e:	fb02 f303 	mul.w	r3, r2, r3
 800a292:	ee07 3a90 	vmov	s15, r3
 800a296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a29a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	f000 80e1 	beq.w	800a468 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	2b02      	cmp	r3, #2
 800a2aa:	f000 8083 	beq.w	800a3b4 <HAL_RCC_GetSysClockFreq+0x204>
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	2b02      	cmp	r3, #2
 800a2b2:	f200 80a1 	bhi.w	800a3f8 <HAL_RCC_GetSysClockFreq+0x248>
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d003      	beq.n	800a2c4 <HAL_RCC_GetSysClockFreq+0x114>
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d056      	beq.n	800a370 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a2c2:	e099      	b.n	800a3f8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2c4:	4b6f      	ldr	r3, [pc, #444]	; (800a484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f003 0320 	and.w	r3, r3, #32
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d02d      	beq.n	800a32c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a2d0:	4b6c      	ldr	r3, [pc, #432]	; (800a484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	08db      	lsrs	r3, r3, #3
 800a2d6:	f003 0303 	and.w	r3, r3, #3
 800a2da:	4a6b      	ldr	r2, [pc, #428]	; (800a488 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a2dc:	fa22 f303 	lsr.w	r3, r2, r3
 800a2e0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	ee07 3a90 	vmov	s15, r3
 800a2e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	ee07 3a90 	vmov	s15, r3
 800a2f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2fa:	4b62      	ldr	r3, [pc, #392]	; (800a484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a302:	ee07 3a90 	vmov	s15, r3
 800a306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a30a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a30e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a494 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a31a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a31e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a322:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a326:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a32a:	e087      	b.n	800a43c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	ee07 3a90 	vmov	s15, r3
 800a332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a336:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a498 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a33a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a33e:	4b51      	ldr	r3, [pc, #324]	; (800a484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a346:	ee07 3a90 	vmov	s15, r3
 800a34a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a34e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a352:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a494 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a35a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a35e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a36a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a36e:	e065      	b.n	800a43c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	ee07 3a90 	vmov	s15, r3
 800a376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a37a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a49c <HAL_RCC_GetSysClockFreq+0x2ec>
 800a37e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a382:	4b40      	ldr	r3, [pc, #256]	; (800a484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a38a:	ee07 3a90 	vmov	s15, r3
 800a38e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a392:	ed97 6a02 	vldr	s12, [r7, #8]
 800a396:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a494 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a39a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a39e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3b2:	e043      	b.n	800a43c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	ee07 3a90 	vmov	s15, r3
 800a3ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3be:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a4a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a3c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3c6:	4b2f      	ldr	r3, [pc, #188]	; (800a484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3ce:	ee07 3a90 	vmov	s15, r3
 800a3d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3d6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a3da:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a494 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a3de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3f6:	e021      	b.n	800a43c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	ee07 3a90 	vmov	s15, r3
 800a3fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a402:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a49c <HAL_RCC_GetSysClockFreq+0x2ec>
 800a406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a40a:	4b1e      	ldr	r3, [pc, #120]	; (800a484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a40c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a40e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a412:	ee07 3a90 	vmov	s15, r3
 800a416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a41a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a41e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a494 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a42a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a42e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a432:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a436:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a43a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a43c:	4b11      	ldr	r3, [pc, #68]	; (800a484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a43e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a440:	0a5b      	lsrs	r3, r3, #9
 800a442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a446:	3301      	adds	r3, #1
 800a448:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	ee07 3a90 	vmov	s15, r3
 800a450:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a454:	edd7 6a07 	vldr	s13, [r7, #28]
 800a458:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a45c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a460:	ee17 3a90 	vmov	r3, s15
 800a464:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800a466:	e005      	b.n	800a474 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800a468:	2300      	movs	r3, #0
 800a46a:	61bb      	str	r3, [r7, #24]
    break;
 800a46c:	e002      	b.n	800a474 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800a46e:	4b07      	ldr	r3, [pc, #28]	; (800a48c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a470:	61bb      	str	r3, [r7, #24]
    break;
 800a472:	bf00      	nop
  }

  return sysclockfreq;
 800a474:	69bb      	ldr	r3, [r7, #24]
}
 800a476:	4618      	mov	r0, r3
 800a478:	3724      	adds	r7, #36	; 0x24
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr
 800a482:	bf00      	nop
 800a484:	58024400 	.word	0x58024400
 800a488:	03d09000 	.word	0x03d09000
 800a48c:	003d0900 	.word	0x003d0900
 800a490:	007a1200 	.word	0x007a1200
 800a494:	46000000 	.word	0x46000000
 800a498:	4c742400 	.word	0x4c742400
 800a49c:	4a742400 	.word	0x4a742400
 800a4a0:	4af42400 	.word	0x4af42400

0800a4a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b082      	sub	sp, #8
 800a4a8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a4aa:	f7ff fe81 	bl	800a1b0 <HAL_RCC_GetSysClockFreq>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	4b10      	ldr	r3, [pc, #64]	; (800a4f4 <HAL_RCC_GetHCLKFreq+0x50>)
 800a4b2:	699b      	ldr	r3, [r3, #24]
 800a4b4:	0a1b      	lsrs	r3, r3, #8
 800a4b6:	f003 030f 	and.w	r3, r3, #15
 800a4ba:	490f      	ldr	r1, [pc, #60]	; (800a4f8 <HAL_RCC_GetHCLKFreq+0x54>)
 800a4bc:	5ccb      	ldrb	r3, [r1, r3]
 800a4be:	f003 031f 	and.w	r3, r3, #31
 800a4c2:	fa22 f303 	lsr.w	r3, r2, r3
 800a4c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a4c8:	4b0a      	ldr	r3, [pc, #40]	; (800a4f4 <HAL_RCC_GetHCLKFreq+0x50>)
 800a4ca:	699b      	ldr	r3, [r3, #24]
 800a4cc:	f003 030f 	and.w	r3, r3, #15
 800a4d0:	4a09      	ldr	r2, [pc, #36]	; (800a4f8 <HAL_RCC_GetHCLKFreq+0x54>)
 800a4d2:	5cd3      	ldrb	r3, [r2, r3]
 800a4d4:	f003 031f 	and.w	r3, r3, #31
 800a4d8:	687a      	ldr	r2, [r7, #4]
 800a4da:	fa22 f303 	lsr.w	r3, r2, r3
 800a4de:	4a07      	ldr	r2, [pc, #28]	; (800a4fc <HAL_RCC_GetHCLKFreq+0x58>)
 800a4e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a4e2:	4a07      	ldr	r2, [pc, #28]	; (800a500 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a4e8:	4b04      	ldr	r3, [pc, #16]	; (800a4fc <HAL_RCC_GetHCLKFreq+0x58>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3708      	adds	r7, #8
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	58024400 	.word	0x58024400
 800a4f8:	080131c0 	.word	0x080131c0
 800a4fc:	24000004 	.word	0x24000004
 800a500:	24000000 	.word	0x24000000

0800a504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a508:	f7ff ffcc 	bl	800a4a4 <HAL_RCC_GetHCLKFreq>
 800a50c:	4602      	mov	r2, r0
 800a50e:	4b06      	ldr	r3, [pc, #24]	; (800a528 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a510:	69db      	ldr	r3, [r3, #28]
 800a512:	091b      	lsrs	r3, r3, #4
 800a514:	f003 0307 	and.w	r3, r3, #7
 800a518:	4904      	ldr	r1, [pc, #16]	; (800a52c <HAL_RCC_GetPCLK1Freq+0x28>)
 800a51a:	5ccb      	ldrb	r3, [r1, r3]
 800a51c:	f003 031f 	and.w	r3, r3, #31
 800a520:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a524:	4618      	mov	r0, r3
 800a526:	bd80      	pop	{r7, pc}
 800a528:	58024400 	.word	0x58024400
 800a52c:	080131c0 	.word	0x080131c0

0800a530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a534:	f7ff ffb6 	bl	800a4a4 <HAL_RCC_GetHCLKFreq>
 800a538:	4602      	mov	r2, r0
 800a53a:	4b06      	ldr	r3, [pc, #24]	; (800a554 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a53c:	69db      	ldr	r3, [r3, #28]
 800a53e:	0a1b      	lsrs	r3, r3, #8
 800a540:	f003 0307 	and.w	r3, r3, #7
 800a544:	4904      	ldr	r1, [pc, #16]	; (800a558 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a546:	5ccb      	ldrb	r3, [r1, r3]
 800a548:	f003 031f 	and.w	r3, r3, #31
 800a54c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a550:	4618      	mov	r0, r3
 800a552:	bd80      	pop	{r7, pc}
 800a554:	58024400 	.word	0x58024400
 800a558:	080131c0 	.word	0x080131c0

0800a55c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b086      	sub	sp, #24
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a564:	2300      	movs	r3, #0
 800a566:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a568:	2300      	movs	r3, #0
 800a56a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a574:	2b00      	cmp	r3, #0
 800a576:	d03f      	beq.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a57c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a580:	d02a      	beq.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a582:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a586:	d824      	bhi.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a588:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a58c:	d018      	beq.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a58e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a592:	d81e      	bhi.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a594:	2b00      	cmp	r3, #0
 800a596:	d003      	beq.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a598:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a59c:	d007      	beq.n	800a5ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a59e:	e018      	b.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5a0:	4ba3      	ldr	r3, [pc, #652]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a4:	4aa2      	ldr	r2, [pc, #648]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a5a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a5ac:	e015      	b.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	3304      	adds	r3, #4
 800a5b2:	2102      	movs	r1, #2
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f001 fff9 	bl	800c5ac <RCCEx_PLL2_Config>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a5be:	e00c      	b.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	3324      	adds	r3, #36	; 0x24
 800a5c4:	2102      	movs	r1, #2
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f002 f8a2 	bl	800c710 <RCCEx_PLL3_Config>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a5d0:	e003      	b.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	75fb      	strb	r3, [r7, #23]
      break;
 800a5d6:	e000      	b.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a5d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5da:	7dfb      	ldrb	r3, [r7, #23]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d109      	bne.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a5e0:	4b93      	ldr	r3, [pc, #588]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a5e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5ec:	4990      	ldr	r1, [pc, #576]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	650b      	str	r3, [r1, #80]	; 0x50
 800a5f2:	e001      	b.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5f4:	7dfb      	ldrb	r3, [r7, #23]
 800a5f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a600:	2b00      	cmp	r3, #0
 800a602:	d03d      	beq.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a608:	2b04      	cmp	r3, #4
 800a60a:	d826      	bhi.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a60c:	a201      	add	r2, pc, #4	; (adr r2, 800a614 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800a60e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a612:	bf00      	nop
 800a614:	0800a629 	.word	0x0800a629
 800a618:	0800a637 	.word	0x0800a637
 800a61c:	0800a649 	.word	0x0800a649
 800a620:	0800a661 	.word	0x0800a661
 800a624:	0800a661 	.word	0x0800a661
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a628:	4b81      	ldr	r3, [pc, #516]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a62c:	4a80      	ldr	r2, [pc, #512]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a62e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a632:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a634:	e015      	b.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	3304      	adds	r3, #4
 800a63a:	2100      	movs	r1, #0
 800a63c:	4618      	mov	r0, r3
 800a63e:	f001 ffb5 	bl	800c5ac <RCCEx_PLL2_Config>
 800a642:	4603      	mov	r3, r0
 800a644:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a646:	e00c      	b.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	3324      	adds	r3, #36	; 0x24
 800a64c:	2100      	movs	r1, #0
 800a64e:	4618      	mov	r0, r3
 800a650:	f002 f85e 	bl	800c710 <RCCEx_PLL3_Config>
 800a654:	4603      	mov	r3, r0
 800a656:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a658:	e003      	b.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a65a:	2301      	movs	r3, #1
 800a65c:	75fb      	strb	r3, [r7, #23]
      break;
 800a65e:	e000      	b.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800a660:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a662:	7dfb      	ldrb	r3, [r7, #23]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d109      	bne.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a668:	4b71      	ldr	r3, [pc, #452]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a66a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a66c:	f023 0207 	bic.w	r2, r3, #7
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a674:	496e      	ldr	r1, [pc, #440]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a676:	4313      	orrs	r3, r2
 800a678:	650b      	str	r3, [r1, #80]	; 0x50
 800a67a:	e001      	b.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a67c:	7dfb      	ldrb	r3, [r7, #23]
 800a67e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d042      	beq.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a690:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a694:	d02b      	beq.n	800a6ee <HAL_RCCEx_PeriphCLKConfig+0x192>
 800a696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a69a:	d825      	bhi.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a69c:	2bc0      	cmp	r3, #192	; 0xc0
 800a69e:	d028      	beq.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a6a0:	2bc0      	cmp	r3, #192	; 0xc0
 800a6a2:	d821      	bhi.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a6a4:	2b80      	cmp	r3, #128	; 0x80
 800a6a6:	d016      	beq.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800a6a8:	2b80      	cmp	r3, #128	; 0x80
 800a6aa:	d81d      	bhi.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d002      	beq.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800a6b0:	2b40      	cmp	r3, #64	; 0x40
 800a6b2:	d007      	beq.n	800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800a6b4:	e018      	b.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6b6:	4b5e      	ldr	r3, [pc, #376]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ba:	4a5d      	ldr	r2, [pc, #372]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a6bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a6c2:	e017      	b.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	3304      	adds	r3, #4
 800a6c8:	2100      	movs	r1, #0
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f001 ff6e 	bl	800c5ac <RCCEx_PLL2_Config>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a6d4:	e00e      	b.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	3324      	adds	r3, #36	; 0x24
 800a6da:	2100      	movs	r1, #0
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f002 f817 	bl	800c710 <RCCEx_PLL3_Config>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a6e6:	e005      	b.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	75fb      	strb	r3, [r7, #23]
      break;
 800a6ec:	e002      	b.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a6ee:	bf00      	nop
 800a6f0:	e000      	b.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a6f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a6f4:	7dfb      	ldrb	r3, [r7, #23]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d109      	bne.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a6fa:	4b4d      	ldr	r3, [pc, #308]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a6fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6fe:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a706:	494a      	ldr	r1, [pc, #296]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a708:	4313      	orrs	r3, r2
 800a70a:	650b      	str	r3, [r1, #80]	; 0x50
 800a70c:	e001      	b.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a70e:	7dfb      	ldrb	r3, [r7, #23]
 800a710:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d049      	beq.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a724:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a728:	d030      	beq.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800a72a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a72e:	d82a      	bhi.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a730:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a734:	d02c      	beq.n	800a790 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800a736:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a73a:	d824      	bhi.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a73c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a740:	d018      	beq.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800a742:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a746:	d81e      	bhi.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d003      	beq.n	800a754 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800a74c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a750:	d007      	beq.n	800a762 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a752:	e018      	b.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a754:	4b36      	ldr	r3, [pc, #216]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a758:	4a35      	ldr	r2, [pc, #212]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a75a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a75e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a760:	e017      	b.n	800a792 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	3304      	adds	r3, #4
 800a766:	2100      	movs	r1, #0
 800a768:	4618      	mov	r0, r3
 800a76a:	f001 ff1f 	bl	800c5ac <RCCEx_PLL2_Config>
 800a76e:	4603      	mov	r3, r0
 800a770:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a772:	e00e      	b.n	800a792 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	3324      	adds	r3, #36	; 0x24
 800a778:	2100      	movs	r1, #0
 800a77a:	4618      	mov	r0, r3
 800a77c:	f001 ffc8 	bl	800c710 <RCCEx_PLL3_Config>
 800a780:	4603      	mov	r3, r0
 800a782:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a784:	e005      	b.n	800a792 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a786:	2301      	movs	r3, #1
 800a788:	75fb      	strb	r3, [r7, #23]
      break;
 800a78a:	e002      	b.n	800a792 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a78c:	bf00      	nop
 800a78e:	e000      	b.n	800a792 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a790:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a792:	7dfb      	ldrb	r3, [r7, #23]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d10a      	bne.n	800a7ae <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a798:	4b25      	ldr	r3, [pc, #148]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a79a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a79c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a7a6:	4922      	ldr	r1, [pc, #136]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	658b      	str	r3, [r1, #88]	; 0x58
 800a7ac:	e001      	b.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7ae:	7dfb      	ldrb	r3, [r7, #23]
 800a7b0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d04b      	beq.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a7c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a7c8:	d030      	beq.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800a7ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a7ce:	d82a      	bhi.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a7d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a7d4:	d02e      	beq.n	800a834 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800a7d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a7da:	d824      	bhi.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a7dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7e0:	d018      	beq.n	800a814 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800a7e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7e6:	d81e      	bhi.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d003      	beq.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a7ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a7f0:	d007      	beq.n	800a802 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a7f2:	e018      	b.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7f4:	4b0e      	ldr	r3, [pc, #56]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f8:	4a0d      	ldr	r2, [pc, #52]	; (800a830 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a7fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a800:	e019      	b.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	3304      	adds	r3, #4
 800a806:	2100      	movs	r1, #0
 800a808:	4618      	mov	r0, r3
 800a80a:	f001 fecf 	bl	800c5ac <RCCEx_PLL2_Config>
 800a80e:	4603      	mov	r3, r0
 800a810:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a812:	e010      	b.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	3324      	adds	r3, #36	; 0x24
 800a818:	2100      	movs	r1, #0
 800a81a:	4618      	mov	r0, r3
 800a81c:	f001 ff78 	bl	800c710 <RCCEx_PLL3_Config>
 800a820:	4603      	mov	r3, r0
 800a822:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a824:	e007      	b.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a826:	2301      	movs	r3, #1
 800a828:	75fb      	strb	r3, [r7, #23]
      break;
 800a82a:	e004      	b.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800a82c:	bf00      	nop
 800a82e:	e002      	b.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a830:	58024400 	.word	0x58024400
      break;
 800a834:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a836:	7dfb      	ldrb	r3, [r7, #23]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d10a      	bne.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a83c:	4b99      	ldr	r3, [pc, #612]	; (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a83e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a840:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a84a:	4996      	ldr	r1, [pc, #600]	; (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a84c:	4313      	orrs	r3, r2
 800a84e:	658b      	str	r3, [r1, #88]	; 0x58
 800a850:	e001      	b.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a852:	7dfb      	ldrb	r3, [r7, #23]
 800a854:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d032      	beq.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a866:	2b30      	cmp	r3, #48	; 0x30
 800a868:	d01c      	beq.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800a86a:	2b30      	cmp	r3, #48	; 0x30
 800a86c:	d817      	bhi.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a86e:	2b20      	cmp	r3, #32
 800a870:	d00c      	beq.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0x330>
 800a872:	2b20      	cmp	r3, #32
 800a874:	d813      	bhi.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a876:	2b00      	cmp	r3, #0
 800a878:	d016      	beq.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800a87a:	2b10      	cmp	r3, #16
 800a87c:	d10f      	bne.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a87e:	4b89      	ldr	r3, [pc, #548]	; (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a882:	4a88      	ldr	r2, [pc, #544]	; (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a888:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a88a:	e00e      	b.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	3304      	adds	r3, #4
 800a890:	2102      	movs	r1, #2
 800a892:	4618      	mov	r0, r3
 800a894:	f001 fe8a 	bl	800c5ac <RCCEx_PLL2_Config>
 800a898:	4603      	mov	r3, r0
 800a89a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a89c:	e005      	b.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	75fb      	strb	r3, [r7, #23]
      break;
 800a8a2:	e002      	b.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800a8a4:	bf00      	nop
 800a8a6:	e000      	b.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800a8a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a8aa:	7dfb      	ldrb	r3, [r7, #23]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d109      	bne.n	800a8c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a8b0:	4b7c      	ldr	r3, [pc, #496]	; (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a8b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8bc:	4979      	ldr	r1, [pc, #484]	; (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a8c2:	e001      	b.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8c4:	7dfb      	ldrb	r3, [r7, #23]
 800a8c6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d047      	beq.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8dc:	d030      	beq.n	800a940 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800a8de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8e2:	d82a      	bhi.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800a8e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a8e8:	d02c      	beq.n	800a944 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800a8ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a8ee:	d824      	bhi.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800a8f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8f4:	d018      	beq.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800a8f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8fa:	d81e      	bhi.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d003      	beq.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800a900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a904:	d007      	beq.n	800a916 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800a906:	e018      	b.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a908:	4b66      	ldr	r3, [pc, #408]	; (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a90c:	4a65      	ldr	r2, [pc, #404]	; (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a90e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a912:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a914:	e017      	b.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	3304      	adds	r3, #4
 800a91a:	2100      	movs	r1, #0
 800a91c:	4618      	mov	r0, r3
 800a91e:	f001 fe45 	bl	800c5ac <RCCEx_PLL2_Config>
 800a922:	4603      	mov	r3, r0
 800a924:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a926:	e00e      	b.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	3324      	adds	r3, #36	; 0x24
 800a92c:	2100      	movs	r1, #0
 800a92e:	4618      	mov	r0, r3
 800a930:	f001 feee 	bl	800c710 <RCCEx_PLL3_Config>
 800a934:	4603      	mov	r3, r0
 800a936:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a938:	e005      	b.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a93a:	2301      	movs	r3, #1
 800a93c:	75fb      	strb	r3, [r7, #23]
      break;
 800a93e:	e002      	b.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800a940:	bf00      	nop
 800a942:	e000      	b.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800a944:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a946:	7dfb      	ldrb	r3, [r7, #23]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d109      	bne.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a94c:	4b55      	ldr	r3, [pc, #340]	; (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a94e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a950:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a958:	4952      	ldr	r1, [pc, #328]	; (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a95a:	4313      	orrs	r3, r2
 800a95c:	650b      	str	r3, [r1, #80]	; 0x50
 800a95e:	e001      	b.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a960:	7dfb      	ldrb	r3, [r7, #23]
 800a962:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d049      	beq.n	800aa04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a978:	d02e      	beq.n	800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800a97a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a97e:	d828      	bhi.n	800a9d2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800a980:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a984:	d02a      	beq.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0x480>
 800a986:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a98a:	d822      	bhi.n	800a9d2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800a98c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a990:	d026      	beq.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800a992:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a996:	d81c      	bhi.n	800a9d2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800a998:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a99c:	d010      	beq.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800a99e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a9a2:	d816      	bhi.n	800a9d2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d01d      	beq.n	800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800a9a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9ac:	d111      	bne.n	800a9d2 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	3304      	adds	r3, #4
 800a9b2:	2101      	movs	r1, #1
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f001 fdf9 	bl	800c5ac <RCCEx_PLL2_Config>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a9be:	e012      	b.n	800a9e6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	3324      	adds	r3, #36	; 0x24
 800a9c4:	2101      	movs	r1, #1
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f001 fea2 	bl	800c710 <RCCEx_PLL3_Config>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a9d0:	e009      	b.n	800a9e6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	75fb      	strb	r3, [r7, #23]
      break;
 800a9d6:	e006      	b.n	800a9e6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800a9d8:	bf00      	nop
 800a9da:	e004      	b.n	800a9e6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800a9dc:	bf00      	nop
 800a9de:	e002      	b.n	800a9e6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800a9e0:	bf00      	nop
 800a9e2:	e000      	b.n	800a9e6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800a9e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a9e6:	7dfb      	ldrb	r3, [r7, #23]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d109      	bne.n	800aa00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a9ec:	4b2d      	ldr	r3, [pc, #180]	; (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a9ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9f0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9f8:	492a      	ldr	r1, [pc, #168]	; (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	650b      	str	r3, [r1, #80]	; 0x50
 800a9fe:	e001      	b.n	800aa04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa00:	7dfb      	ldrb	r3, [r7, #23]
 800aa02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d04d      	beq.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800aa16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa1a:	d02e      	beq.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800aa1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa20:	d828      	bhi.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800aa22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa26:	d02a      	beq.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0x522>
 800aa28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa2c:	d822      	bhi.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800aa2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aa32:	d026      	beq.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0x526>
 800aa34:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aa38:	d81c      	bhi.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800aa3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa3e:	d010      	beq.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800aa40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa44:	d816      	bhi.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d01d      	beq.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800aa4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa4e:	d111      	bne.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	3304      	adds	r3, #4
 800aa54:	2101      	movs	r1, #1
 800aa56:	4618      	mov	r0, r3
 800aa58:	f001 fda8 	bl	800c5ac <RCCEx_PLL2_Config>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800aa60:	e012      	b.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	3324      	adds	r3, #36	; 0x24
 800aa66:	2101      	movs	r1, #1
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f001 fe51 	bl	800c710 <RCCEx_PLL3_Config>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800aa72:	e009      	b.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800aa74:	2301      	movs	r3, #1
 800aa76:	75fb      	strb	r3, [r7, #23]
      break;
 800aa78:	e006      	b.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800aa7a:	bf00      	nop
 800aa7c:	e004      	b.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800aa7e:	bf00      	nop
 800aa80:	e002      	b.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800aa82:	bf00      	nop
 800aa84:	e000      	b.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800aa86:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa88:	7dfb      	ldrb	r3, [r7, #23]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d10c      	bne.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800aa8e:	4b05      	ldr	r3, [pc, #20]	; (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800aa90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa92:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800aa9c:	4901      	ldr	r1, [pc, #4]	; (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800aa9e:	4313      	orrs	r3, r2
 800aaa0:	658b      	str	r3, [r1, #88]	; 0x58
 800aaa2:	e003      	b.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x550>
 800aaa4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaa8:	7dfb      	ldrb	r3, [r7, #23]
 800aaaa:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d02f      	beq.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aabc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aac0:	d00e      	beq.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800aac2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aac6:	d814      	bhi.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d015      	beq.n	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800aacc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aad0:	d10f      	bne.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aad2:	4baf      	ldr	r3, [pc, #700]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800aad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad6:	4aae      	ldr	r2, [pc, #696]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800aad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aadc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800aade:	e00c      	b.n	800aafa <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	3304      	adds	r3, #4
 800aae4:	2101      	movs	r1, #1
 800aae6:	4618      	mov	r0, r3
 800aae8:	f001 fd60 	bl	800c5ac <RCCEx_PLL2_Config>
 800aaec:	4603      	mov	r3, r0
 800aaee:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800aaf0:	e003      	b.n	800aafa <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	75fb      	strb	r3, [r7, #23]
      break;
 800aaf6:	e000      	b.n	800aafa <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800aaf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aafa:	7dfb      	ldrb	r3, [r7, #23]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d109      	bne.n	800ab14 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ab00:	4ba3      	ldr	r3, [pc, #652]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ab02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab04:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab0c:	49a0      	ldr	r1, [pc, #640]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	650b      	str	r3, [r1, #80]	; 0x50
 800ab12:	e001      	b.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab14:	7dfb      	ldrb	r3, [r7, #23]
 800ab16:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d032      	beq.n	800ab8a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab28:	2b03      	cmp	r3, #3
 800ab2a:	d81b      	bhi.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800ab2c:	a201      	add	r2, pc, #4	; (adr r2, 800ab34 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800ab2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab32:	bf00      	nop
 800ab34:	0800ab6b 	.word	0x0800ab6b
 800ab38:	0800ab45 	.word	0x0800ab45
 800ab3c:	0800ab53 	.word	0x0800ab53
 800ab40:	0800ab6b 	.word	0x0800ab6b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab44:	4b92      	ldr	r3, [pc, #584]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ab46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab48:	4a91      	ldr	r2, [pc, #580]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ab4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ab50:	e00c      	b.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	3304      	adds	r3, #4
 800ab56:	2102      	movs	r1, #2
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f001 fd27 	bl	800c5ac <RCCEx_PLL2_Config>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ab62:	e003      	b.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800ab64:	2301      	movs	r3, #1
 800ab66:	75fb      	strb	r3, [r7, #23]
      break;
 800ab68:	e000      	b.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800ab6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab6c:	7dfb      	ldrb	r3, [r7, #23]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d109      	bne.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ab72:	4b87      	ldr	r3, [pc, #540]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ab74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab76:	f023 0203 	bic.w	r2, r3, #3
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab7e:	4984      	ldr	r1, [pc, #528]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ab80:	4313      	orrs	r3, r2
 800ab82:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ab84:	e001      	b.n	800ab8a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab86:	7dfb      	ldrb	r3, [r7, #23]
 800ab88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	f000 8086 	beq.w	800aca4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ab98:	4b7e      	ldr	r3, [pc, #504]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	4a7d      	ldr	r2, [pc, #500]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800ab9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aba2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aba4:	f7f7 fd7c 	bl	80026a0 <HAL_GetTick>
 800aba8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800abaa:	e009      	b.n	800abc0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800abac:	f7f7 fd78 	bl	80026a0 <HAL_GetTick>
 800abb0:	4602      	mov	r2, r0
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	1ad3      	subs	r3, r2, r3
 800abb6:	2b64      	cmp	r3, #100	; 0x64
 800abb8:	d902      	bls.n	800abc0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800abba:	2303      	movs	r3, #3
 800abbc:	75fb      	strb	r3, [r7, #23]
        break;
 800abbe:	e005      	b.n	800abcc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800abc0:	4b74      	ldr	r3, [pc, #464]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d0ef      	beq.n	800abac <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800abcc:	7dfb      	ldrb	r3, [r7, #23]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d166      	bne.n	800aca0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800abd2:	4b6f      	ldr	r3, [pc, #444]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800abd4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800abdc:	4053      	eors	r3, r2
 800abde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d013      	beq.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800abe6:	4b6a      	ldr	r3, [pc, #424]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800abe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abee:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800abf0:	4b67      	ldr	r3, [pc, #412]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800abf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abf4:	4a66      	ldr	r2, [pc, #408]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800abf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800abfa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800abfc:	4b64      	ldr	r3, [pc, #400]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800abfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac00:	4a63      	ldr	r2, [pc, #396]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ac02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac06:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ac08:	4a61      	ldr	r2, [pc, #388]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ac14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac18:	d115      	bne.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac1a:	f7f7 fd41 	bl	80026a0 <HAL_GetTick>
 800ac1e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac20:	e00b      	b.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac22:	f7f7 fd3d 	bl	80026a0 <HAL_GetTick>
 800ac26:	4602      	mov	r2, r0
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	1ad3      	subs	r3, r2, r3
 800ac2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d902      	bls.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800ac34:	2303      	movs	r3, #3
 800ac36:	75fb      	strb	r3, [r7, #23]
            break;
 800ac38:	e005      	b.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac3a:	4b55      	ldr	r3, [pc, #340]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ac3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac3e:	f003 0302 	and.w	r3, r3, #2
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d0ed      	beq.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800ac46:	7dfb      	ldrb	r3, [r7, #23]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d126      	bne.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ac52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac5a:	d10d      	bne.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800ac5c:	4b4c      	ldr	r3, [pc, #304]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ac5e:	691b      	ldr	r3, [r3, #16]
 800ac60:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ac6a:	0919      	lsrs	r1, r3, #4
 800ac6c:	4b4a      	ldr	r3, [pc, #296]	; (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800ac6e:	400b      	ands	r3, r1
 800ac70:	4947      	ldr	r1, [pc, #284]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ac72:	4313      	orrs	r3, r2
 800ac74:	610b      	str	r3, [r1, #16]
 800ac76:	e005      	b.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800ac78:	4b45      	ldr	r3, [pc, #276]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ac7a:	691b      	ldr	r3, [r3, #16]
 800ac7c:	4a44      	ldr	r2, [pc, #272]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ac7e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ac82:	6113      	str	r3, [r2, #16]
 800ac84:	4b42      	ldr	r3, [pc, #264]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ac86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ac8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac92:	493f      	ldr	r1, [pc, #252]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ac94:	4313      	orrs	r3, r2
 800ac96:	670b      	str	r3, [r1, #112]	; 0x70
 800ac98:	e004      	b.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ac9a:	7dfb      	ldrb	r3, [r7, #23]
 800ac9c:	75bb      	strb	r3, [r7, #22]
 800ac9e:	e001      	b.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aca0:	7dfb      	ldrb	r3, [r7, #23]
 800aca2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f003 0301 	and.w	r3, r3, #1
 800acac:	2b00      	cmp	r3, #0
 800acae:	f000 8085 	beq.w	800adbc <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acb6:	2b28      	cmp	r3, #40	; 0x28
 800acb8:	d866      	bhi.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800acba:	a201      	add	r2, pc, #4	; (adr r2, 800acc0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800acbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acc0:	0800ad9d 	.word	0x0800ad9d
 800acc4:	0800ad89 	.word	0x0800ad89
 800acc8:	0800ad89 	.word	0x0800ad89
 800accc:	0800ad89 	.word	0x0800ad89
 800acd0:	0800ad89 	.word	0x0800ad89
 800acd4:	0800ad89 	.word	0x0800ad89
 800acd8:	0800ad89 	.word	0x0800ad89
 800acdc:	0800ad89 	.word	0x0800ad89
 800ace0:	0800ad65 	.word	0x0800ad65
 800ace4:	0800ad89 	.word	0x0800ad89
 800ace8:	0800ad89 	.word	0x0800ad89
 800acec:	0800ad89 	.word	0x0800ad89
 800acf0:	0800ad89 	.word	0x0800ad89
 800acf4:	0800ad89 	.word	0x0800ad89
 800acf8:	0800ad89 	.word	0x0800ad89
 800acfc:	0800ad89 	.word	0x0800ad89
 800ad00:	0800ad77 	.word	0x0800ad77
 800ad04:	0800ad89 	.word	0x0800ad89
 800ad08:	0800ad89 	.word	0x0800ad89
 800ad0c:	0800ad89 	.word	0x0800ad89
 800ad10:	0800ad89 	.word	0x0800ad89
 800ad14:	0800ad89 	.word	0x0800ad89
 800ad18:	0800ad89 	.word	0x0800ad89
 800ad1c:	0800ad89 	.word	0x0800ad89
 800ad20:	0800ad9d 	.word	0x0800ad9d
 800ad24:	0800ad89 	.word	0x0800ad89
 800ad28:	0800ad89 	.word	0x0800ad89
 800ad2c:	0800ad89 	.word	0x0800ad89
 800ad30:	0800ad89 	.word	0x0800ad89
 800ad34:	0800ad89 	.word	0x0800ad89
 800ad38:	0800ad89 	.word	0x0800ad89
 800ad3c:	0800ad89 	.word	0x0800ad89
 800ad40:	0800ad9d 	.word	0x0800ad9d
 800ad44:	0800ad89 	.word	0x0800ad89
 800ad48:	0800ad89 	.word	0x0800ad89
 800ad4c:	0800ad89 	.word	0x0800ad89
 800ad50:	0800ad89 	.word	0x0800ad89
 800ad54:	0800ad89 	.word	0x0800ad89
 800ad58:	0800ad89 	.word	0x0800ad89
 800ad5c:	0800ad89 	.word	0x0800ad89
 800ad60:	0800ad9d 	.word	0x0800ad9d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	3304      	adds	r3, #4
 800ad68:	2101      	movs	r1, #1
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f001 fc1e 	bl	800c5ac <RCCEx_PLL2_Config>
 800ad70:	4603      	mov	r3, r0
 800ad72:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ad74:	e013      	b.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	3324      	adds	r3, #36	; 0x24
 800ad7a:	2101      	movs	r1, #1
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f001 fcc7 	bl	800c710 <RCCEx_PLL3_Config>
 800ad82:	4603      	mov	r3, r0
 800ad84:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ad86:	e00a      	b.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	75fb      	strb	r3, [r7, #23]
      break;
 800ad8c:	e007      	b.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0x842>
 800ad8e:	bf00      	nop
 800ad90:	58024400 	.word	0x58024400
 800ad94:	58024800 	.word	0x58024800
 800ad98:	00ffffcf 	.word	0x00ffffcf
      break;
 800ad9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad9e:	7dfb      	ldrb	r3, [r7, #23]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d109      	bne.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ada4:	4b96      	ldr	r3, [pc, #600]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ada6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ada8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800adb0:	4993      	ldr	r1, [pc, #588]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800adb2:	4313      	orrs	r3, r2
 800adb4:	654b      	str	r3, [r1, #84]	; 0x54
 800adb6:	e001      	b.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adb8:	7dfb      	ldrb	r3, [r7, #23]
 800adba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f003 0302 	and.w	r3, r3, #2
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d038      	beq.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adcc:	2b05      	cmp	r3, #5
 800adce:	d821      	bhi.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800add0:	a201      	add	r2, pc, #4	; (adr r2, 800add8 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800add2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add6:	bf00      	nop
 800add8:	0800ae1b 	.word	0x0800ae1b
 800addc:	0800adf1 	.word	0x0800adf1
 800ade0:	0800ae03 	.word	0x0800ae03
 800ade4:	0800ae1b 	.word	0x0800ae1b
 800ade8:	0800ae1b 	.word	0x0800ae1b
 800adec:	0800ae1b 	.word	0x0800ae1b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	3304      	adds	r3, #4
 800adf4:	2101      	movs	r1, #1
 800adf6:	4618      	mov	r0, r3
 800adf8:	f001 fbd8 	bl	800c5ac <RCCEx_PLL2_Config>
 800adfc:	4603      	mov	r3, r0
 800adfe:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ae00:	e00c      	b.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	3324      	adds	r3, #36	; 0x24
 800ae06:	2101      	movs	r1, #1
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f001 fc81 	bl	800c710 <RCCEx_PLL3_Config>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ae12:	e003      	b.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae14:	2301      	movs	r3, #1
 800ae16:	75fb      	strb	r3, [r7, #23]
      break;
 800ae18:	e000      	b.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800ae1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae1c:	7dfb      	ldrb	r3, [r7, #23]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d109      	bne.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ae22:	4b77      	ldr	r3, [pc, #476]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ae24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae26:	f023 0207 	bic.w	r2, r3, #7
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae2e:	4974      	ldr	r1, [pc, #464]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ae30:	4313      	orrs	r3, r2
 800ae32:	654b      	str	r3, [r1, #84]	; 0x54
 800ae34:	e001      	b.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae36:	7dfb      	ldrb	r3, [r7, #23]
 800ae38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f003 0304 	and.w	r3, r3, #4
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d03a      	beq.n	800aebc <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae4c:	2b05      	cmp	r3, #5
 800ae4e:	d821      	bhi.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800ae50:	a201      	add	r2, pc, #4	; (adr r2, 800ae58 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800ae52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae56:	bf00      	nop
 800ae58:	0800ae9b 	.word	0x0800ae9b
 800ae5c:	0800ae71 	.word	0x0800ae71
 800ae60:	0800ae83 	.word	0x0800ae83
 800ae64:	0800ae9b 	.word	0x0800ae9b
 800ae68:	0800ae9b 	.word	0x0800ae9b
 800ae6c:	0800ae9b 	.word	0x0800ae9b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	3304      	adds	r3, #4
 800ae74:	2101      	movs	r1, #1
 800ae76:	4618      	mov	r0, r3
 800ae78:	f001 fb98 	bl	800c5ac <RCCEx_PLL2_Config>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800ae80:	e00c      	b.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	3324      	adds	r3, #36	; 0x24
 800ae86:	2101      	movs	r1, #1
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f001 fc41 	bl	800c710 <RCCEx_PLL3_Config>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800ae92:	e003      	b.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae94:	2301      	movs	r3, #1
 800ae96:	75fb      	strb	r3, [r7, #23]
      break;
 800ae98:	e000      	b.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800ae9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae9c:	7dfb      	ldrb	r3, [r7, #23]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d10a      	bne.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800aea2:	4b57      	ldr	r3, [pc, #348]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800aea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aea6:	f023 0207 	bic.w	r2, r3, #7
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aeb0:	4953      	ldr	r1, [pc, #332]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	658b      	str	r3, [r1, #88]	; 0x58
 800aeb6:	e001      	b.n	800aebc <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeb8:	7dfb      	ldrb	r3, [r7, #23]
 800aeba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f003 0320 	and.w	r3, r3, #32
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d04b      	beq.n	800af60 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aece:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aed2:	d02e      	beq.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800aed4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aed8:	d828      	bhi.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800aeda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aede:	d02a      	beq.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800aee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aee4:	d822      	bhi.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800aee6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aeea:	d026      	beq.n	800af3a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800aeec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aef0:	d81c      	bhi.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800aef2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aef6:	d010      	beq.n	800af1a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800aef8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aefc:	d816      	bhi.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d01d      	beq.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800af02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af06:	d111      	bne.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	3304      	adds	r3, #4
 800af0c:	2100      	movs	r1, #0
 800af0e:	4618      	mov	r0, r3
 800af10:	f001 fb4c 	bl	800c5ac <RCCEx_PLL2_Config>
 800af14:	4603      	mov	r3, r0
 800af16:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800af18:	e012      	b.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	3324      	adds	r3, #36	; 0x24
 800af1e:	2102      	movs	r1, #2
 800af20:	4618      	mov	r0, r3
 800af22:	f001 fbf5 	bl	800c710 <RCCEx_PLL3_Config>
 800af26:	4603      	mov	r3, r0
 800af28:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800af2a:	e009      	b.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800af2c:	2301      	movs	r3, #1
 800af2e:	75fb      	strb	r3, [r7, #23]
      break;
 800af30:	e006      	b.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800af32:	bf00      	nop
 800af34:	e004      	b.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800af36:	bf00      	nop
 800af38:	e002      	b.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800af3a:	bf00      	nop
 800af3c:	e000      	b.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800af3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af40:	7dfb      	ldrb	r3, [r7, #23]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d10a      	bne.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800af46:	4b2e      	ldr	r3, [pc, #184]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800af48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af4a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af54:	492a      	ldr	r1, [pc, #168]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800af56:	4313      	orrs	r3, r2
 800af58:	654b      	str	r3, [r1, #84]	; 0x54
 800af5a:	e001      	b.n	800af60 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af5c:	7dfb      	ldrb	r3, [r7, #23]
 800af5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d04d      	beq.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800af72:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800af76:	d02e      	beq.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800af78:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800af7c:	d828      	bhi.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800af7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af82:	d02a      	beq.n	800afda <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800af84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af88:	d822      	bhi.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800af8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800af8e:	d026      	beq.n	800afde <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800af90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800af94:	d81c      	bhi.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800af96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af9a:	d010      	beq.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800af9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800afa0:	d816      	bhi.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d01d      	beq.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800afa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afaa:	d111      	bne.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	3304      	adds	r3, #4
 800afb0:	2100      	movs	r1, #0
 800afb2:	4618      	mov	r0, r3
 800afb4:	f001 fafa 	bl	800c5ac <RCCEx_PLL2_Config>
 800afb8:	4603      	mov	r3, r0
 800afba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800afbc:	e012      	b.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	3324      	adds	r3, #36	; 0x24
 800afc2:	2102      	movs	r1, #2
 800afc4:	4618      	mov	r0, r3
 800afc6:	f001 fba3 	bl	800c710 <RCCEx_PLL3_Config>
 800afca:	4603      	mov	r3, r0
 800afcc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800afce:	e009      	b.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800afd0:	2301      	movs	r3, #1
 800afd2:	75fb      	strb	r3, [r7, #23]
      break;
 800afd4:	e006      	b.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800afd6:	bf00      	nop
 800afd8:	e004      	b.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800afda:	bf00      	nop
 800afdc:	e002      	b.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800afde:	bf00      	nop
 800afe0:	e000      	b.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800afe2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800afe4:	7dfb      	ldrb	r3, [r7, #23]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d10c      	bne.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800afea:	4b05      	ldr	r3, [pc, #20]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800afec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afee:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aff8:	4901      	ldr	r1, [pc, #4]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800affa:	4313      	orrs	r3, r2
 800affc:	658b      	str	r3, [r1, #88]	; 0x58
 800affe:	e003      	b.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800b000:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b004:	7dfb      	ldrb	r3, [r7, #23]
 800b006:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b010:	2b00      	cmp	r3, #0
 800b012:	d04b      	beq.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b01a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b01e:	d02e      	beq.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800b020:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b024:	d828      	bhi.n	800b078 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b026:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b02a:	d02a      	beq.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800b02c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b030:	d822      	bhi.n	800b078 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b032:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b036:	d026      	beq.n	800b086 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800b038:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b03c:	d81c      	bhi.n	800b078 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b03e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b042:	d010      	beq.n	800b066 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800b044:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b048:	d816      	bhi.n	800b078 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d01d      	beq.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800b04e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b052:	d111      	bne.n	800b078 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	3304      	adds	r3, #4
 800b058:	2100      	movs	r1, #0
 800b05a:	4618      	mov	r0, r3
 800b05c:	f001 faa6 	bl	800c5ac <RCCEx_PLL2_Config>
 800b060:	4603      	mov	r3, r0
 800b062:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b064:	e012      	b.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	3324      	adds	r3, #36	; 0x24
 800b06a:	2102      	movs	r1, #2
 800b06c:	4618      	mov	r0, r3
 800b06e:	f001 fb4f 	bl	800c710 <RCCEx_PLL3_Config>
 800b072:	4603      	mov	r3, r0
 800b074:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b076:	e009      	b.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b078:	2301      	movs	r3, #1
 800b07a:	75fb      	strb	r3, [r7, #23]
      break;
 800b07c:	e006      	b.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b07e:	bf00      	nop
 800b080:	e004      	b.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b082:	bf00      	nop
 800b084:	e002      	b.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b086:	bf00      	nop
 800b088:	e000      	b.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b08a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b08c:	7dfb      	ldrb	r3, [r7, #23]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d10a      	bne.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b092:	4b9d      	ldr	r3, [pc, #628]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b096:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b0a0:	4999      	ldr	r1, [pc, #612]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	658b      	str	r3, [r1, #88]	; 0x58
 800b0a6:	e001      	b.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0a8:	7dfb      	ldrb	r3, [r7, #23]
 800b0aa:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f003 0308 	and.w	r3, r3, #8
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d01a      	beq.n	800b0ee <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0c2:	d10a      	bne.n	800b0da <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	3324      	adds	r3, #36	; 0x24
 800b0c8:	2102      	movs	r1, #2
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f001 fb20 	bl	800c710 <RCCEx_PLL3_Config>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d001      	beq.n	800b0da <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b0da:	4b8b      	ldr	r3, [pc, #556]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b0dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0e8:	4987      	ldr	r1, [pc, #540]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f003 0310 	and.w	r3, r3, #16
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d01a      	beq.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b104:	d10a      	bne.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	3324      	adds	r3, #36	; 0x24
 800b10a:	2102      	movs	r1, #2
 800b10c:	4618      	mov	r0, r3
 800b10e:	f001 faff 	bl	800c710 <RCCEx_PLL3_Config>
 800b112:	4603      	mov	r3, r0
 800b114:	2b00      	cmp	r3, #0
 800b116:	d001      	beq.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800b118:	2301      	movs	r3, #1
 800b11a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b11c:	4b7a      	ldr	r3, [pc, #488]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b11e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b120:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b12a:	4977      	ldr	r1, [pc, #476]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b12c:	4313      	orrs	r3, r2
 800b12e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d034      	beq.n	800b1a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b142:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b146:	d01d      	beq.n	800b184 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800b148:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b14c:	d817      	bhi.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d003      	beq.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800b152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b156:	d009      	beq.n	800b16c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800b158:	e011      	b.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	3304      	adds	r3, #4
 800b15e:	2100      	movs	r1, #0
 800b160:	4618      	mov	r0, r3
 800b162:	f001 fa23 	bl	800c5ac <RCCEx_PLL2_Config>
 800b166:	4603      	mov	r3, r0
 800b168:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b16a:	e00c      	b.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	3324      	adds	r3, #36	; 0x24
 800b170:	2102      	movs	r1, #2
 800b172:	4618      	mov	r0, r3
 800b174:	f001 facc 	bl	800c710 <RCCEx_PLL3_Config>
 800b178:	4603      	mov	r3, r0
 800b17a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b17c:	e003      	b.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b17e:	2301      	movs	r3, #1
 800b180:	75fb      	strb	r3, [r7, #23]
      break;
 800b182:	e000      	b.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800b184:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b186:	7dfb      	ldrb	r3, [r7, #23]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d10a      	bne.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b18c:	4b5e      	ldr	r3, [pc, #376]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b18e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b190:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b19a:	495b      	ldr	r1, [pc, #364]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b19c:	4313      	orrs	r3, r2
 800b19e:	658b      	str	r3, [r1, #88]	; 0x58
 800b1a0:	e001      	b.n	800b1a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1a2:	7dfb      	ldrb	r3, [r7, #23]
 800b1a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d033      	beq.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b1b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b1bc:	d01c      	beq.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800b1be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b1c2:	d816      	bhi.n	800b1f2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800b1c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1c8:	d003      	beq.n	800b1d2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800b1ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b1ce:	d007      	beq.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800b1d0:	e00f      	b.n	800b1f2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1d2:	4b4d      	ldr	r3, [pc, #308]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b1d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d6:	4a4c      	ldr	r2, [pc, #304]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b1d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b1de:	e00c      	b.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	3324      	adds	r3, #36	; 0x24
 800b1e4:	2101      	movs	r1, #1
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f001 fa92 	bl	800c710 <RCCEx_PLL3_Config>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b1f0:	e003      	b.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	75fb      	strb	r3, [r7, #23]
      break;
 800b1f6:	e000      	b.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800b1f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b1fa:	7dfb      	ldrb	r3, [r7, #23]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d10a      	bne.n	800b216 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b200:	4b41      	ldr	r3, [pc, #260]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b204:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b20e:	493e      	ldr	r1, [pc, #248]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b210:	4313      	orrs	r3, r2
 800b212:	654b      	str	r3, [r1, #84]	; 0x54
 800b214:	e001      	b.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b216:	7dfb      	ldrb	r3, [r7, #23]
 800b218:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b222:	2b00      	cmp	r3, #0
 800b224:	d029      	beq.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d003      	beq.n	800b236 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800b22e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b232:	d007      	beq.n	800b244 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800b234:	e00f      	b.n	800b256 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b236:	4b34      	ldr	r3, [pc, #208]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23a:	4a33      	ldr	r2, [pc, #204]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b23c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b240:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b242:	e00b      	b.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	3304      	adds	r3, #4
 800b248:	2102      	movs	r1, #2
 800b24a:	4618      	mov	r0, r3
 800b24c:	f001 f9ae 	bl	800c5ac <RCCEx_PLL2_Config>
 800b250:	4603      	mov	r3, r0
 800b252:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b254:	e002      	b.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800b256:	2301      	movs	r3, #1
 800b258:	75fb      	strb	r3, [r7, #23]
      break;
 800b25a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b25c:	7dfb      	ldrb	r3, [r7, #23]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d109      	bne.n	800b276 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b262:	4b29      	ldr	r3, [pc, #164]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b266:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b26e:	4926      	ldr	r1, [pc, #152]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b270:	4313      	orrs	r3, r2
 800b272:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b274:	e001      	b.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b276:	7dfb      	ldrb	r3, [r7, #23]
 800b278:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b282:	2b00      	cmp	r3, #0
 800b284:	d00a      	beq.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	3324      	adds	r3, #36	; 0x24
 800b28a:	2102      	movs	r1, #2
 800b28c:	4618      	mov	r0, r3
 800b28e:	f001 fa3f 	bl	800c710 <RCCEx_PLL3_Config>
 800b292:	4603      	mov	r3, r0
 800b294:	2b00      	cmp	r3, #0
 800b296:	d001      	beq.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800b298:	2301      	movs	r3, #1
 800b29a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d033      	beq.n	800b310 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b2b0:	d017      	beq.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800b2b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b2b6:	d811      	bhi.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800b2b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2bc:	d013      	beq.n	800b2e6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800b2be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2c2:	d80b      	bhi.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d010      	beq.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800b2c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2cc:	d106      	bne.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2ce:	4b0e      	ldr	r3, [pc, #56]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b2d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d2:	4a0d      	ldr	r2, [pc, #52]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b2d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b2da:	e007      	b.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	75fb      	strb	r3, [r7, #23]
      break;
 800b2e0:	e004      	b.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800b2e2:	bf00      	nop
 800b2e4:	e002      	b.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800b2e6:	bf00      	nop
 800b2e8:	e000      	b.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800b2ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b2ec:	7dfb      	ldrb	r3, [r7, #23]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d10c      	bne.n	800b30c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b2f2:	4b05      	ldr	r3, [pc, #20]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b2f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2fe:	4902      	ldr	r1, [pc, #8]	; (800b308 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b300:	4313      	orrs	r3, r2
 800b302:	654b      	str	r3, [r1, #84]	; 0x54
 800b304:	e004      	b.n	800b310 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800b306:	bf00      	nop
 800b308:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b30c:	7dfb      	ldrb	r3, [r7, #23]
 800b30e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d008      	beq.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b31c:	4b31      	ldr	r3, [pc, #196]	; (800b3e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b31e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b320:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b328:	492e      	ldr	r1, [pc, #184]	; (800b3e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b32a:	4313      	orrs	r3, r2
 800b32c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b336:	2b00      	cmp	r3, #0
 800b338:	d009      	beq.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b33a:	4b2a      	ldr	r3, [pc, #168]	; (800b3e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b33c:	691b      	ldr	r3, [r3, #16]
 800b33e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b348:	4926      	ldr	r1, [pc, #152]	; (800b3e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b34a:	4313      	orrs	r3, r2
 800b34c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b356:	2b00      	cmp	r3, #0
 800b358:	d008      	beq.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b35a:	4b22      	ldr	r3, [pc, #136]	; (800b3e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b35c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b35e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b366:	491f      	ldr	r1, [pc, #124]	; (800b3e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b368:	4313      	orrs	r3, r2
 800b36a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b374:	2b00      	cmp	r3, #0
 800b376:	d00d      	beq.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b378:	4b1a      	ldr	r3, [pc, #104]	; (800b3e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b37a:	691b      	ldr	r3, [r3, #16]
 800b37c:	4a19      	ldr	r2, [pc, #100]	; (800b3e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b37e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b382:	6113      	str	r3, [r2, #16]
 800b384:	4b17      	ldr	r3, [pc, #92]	; (800b3e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b386:	691a      	ldr	r2, [r3, #16]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b38e:	4915      	ldr	r1, [pc, #84]	; (800b3e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b390:	4313      	orrs	r3, r2
 800b392:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	da08      	bge.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b39c:	4b11      	ldr	r3, [pc, #68]	; (800b3e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b39e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3a8:	490e      	ldr	r1, [pc, #56]	; (800b3e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b3aa:	4313      	orrs	r3, r2
 800b3ac:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d009      	beq.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b3ba:	4b0a      	ldr	r3, [pc, #40]	; (800b3e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b3bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3c8:	4906      	ldr	r1, [pc, #24]	; (800b3e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800b3ce:	7dbb      	ldrb	r3, [r7, #22]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d101      	bne.n	800b3d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	e000      	b.n	800b3da <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800b3d8:	2301      	movs	r3, #1
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3718      	adds	r7, #24
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	58024400 	.word	0x58024400

0800b3e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b090      	sub	sp, #64	; 0x40
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3f6:	f040 8095 	bne.w	800b524 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800b3fa:	4b97      	ldr	r3, [pc, #604]	; (800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b3fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3fe:	f003 0307 	and.w	r3, r3, #7
 800b402:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b406:	2b04      	cmp	r3, #4
 800b408:	f200 8088 	bhi.w	800b51c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800b40c:	a201      	add	r2, pc, #4	; (adr r2, 800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800b40e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b412:	bf00      	nop
 800b414:	0800b429 	.word	0x0800b429
 800b418:	0800b451 	.word	0x0800b451
 800b41c:	0800b479 	.word	0x0800b479
 800b420:	0800b515 	.word	0x0800b515
 800b424:	0800b4a1 	.word	0x0800b4a1
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b428:	4b8b      	ldr	r3, [pc, #556]	; (800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b430:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b434:	d108      	bne.n	800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b43a:	4618      	mov	r0, r3
 800b43c:	f000 ff64 	bl	800c308 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800b440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b442:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b444:	f000 bc94 	b.w	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b448:	2300      	movs	r3, #0
 800b44a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b44c:	f000 bc90 	b.w	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b450:	4b81      	ldr	r3, [pc, #516]	; (800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b458:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b45c:	d108      	bne.n	800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b45e:	f107 0318 	add.w	r3, r7, #24
 800b462:	4618      	mov	r0, r3
 800b464:	f000 fca8 	bl	800bdb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b468:	69bb      	ldr	r3, [r7, #24]
 800b46a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b46c:	f000 bc80 	b.w	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b470:	2300      	movs	r3, #0
 800b472:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b474:	f000 bc7c 	b.w	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b478:	4b77      	ldr	r3, [pc, #476]	; (800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b480:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b484:	d108      	bne.n	800b498 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b486:	f107 030c 	add.w	r3, r7, #12
 800b48a:	4618      	mov	r0, r3
 800b48c:	f000 fde8 	bl	800c060 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b494:	f000 bc6c 	b.w	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b498:	2300      	movs	r3, #0
 800b49a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b49c:	f000 bc68 	b.w	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b4a0:	4b6d      	ldr	r3, [pc, #436]	; (800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b4a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b4a8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b4aa:	4b6b      	ldr	r3, [pc, #428]	; (800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f003 0304 	and.w	r3, r3, #4
 800b4b2:	2b04      	cmp	r3, #4
 800b4b4:	d10c      	bne.n	800b4d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800b4b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d109      	bne.n	800b4d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b4bc:	4b66      	ldr	r3, [pc, #408]	; (800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	08db      	lsrs	r3, r3, #3
 800b4c2:	f003 0303 	and.w	r3, r3, #3
 800b4c6:	4a65      	ldr	r2, [pc, #404]	; (800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b4c8:	fa22 f303 	lsr.w	r3, r2, r3
 800b4cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4ce:	e01f      	b.n	800b510 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b4d0:	4b61      	ldr	r3, [pc, #388]	; (800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4dc:	d106      	bne.n	800b4ec <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800b4de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4e4:	d102      	bne.n	800b4ec <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b4e6:	4b5e      	ldr	r3, [pc, #376]	; (800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4ea:	e011      	b.n	800b510 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b4ec:	4b5a      	ldr	r3, [pc, #360]	; (800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4f8:	d106      	bne.n	800b508 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800b4fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b500:	d102      	bne.n	800b508 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b502:	4b58      	ldr	r3, [pc, #352]	; (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b504:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b506:	e003      	b.n	800b510 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b508:	2300      	movs	r3, #0
 800b50a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b50c:	f000 bc30 	b.w	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b510:	f000 bc2e 	b.w	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b514:	4b54      	ldr	r3, [pc, #336]	; (800b668 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800b516:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b518:	f000 bc2a 	b.w	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800b51c:	2300      	movs	r3, #0
 800b51e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b520:	f000 bc26 	b.w	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b52a:	f040 809f 	bne.w	800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800b52e:	4b4a      	ldr	r3, [pc, #296]	; (800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b532:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b536:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b53e:	d04d      	beq.n	800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800b540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b546:	f200 8084 	bhi.w	800b652 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800b54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b54c:	2bc0      	cmp	r3, #192	; 0xc0
 800b54e:	d07d      	beq.n	800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800b550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b552:	2bc0      	cmp	r3, #192	; 0xc0
 800b554:	d87d      	bhi.n	800b652 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800b556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b558:	2b80      	cmp	r3, #128	; 0x80
 800b55a:	d02d      	beq.n	800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800b55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b55e:	2b80      	cmp	r3, #128	; 0x80
 800b560:	d877      	bhi.n	800b652 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800b562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b564:	2b00      	cmp	r3, #0
 800b566:	d003      	beq.n	800b570 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800b568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b56a:	2b40      	cmp	r3, #64	; 0x40
 800b56c:	d012      	beq.n	800b594 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800b56e:	e070      	b.n	800b652 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b570:	4b39      	ldr	r3, [pc, #228]	; (800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b578:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b57c:	d107      	bne.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b57e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b582:	4618      	mov	r0, r3
 800b584:	f000 fec0 	bl	800c308 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b58a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b58c:	e3f0      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b58e:	2300      	movs	r3, #0
 800b590:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b592:	e3ed      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b594:	4b30      	ldr	r3, [pc, #192]	; (800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b59c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b5a0:	d107      	bne.n	800b5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5a2:	f107 0318 	add.w	r3, r7, #24
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f000 fc06 	bl	800bdb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b5ac:	69bb      	ldr	r3, [r7, #24]
 800b5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b5b0:	e3de      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5b6:	e3db      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b5b8:	4b27      	ldr	r3, [pc, #156]	; (800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5c4:	d107      	bne.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5c6:	f107 030c 	add.w	r3, r7, #12
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f000 fd48 	bl	800c060 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b5d4:	e3cc      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5da:	e3c9      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b5dc:	4b1e      	ldr	r3, [pc, #120]	; (800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b5de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b5e4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b5e6:	4b1c      	ldr	r3, [pc, #112]	; (800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f003 0304 	and.w	r3, r3, #4
 800b5ee:	2b04      	cmp	r3, #4
 800b5f0:	d10c      	bne.n	800b60c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800b5f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d109      	bne.n	800b60c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b5f8:	4b17      	ldr	r3, [pc, #92]	; (800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	08db      	lsrs	r3, r3, #3
 800b5fe:	f003 0303 	and.w	r3, r3, #3
 800b602:	4a16      	ldr	r2, [pc, #88]	; (800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b604:	fa22 f303 	lsr.w	r3, r2, r3
 800b608:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b60a:	e01e      	b.n	800b64a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b60c:	4b12      	ldr	r3, [pc, #72]	; (800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b618:	d106      	bne.n	800b628 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800b61a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b61c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b620:	d102      	bne.n	800b628 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b622:	4b0f      	ldr	r3, [pc, #60]	; (800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b624:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b626:	e010      	b.n	800b64a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b628:	4b0b      	ldr	r3, [pc, #44]	; (800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b630:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b634:	d106      	bne.n	800b644 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800b636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b638:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b63c:	d102      	bne.n	800b644 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b63e:	4b09      	ldr	r3, [pc, #36]	; (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b640:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b642:	e002      	b.n	800b64a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b644:	2300      	movs	r3, #0
 800b646:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b648:	e392      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b64a:	e391      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b64c:	4b06      	ldr	r3, [pc, #24]	; (800b668 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800b64e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b650:	e38e      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800b652:	2300      	movs	r3, #0
 800b654:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b656:	e38b      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b658:	58024400 	.word	0x58024400
 800b65c:	03d09000 	.word	0x03d09000
 800b660:	003d0900 	.word	0x003d0900
 800b664:	007a1200 	.word	0x007a1200
 800b668:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b672:	f040 809c 	bne.w	800b7ae <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800b676:	4b9d      	ldr	r3, [pc, #628]	; (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b67a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b67e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b682:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b686:	d054      	beq.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800b688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b68e:	f200 808b 	bhi.w	800b7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800b692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b694:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b698:	f000 8083 	beq.w	800b7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800b69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b6a2:	f200 8081 	bhi.w	800b7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800b6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b6ac:	d02f      	beq.n	800b70e <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800b6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b6b4:	d878      	bhi.n	800b7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800b6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d004      	beq.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800b6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b6c2:	d012      	beq.n	800b6ea <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800b6c4:	e070      	b.n	800b7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b6c6:	4b89      	ldr	r3, [pc, #548]	; (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6d2:	d107      	bne.n	800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b6d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f000 fe15 	bl	800c308 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b6e2:	e345      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6e8:	e342      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b6ea:	4b80      	ldr	r3, [pc, #512]	; (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b6f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b6f6:	d107      	bne.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6f8:	f107 0318 	add.w	r3, r7, #24
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f000 fb5b 	bl	800bdb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b702:	69bb      	ldr	r3, [r7, #24]
 800b704:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b706:	e333      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b708:	2300      	movs	r3, #0
 800b70a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b70c:	e330      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b70e:	4b77      	ldr	r3, [pc, #476]	; (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b716:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b71a:	d107      	bne.n	800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b71c:	f107 030c 	add.w	r3, r7, #12
 800b720:	4618      	mov	r0, r3
 800b722:	f000 fc9d 	bl	800c060 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b72a:	e321      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b72c:	2300      	movs	r3, #0
 800b72e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b730:	e31e      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b732:	4b6e      	ldr	r3, [pc, #440]	; (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b736:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b73a:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b73c:	4b6b      	ldr	r3, [pc, #428]	; (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f003 0304 	and.w	r3, r3, #4
 800b744:	2b04      	cmp	r3, #4
 800b746:	d10c      	bne.n	800b762 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800b748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d109      	bne.n	800b762 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b74e:	4b67      	ldr	r3, [pc, #412]	; (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	08db      	lsrs	r3, r3, #3
 800b754:	f003 0303 	and.w	r3, r3, #3
 800b758:	4a65      	ldr	r2, [pc, #404]	; (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800b75a:	fa22 f303 	lsr.w	r3, r2, r3
 800b75e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b760:	e01e      	b.n	800b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b762:	4b62      	ldr	r3, [pc, #392]	; (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b76a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b76e:	d106      	bne.n	800b77e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800b770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b772:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b776:	d102      	bne.n	800b77e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b778:	4b5e      	ldr	r3, [pc, #376]	; (800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800b77a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b77c:	e010      	b.n	800b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b77e:	4b5b      	ldr	r3, [pc, #364]	; (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b786:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b78a:	d106      	bne.n	800b79a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b78c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b78e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b792:	d102      	bne.n	800b79a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b794:	4b58      	ldr	r3, [pc, #352]	; (800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800b796:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b798:	e002      	b.n	800b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b79a:	2300      	movs	r3, #0
 800b79c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b79e:	e2e7      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b7a0:	e2e6      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b7a2:	4b56      	ldr	r3, [pc, #344]	; (800b8fc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800b7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7a6:	e2e3      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7ac:	e2e0      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7b4:	f040 80a7 	bne.w	800b906 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800b7b8:	4b4c      	ldr	r3, [pc, #304]	; (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b7ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7bc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b7c0:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b7c8:	d055      	beq.n	800b876 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800b7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b7d0:	f200 8096 	bhi.w	800b900 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800b7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b7da:	f000 8084 	beq.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800b7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b7e4:	f200 808c 	bhi.w	800b900 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800b7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b7ee:	d030      	beq.n	800b852 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800b7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b7f6:	f200 8083 	bhi.w	800b900 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800b7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d004      	beq.n	800b80a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800b800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b802:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b806:	d012      	beq.n	800b82e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800b808:	e07a      	b.n	800b900 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b80a:	4b38      	ldr	r3, [pc, #224]	; (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b812:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b816:	d107      	bne.n	800b828 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b81c:	4618      	mov	r0, r3
 800b81e:	f000 fd73 	bl	800c308 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b824:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b826:	e2a3      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b828:	2300      	movs	r3, #0
 800b82a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b82c:	e2a0      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b82e:	4b2f      	ldr	r3, [pc, #188]	; (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b836:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b83a:	d107      	bne.n	800b84c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b83c:	f107 0318 	add.w	r3, r7, #24
 800b840:	4618      	mov	r0, r3
 800b842:	f000 fab9 	bl	800bdb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b846:	69bb      	ldr	r3, [r7, #24]
 800b848:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800b84a:	e291      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b84c:	2300      	movs	r3, #0
 800b84e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b850:	e28e      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b852:	4b26      	ldr	r3, [pc, #152]	; (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b85a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b85e:	d107      	bne.n	800b870 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b860:	f107 030c 	add.w	r3, r7, #12
 800b864:	4618      	mov	r0, r3
 800b866:	f000 fbfb 	bl	800c060 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b86e:	e27f      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b870:	2300      	movs	r3, #0
 800b872:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b874:	e27c      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b876:	4b1d      	ldr	r3, [pc, #116]	; (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b87a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b87e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b880:	4b1a      	ldr	r3, [pc, #104]	; (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f003 0304 	and.w	r3, r3, #4
 800b888:	2b04      	cmp	r3, #4
 800b88a:	d10c      	bne.n	800b8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800b88c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d109      	bne.n	800b8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b892:	4b16      	ldr	r3, [pc, #88]	; (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	08db      	lsrs	r3, r3, #3
 800b898:	f003 0303 	and.w	r3, r3, #3
 800b89c:	4a14      	ldr	r2, [pc, #80]	; (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800b89e:	fa22 f303 	lsr.w	r3, r2, r3
 800b8a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8a4:	e01e      	b.n	800b8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b8a6:	4b11      	ldr	r3, [pc, #68]	; (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8b2:	d106      	bne.n	800b8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800b8b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8ba:	d102      	bne.n	800b8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b8bc:	4b0d      	ldr	r3, [pc, #52]	; (800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800b8be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8c0:	e010      	b.n	800b8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b8c2:	4b0a      	ldr	r3, [pc, #40]	; (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8ce:	d106      	bne.n	800b8de <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800b8d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8d6:	d102      	bne.n	800b8de <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b8d8:	4b07      	ldr	r3, [pc, #28]	; (800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800b8da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8dc:	e002      	b.n	800b8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b8e2:	e245      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b8e4:	e244      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b8e6:	4b05      	ldr	r3, [pc, #20]	; (800b8fc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800b8e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8ea:	e241      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b8ec:	58024400 	.word	0x58024400
 800b8f0:	03d09000 	.word	0x03d09000
 800b8f4:	003d0900 	.word	0x003d0900
 800b8f8:	007a1200 	.word	0x007a1200
 800b8fc:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800b900:	2300      	movs	r3, #0
 800b902:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b904:	e234      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b90c:	f040 809c 	bne.w	800ba48 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800b910:	4b9b      	ldr	r3, [pc, #620]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b914:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b918:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b920:	d054      	beq.n	800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800b922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b924:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b928:	f200 808b 	bhi.w	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800b92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b92e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b932:	f000 8083 	beq.w	800ba3c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800b936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b938:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b93c:	f200 8081 	bhi.w	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800b940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b946:	d02f      	beq.n	800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800b948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b94a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b94e:	d878      	bhi.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800b950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b952:	2b00      	cmp	r3, #0
 800b954:	d004      	beq.n	800b960 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800b956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b95c:	d012      	beq.n	800b984 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800b95e:	e070      	b.n	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b960:	4b87      	ldr	r3, [pc, #540]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b968:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b96c:	d107      	bne.n	800b97e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b96e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b972:	4618      	mov	r0, r3
 800b974:	f000 fcc8 	bl	800c308 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b97a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b97c:	e1f8      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b97e:	2300      	movs	r3, #0
 800b980:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b982:	e1f5      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b984:	4b7e      	ldr	r3, [pc, #504]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b98c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b990:	d107      	bne.n	800b9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b992:	f107 0318 	add.w	r3, r7, #24
 800b996:	4618      	mov	r0, r3
 800b998:	f000 fa0e 	bl	800bdb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b99c:	69bb      	ldr	r3, [r7, #24]
 800b99e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b9a0:	e1e6      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b9a6:	e1e3      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b9a8:	4b75      	ldr	r3, [pc, #468]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b9b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9b4:	d107      	bne.n	800b9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9b6:	f107 030c 	add.w	r3, r7, #12
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f000 fb50 	bl	800c060 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b9c4:	e1d4      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b9ca:	e1d1      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b9cc:	4b6c      	ldr	r3, [pc, #432]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b9ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b9d4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b9d6:	4b6a      	ldr	r3, [pc, #424]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f003 0304 	and.w	r3, r3, #4
 800b9de:	2b04      	cmp	r3, #4
 800b9e0:	d10c      	bne.n	800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b9e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d109      	bne.n	800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b9e8:	4b65      	ldr	r3, [pc, #404]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	08db      	lsrs	r3, r3, #3
 800b9ee:	f003 0303 	and.w	r3, r3, #3
 800b9f2:	4a64      	ldr	r2, [pc, #400]	; (800bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800b9f4:	fa22 f303 	lsr.w	r3, r2, r3
 800b9f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9fa:	e01e      	b.n	800ba3a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b9fc:	4b60      	ldr	r3, [pc, #384]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba08:	d106      	bne.n	800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800ba0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba10:	d102      	bne.n	800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ba12:	4b5d      	ldr	r3, [pc, #372]	; (800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800ba14:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba16:	e010      	b.n	800ba3a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ba18:	4b59      	ldr	r3, [pc, #356]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba24:	d106      	bne.n	800ba34 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800ba26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba2c:	d102      	bne.n	800ba34 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ba2e:	4b57      	ldr	r3, [pc, #348]	; (800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800ba30:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba32:	e002      	b.n	800ba3a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ba34:	2300      	movs	r3, #0
 800ba36:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ba38:	e19a      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800ba3a:	e199      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ba3c:	4b54      	ldr	r3, [pc, #336]	; (800bb90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ba3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba40:	e196      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800ba42:	2300      	movs	r3, #0
 800ba44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba46:	e193      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ba4e:	d173      	bne.n	800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800ba50:	4b4b      	ldr	r3, [pc, #300]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ba52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ba58:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ba5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba60:	d02f      	beq.n	800bac2 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800ba62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba68:	d863      	bhi.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800ba6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d004      	beq.n	800ba7a <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800ba70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba76:	d012      	beq.n	800ba9e <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800ba78:	e05b      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba7a:	4b41      	ldr	r3, [pc, #260]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba86:	d107      	bne.n	800ba98 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba88:	f107 0318 	add.w	r3, r7, #24
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f000 f993 	bl	800bdb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ba92:	69bb      	ldr	r3, [r7, #24]
 800ba94:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ba96:	e16b      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba9c:	e168      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ba9e:	4b38      	ldr	r3, [pc, #224]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800baa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800baaa:	d107      	bne.n	800babc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800baac:	f107 030c 	add.w	r3, r7, #12
 800bab0:	4618      	mov	r0, r3
 800bab2:	f000 fad5 	bl	800c060 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800baba:	e159      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800babc:	2300      	movs	r3, #0
 800babe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bac0:	e156      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bac2:	4b2f      	ldr	r3, [pc, #188]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800bac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bac6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800baca:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bacc:	4b2c      	ldr	r3, [pc, #176]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f003 0304 	and.w	r3, r3, #4
 800bad4:	2b04      	cmp	r3, #4
 800bad6:	d10c      	bne.n	800baf2 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800bad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bada:	2b00      	cmp	r3, #0
 800badc:	d109      	bne.n	800baf2 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bade:	4b28      	ldr	r3, [pc, #160]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	08db      	lsrs	r3, r3, #3
 800bae4:	f003 0303 	and.w	r3, r3, #3
 800bae8:	4a26      	ldr	r2, [pc, #152]	; (800bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800baea:	fa22 f303 	lsr.w	r3, r2, r3
 800baee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800baf0:	e01e      	b.n	800bb30 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800baf2:	4b23      	ldr	r3, [pc, #140]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bafa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bafe:	d106      	bne.n	800bb0e <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800bb00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb06:	d102      	bne.n	800bb0e <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800bb08:	4b1f      	ldr	r3, [pc, #124]	; (800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800bb0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb0c:	e010      	b.n	800bb30 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bb0e:	4b1c      	ldr	r3, [pc, #112]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb1a:	d106      	bne.n	800bb2a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800bb1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb22:	d102      	bne.n	800bb2a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800bb24:	4b19      	ldr	r3, [pc, #100]	; (800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800bb26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb28:	e002      	b.n	800bb30 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800bb2e:	e11f      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800bb30:	e11e      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800bb32:	2300      	movs	r3, #0
 800bb34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb36:	e11b      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb3e:	d13e      	bne.n	800bbbe <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800bb40:	4b0f      	ldr	r3, [pc, #60]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800bb42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb48:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bb4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d004      	beq.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800bb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb56:	d01d      	beq.n	800bb94 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800bb58:	e02e      	b.n	800bbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bb5a:	4b09      	ldr	r3, [pc, #36]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb66:	d107      	bne.n	800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f000 fbcb 	bl	800c308 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bb72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb74:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bb76:	e0fb      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb7c:	e0f8      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800bb7e:	bf00      	nop
 800bb80:	58024400 	.word	0x58024400
 800bb84:	03d09000 	.word	0x03d09000
 800bb88:	003d0900 	.word	0x003d0900
 800bb8c:	007a1200 	.word	0x007a1200
 800bb90:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb94:	4b79      	ldr	r3, [pc, #484]	; (800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bba0:	d107      	bne.n	800bbb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bba2:	f107 0318 	add.w	r3, r7, #24
 800bba6:	4618      	mov	r0, r3
 800bba8:	f000 f906 	bl	800bdb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800bbac:	6a3b      	ldr	r3, [r7, #32]
 800bbae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bbb0:	e0de      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bbb6:	e0db      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bbbc:	e0d8      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbc4:	f040 8085 	bne.w	800bcd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800bbc8:	4b6c      	ldr	r3, [pc, #432]	; (800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bbca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbcc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800bbd0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bbd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bbd8:	d06b      	beq.n	800bcb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800bbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bbe0:	d874      	bhi.n	800bccc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800bbe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbe8:	d056      	beq.n	800bc98 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800bbea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbf0:	d86c      	bhi.n	800bccc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800bbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bbf8:	d03b      	beq.n	800bc72 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800bbfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbfc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bc00:	d864      	bhi.n	800bccc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800bc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc08:	d021      	beq.n	800bc4e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800bc0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc10:	d85c      	bhi.n	800bccc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800bc12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d004      	beq.n	800bc22 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800bc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc1e:	d004      	beq.n	800bc2a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800bc20:	e054      	b.n	800bccc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800bc22:	f000 f8b3 	bl	800bd8c <HAL_RCCEx_GetD3PCLK1Freq>
 800bc26:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800bc28:	e0a2      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc2a:	4b54      	ldr	r3, [pc, #336]	; (800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc36:	d107      	bne.n	800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc38:	f107 0318 	add.w	r3, r7, #24
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f000 f8bb 	bl	800bdb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bc42:	69fb      	ldr	r3, [r7, #28]
 800bc44:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bc46:	e093      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bc4c:	e090      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bc4e:	4b4b      	ldr	r3, [pc, #300]	; (800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc5a:	d107      	bne.n	800bc6c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc5c:	f107 030c 	add.w	r3, r7, #12
 800bc60:	4618      	mov	r0, r3
 800bc62:	f000 f9fd 	bl	800c060 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bc6a:	e081      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bc70:	e07e      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bc72:	4b42      	ldr	r3, [pc, #264]	; (800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f003 0304 	and.w	r3, r3, #4
 800bc7a:	2b04      	cmp	r3, #4
 800bc7c:	d109      	bne.n	800bc92 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bc7e:	4b3f      	ldr	r3, [pc, #252]	; (800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	08db      	lsrs	r3, r3, #3
 800bc84:	f003 0303 	and.w	r3, r3, #3
 800bc88:	4a3d      	ldr	r2, [pc, #244]	; (800bd80 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800bc8a:	fa22 f303 	lsr.w	r3, r2, r3
 800bc8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bc90:	e06e      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800bc92:	2300      	movs	r3, #0
 800bc94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bc96:	e06b      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bc98:	4b38      	ldr	r3, [pc, #224]	; (800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bca4:	d102      	bne.n	800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800bca6:	4b37      	ldr	r3, [pc, #220]	; (800bd84 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800bca8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bcaa:	e061      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800bcac:	2300      	movs	r3, #0
 800bcae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bcb0:	e05e      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bcb2:	4b32      	ldr	r3, [pc, #200]	; (800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bcbe:	d102      	bne.n	800bcc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800bcc0:	4b31      	ldr	r3, [pc, #196]	; (800bd88 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800bcc2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bcc4:	e054      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bcca:	e051      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800bccc:	2300      	movs	r3, #0
 800bcce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bcd0:	e04e      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcd8:	d148      	bne.n	800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800bcda:	4b28      	ldr	r3, [pc, #160]	; (800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bcdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcde:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bce2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcea:	d02a      	beq.n	800bd42 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800bcec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcf2:	d838      	bhi.n	800bd66 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800bcf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d004      	beq.n	800bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800bcfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd00:	d00d      	beq.n	800bd1e <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800bd02:	e030      	b.n	800bd66 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bd04:	4b1d      	ldr	r3, [pc, #116]	; (800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd10:	d102      	bne.n	800bd18 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800bd12:	4b1d      	ldr	r3, [pc, #116]	; (800bd88 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800bd14:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bd16:	e02b      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd1c:	e028      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bd1e:	4b17      	ldr	r3, [pc, #92]	; (800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd2a:	d107      	bne.n	800bd3c <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd30:	4618      	mov	r0, r3
 800bd32:	f000 fae9 	bl	800c308 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd38:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bd3a:	e019      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd40:	e016      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd42:	4b0e      	ldr	r3, [pc, #56]	; (800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd4e:	d107      	bne.n	800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd50:	f107 0318 	add.w	r3, r7, #24
 800bd54:	4618      	mov	r0, r3
 800bd56:	f000 f82f 	bl	800bdb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bd5a:	69fb      	ldr	r3, [r7, #28]
 800bd5c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bd5e:	e007      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800bd60:	2300      	movs	r3, #0
 800bd62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd64:	e004      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800bd66:	2300      	movs	r3, #0
 800bd68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd6a:	e001      	b.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800bd70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3740      	adds	r7, #64	; 0x40
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
 800bd7a:	bf00      	nop
 800bd7c:	58024400 	.word	0x58024400
 800bd80:	03d09000 	.word	0x03d09000
 800bd84:	003d0900 	.word	0x003d0900
 800bd88:	007a1200 	.word	0x007a1200

0800bd8c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bd90:	f7fe fb88 	bl	800a4a4 <HAL_RCC_GetHCLKFreq>
 800bd94:	4602      	mov	r2, r0
 800bd96:	4b06      	ldr	r3, [pc, #24]	; (800bdb0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bd98:	6a1b      	ldr	r3, [r3, #32]
 800bd9a:	091b      	lsrs	r3, r3, #4
 800bd9c:	f003 0307 	and.w	r3, r3, #7
 800bda0:	4904      	ldr	r1, [pc, #16]	; (800bdb4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bda2:	5ccb      	ldrb	r3, [r1, r3]
 800bda4:	f003 031f 	and.w	r3, r3, #31
 800bda8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	bd80      	pop	{r7, pc}
 800bdb0:	58024400 	.word	0x58024400
 800bdb4:	080131c0 	.word	0x080131c0

0800bdb8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b089      	sub	sp, #36	; 0x24
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bdc0:	4ba1      	ldr	r3, [pc, #644]	; (800c048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdc4:	f003 0303 	and.w	r3, r3, #3
 800bdc8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800bdca:	4b9f      	ldr	r3, [pc, #636]	; (800c048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdce:	0b1b      	lsrs	r3, r3, #12
 800bdd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bdd4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bdd6:	4b9c      	ldr	r3, [pc, #624]	; (800c048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdda:	091b      	lsrs	r3, r3, #4
 800bddc:	f003 0301 	and.w	r3, r3, #1
 800bde0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800bde2:	4b99      	ldr	r3, [pc, #612]	; (800c048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bde4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bde6:	08db      	lsrs	r3, r3, #3
 800bde8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bdec:	693a      	ldr	r2, [r7, #16]
 800bdee:	fb02 f303 	mul.w	r3, r2, r3
 800bdf2:	ee07 3a90 	vmov	s15, r3
 800bdf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdfa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	2b00      	cmp	r3, #0
 800be02:	f000 8111 	beq.w	800c028 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800be06:	69bb      	ldr	r3, [r7, #24]
 800be08:	2b02      	cmp	r3, #2
 800be0a:	f000 8083 	beq.w	800bf14 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800be0e:	69bb      	ldr	r3, [r7, #24]
 800be10:	2b02      	cmp	r3, #2
 800be12:	f200 80a1 	bhi.w	800bf58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800be16:	69bb      	ldr	r3, [r7, #24]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d003      	beq.n	800be24 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800be1c:	69bb      	ldr	r3, [r7, #24]
 800be1e:	2b01      	cmp	r3, #1
 800be20:	d056      	beq.n	800bed0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800be22:	e099      	b.n	800bf58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be24:	4b88      	ldr	r3, [pc, #544]	; (800c048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f003 0320 	and.w	r3, r3, #32
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d02d      	beq.n	800be8c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800be30:	4b85      	ldr	r3, [pc, #532]	; (800c048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	08db      	lsrs	r3, r3, #3
 800be36:	f003 0303 	and.w	r3, r3, #3
 800be3a:	4a84      	ldr	r2, [pc, #528]	; (800c04c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800be3c:	fa22 f303 	lsr.w	r3, r2, r3
 800be40:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	ee07 3a90 	vmov	s15, r3
 800be48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	ee07 3a90 	vmov	s15, r3
 800be52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be5a:	4b7b      	ldr	r3, [pc, #492]	; (800c048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be62:	ee07 3a90 	vmov	s15, r3
 800be66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800be6e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c050 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800be72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be86:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800be8a:	e087      	b.n	800bf9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	ee07 3a90 	vmov	s15, r3
 800be92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be96:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c054 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800be9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be9e:	4b6a      	ldr	r3, [pc, #424]	; (800c048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bea6:	ee07 3a90 	vmov	s15, r3
 800beaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800beae:	ed97 6a03 	vldr	s12, [r7, #12]
 800beb2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c050 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800beb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800beba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bebe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800beca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bece:	e065      	b.n	800bf9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	ee07 3a90 	vmov	s15, r3
 800bed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beda:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c058 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bee2:	4b59      	ldr	r3, [pc, #356]	; (800c048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beea:	ee07 3a90 	vmov	s15, r3
 800beee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bef2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bef6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c050 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800befa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800befe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bf12:	e043      	b.n	800bf9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	ee07 3a90 	vmov	s15, r3
 800bf1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf1e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c05c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bf22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf26:	4b48      	ldr	r3, [pc, #288]	; (800c048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf2e:	ee07 3a90 	vmov	s15, r3
 800bf32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf36:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf3a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c050 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bf3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bf56:	e021      	b.n	800bf9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	ee07 3a90 	vmov	s15, r3
 800bf5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf62:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c058 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bf66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf6a:	4b37      	ldr	r3, [pc, #220]	; (800c048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf72:	ee07 3a90 	vmov	s15, r3
 800bf76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf7e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c050 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bf82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bf9a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800bf9c:	4b2a      	ldr	r3, [pc, #168]	; (800c048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfa0:	0a5b      	lsrs	r3, r3, #9
 800bfa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfa6:	ee07 3a90 	vmov	s15, r3
 800bfaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bfb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfb6:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfc2:	ee17 2a90 	vmov	r2, s15
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800bfca:	4b1f      	ldr	r3, [pc, #124]	; (800c048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bfcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfce:	0c1b      	lsrs	r3, r3, #16
 800bfd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfd4:	ee07 3a90 	vmov	s15, r3
 800bfd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bfe0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfe4:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bff0:	ee17 2a90 	vmov	r2, s15
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800bff8:	4b13      	ldr	r3, [pc, #76]	; (800c048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bffc:	0e1b      	lsrs	r3, r3, #24
 800bffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c002:	ee07 3a90 	vmov	s15, r3
 800c006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c00a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c00e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c012:	edd7 6a07 	vldr	s13, [r7, #28]
 800c016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c01a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c01e:	ee17 2a90 	vmov	r2, s15
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c026:	e008      	b.n	800c03a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2200      	movs	r2, #0
 800c02c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2200      	movs	r2, #0
 800c032:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2200      	movs	r2, #0
 800c038:	609a      	str	r2, [r3, #8]
}
 800c03a:	bf00      	nop
 800c03c:	3724      	adds	r7, #36	; 0x24
 800c03e:	46bd      	mov	sp, r7
 800c040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c044:	4770      	bx	lr
 800c046:	bf00      	nop
 800c048:	58024400 	.word	0x58024400
 800c04c:	03d09000 	.word	0x03d09000
 800c050:	46000000 	.word	0x46000000
 800c054:	4c742400 	.word	0x4c742400
 800c058:	4a742400 	.word	0x4a742400
 800c05c:	4af42400 	.word	0x4af42400

0800c060 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800c060:	b480      	push	{r7}
 800c062:	b089      	sub	sp, #36	; 0x24
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c068:	4ba1      	ldr	r3, [pc, #644]	; (800c2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c06a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c06c:	f003 0303 	and.w	r3, r3, #3
 800c070:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800c072:	4b9f      	ldr	r3, [pc, #636]	; (800c2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c076:	0d1b      	lsrs	r3, r3, #20
 800c078:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c07c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c07e:	4b9c      	ldr	r3, [pc, #624]	; (800c2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c082:	0a1b      	lsrs	r3, r3, #8
 800c084:	f003 0301 	and.w	r3, r3, #1
 800c088:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800c08a:	4b99      	ldr	r3, [pc, #612]	; (800c2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c08c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c08e:	08db      	lsrs	r3, r3, #3
 800c090:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c094:	693a      	ldr	r2, [r7, #16]
 800c096:	fb02 f303 	mul.w	r3, r2, r3
 800c09a:	ee07 3a90 	vmov	s15, r3
 800c09e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	f000 8111 	beq.w	800c2d0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c0ae:	69bb      	ldr	r3, [r7, #24]
 800c0b0:	2b02      	cmp	r3, #2
 800c0b2:	f000 8083 	beq.w	800c1bc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c0b6:	69bb      	ldr	r3, [r7, #24]
 800c0b8:	2b02      	cmp	r3, #2
 800c0ba:	f200 80a1 	bhi.w	800c200 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c0be:	69bb      	ldr	r3, [r7, #24]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d003      	beq.n	800c0cc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c0c4:	69bb      	ldr	r3, [r7, #24]
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	d056      	beq.n	800c178 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c0ca:	e099      	b.n	800c200 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0cc:	4b88      	ldr	r3, [pc, #544]	; (800c2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f003 0320 	and.w	r3, r3, #32
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d02d      	beq.n	800c134 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c0d8:	4b85      	ldr	r3, [pc, #532]	; (800c2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	08db      	lsrs	r3, r3, #3
 800c0de:	f003 0303 	and.w	r3, r3, #3
 800c0e2:	4a84      	ldr	r2, [pc, #528]	; (800c2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c0e4:	fa22 f303 	lsr.w	r3, r2, r3
 800c0e8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	ee07 3a90 	vmov	s15, r3
 800c0f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	ee07 3a90 	vmov	s15, r3
 800c0fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c102:	4b7b      	ldr	r3, [pc, #492]	; (800c2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c10a:	ee07 3a90 	vmov	s15, r3
 800c10e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c112:	ed97 6a03 	vldr	s12, [r7, #12]
 800c116:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c11a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c11e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c12a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c12e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c132:	e087      	b.n	800c244 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	ee07 3a90 	vmov	s15, r3
 800c13a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c13e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c2fc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c146:	4b6a      	ldr	r3, [pc, #424]	; (800c2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c14a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c14e:	ee07 3a90 	vmov	s15, r3
 800c152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c156:	ed97 6a03 	vldr	s12, [r7, #12]
 800c15a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c15e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c16a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c16e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c172:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c176:	e065      	b.n	800c244 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	ee07 3a90 	vmov	s15, r3
 800c17e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c182:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c300 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c18a:	4b59      	ldr	r3, [pc, #356]	; (800c2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c18e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c192:	ee07 3a90 	vmov	s15, r3
 800c196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c19a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c19e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c1a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c1ba:	e043      	b.n	800c244 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	ee07 3a90 	vmov	s15, r3
 800c1c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c1ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1ce:	4b48      	ldr	r3, [pc, #288]	; (800c2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c1d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1d6:	ee07 3a90 	vmov	s15, r3
 800c1da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1de:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c1e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c1fe:	e021      	b.n	800c244 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	ee07 3a90 	vmov	s15, r3
 800c206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c20a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c300 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c20e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c212:	4b37      	ldr	r3, [pc, #220]	; (800c2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c21a:	ee07 3a90 	vmov	s15, r3
 800c21e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c222:	ed97 6a03 	vldr	s12, [r7, #12]
 800c226:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c22a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c22e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c23a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c23e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c242:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800c244:	4b2a      	ldr	r3, [pc, #168]	; (800c2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c248:	0a5b      	lsrs	r3, r3, #9
 800c24a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c24e:	ee07 3a90 	vmov	s15, r3
 800c252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c256:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c25a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c25e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c262:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c266:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c26a:	ee17 2a90 	vmov	r2, s15
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c272:	4b1f      	ldr	r3, [pc, #124]	; (800c2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c276:	0c1b      	lsrs	r3, r3, #16
 800c278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c27c:	ee07 3a90 	vmov	s15, r3
 800c280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c284:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c288:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c28c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c290:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c294:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c298:	ee17 2a90 	vmov	r2, s15
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c2a0:	4b13      	ldr	r3, [pc, #76]	; (800c2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c2a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2a4:	0e1b      	lsrs	r3, r3, #24
 800c2a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2aa:	ee07 3a90 	vmov	s15, r3
 800c2ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c2b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2ba:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2c6:	ee17 2a90 	vmov	r2, s15
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c2ce:	e008      	b.n	800c2e2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	609a      	str	r2, [r3, #8]
}
 800c2e2:	bf00      	nop
 800c2e4:	3724      	adds	r7, #36	; 0x24
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr
 800c2ee:	bf00      	nop
 800c2f0:	58024400 	.word	0x58024400
 800c2f4:	03d09000 	.word	0x03d09000
 800c2f8:	46000000 	.word	0x46000000
 800c2fc:	4c742400 	.word	0x4c742400
 800c300:	4a742400 	.word	0x4a742400
 800c304:	4af42400 	.word	0x4af42400

0800c308 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800c308:	b480      	push	{r7}
 800c30a:	b089      	sub	sp, #36	; 0x24
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c310:	4ba0      	ldr	r3, [pc, #640]	; (800c594 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c314:	f003 0303 	and.w	r3, r3, #3
 800c318:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800c31a:	4b9e      	ldr	r3, [pc, #632]	; (800c594 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c31c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c31e:	091b      	lsrs	r3, r3, #4
 800c320:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c324:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c326:	4b9b      	ldr	r3, [pc, #620]	; (800c594 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c32a:	f003 0301 	and.w	r3, r3, #1
 800c32e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800c330:	4b98      	ldr	r3, [pc, #608]	; (800c594 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c334:	08db      	lsrs	r3, r3, #3
 800c336:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c33a:	693a      	ldr	r2, [r7, #16]
 800c33c:	fb02 f303 	mul.w	r3, r2, r3
 800c340:	ee07 3a90 	vmov	s15, r3
 800c344:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c348:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	f000 8111 	beq.w	800c576 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c354:	69bb      	ldr	r3, [r7, #24]
 800c356:	2b02      	cmp	r3, #2
 800c358:	f000 8083 	beq.w	800c462 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c35c:	69bb      	ldr	r3, [r7, #24]
 800c35e:	2b02      	cmp	r3, #2
 800c360:	f200 80a1 	bhi.w	800c4a6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c364:	69bb      	ldr	r3, [r7, #24]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d003      	beq.n	800c372 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c36a:	69bb      	ldr	r3, [r7, #24]
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	d056      	beq.n	800c41e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c370:	e099      	b.n	800c4a6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c372:	4b88      	ldr	r3, [pc, #544]	; (800c594 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f003 0320 	and.w	r3, r3, #32
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d02d      	beq.n	800c3da <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c37e:	4b85      	ldr	r3, [pc, #532]	; (800c594 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	08db      	lsrs	r3, r3, #3
 800c384:	f003 0303 	and.w	r3, r3, #3
 800c388:	4a83      	ldr	r2, [pc, #524]	; (800c598 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c38a:	fa22 f303 	lsr.w	r3, r2, r3
 800c38e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	ee07 3a90 	vmov	s15, r3
 800c396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	ee07 3a90 	vmov	s15, r3
 800c3a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3a8:	4b7a      	ldr	r3, [pc, #488]	; (800c594 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c3aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3b0:	ee07 3a90 	vmov	s15, r3
 800c3b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3b8:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3bc:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c59c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c3c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3d4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c3d8:	e087      	b.n	800c4ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	ee07 3a90 	vmov	s15, r3
 800c3e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3e4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c5a0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c3e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3ec:	4b69      	ldr	r3, [pc, #420]	; (800c594 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c3ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3f4:	ee07 3a90 	vmov	s15, r3
 800c3f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3fc:	ed97 6a03 	vldr	s12, [r7, #12]
 800c400:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c59c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c404:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c408:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c40c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c410:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c414:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c418:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c41c:	e065      	b.n	800c4ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	ee07 3a90 	vmov	s15, r3
 800c424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c428:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c5a4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c42c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c430:	4b58      	ldr	r3, [pc, #352]	; (800c594 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c438:	ee07 3a90 	vmov	s15, r3
 800c43c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c440:	ed97 6a03 	vldr	s12, [r7, #12]
 800c444:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c59c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c448:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c44c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c450:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c454:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c45c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c460:	e043      	b.n	800c4ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	ee07 3a90 	vmov	s15, r3
 800c468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c46c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c5a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c470:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c474:	4b47      	ldr	r3, [pc, #284]	; (800c594 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c47c:	ee07 3a90 	vmov	s15, r3
 800c480:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c484:	ed97 6a03 	vldr	s12, [r7, #12]
 800c488:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c59c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c48c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c490:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c494:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c498:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c49c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c4a4:	e021      	b.n	800c4ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	ee07 3a90 	vmov	s15, r3
 800c4ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4b0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c5a0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c4b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4b8:	4b36      	ldr	r3, [pc, #216]	; (800c594 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c4ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4c0:	ee07 3a90 	vmov	s15, r3
 800c4c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4c8:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4cc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c59c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c4d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c4e8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800c4ea:	4b2a      	ldr	r3, [pc, #168]	; (800c594 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c4ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4ee:	0a5b      	lsrs	r3, r3, #9
 800c4f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4f4:	ee07 3a90 	vmov	s15, r3
 800c4f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c500:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c504:	edd7 6a07 	vldr	s13, [r7, #28]
 800c508:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c50c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c510:	ee17 2a90 	vmov	r2, s15
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800c518:	4b1e      	ldr	r3, [pc, #120]	; (800c594 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c51a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c51c:	0c1b      	lsrs	r3, r3, #16
 800c51e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c522:	ee07 3a90 	vmov	s15, r3
 800c526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c52a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c52e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c532:	edd7 6a07 	vldr	s13, [r7, #28]
 800c536:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c53a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c53e:	ee17 2a90 	vmov	r2, s15
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800c546:	4b13      	ldr	r3, [pc, #76]	; (800c594 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c54a:	0e1b      	lsrs	r3, r3, #24
 800c54c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c550:	ee07 3a90 	vmov	s15, r3
 800c554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c558:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c55c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c560:	edd7 6a07 	vldr	s13, [r7, #28]
 800c564:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c56c:	ee17 2a90 	vmov	r2, s15
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c574:	e008      	b.n	800c588 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2200      	movs	r2, #0
 800c57a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2200      	movs	r2, #0
 800c580:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2200      	movs	r2, #0
 800c586:	609a      	str	r2, [r3, #8]
}
 800c588:	bf00      	nop
 800c58a:	3724      	adds	r7, #36	; 0x24
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr
 800c594:	58024400 	.word	0x58024400
 800c598:	03d09000 	.word	0x03d09000
 800c59c:	46000000 	.word	0x46000000
 800c5a0:	4c742400 	.word	0x4c742400
 800c5a4:	4a742400 	.word	0x4a742400
 800c5a8:	4af42400 	.word	0x4af42400

0800c5ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b084      	sub	sp, #16
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
 800c5b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c5ba:	4b53      	ldr	r3, [pc, #332]	; (800c708 <RCCEx_PLL2_Config+0x15c>)
 800c5bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5be:	f003 0303 	and.w	r3, r3, #3
 800c5c2:	2b03      	cmp	r3, #3
 800c5c4:	d101      	bne.n	800c5ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	e099      	b.n	800c6fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c5ca:	4b4f      	ldr	r3, [pc, #316]	; (800c708 <RCCEx_PLL2_Config+0x15c>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	4a4e      	ldr	r2, [pc, #312]	; (800c708 <RCCEx_PLL2_Config+0x15c>)
 800c5d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c5d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c5d6:	f7f6 f863 	bl	80026a0 <HAL_GetTick>
 800c5da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c5dc:	e008      	b.n	800c5f0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c5de:	f7f6 f85f 	bl	80026a0 <HAL_GetTick>
 800c5e2:	4602      	mov	r2, r0
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	1ad3      	subs	r3, r2, r3
 800c5e8:	2b02      	cmp	r3, #2
 800c5ea:	d901      	bls.n	800c5f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c5ec:	2303      	movs	r3, #3
 800c5ee:	e086      	b.n	800c6fe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c5f0:	4b45      	ldr	r3, [pc, #276]	; (800c708 <RCCEx_PLL2_Config+0x15c>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d1f0      	bne.n	800c5de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c5fc:	4b42      	ldr	r3, [pc, #264]	; (800c708 <RCCEx_PLL2_Config+0x15c>)
 800c5fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c600:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	031b      	lsls	r3, r3, #12
 800c60a:	493f      	ldr	r1, [pc, #252]	; (800c708 <RCCEx_PLL2_Config+0x15c>)
 800c60c:	4313      	orrs	r3, r2
 800c60e:	628b      	str	r3, [r1, #40]	; 0x28
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	3b01      	subs	r3, #1
 800c616:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	689b      	ldr	r3, [r3, #8]
 800c61e:	3b01      	subs	r3, #1
 800c620:	025b      	lsls	r3, r3, #9
 800c622:	b29b      	uxth	r3, r3
 800c624:	431a      	orrs	r2, r3
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	68db      	ldr	r3, [r3, #12]
 800c62a:	3b01      	subs	r3, #1
 800c62c:	041b      	lsls	r3, r3, #16
 800c62e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c632:	431a      	orrs	r2, r3
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	691b      	ldr	r3, [r3, #16]
 800c638:	3b01      	subs	r3, #1
 800c63a:	061b      	lsls	r3, r3, #24
 800c63c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c640:	4931      	ldr	r1, [pc, #196]	; (800c708 <RCCEx_PLL2_Config+0x15c>)
 800c642:	4313      	orrs	r3, r2
 800c644:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c646:	4b30      	ldr	r3, [pc, #192]	; (800c708 <RCCEx_PLL2_Config+0x15c>)
 800c648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c64a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	695b      	ldr	r3, [r3, #20]
 800c652:	492d      	ldr	r1, [pc, #180]	; (800c708 <RCCEx_PLL2_Config+0x15c>)
 800c654:	4313      	orrs	r3, r2
 800c656:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c658:	4b2b      	ldr	r3, [pc, #172]	; (800c708 <RCCEx_PLL2_Config+0x15c>)
 800c65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c65c:	f023 0220 	bic.w	r2, r3, #32
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	699b      	ldr	r3, [r3, #24]
 800c664:	4928      	ldr	r1, [pc, #160]	; (800c708 <RCCEx_PLL2_Config+0x15c>)
 800c666:	4313      	orrs	r3, r2
 800c668:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c66a:	4b27      	ldr	r3, [pc, #156]	; (800c708 <RCCEx_PLL2_Config+0x15c>)
 800c66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c66e:	4a26      	ldr	r2, [pc, #152]	; (800c708 <RCCEx_PLL2_Config+0x15c>)
 800c670:	f023 0310 	bic.w	r3, r3, #16
 800c674:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c676:	4b24      	ldr	r3, [pc, #144]	; (800c708 <RCCEx_PLL2_Config+0x15c>)
 800c678:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c67a:	4b24      	ldr	r3, [pc, #144]	; (800c70c <RCCEx_PLL2_Config+0x160>)
 800c67c:	4013      	ands	r3, r2
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	69d2      	ldr	r2, [r2, #28]
 800c682:	00d2      	lsls	r2, r2, #3
 800c684:	4920      	ldr	r1, [pc, #128]	; (800c708 <RCCEx_PLL2_Config+0x15c>)
 800c686:	4313      	orrs	r3, r2
 800c688:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c68a:	4b1f      	ldr	r3, [pc, #124]	; (800c708 <RCCEx_PLL2_Config+0x15c>)
 800c68c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c68e:	4a1e      	ldr	r2, [pc, #120]	; (800c708 <RCCEx_PLL2_Config+0x15c>)
 800c690:	f043 0310 	orr.w	r3, r3, #16
 800c694:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d106      	bne.n	800c6aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c69c:	4b1a      	ldr	r3, [pc, #104]	; (800c708 <RCCEx_PLL2_Config+0x15c>)
 800c69e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6a0:	4a19      	ldr	r2, [pc, #100]	; (800c708 <RCCEx_PLL2_Config+0x15c>)
 800c6a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c6a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c6a8:	e00f      	b.n	800c6ca <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	2b01      	cmp	r3, #1
 800c6ae:	d106      	bne.n	800c6be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c6b0:	4b15      	ldr	r3, [pc, #84]	; (800c708 <RCCEx_PLL2_Config+0x15c>)
 800c6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6b4:	4a14      	ldr	r2, [pc, #80]	; (800c708 <RCCEx_PLL2_Config+0x15c>)
 800c6b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c6ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c6bc:	e005      	b.n	800c6ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c6be:	4b12      	ldr	r3, [pc, #72]	; (800c708 <RCCEx_PLL2_Config+0x15c>)
 800c6c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6c2:	4a11      	ldr	r2, [pc, #68]	; (800c708 <RCCEx_PLL2_Config+0x15c>)
 800c6c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c6c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c6ca:	4b0f      	ldr	r3, [pc, #60]	; (800c708 <RCCEx_PLL2_Config+0x15c>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	4a0e      	ldr	r2, [pc, #56]	; (800c708 <RCCEx_PLL2_Config+0x15c>)
 800c6d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c6d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c6d6:	f7f5 ffe3 	bl	80026a0 <HAL_GetTick>
 800c6da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c6dc:	e008      	b.n	800c6f0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c6de:	f7f5 ffdf 	bl	80026a0 <HAL_GetTick>
 800c6e2:	4602      	mov	r2, r0
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	1ad3      	subs	r3, r2, r3
 800c6e8:	2b02      	cmp	r3, #2
 800c6ea:	d901      	bls.n	800c6f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c6ec:	2303      	movs	r3, #3
 800c6ee:	e006      	b.n	800c6fe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c6f0:	4b05      	ldr	r3, [pc, #20]	; (800c708 <RCCEx_PLL2_Config+0x15c>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d0f0      	beq.n	800c6de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c6fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3710      	adds	r7, #16
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
 800c706:	bf00      	nop
 800c708:	58024400 	.word	0x58024400
 800c70c:	ffff0007 	.word	0xffff0007

0800c710 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b084      	sub	sp, #16
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
 800c718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c71a:	2300      	movs	r3, #0
 800c71c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c71e:	4b53      	ldr	r3, [pc, #332]	; (800c86c <RCCEx_PLL3_Config+0x15c>)
 800c720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c722:	f003 0303 	and.w	r3, r3, #3
 800c726:	2b03      	cmp	r3, #3
 800c728:	d101      	bne.n	800c72e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c72a:	2301      	movs	r3, #1
 800c72c:	e099      	b.n	800c862 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c72e:	4b4f      	ldr	r3, [pc, #316]	; (800c86c <RCCEx_PLL3_Config+0x15c>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	4a4e      	ldr	r2, [pc, #312]	; (800c86c <RCCEx_PLL3_Config+0x15c>)
 800c734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c738:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c73a:	f7f5 ffb1 	bl	80026a0 <HAL_GetTick>
 800c73e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c740:	e008      	b.n	800c754 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c742:	f7f5 ffad 	bl	80026a0 <HAL_GetTick>
 800c746:	4602      	mov	r2, r0
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	1ad3      	subs	r3, r2, r3
 800c74c:	2b02      	cmp	r3, #2
 800c74e:	d901      	bls.n	800c754 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c750:	2303      	movs	r3, #3
 800c752:	e086      	b.n	800c862 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c754:	4b45      	ldr	r3, [pc, #276]	; (800c86c <RCCEx_PLL3_Config+0x15c>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d1f0      	bne.n	800c742 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c760:	4b42      	ldr	r3, [pc, #264]	; (800c86c <RCCEx_PLL3_Config+0x15c>)
 800c762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c764:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	051b      	lsls	r3, r3, #20
 800c76e:	493f      	ldr	r1, [pc, #252]	; (800c86c <RCCEx_PLL3_Config+0x15c>)
 800c770:	4313      	orrs	r3, r2
 800c772:	628b      	str	r3, [r1, #40]	; 0x28
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	3b01      	subs	r3, #1
 800c77a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	689b      	ldr	r3, [r3, #8]
 800c782:	3b01      	subs	r3, #1
 800c784:	025b      	lsls	r3, r3, #9
 800c786:	b29b      	uxth	r3, r3
 800c788:	431a      	orrs	r2, r3
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	68db      	ldr	r3, [r3, #12]
 800c78e:	3b01      	subs	r3, #1
 800c790:	041b      	lsls	r3, r3, #16
 800c792:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c796:	431a      	orrs	r2, r3
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	691b      	ldr	r3, [r3, #16]
 800c79c:	3b01      	subs	r3, #1
 800c79e:	061b      	lsls	r3, r3, #24
 800c7a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c7a4:	4931      	ldr	r1, [pc, #196]	; (800c86c <RCCEx_PLL3_Config+0x15c>)
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c7aa:	4b30      	ldr	r3, [pc, #192]	; (800c86c <RCCEx_PLL3_Config+0x15c>)
 800c7ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	695b      	ldr	r3, [r3, #20]
 800c7b6:	492d      	ldr	r1, [pc, #180]	; (800c86c <RCCEx_PLL3_Config+0x15c>)
 800c7b8:	4313      	orrs	r3, r2
 800c7ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c7bc:	4b2b      	ldr	r3, [pc, #172]	; (800c86c <RCCEx_PLL3_Config+0x15c>)
 800c7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	699b      	ldr	r3, [r3, #24]
 800c7c8:	4928      	ldr	r1, [pc, #160]	; (800c86c <RCCEx_PLL3_Config+0x15c>)
 800c7ca:	4313      	orrs	r3, r2
 800c7cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c7ce:	4b27      	ldr	r3, [pc, #156]	; (800c86c <RCCEx_PLL3_Config+0x15c>)
 800c7d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7d2:	4a26      	ldr	r2, [pc, #152]	; (800c86c <RCCEx_PLL3_Config+0x15c>)
 800c7d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c7d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c7da:	4b24      	ldr	r3, [pc, #144]	; (800c86c <RCCEx_PLL3_Config+0x15c>)
 800c7dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c7de:	4b24      	ldr	r3, [pc, #144]	; (800c870 <RCCEx_PLL3_Config+0x160>)
 800c7e0:	4013      	ands	r3, r2
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	69d2      	ldr	r2, [r2, #28]
 800c7e6:	00d2      	lsls	r2, r2, #3
 800c7e8:	4920      	ldr	r1, [pc, #128]	; (800c86c <RCCEx_PLL3_Config+0x15c>)
 800c7ea:	4313      	orrs	r3, r2
 800c7ec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c7ee:	4b1f      	ldr	r3, [pc, #124]	; (800c86c <RCCEx_PLL3_Config+0x15c>)
 800c7f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7f2:	4a1e      	ldr	r2, [pc, #120]	; (800c86c <RCCEx_PLL3_Config+0x15c>)
 800c7f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c7f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d106      	bne.n	800c80e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c800:	4b1a      	ldr	r3, [pc, #104]	; (800c86c <RCCEx_PLL3_Config+0x15c>)
 800c802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c804:	4a19      	ldr	r2, [pc, #100]	; (800c86c <RCCEx_PLL3_Config+0x15c>)
 800c806:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c80a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c80c:	e00f      	b.n	800c82e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	2b01      	cmp	r3, #1
 800c812:	d106      	bne.n	800c822 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c814:	4b15      	ldr	r3, [pc, #84]	; (800c86c <RCCEx_PLL3_Config+0x15c>)
 800c816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c818:	4a14      	ldr	r2, [pc, #80]	; (800c86c <RCCEx_PLL3_Config+0x15c>)
 800c81a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c81e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c820:	e005      	b.n	800c82e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c822:	4b12      	ldr	r3, [pc, #72]	; (800c86c <RCCEx_PLL3_Config+0x15c>)
 800c824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c826:	4a11      	ldr	r2, [pc, #68]	; (800c86c <RCCEx_PLL3_Config+0x15c>)
 800c828:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c82c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c82e:	4b0f      	ldr	r3, [pc, #60]	; (800c86c <RCCEx_PLL3_Config+0x15c>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	4a0e      	ldr	r2, [pc, #56]	; (800c86c <RCCEx_PLL3_Config+0x15c>)
 800c834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c838:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c83a:	f7f5 ff31 	bl	80026a0 <HAL_GetTick>
 800c83e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c840:	e008      	b.n	800c854 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c842:	f7f5 ff2d 	bl	80026a0 <HAL_GetTick>
 800c846:	4602      	mov	r2, r0
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	1ad3      	subs	r3, r2, r3
 800c84c:	2b02      	cmp	r3, #2
 800c84e:	d901      	bls.n	800c854 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c850:	2303      	movs	r3, #3
 800c852:	e006      	b.n	800c862 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c854:	4b05      	ldr	r3, [pc, #20]	; (800c86c <RCCEx_PLL3_Config+0x15c>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d0f0      	beq.n	800c842 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c860:	7bfb      	ldrb	r3, [r7, #15]
}
 800c862:	4618      	mov	r0, r3
 800c864:	3710      	adds	r7, #16
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	58024400 	.word	0x58024400
 800c870:	ffff0007 	.word	0xffff0007

0800c874 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b082      	sub	sp, #8
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d101      	bne.n	800c886 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c882:	2301      	movs	r3, #1
 800c884:	e049      	b.n	800c91a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c88c:	b2db      	uxtb	r3, r3
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d106      	bne.n	800c8a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2200      	movs	r2, #0
 800c896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f7f5 fd22 	bl	80022e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2202      	movs	r2, #2
 800c8a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681a      	ldr	r2, [r3, #0]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	3304      	adds	r3, #4
 800c8b0:	4619      	mov	r1, r3
 800c8b2:	4610      	mov	r0, r2
 800c8b4:	f000 fd06 	bl	800d2c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2201      	movs	r2, #1
 800c8c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2201      	movs	r2, #1
 800c8dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2201      	movs	r2, #1
 800c8f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2201      	movs	r2, #1
 800c904:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2201      	movs	r2, #1
 800c90c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2201      	movs	r2, #1
 800c914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c918:	2300      	movs	r3, #0
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	3708      	adds	r7, #8
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}
	...

0800c924 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c924:	b480      	push	{r7}
 800c926:	b085      	sub	sp, #20
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c932:	b2db      	uxtb	r3, r3
 800c934:	2b01      	cmp	r3, #1
 800c936:	d001      	beq.n	800c93c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c938:	2301      	movs	r3, #1
 800c93a:	e054      	b.n	800c9e6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2202      	movs	r2, #2
 800c940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	68da      	ldr	r2, [r3, #12]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f042 0201 	orr.w	r2, r2, #1
 800c952:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	4a26      	ldr	r2, [pc, #152]	; (800c9f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d022      	beq.n	800c9a4 <HAL_TIM_Base_Start_IT+0x80>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c966:	d01d      	beq.n	800c9a4 <HAL_TIM_Base_Start_IT+0x80>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	4a22      	ldr	r2, [pc, #136]	; (800c9f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800c96e:	4293      	cmp	r3, r2
 800c970:	d018      	beq.n	800c9a4 <HAL_TIM_Base_Start_IT+0x80>
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	4a21      	ldr	r2, [pc, #132]	; (800c9fc <HAL_TIM_Base_Start_IT+0xd8>)
 800c978:	4293      	cmp	r3, r2
 800c97a:	d013      	beq.n	800c9a4 <HAL_TIM_Base_Start_IT+0x80>
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	4a1f      	ldr	r2, [pc, #124]	; (800ca00 <HAL_TIM_Base_Start_IT+0xdc>)
 800c982:	4293      	cmp	r3, r2
 800c984:	d00e      	beq.n	800c9a4 <HAL_TIM_Base_Start_IT+0x80>
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	4a1e      	ldr	r2, [pc, #120]	; (800ca04 <HAL_TIM_Base_Start_IT+0xe0>)
 800c98c:	4293      	cmp	r3, r2
 800c98e:	d009      	beq.n	800c9a4 <HAL_TIM_Base_Start_IT+0x80>
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	4a1c      	ldr	r2, [pc, #112]	; (800ca08 <HAL_TIM_Base_Start_IT+0xe4>)
 800c996:	4293      	cmp	r3, r2
 800c998:	d004      	beq.n	800c9a4 <HAL_TIM_Base_Start_IT+0x80>
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	4a1b      	ldr	r2, [pc, #108]	; (800ca0c <HAL_TIM_Base_Start_IT+0xe8>)
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	d115      	bne.n	800c9d0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	689a      	ldr	r2, [r3, #8]
 800c9aa:	4b19      	ldr	r3, [pc, #100]	; (800ca10 <HAL_TIM_Base_Start_IT+0xec>)
 800c9ac:	4013      	ands	r3, r2
 800c9ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	2b06      	cmp	r3, #6
 800c9b4:	d015      	beq.n	800c9e2 <HAL_TIM_Base_Start_IT+0xbe>
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9bc:	d011      	beq.n	800c9e2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	681a      	ldr	r2, [r3, #0]
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f042 0201 	orr.w	r2, r2, #1
 800c9cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9ce:	e008      	b.n	800c9e2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	681a      	ldr	r2, [r3, #0]
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f042 0201 	orr.w	r2, r2, #1
 800c9de:	601a      	str	r2, [r3, #0]
 800c9e0:	e000      	b.n	800c9e4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c9e4:	2300      	movs	r3, #0
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3714      	adds	r7, #20
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f0:	4770      	bx	lr
 800c9f2:	bf00      	nop
 800c9f4:	40010000 	.word	0x40010000
 800c9f8:	40000400 	.word	0x40000400
 800c9fc:	40000800 	.word	0x40000800
 800ca00:	40000c00 	.word	0x40000c00
 800ca04:	40010400 	.word	0x40010400
 800ca08:	40001800 	.word	0x40001800
 800ca0c:	40014000 	.word	0x40014000
 800ca10:	00010007 	.word	0x00010007

0800ca14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b082      	sub	sp, #8
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d101      	bne.n	800ca26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ca22:	2301      	movs	r3, #1
 800ca24:	e049      	b.n	800caba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca2c:	b2db      	uxtb	r3, r3
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d106      	bne.n	800ca40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2200      	movs	r2, #0
 800ca36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f7f5 fc30 	bl	80022a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2202      	movs	r2, #2
 800ca44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681a      	ldr	r2, [r3, #0]
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	3304      	adds	r3, #4
 800ca50:	4619      	mov	r1, r3
 800ca52:	4610      	mov	r0, r2
 800ca54:	f000 fc36 	bl	800d2c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2201      	movs	r2, #1
 800ca5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2201      	movs	r2, #1
 800ca64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2201      	movs	r2, #1
 800ca74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2201      	movs	r2, #1
 800ca84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2201      	movs	r2, #1
 800ca94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2201      	movs	r2, #1
 800caa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2201      	movs	r2, #1
 800caac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2201      	movs	r2, #1
 800cab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cab8:	2300      	movs	r3, #0
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3708      	adds	r7, #8
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}
	...

0800cac4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b084      	sub	sp, #16
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
 800cacc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d109      	bne.n	800cae8 <HAL_TIM_PWM_Start+0x24>
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cada:	b2db      	uxtb	r3, r3
 800cadc:	2b01      	cmp	r3, #1
 800cade:	bf14      	ite	ne
 800cae0:	2301      	movne	r3, #1
 800cae2:	2300      	moveq	r3, #0
 800cae4:	b2db      	uxtb	r3, r3
 800cae6:	e03c      	b.n	800cb62 <HAL_TIM_PWM_Start+0x9e>
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	2b04      	cmp	r3, #4
 800caec:	d109      	bne.n	800cb02 <HAL_TIM_PWM_Start+0x3e>
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800caf4:	b2db      	uxtb	r3, r3
 800caf6:	2b01      	cmp	r3, #1
 800caf8:	bf14      	ite	ne
 800cafa:	2301      	movne	r3, #1
 800cafc:	2300      	moveq	r3, #0
 800cafe:	b2db      	uxtb	r3, r3
 800cb00:	e02f      	b.n	800cb62 <HAL_TIM_PWM_Start+0x9e>
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	2b08      	cmp	r3, #8
 800cb06:	d109      	bne.n	800cb1c <HAL_TIM_PWM_Start+0x58>
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cb0e:	b2db      	uxtb	r3, r3
 800cb10:	2b01      	cmp	r3, #1
 800cb12:	bf14      	ite	ne
 800cb14:	2301      	movne	r3, #1
 800cb16:	2300      	moveq	r3, #0
 800cb18:	b2db      	uxtb	r3, r3
 800cb1a:	e022      	b.n	800cb62 <HAL_TIM_PWM_Start+0x9e>
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	2b0c      	cmp	r3, #12
 800cb20:	d109      	bne.n	800cb36 <HAL_TIM_PWM_Start+0x72>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb28:	b2db      	uxtb	r3, r3
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	bf14      	ite	ne
 800cb2e:	2301      	movne	r3, #1
 800cb30:	2300      	moveq	r3, #0
 800cb32:	b2db      	uxtb	r3, r3
 800cb34:	e015      	b.n	800cb62 <HAL_TIM_PWM_Start+0x9e>
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	2b10      	cmp	r3, #16
 800cb3a:	d109      	bne.n	800cb50 <HAL_TIM_PWM_Start+0x8c>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cb42:	b2db      	uxtb	r3, r3
 800cb44:	2b01      	cmp	r3, #1
 800cb46:	bf14      	ite	ne
 800cb48:	2301      	movne	r3, #1
 800cb4a:	2300      	moveq	r3, #0
 800cb4c:	b2db      	uxtb	r3, r3
 800cb4e:	e008      	b.n	800cb62 <HAL_TIM_PWM_Start+0x9e>
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cb56:	b2db      	uxtb	r3, r3
 800cb58:	2b01      	cmp	r3, #1
 800cb5a:	bf14      	ite	ne
 800cb5c:	2301      	movne	r3, #1
 800cb5e:	2300      	moveq	r3, #0
 800cb60:	b2db      	uxtb	r3, r3
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d001      	beq.n	800cb6a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800cb66:	2301      	movs	r3, #1
 800cb68:	e0a1      	b.n	800ccae <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d104      	bne.n	800cb7a <HAL_TIM_PWM_Start+0xb6>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2202      	movs	r2, #2
 800cb74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cb78:	e023      	b.n	800cbc2 <HAL_TIM_PWM_Start+0xfe>
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	2b04      	cmp	r3, #4
 800cb7e:	d104      	bne.n	800cb8a <HAL_TIM_PWM_Start+0xc6>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2202      	movs	r2, #2
 800cb84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cb88:	e01b      	b.n	800cbc2 <HAL_TIM_PWM_Start+0xfe>
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	2b08      	cmp	r3, #8
 800cb8e:	d104      	bne.n	800cb9a <HAL_TIM_PWM_Start+0xd6>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2202      	movs	r2, #2
 800cb94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cb98:	e013      	b.n	800cbc2 <HAL_TIM_PWM_Start+0xfe>
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	2b0c      	cmp	r3, #12
 800cb9e:	d104      	bne.n	800cbaa <HAL_TIM_PWM_Start+0xe6>
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2202      	movs	r2, #2
 800cba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cba8:	e00b      	b.n	800cbc2 <HAL_TIM_PWM_Start+0xfe>
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	2b10      	cmp	r3, #16
 800cbae:	d104      	bne.n	800cbba <HAL_TIM_PWM_Start+0xf6>
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2202      	movs	r2, #2
 800cbb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cbb8:	e003      	b.n	800cbc2 <HAL_TIM_PWM_Start+0xfe>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2202      	movs	r2, #2
 800cbbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	2201      	movs	r2, #1
 800cbc8:	6839      	ldr	r1, [r7, #0]
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f000 feea 	bl	800d9a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	4a38      	ldr	r2, [pc, #224]	; (800ccb8 <HAL_TIM_PWM_Start+0x1f4>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d013      	beq.n	800cc02 <HAL_TIM_PWM_Start+0x13e>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	4a37      	ldr	r2, [pc, #220]	; (800ccbc <HAL_TIM_PWM_Start+0x1f8>)
 800cbe0:	4293      	cmp	r3, r2
 800cbe2:	d00e      	beq.n	800cc02 <HAL_TIM_PWM_Start+0x13e>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	4a35      	ldr	r2, [pc, #212]	; (800ccc0 <HAL_TIM_PWM_Start+0x1fc>)
 800cbea:	4293      	cmp	r3, r2
 800cbec:	d009      	beq.n	800cc02 <HAL_TIM_PWM_Start+0x13e>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	4a34      	ldr	r2, [pc, #208]	; (800ccc4 <HAL_TIM_PWM_Start+0x200>)
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d004      	beq.n	800cc02 <HAL_TIM_PWM_Start+0x13e>
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	4a32      	ldr	r2, [pc, #200]	; (800ccc8 <HAL_TIM_PWM_Start+0x204>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d101      	bne.n	800cc06 <HAL_TIM_PWM_Start+0x142>
 800cc02:	2301      	movs	r3, #1
 800cc04:	e000      	b.n	800cc08 <HAL_TIM_PWM_Start+0x144>
 800cc06:	2300      	movs	r3, #0
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d007      	beq.n	800cc1c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cc1a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4a25      	ldr	r2, [pc, #148]	; (800ccb8 <HAL_TIM_PWM_Start+0x1f4>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d022      	beq.n	800cc6c <HAL_TIM_PWM_Start+0x1a8>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc2e:	d01d      	beq.n	800cc6c <HAL_TIM_PWM_Start+0x1a8>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4a25      	ldr	r2, [pc, #148]	; (800cccc <HAL_TIM_PWM_Start+0x208>)
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d018      	beq.n	800cc6c <HAL_TIM_PWM_Start+0x1a8>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	4a24      	ldr	r2, [pc, #144]	; (800ccd0 <HAL_TIM_PWM_Start+0x20c>)
 800cc40:	4293      	cmp	r3, r2
 800cc42:	d013      	beq.n	800cc6c <HAL_TIM_PWM_Start+0x1a8>
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	4a22      	ldr	r2, [pc, #136]	; (800ccd4 <HAL_TIM_PWM_Start+0x210>)
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d00e      	beq.n	800cc6c <HAL_TIM_PWM_Start+0x1a8>
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4a1a      	ldr	r2, [pc, #104]	; (800ccbc <HAL_TIM_PWM_Start+0x1f8>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d009      	beq.n	800cc6c <HAL_TIM_PWM_Start+0x1a8>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4a1e      	ldr	r2, [pc, #120]	; (800ccd8 <HAL_TIM_PWM_Start+0x214>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d004      	beq.n	800cc6c <HAL_TIM_PWM_Start+0x1a8>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	4a16      	ldr	r2, [pc, #88]	; (800ccc0 <HAL_TIM_PWM_Start+0x1fc>)
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d115      	bne.n	800cc98 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	689a      	ldr	r2, [r3, #8]
 800cc72:	4b1a      	ldr	r3, [pc, #104]	; (800ccdc <HAL_TIM_PWM_Start+0x218>)
 800cc74:	4013      	ands	r3, r2
 800cc76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2b06      	cmp	r3, #6
 800cc7c:	d015      	beq.n	800ccaa <HAL_TIM_PWM_Start+0x1e6>
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc84:	d011      	beq.n	800ccaa <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	681a      	ldr	r2, [r3, #0]
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	f042 0201 	orr.w	r2, r2, #1
 800cc94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc96:	e008      	b.n	800ccaa <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	681a      	ldr	r2, [r3, #0]
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	f042 0201 	orr.w	r2, r2, #1
 800cca6:	601a      	str	r2, [r3, #0]
 800cca8:	e000      	b.n	800ccac <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ccaa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ccac:	2300      	movs	r3, #0
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3710      	adds	r7, #16
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}
 800ccb6:	bf00      	nop
 800ccb8:	40010000 	.word	0x40010000
 800ccbc:	40010400 	.word	0x40010400
 800ccc0:	40014000 	.word	0x40014000
 800ccc4:	40014400 	.word	0x40014400
 800ccc8:	40014800 	.word	0x40014800
 800cccc:	40000400 	.word	0x40000400
 800ccd0:	40000800 	.word	0x40000800
 800ccd4:	40000c00 	.word	0x40000c00
 800ccd8:	40001800 	.word	0x40001800
 800ccdc:	00010007 	.word	0x00010007

0800cce0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b082      	sub	sp, #8
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
 800cce8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	6839      	ldr	r1, [r7, #0]
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f000 fe56 	bl	800d9a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	4a3e      	ldr	r2, [pc, #248]	; (800cdf8 <HAL_TIM_PWM_Stop+0x118>)
 800ccfe:	4293      	cmp	r3, r2
 800cd00:	d013      	beq.n	800cd2a <HAL_TIM_PWM_Stop+0x4a>
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	4a3d      	ldr	r2, [pc, #244]	; (800cdfc <HAL_TIM_PWM_Stop+0x11c>)
 800cd08:	4293      	cmp	r3, r2
 800cd0a:	d00e      	beq.n	800cd2a <HAL_TIM_PWM_Stop+0x4a>
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	4a3b      	ldr	r2, [pc, #236]	; (800ce00 <HAL_TIM_PWM_Stop+0x120>)
 800cd12:	4293      	cmp	r3, r2
 800cd14:	d009      	beq.n	800cd2a <HAL_TIM_PWM_Stop+0x4a>
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	4a3a      	ldr	r2, [pc, #232]	; (800ce04 <HAL_TIM_PWM_Stop+0x124>)
 800cd1c:	4293      	cmp	r3, r2
 800cd1e:	d004      	beq.n	800cd2a <HAL_TIM_PWM_Stop+0x4a>
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	4a38      	ldr	r2, [pc, #224]	; (800ce08 <HAL_TIM_PWM_Stop+0x128>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d101      	bne.n	800cd2e <HAL_TIM_PWM_Stop+0x4e>
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	e000      	b.n	800cd30 <HAL_TIM_PWM_Stop+0x50>
 800cd2e:	2300      	movs	r3, #0
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d017      	beq.n	800cd64 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	6a1a      	ldr	r2, [r3, #32]
 800cd3a:	f241 1311 	movw	r3, #4369	; 0x1111
 800cd3e:	4013      	ands	r3, r2
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d10f      	bne.n	800cd64 <HAL_TIM_PWM_Stop+0x84>
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	6a1a      	ldr	r2, [r3, #32]
 800cd4a:	f240 4344 	movw	r3, #1092	; 0x444
 800cd4e:	4013      	ands	r3, r2
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d107      	bne.n	800cd64 <HAL_TIM_PWM_Stop+0x84>
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cd62:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	6a1a      	ldr	r2, [r3, #32]
 800cd6a:	f241 1311 	movw	r3, #4369	; 0x1111
 800cd6e:	4013      	ands	r3, r2
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d10f      	bne.n	800cd94 <HAL_TIM_PWM_Stop+0xb4>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	6a1a      	ldr	r2, [r3, #32]
 800cd7a:	f240 4344 	movw	r3, #1092	; 0x444
 800cd7e:	4013      	ands	r3, r2
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d107      	bne.n	800cd94 <HAL_TIM_PWM_Stop+0xb4>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	681a      	ldr	r2, [r3, #0]
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	f022 0201 	bic.w	r2, r2, #1
 800cd92:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d104      	bne.n	800cda4 <HAL_TIM_PWM_Stop+0xc4>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2201      	movs	r2, #1
 800cd9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cda2:	e023      	b.n	800cdec <HAL_TIM_PWM_Stop+0x10c>
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	2b04      	cmp	r3, #4
 800cda8:	d104      	bne.n	800cdb4 <HAL_TIM_PWM_Stop+0xd4>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2201      	movs	r2, #1
 800cdae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cdb2:	e01b      	b.n	800cdec <HAL_TIM_PWM_Stop+0x10c>
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	2b08      	cmp	r3, #8
 800cdb8:	d104      	bne.n	800cdc4 <HAL_TIM_PWM_Stop+0xe4>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cdc2:	e013      	b.n	800cdec <HAL_TIM_PWM_Stop+0x10c>
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	2b0c      	cmp	r3, #12
 800cdc8:	d104      	bne.n	800cdd4 <HAL_TIM_PWM_Stop+0xf4>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2201      	movs	r2, #1
 800cdce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cdd2:	e00b      	b.n	800cdec <HAL_TIM_PWM_Stop+0x10c>
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	2b10      	cmp	r3, #16
 800cdd8:	d104      	bne.n	800cde4 <HAL_TIM_PWM_Stop+0x104>
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2201      	movs	r2, #1
 800cdde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cde2:	e003      	b.n	800cdec <HAL_TIM_PWM_Stop+0x10c>
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2201      	movs	r2, #1
 800cde8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800cdec:	2300      	movs	r3, #0
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3708      	adds	r7, #8
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}
 800cdf6:	bf00      	nop
 800cdf8:	40010000 	.word	0x40010000
 800cdfc:	40010400 	.word	0x40010400
 800ce00:	40014000 	.word	0x40014000
 800ce04:	40014400 	.word	0x40014400
 800ce08:	40014800 	.word	0x40014800

0800ce0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b082      	sub	sp, #8
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	691b      	ldr	r3, [r3, #16]
 800ce1a:	f003 0302 	and.w	r3, r3, #2
 800ce1e:	2b02      	cmp	r3, #2
 800ce20:	d122      	bne.n	800ce68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	68db      	ldr	r3, [r3, #12]
 800ce28:	f003 0302 	and.w	r3, r3, #2
 800ce2c:	2b02      	cmp	r3, #2
 800ce2e:	d11b      	bne.n	800ce68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	f06f 0202 	mvn.w	r2, #2
 800ce38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	699b      	ldr	r3, [r3, #24]
 800ce46:	f003 0303 	and.w	r3, r3, #3
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d003      	beq.n	800ce56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f000 fa1a 	bl	800d288 <HAL_TIM_IC_CaptureCallback>
 800ce54:	e005      	b.n	800ce62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce56:	6878      	ldr	r0, [r7, #4]
 800ce58:	f000 fa0c 	bl	800d274 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f000 fa1d 	bl	800d29c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2200      	movs	r2, #0
 800ce66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	691b      	ldr	r3, [r3, #16]
 800ce6e:	f003 0304 	and.w	r3, r3, #4
 800ce72:	2b04      	cmp	r3, #4
 800ce74:	d122      	bne.n	800cebc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	68db      	ldr	r3, [r3, #12]
 800ce7c:	f003 0304 	and.w	r3, r3, #4
 800ce80:	2b04      	cmp	r3, #4
 800ce82:	d11b      	bne.n	800cebc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f06f 0204 	mvn.w	r2, #4
 800ce8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2202      	movs	r2, #2
 800ce92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	699b      	ldr	r3, [r3, #24]
 800ce9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d003      	beq.n	800ceaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f000 f9f0 	bl	800d288 <HAL_TIM_IC_CaptureCallback>
 800cea8:	e005      	b.n	800ceb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f000 f9e2 	bl	800d274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f000 f9f3 	bl	800d29c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	691b      	ldr	r3, [r3, #16]
 800cec2:	f003 0308 	and.w	r3, r3, #8
 800cec6:	2b08      	cmp	r3, #8
 800cec8:	d122      	bne.n	800cf10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	68db      	ldr	r3, [r3, #12]
 800ced0:	f003 0308 	and.w	r3, r3, #8
 800ced4:	2b08      	cmp	r3, #8
 800ced6:	d11b      	bne.n	800cf10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	f06f 0208 	mvn.w	r2, #8
 800cee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2204      	movs	r2, #4
 800cee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	69db      	ldr	r3, [r3, #28]
 800ceee:	f003 0303 	and.w	r3, r3, #3
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d003      	beq.n	800cefe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f000 f9c6 	bl	800d288 <HAL_TIM_IC_CaptureCallback>
 800cefc:	e005      	b.n	800cf0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f000 f9b8 	bl	800d274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f000 f9c9 	bl	800d29c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	691b      	ldr	r3, [r3, #16]
 800cf16:	f003 0310 	and.w	r3, r3, #16
 800cf1a:	2b10      	cmp	r3, #16
 800cf1c:	d122      	bne.n	800cf64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	68db      	ldr	r3, [r3, #12]
 800cf24:	f003 0310 	and.w	r3, r3, #16
 800cf28:	2b10      	cmp	r3, #16
 800cf2a:	d11b      	bne.n	800cf64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	f06f 0210 	mvn.w	r2, #16
 800cf34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2208      	movs	r2, #8
 800cf3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	69db      	ldr	r3, [r3, #28]
 800cf42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d003      	beq.n	800cf52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f000 f99c 	bl	800d288 <HAL_TIM_IC_CaptureCallback>
 800cf50:	e005      	b.n	800cf5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f000 f98e 	bl	800d274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f000 f99f 	bl	800d29c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2200      	movs	r2, #0
 800cf62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	691b      	ldr	r3, [r3, #16]
 800cf6a:	f003 0301 	and.w	r3, r3, #1
 800cf6e:	2b01      	cmp	r3, #1
 800cf70:	d10e      	bne.n	800cf90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	68db      	ldr	r3, [r3, #12]
 800cf78:	f003 0301 	and.w	r3, r3, #1
 800cf7c:	2b01      	cmp	r3, #1
 800cf7e:	d107      	bne.n	800cf90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f06f 0201 	mvn.w	r2, #1
 800cf88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f7f4 fb00 	bl	8001590 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	691b      	ldr	r3, [r3, #16]
 800cf96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf9a:	2b80      	cmp	r3, #128	; 0x80
 800cf9c:	d10e      	bne.n	800cfbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	68db      	ldr	r3, [r3, #12]
 800cfa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfa8:	2b80      	cmp	r3, #128	; 0x80
 800cfaa:	d107      	bne.n	800cfbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cfb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f000 fe30 	bl	800dc1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	691b      	ldr	r3, [r3, #16]
 800cfc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cfca:	d10e      	bne.n	800cfea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	68db      	ldr	r3, [r3, #12]
 800cfd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfd6:	2b80      	cmp	r3, #128	; 0x80
 800cfd8:	d107      	bne.n	800cfea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cfe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f000 fe23 	bl	800dc30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	691b      	ldr	r3, [r3, #16]
 800cff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cff4:	2b40      	cmp	r3, #64	; 0x40
 800cff6:	d10e      	bne.n	800d016 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	68db      	ldr	r3, [r3, #12]
 800cffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d002:	2b40      	cmp	r3, #64	; 0x40
 800d004:	d107      	bne.n	800d016 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d00e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	f000 f94d 	bl	800d2b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	691b      	ldr	r3, [r3, #16]
 800d01c:	f003 0320 	and.w	r3, r3, #32
 800d020:	2b20      	cmp	r3, #32
 800d022:	d10e      	bne.n	800d042 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	68db      	ldr	r3, [r3, #12]
 800d02a:	f003 0320 	and.w	r3, r3, #32
 800d02e:	2b20      	cmp	r3, #32
 800d030:	d107      	bne.n	800d042 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	f06f 0220 	mvn.w	r2, #32
 800d03a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f000 fde3 	bl	800dc08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d042:	bf00      	nop
 800d044:	3708      	adds	r7, #8
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
	...

0800d04c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b086      	sub	sp, #24
 800d050:	af00      	add	r7, sp, #0
 800d052:	60f8      	str	r0, [r7, #12]
 800d054:	60b9      	str	r1, [r7, #8]
 800d056:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d058:	2300      	movs	r3, #0
 800d05a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d062:	2b01      	cmp	r3, #1
 800d064:	d101      	bne.n	800d06a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d066:	2302      	movs	r3, #2
 800d068:	e0ff      	b.n	800d26a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	2201      	movs	r2, #1
 800d06e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2b14      	cmp	r3, #20
 800d076:	f200 80f0 	bhi.w	800d25a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d07a:	a201      	add	r2, pc, #4	; (adr r2, 800d080 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d07c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d080:	0800d0d5 	.word	0x0800d0d5
 800d084:	0800d25b 	.word	0x0800d25b
 800d088:	0800d25b 	.word	0x0800d25b
 800d08c:	0800d25b 	.word	0x0800d25b
 800d090:	0800d115 	.word	0x0800d115
 800d094:	0800d25b 	.word	0x0800d25b
 800d098:	0800d25b 	.word	0x0800d25b
 800d09c:	0800d25b 	.word	0x0800d25b
 800d0a0:	0800d157 	.word	0x0800d157
 800d0a4:	0800d25b 	.word	0x0800d25b
 800d0a8:	0800d25b 	.word	0x0800d25b
 800d0ac:	0800d25b 	.word	0x0800d25b
 800d0b0:	0800d197 	.word	0x0800d197
 800d0b4:	0800d25b 	.word	0x0800d25b
 800d0b8:	0800d25b 	.word	0x0800d25b
 800d0bc:	0800d25b 	.word	0x0800d25b
 800d0c0:	0800d1d9 	.word	0x0800d1d9
 800d0c4:	0800d25b 	.word	0x0800d25b
 800d0c8:	0800d25b 	.word	0x0800d25b
 800d0cc:	0800d25b 	.word	0x0800d25b
 800d0d0:	0800d219 	.word	0x0800d219
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	68b9      	ldr	r1, [r7, #8]
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f000 f98c 	bl	800d3f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	699a      	ldr	r2, [r3, #24]
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	f042 0208 	orr.w	r2, r2, #8
 800d0ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	699a      	ldr	r2, [r3, #24]
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	f022 0204 	bic.w	r2, r2, #4
 800d0fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	6999      	ldr	r1, [r3, #24]
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	691a      	ldr	r2, [r3, #16]
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	430a      	orrs	r2, r1
 800d110:	619a      	str	r2, [r3, #24]
      break;
 800d112:	e0a5      	b.n	800d260 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	68b9      	ldr	r1, [r7, #8]
 800d11a:	4618      	mov	r0, r3
 800d11c:	f000 f9fc 	bl	800d518 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	699a      	ldr	r2, [r3, #24]
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d12e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	699a      	ldr	r2, [r3, #24]
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d13e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	6999      	ldr	r1, [r3, #24]
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	691b      	ldr	r3, [r3, #16]
 800d14a:	021a      	lsls	r2, r3, #8
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	430a      	orrs	r2, r1
 800d152:	619a      	str	r2, [r3, #24]
      break;
 800d154:	e084      	b.n	800d260 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	68b9      	ldr	r1, [r7, #8]
 800d15c:	4618      	mov	r0, r3
 800d15e:	f000 fa65 	bl	800d62c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	69da      	ldr	r2, [r3, #28]
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	f042 0208 	orr.w	r2, r2, #8
 800d170:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	69da      	ldr	r2, [r3, #28]
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	f022 0204 	bic.w	r2, r2, #4
 800d180:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	69d9      	ldr	r1, [r3, #28]
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	691a      	ldr	r2, [r3, #16]
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	430a      	orrs	r2, r1
 800d192:	61da      	str	r2, [r3, #28]
      break;
 800d194:	e064      	b.n	800d260 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	68b9      	ldr	r1, [r7, #8]
 800d19c:	4618      	mov	r0, r3
 800d19e:	f000 facd 	bl	800d73c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	69da      	ldr	r2, [r3, #28]
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d1b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	69da      	ldr	r2, [r3, #28]
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d1c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	69d9      	ldr	r1, [r3, #28]
 800d1c8:	68bb      	ldr	r3, [r7, #8]
 800d1ca:	691b      	ldr	r3, [r3, #16]
 800d1cc:	021a      	lsls	r2, r3, #8
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	430a      	orrs	r2, r1
 800d1d4:	61da      	str	r2, [r3, #28]
      break;
 800d1d6:	e043      	b.n	800d260 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	68b9      	ldr	r1, [r7, #8]
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f000 fb16 	bl	800d810 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	f042 0208 	orr.w	r2, r2, #8
 800d1f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	f022 0204 	bic.w	r2, r2, #4
 800d202:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d20a:	68bb      	ldr	r3, [r7, #8]
 800d20c:	691a      	ldr	r2, [r3, #16]
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	430a      	orrs	r2, r1
 800d214:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d216:	e023      	b.n	800d260 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	68b9      	ldr	r1, [r7, #8]
 800d21e:	4618      	mov	r0, r3
 800d220:	f000 fb5a 	bl	800d8d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d232:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d242:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	691b      	ldr	r3, [r3, #16]
 800d24e:	021a      	lsls	r2, r3, #8
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	430a      	orrs	r2, r1
 800d256:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d258:	e002      	b.n	800d260 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d25a:	2301      	movs	r3, #1
 800d25c:	75fb      	strb	r3, [r7, #23]
      break;
 800d25e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	2200      	movs	r2, #0
 800d264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d268:	7dfb      	ldrb	r3, [r7, #23]
}
 800d26a:	4618      	mov	r0, r3
 800d26c:	3718      	adds	r7, #24
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}
 800d272:	bf00      	nop

0800d274 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d274:	b480      	push	{r7}
 800d276:	b083      	sub	sp, #12
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d27c:	bf00      	nop
 800d27e:	370c      	adds	r7, #12
 800d280:	46bd      	mov	sp, r7
 800d282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d286:	4770      	bx	lr

0800d288 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d288:	b480      	push	{r7}
 800d28a:	b083      	sub	sp, #12
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d290:	bf00      	nop
 800d292:	370c      	adds	r7, #12
 800d294:	46bd      	mov	sp, r7
 800d296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29a:	4770      	bx	lr

0800d29c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d29c:	b480      	push	{r7}
 800d29e:	b083      	sub	sp, #12
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d2a4:	bf00      	nop
 800d2a6:	370c      	adds	r7, #12
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ae:	4770      	bx	lr

0800d2b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	b083      	sub	sp, #12
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d2b8:	bf00      	nop
 800d2ba:	370c      	adds	r7, #12
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c2:	4770      	bx	lr

0800d2c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	b085      	sub	sp, #20
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
 800d2cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	4a40      	ldr	r2, [pc, #256]	; (800d3d8 <TIM_Base_SetConfig+0x114>)
 800d2d8:	4293      	cmp	r3, r2
 800d2da:	d013      	beq.n	800d304 <TIM_Base_SetConfig+0x40>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2e2:	d00f      	beq.n	800d304 <TIM_Base_SetConfig+0x40>
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	4a3d      	ldr	r2, [pc, #244]	; (800d3dc <TIM_Base_SetConfig+0x118>)
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	d00b      	beq.n	800d304 <TIM_Base_SetConfig+0x40>
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	4a3c      	ldr	r2, [pc, #240]	; (800d3e0 <TIM_Base_SetConfig+0x11c>)
 800d2f0:	4293      	cmp	r3, r2
 800d2f2:	d007      	beq.n	800d304 <TIM_Base_SetConfig+0x40>
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	4a3b      	ldr	r2, [pc, #236]	; (800d3e4 <TIM_Base_SetConfig+0x120>)
 800d2f8:	4293      	cmp	r3, r2
 800d2fa:	d003      	beq.n	800d304 <TIM_Base_SetConfig+0x40>
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	4a3a      	ldr	r2, [pc, #232]	; (800d3e8 <TIM_Base_SetConfig+0x124>)
 800d300:	4293      	cmp	r3, r2
 800d302:	d108      	bne.n	800d316 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d30a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	685b      	ldr	r3, [r3, #4]
 800d310:	68fa      	ldr	r2, [r7, #12]
 800d312:	4313      	orrs	r3, r2
 800d314:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	4a2f      	ldr	r2, [pc, #188]	; (800d3d8 <TIM_Base_SetConfig+0x114>)
 800d31a:	4293      	cmp	r3, r2
 800d31c:	d01f      	beq.n	800d35e <TIM_Base_SetConfig+0x9a>
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d324:	d01b      	beq.n	800d35e <TIM_Base_SetConfig+0x9a>
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	4a2c      	ldr	r2, [pc, #176]	; (800d3dc <TIM_Base_SetConfig+0x118>)
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d017      	beq.n	800d35e <TIM_Base_SetConfig+0x9a>
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	4a2b      	ldr	r2, [pc, #172]	; (800d3e0 <TIM_Base_SetConfig+0x11c>)
 800d332:	4293      	cmp	r3, r2
 800d334:	d013      	beq.n	800d35e <TIM_Base_SetConfig+0x9a>
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	4a2a      	ldr	r2, [pc, #168]	; (800d3e4 <TIM_Base_SetConfig+0x120>)
 800d33a:	4293      	cmp	r3, r2
 800d33c:	d00f      	beq.n	800d35e <TIM_Base_SetConfig+0x9a>
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	4a29      	ldr	r2, [pc, #164]	; (800d3e8 <TIM_Base_SetConfig+0x124>)
 800d342:	4293      	cmp	r3, r2
 800d344:	d00b      	beq.n	800d35e <TIM_Base_SetConfig+0x9a>
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	4a28      	ldr	r2, [pc, #160]	; (800d3ec <TIM_Base_SetConfig+0x128>)
 800d34a:	4293      	cmp	r3, r2
 800d34c:	d007      	beq.n	800d35e <TIM_Base_SetConfig+0x9a>
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	4a27      	ldr	r2, [pc, #156]	; (800d3f0 <TIM_Base_SetConfig+0x12c>)
 800d352:	4293      	cmp	r3, r2
 800d354:	d003      	beq.n	800d35e <TIM_Base_SetConfig+0x9a>
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	4a26      	ldr	r2, [pc, #152]	; (800d3f4 <TIM_Base_SetConfig+0x130>)
 800d35a:	4293      	cmp	r3, r2
 800d35c:	d108      	bne.n	800d370 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	68db      	ldr	r3, [r3, #12]
 800d36a:	68fa      	ldr	r2, [r7, #12]
 800d36c:	4313      	orrs	r3, r2
 800d36e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	695b      	ldr	r3, [r3, #20]
 800d37a:	4313      	orrs	r3, r2
 800d37c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	68fa      	ldr	r2, [r7, #12]
 800d382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	689a      	ldr	r2, [r3, #8]
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	681a      	ldr	r2, [r3, #0]
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	4a10      	ldr	r2, [pc, #64]	; (800d3d8 <TIM_Base_SetConfig+0x114>)
 800d398:	4293      	cmp	r3, r2
 800d39a:	d00f      	beq.n	800d3bc <TIM_Base_SetConfig+0xf8>
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	4a12      	ldr	r2, [pc, #72]	; (800d3e8 <TIM_Base_SetConfig+0x124>)
 800d3a0:	4293      	cmp	r3, r2
 800d3a2:	d00b      	beq.n	800d3bc <TIM_Base_SetConfig+0xf8>
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	4a11      	ldr	r2, [pc, #68]	; (800d3ec <TIM_Base_SetConfig+0x128>)
 800d3a8:	4293      	cmp	r3, r2
 800d3aa:	d007      	beq.n	800d3bc <TIM_Base_SetConfig+0xf8>
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	4a10      	ldr	r2, [pc, #64]	; (800d3f0 <TIM_Base_SetConfig+0x12c>)
 800d3b0:	4293      	cmp	r3, r2
 800d3b2:	d003      	beq.n	800d3bc <TIM_Base_SetConfig+0xf8>
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	4a0f      	ldr	r2, [pc, #60]	; (800d3f4 <TIM_Base_SetConfig+0x130>)
 800d3b8:	4293      	cmp	r3, r2
 800d3ba:	d103      	bne.n	800d3c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	691a      	ldr	r2, [r3, #16]
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	615a      	str	r2, [r3, #20]
}
 800d3ca:	bf00      	nop
 800d3cc:	3714      	adds	r7, #20
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d4:	4770      	bx	lr
 800d3d6:	bf00      	nop
 800d3d8:	40010000 	.word	0x40010000
 800d3dc:	40000400 	.word	0x40000400
 800d3e0:	40000800 	.word	0x40000800
 800d3e4:	40000c00 	.word	0x40000c00
 800d3e8:	40010400 	.word	0x40010400
 800d3ec:	40014000 	.word	0x40014000
 800d3f0:	40014400 	.word	0x40014400
 800d3f4:	40014800 	.word	0x40014800

0800d3f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b087      	sub	sp, #28
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6a1b      	ldr	r3, [r3, #32]
 800d406:	f023 0201 	bic.w	r2, r3, #1
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6a1b      	ldr	r3, [r3, #32]
 800d412:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	685b      	ldr	r3, [r3, #4]
 800d418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	699b      	ldr	r3, [r3, #24]
 800d41e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d420:	68fa      	ldr	r2, [r7, #12]
 800d422:	4b37      	ldr	r3, [pc, #220]	; (800d500 <TIM_OC1_SetConfig+0x108>)
 800d424:	4013      	ands	r3, r2
 800d426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	f023 0303 	bic.w	r3, r3, #3
 800d42e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	68fa      	ldr	r2, [r7, #12]
 800d436:	4313      	orrs	r3, r2
 800d438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d43a:	697b      	ldr	r3, [r7, #20]
 800d43c:	f023 0302 	bic.w	r3, r3, #2
 800d440:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	689b      	ldr	r3, [r3, #8]
 800d446:	697a      	ldr	r2, [r7, #20]
 800d448:	4313      	orrs	r3, r2
 800d44a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	4a2d      	ldr	r2, [pc, #180]	; (800d504 <TIM_OC1_SetConfig+0x10c>)
 800d450:	4293      	cmp	r3, r2
 800d452:	d00f      	beq.n	800d474 <TIM_OC1_SetConfig+0x7c>
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	4a2c      	ldr	r2, [pc, #176]	; (800d508 <TIM_OC1_SetConfig+0x110>)
 800d458:	4293      	cmp	r3, r2
 800d45a:	d00b      	beq.n	800d474 <TIM_OC1_SetConfig+0x7c>
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	4a2b      	ldr	r2, [pc, #172]	; (800d50c <TIM_OC1_SetConfig+0x114>)
 800d460:	4293      	cmp	r3, r2
 800d462:	d007      	beq.n	800d474 <TIM_OC1_SetConfig+0x7c>
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	4a2a      	ldr	r2, [pc, #168]	; (800d510 <TIM_OC1_SetConfig+0x118>)
 800d468:	4293      	cmp	r3, r2
 800d46a:	d003      	beq.n	800d474 <TIM_OC1_SetConfig+0x7c>
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	4a29      	ldr	r2, [pc, #164]	; (800d514 <TIM_OC1_SetConfig+0x11c>)
 800d470:	4293      	cmp	r3, r2
 800d472:	d10c      	bne.n	800d48e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	f023 0308 	bic.w	r3, r3, #8
 800d47a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	68db      	ldr	r3, [r3, #12]
 800d480:	697a      	ldr	r2, [r7, #20]
 800d482:	4313      	orrs	r3, r2
 800d484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	f023 0304 	bic.w	r3, r3, #4
 800d48c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	4a1c      	ldr	r2, [pc, #112]	; (800d504 <TIM_OC1_SetConfig+0x10c>)
 800d492:	4293      	cmp	r3, r2
 800d494:	d00f      	beq.n	800d4b6 <TIM_OC1_SetConfig+0xbe>
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	4a1b      	ldr	r2, [pc, #108]	; (800d508 <TIM_OC1_SetConfig+0x110>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d00b      	beq.n	800d4b6 <TIM_OC1_SetConfig+0xbe>
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	4a1a      	ldr	r2, [pc, #104]	; (800d50c <TIM_OC1_SetConfig+0x114>)
 800d4a2:	4293      	cmp	r3, r2
 800d4a4:	d007      	beq.n	800d4b6 <TIM_OC1_SetConfig+0xbe>
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	4a19      	ldr	r2, [pc, #100]	; (800d510 <TIM_OC1_SetConfig+0x118>)
 800d4aa:	4293      	cmp	r3, r2
 800d4ac:	d003      	beq.n	800d4b6 <TIM_OC1_SetConfig+0xbe>
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	4a18      	ldr	r2, [pc, #96]	; (800d514 <TIM_OC1_SetConfig+0x11c>)
 800d4b2:	4293      	cmp	r3, r2
 800d4b4:	d111      	bne.n	800d4da <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d4b6:	693b      	ldr	r3, [r7, #16]
 800d4b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d4bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d4c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	695b      	ldr	r3, [r3, #20]
 800d4ca:	693a      	ldr	r2, [r7, #16]
 800d4cc:	4313      	orrs	r3, r2
 800d4ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	699b      	ldr	r3, [r3, #24]
 800d4d4:	693a      	ldr	r2, [r7, #16]
 800d4d6:	4313      	orrs	r3, r2
 800d4d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	693a      	ldr	r2, [r7, #16]
 800d4de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	68fa      	ldr	r2, [r7, #12]
 800d4e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	685a      	ldr	r2, [r3, #4]
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	697a      	ldr	r2, [r7, #20]
 800d4f2:	621a      	str	r2, [r3, #32]
}
 800d4f4:	bf00      	nop
 800d4f6:	371c      	adds	r7, #28
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr
 800d500:	fffeff8f 	.word	0xfffeff8f
 800d504:	40010000 	.word	0x40010000
 800d508:	40010400 	.word	0x40010400
 800d50c:	40014000 	.word	0x40014000
 800d510:	40014400 	.word	0x40014400
 800d514:	40014800 	.word	0x40014800

0800d518 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d518:	b480      	push	{r7}
 800d51a:	b087      	sub	sp, #28
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
 800d520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6a1b      	ldr	r3, [r3, #32]
 800d526:	f023 0210 	bic.w	r2, r3, #16
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6a1b      	ldr	r3, [r3, #32]
 800d532:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	685b      	ldr	r3, [r3, #4]
 800d538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	699b      	ldr	r3, [r3, #24]
 800d53e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d540:	68fa      	ldr	r2, [r7, #12]
 800d542:	4b34      	ldr	r3, [pc, #208]	; (800d614 <TIM_OC2_SetConfig+0xfc>)
 800d544:	4013      	ands	r3, r2
 800d546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d54e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	021b      	lsls	r3, r3, #8
 800d556:	68fa      	ldr	r2, [r7, #12]
 800d558:	4313      	orrs	r3, r2
 800d55a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	f023 0320 	bic.w	r3, r3, #32
 800d562:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	689b      	ldr	r3, [r3, #8]
 800d568:	011b      	lsls	r3, r3, #4
 800d56a:	697a      	ldr	r2, [r7, #20]
 800d56c:	4313      	orrs	r3, r2
 800d56e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	4a29      	ldr	r2, [pc, #164]	; (800d618 <TIM_OC2_SetConfig+0x100>)
 800d574:	4293      	cmp	r3, r2
 800d576:	d003      	beq.n	800d580 <TIM_OC2_SetConfig+0x68>
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	4a28      	ldr	r2, [pc, #160]	; (800d61c <TIM_OC2_SetConfig+0x104>)
 800d57c:	4293      	cmp	r3, r2
 800d57e:	d10d      	bne.n	800d59c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d580:	697b      	ldr	r3, [r7, #20]
 800d582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d586:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	68db      	ldr	r3, [r3, #12]
 800d58c:	011b      	lsls	r3, r3, #4
 800d58e:	697a      	ldr	r2, [r7, #20]
 800d590:	4313      	orrs	r3, r2
 800d592:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d59a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	4a1e      	ldr	r2, [pc, #120]	; (800d618 <TIM_OC2_SetConfig+0x100>)
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	d00f      	beq.n	800d5c4 <TIM_OC2_SetConfig+0xac>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	4a1d      	ldr	r2, [pc, #116]	; (800d61c <TIM_OC2_SetConfig+0x104>)
 800d5a8:	4293      	cmp	r3, r2
 800d5aa:	d00b      	beq.n	800d5c4 <TIM_OC2_SetConfig+0xac>
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	4a1c      	ldr	r2, [pc, #112]	; (800d620 <TIM_OC2_SetConfig+0x108>)
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	d007      	beq.n	800d5c4 <TIM_OC2_SetConfig+0xac>
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	4a1b      	ldr	r2, [pc, #108]	; (800d624 <TIM_OC2_SetConfig+0x10c>)
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	d003      	beq.n	800d5c4 <TIM_OC2_SetConfig+0xac>
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	4a1a      	ldr	r2, [pc, #104]	; (800d628 <TIM_OC2_SetConfig+0x110>)
 800d5c0:	4293      	cmp	r3, r2
 800d5c2:	d113      	bne.n	800d5ec <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d5c4:	693b      	ldr	r3, [r7, #16]
 800d5c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d5ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d5cc:	693b      	ldr	r3, [r7, #16]
 800d5ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d5d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	695b      	ldr	r3, [r3, #20]
 800d5d8:	009b      	lsls	r3, r3, #2
 800d5da:	693a      	ldr	r2, [r7, #16]
 800d5dc:	4313      	orrs	r3, r2
 800d5de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	699b      	ldr	r3, [r3, #24]
 800d5e4:	009b      	lsls	r3, r3, #2
 800d5e6:	693a      	ldr	r2, [r7, #16]
 800d5e8:	4313      	orrs	r3, r2
 800d5ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	693a      	ldr	r2, [r7, #16]
 800d5f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	68fa      	ldr	r2, [r7, #12]
 800d5f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	685a      	ldr	r2, [r3, #4]
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	697a      	ldr	r2, [r7, #20]
 800d604:	621a      	str	r2, [r3, #32]
}
 800d606:	bf00      	nop
 800d608:	371c      	adds	r7, #28
 800d60a:	46bd      	mov	sp, r7
 800d60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d610:	4770      	bx	lr
 800d612:	bf00      	nop
 800d614:	feff8fff 	.word	0xfeff8fff
 800d618:	40010000 	.word	0x40010000
 800d61c:	40010400 	.word	0x40010400
 800d620:	40014000 	.word	0x40014000
 800d624:	40014400 	.word	0x40014400
 800d628:	40014800 	.word	0x40014800

0800d62c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d62c:	b480      	push	{r7}
 800d62e:	b087      	sub	sp, #28
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
 800d634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	6a1b      	ldr	r3, [r3, #32]
 800d63a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	6a1b      	ldr	r3, [r3, #32]
 800d646:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	685b      	ldr	r3, [r3, #4]
 800d64c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	69db      	ldr	r3, [r3, #28]
 800d652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d654:	68fa      	ldr	r2, [r7, #12]
 800d656:	4b33      	ldr	r3, [pc, #204]	; (800d724 <TIM_OC3_SetConfig+0xf8>)
 800d658:	4013      	ands	r3, r2
 800d65a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	f023 0303 	bic.w	r3, r3, #3
 800d662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	68fa      	ldr	r2, [r7, #12]
 800d66a:	4313      	orrs	r3, r2
 800d66c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d66e:	697b      	ldr	r3, [r7, #20]
 800d670:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d674:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	689b      	ldr	r3, [r3, #8]
 800d67a:	021b      	lsls	r3, r3, #8
 800d67c:	697a      	ldr	r2, [r7, #20]
 800d67e:	4313      	orrs	r3, r2
 800d680:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	4a28      	ldr	r2, [pc, #160]	; (800d728 <TIM_OC3_SetConfig+0xfc>)
 800d686:	4293      	cmp	r3, r2
 800d688:	d003      	beq.n	800d692 <TIM_OC3_SetConfig+0x66>
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	4a27      	ldr	r2, [pc, #156]	; (800d72c <TIM_OC3_SetConfig+0x100>)
 800d68e:	4293      	cmp	r3, r2
 800d690:	d10d      	bne.n	800d6ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d698:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	68db      	ldr	r3, [r3, #12]
 800d69e:	021b      	lsls	r3, r3, #8
 800d6a0:	697a      	ldr	r2, [r7, #20]
 800d6a2:	4313      	orrs	r3, r2
 800d6a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d6ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	4a1d      	ldr	r2, [pc, #116]	; (800d728 <TIM_OC3_SetConfig+0xfc>)
 800d6b2:	4293      	cmp	r3, r2
 800d6b4:	d00f      	beq.n	800d6d6 <TIM_OC3_SetConfig+0xaa>
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	4a1c      	ldr	r2, [pc, #112]	; (800d72c <TIM_OC3_SetConfig+0x100>)
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d00b      	beq.n	800d6d6 <TIM_OC3_SetConfig+0xaa>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	4a1b      	ldr	r2, [pc, #108]	; (800d730 <TIM_OC3_SetConfig+0x104>)
 800d6c2:	4293      	cmp	r3, r2
 800d6c4:	d007      	beq.n	800d6d6 <TIM_OC3_SetConfig+0xaa>
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	4a1a      	ldr	r2, [pc, #104]	; (800d734 <TIM_OC3_SetConfig+0x108>)
 800d6ca:	4293      	cmp	r3, r2
 800d6cc:	d003      	beq.n	800d6d6 <TIM_OC3_SetConfig+0xaa>
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	4a19      	ldr	r2, [pc, #100]	; (800d738 <TIM_OC3_SetConfig+0x10c>)
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	d113      	bne.n	800d6fe <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d6d6:	693b      	ldr	r3, [r7, #16]
 800d6d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d6dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d6e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	695b      	ldr	r3, [r3, #20]
 800d6ea:	011b      	lsls	r3, r3, #4
 800d6ec:	693a      	ldr	r2, [r7, #16]
 800d6ee:	4313      	orrs	r3, r2
 800d6f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	699b      	ldr	r3, [r3, #24]
 800d6f6:	011b      	lsls	r3, r3, #4
 800d6f8:	693a      	ldr	r2, [r7, #16]
 800d6fa:	4313      	orrs	r3, r2
 800d6fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	693a      	ldr	r2, [r7, #16]
 800d702:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	68fa      	ldr	r2, [r7, #12]
 800d708:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	685a      	ldr	r2, [r3, #4]
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	697a      	ldr	r2, [r7, #20]
 800d716:	621a      	str	r2, [r3, #32]
}
 800d718:	bf00      	nop
 800d71a:	371c      	adds	r7, #28
 800d71c:	46bd      	mov	sp, r7
 800d71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d722:	4770      	bx	lr
 800d724:	fffeff8f 	.word	0xfffeff8f
 800d728:	40010000 	.word	0x40010000
 800d72c:	40010400 	.word	0x40010400
 800d730:	40014000 	.word	0x40014000
 800d734:	40014400 	.word	0x40014400
 800d738:	40014800 	.word	0x40014800

0800d73c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d73c:	b480      	push	{r7}
 800d73e:	b087      	sub	sp, #28
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
 800d744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6a1b      	ldr	r3, [r3, #32]
 800d74a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6a1b      	ldr	r3, [r3, #32]
 800d756:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	685b      	ldr	r3, [r3, #4]
 800d75c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	69db      	ldr	r3, [r3, #28]
 800d762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d764:	68fa      	ldr	r2, [r7, #12]
 800d766:	4b24      	ldr	r3, [pc, #144]	; (800d7f8 <TIM_OC4_SetConfig+0xbc>)
 800d768:	4013      	ands	r3, r2
 800d76a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d772:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	021b      	lsls	r3, r3, #8
 800d77a:	68fa      	ldr	r2, [r7, #12]
 800d77c:	4313      	orrs	r3, r2
 800d77e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d786:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	689b      	ldr	r3, [r3, #8]
 800d78c:	031b      	lsls	r3, r3, #12
 800d78e:	693a      	ldr	r2, [r7, #16]
 800d790:	4313      	orrs	r3, r2
 800d792:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	4a19      	ldr	r2, [pc, #100]	; (800d7fc <TIM_OC4_SetConfig+0xc0>)
 800d798:	4293      	cmp	r3, r2
 800d79a:	d00f      	beq.n	800d7bc <TIM_OC4_SetConfig+0x80>
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	4a18      	ldr	r2, [pc, #96]	; (800d800 <TIM_OC4_SetConfig+0xc4>)
 800d7a0:	4293      	cmp	r3, r2
 800d7a2:	d00b      	beq.n	800d7bc <TIM_OC4_SetConfig+0x80>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	4a17      	ldr	r2, [pc, #92]	; (800d804 <TIM_OC4_SetConfig+0xc8>)
 800d7a8:	4293      	cmp	r3, r2
 800d7aa:	d007      	beq.n	800d7bc <TIM_OC4_SetConfig+0x80>
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	4a16      	ldr	r2, [pc, #88]	; (800d808 <TIM_OC4_SetConfig+0xcc>)
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	d003      	beq.n	800d7bc <TIM_OC4_SetConfig+0x80>
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	4a15      	ldr	r2, [pc, #84]	; (800d80c <TIM_OC4_SetConfig+0xd0>)
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	d109      	bne.n	800d7d0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d7c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	695b      	ldr	r3, [r3, #20]
 800d7c8:	019b      	lsls	r3, r3, #6
 800d7ca:	697a      	ldr	r2, [r7, #20]
 800d7cc:	4313      	orrs	r3, r2
 800d7ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	697a      	ldr	r2, [r7, #20]
 800d7d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	68fa      	ldr	r2, [r7, #12]
 800d7da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	685a      	ldr	r2, [r3, #4]
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	693a      	ldr	r2, [r7, #16]
 800d7e8:	621a      	str	r2, [r3, #32]
}
 800d7ea:	bf00      	nop
 800d7ec:	371c      	adds	r7, #28
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f4:	4770      	bx	lr
 800d7f6:	bf00      	nop
 800d7f8:	feff8fff 	.word	0xfeff8fff
 800d7fc:	40010000 	.word	0x40010000
 800d800:	40010400 	.word	0x40010400
 800d804:	40014000 	.word	0x40014000
 800d808:	40014400 	.word	0x40014400
 800d80c:	40014800 	.word	0x40014800

0800d810 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d810:	b480      	push	{r7}
 800d812:	b087      	sub	sp, #28
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	6a1b      	ldr	r3, [r3, #32]
 800d81e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6a1b      	ldr	r3, [r3, #32]
 800d82a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	685b      	ldr	r3, [r3, #4]
 800d830:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d838:	68fa      	ldr	r2, [r7, #12]
 800d83a:	4b21      	ldr	r3, [pc, #132]	; (800d8c0 <TIM_OC5_SetConfig+0xb0>)
 800d83c:	4013      	ands	r3, r2
 800d83e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	68fa      	ldr	r2, [r7, #12]
 800d846:	4313      	orrs	r3, r2
 800d848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d84a:	693b      	ldr	r3, [r7, #16]
 800d84c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d850:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	689b      	ldr	r3, [r3, #8]
 800d856:	041b      	lsls	r3, r3, #16
 800d858:	693a      	ldr	r2, [r7, #16]
 800d85a:	4313      	orrs	r3, r2
 800d85c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	4a18      	ldr	r2, [pc, #96]	; (800d8c4 <TIM_OC5_SetConfig+0xb4>)
 800d862:	4293      	cmp	r3, r2
 800d864:	d00f      	beq.n	800d886 <TIM_OC5_SetConfig+0x76>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	4a17      	ldr	r2, [pc, #92]	; (800d8c8 <TIM_OC5_SetConfig+0xb8>)
 800d86a:	4293      	cmp	r3, r2
 800d86c:	d00b      	beq.n	800d886 <TIM_OC5_SetConfig+0x76>
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	4a16      	ldr	r2, [pc, #88]	; (800d8cc <TIM_OC5_SetConfig+0xbc>)
 800d872:	4293      	cmp	r3, r2
 800d874:	d007      	beq.n	800d886 <TIM_OC5_SetConfig+0x76>
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	4a15      	ldr	r2, [pc, #84]	; (800d8d0 <TIM_OC5_SetConfig+0xc0>)
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d003      	beq.n	800d886 <TIM_OC5_SetConfig+0x76>
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	4a14      	ldr	r2, [pc, #80]	; (800d8d4 <TIM_OC5_SetConfig+0xc4>)
 800d882:	4293      	cmp	r3, r2
 800d884:	d109      	bne.n	800d89a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d88c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	695b      	ldr	r3, [r3, #20]
 800d892:	021b      	lsls	r3, r3, #8
 800d894:	697a      	ldr	r2, [r7, #20]
 800d896:	4313      	orrs	r3, r2
 800d898:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	697a      	ldr	r2, [r7, #20]
 800d89e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	68fa      	ldr	r2, [r7, #12]
 800d8a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	685a      	ldr	r2, [r3, #4]
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	693a      	ldr	r2, [r7, #16]
 800d8b2:	621a      	str	r2, [r3, #32]
}
 800d8b4:	bf00      	nop
 800d8b6:	371c      	adds	r7, #28
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8be:	4770      	bx	lr
 800d8c0:	fffeff8f 	.word	0xfffeff8f
 800d8c4:	40010000 	.word	0x40010000
 800d8c8:	40010400 	.word	0x40010400
 800d8cc:	40014000 	.word	0x40014000
 800d8d0:	40014400 	.word	0x40014400
 800d8d4:	40014800 	.word	0x40014800

0800d8d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d8d8:	b480      	push	{r7}
 800d8da:	b087      	sub	sp, #28
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
 800d8e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6a1b      	ldr	r3, [r3, #32]
 800d8e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6a1b      	ldr	r3, [r3, #32]
 800d8f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	685b      	ldr	r3, [r3, #4]
 800d8f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d900:	68fa      	ldr	r2, [r7, #12]
 800d902:	4b22      	ldr	r3, [pc, #136]	; (800d98c <TIM_OC6_SetConfig+0xb4>)
 800d904:	4013      	ands	r3, r2
 800d906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	021b      	lsls	r3, r3, #8
 800d90e:	68fa      	ldr	r2, [r7, #12]
 800d910:	4313      	orrs	r3, r2
 800d912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d914:	693b      	ldr	r3, [r7, #16]
 800d916:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d91a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	689b      	ldr	r3, [r3, #8]
 800d920:	051b      	lsls	r3, r3, #20
 800d922:	693a      	ldr	r2, [r7, #16]
 800d924:	4313      	orrs	r3, r2
 800d926:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	4a19      	ldr	r2, [pc, #100]	; (800d990 <TIM_OC6_SetConfig+0xb8>)
 800d92c:	4293      	cmp	r3, r2
 800d92e:	d00f      	beq.n	800d950 <TIM_OC6_SetConfig+0x78>
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	4a18      	ldr	r2, [pc, #96]	; (800d994 <TIM_OC6_SetConfig+0xbc>)
 800d934:	4293      	cmp	r3, r2
 800d936:	d00b      	beq.n	800d950 <TIM_OC6_SetConfig+0x78>
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	4a17      	ldr	r2, [pc, #92]	; (800d998 <TIM_OC6_SetConfig+0xc0>)
 800d93c:	4293      	cmp	r3, r2
 800d93e:	d007      	beq.n	800d950 <TIM_OC6_SetConfig+0x78>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	4a16      	ldr	r2, [pc, #88]	; (800d99c <TIM_OC6_SetConfig+0xc4>)
 800d944:	4293      	cmp	r3, r2
 800d946:	d003      	beq.n	800d950 <TIM_OC6_SetConfig+0x78>
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	4a15      	ldr	r2, [pc, #84]	; (800d9a0 <TIM_OC6_SetConfig+0xc8>)
 800d94c:	4293      	cmp	r3, r2
 800d94e:	d109      	bne.n	800d964 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d956:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	695b      	ldr	r3, [r3, #20]
 800d95c:	029b      	lsls	r3, r3, #10
 800d95e:	697a      	ldr	r2, [r7, #20]
 800d960:	4313      	orrs	r3, r2
 800d962:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	697a      	ldr	r2, [r7, #20]
 800d968:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	68fa      	ldr	r2, [r7, #12]
 800d96e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	685a      	ldr	r2, [r3, #4]
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	693a      	ldr	r2, [r7, #16]
 800d97c:	621a      	str	r2, [r3, #32]
}
 800d97e:	bf00      	nop
 800d980:	371c      	adds	r7, #28
 800d982:	46bd      	mov	sp, r7
 800d984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d988:	4770      	bx	lr
 800d98a:	bf00      	nop
 800d98c:	feff8fff 	.word	0xfeff8fff
 800d990:	40010000 	.word	0x40010000
 800d994:	40010400 	.word	0x40010400
 800d998:	40014000 	.word	0x40014000
 800d99c:	40014400 	.word	0x40014400
 800d9a0:	40014800 	.word	0x40014800

0800d9a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	b087      	sub	sp, #28
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	60f8      	str	r0, [r7, #12]
 800d9ac:	60b9      	str	r1, [r7, #8]
 800d9ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	f003 031f 	and.w	r3, r3, #31
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	fa02 f303 	lsl.w	r3, r2, r3
 800d9bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	6a1a      	ldr	r2, [r3, #32]
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	43db      	mvns	r3, r3
 800d9c6:	401a      	ands	r2, r3
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	6a1a      	ldr	r2, [r3, #32]
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	f003 031f 	and.w	r3, r3, #31
 800d9d6:	6879      	ldr	r1, [r7, #4]
 800d9d8:	fa01 f303 	lsl.w	r3, r1, r3
 800d9dc:	431a      	orrs	r2, r3
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	621a      	str	r2, [r3, #32]
}
 800d9e2:	bf00      	nop
 800d9e4:	371c      	adds	r7, #28
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ec:	4770      	bx	lr
	...

0800d9f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d9f0:	b480      	push	{r7}
 800d9f2:	b085      	sub	sp, #20
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da00:	2b01      	cmp	r3, #1
 800da02:	d101      	bne.n	800da08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800da04:	2302      	movs	r3, #2
 800da06:	e06d      	b.n	800dae4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2201      	movs	r2, #1
 800da0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2202      	movs	r2, #2
 800da14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	685b      	ldr	r3, [r3, #4]
 800da1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	689b      	ldr	r3, [r3, #8]
 800da26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	4a30      	ldr	r2, [pc, #192]	; (800daf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800da2e:	4293      	cmp	r3, r2
 800da30:	d004      	beq.n	800da3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	4a2f      	ldr	r2, [pc, #188]	; (800daf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800da38:	4293      	cmp	r3, r2
 800da3a:	d108      	bne.n	800da4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800da42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	685b      	ldr	r3, [r3, #4]
 800da48:	68fa      	ldr	r2, [r7, #12]
 800da4a:	4313      	orrs	r3, r2
 800da4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	68fa      	ldr	r2, [r7, #12]
 800da5c:	4313      	orrs	r3, r2
 800da5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	68fa      	ldr	r2, [r7, #12]
 800da66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	4a20      	ldr	r2, [pc, #128]	; (800daf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800da6e:	4293      	cmp	r3, r2
 800da70:	d022      	beq.n	800dab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da7a:	d01d      	beq.n	800dab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	4a1d      	ldr	r2, [pc, #116]	; (800daf8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800da82:	4293      	cmp	r3, r2
 800da84:	d018      	beq.n	800dab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	4a1c      	ldr	r2, [pc, #112]	; (800dafc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800da8c:	4293      	cmp	r3, r2
 800da8e:	d013      	beq.n	800dab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4a1a      	ldr	r2, [pc, #104]	; (800db00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d00e      	beq.n	800dab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	4a15      	ldr	r2, [pc, #84]	; (800daf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d009      	beq.n	800dab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	4a16      	ldr	r2, [pc, #88]	; (800db04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d004      	beq.n	800dab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	4a15      	ldr	r2, [pc, #84]	; (800db08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dab4:	4293      	cmp	r3, r2
 800dab6:	d10c      	bne.n	800dad2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dab8:	68bb      	ldr	r3, [r7, #8]
 800daba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dabe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	689b      	ldr	r3, [r3, #8]
 800dac4:	68ba      	ldr	r2, [r7, #8]
 800dac6:	4313      	orrs	r3, r2
 800dac8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	68ba      	ldr	r2, [r7, #8]
 800dad0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2201      	movs	r2, #1
 800dad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2200      	movs	r2, #0
 800dade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dae2:	2300      	movs	r3, #0
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3714      	adds	r7, #20
 800dae8:	46bd      	mov	sp, r7
 800daea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daee:	4770      	bx	lr
 800daf0:	40010000 	.word	0x40010000
 800daf4:	40010400 	.word	0x40010400
 800daf8:	40000400 	.word	0x40000400
 800dafc:	40000800 	.word	0x40000800
 800db00:	40000c00 	.word	0x40000c00
 800db04:	40001800 	.word	0x40001800
 800db08:	40014000 	.word	0x40014000

0800db0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800db0c:	b480      	push	{r7}
 800db0e:	b085      	sub	sp, #20
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800db16:	2300      	movs	r3, #0
 800db18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db20:	2b01      	cmp	r3, #1
 800db22:	d101      	bne.n	800db28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800db24:	2302      	movs	r3, #2
 800db26:	e065      	b.n	800dbf4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2201      	movs	r2, #1
 800db2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	68db      	ldr	r3, [r3, #12]
 800db3a:	4313      	orrs	r3, r2
 800db3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	689b      	ldr	r3, [r3, #8]
 800db48:	4313      	orrs	r3, r2
 800db4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	685b      	ldr	r3, [r3, #4]
 800db56:	4313      	orrs	r3, r2
 800db58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	4313      	orrs	r3, r2
 800db66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	691b      	ldr	r3, [r3, #16]
 800db72:	4313      	orrs	r3, r2
 800db74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	695b      	ldr	r3, [r3, #20]
 800db80:	4313      	orrs	r3, r2
 800db82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db8e:	4313      	orrs	r3, r2
 800db90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	699b      	ldr	r3, [r3, #24]
 800db9c:	041b      	lsls	r3, r3, #16
 800db9e:	4313      	orrs	r3, r2
 800dba0:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	4a16      	ldr	r2, [pc, #88]	; (800dc00 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	d004      	beq.n	800dbb6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	4a14      	ldr	r2, [pc, #80]	; (800dc04 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800dbb2:	4293      	cmp	r3, r2
 800dbb4:	d115      	bne.n	800dbe2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbc0:	051b      	lsls	r3, r3, #20
 800dbc2:	4313      	orrs	r3, r2
 800dbc4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	69db      	ldr	r3, [r3, #28]
 800dbd0:	4313      	orrs	r3, r2
 800dbd2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	6a1b      	ldr	r3, [r3, #32]
 800dbde:	4313      	orrs	r3, r2
 800dbe0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	68fa      	ldr	r2, [r7, #12]
 800dbe8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2200      	movs	r2, #0
 800dbee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dbf2:	2300      	movs	r3, #0
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	3714      	adds	r7, #20
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfe:	4770      	bx	lr
 800dc00:	40010000 	.word	0x40010000
 800dc04:	40010400 	.word	0x40010400

0800dc08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b083      	sub	sp, #12
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dc10:	bf00      	nop
 800dc12:	370c      	adds	r7, #12
 800dc14:	46bd      	mov	sp, r7
 800dc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1a:	4770      	bx	lr

0800dc1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dc1c:	b480      	push	{r7}
 800dc1e:	b083      	sub	sp, #12
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dc24:	bf00      	nop
 800dc26:	370c      	adds	r7, #12
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2e:	4770      	bx	lr

0800dc30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dc30:	b480      	push	{r7}
 800dc32:	b083      	sub	sp, #12
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dc38:	bf00      	nop
 800dc3a:	370c      	adds	r7, #12
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc42:	4770      	bx	lr

0800dc44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b082      	sub	sp, #8
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d101      	bne.n	800dc56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dc52:	2301      	movs	r3, #1
 800dc54:	e042      	b.n	800dcdc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d106      	bne.n	800dc6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2200      	movs	r2, #0
 800dc64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f7f4 fb63 	bl	8002334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2224      	movs	r2, #36	; 0x24
 800dc72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	681a      	ldr	r2, [r3, #0]
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	f022 0201 	bic.w	r2, r2, #1
 800dc84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f000 f82c 	bl	800dce4 <UART_SetConfig>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	2b01      	cmp	r3, #1
 800dc90:	d101      	bne.n	800dc96 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800dc92:	2301      	movs	r3, #1
 800dc94:	e022      	b.n	800dcdc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d002      	beq.n	800dca4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800dc9e:	6878      	ldr	r0, [r7, #4]
 800dca0:	f000 fd88 	bl	800e7b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	685a      	ldr	r2, [r3, #4]
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dcb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	689a      	ldr	r2, [r3, #8]
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dcc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	681a      	ldr	r2, [r3, #0]
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	f042 0201 	orr.w	r2, r2, #1
 800dcd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dcd4:	6878      	ldr	r0, [r7, #4]
 800dcd6:	f000 fe0f 	bl	800e8f8 <UART_CheckIdleState>
 800dcda:	4603      	mov	r3, r0
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3708      	adds	r7, #8
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dce8:	b092      	sub	sp, #72	; 0x48
 800dcea:	af00      	add	r7, sp, #0
 800dcec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dcf4:	697b      	ldr	r3, [r7, #20]
 800dcf6:	689a      	ldr	r2, [r3, #8]
 800dcf8:	697b      	ldr	r3, [r7, #20]
 800dcfa:	691b      	ldr	r3, [r3, #16]
 800dcfc:	431a      	orrs	r2, r3
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	695b      	ldr	r3, [r3, #20]
 800dd02:	431a      	orrs	r2, r3
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	69db      	ldr	r3, [r3, #28]
 800dd08:	4313      	orrs	r3, r2
 800dd0a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dd0c:	697b      	ldr	r3, [r7, #20]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	681a      	ldr	r2, [r3, #0]
 800dd12:	4bbe      	ldr	r3, [pc, #760]	; (800e00c <UART_SetConfig+0x328>)
 800dd14:	4013      	ands	r3, r2
 800dd16:	697a      	ldr	r2, [r7, #20]
 800dd18:	6812      	ldr	r2, [r2, #0]
 800dd1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dd1c:	430b      	orrs	r3, r1
 800dd1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	685b      	ldr	r3, [r3, #4]
 800dd26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	68da      	ldr	r2, [r3, #12]
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	430a      	orrs	r2, r1
 800dd34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dd36:	697b      	ldr	r3, [r7, #20]
 800dd38:	699b      	ldr	r3, [r3, #24]
 800dd3a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dd3c:	697b      	ldr	r3, [r7, #20]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	4ab3      	ldr	r2, [pc, #716]	; (800e010 <UART_SetConfig+0x32c>)
 800dd42:	4293      	cmp	r3, r2
 800dd44:	d004      	beq.n	800dd50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	6a1b      	ldr	r3, [r3, #32]
 800dd4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd4c:	4313      	orrs	r3, r2
 800dd4e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	689a      	ldr	r2, [r3, #8]
 800dd56:	4baf      	ldr	r3, [pc, #700]	; (800e014 <UART_SetConfig+0x330>)
 800dd58:	4013      	ands	r3, r2
 800dd5a:	697a      	ldr	r2, [r7, #20]
 800dd5c:	6812      	ldr	r2, [r2, #0]
 800dd5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dd60:	430b      	orrs	r3, r1
 800dd62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800dd64:	697b      	ldr	r3, [r7, #20]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd6a:	f023 010f 	bic.w	r1, r3, #15
 800dd6e:	697b      	ldr	r3, [r7, #20]
 800dd70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd72:	697b      	ldr	r3, [r7, #20]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	430a      	orrs	r2, r1
 800dd78:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	4aa6      	ldr	r2, [pc, #664]	; (800e018 <UART_SetConfig+0x334>)
 800dd80:	4293      	cmp	r3, r2
 800dd82:	d177      	bne.n	800de74 <UART_SetConfig+0x190>
 800dd84:	4ba5      	ldr	r3, [pc, #660]	; (800e01c <UART_SetConfig+0x338>)
 800dd86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dd8c:	2b28      	cmp	r3, #40	; 0x28
 800dd8e:	d86d      	bhi.n	800de6c <UART_SetConfig+0x188>
 800dd90:	a201      	add	r2, pc, #4	; (adr r2, 800dd98 <UART_SetConfig+0xb4>)
 800dd92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd96:	bf00      	nop
 800dd98:	0800de3d 	.word	0x0800de3d
 800dd9c:	0800de6d 	.word	0x0800de6d
 800dda0:	0800de6d 	.word	0x0800de6d
 800dda4:	0800de6d 	.word	0x0800de6d
 800dda8:	0800de6d 	.word	0x0800de6d
 800ddac:	0800de6d 	.word	0x0800de6d
 800ddb0:	0800de6d 	.word	0x0800de6d
 800ddb4:	0800de6d 	.word	0x0800de6d
 800ddb8:	0800de45 	.word	0x0800de45
 800ddbc:	0800de6d 	.word	0x0800de6d
 800ddc0:	0800de6d 	.word	0x0800de6d
 800ddc4:	0800de6d 	.word	0x0800de6d
 800ddc8:	0800de6d 	.word	0x0800de6d
 800ddcc:	0800de6d 	.word	0x0800de6d
 800ddd0:	0800de6d 	.word	0x0800de6d
 800ddd4:	0800de6d 	.word	0x0800de6d
 800ddd8:	0800de4d 	.word	0x0800de4d
 800dddc:	0800de6d 	.word	0x0800de6d
 800dde0:	0800de6d 	.word	0x0800de6d
 800dde4:	0800de6d 	.word	0x0800de6d
 800dde8:	0800de6d 	.word	0x0800de6d
 800ddec:	0800de6d 	.word	0x0800de6d
 800ddf0:	0800de6d 	.word	0x0800de6d
 800ddf4:	0800de6d 	.word	0x0800de6d
 800ddf8:	0800de55 	.word	0x0800de55
 800ddfc:	0800de6d 	.word	0x0800de6d
 800de00:	0800de6d 	.word	0x0800de6d
 800de04:	0800de6d 	.word	0x0800de6d
 800de08:	0800de6d 	.word	0x0800de6d
 800de0c:	0800de6d 	.word	0x0800de6d
 800de10:	0800de6d 	.word	0x0800de6d
 800de14:	0800de6d 	.word	0x0800de6d
 800de18:	0800de5d 	.word	0x0800de5d
 800de1c:	0800de6d 	.word	0x0800de6d
 800de20:	0800de6d 	.word	0x0800de6d
 800de24:	0800de6d 	.word	0x0800de6d
 800de28:	0800de6d 	.word	0x0800de6d
 800de2c:	0800de6d 	.word	0x0800de6d
 800de30:	0800de6d 	.word	0x0800de6d
 800de34:	0800de6d 	.word	0x0800de6d
 800de38:	0800de65 	.word	0x0800de65
 800de3c:	2301      	movs	r3, #1
 800de3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de42:	e222      	b.n	800e28a <UART_SetConfig+0x5a6>
 800de44:	2304      	movs	r3, #4
 800de46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de4a:	e21e      	b.n	800e28a <UART_SetConfig+0x5a6>
 800de4c:	2308      	movs	r3, #8
 800de4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de52:	e21a      	b.n	800e28a <UART_SetConfig+0x5a6>
 800de54:	2310      	movs	r3, #16
 800de56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de5a:	e216      	b.n	800e28a <UART_SetConfig+0x5a6>
 800de5c:	2320      	movs	r3, #32
 800de5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de62:	e212      	b.n	800e28a <UART_SetConfig+0x5a6>
 800de64:	2340      	movs	r3, #64	; 0x40
 800de66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de6a:	e20e      	b.n	800e28a <UART_SetConfig+0x5a6>
 800de6c:	2380      	movs	r3, #128	; 0x80
 800de6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de72:	e20a      	b.n	800e28a <UART_SetConfig+0x5a6>
 800de74:	697b      	ldr	r3, [r7, #20]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	4a69      	ldr	r2, [pc, #420]	; (800e020 <UART_SetConfig+0x33c>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d130      	bne.n	800dee0 <UART_SetConfig+0x1fc>
 800de7e:	4b67      	ldr	r3, [pc, #412]	; (800e01c <UART_SetConfig+0x338>)
 800de80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de82:	f003 0307 	and.w	r3, r3, #7
 800de86:	2b05      	cmp	r3, #5
 800de88:	d826      	bhi.n	800ded8 <UART_SetConfig+0x1f4>
 800de8a:	a201      	add	r2, pc, #4	; (adr r2, 800de90 <UART_SetConfig+0x1ac>)
 800de8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de90:	0800dea9 	.word	0x0800dea9
 800de94:	0800deb1 	.word	0x0800deb1
 800de98:	0800deb9 	.word	0x0800deb9
 800de9c:	0800dec1 	.word	0x0800dec1
 800dea0:	0800dec9 	.word	0x0800dec9
 800dea4:	0800ded1 	.word	0x0800ded1
 800dea8:	2300      	movs	r3, #0
 800deaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deae:	e1ec      	b.n	800e28a <UART_SetConfig+0x5a6>
 800deb0:	2304      	movs	r3, #4
 800deb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deb6:	e1e8      	b.n	800e28a <UART_SetConfig+0x5a6>
 800deb8:	2308      	movs	r3, #8
 800deba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800debe:	e1e4      	b.n	800e28a <UART_SetConfig+0x5a6>
 800dec0:	2310      	movs	r3, #16
 800dec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dec6:	e1e0      	b.n	800e28a <UART_SetConfig+0x5a6>
 800dec8:	2320      	movs	r3, #32
 800deca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dece:	e1dc      	b.n	800e28a <UART_SetConfig+0x5a6>
 800ded0:	2340      	movs	r3, #64	; 0x40
 800ded2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ded6:	e1d8      	b.n	800e28a <UART_SetConfig+0x5a6>
 800ded8:	2380      	movs	r3, #128	; 0x80
 800deda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dede:	e1d4      	b.n	800e28a <UART_SetConfig+0x5a6>
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	4a4f      	ldr	r2, [pc, #316]	; (800e024 <UART_SetConfig+0x340>)
 800dee6:	4293      	cmp	r3, r2
 800dee8:	d130      	bne.n	800df4c <UART_SetConfig+0x268>
 800deea:	4b4c      	ldr	r3, [pc, #304]	; (800e01c <UART_SetConfig+0x338>)
 800deec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800deee:	f003 0307 	and.w	r3, r3, #7
 800def2:	2b05      	cmp	r3, #5
 800def4:	d826      	bhi.n	800df44 <UART_SetConfig+0x260>
 800def6:	a201      	add	r2, pc, #4	; (adr r2, 800defc <UART_SetConfig+0x218>)
 800def8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800defc:	0800df15 	.word	0x0800df15
 800df00:	0800df1d 	.word	0x0800df1d
 800df04:	0800df25 	.word	0x0800df25
 800df08:	0800df2d 	.word	0x0800df2d
 800df0c:	0800df35 	.word	0x0800df35
 800df10:	0800df3d 	.word	0x0800df3d
 800df14:	2300      	movs	r3, #0
 800df16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df1a:	e1b6      	b.n	800e28a <UART_SetConfig+0x5a6>
 800df1c:	2304      	movs	r3, #4
 800df1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df22:	e1b2      	b.n	800e28a <UART_SetConfig+0x5a6>
 800df24:	2308      	movs	r3, #8
 800df26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df2a:	e1ae      	b.n	800e28a <UART_SetConfig+0x5a6>
 800df2c:	2310      	movs	r3, #16
 800df2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df32:	e1aa      	b.n	800e28a <UART_SetConfig+0x5a6>
 800df34:	2320      	movs	r3, #32
 800df36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df3a:	e1a6      	b.n	800e28a <UART_SetConfig+0x5a6>
 800df3c:	2340      	movs	r3, #64	; 0x40
 800df3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df42:	e1a2      	b.n	800e28a <UART_SetConfig+0x5a6>
 800df44:	2380      	movs	r3, #128	; 0x80
 800df46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df4a:	e19e      	b.n	800e28a <UART_SetConfig+0x5a6>
 800df4c:	697b      	ldr	r3, [r7, #20]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	4a35      	ldr	r2, [pc, #212]	; (800e028 <UART_SetConfig+0x344>)
 800df52:	4293      	cmp	r3, r2
 800df54:	d130      	bne.n	800dfb8 <UART_SetConfig+0x2d4>
 800df56:	4b31      	ldr	r3, [pc, #196]	; (800e01c <UART_SetConfig+0x338>)
 800df58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df5a:	f003 0307 	and.w	r3, r3, #7
 800df5e:	2b05      	cmp	r3, #5
 800df60:	d826      	bhi.n	800dfb0 <UART_SetConfig+0x2cc>
 800df62:	a201      	add	r2, pc, #4	; (adr r2, 800df68 <UART_SetConfig+0x284>)
 800df64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df68:	0800df81 	.word	0x0800df81
 800df6c:	0800df89 	.word	0x0800df89
 800df70:	0800df91 	.word	0x0800df91
 800df74:	0800df99 	.word	0x0800df99
 800df78:	0800dfa1 	.word	0x0800dfa1
 800df7c:	0800dfa9 	.word	0x0800dfa9
 800df80:	2300      	movs	r3, #0
 800df82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df86:	e180      	b.n	800e28a <UART_SetConfig+0x5a6>
 800df88:	2304      	movs	r3, #4
 800df8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df8e:	e17c      	b.n	800e28a <UART_SetConfig+0x5a6>
 800df90:	2308      	movs	r3, #8
 800df92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df96:	e178      	b.n	800e28a <UART_SetConfig+0x5a6>
 800df98:	2310      	movs	r3, #16
 800df9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df9e:	e174      	b.n	800e28a <UART_SetConfig+0x5a6>
 800dfa0:	2320      	movs	r3, #32
 800dfa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfa6:	e170      	b.n	800e28a <UART_SetConfig+0x5a6>
 800dfa8:	2340      	movs	r3, #64	; 0x40
 800dfaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfae:	e16c      	b.n	800e28a <UART_SetConfig+0x5a6>
 800dfb0:	2380      	movs	r3, #128	; 0x80
 800dfb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfb6:	e168      	b.n	800e28a <UART_SetConfig+0x5a6>
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	4a1b      	ldr	r2, [pc, #108]	; (800e02c <UART_SetConfig+0x348>)
 800dfbe:	4293      	cmp	r3, r2
 800dfc0:	d142      	bne.n	800e048 <UART_SetConfig+0x364>
 800dfc2:	4b16      	ldr	r3, [pc, #88]	; (800e01c <UART_SetConfig+0x338>)
 800dfc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfc6:	f003 0307 	and.w	r3, r3, #7
 800dfca:	2b05      	cmp	r3, #5
 800dfcc:	d838      	bhi.n	800e040 <UART_SetConfig+0x35c>
 800dfce:	a201      	add	r2, pc, #4	; (adr r2, 800dfd4 <UART_SetConfig+0x2f0>)
 800dfd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfd4:	0800dfed 	.word	0x0800dfed
 800dfd8:	0800dff5 	.word	0x0800dff5
 800dfdc:	0800dffd 	.word	0x0800dffd
 800dfe0:	0800e005 	.word	0x0800e005
 800dfe4:	0800e031 	.word	0x0800e031
 800dfe8:	0800e039 	.word	0x0800e039
 800dfec:	2300      	movs	r3, #0
 800dfee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dff2:	e14a      	b.n	800e28a <UART_SetConfig+0x5a6>
 800dff4:	2304      	movs	r3, #4
 800dff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dffa:	e146      	b.n	800e28a <UART_SetConfig+0x5a6>
 800dffc:	2308      	movs	r3, #8
 800dffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e002:	e142      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e004:	2310      	movs	r3, #16
 800e006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e00a:	e13e      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e00c:	cfff69f3 	.word	0xcfff69f3
 800e010:	58000c00 	.word	0x58000c00
 800e014:	11fff4ff 	.word	0x11fff4ff
 800e018:	40011000 	.word	0x40011000
 800e01c:	58024400 	.word	0x58024400
 800e020:	40004400 	.word	0x40004400
 800e024:	40004800 	.word	0x40004800
 800e028:	40004c00 	.word	0x40004c00
 800e02c:	40005000 	.word	0x40005000
 800e030:	2320      	movs	r3, #32
 800e032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e036:	e128      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e038:	2340      	movs	r3, #64	; 0x40
 800e03a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e03e:	e124      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e040:	2380      	movs	r3, #128	; 0x80
 800e042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e046:	e120      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	4acb      	ldr	r2, [pc, #812]	; (800e37c <UART_SetConfig+0x698>)
 800e04e:	4293      	cmp	r3, r2
 800e050:	d176      	bne.n	800e140 <UART_SetConfig+0x45c>
 800e052:	4bcb      	ldr	r3, [pc, #812]	; (800e380 <UART_SetConfig+0x69c>)
 800e054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e056:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e05a:	2b28      	cmp	r3, #40	; 0x28
 800e05c:	d86c      	bhi.n	800e138 <UART_SetConfig+0x454>
 800e05e:	a201      	add	r2, pc, #4	; (adr r2, 800e064 <UART_SetConfig+0x380>)
 800e060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e064:	0800e109 	.word	0x0800e109
 800e068:	0800e139 	.word	0x0800e139
 800e06c:	0800e139 	.word	0x0800e139
 800e070:	0800e139 	.word	0x0800e139
 800e074:	0800e139 	.word	0x0800e139
 800e078:	0800e139 	.word	0x0800e139
 800e07c:	0800e139 	.word	0x0800e139
 800e080:	0800e139 	.word	0x0800e139
 800e084:	0800e111 	.word	0x0800e111
 800e088:	0800e139 	.word	0x0800e139
 800e08c:	0800e139 	.word	0x0800e139
 800e090:	0800e139 	.word	0x0800e139
 800e094:	0800e139 	.word	0x0800e139
 800e098:	0800e139 	.word	0x0800e139
 800e09c:	0800e139 	.word	0x0800e139
 800e0a0:	0800e139 	.word	0x0800e139
 800e0a4:	0800e119 	.word	0x0800e119
 800e0a8:	0800e139 	.word	0x0800e139
 800e0ac:	0800e139 	.word	0x0800e139
 800e0b0:	0800e139 	.word	0x0800e139
 800e0b4:	0800e139 	.word	0x0800e139
 800e0b8:	0800e139 	.word	0x0800e139
 800e0bc:	0800e139 	.word	0x0800e139
 800e0c0:	0800e139 	.word	0x0800e139
 800e0c4:	0800e121 	.word	0x0800e121
 800e0c8:	0800e139 	.word	0x0800e139
 800e0cc:	0800e139 	.word	0x0800e139
 800e0d0:	0800e139 	.word	0x0800e139
 800e0d4:	0800e139 	.word	0x0800e139
 800e0d8:	0800e139 	.word	0x0800e139
 800e0dc:	0800e139 	.word	0x0800e139
 800e0e0:	0800e139 	.word	0x0800e139
 800e0e4:	0800e129 	.word	0x0800e129
 800e0e8:	0800e139 	.word	0x0800e139
 800e0ec:	0800e139 	.word	0x0800e139
 800e0f0:	0800e139 	.word	0x0800e139
 800e0f4:	0800e139 	.word	0x0800e139
 800e0f8:	0800e139 	.word	0x0800e139
 800e0fc:	0800e139 	.word	0x0800e139
 800e100:	0800e139 	.word	0x0800e139
 800e104:	0800e131 	.word	0x0800e131
 800e108:	2301      	movs	r3, #1
 800e10a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e10e:	e0bc      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e110:	2304      	movs	r3, #4
 800e112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e116:	e0b8      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e118:	2308      	movs	r3, #8
 800e11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e11e:	e0b4      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e120:	2310      	movs	r3, #16
 800e122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e126:	e0b0      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e128:	2320      	movs	r3, #32
 800e12a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e12e:	e0ac      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e130:	2340      	movs	r3, #64	; 0x40
 800e132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e136:	e0a8      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e138:	2380      	movs	r3, #128	; 0x80
 800e13a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e13e:	e0a4      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e140:	697b      	ldr	r3, [r7, #20]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	4a8f      	ldr	r2, [pc, #572]	; (800e384 <UART_SetConfig+0x6a0>)
 800e146:	4293      	cmp	r3, r2
 800e148:	d130      	bne.n	800e1ac <UART_SetConfig+0x4c8>
 800e14a:	4b8d      	ldr	r3, [pc, #564]	; (800e380 <UART_SetConfig+0x69c>)
 800e14c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e14e:	f003 0307 	and.w	r3, r3, #7
 800e152:	2b05      	cmp	r3, #5
 800e154:	d826      	bhi.n	800e1a4 <UART_SetConfig+0x4c0>
 800e156:	a201      	add	r2, pc, #4	; (adr r2, 800e15c <UART_SetConfig+0x478>)
 800e158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e15c:	0800e175 	.word	0x0800e175
 800e160:	0800e17d 	.word	0x0800e17d
 800e164:	0800e185 	.word	0x0800e185
 800e168:	0800e18d 	.word	0x0800e18d
 800e16c:	0800e195 	.word	0x0800e195
 800e170:	0800e19d 	.word	0x0800e19d
 800e174:	2300      	movs	r3, #0
 800e176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e17a:	e086      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e17c:	2304      	movs	r3, #4
 800e17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e182:	e082      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e184:	2308      	movs	r3, #8
 800e186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e18a:	e07e      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e18c:	2310      	movs	r3, #16
 800e18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e192:	e07a      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e194:	2320      	movs	r3, #32
 800e196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e19a:	e076      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e19c:	2340      	movs	r3, #64	; 0x40
 800e19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1a2:	e072      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e1a4:	2380      	movs	r3, #128	; 0x80
 800e1a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1aa:	e06e      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	4a75      	ldr	r2, [pc, #468]	; (800e388 <UART_SetConfig+0x6a4>)
 800e1b2:	4293      	cmp	r3, r2
 800e1b4:	d130      	bne.n	800e218 <UART_SetConfig+0x534>
 800e1b6:	4b72      	ldr	r3, [pc, #456]	; (800e380 <UART_SetConfig+0x69c>)
 800e1b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1ba:	f003 0307 	and.w	r3, r3, #7
 800e1be:	2b05      	cmp	r3, #5
 800e1c0:	d826      	bhi.n	800e210 <UART_SetConfig+0x52c>
 800e1c2:	a201      	add	r2, pc, #4	; (adr r2, 800e1c8 <UART_SetConfig+0x4e4>)
 800e1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1c8:	0800e1e1 	.word	0x0800e1e1
 800e1cc:	0800e1e9 	.word	0x0800e1e9
 800e1d0:	0800e1f1 	.word	0x0800e1f1
 800e1d4:	0800e1f9 	.word	0x0800e1f9
 800e1d8:	0800e201 	.word	0x0800e201
 800e1dc:	0800e209 	.word	0x0800e209
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1e6:	e050      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e1e8:	2304      	movs	r3, #4
 800e1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ee:	e04c      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e1f0:	2308      	movs	r3, #8
 800e1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1f6:	e048      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e1f8:	2310      	movs	r3, #16
 800e1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1fe:	e044      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e200:	2320      	movs	r3, #32
 800e202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e206:	e040      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e208:	2340      	movs	r3, #64	; 0x40
 800e20a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e20e:	e03c      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e210:	2380      	movs	r3, #128	; 0x80
 800e212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e216:	e038      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	4a5b      	ldr	r2, [pc, #364]	; (800e38c <UART_SetConfig+0x6a8>)
 800e21e:	4293      	cmp	r3, r2
 800e220:	d130      	bne.n	800e284 <UART_SetConfig+0x5a0>
 800e222:	4b57      	ldr	r3, [pc, #348]	; (800e380 <UART_SetConfig+0x69c>)
 800e224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e226:	f003 0307 	and.w	r3, r3, #7
 800e22a:	2b05      	cmp	r3, #5
 800e22c:	d826      	bhi.n	800e27c <UART_SetConfig+0x598>
 800e22e:	a201      	add	r2, pc, #4	; (adr r2, 800e234 <UART_SetConfig+0x550>)
 800e230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e234:	0800e24d 	.word	0x0800e24d
 800e238:	0800e255 	.word	0x0800e255
 800e23c:	0800e25d 	.word	0x0800e25d
 800e240:	0800e265 	.word	0x0800e265
 800e244:	0800e26d 	.word	0x0800e26d
 800e248:	0800e275 	.word	0x0800e275
 800e24c:	2302      	movs	r3, #2
 800e24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e252:	e01a      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e254:	2304      	movs	r3, #4
 800e256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e25a:	e016      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e25c:	2308      	movs	r3, #8
 800e25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e262:	e012      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e264:	2310      	movs	r3, #16
 800e266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e26a:	e00e      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e26c:	2320      	movs	r3, #32
 800e26e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e272:	e00a      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e274:	2340      	movs	r3, #64	; 0x40
 800e276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e27a:	e006      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e27c:	2380      	movs	r3, #128	; 0x80
 800e27e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e282:	e002      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e284:	2380      	movs	r3, #128	; 0x80
 800e286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	4a3f      	ldr	r2, [pc, #252]	; (800e38c <UART_SetConfig+0x6a8>)
 800e290:	4293      	cmp	r3, r2
 800e292:	f040 80f8 	bne.w	800e486 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e296:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e29a:	2b20      	cmp	r3, #32
 800e29c:	dc46      	bgt.n	800e32c <UART_SetConfig+0x648>
 800e29e:	2b02      	cmp	r3, #2
 800e2a0:	f2c0 8082 	blt.w	800e3a8 <UART_SetConfig+0x6c4>
 800e2a4:	3b02      	subs	r3, #2
 800e2a6:	2b1e      	cmp	r3, #30
 800e2a8:	d87e      	bhi.n	800e3a8 <UART_SetConfig+0x6c4>
 800e2aa:	a201      	add	r2, pc, #4	; (adr r2, 800e2b0 <UART_SetConfig+0x5cc>)
 800e2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2b0:	0800e333 	.word	0x0800e333
 800e2b4:	0800e3a9 	.word	0x0800e3a9
 800e2b8:	0800e33b 	.word	0x0800e33b
 800e2bc:	0800e3a9 	.word	0x0800e3a9
 800e2c0:	0800e3a9 	.word	0x0800e3a9
 800e2c4:	0800e3a9 	.word	0x0800e3a9
 800e2c8:	0800e34b 	.word	0x0800e34b
 800e2cc:	0800e3a9 	.word	0x0800e3a9
 800e2d0:	0800e3a9 	.word	0x0800e3a9
 800e2d4:	0800e3a9 	.word	0x0800e3a9
 800e2d8:	0800e3a9 	.word	0x0800e3a9
 800e2dc:	0800e3a9 	.word	0x0800e3a9
 800e2e0:	0800e3a9 	.word	0x0800e3a9
 800e2e4:	0800e3a9 	.word	0x0800e3a9
 800e2e8:	0800e35b 	.word	0x0800e35b
 800e2ec:	0800e3a9 	.word	0x0800e3a9
 800e2f0:	0800e3a9 	.word	0x0800e3a9
 800e2f4:	0800e3a9 	.word	0x0800e3a9
 800e2f8:	0800e3a9 	.word	0x0800e3a9
 800e2fc:	0800e3a9 	.word	0x0800e3a9
 800e300:	0800e3a9 	.word	0x0800e3a9
 800e304:	0800e3a9 	.word	0x0800e3a9
 800e308:	0800e3a9 	.word	0x0800e3a9
 800e30c:	0800e3a9 	.word	0x0800e3a9
 800e310:	0800e3a9 	.word	0x0800e3a9
 800e314:	0800e3a9 	.word	0x0800e3a9
 800e318:	0800e3a9 	.word	0x0800e3a9
 800e31c:	0800e3a9 	.word	0x0800e3a9
 800e320:	0800e3a9 	.word	0x0800e3a9
 800e324:	0800e3a9 	.word	0x0800e3a9
 800e328:	0800e39b 	.word	0x0800e39b
 800e32c:	2b40      	cmp	r3, #64	; 0x40
 800e32e:	d037      	beq.n	800e3a0 <UART_SetConfig+0x6bc>
 800e330:	e03a      	b.n	800e3a8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e332:	f7fd fd2b 	bl	800bd8c <HAL_RCCEx_GetD3PCLK1Freq>
 800e336:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e338:	e03c      	b.n	800e3b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e33a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e33e:	4618      	mov	r0, r3
 800e340:	f7fd fd3a 	bl	800bdb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e346:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e348:	e034      	b.n	800e3b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e34a:	f107 0318 	add.w	r3, r7, #24
 800e34e:	4618      	mov	r0, r3
 800e350:	f7fd fe86 	bl	800c060 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e354:	69fb      	ldr	r3, [r7, #28]
 800e356:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e358:	e02c      	b.n	800e3b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e35a:	4b09      	ldr	r3, [pc, #36]	; (800e380 <UART_SetConfig+0x69c>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	f003 0320 	and.w	r3, r3, #32
 800e362:	2b00      	cmp	r3, #0
 800e364:	d016      	beq.n	800e394 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e366:	4b06      	ldr	r3, [pc, #24]	; (800e380 <UART_SetConfig+0x69c>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	08db      	lsrs	r3, r3, #3
 800e36c:	f003 0303 	and.w	r3, r3, #3
 800e370:	4a07      	ldr	r2, [pc, #28]	; (800e390 <UART_SetConfig+0x6ac>)
 800e372:	fa22 f303 	lsr.w	r3, r2, r3
 800e376:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e378:	e01c      	b.n	800e3b4 <UART_SetConfig+0x6d0>
 800e37a:	bf00      	nop
 800e37c:	40011400 	.word	0x40011400
 800e380:	58024400 	.word	0x58024400
 800e384:	40007800 	.word	0x40007800
 800e388:	40007c00 	.word	0x40007c00
 800e38c:	58000c00 	.word	0x58000c00
 800e390:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e394:	4b9d      	ldr	r3, [pc, #628]	; (800e60c <UART_SetConfig+0x928>)
 800e396:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e398:	e00c      	b.n	800e3b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e39a:	4b9d      	ldr	r3, [pc, #628]	; (800e610 <UART_SetConfig+0x92c>)
 800e39c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e39e:	e009      	b.n	800e3b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e3a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3a6:	e005      	b.n	800e3b4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e3b2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e3b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	f000 81de 	beq.w	800e778 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e3bc:	697b      	ldr	r3, [r7, #20]
 800e3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3c0:	4a94      	ldr	r2, [pc, #592]	; (800e614 <UART_SetConfig+0x930>)
 800e3c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e3c6:	461a      	mov	r2, r3
 800e3c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800e3ce:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e3d0:	697b      	ldr	r3, [r7, #20]
 800e3d2:	685a      	ldr	r2, [r3, #4]
 800e3d4:	4613      	mov	r3, r2
 800e3d6:	005b      	lsls	r3, r3, #1
 800e3d8:	4413      	add	r3, r2
 800e3da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	d305      	bcc.n	800e3ec <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e3e0:	697b      	ldr	r3, [r7, #20]
 800e3e2:	685b      	ldr	r3, [r3, #4]
 800e3e4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e3e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3e8:	429a      	cmp	r2, r3
 800e3ea:	d903      	bls.n	800e3f4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e3f2:	e1c1      	b.n	800e778 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e3f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	60bb      	str	r3, [r7, #8]
 800e3fa:	60fa      	str	r2, [r7, #12]
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e400:	4a84      	ldr	r2, [pc, #528]	; (800e614 <UART_SetConfig+0x930>)
 800e402:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e406:	b29b      	uxth	r3, r3
 800e408:	2200      	movs	r2, #0
 800e40a:	603b      	str	r3, [r7, #0]
 800e40c:	607a      	str	r2, [r7, #4]
 800e40e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e412:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e416:	f7f1 ff5f 	bl	80002d8 <__aeabi_uldivmod>
 800e41a:	4602      	mov	r2, r0
 800e41c:	460b      	mov	r3, r1
 800e41e:	4610      	mov	r0, r2
 800e420:	4619      	mov	r1, r3
 800e422:	f04f 0200 	mov.w	r2, #0
 800e426:	f04f 0300 	mov.w	r3, #0
 800e42a:	020b      	lsls	r3, r1, #8
 800e42c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e430:	0202      	lsls	r2, r0, #8
 800e432:	6979      	ldr	r1, [r7, #20]
 800e434:	6849      	ldr	r1, [r1, #4]
 800e436:	0849      	lsrs	r1, r1, #1
 800e438:	2000      	movs	r0, #0
 800e43a:	460c      	mov	r4, r1
 800e43c:	4605      	mov	r5, r0
 800e43e:	eb12 0804 	adds.w	r8, r2, r4
 800e442:	eb43 0905 	adc.w	r9, r3, r5
 800e446:	697b      	ldr	r3, [r7, #20]
 800e448:	685b      	ldr	r3, [r3, #4]
 800e44a:	2200      	movs	r2, #0
 800e44c:	469a      	mov	sl, r3
 800e44e:	4693      	mov	fp, r2
 800e450:	4652      	mov	r2, sl
 800e452:	465b      	mov	r3, fp
 800e454:	4640      	mov	r0, r8
 800e456:	4649      	mov	r1, r9
 800e458:	f7f1 ff3e 	bl	80002d8 <__aeabi_uldivmod>
 800e45c:	4602      	mov	r2, r0
 800e45e:	460b      	mov	r3, r1
 800e460:	4613      	mov	r3, r2
 800e462:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e466:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e46a:	d308      	bcc.n	800e47e <UART_SetConfig+0x79a>
 800e46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e46e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e472:	d204      	bcs.n	800e47e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e474:	697b      	ldr	r3, [r7, #20]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e47a:	60da      	str	r2, [r3, #12]
 800e47c:	e17c      	b.n	800e778 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e47e:	2301      	movs	r3, #1
 800e480:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e484:	e178      	b.n	800e778 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e486:	697b      	ldr	r3, [r7, #20]
 800e488:	69db      	ldr	r3, [r3, #28]
 800e48a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e48e:	f040 80c5 	bne.w	800e61c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e492:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e496:	2b20      	cmp	r3, #32
 800e498:	dc48      	bgt.n	800e52c <UART_SetConfig+0x848>
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	db7b      	blt.n	800e596 <UART_SetConfig+0x8b2>
 800e49e:	2b20      	cmp	r3, #32
 800e4a0:	d879      	bhi.n	800e596 <UART_SetConfig+0x8b2>
 800e4a2:	a201      	add	r2, pc, #4	; (adr r2, 800e4a8 <UART_SetConfig+0x7c4>)
 800e4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4a8:	0800e533 	.word	0x0800e533
 800e4ac:	0800e53b 	.word	0x0800e53b
 800e4b0:	0800e597 	.word	0x0800e597
 800e4b4:	0800e597 	.word	0x0800e597
 800e4b8:	0800e543 	.word	0x0800e543
 800e4bc:	0800e597 	.word	0x0800e597
 800e4c0:	0800e597 	.word	0x0800e597
 800e4c4:	0800e597 	.word	0x0800e597
 800e4c8:	0800e553 	.word	0x0800e553
 800e4cc:	0800e597 	.word	0x0800e597
 800e4d0:	0800e597 	.word	0x0800e597
 800e4d4:	0800e597 	.word	0x0800e597
 800e4d8:	0800e597 	.word	0x0800e597
 800e4dc:	0800e597 	.word	0x0800e597
 800e4e0:	0800e597 	.word	0x0800e597
 800e4e4:	0800e597 	.word	0x0800e597
 800e4e8:	0800e563 	.word	0x0800e563
 800e4ec:	0800e597 	.word	0x0800e597
 800e4f0:	0800e597 	.word	0x0800e597
 800e4f4:	0800e597 	.word	0x0800e597
 800e4f8:	0800e597 	.word	0x0800e597
 800e4fc:	0800e597 	.word	0x0800e597
 800e500:	0800e597 	.word	0x0800e597
 800e504:	0800e597 	.word	0x0800e597
 800e508:	0800e597 	.word	0x0800e597
 800e50c:	0800e597 	.word	0x0800e597
 800e510:	0800e597 	.word	0x0800e597
 800e514:	0800e597 	.word	0x0800e597
 800e518:	0800e597 	.word	0x0800e597
 800e51c:	0800e597 	.word	0x0800e597
 800e520:	0800e597 	.word	0x0800e597
 800e524:	0800e597 	.word	0x0800e597
 800e528:	0800e589 	.word	0x0800e589
 800e52c:	2b40      	cmp	r3, #64	; 0x40
 800e52e:	d02e      	beq.n	800e58e <UART_SetConfig+0x8aa>
 800e530:	e031      	b.n	800e596 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e532:	f7fb ffe7 	bl	800a504 <HAL_RCC_GetPCLK1Freq>
 800e536:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e538:	e033      	b.n	800e5a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e53a:	f7fb fff9 	bl	800a530 <HAL_RCC_GetPCLK2Freq>
 800e53e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e540:	e02f      	b.n	800e5a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e546:	4618      	mov	r0, r3
 800e548:	f7fd fc36 	bl	800bdb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e54e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e550:	e027      	b.n	800e5a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e552:	f107 0318 	add.w	r3, r7, #24
 800e556:	4618      	mov	r0, r3
 800e558:	f7fd fd82 	bl	800c060 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e55c:	69fb      	ldr	r3, [r7, #28]
 800e55e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e560:	e01f      	b.n	800e5a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e562:	4b2d      	ldr	r3, [pc, #180]	; (800e618 <UART_SetConfig+0x934>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	f003 0320 	and.w	r3, r3, #32
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d009      	beq.n	800e582 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e56e:	4b2a      	ldr	r3, [pc, #168]	; (800e618 <UART_SetConfig+0x934>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	08db      	lsrs	r3, r3, #3
 800e574:	f003 0303 	and.w	r3, r3, #3
 800e578:	4a24      	ldr	r2, [pc, #144]	; (800e60c <UART_SetConfig+0x928>)
 800e57a:	fa22 f303 	lsr.w	r3, r2, r3
 800e57e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e580:	e00f      	b.n	800e5a2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e582:	4b22      	ldr	r3, [pc, #136]	; (800e60c <UART_SetConfig+0x928>)
 800e584:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e586:	e00c      	b.n	800e5a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e588:	4b21      	ldr	r3, [pc, #132]	; (800e610 <UART_SetConfig+0x92c>)
 800e58a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e58c:	e009      	b.n	800e5a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e58e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e594:	e005      	b.n	800e5a2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e596:	2300      	movs	r3, #0
 800e598:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e59a:	2301      	movs	r3, #1
 800e59c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e5a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e5a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	f000 80e7 	beq.w	800e778 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e5aa:	697b      	ldr	r3, [r7, #20]
 800e5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ae:	4a19      	ldr	r2, [pc, #100]	; (800e614 <UART_SetConfig+0x930>)
 800e5b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e5b4:	461a      	mov	r2, r3
 800e5b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800e5bc:	005a      	lsls	r2, r3, #1
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	685b      	ldr	r3, [r3, #4]
 800e5c2:	085b      	lsrs	r3, r3, #1
 800e5c4:	441a      	add	r2, r3
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	685b      	ldr	r3, [r3, #4]
 800e5ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5ce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d2:	2b0f      	cmp	r3, #15
 800e5d4:	d916      	bls.n	800e604 <UART_SetConfig+0x920>
 800e5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5dc:	d212      	bcs.n	800e604 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e0:	b29b      	uxth	r3, r3
 800e5e2:	f023 030f 	bic.w	r3, r3, #15
 800e5e6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ea:	085b      	lsrs	r3, r3, #1
 800e5ec:	b29b      	uxth	r3, r3
 800e5ee:	f003 0307 	and.w	r3, r3, #7
 800e5f2:	b29a      	uxth	r2, r3
 800e5f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e5f6:	4313      	orrs	r3, r2
 800e5f8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e600:	60da      	str	r2, [r3, #12]
 800e602:	e0b9      	b.n	800e778 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e604:	2301      	movs	r3, #1
 800e606:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e60a:	e0b5      	b.n	800e778 <UART_SetConfig+0xa94>
 800e60c:	03d09000 	.word	0x03d09000
 800e610:	003d0900 	.word	0x003d0900
 800e614:	080131d8 	.word	0x080131d8
 800e618:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e61c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e620:	2b20      	cmp	r3, #32
 800e622:	dc49      	bgt.n	800e6b8 <UART_SetConfig+0x9d4>
 800e624:	2b00      	cmp	r3, #0
 800e626:	db7c      	blt.n	800e722 <UART_SetConfig+0xa3e>
 800e628:	2b20      	cmp	r3, #32
 800e62a:	d87a      	bhi.n	800e722 <UART_SetConfig+0xa3e>
 800e62c:	a201      	add	r2, pc, #4	; (adr r2, 800e634 <UART_SetConfig+0x950>)
 800e62e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e632:	bf00      	nop
 800e634:	0800e6bf 	.word	0x0800e6bf
 800e638:	0800e6c7 	.word	0x0800e6c7
 800e63c:	0800e723 	.word	0x0800e723
 800e640:	0800e723 	.word	0x0800e723
 800e644:	0800e6cf 	.word	0x0800e6cf
 800e648:	0800e723 	.word	0x0800e723
 800e64c:	0800e723 	.word	0x0800e723
 800e650:	0800e723 	.word	0x0800e723
 800e654:	0800e6df 	.word	0x0800e6df
 800e658:	0800e723 	.word	0x0800e723
 800e65c:	0800e723 	.word	0x0800e723
 800e660:	0800e723 	.word	0x0800e723
 800e664:	0800e723 	.word	0x0800e723
 800e668:	0800e723 	.word	0x0800e723
 800e66c:	0800e723 	.word	0x0800e723
 800e670:	0800e723 	.word	0x0800e723
 800e674:	0800e6ef 	.word	0x0800e6ef
 800e678:	0800e723 	.word	0x0800e723
 800e67c:	0800e723 	.word	0x0800e723
 800e680:	0800e723 	.word	0x0800e723
 800e684:	0800e723 	.word	0x0800e723
 800e688:	0800e723 	.word	0x0800e723
 800e68c:	0800e723 	.word	0x0800e723
 800e690:	0800e723 	.word	0x0800e723
 800e694:	0800e723 	.word	0x0800e723
 800e698:	0800e723 	.word	0x0800e723
 800e69c:	0800e723 	.word	0x0800e723
 800e6a0:	0800e723 	.word	0x0800e723
 800e6a4:	0800e723 	.word	0x0800e723
 800e6a8:	0800e723 	.word	0x0800e723
 800e6ac:	0800e723 	.word	0x0800e723
 800e6b0:	0800e723 	.word	0x0800e723
 800e6b4:	0800e715 	.word	0x0800e715
 800e6b8:	2b40      	cmp	r3, #64	; 0x40
 800e6ba:	d02e      	beq.n	800e71a <UART_SetConfig+0xa36>
 800e6bc:	e031      	b.n	800e722 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e6be:	f7fb ff21 	bl	800a504 <HAL_RCC_GetPCLK1Freq>
 800e6c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e6c4:	e033      	b.n	800e72e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e6c6:	f7fb ff33 	bl	800a530 <HAL_RCC_GetPCLK2Freq>
 800e6ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e6cc:	e02f      	b.n	800e72e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e6ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f7fd fb70 	bl	800bdb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6dc:	e027      	b.n	800e72e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e6de:	f107 0318 	add.w	r3, r7, #24
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f7fd fcbc 	bl	800c060 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e6e8:	69fb      	ldr	r3, [r7, #28]
 800e6ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6ec:	e01f      	b.n	800e72e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e6ee:	4b2d      	ldr	r3, [pc, #180]	; (800e7a4 <UART_SetConfig+0xac0>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	f003 0320 	and.w	r3, r3, #32
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d009      	beq.n	800e70e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e6fa:	4b2a      	ldr	r3, [pc, #168]	; (800e7a4 <UART_SetConfig+0xac0>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	08db      	lsrs	r3, r3, #3
 800e700:	f003 0303 	and.w	r3, r3, #3
 800e704:	4a28      	ldr	r2, [pc, #160]	; (800e7a8 <UART_SetConfig+0xac4>)
 800e706:	fa22 f303 	lsr.w	r3, r2, r3
 800e70a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e70c:	e00f      	b.n	800e72e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e70e:	4b26      	ldr	r3, [pc, #152]	; (800e7a8 <UART_SetConfig+0xac4>)
 800e710:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e712:	e00c      	b.n	800e72e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e714:	4b25      	ldr	r3, [pc, #148]	; (800e7ac <UART_SetConfig+0xac8>)
 800e716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e718:	e009      	b.n	800e72e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e71a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e71e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e720:	e005      	b.n	800e72e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e722:	2300      	movs	r3, #0
 800e724:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e726:	2301      	movs	r3, #1
 800e728:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e72c:	bf00      	nop
    }

    if (pclk != 0U)
 800e72e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e730:	2b00      	cmp	r3, #0
 800e732:	d021      	beq.n	800e778 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e734:	697b      	ldr	r3, [r7, #20]
 800e736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e738:	4a1d      	ldr	r2, [pc, #116]	; (800e7b0 <UART_SetConfig+0xacc>)
 800e73a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e73e:	461a      	mov	r2, r3
 800e740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e742:	fbb3 f2f2 	udiv	r2, r3, r2
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	685b      	ldr	r3, [r3, #4]
 800e74a:	085b      	lsrs	r3, r3, #1
 800e74c:	441a      	add	r2, r3
 800e74e:	697b      	ldr	r3, [r7, #20]
 800e750:	685b      	ldr	r3, [r3, #4]
 800e752:	fbb2 f3f3 	udiv	r3, r2, r3
 800e756:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e75a:	2b0f      	cmp	r3, #15
 800e75c:	d909      	bls.n	800e772 <UART_SetConfig+0xa8e>
 800e75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e764:	d205      	bcs.n	800e772 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e768:	b29a      	uxth	r2, r3
 800e76a:	697b      	ldr	r3, [r7, #20]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	60da      	str	r2, [r3, #12]
 800e770:	e002      	b.n	800e778 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e772:	2301      	movs	r3, #1
 800e774:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e778:	697b      	ldr	r3, [r7, #20]
 800e77a:	2201      	movs	r2, #1
 800e77c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	2201      	movs	r2, #1
 800e784:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e788:	697b      	ldr	r3, [r7, #20]
 800e78a:	2200      	movs	r2, #0
 800e78c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e78e:	697b      	ldr	r3, [r7, #20]
 800e790:	2200      	movs	r2, #0
 800e792:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e794:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e798:	4618      	mov	r0, r3
 800e79a:	3748      	adds	r7, #72	; 0x48
 800e79c:	46bd      	mov	sp, r7
 800e79e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e7a2:	bf00      	nop
 800e7a4:	58024400 	.word	0x58024400
 800e7a8:	03d09000 	.word	0x03d09000
 800e7ac:	003d0900 	.word	0x003d0900
 800e7b0:	080131d8 	.word	0x080131d8

0800e7b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e7b4:	b480      	push	{r7}
 800e7b6:	b083      	sub	sp, #12
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7c0:	f003 0301 	and.w	r3, r3, #1
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d00a      	beq.n	800e7de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	685b      	ldr	r3, [r3, #4]
 800e7ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	430a      	orrs	r2, r1
 800e7dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7e2:	f003 0302 	and.w	r3, r3, #2
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d00a      	beq.n	800e800 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	685b      	ldr	r3, [r3, #4]
 800e7f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	430a      	orrs	r2, r1
 800e7fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e804:	f003 0304 	and.w	r3, r3, #4
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d00a      	beq.n	800e822 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	685b      	ldr	r3, [r3, #4]
 800e812:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	430a      	orrs	r2, r1
 800e820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e826:	f003 0308 	and.w	r3, r3, #8
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d00a      	beq.n	800e844 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	685b      	ldr	r3, [r3, #4]
 800e834:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	430a      	orrs	r2, r1
 800e842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e848:	f003 0310 	and.w	r3, r3, #16
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d00a      	beq.n	800e866 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	689b      	ldr	r3, [r3, #8]
 800e856:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	430a      	orrs	r2, r1
 800e864:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e86a:	f003 0320 	and.w	r3, r3, #32
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d00a      	beq.n	800e888 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	689b      	ldr	r3, [r3, #8]
 800e878:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	430a      	orrs	r2, r1
 800e886:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e88c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e890:	2b00      	cmp	r3, #0
 800e892:	d01a      	beq.n	800e8ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	685b      	ldr	r3, [r3, #4]
 800e89a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	430a      	orrs	r2, r1
 800e8a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e8b2:	d10a      	bne.n	800e8ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	685b      	ldr	r3, [r3, #4]
 800e8ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	430a      	orrs	r2, r1
 800e8c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d00a      	beq.n	800e8ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	685b      	ldr	r3, [r3, #4]
 800e8dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	430a      	orrs	r2, r1
 800e8ea:	605a      	str	r2, [r3, #4]
  }
}
 800e8ec:	bf00      	nop
 800e8ee:	370c      	adds	r7, #12
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f6:	4770      	bx	lr

0800e8f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b086      	sub	sp, #24
 800e8fc:	af02      	add	r7, sp, #8
 800e8fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2200      	movs	r2, #0
 800e904:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e908:	f7f3 feca 	bl	80026a0 <HAL_GetTick>
 800e90c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	f003 0308 	and.w	r3, r3, #8
 800e918:	2b08      	cmp	r3, #8
 800e91a:	d10e      	bne.n	800e93a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e91c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e920:	9300      	str	r3, [sp, #0]
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	2200      	movs	r2, #0
 800e926:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f000 f82f 	bl	800e98e <UART_WaitOnFlagUntilTimeout>
 800e930:	4603      	mov	r3, r0
 800e932:	2b00      	cmp	r3, #0
 800e934:	d001      	beq.n	800e93a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e936:	2303      	movs	r3, #3
 800e938:	e025      	b.n	800e986 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	f003 0304 	and.w	r3, r3, #4
 800e944:	2b04      	cmp	r3, #4
 800e946:	d10e      	bne.n	800e966 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e948:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e94c:	9300      	str	r3, [sp, #0]
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	2200      	movs	r2, #0
 800e952:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f000 f819 	bl	800e98e <UART_WaitOnFlagUntilTimeout>
 800e95c:	4603      	mov	r3, r0
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d001      	beq.n	800e966 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e962:	2303      	movs	r3, #3
 800e964:	e00f      	b.n	800e986 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2220      	movs	r2, #32
 800e96a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	2220      	movs	r2, #32
 800e972:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2200      	movs	r2, #0
 800e97a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2200      	movs	r2, #0
 800e980:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e984:	2300      	movs	r3, #0
}
 800e986:	4618      	mov	r0, r3
 800e988:	3710      	adds	r7, #16
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}

0800e98e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e98e:	b580      	push	{r7, lr}
 800e990:	b09c      	sub	sp, #112	; 0x70
 800e992:	af00      	add	r7, sp, #0
 800e994:	60f8      	str	r0, [r7, #12]
 800e996:	60b9      	str	r1, [r7, #8]
 800e998:	603b      	str	r3, [r7, #0]
 800e99a:	4613      	mov	r3, r2
 800e99c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e99e:	e0a9      	b.n	800eaf4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e9a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e9a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9a6:	f000 80a5 	beq.w	800eaf4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e9aa:	f7f3 fe79 	bl	80026a0 <HAL_GetTick>
 800e9ae:	4602      	mov	r2, r0
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	1ad3      	subs	r3, r2, r3
 800e9b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e9b6:	429a      	cmp	r2, r3
 800e9b8:	d302      	bcc.n	800e9c0 <UART_WaitOnFlagUntilTimeout+0x32>
 800e9ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d140      	bne.n	800ea42 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9c8:	e853 3f00 	ldrex	r3, [r3]
 800e9cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e9ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e9d4:	667b      	str	r3, [r7, #100]	; 0x64
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	461a      	mov	r2, r3
 800e9dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e9de:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e9e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e9e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e9e6:	e841 2300 	strex	r3, r2, [r1]
 800e9ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e9ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d1e6      	bne.n	800e9c0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	3308      	adds	r3, #8
 800e9f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9fc:	e853 3f00 	ldrex	r3, [r3]
 800ea00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ea02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea04:	f023 0301 	bic.w	r3, r3, #1
 800ea08:	663b      	str	r3, [r7, #96]	; 0x60
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	3308      	adds	r3, #8
 800ea10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ea12:	64ba      	str	r2, [r7, #72]	; 0x48
 800ea14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ea18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea1a:	e841 2300 	strex	r3, r2, [r1]
 800ea1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ea20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d1e5      	bne.n	800e9f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	2220      	movs	r2, #32
 800ea2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	2220      	movs	r2, #32
 800ea32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	2200      	movs	r2, #0
 800ea3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ea3e:	2303      	movs	r3, #3
 800ea40:	e069      	b.n	800eb16 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	f003 0304 	and.w	r3, r3, #4
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d051      	beq.n	800eaf4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	69db      	ldr	r3, [r3, #28]
 800ea56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ea5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ea5e:	d149      	bne.n	800eaf4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ea68:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea72:	e853 3f00 	ldrex	r3, [r3]
 800ea76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ea78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ea7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	461a      	mov	r2, r3
 800ea86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea88:	637b      	str	r3, [r7, #52]	; 0x34
 800ea8a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ea8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea90:	e841 2300 	strex	r3, r2, [r1]
 800ea94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ea96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d1e6      	bne.n	800ea6a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	3308      	adds	r3, #8
 800eaa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaa4:	697b      	ldr	r3, [r7, #20]
 800eaa6:	e853 3f00 	ldrex	r3, [r3]
 800eaaa:	613b      	str	r3, [r7, #16]
   return(result);
 800eaac:	693b      	ldr	r3, [r7, #16]
 800eaae:	f023 0301 	bic.w	r3, r3, #1
 800eab2:	66bb      	str	r3, [r7, #104]	; 0x68
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	3308      	adds	r3, #8
 800eaba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800eabc:	623a      	str	r2, [r7, #32]
 800eabe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eac0:	69f9      	ldr	r1, [r7, #28]
 800eac2:	6a3a      	ldr	r2, [r7, #32]
 800eac4:	e841 2300 	strex	r3, r2, [r1]
 800eac8:	61bb      	str	r3, [r7, #24]
   return(result);
 800eaca:	69bb      	ldr	r3, [r7, #24]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d1e5      	bne.n	800ea9c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	2220      	movs	r2, #32
 800ead4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	2220      	movs	r2, #32
 800eadc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	2220      	movs	r2, #32
 800eae4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	2200      	movs	r2, #0
 800eaec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800eaf0:	2303      	movs	r3, #3
 800eaf2:	e010      	b.n	800eb16 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	69da      	ldr	r2, [r3, #28]
 800eafa:	68bb      	ldr	r3, [r7, #8]
 800eafc:	4013      	ands	r3, r2
 800eafe:	68ba      	ldr	r2, [r7, #8]
 800eb00:	429a      	cmp	r2, r3
 800eb02:	bf0c      	ite	eq
 800eb04:	2301      	moveq	r3, #1
 800eb06:	2300      	movne	r3, #0
 800eb08:	b2db      	uxtb	r3, r3
 800eb0a:	461a      	mov	r2, r3
 800eb0c:	79fb      	ldrb	r3, [r7, #7]
 800eb0e:	429a      	cmp	r2, r3
 800eb10:	f43f af46 	beq.w	800e9a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800eb14:	2300      	movs	r3, #0
}
 800eb16:	4618      	mov	r0, r3
 800eb18:	3770      	adds	r7, #112	; 0x70
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}

0800eb1e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800eb1e:	b480      	push	{r7}
 800eb20:	b085      	sub	sp, #20
 800eb22:	af00      	add	r7, sp, #0
 800eb24:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eb2c:	2b01      	cmp	r3, #1
 800eb2e:	d101      	bne.n	800eb34 <HAL_UARTEx_DisableFifoMode+0x16>
 800eb30:	2302      	movs	r3, #2
 800eb32:	e027      	b.n	800eb84 <HAL_UARTEx_DisableFifoMode+0x66>
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2201      	movs	r2, #1
 800eb38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2224      	movs	r2, #36	; 0x24
 800eb40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	681a      	ldr	r2, [r3, #0]
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	f022 0201 	bic.w	r2, r2, #1
 800eb5a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800eb62:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2200      	movs	r2, #0
 800eb68:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	68fa      	ldr	r2, [r7, #12]
 800eb70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2220      	movs	r2, #32
 800eb76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eb82:	2300      	movs	r3, #0
}
 800eb84:	4618      	mov	r0, r3
 800eb86:	3714      	adds	r7, #20
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8e:	4770      	bx	lr

0800eb90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b084      	sub	sp, #16
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
 800eb98:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eba0:	2b01      	cmp	r3, #1
 800eba2:	d101      	bne.n	800eba8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800eba4:	2302      	movs	r3, #2
 800eba6:	e02d      	b.n	800ec04 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2201      	movs	r2, #1
 800ebac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2224      	movs	r2, #36	; 0x24
 800ebb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	681a      	ldr	r2, [r3, #0]
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	f022 0201 	bic.w	r2, r2, #1
 800ebce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	689b      	ldr	r3, [r3, #8]
 800ebd6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	683a      	ldr	r2, [r7, #0]
 800ebe0:	430a      	orrs	r2, r1
 800ebe2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ebe4:	6878      	ldr	r0, [r7, #4]
 800ebe6:	f000 f84f 	bl	800ec88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	68fa      	ldr	r2, [r7, #12]
 800ebf0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	2220      	movs	r2, #32
 800ebf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ec02:	2300      	movs	r3, #0
}
 800ec04:	4618      	mov	r0, r3
 800ec06:	3710      	adds	r7, #16
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}

0800ec0c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b084      	sub	sp, #16
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
 800ec14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ec1c:	2b01      	cmp	r3, #1
 800ec1e:	d101      	bne.n	800ec24 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ec20:	2302      	movs	r3, #2
 800ec22:	e02d      	b.n	800ec80 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2201      	movs	r2, #1
 800ec28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2224      	movs	r2, #36	; 0x24
 800ec30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	681a      	ldr	r2, [r3, #0]
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	f022 0201 	bic.w	r2, r2, #1
 800ec4a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	689b      	ldr	r3, [r3, #8]
 800ec52:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	683a      	ldr	r2, [r7, #0]
 800ec5c:	430a      	orrs	r2, r1
 800ec5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f000 f811 	bl	800ec88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	68fa      	ldr	r2, [r7, #12]
 800ec6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	2220      	movs	r2, #32
 800ec72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2200      	movs	r2, #0
 800ec7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ec7e:	2300      	movs	r3, #0
}
 800ec80:	4618      	mov	r0, r3
 800ec82:	3710      	adds	r7, #16
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}

0800ec88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ec88:	b480      	push	{r7}
 800ec8a:	b085      	sub	sp, #20
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d108      	bne.n	800ecaa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2201      	movs	r2, #1
 800ec9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2201      	movs	r2, #1
 800eca4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800eca8:	e031      	b.n	800ed0e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ecaa:	2310      	movs	r3, #16
 800ecac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ecae:	2310      	movs	r3, #16
 800ecb0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	689b      	ldr	r3, [r3, #8]
 800ecb8:	0e5b      	lsrs	r3, r3, #25
 800ecba:	b2db      	uxtb	r3, r3
 800ecbc:	f003 0307 	and.w	r3, r3, #7
 800ecc0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	689b      	ldr	r3, [r3, #8]
 800ecc8:	0f5b      	lsrs	r3, r3, #29
 800ecca:	b2db      	uxtb	r3, r3
 800eccc:	f003 0307 	and.w	r3, r3, #7
 800ecd0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ecd2:	7bbb      	ldrb	r3, [r7, #14]
 800ecd4:	7b3a      	ldrb	r2, [r7, #12]
 800ecd6:	4911      	ldr	r1, [pc, #68]	; (800ed1c <UARTEx_SetNbDataToProcess+0x94>)
 800ecd8:	5c8a      	ldrb	r2, [r1, r2]
 800ecda:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ecde:	7b3a      	ldrb	r2, [r7, #12]
 800ece0:	490f      	ldr	r1, [pc, #60]	; (800ed20 <UARTEx_SetNbDataToProcess+0x98>)
 800ece2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ece4:	fb93 f3f2 	sdiv	r3, r3, r2
 800ece8:	b29a      	uxth	r2, r3
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ecf0:	7bfb      	ldrb	r3, [r7, #15]
 800ecf2:	7b7a      	ldrb	r2, [r7, #13]
 800ecf4:	4909      	ldr	r1, [pc, #36]	; (800ed1c <UARTEx_SetNbDataToProcess+0x94>)
 800ecf6:	5c8a      	ldrb	r2, [r1, r2]
 800ecf8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ecfc:	7b7a      	ldrb	r2, [r7, #13]
 800ecfe:	4908      	ldr	r1, [pc, #32]	; (800ed20 <UARTEx_SetNbDataToProcess+0x98>)
 800ed00:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ed02:	fb93 f3f2 	sdiv	r3, r3, r2
 800ed06:	b29a      	uxth	r2, r3
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ed0e:	bf00      	nop
 800ed10:	3714      	adds	r7, #20
 800ed12:	46bd      	mov	sp, r7
 800ed14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed18:	4770      	bx	lr
 800ed1a:	bf00      	nop
 800ed1c:	080131f0 	.word	0x080131f0
 800ed20:	080131f8 	.word	0x080131f8

0800ed24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ed24:	b084      	sub	sp, #16
 800ed26:	b580      	push	{r7, lr}
 800ed28:	b084      	sub	sp, #16
 800ed2a:	af00      	add	r7, sp, #0
 800ed2c:	6078      	str	r0, [r7, #4]
 800ed2e:	f107 001c 	add.w	r0, r7, #28
 800ed32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ed36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed38:	2b01      	cmp	r3, #1
 800ed3a:	d120      	bne.n	800ed7e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	68da      	ldr	r2, [r3, #12]
 800ed4c:	4b2a      	ldr	r3, [pc, #168]	; (800edf8 <USB_CoreInit+0xd4>)
 800ed4e:	4013      	ands	r3, r2
 800ed50:	687a      	ldr	r2, [r7, #4]
 800ed52:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	68db      	ldr	r3, [r3, #12]
 800ed58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ed60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed62:	2b01      	cmp	r3, #1
 800ed64:	d105      	bne.n	800ed72 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	68db      	ldr	r3, [r3, #12]
 800ed6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f001 fc04 	bl	8010580 <USB_CoreReset>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	73fb      	strb	r3, [r7, #15]
 800ed7c:	e01a      	b.n	800edb4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	68db      	ldr	r3, [r3, #12]
 800ed82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	f001 fbf8 	bl	8010580 <USB_CoreReset>
 800ed90:	4603      	mov	r3, r0
 800ed92:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ed94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d106      	bne.n	800eda8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	639a      	str	r2, [r3, #56]	; 0x38
 800eda6:	e005      	b.n	800edb4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800edb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edb6:	2b01      	cmp	r3, #1
 800edb8:	d116      	bne.n	800ede8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800edbe:	b29a      	uxth	r2, r3
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800edc8:	4b0c      	ldr	r3, [pc, #48]	; (800edfc <USB_CoreInit+0xd8>)
 800edca:	4313      	orrs	r3, r2
 800edcc:	687a      	ldr	r2, [r7, #4]
 800edce:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	689b      	ldr	r3, [r3, #8]
 800edd4:	f043 0206 	orr.w	r2, r3, #6
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	689b      	ldr	r3, [r3, #8]
 800ede0:	f043 0220 	orr.w	r2, r3, #32
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ede8:	7bfb      	ldrb	r3, [r7, #15]
}
 800edea:	4618      	mov	r0, r3
 800edec:	3710      	adds	r7, #16
 800edee:	46bd      	mov	sp, r7
 800edf0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800edf4:	b004      	add	sp, #16
 800edf6:	4770      	bx	lr
 800edf8:	ffbdffbf 	.word	0xffbdffbf
 800edfc:	03ee0000 	.word	0x03ee0000

0800ee00 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ee00:	b480      	push	{r7}
 800ee02:	b087      	sub	sp, #28
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	60f8      	str	r0, [r7, #12]
 800ee08:	60b9      	str	r1, [r7, #8]
 800ee0a:	4613      	mov	r3, r2
 800ee0c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ee0e:	79fb      	ldrb	r3, [r7, #7]
 800ee10:	2b02      	cmp	r3, #2
 800ee12:	d165      	bne.n	800eee0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	4a41      	ldr	r2, [pc, #260]	; (800ef1c <USB_SetTurnaroundTime+0x11c>)
 800ee18:	4293      	cmp	r3, r2
 800ee1a:	d906      	bls.n	800ee2a <USB_SetTurnaroundTime+0x2a>
 800ee1c:	68bb      	ldr	r3, [r7, #8]
 800ee1e:	4a40      	ldr	r2, [pc, #256]	; (800ef20 <USB_SetTurnaroundTime+0x120>)
 800ee20:	4293      	cmp	r3, r2
 800ee22:	d202      	bcs.n	800ee2a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ee24:	230f      	movs	r3, #15
 800ee26:	617b      	str	r3, [r7, #20]
 800ee28:	e062      	b.n	800eef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ee2a:	68bb      	ldr	r3, [r7, #8]
 800ee2c:	4a3c      	ldr	r2, [pc, #240]	; (800ef20 <USB_SetTurnaroundTime+0x120>)
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	d306      	bcc.n	800ee40 <USB_SetTurnaroundTime+0x40>
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	4a3b      	ldr	r2, [pc, #236]	; (800ef24 <USB_SetTurnaroundTime+0x124>)
 800ee36:	4293      	cmp	r3, r2
 800ee38:	d202      	bcs.n	800ee40 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ee3a:	230e      	movs	r3, #14
 800ee3c:	617b      	str	r3, [r7, #20]
 800ee3e:	e057      	b.n	800eef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	4a38      	ldr	r2, [pc, #224]	; (800ef24 <USB_SetTurnaroundTime+0x124>)
 800ee44:	4293      	cmp	r3, r2
 800ee46:	d306      	bcc.n	800ee56 <USB_SetTurnaroundTime+0x56>
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	4a37      	ldr	r2, [pc, #220]	; (800ef28 <USB_SetTurnaroundTime+0x128>)
 800ee4c:	4293      	cmp	r3, r2
 800ee4e:	d202      	bcs.n	800ee56 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ee50:	230d      	movs	r3, #13
 800ee52:	617b      	str	r3, [r7, #20]
 800ee54:	e04c      	b.n	800eef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	4a33      	ldr	r2, [pc, #204]	; (800ef28 <USB_SetTurnaroundTime+0x128>)
 800ee5a:	4293      	cmp	r3, r2
 800ee5c:	d306      	bcc.n	800ee6c <USB_SetTurnaroundTime+0x6c>
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	4a32      	ldr	r2, [pc, #200]	; (800ef2c <USB_SetTurnaroundTime+0x12c>)
 800ee62:	4293      	cmp	r3, r2
 800ee64:	d802      	bhi.n	800ee6c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ee66:	230c      	movs	r3, #12
 800ee68:	617b      	str	r3, [r7, #20]
 800ee6a:	e041      	b.n	800eef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	4a2f      	ldr	r2, [pc, #188]	; (800ef2c <USB_SetTurnaroundTime+0x12c>)
 800ee70:	4293      	cmp	r3, r2
 800ee72:	d906      	bls.n	800ee82 <USB_SetTurnaroundTime+0x82>
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	4a2e      	ldr	r2, [pc, #184]	; (800ef30 <USB_SetTurnaroundTime+0x130>)
 800ee78:	4293      	cmp	r3, r2
 800ee7a:	d802      	bhi.n	800ee82 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ee7c:	230b      	movs	r3, #11
 800ee7e:	617b      	str	r3, [r7, #20]
 800ee80:	e036      	b.n	800eef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ee82:	68bb      	ldr	r3, [r7, #8]
 800ee84:	4a2a      	ldr	r2, [pc, #168]	; (800ef30 <USB_SetTurnaroundTime+0x130>)
 800ee86:	4293      	cmp	r3, r2
 800ee88:	d906      	bls.n	800ee98 <USB_SetTurnaroundTime+0x98>
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	4a29      	ldr	r2, [pc, #164]	; (800ef34 <USB_SetTurnaroundTime+0x134>)
 800ee8e:	4293      	cmp	r3, r2
 800ee90:	d802      	bhi.n	800ee98 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ee92:	230a      	movs	r3, #10
 800ee94:	617b      	str	r3, [r7, #20]
 800ee96:	e02b      	b.n	800eef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	4a26      	ldr	r2, [pc, #152]	; (800ef34 <USB_SetTurnaroundTime+0x134>)
 800ee9c:	4293      	cmp	r3, r2
 800ee9e:	d906      	bls.n	800eeae <USB_SetTurnaroundTime+0xae>
 800eea0:	68bb      	ldr	r3, [r7, #8]
 800eea2:	4a25      	ldr	r2, [pc, #148]	; (800ef38 <USB_SetTurnaroundTime+0x138>)
 800eea4:	4293      	cmp	r3, r2
 800eea6:	d202      	bcs.n	800eeae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800eea8:	2309      	movs	r3, #9
 800eeaa:	617b      	str	r3, [r7, #20]
 800eeac:	e020      	b.n	800eef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	4a21      	ldr	r2, [pc, #132]	; (800ef38 <USB_SetTurnaroundTime+0x138>)
 800eeb2:	4293      	cmp	r3, r2
 800eeb4:	d306      	bcc.n	800eec4 <USB_SetTurnaroundTime+0xc4>
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	4a20      	ldr	r2, [pc, #128]	; (800ef3c <USB_SetTurnaroundTime+0x13c>)
 800eeba:	4293      	cmp	r3, r2
 800eebc:	d802      	bhi.n	800eec4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800eebe:	2308      	movs	r3, #8
 800eec0:	617b      	str	r3, [r7, #20]
 800eec2:	e015      	b.n	800eef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	4a1d      	ldr	r2, [pc, #116]	; (800ef3c <USB_SetTurnaroundTime+0x13c>)
 800eec8:	4293      	cmp	r3, r2
 800eeca:	d906      	bls.n	800eeda <USB_SetTurnaroundTime+0xda>
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	4a1c      	ldr	r2, [pc, #112]	; (800ef40 <USB_SetTurnaroundTime+0x140>)
 800eed0:	4293      	cmp	r3, r2
 800eed2:	d202      	bcs.n	800eeda <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800eed4:	2307      	movs	r3, #7
 800eed6:	617b      	str	r3, [r7, #20]
 800eed8:	e00a      	b.n	800eef0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800eeda:	2306      	movs	r3, #6
 800eedc:	617b      	str	r3, [r7, #20]
 800eede:	e007      	b.n	800eef0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800eee0:	79fb      	ldrb	r3, [r7, #7]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d102      	bne.n	800eeec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800eee6:	2309      	movs	r3, #9
 800eee8:	617b      	str	r3, [r7, #20]
 800eeea:	e001      	b.n	800eef0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800eeec:	2309      	movs	r3, #9
 800eeee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	68db      	ldr	r3, [r3, #12]
 800eef4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	68da      	ldr	r2, [r3, #12]
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	029b      	lsls	r3, r3, #10
 800ef04:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ef08:	431a      	orrs	r2, r3
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ef0e:	2300      	movs	r3, #0
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	371c      	adds	r7, #28
 800ef14:	46bd      	mov	sp, r7
 800ef16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1a:	4770      	bx	lr
 800ef1c:	00d8acbf 	.word	0x00d8acbf
 800ef20:	00e4e1c0 	.word	0x00e4e1c0
 800ef24:	00f42400 	.word	0x00f42400
 800ef28:	01067380 	.word	0x01067380
 800ef2c:	011a499f 	.word	0x011a499f
 800ef30:	01312cff 	.word	0x01312cff
 800ef34:	014ca43f 	.word	0x014ca43f
 800ef38:	016e3600 	.word	0x016e3600
 800ef3c:	01a6ab1f 	.word	0x01a6ab1f
 800ef40:	01e84800 	.word	0x01e84800

0800ef44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ef44:	b480      	push	{r7}
 800ef46:	b083      	sub	sp, #12
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	689b      	ldr	r3, [r3, #8]
 800ef50:	f043 0201 	orr.w	r2, r3, #1
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ef58:	2300      	movs	r3, #0
}
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	370c      	adds	r7, #12
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef64:	4770      	bx	lr

0800ef66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ef66:	b480      	push	{r7}
 800ef68:	b083      	sub	sp, #12
 800ef6a:	af00      	add	r7, sp, #0
 800ef6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	689b      	ldr	r3, [r3, #8]
 800ef72:	f023 0201 	bic.w	r2, r3, #1
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ef7a:	2300      	movs	r3, #0
}
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	370c      	adds	r7, #12
 800ef80:	46bd      	mov	sp, r7
 800ef82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef86:	4770      	bx	lr

0800ef88 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b084      	sub	sp, #16
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
 800ef90:	460b      	mov	r3, r1
 800ef92:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ef94:	2300      	movs	r3, #0
 800ef96:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	68db      	ldr	r3, [r3, #12]
 800ef9c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800efa4:	78fb      	ldrb	r3, [r7, #3]
 800efa6:	2b01      	cmp	r3, #1
 800efa8:	d115      	bne.n	800efd6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	68db      	ldr	r3, [r3, #12]
 800efae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800efb6:	2001      	movs	r0, #1
 800efb8:	f7f3 fb7e 	bl	80026b8 <HAL_Delay>
      ms++;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	3301      	adds	r3, #1
 800efc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f001 fa4b 	bl	801045e <USB_GetMode>
 800efc8:	4603      	mov	r3, r0
 800efca:	2b01      	cmp	r3, #1
 800efcc:	d01e      	beq.n	800f00c <USB_SetCurrentMode+0x84>
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	2b31      	cmp	r3, #49	; 0x31
 800efd2:	d9f0      	bls.n	800efb6 <USB_SetCurrentMode+0x2e>
 800efd4:	e01a      	b.n	800f00c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800efd6:	78fb      	ldrb	r3, [r7, #3]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d115      	bne.n	800f008 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	68db      	ldr	r3, [r3, #12]
 800efe0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800efe8:	2001      	movs	r0, #1
 800efea:	f7f3 fb65 	bl	80026b8 <HAL_Delay>
      ms++;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	3301      	adds	r3, #1
 800eff2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800eff4:	6878      	ldr	r0, [r7, #4]
 800eff6:	f001 fa32 	bl	801045e <USB_GetMode>
 800effa:	4603      	mov	r3, r0
 800effc:	2b00      	cmp	r3, #0
 800effe:	d005      	beq.n	800f00c <USB_SetCurrentMode+0x84>
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	2b31      	cmp	r3, #49	; 0x31
 800f004:	d9f0      	bls.n	800efe8 <USB_SetCurrentMode+0x60>
 800f006:	e001      	b.n	800f00c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f008:	2301      	movs	r3, #1
 800f00a:	e005      	b.n	800f018 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	2b32      	cmp	r3, #50	; 0x32
 800f010:	d101      	bne.n	800f016 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f012:	2301      	movs	r3, #1
 800f014:	e000      	b.n	800f018 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f016:	2300      	movs	r3, #0
}
 800f018:	4618      	mov	r0, r3
 800f01a:	3710      	adds	r7, #16
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}

0800f020 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f020:	b084      	sub	sp, #16
 800f022:	b580      	push	{r7, lr}
 800f024:	b086      	sub	sp, #24
 800f026:	af00      	add	r7, sp, #0
 800f028:	6078      	str	r0, [r7, #4]
 800f02a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f02e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f032:	2300      	movs	r3, #0
 800f034:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f03a:	2300      	movs	r3, #0
 800f03c:	613b      	str	r3, [r7, #16]
 800f03e:	e009      	b.n	800f054 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f040:	687a      	ldr	r2, [r7, #4]
 800f042:	693b      	ldr	r3, [r7, #16]
 800f044:	3340      	adds	r3, #64	; 0x40
 800f046:	009b      	lsls	r3, r3, #2
 800f048:	4413      	add	r3, r2
 800f04a:	2200      	movs	r2, #0
 800f04c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f04e:	693b      	ldr	r3, [r7, #16]
 800f050:	3301      	adds	r3, #1
 800f052:	613b      	str	r3, [r7, #16]
 800f054:	693b      	ldr	r3, [r7, #16]
 800f056:	2b0e      	cmp	r3, #14
 800f058:	d9f2      	bls.n	800f040 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f05a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d11c      	bne.n	800f09a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f066:	685b      	ldr	r3, [r3, #4]
 800f068:	68fa      	ldr	r2, [r7, #12]
 800f06a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f06e:	f043 0302 	orr.w	r3, r3, #2
 800f072:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f078:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	601a      	str	r2, [r3, #0]
 800f098:	e005      	b.n	800f0a6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f09e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f0ac:	461a      	mov	r2, r3
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0b8:	4619      	mov	r1, r3
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0c0:	461a      	mov	r2, r3
 800f0c2:	680b      	ldr	r3, [r1, #0]
 800f0c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0c8:	2b01      	cmp	r3, #1
 800f0ca:	d10c      	bne.n	800f0e6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d104      	bne.n	800f0dc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f0d2:	2100      	movs	r1, #0
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f000 f965 	bl	800f3a4 <USB_SetDevSpeed>
 800f0da:	e008      	b.n	800f0ee <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f0dc:	2101      	movs	r1, #1
 800f0de:	6878      	ldr	r0, [r7, #4]
 800f0e0:	f000 f960 	bl	800f3a4 <USB_SetDevSpeed>
 800f0e4:	e003      	b.n	800f0ee <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f0e6:	2103      	movs	r1, #3
 800f0e8:	6878      	ldr	r0, [r7, #4]
 800f0ea:	f000 f95b 	bl	800f3a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f0ee:	2110      	movs	r1, #16
 800f0f0:	6878      	ldr	r0, [r7, #4]
 800f0f2:	f000 f8f3 	bl	800f2dc <USB_FlushTxFifo>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d001      	beq.n	800f100 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	f000 f91f 	bl	800f344 <USB_FlushRxFifo>
 800f106:	4603      	mov	r3, r0
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d001      	beq.n	800f110 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800f10c:	2301      	movs	r3, #1
 800f10e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f116:	461a      	mov	r2, r3
 800f118:	2300      	movs	r3, #0
 800f11a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f122:	461a      	mov	r2, r3
 800f124:	2300      	movs	r3, #0
 800f126:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f12e:	461a      	mov	r2, r3
 800f130:	2300      	movs	r3, #0
 800f132:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f134:	2300      	movs	r3, #0
 800f136:	613b      	str	r3, [r7, #16]
 800f138:	e043      	b.n	800f1c2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f13a:	693b      	ldr	r3, [r7, #16]
 800f13c:	015a      	lsls	r2, r3, #5
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	4413      	add	r3, r2
 800f142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f14c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f150:	d118      	bne.n	800f184 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800f152:	693b      	ldr	r3, [r7, #16]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d10a      	bne.n	800f16e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f158:	693b      	ldr	r3, [r7, #16]
 800f15a:	015a      	lsls	r2, r3, #5
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	4413      	add	r3, r2
 800f160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f164:	461a      	mov	r2, r3
 800f166:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f16a:	6013      	str	r3, [r2, #0]
 800f16c:	e013      	b.n	800f196 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f16e:	693b      	ldr	r3, [r7, #16]
 800f170:	015a      	lsls	r2, r3, #5
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	4413      	add	r3, r2
 800f176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f17a:	461a      	mov	r2, r3
 800f17c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f180:	6013      	str	r3, [r2, #0]
 800f182:	e008      	b.n	800f196 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f184:	693b      	ldr	r3, [r7, #16]
 800f186:	015a      	lsls	r2, r3, #5
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	4413      	add	r3, r2
 800f18c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f190:	461a      	mov	r2, r3
 800f192:	2300      	movs	r3, #0
 800f194:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f196:	693b      	ldr	r3, [r7, #16]
 800f198:	015a      	lsls	r2, r3, #5
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	4413      	add	r3, r2
 800f19e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1a2:	461a      	mov	r2, r3
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f1a8:	693b      	ldr	r3, [r7, #16]
 800f1aa:	015a      	lsls	r2, r3, #5
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	4413      	add	r3, r2
 800f1b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1b4:	461a      	mov	r2, r3
 800f1b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f1ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f1bc:	693b      	ldr	r3, [r7, #16]
 800f1be:	3301      	adds	r3, #1
 800f1c0:	613b      	str	r3, [r7, #16]
 800f1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1c4:	693a      	ldr	r2, [r7, #16]
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d3b7      	bcc.n	800f13a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	613b      	str	r3, [r7, #16]
 800f1ce:	e043      	b.n	800f258 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f1d0:	693b      	ldr	r3, [r7, #16]
 800f1d2:	015a      	lsls	r2, r3, #5
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	4413      	add	r3, r2
 800f1d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f1e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f1e6:	d118      	bne.n	800f21a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800f1e8:	693b      	ldr	r3, [r7, #16]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d10a      	bne.n	800f204 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f1ee:	693b      	ldr	r3, [r7, #16]
 800f1f0:	015a      	lsls	r2, r3, #5
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	4413      	add	r3, r2
 800f1f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1fa:	461a      	mov	r2, r3
 800f1fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f200:	6013      	str	r3, [r2, #0]
 800f202:	e013      	b.n	800f22c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f204:	693b      	ldr	r3, [r7, #16]
 800f206:	015a      	lsls	r2, r3, #5
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	4413      	add	r3, r2
 800f20c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f210:	461a      	mov	r2, r3
 800f212:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f216:	6013      	str	r3, [r2, #0]
 800f218:	e008      	b.n	800f22c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f21a:	693b      	ldr	r3, [r7, #16]
 800f21c:	015a      	lsls	r2, r3, #5
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	4413      	add	r3, r2
 800f222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f226:	461a      	mov	r2, r3
 800f228:	2300      	movs	r3, #0
 800f22a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f22c:	693b      	ldr	r3, [r7, #16]
 800f22e:	015a      	lsls	r2, r3, #5
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	4413      	add	r3, r2
 800f234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f238:	461a      	mov	r2, r3
 800f23a:	2300      	movs	r3, #0
 800f23c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f23e:	693b      	ldr	r3, [r7, #16]
 800f240:	015a      	lsls	r2, r3, #5
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	4413      	add	r3, r2
 800f246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f24a:	461a      	mov	r2, r3
 800f24c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f250:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f252:	693b      	ldr	r3, [r7, #16]
 800f254:	3301      	adds	r3, #1
 800f256:	613b      	str	r3, [r7, #16]
 800f258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f25a:	693a      	ldr	r2, [r7, #16]
 800f25c:	429a      	cmp	r2, r3
 800f25e:	d3b7      	bcc.n	800f1d0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f266:	691b      	ldr	r3, [r3, #16]
 800f268:	68fa      	ldr	r2, [r7, #12]
 800f26a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f26e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f272:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	2200      	movs	r2, #0
 800f278:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f280:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f284:	2b00      	cmp	r3, #0
 800f286:	d105      	bne.n	800f294 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	699b      	ldr	r3, [r3, #24]
 800f28c:	f043 0210 	orr.w	r2, r3, #16
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	699a      	ldr	r2, [r3, #24]
 800f298:	4b0e      	ldr	r3, [pc, #56]	; (800f2d4 <USB_DevInit+0x2b4>)
 800f29a:	4313      	orrs	r3, r2
 800f29c:	687a      	ldr	r2, [r7, #4]
 800f29e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f2a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d005      	beq.n	800f2b2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	699b      	ldr	r3, [r3, #24]
 800f2aa:	f043 0208 	orr.w	r2, r3, #8
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f2b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f2b4:	2b01      	cmp	r3, #1
 800f2b6:	d105      	bne.n	800f2c4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	699a      	ldr	r2, [r3, #24]
 800f2bc:	4b06      	ldr	r3, [pc, #24]	; (800f2d8 <USB_DevInit+0x2b8>)
 800f2be:	4313      	orrs	r3, r2
 800f2c0:	687a      	ldr	r2, [r7, #4]
 800f2c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f2c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	3718      	adds	r7, #24
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f2d0:	b004      	add	sp, #16
 800f2d2:	4770      	bx	lr
 800f2d4:	803c3800 	.word	0x803c3800
 800f2d8:	40000004 	.word	0x40000004

0800f2dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f2dc:	b480      	push	{r7}
 800f2de:	b085      	sub	sp, #20
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
 800f2e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	3301      	adds	r3, #1
 800f2ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	4a13      	ldr	r2, [pc, #76]	; (800f340 <USB_FlushTxFifo+0x64>)
 800f2f4:	4293      	cmp	r3, r2
 800f2f6:	d901      	bls.n	800f2fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f2f8:	2303      	movs	r3, #3
 800f2fa:	e01b      	b.n	800f334 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	691b      	ldr	r3, [r3, #16]
 800f300:	2b00      	cmp	r3, #0
 800f302:	daf2      	bge.n	800f2ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f304:	2300      	movs	r3, #0
 800f306:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	019b      	lsls	r3, r3, #6
 800f30c:	f043 0220 	orr.w	r2, r3, #32
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	3301      	adds	r3, #1
 800f318:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	4a08      	ldr	r2, [pc, #32]	; (800f340 <USB_FlushTxFifo+0x64>)
 800f31e:	4293      	cmp	r3, r2
 800f320:	d901      	bls.n	800f326 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800f322:	2303      	movs	r3, #3
 800f324:	e006      	b.n	800f334 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	691b      	ldr	r3, [r3, #16]
 800f32a:	f003 0320 	and.w	r3, r3, #32
 800f32e:	2b20      	cmp	r3, #32
 800f330:	d0f0      	beq.n	800f314 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800f332:	2300      	movs	r3, #0
}
 800f334:	4618      	mov	r0, r3
 800f336:	3714      	adds	r7, #20
 800f338:	46bd      	mov	sp, r7
 800f33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33e:	4770      	bx	lr
 800f340:	00030d40 	.word	0x00030d40

0800f344 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f344:	b480      	push	{r7}
 800f346:	b085      	sub	sp, #20
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f34c:	2300      	movs	r3, #0
 800f34e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	3301      	adds	r3, #1
 800f354:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	4a11      	ldr	r2, [pc, #68]	; (800f3a0 <USB_FlushRxFifo+0x5c>)
 800f35a:	4293      	cmp	r3, r2
 800f35c:	d901      	bls.n	800f362 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800f35e:	2303      	movs	r3, #3
 800f360:	e018      	b.n	800f394 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	691b      	ldr	r3, [r3, #16]
 800f366:	2b00      	cmp	r3, #0
 800f368:	daf2      	bge.n	800f350 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800f36a:	2300      	movs	r3, #0
 800f36c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	2210      	movs	r2, #16
 800f372:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	3301      	adds	r3, #1
 800f378:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	4a08      	ldr	r2, [pc, #32]	; (800f3a0 <USB_FlushRxFifo+0x5c>)
 800f37e:	4293      	cmp	r3, r2
 800f380:	d901      	bls.n	800f386 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800f382:	2303      	movs	r3, #3
 800f384:	e006      	b.n	800f394 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	691b      	ldr	r3, [r3, #16]
 800f38a:	f003 0310 	and.w	r3, r3, #16
 800f38e:	2b10      	cmp	r3, #16
 800f390:	d0f0      	beq.n	800f374 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800f392:	2300      	movs	r3, #0
}
 800f394:	4618      	mov	r0, r3
 800f396:	3714      	adds	r7, #20
 800f398:	46bd      	mov	sp, r7
 800f39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39e:	4770      	bx	lr
 800f3a0:	00030d40 	.word	0x00030d40

0800f3a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f3a4:	b480      	push	{r7}
 800f3a6:	b085      	sub	sp, #20
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
 800f3ac:	460b      	mov	r3, r1
 800f3ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3ba:	681a      	ldr	r2, [r3, #0]
 800f3bc:	78fb      	ldrb	r3, [r7, #3]
 800f3be:	68f9      	ldr	r1, [r7, #12]
 800f3c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f3c4:	4313      	orrs	r3, r2
 800f3c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f3c8:	2300      	movs	r3, #0
}
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	3714      	adds	r7, #20
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d4:	4770      	bx	lr

0800f3d6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800f3d6:	b480      	push	{r7}
 800f3d8:	b087      	sub	sp, #28
 800f3da:	af00      	add	r7, sp, #0
 800f3dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f3e2:	693b      	ldr	r3, [r7, #16]
 800f3e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3e8:	689b      	ldr	r3, [r3, #8]
 800f3ea:	f003 0306 	and.w	r3, r3, #6
 800f3ee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d102      	bne.n	800f3fc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	75fb      	strb	r3, [r7, #23]
 800f3fa:	e00a      	b.n	800f412 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	2b02      	cmp	r3, #2
 800f400:	d002      	beq.n	800f408 <USB_GetDevSpeed+0x32>
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	2b06      	cmp	r3, #6
 800f406:	d102      	bne.n	800f40e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800f408:	2302      	movs	r3, #2
 800f40a:	75fb      	strb	r3, [r7, #23]
 800f40c:	e001      	b.n	800f412 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800f40e:	230f      	movs	r3, #15
 800f410:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800f412:	7dfb      	ldrb	r3, [r7, #23]
}
 800f414:	4618      	mov	r0, r3
 800f416:	371c      	adds	r7, #28
 800f418:	46bd      	mov	sp, r7
 800f41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41e:	4770      	bx	lr

0800f420 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f420:	b480      	push	{r7}
 800f422:	b085      	sub	sp, #20
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
 800f428:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	781b      	ldrb	r3, [r3, #0]
 800f432:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f434:	683b      	ldr	r3, [r7, #0]
 800f436:	785b      	ldrb	r3, [r3, #1]
 800f438:	2b01      	cmp	r3, #1
 800f43a:	d139      	bne.n	800f4b0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f442:	69da      	ldr	r2, [r3, #28]
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	781b      	ldrb	r3, [r3, #0]
 800f448:	f003 030f 	and.w	r3, r3, #15
 800f44c:	2101      	movs	r1, #1
 800f44e:	fa01 f303 	lsl.w	r3, r1, r3
 800f452:	b29b      	uxth	r3, r3
 800f454:	68f9      	ldr	r1, [r7, #12]
 800f456:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f45a:	4313      	orrs	r3, r2
 800f45c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	015a      	lsls	r2, r3, #5
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	4413      	add	r3, r2
 800f466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f470:	2b00      	cmp	r3, #0
 800f472:	d153      	bne.n	800f51c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f474:	68bb      	ldr	r3, [r7, #8]
 800f476:	015a      	lsls	r2, r3, #5
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	4413      	add	r3, r2
 800f47c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f480:	681a      	ldr	r2, [r3, #0]
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	68db      	ldr	r3, [r3, #12]
 800f486:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	791b      	ldrb	r3, [r3, #4]
 800f48e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f490:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	059b      	lsls	r3, r3, #22
 800f496:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f498:	431a      	orrs	r2, r3
 800f49a:	68bb      	ldr	r3, [r7, #8]
 800f49c:	0159      	lsls	r1, r3, #5
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	440b      	add	r3, r1
 800f4a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4a6:	4619      	mov	r1, r3
 800f4a8:	4b20      	ldr	r3, [pc, #128]	; (800f52c <USB_ActivateEndpoint+0x10c>)
 800f4aa:	4313      	orrs	r3, r2
 800f4ac:	600b      	str	r3, [r1, #0]
 800f4ae:	e035      	b.n	800f51c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4b6:	69da      	ldr	r2, [r3, #28]
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	781b      	ldrb	r3, [r3, #0]
 800f4bc:	f003 030f 	and.w	r3, r3, #15
 800f4c0:	2101      	movs	r1, #1
 800f4c2:	fa01 f303 	lsl.w	r3, r1, r3
 800f4c6:	041b      	lsls	r3, r3, #16
 800f4c8:	68f9      	ldr	r1, [r7, #12]
 800f4ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f4ce:	4313      	orrs	r3, r2
 800f4d0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f4d2:	68bb      	ldr	r3, [r7, #8]
 800f4d4:	015a      	lsls	r2, r3, #5
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	4413      	add	r3, r2
 800f4da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d119      	bne.n	800f51c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	015a      	lsls	r2, r3, #5
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	4413      	add	r3, r2
 800f4f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4f4:	681a      	ldr	r2, [r3, #0]
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	68db      	ldr	r3, [r3, #12]
 800f4fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	791b      	ldrb	r3, [r3, #4]
 800f502:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f504:	430b      	orrs	r3, r1
 800f506:	431a      	orrs	r2, r3
 800f508:	68bb      	ldr	r3, [r7, #8]
 800f50a:	0159      	lsls	r1, r3, #5
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	440b      	add	r3, r1
 800f510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f514:	4619      	mov	r1, r3
 800f516:	4b05      	ldr	r3, [pc, #20]	; (800f52c <USB_ActivateEndpoint+0x10c>)
 800f518:	4313      	orrs	r3, r2
 800f51a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f51c:	2300      	movs	r3, #0
}
 800f51e:	4618      	mov	r0, r3
 800f520:	3714      	adds	r7, #20
 800f522:	46bd      	mov	sp, r7
 800f524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f528:	4770      	bx	lr
 800f52a:	bf00      	nop
 800f52c:	10008000 	.word	0x10008000

0800f530 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f530:	b480      	push	{r7}
 800f532:	b085      	sub	sp, #20
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
 800f538:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	781b      	ldrb	r3, [r3, #0]
 800f542:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	785b      	ldrb	r3, [r3, #1]
 800f548:	2b01      	cmp	r3, #1
 800f54a:	d161      	bne.n	800f610 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	015a      	lsls	r2, r3, #5
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	4413      	add	r3, r2
 800f554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f55e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f562:	d11f      	bne.n	800f5a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	015a      	lsls	r2, r3, #5
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	4413      	add	r3, r2
 800f56c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	68ba      	ldr	r2, [r7, #8]
 800f574:	0151      	lsls	r1, r2, #5
 800f576:	68fa      	ldr	r2, [r7, #12]
 800f578:	440a      	add	r2, r1
 800f57a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f57e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f582:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f584:	68bb      	ldr	r3, [r7, #8]
 800f586:	015a      	lsls	r2, r3, #5
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	4413      	add	r3, r2
 800f58c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	68ba      	ldr	r2, [r7, #8]
 800f594:	0151      	lsls	r1, r2, #5
 800f596:	68fa      	ldr	r2, [r7, #12]
 800f598:	440a      	add	r2, r1
 800f59a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f59e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f5a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	781b      	ldrb	r3, [r3, #0]
 800f5b0:	f003 030f 	and.w	r3, r3, #15
 800f5b4:	2101      	movs	r1, #1
 800f5b6:	fa01 f303 	lsl.w	r3, r1, r3
 800f5ba:	b29b      	uxth	r3, r3
 800f5bc:	43db      	mvns	r3, r3
 800f5be:	68f9      	ldr	r1, [r7, #12]
 800f5c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f5c4:	4013      	ands	r3, r2
 800f5c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5ce:	69da      	ldr	r2, [r3, #28]
 800f5d0:	683b      	ldr	r3, [r7, #0]
 800f5d2:	781b      	ldrb	r3, [r3, #0]
 800f5d4:	f003 030f 	and.w	r3, r3, #15
 800f5d8:	2101      	movs	r1, #1
 800f5da:	fa01 f303 	lsl.w	r3, r1, r3
 800f5de:	b29b      	uxth	r3, r3
 800f5e0:	43db      	mvns	r3, r3
 800f5e2:	68f9      	ldr	r1, [r7, #12]
 800f5e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f5e8:	4013      	ands	r3, r2
 800f5ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f5ec:	68bb      	ldr	r3, [r7, #8]
 800f5ee:	015a      	lsls	r2, r3, #5
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	4413      	add	r3, r2
 800f5f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5f8:	681a      	ldr	r2, [r3, #0]
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	0159      	lsls	r1, r3, #5
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	440b      	add	r3, r1
 800f602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f606:	4619      	mov	r1, r3
 800f608:	4b35      	ldr	r3, [pc, #212]	; (800f6e0 <USB_DeactivateEndpoint+0x1b0>)
 800f60a:	4013      	ands	r3, r2
 800f60c:	600b      	str	r3, [r1, #0]
 800f60e:	e060      	b.n	800f6d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f610:	68bb      	ldr	r3, [r7, #8]
 800f612:	015a      	lsls	r2, r3, #5
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	4413      	add	r3, r2
 800f618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f622:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f626:	d11f      	bne.n	800f668 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f628:	68bb      	ldr	r3, [r7, #8]
 800f62a:	015a      	lsls	r2, r3, #5
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	4413      	add	r3, r2
 800f630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	68ba      	ldr	r2, [r7, #8]
 800f638:	0151      	lsls	r1, r2, #5
 800f63a:	68fa      	ldr	r2, [r7, #12]
 800f63c:	440a      	add	r2, r1
 800f63e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f642:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f646:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	015a      	lsls	r2, r3, #5
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	4413      	add	r3, r2
 800f650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	68ba      	ldr	r2, [r7, #8]
 800f658:	0151      	lsls	r1, r2, #5
 800f65a:	68fa      	ldr	r2, [r7, #12]
 800f65c:	440a      	add	r2, r1
 800f65e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f662:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f666:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f66e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f670:	683b      	ldr	r3, [r7, #0]
 800f672:	781b      	ldrb	r3, [r3, #0]
 800f674:	f003 030f 	and.w	r3, r3, #15
 800f678:	2101      	movs	r1, #1
 800f67a:	fa01 f303 	lsl.w	r3, r1, r3
 800f67e:	041b      	lsls	r3, r3, #16
 800f680:	43db      	mvns	r3, r3
 800f682:	68f9      	ldr	r1, [r7, #12]
 800f684:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f688:	4013      	ands	r3, r2
 800f68a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f692:	69da      	ldr	r2, [r3, #28]
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	781b      	ldrb	r3, [r3, #0]
 800f698:	f003 030f 	and.w	r3, r3, #15
 800f69c:	2101      	movs	r1, #1
 800f69e:	fa01 f303 	lsl.w	r3, r1, r3
 800f6a2:	041b      	lsls	r3, r3, #16
 800f6a4:	43db      	mvns	r3, r3
 800f6a6:	68f9      	ldr	r1, [r7, #12]
 800f6a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f6ac:	4013      	ands	r3, r2
 800f6ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f6b0:	68bb      	ldr	r3, [r7, #8]
 800f6b2:	015a      	lsls	r2, r3, #5
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	4413      	add	r3, r2
 800f6b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6bc:	681a      	ldr	r2, [r3, #0]
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	0159      	lsls	r1, r3, #5
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	440b      	add	r3, r1
 800f6c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6ca:	4619      	mov	r1, r3
 800f6cc:	4b05      	ldr	r3, [pc, #20]	; (800f6e4 <USB_DeactivateEndpoint+0x1b4>)
 800f6ce:	4013      	ands	r3, r2
 800f6d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f6d2:	2300      	movs	r3, #0
}
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	3714      	adds	r7, #20
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6de:	4770      	bx	lr
 800f6e0:	ec337800 	.word	0xec337800
 800f6e4:	eff37800 	.word	0xeff37800

0800f6e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b08a      	sub	sp, #40	; 0x28
 800f6ec:	af02      	add	r7, sp, #8
 800f6ee:	60f8      	str	r0, [r7, #12]
 800f6f0:	60b9      	str	r1, [r7, #8]
 800f6f2:	4613      	mov	r3, r2
 800f6f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	781b      	ldrb	r3, [r3, #0]
 800f6fe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	785b      	ldrb	r3, [r3, #1]
 800f704:	2b01      	cmp	r3, #1
 800f706:	f040 8163 	bne.w	800f9d0 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f70a:	68bb      	ldr	r3, [r7, #8]
 800f70c:	699b      	ldr	r3, [r3, #24]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d132      	bne.n	800f778 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f712:	69bb      	ldr	r3, [r7, #24]
 800f714:	015a      	lsls	r2, r3, #5
 800f716:	69fb      	ldr	r3, [r7, #28]
 800f718:	4413      	add	r3, r2
 800f71a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f71e:	691a      	ldr	r2, [r3, #16]
 800f720:	69bb      	ldr	r3, [r7, #24]
 800f722:	0159      	lsls	r1, r3, #5
 800f724:	69fb      	ldr	r3, [r7, #28]
 800f726:	440b      	add	r3, r1
 800f728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f72c:	4619      	mov	r1, r3
 800f72e:	4ba5      	ldr	r3, [pc, #660]	; (800f9c4 <USB_EPStartXfer+0x2dc>)
 800f730:	4013      	ands	r3, r2
 800f732:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f734:	69bb      	ldr	r3, [r7, #24]
 800f736:	015a      	lsls	r2, r3, #5
 800f738:	69fb      	ldr	r3, [r7, #28]
 800f73a:	4413      	add	r3, r2
 800f73c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f740:	691b      	ldr	r3, [r3, #16]
 800f742:	69ba      	ldr	r2, [r7, #24]
 800f744:	0151      	lsls	r1, r2, #5
 800f746:	69fa      	ldr	r2, [r7, #28]
 800f748:	440a      	add	r2, r1
 800f74a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f74e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f752:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f754:	69bb      	ldr	r3, [r7, #24]
 800f756:	015a      	lsls	r2, r3, #5
 800f758:	69fb      	ldr	r3, [r7, #28]
 800f75a:	4413      	add	r3, r2
 800f75c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f760:	691a      	ldr	r2, [r3, #16]
 800f762:	69bb      	ldr	r3, [r7, #24]
 800f764:	0159      	lsls	r1, r3, #5
 800f766:	69fb      	ldr	r3, [r7, #28]
 800f768:	440b      	add	r3, r1
 800f76a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f76e:	4619      	mov	r1, r3
 800f770:	4b95      	ldr	r3, [pc, #596]	; (800f9c8 <USB_EPStartXfer+0x2e0>)
 800f772:	4013      	ands	r3, r2
 800f774:	610b      	str	r3, [r1, #16]
 800f776:	e074      	b.n	800f862 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f778:	69bb      	ldr	r3, [r7, #24]
 800f77a:	015a      	lsls	r2, r3, #5
 800f77c:	69fb      	ldr	r3, [r7, #28]
 800f77e:	4413      	add	r3, r2
 800f780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f784:	691a      	ldr	r2, [r3, #16]
 800f786:	69bb      	ldr	r3, [r7, #24]
 800f788:	0159      	lsls	r1, r3, #5
 800f78a:	69fb      	ldr	r3, [r7, #28]
 800f78c:	440b      	add	r3, r1
 800f78e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f792:	4619      	mov	r1, r3
 800f794:	4b8c      	ldr	r3, [pc, #560]	; (800f9c8 <USB_EPStartXfer+0x2e0>)
 800f796:	4013      	ands	r3, r2
 800f798:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f79a:	69bb      	ldr	r3, [r7, #24]
 800f79c:	015a      	lsls	r2, r3, #5
 800f79e:	69fb      	ldr	r3, [r7, #28]
 800f7a0:	4413      	add	r3, r2
 800f7a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7a6:	691a      	ldr	r2, [r3, #16]
 800f7a8:	69bb      	ldr	r3, [r7, #24]
 800f7aa:	0159      	lsls	r1, r3, #5
 800f7ac:	69fb      	ldr	r3, [r7, #28]
 800f7ae:	440b      	add	r3, r1
 800f7b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7b4:	4619      	mov	r1, r3
 800f7b6:	4b83      	ldr	r3, [pc, #524]	; (800f9c4 <USB_EPStartXfer+0x2dc>)
 800f7b8:	4013      	ands	r3, r2
 800f7ba:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f7bc:	69bb      	ldr	r3, [r7, #24]
 800f7be:	015a      	lsls	r2, r3, #5
 800f7c0:	69fb      	ldr	r3, [r7, #28]
 800f7c2:	4413      	add	r3, r2
 800f7c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7c8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f7ca:	68bb      	ldr	r3, [r7, #8]
 800f7cc:	6999      	ldr	r1, [r3, #24]
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	68db      	ldr	r3, [r3, #12]
 800f7d2:	440b      	add	r3, r1
 800f7d4:	1e59      	subs	r1, r3, #1
 800f7d6:	68bb      	ldr	r3, [r7, #8]
 800f7d8:	68db      	ldr	r3, [r3, #12]
 800f7da:	fbb1 f3f3 	udiv	r3, r1, r3
 800f7de:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f7e0:	4b7a      	ldr	r3, [pc, #488]	; (800f9cc <USB_EPStartXfer+0x2e4>)
 800f7e2:	400b      	ands	r3, r1
 800f7e4:	69b9      	ldr	r1, [r7, #24]
 800f7e6:	0148      	lsls	r0, r1, #5
 800f7e8:	69f9      	ldr	r1, [r7, #28]
 800f7ea:	4401      	add	r1, r0
 800f7ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f7f0:	4313      	orrs	r3, r2
 800f7f2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f7f4:	69bb      	ldr	r3, [r7, #24]
 800f7f6:	015a      	lsls	r2, r3, #5
 800f7f8:	69fb      	ldr	r3, [r7, #28]
 800f7fa:	4413      	add	r3, r2
 800f7fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f800:	691a      	ldr	r2, [r3, #16]
 800f802:	68bb      	ldr	r3, [r7, #8]
 800f804:	699b      	ldr	r3, [r3, #24]
 800f806:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f80a:	69b9      	ldr	r1, [r7, #24]
 800f80c:	0148      	lsls	r0, r1, #5
 800f80e:	69f9      	ldr	r1, [r7, #28]
 800f810:	4401      	add	r1, r0
 800f812:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f816:	4313      	orrs	r3, r2
 800f818:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f81a:	68bb      	ldr	r3, [r7, #8]
 800f81c:	791b      	ldrb	r3, [r3, #4]
 800f81e:	2b01      	cmp	r3, #1
 800f820:	d11f      	bne.n	800f862 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f822:	69bb      	ldr	r3, [r7, #24]
 800f824:	015a      	lsls	r2, r3, #5
 800f826:	69fb      	ldr	r3, [r7, #28]
 800f828:	4413      	add	r3, r2
 800f82a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f82e:	691b      	ldr	r3, [r3, #16]
 800f830:	69ba      	ldr	r2, [r7, #24]
 800f832:	0151      	lsls	r1, r2, #5
 800f834:	69fa      	ldr	r2, [r7, #28]
 800f836:	440a      	add	r2, r1
 800f838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f83c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f840:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f842:	69bb      	ldr	r3, [r7, #24]
 800f844:	015a      	lsls	r2, r3, #5
 800f846:	69fb      	ldr	r3, [r7, #28]
 800f848:	4413      	add	r3, r2
 800f84a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f84e:	691b      	ldr	r3, [r3, #16]
 800f850:	69ba      	ldr	r2, [r7, #24]
 800f852:	0151      	lsls	r1, r2, #5
 800f854:	69fa      	ldr	r2, [r7, #28]
 800f856:	440a      	add	r2, r1
 800f858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f85c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f860:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800f862:	79fb      	ldrb	r3, [r7, #7]
 800f864:	2b01      	cmp	r3, #1
 800f866:	d14b      	bne.n	800f900 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f868:	68bb      	ldr	r3, [r7, #8]
 800f86a:	695b      	ldr	r3, [r3, #20]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d009      	beq.n	800f884 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f870:	69bb      	ldr	r3, [r7, #24]
 800f872:	015a      	lsls	r2, r3, #5
 800f874:	69fb      	ldr	r3, [r7, #28]
 800f876:	4413      	add	r3, r2
 800f878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f87c:	461a      	mov	r2, r3
 800f87e:	68bb      	ldr	r3, [r7, #8]
 800f880:	695b      	ldr	r3, [r3, #20]
 800f882:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f884:	68bb      	ldr	r3, [r7, #8]
 800f886:	791b      	ldrb	r3, [r3, #4]
 800f888:	2b01      	cmp	r3, #1
 800f88a:	d128      	bne.n	800f8de <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f88c:	69fb      	ldr	r3, [r7, #28]
 800f88e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f892:	689b      	ldr	r3, [r3, #8]
 800f894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d110      	bne.n	800f8be <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f89c:	69bb      	ldr	r3, [r7, #24]
 800f89e:	015a      	lsls	r2, r3, #5
 800f8a0:	69fb      	ldr	r3, [r7, #28]
 800f8a2:	4413      	add	r3, r2
 800f8a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	69ba      	ldr	r2, [r7, #24]
 800f8ac:	0151      	lsls	r1, r2, #5
 800f8ae:	69fa      	ldr	r2, [r7, #28]
 800f8b0:	440a      	add	r2, r1
 800f8b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f8b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f8ba:	6013      	str	r3, [r2, #0]
 800f8bc:	e00f      	b.n	800f8de <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f8be:	69bb      	ldr	r3, [r7, #24]
 800f8c0:	015a      	lsls	r2, r3, #5
 800f8c2:	69fb      	ldr	r3, [r7, #28]
 800f8c4:	4413      	add	r3, r2
 800f8c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	69ba      	ldr	r2, [r7, #24]
 800f8ce:	0151      	lsls	r1, r2, #5
 800f8d0:	69fa      	ldr	r2, [r7, #28]
 800f8d2:	440a      	add	r2, r1
 800f8d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f8d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f8dc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f8de:	69bb      	ldr	r3, [r7, #24]
 800f8e0:	015a      	lsls	r2, r3, #5
 800f8e2:	69fb      	ldr	r3, [r7, #28]
 800f8e4:	4413      	add	r3, r2
 800f8e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	69ba      	ldr	r2, [r7, #24]
 800f8ee:	0151      	lsls	r1, r2, #5
 800f8f0:	69fa      	ldr	r2, [r7, #28]
 800f8f2:	440a      	add	r2, r1
 800f8f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f8f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f8fc:	6013      	str	r3, [r2, #0]
 800f8fe:	e137      	b.n	800fb70 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f900:	69bb      	ldr	r3, [r7, #24]
 800f902:	015a      	lsls	r2, r3, #5
 800f904:	69fb      	ldr	r3, [r7, #28]
 800f906:	4413      	add	r3, r2
 800f908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	69ba      	ldr	r2, [r7, #24]
 800f910:	0151      	lsls	r1, r2, #5
 800f912:	69fa      	ldr	r2, [r7, #28]
 800f914:	440a      	add	r2, r1
 800f916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f91a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f91e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	791b      	ldrb	r3, [r3, #4]
 800f924:	2b01      	cmp	r3, #1
 800f926:	d015      	beq.n	800f954 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f928:	68bb      	ldr	r3, [r7, #8]
 800f92a:	699b      	ldr	r3, [r3, #24]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	f000 811f 	beq.w	800fb70 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f932:	69fb      	ldr	r3, [r7, #28]
 800f934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	781b      	ldrb	r3, [r3, #0]
 800f93e:	f003 030f 	and.w	r3, r3, #15
 800f942:	2101      	movs	r1, #1
 800f944:	fa01 f303 	lsl.w	r3, r1, r3
 800f948:	69f9      	ldr	r1, [r7, #28]
 800f94a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f94e:	4313      	orrs	r3, r2
 800f950:	634b      	str	r3, [r1, #52]	; 0x34
 800f952:	e10d      	b.n	800fb70 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f954:	69fb      	ldr	r3, [r7, #28]
 800f956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f95a:	689b      	ldr	r3, [r3, #8]
 800f95c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f960:	2b00      	cmp	r3, #0
 800f962:	d110      	bne.n	800f986 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f964:	69bb      	ldr	r3, [r7, #24]
 800f966:	015a      	lsls	r2, r3, #5
 800f968:	69fb      	ldr	r3, [r7, #28]
 800f96a:	4413      	add	r3, r2
 800f96c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	69ba      	ldr	r2, [r7, #24]
 800f974:	0151      	lsls	r1, r2, #5
 800f976:	69fa      	ldr	r2, [r7, #28]
 800f978:	440a      	add	r2, r1
 800f97a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f97e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f982:	6013      	str	r3, [r2, #0]
 800f984:	e00f      	b.n	800f9a6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f986:	69bb      	ldr	r3, [r7, #24]
 800f988:	015a      	lsls	r2, r3, #5
 800f98a:	69fb      	ldr	r3, [r7, #28]
 800f98c:	4413      	add	r3, r2
 800f98e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	69ba      	ldr	r2, [r7, #24]
 800f996:	0151      	lsls	r1, r2, #5
 800f998:	69fa      	ldr	r2, [r7, #28]
 800f99a:	440a      	add	r2, r1
 800f99c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f9a4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	6919      	ldr	r1, [r3, #16]
 800f9aa:	68bb      	ldr	r3, [r7, #8]
 800f9ac:	781a      	ldrb	r2, [r3, #0]
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	699b      	ldr	r3, [r3, #24]
 800f9b2:	b298      	uxth	r0, r3
 800f9b4:	79fb      	ldrb	r3, [r7, #7]
 800f9b6:	9300      	str	r3, [sp, #0]
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	68f8      	ldr	r0, [r7, #12]
 800f9bc:	f000 faea 	bl	800ff94 <USB_WritePacket>
 800f9c0:	e0d6      	b.n	800fb70 <USB_EPStartXfer+0x488>
 800f9c2:	bf00      	nop
 800f9c4:	e007ffff 	.word	0xe007ffff
 800f9c8:	fff80000 	.word	0xfff80000
 800f9cc:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f9d0:	69bb      	ldr	r3, [r7, #24]
 800f9d2:	015a      	lsls	r2, r3, #5
 800f9d4:	69fb      	ldr	r3, [r7, #28]
 800f9d6:	4413      	add	r3, r2
 800f9d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9dc:	691a      	ldr	r2, [r3, #16]
 800f9de:	69bb      	ldr	r3, [r7, #24]
 800f9e0:	0159      	lsls	r1, r3, #5
 800f9e2:	69fb      	ldr	r3, [r7, #28]
 800f9e4:	440b      	add	r3, r1
 800f9e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9ea:	4619      	mov	r1, r3
 800f9ec:	4b63      	ldr	r3, [pc, #396]	; (800fb7c <USB_EPStartXfer+0x494>)
 800f9ee:	4013      	ands	r3, r2
 800f9f0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f9f2:	69bb      	ldr	r3, [r7, #24]
 800f9f4:	015a      	lsls	r2, r3, #5
 800f9f6:	69fb      	ldr	r3, [r7, #28]
 800f9f8:	4413      	add	r3, r2
 800f9fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9fe:	691a      	ldr	r2, [r3, #16]
 800fa00:	69bb      	ldr	r3, [r7, #24]
 800fa02:	0159      	lsls	r1, r3, #5
 800fa04:	69fb      	ldr	r3, [r7, #28]
 800fa06:	440b      	add	r3, r1
 800fa08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa0c:	4619      	mov	r1, r3
 800fa0e:	4b5c      	ldr	r3, [pc, #368]	; (800fb80 <USB_EPStartXfer+0x498>)
 800fa10:	4013      	ands	r3, r2
 800fa12:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800fa14:	68bb      	ldr	r3, [r7, #8]
 800fa16:	699b      	ldr	r3, [r3, #24]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d123      	bne.n	800fa64 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800fa1c:	69bb      	ldr	r3, [r7, #24]
 800fa1e:	015a      	lsls	r2, r3, #5
 800fa20:	69fb      	ldr	r3, [r7, #28]
 800fa22:	4413      	add	r3, r2
 800fa24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa28:	691a      	ldr	r2, [r3, #16]
 800fa2a:	68bb      	ldr	r3, [r7, #8]
 800fa2c:	68db      	ldr	r3, [r3, #12]
 800fa2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fa32:	69b9      	ldr	r1, [r7, #24]
 800fa34:	0148      	lsls	r0, r1, #5
 800fa36:	69f9      	ldr	r1, [r7, #28]
 800fa38:	4401      	add	r1, r0
 800fa3a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fa3e:	4313      	orrs	r3, r2
 800fa40:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fa42:	69bb      	ldr	r3, [r7, #24]
 800fa44:	015a      	lsls	r2, r3, #5
 800fa46:	69fb      	ldr	r3, [r7, #28]
 800fa48:	4413      	add	r3, r2
 800fa4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa4e:	691b      	ldr	r3, [r3, #16]
 800fa50:	69ba      	ldr	r2, [r7, #24]
 800fa52:	0151      	lsls	r1, r2, #5
 800fa54:	69fa      	ldr	r2, [r7, #28]
 800fa56:	440a      	add	r2, r1
 800fa58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fa5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fa60:	6113      	str	r3, [r2, #16]
 800fa62:	e037      	b.n	800fad4 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800fa64:	68bb      	ldr	r3, [r7, #8]
 800fa66:	699a      	ldr	r2, [r3, #24]
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	68db      	ldr	r3, [r3, #12]
 800fa6c:	4413      	add	r3, r2
 800fa6e:	1e5a      	subs	r2, r3, #1
 800fa70:	68bb      	ldr	r3, [r7, #8]
 800fa72:	68db      	ldr	r3, [r3, #12]
 800fa74:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa78:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800fa7a:	68bb      	ldr	r3, [r7, #8]
 800fa7c:	68db      	ldr	r3, [r3, #12]
 800fa7e:	8afa      	ldrh	r2, [r7, #22]
 800fa80:	fb03 f202 	mul.w	r2, r3, r2
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800fa88:	69bb      	ldr	r3, [r7, #24]
 800fa8a:	015a      	lsls	r2, r3, #5
 800fa8c:	69fb      	ldr	r3, [r7, #28]
 800fa8e:	4413      	add	r3, r2
 800fa90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa94:	691a      	ldr	r2, [r3, #16]
 800fa96:	8afb      	ldrh	r3, [r7, #22]
 800fa98:	04d9      	lsls	r1, r3, #19
 800fa9a:	4b3a      	ldr	r3, [pc, #232]	; (800fb84 <USB_EPStartXfer+0x49c>)
 800fa9c:	400b      	ands	r3, r1
 800fa9e:	69b9      	ldr	r1, [r7, #24]
 800faa0:	0148      	lsls	r0, r1, #5
 800faa2:	69f9      	ldr	r1, [r7, #28]
 800faa4:	4401      	add	r1, r0
 800faa6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800faaa:	4313      	orrs	r3, r2
 800faac:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800faae:	69bb      	ldr	r3, [r7, #24]
 800fab0:	015a      	lsls	r2, r3, #5
 800fab2:	69fb      	ldr	r3, [r7, #28]
 800fab4:	4413      	add	r3, r2
 800fab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800faba:	691a      	ldr	r2, [r3, #16]
 800fabc:	68bb      	ldr	r3, [r7, #8]
 800fabe:	69db      	ldr	r3, [r3, #28]
 800fac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fac4:	69b9      	ldr	r1, [r7, #24]
 800fac6:	0148      	lsls	r0, r1, #5
 800fac8:	69f9      	ldr	r1, [r7, #28]
 800faca:	4401      	add	r1, r0
 800facc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fad0:	4313      	orrs	r3, r2
 800fad2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800fad4:	79fb      	ldrb	r3, [r7, #7]
 800fad6:	2b01      	cmp	r3, #1
 800fad8:	d10d      	bne.n	800faf6 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800fada:	68bb      	ldr	r3, [r7, #8]
 800fadc:	691b      	ldr	r3, [r3, #16]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d009      	beq.n	800faf6 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800fae2:	68bb      	ldr	r3, [r7, #8]
 800fae4:	6919      	ldr	r1, [r3, #16]
 800fae6:	69bb      	ldr	r3, [r7, #24]
 800fae8:	015a      	lsls	r2, r3, #5
 800faea:	69fb      	ldr	r3, [r7, #28]
 800faec:	4413      	add	r3, r2
 800faee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800faf2:	460a      	mov	r2, r1
 800faf4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800faf6:	68bb      	ldr	r3, [r7, #8]
 800faf8:	791b      	ldrb	r3, [r3, #4]
 800fafa:	2b01      	cmp	r3, #1
 800fafc:	d128      	bne.n	800fb50 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fafe:	69fb      	ldr	r3, [r7, #28]
 800fb00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb04:	689b      	ldr	r3, [r3, #8]
 800fb06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d110      	bne.n	800fb30 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800fb0e:	69bb      	ldr	r3, [r7, #24]
 800fb10:	015a      	lsls	r2, r3, #5
 800fb12:	69fb      	ldr	r3, [r7, #28]
 800fb14:	4413      	add	r3, r2
 800fb16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	69ba      	ldr	r2, [r7, #24]
 800fb1e:	0151      	lsls	r1, r2, #5
 800fb20:	69fa      	ldr	r2, [r7, #28]
 800fb22:	440a      	add	r2, r1
 800fb24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fb2c:	6013      	str	r3, [r2, #0]
 800fb2e:	e00f      	b.n	800fb50 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800fb30:	69bb      	ldr	r3, [r7, #24]
 800fb32:	015a      	lsls	r2, r3, #5
 800fb34:	69fb      	ldr	r3, [r7, #28]
 800fb36:	4413      	add	r3, r2
 800fb38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	69ba      	ldr	r2, [r7, #24]
 800fb40:	0151      	lsls	r1, r2, #5
 800fb42:	69fa      	ldr	r2, [r7, #28]
 800fb44:	440a      	add	r2, r1
 800fb46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fb4e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800fb50:	69bb      	ldr	r3, [r7, #24]
 800fb52:	015a      	lsls	r2, r3, #5
 800fb54:	69fb      	ldr	r3, [r7, #28]
 800fb56:	4413      	add	r3, r2
 800fb58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	69ba      	ldr	r2, [r7, #24]
 800fb60:	0151      	lsls	r1, r2, #5
 800fb62:	69fa      	ldr	r2, [r7, #28]
 800fb64:	440a      	add	r2, r1
 800fb66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fb6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fb70:	2300      	movs	r3, #0
}
 800fb72:	4618      	mov	r0, r3
 800fb74:	3720      	adds	r7, #32
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd80      	pop	{r7, pc}
 800fb7a:	bf00      	nop
 800fb7c:	fff80000 	.word	0xfff80000
 800fb80:	e007ffff 	.word	0xe007ffff
 800fb84:	1ff80000 	.word	0x1ff80000

0800fb88 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800fb88:	b480      	push	{r7}
 800fb8a:	b087      	sub	sp, #28
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	60f8      	str	r0, [r7, #12]
 800fb90:	60b9      	str	r1, [r7, #8]
 800fb92:	4613      	mov	r3, r2
 800fb94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800fb9a:	68bb      	ldr	r3, [r7, #8]
 800fb9c:	781b      	ldrb	r3, [r3, #0]
 800fb9e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fba0:	68bb      	ldr	r3, [r7, #8]
 800fba2:	785b      	ldrb	r3, [r3, #1]
 800fba4:	2b01      	cmp	r3, #1
 800fba6:	f040 80ce 	bne.w	800fd46 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800fbaa:	68bb      	ldr	r3, [r7, #8]
 800fbac:	699b      	ldr	r3, [r3, #24]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d132      	bne.n	800fc18 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fbb2:	693b      	ldr	r3, [r7, #16]
 800fbb4:	015a      	lsls	r2, r3, #5
 800fbb6:	697b      	ldr	r3, [r7, #20]
 800fbb8:	4413      	add	r3, r2
 800fbba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbbe:	691a      	ldr	r2, [r3, #16]
 800fbc0:	693b      	ldr	r3, [r7, #16]
 800fbc2:	0159      	lsls	r1, r3, #5
 800fbc4:	697b      	ldr	r3, [r7, #20]
 800fbc6:	440b      	add	r3, r1
 800fbc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbcc:	4619      	mov	r1, r3
 800fbce:	4b9a      	ldr	r3, [pc, #616]	; (800fe38 <USB_EP0StartXfer+0x2b0>)
 800fbd0:	4013      	ands	r3, r2
 800fbd2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fbd4:	693b      	ldr	r3, [r7, #16]
 800fbd6:	015a      	lsls	r2, r3, #5
 800fbd8:	697b      	ldr	r3, [r7, #20]
 800fbda:	4413      	add	r3, r2
 800fbdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbe0:	691b      	ldr	r3, [r3, #16]
 800fbe2:	693a      	ldr	r2, [r7, #16]
 800fbe4:	0151      	lsls	r1, r2, #5
 800fbe6:	697a      	ldr	r2, [r7, #20]
 800fbe8:	440a      	add	r2, r1
 800fbea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fbee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fbf2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fbf4:	693b      	ldr	r3, [r7, #16]
 800fbf6:	015a      	lsls	r2, r3, #5
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	4413      	add	r3, r2
 800fbfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc00:	691a      	ldr	r2, [r3, #16]
 800fc02:	693b      	ldr	r3, [r7, #16]
 800fc04:	0159      	lsls	r1, r3, #5
 800fc06:	697b      	ldr	r3, [r7, #20]
 800fc08:	440b      	add	r3, r1
 800fc0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc0e:	4619      	mov	r1, r3
 800fc10:	4b8a      	ldr	r3, [pc, #552]	; (800fe3c <USB_EP0StartXfer+0x2b4>)
 800fc12:	4013      	ands	r3, r2
 800fc14:	610b      	str	r3, [r1, #16]
 800fc16:	e04e      	b.n	800fcb6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fc18:	693b      	ldr	r3, [r7, #16]
 800fc1a:	015a      	lsls	r2, r3, #5
 800fc1c:	697b      	ldr	r3, [r7, #20]
 800fc1e:	4413      	add	r3, r2
 800fc20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc24:	691a      	ldr	r2, [r3, #16]
 800fc26:	693b      	ldr	r3, [r7, #16]
 800fc28:	0159      	lsls	r1, r3, #5
 800fc2a:	697b      	ldr	r3, [r7, #20]
 800fc2c:	440b      	add	r3, r1
 800fc2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc32:	4619      	mov	r1, r3
 800fc34:	4b81      	ldr	r3, [pc, #516]	; (800fe3c <USB_EP0StartXfer+0x2b4>)
 800fc36:	4013      	ands	r3, r2
 800fc38:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fc3a:	693b      	ldr	r3, [r7, #16]
 800fc3c:	015a      	lsls	r2, r3, #5
 800fc3e:	697b      	ldr	r3, [r7, #20]
 800fc40:	4413      	add	r3, r2
 800fc42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc46:	691a      	ldr	r2, [r3, #16]
 800fc48:	693b      	ldr	r3, [r7, #16]
 800fc4a:	0159      	lsls	r1, r3, #5
 800fc4c:	697b      	ldr	r3, [r7, #20]
 800fc4e:	440b      	add	r3, r1
 800fc50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc54:	4619      	mov	r1, r3
 800fc56:	4b78      	ldr	r3, [pc, #480]	; (800fe38 <USB_EP0StartXfer+0x2b0>)
 800fc58:	4013      	ands	r3, r2
 800fc5a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800fc5c:	68bb      	ldr	r3, [r7, #8]
 800fc5e:	699a      	ldr	r2, [r3, #24]
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	68db      	ldr	r3, [r3, #12]
 800fc64:	429a      	cmp	r2, r3
 800fc66:	d903      	bls.n	800fc70 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800fc68:	68bb      	ldr	r3, [r7, #8]
 800fc6a:	68da      	ldr	r2, [r3, #12]
 800fc6c:	68bb      	ldr	r3, [r7, #8]
 800fc6e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fc70:	693b      	ldr	r3, [r7, #16]
 800fc72:	015a      	lsls	r2, r3, #5
 800fc74:	697b      	ldr	r3, [r7, #20]
 800fc76:	4413      	add	r3, r2
 800fc78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc7c:	691b      	ldr	r3, [r3, #16]
 800fc7e:	693a      	ldr	r2, [r7, #16]
 800fc80:	0151      	lsls	r1, r2, #5
 800fc82:	697a      	ldr	r2, [r7, #20]
 800fc84:	440a      	add	r2, r1
 800fc86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fc8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fc90:	693b      	ldr	r3, [r7, #16]
 800fc92:	015a      	lsls	r2, r3, #5
 800fc94:	697b      	ldr	r3, [r7, #20]
 800fc96:	4413      	add	r3, r2
 800fc98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc9c:	691a      	ldr	r2, [r3, #16]
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	699b      	ldr	r3, [r3, #24]
 800fca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fca6:	6939      	ldr	r1, [r7, #16]
 800fca8:	0148      	lsls	r0, r1, #5
 800fcaa:	6979      	ldr	r1, [r7, #20]
 800fcac:	4401      	add	r1, r0
 800fcae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fcb2:	4313      	orrs	r3, r2
 800fcb4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800fcb6:	79fb      	ldrb	r3, [r7, #7]
 800fcb8:	2b01      	cmp	r3, #1
 800fcba:	d11e      	bne.n	800fcfa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	695b      	ldr	r3, [r3, #20]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d009      	beq.n	800fcd8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800fcc4:	693b      	ldr	r3, [r7, #16]
 800fcc6:	015a      	lsls	r2, r3, #5
 800fcc8:	697b      	ldr	r3, [r7, #20]
 800fcca:	4413      	add	r3, r2
 800fccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcd0:	461a      	mov	r2, r3
 800fcd2:	68bb      	ldr	r3, [r7, #8]
 800fcd4:	695b      	ldr	r3, [r3, #20]
 800fcd6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fcd8:	693b      	ldr	r3, [r7, #16]
 800fcda:	015a      	lsls	r2, r3, #5
 800fcdc:	697b      	ldr	r3, [r7, #20]
 800fcde:	4413      	add	r3, r2
 800fce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	693a      	ldr	r2, [r7, #16]
 800fce8:	0151      	lsls	r1, r2, #5
 800fcea:	697a      	ldr	r2, [r7, #20]
 800fcec:	440a      	add	r2, r1
 800fcee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fcf2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fcf6:	6013      	str	r3, [r2, #0]
 800fcf8:	e097      	b.n	800fe2a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fcfa:	693b      	ldr	r3, [r7, #16]
 800fcfc:	015a      	lsls	r2, r3, #5
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	4413      	add	r3, r2
 800fd02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	693a      	ldr	r2, [r7, #16]
 800fd0a:	0151      	lsls	r1, r2, #5
 800fd0c:	697a      	ldr	r2, [r7, #20]
 800fd0e:	440a      	add	r2, r1
 800fd10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fd18:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800fd1a:	68bb      	ldr	r3, [r7, #8]
 800fd1c:	699b      	ldr	r3, [r3, #24]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	f000 8083 	beq.w	800fe2a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800fd24:	697b      	ldr	r3, [r7, #20]
 800fd26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	781b      	ldrb	r3, [r3, #0]
 800fd30:	f003 030f 	and.w	r3, r3, #15
 800fd34:	2101      	movs	r1, #1
 800fd36:	fa01 f303 	lsl.w	r3, r1, r3
 800fd3a:	6979      	ldr	r1, [r7, #20]
 800fd3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fd40:	4313      	orrs	r3, r2
 800fd42:	634b      	str	r3, [r1, #52]	; 0x34
 800fd44:	e071      	b.n	800fe2a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fd46:	693b      	ldr	r3, [r7, #16]
 800fd48:	015a      	lsls	r2, r3, #5
 800fd4a:	697b      	ldr	r3, [r7, #20]
 800fd4c:	4413      	add	r3, r2
 800fd4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd52:	691a      	ldr	r2, [r3, #16]
 800fd54:	693b      	ldr	r3, [r7, #16]
 800fd56:	0159      	lsls	r1, r3, #5
 800fd58:	697b      	ldr	r3, [r7, #20]
 800fd5a:	440b      	add	r3, r1
 800fd5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd60:	4619      	mov	r1, r3
 800fd62:	4b36      	ldr	r3, [pc, #216]	; (800fe3c <USB_EP0StartXfer+0x2b4>)
 800fd64:	4013      	ands	r3, r2
 800fd66:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800fd68:	693b      	ldr	r3, [r7, #16]
 800fd6a:	015a      	lsls	r2, r3, #5
 800fd6c:	697b      	ldr	r3, [r7, #20]
 800fd6e:	4413      	add	r3, r2
 800fd70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd74:	691a      	ldr	r2, [r3, #16]
 800fd76:	693b      	ldr	r3, [r7, #16]
 800fd78:	0159      	lsls	r1, r3, #5
 800fd7a:	697b      	ldr	r3, [r7, #20]
 800fd7c:	440b      	add	r3, r1
 800fd7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd82:	4619      	mov	r1, r3
 800fd84:	4b2c      	ldr	r3, [pc, #176]	; (800fe38 <USB_EP0StartXfer+0x2b0>)
 800fd86:	4013      	ands	r3, r2
 800fd88:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800fd8a:	68bb      	ldr	r3, [r7, #8]
 800fd8c:	699b      	ldr	r3, [r3, #24]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d003      	beq.n	800fd9a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800fd92:	68bb      	ldr	r3, [r7, #8]
 800fd94:	68da      	ldr	r2, [r3, #12]
 800fd96:	68bb      	ldr	r3, [r7, #8]
 800fd98:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800fd9a:	68bb      	ldr	r3, [r7, #8]
 800fd9c:	68da      	ldr	r2, [r3, #12]
 800fd9e:	68bb      	ldr	r3, [r7, #8]
 800fda0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fda2:	693b      	ldr	r3, [r7, #16]
 800fda4:	015a      	lsls	r2, r3, #5
 800fda6:	697b      	ldr	r3, [r7, #20]
 800fda8:	4413      	add	r3, r2
 800fdaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdae:	691b      	ldr	r3, [r3, #16]
 800fdb0:	693a      	ldr	r2, [r7, #16]
 800fdb2:	0151      	lsls	r1, r2, #5
 800fdb4:	697a      	ldr	r2, [r7, #20]
 800fdb6:	440a      	add	r2, r1
 800fdb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fdbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fdc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800fdc2:	693b      	ldr	r3, [r7, #16]
 800fdc4:	015a      	lsls	r2, r3, #5
 800fdc6:	697b      	ldr	r3, [r7, #20]
 800fdc8:	4413      	add	r3, r2
 800fdca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdce:	691a      	ldr	r2, [r3, #16]
 800fdd0:	68bb      	ldr	r3, [r7, #8]
 800fdd2:	69db      	ldr	r3, [r3, #28]
 800fdd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fdd8:	6939      	ldr	r1, [r7, #16]
 800fdda:	0148      	lsls	r0, r1, #5
 800fddc:	6979      	ldr	r1, [r7, #20]
 800fdde:	4401      	add	r1, r0
 800fde0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fde4:	4313      	orrs	r3, r2
 800fde6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800fde8:	79fb      	ldrb	r3, [r7, #7]
 800fdea:	2b01      	cmp	r3, #1
 800fdec:	d10d      	bne.n	800fe0a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800fdee:	68bb      	ldr	r3, [r7, #8]
 800fdf0:	691b      	ldr	r3, [r3, #16]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d009      	beq.n	800fe0a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800fdf6:	68bb      	ldr	r3, [r7, #8]
 800fdf8:	6919      	ldr	r1, [r3, #16]
 800fdfa:	693b      	ldr	r3, [r7, #16]
 800fdfc:	015a      	lsls	r2, r3, #5
 800fdfe:	697b      	ldr	r3, [r7, #20]
 800fe00:	4413      	add	r3, r2
 800fe02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe06:	460a      	mov	r2, r1
 800fe08:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800fe0a:	693b      	ldr	r3, [r7, #16]
 800fe0c:	015a      	lsls	r2, r3, #5
 800fe0e:	697b      	ldr	r3, [r7, #20]
 800fe10:	4413      	add	r3, r2
 800fe12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	693a      	ldr	r2, [r7, #16]
 800fe1a:	0151      	lsls	r1, r2, #5
 800fe1c:	697a      	ldr	r2, [r7, #20]
 800fe1e:	440a      	add	r2, r1
 800fe20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fe28:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fe2a:	2300      	movs	r3, #0
}
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	371c      	adds	r7, #28
 800fe30:	46bd      	mov	sp, r7
 800fe32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe36:	4770      	bx	lr
 800fe38:	e007ffff 	.word	0xe007ffff
 800fe3c:	fff80000 	.word	0xfff80000

0800fe40 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fe40:	b480      	push	{r7}
 800fe42:	b087      	sub	sp, #28
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
 800fe48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800fe4e:	2300      	movs	r3, #0
 800fe50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	785b      	ldrb	r3, [r3, #1]
 800fe5a:	2b01      	cmp	r3, #1
 800fe5c:	d14a      	bne.n	800fef4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	781b      	ldrb	r3, [r3, #0]
 800fe62:	015a      	lsls	r2, r3, #5
 800fe64:	693b      	ldr	r3, [r7, #16]
 800fe66:	4413      	add	r3, r2
 800fe68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fe72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fe76:	f040 8086 	bne.w	800ff86 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800fe7a:	683b      	ldr	r3, [r7, #0]
 800fe7c:	781b      	ldrb	r3, [r3, #0]
 800fe7e:	015a      	lsls	r2, r3, #5
 800fe80:	693b      	ldr	r3, [r7, #16]
 800fe82:	4413      	add	r3, r2
 800fe84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	683a      	ldr	r2, [r7, #0]
 800fe8c:	7812      	ldrb	r2, [r2, #0]
 800fe8e:	0151      	lsls	r1, r2, #5
 800fe90:	693a      	ldr	r2, [r7, #16]
 800fe92:	440a      	add	r2, r1
 800fe94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fe9c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	781b      	ldrb	r3, [r3, #0]
 800fea2:	015a      	lsls	r2, r3, #5
 800fea4:	693b      	ldr	r3, [r7, #16]
 800fea6:	4413      	add	r3, r2
 800fea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	683a      	ldr	r2, [r7, #0]
 800feb0:	7812      	ldrb	r2, [r2, #0]
 800feb2:	0151      	lsls	r1, r2, #5
 800feb4:	693a      	ldr	r2, [r7, #16]
 800feb6:	440a      	add	r2, r1
 800feb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800febc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fec0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	3301      	adds	r3, #1
 800fec6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	f242 7210 	movw	r2, #10000	; 0x2710
 800fece:	4293      	cmp	r3, r2
 800fed0:	d902      	bls.n	800fed8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800fed2:	2301      	movs	r3, #1
 800fed4:	75fb      	strb	r3, [r7, #23]
          break;
 800fed6:	e056      	b.n	800ff86 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	781b      	ldrb	r3, [r3, #0]
 800fedc:	015a      	lsls	r2, r3, #5
 800fede:	693b      	ldr	r3, [r7, #16]
 800fee0:	4413      	add	r3, r2
 800fee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800feec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fef0:	d0e7      	beq.n	800fec2 <USB_EPStopXfer+0x82>
 800fef2:	e048      	b.n	800ff86 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fef4:	683b      	ldr	r3, [r7, #0]
 800fef6:	781b      	ldrb	r3, [r3, #0]
 800fef8:	015a      	lsls	r2, r3, #5
 800fefa:	693b      	ldr	r3, [r7, #16]
 800fefc:	4413      	add	r3, r2
 800fefe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ff08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ff0c:	d13b      	bne.n	800ff86 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	781b      	ldrb	r3, [r3, #0]
 800ff12:	015a      	lsls	r2, r3, #5
 800ff14:	693b      	ldr	r3, [r7, #16]
 800ff16:	4413      	add	r3, r2
 800ff18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	683a      	ldr	r2, [r7, #0]
 800ff20:	7812      	ldrb	r2, [r2, #0]
 800ff22:	0151      	lsls	r1, r2, #5
 800ff24:	693a      	ldr	r2, [r7, #16]
 800ff26:	440a      	add	r2, r1
 800ff28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff2c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ff30:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	781b      	ldrb	r3, [r3, #0]
 800ff36:	015a      	lsls	r2, r3, #5
 800ff38:	693b      	ldr	r3, [r7, #16]
 800ff3a:	4413      	add	r3, r2
 800ff3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	683a      	ldr	r2, [r7, #0]
 800ff44:	7812      	ldrb	r2, [r2, #0]
 800ff46:	0151      	lsls	r1, r2, #5
 800ff48:	693a      	ldr	r2, [r7, #16]
 800ff4a:	440a      	add	r2, r1
 800ff4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ff54:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	3301      	adds	r3, #1
 800ff5a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	f242 7210 	movw	r2, #10000	; 0x2710
 800ff62:	4293      	cmp	r3, r2
 800ff64:	d902      	bls.n	800ff6c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ff66:	2301      	movs	r3, #1
 800ff68:	75fb      	strb	r3, [r7, #23]
          break;
 800ff6a:	e00c      	b.n	800ff86 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	781b      	ldrb	r3, [r3, #0]
 800ff70:	015a      	lsls	r2, r3, #5
 800ff72:	693b      	ldr	r3, [r7, #16]
 800ff74:	4413      	add	r3, r2
 800ff76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ff80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ff84:	d0e7      	beq.n	800ff56 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ff86:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff88:	4618      	mov	r0, r3
 800ff8a:	371c      	adds	r7, #28
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff92:	4770      	bx	lr

0800ff94 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ff94:	b480      	push	{r7}
 800ff96:	b089      	sub	sp, #36	; 0x24
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	60f8      	str	r0, [r7, #12]
 800ff9c:	60b9      	str	r1, [r7, #8]
 800ff9e:	4611      	mov	r1, r2
 800ffa0:	461a      	mov	r2, r3
 800ffa2:	460b      	mov	r3, r1
 800ffa4:	71fb      	strb	r3, [r7, #7]
 800ffa6:	4613      	mov	r3, r2
 800ffa8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ffae:	68bb      	ldr	r3, [r7, #8]
 800ffb0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ffb2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d123      	bne.n	8010002 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ffba:	88bb      	ldrh	r3, [r7, #4]
 800ffbc:	3303      	adds	r3, #3
 800ffbe:	089b      	lsrs	r3, r3, #2
 800ffc0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	61bb      	str	r3, [r7, #24]
 800ffc6:	e018      	b.n	800fffa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ffc8:	79fb      	ldrb	r3, [r7, #7]
 800ffca:	031a      	lsls	r2, r3, #12
 800ffcc:	697b      	ldr	r3, [r7, #20]
 800ffce:	4413      	add	r3, r2
 800ffd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ffd4:	461a      	mov	r2, r3
 800ffd6:	69fb      	ldr	r3, [r7, #28]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ffdc:	69fb      	ldr	r3, [r7, #28]
 800ffde:	3301      	adds	r3, #1
 800ffe0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ffe2:	69fb      	ldr	r3, [r7, #28]
 800ffe4:	3301      	adds	r3, #1
 800ffe6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ffe8:	69fb      	ldr	r3, [r7, #28]
 800ffea:	3301      	adds	r3, #1
 800ffec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ffee:	69fb      	ldr	r3, [r7, #28]
 800fff0:	3301      	adds	r3, #1
 800fff2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800fff4:	69bb      	ldr	r3, [r7, #24]
 800fff6:	3301      	adds	r3, #1
 800fff8:	61bb      	str	r3, [r7, #24]
 800fffa:	69ba      	ldr	r2, [r7, #24]
 800fffc:	693b      	ldr	r3, [r7, #16]
 800fffe:	429a      	cmp	r2, r3
 8010000:	d3e2      	bcc.n	800ffc8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010002:	2300      	movs	r3, #0
}
 8010004:	4618      	mov	r0, r3
 8010006:	3724      	adds	r7, #36	; 0x24
 8010008:	46bd      	mov	sp, r7
 801000a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000e:	4770      	bx	lr

08010010 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010010:	b480      	push	{r7}
 8010012:	b08b      	sub	sp, #44	; 0x2c
 8010014:	af00      	add	r7, sp, #0
 8010016:	60f8      	str	r0, [r7, #12]
 8010018:	60b9      	str	r1, [r7, #8]
 801001a:	4613      	mov	r3, r2
 801001c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8010026:	88fb      	ldrh	r3, [r7, #6]
 8010028:	089b      	lsrs	r3, r3, #2
 801002a:	b29b      	uxth	r3, r3
 801002c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801002e:	88fb      	ldrh	r3, [r7, #6]
 8010030:	f003 0303 	and.w	r3, r3, #3
 8010034:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8010036:	2300      	movs	r3, #0
 8010038:	623b      	str	r3, [r7, #32]
 801003a:	e014      	b.n	8010066 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801003c:	69bb      	ldr	r3, [r7, #24]
 801003e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010042:	681a      	ldr	r2, [r3, #0]
 8010044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010046:	601a      	str	r2, [r3, #0]
    pDest++;
 8010048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801004a:	3301      	adds	r3, #1
 801004c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801004e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010050:	3301      	adds	r3, #1
 8010052:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010056:	3301      	adds	r3, #1
 8010058:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801005a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801005c:	3301      	adds	r3, #1
 801005e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8010060:	6a3b      	ldr	r3, [r7, #32]
 8010062:	3301      	adds	r3, #1
 8010064:	623b      	str	r3, [r7, #32]
 8010066:	6a3a      	ldr	r2, [r7, #32]
 8010068:	697b      	ldr	r3, [r7, #20]
 801006a:	429a      	cmp	r2, r3
 801006c:	d3e6      	bcc.n	801003c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801006e:	8bfb      	ldrh	r3, [r7, #30]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d01e      	beq.n	80100b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8010074:	2300      	movs	r3, #0
 8010076:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8010078:	69bb      	ldr	r3, [r7, #24]
 801007a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801007e:	461a      	mov	r2, r3
 8010080:	f107 0310 	add.w	r3, r7, #16
 8010084:	6812      	ldr	r2, [r2, #0]
 8010086:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8010088:	693a      	ldr	r2, [r7, #16]
 801008a:	6a3b      	ldr	r3, [r7, #32]
 801008c:	b2db      	uxtb	r3, r3
 801008e:	00db      	lsls	r3, r3, #3
 8010090:	fa22 f303 	lsr.w	r3, r2, r3
 8010094:	b2da      	uxtb	r2, r3
 8010096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010098:	701a      	strb	r2, [r3, #0]
      i++;
 801009a:	6a3b      	ldr	r3, [r7, #32]
 801009c:	3301      	adds	r3, #1
 801009e:	623b      	str	r3, [r7, #32]
      pDest++;
 80100a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100a2:	3301      	adds	r3, #1
 80100a4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80100a6:	8bfb      	ldrh	r3, [r7, #30]
 80100a8:	3b01      	subs	r3, #1
 80100aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80100ac:	8bfb      	ldrh	r3, [r7, #30]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d1ea      	bne.n	8010088 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80100b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80100b4:	4618      	mov	r0, r3
 80100b6:	372c      	adds	r7, #44	; 0x2c
 80100b8:	46bd      	mov	sp, r7
 80100ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100be:	4770      	bx	lr

080100c0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80100c0:	b480      	push	{r7}
 80100c2:	b085      	sub	sp, #20
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
 80100c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	781b      	ldrb	r3, [r3, #0]
 80100d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	785b      	ldrb	r3, [r3, #1]
 80100d8:	2b01      	cmp	r3, #1
 80100da:	d12c      	bne.n	8010136 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80100dc:	68bb      	ldr	r3, [r7, #8]
 80100de:	015a      	lsls	r2, r3, #5
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	4413      	add	r3, r2
 80100e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	db12      	blt.n	8010114 <USB_EPSetStall+0x54>
 80100ee:	68bb      	ldr	r3, [r7, #8]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d00f      	beq.n	8010114 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80100f4:	68bb      	ldr	r3, [r7, #8]
 80100f6:	015a      	lsls	r2, r3, #5
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	4413      	add	r3, r2
 80100fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	68ba      	ldr	r2, [r7, #8]
 8010104:	0151      	lsls	r1, r2, #5
 8010106:	68fa      	ldr	r2, [r7, #12]
 8010108:	440a      	add	r2, r1
 801010a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801010e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010112:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010114:	68bb      	ldr	r3, [r7, #8]
 8010116:	015a      	lsls	r2, r3, #5
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	4413      	add	r3, r2
 801011c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	68ba      	ldr	r2, [r7, #8]
 8010124:	0151      	lsls	r1, r2, #5
 8010126:	68fa      	ldr	r2, [r7, #12]
 8010128:	440a      	add	r2, r1
 801012a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801012e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010132:	6013      	str	r3, [r2, #0]
 8010134:	e02b      	b.n	801018e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010136:	68bb      	ldr	r3, [r7, #8]
 8010138:	015a      	lsls	r2, r3, #5
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	4413      	add	r3, r2
 801013e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	2b00      	cmp	r3, #0
 8010146:	db12      	blt.n	801016e <USB_EPSetStall+0xae>
 8010148:	68bb      	ldr	r3, [r7, #8]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d00f      	beq.n	801016e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801014e:	68bb      	ldr	r3, [r7, #8]
 8010150:	015a      	lsls	r2, r3, #5
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	4413      	add	r3, r2
 8010156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	68ba      	ldr	r2, [r7, #8]
 801015e:	0151      	lsls	r1, r2, #5
 8010160:	68fa      	ldr	r2, [r7, #12]
 8010162:	440a      	add	r2, r1
 8010164:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010168:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801016c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801016e:	68bb      	ldr	r3, [r7, #8]
 8010170:	015a      	lsls	r2, r3, #5
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	4413      	add	r3, r2
 8010176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	68ba      	ldr	r2, [r7, #8]
 801017e:	0151      	lsls	r1, r2, #5
 8010180:	68fa      	ldr	r2, [r7, #12]
 8010182:	440a      	add	r2, r1
 8010184:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010188:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801018c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801018e:	2300      	movs	r3, #0
}
 8010190:	4618      	mov	r0, r3
 8010192:	3714      	adds	r7, #20
 8010194:	46bd      	mov	sp, r7
 8010196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019a:	4770      	bx	lr

0801019c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801019c:	b480      	push	{r7}
 801019e:	b085      	sub	sp, #20
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
 80101a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80101aa:	683b      	ldr	r3, [r7, #0]
 80101ac:	781b      	ldrb	r3, [r3, #0]
 80101ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80101b0:	683b      	ldr	r3, [r7, #0]
 80101b2:	785b      	ldrb	r3, [r3, #1]
 80101b4:	2b01      	cmp	r3, #1
 80101b6:	d128      	bne.n	801020a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80101b8:	68bb      	ldr	r3, [r7, #8]
 80101ba:	015a      	lsls	r2, r3, #5
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	4413      	add	r3, r2
 80101c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	68ba      	ldr	r2, [r7, #8]
 80101c8:	0151      	lsls	r1, r2, #5
 80101ca:	68fa      	ldr	r2, [r7, #12]
 80101cc:	440a      	add	r2, r1
 80101ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80101d6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	791b      	ldrb	r3, [r3, #4]
 80101dc:	2b03      	cmp	r3, #3
 80101de:	d003      	beq.n	80101e8 <USB_EPClearStall+0x4c>
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	791b      	ldrb	r3, [r3, #4]
 80101e4:	2b02      	cmp	r3, #2
 80101e6:	d138      	bne.n	801025a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80101e8:	68bb      	ldr	r3, [r7, #8]
 80101ea:	015a      	lsls	r2, r3, #5
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	4413      	add	r3, r2
 80101f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	68ba      	ldr	r2, [r7, #8]
 80101f8:	0151      	lsls	r1, r2, #5
 80101fa:	68fa      	ldr	r2, [r7, #12]
 80101fc:	440a      	add	r2, r1
 80101fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010206:	6013      	str	r3, [r2, #0]
 8010208:	e027      	b.n	801025a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801020a:	68bb      	ldr	r3, [r7, #8]
 801020c:	015a      	lsls	r2, r3, #5
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	4413      	add	r3, r2
 8010212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	68ba      	ldr	r2, [r7, #8]
 801021a:	0151      	lsls	r1, r2, #5
 801021c:	68fa      	ldr	r2, [r7, #12]
 801021e:	440a      	add	r2, r1
 8010220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010224:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010228:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801022a:	683b      	ldr	r3, [r7, #0]
 801022c:	791b      	ldrb	r3, [r3, #4]
 801022e:	2b03      	cmp	r3, #3
 8010230:	d003      	beq.n	801023a <USB_EPClearStall+0x9e>
 8010232:	683b      	ldr	r3, [r7, #0]
 8010234:	791b      	ldrb	r3, [r3, #4]
 8010236:	2b02      	cmp	r3, #2
 8010238:	d10f      	bne.n	801025a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801023a:	68bb      	ldr	r3, [r7, #8]
 801023c:	015a      	lsls	r2, r3, #5
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	4413      	add	r3, r2
 8010242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	68ba      	ldr	r2, [r7, #8]
 801024a:	0151      	lsls	r1, r2, #5
 801024c:	68fa      	ldr	r2, [r7, #12]
 801024e:	440a      	add	r2, r1
 8010250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010258:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801025a:	2300      	movs	r3, #0
}
 801025c:	4618      	mov	r0, r3
 801025e:	3714      	adds	r7, #20
 8010260:	46bd      	mov	sp, r7
 8010262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010266:	4770      	bx	lr

08010268 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010268:	b480      	push	{r7}
 801026a:	b085      	sub	sp, #20
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
 8010270:	460b      	mov	r3, r1
 8010272:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	68fa      	ldr	r2, [r7, #12]
 8010282:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010286:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801028a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010292:	681a      	ldr	r2, [r3, #0]
 8010294:	78fb      	ldrb	r3, [r7, #3]
 8010296:	011b      	lsls	r3, r3, #4
 8010298:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801029c:	68f9      	ldr	r1, [r7, #12]
 801029e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80102a2:	4313      	orrs	r3, r2
 80102a4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80102a6:	2300      	movs	r3, #0
}
 80102a8:	4618      	mov	r0, r3
 80102aa:	3714      	adds	r7, #20
 80102ac:	46bd      	mov	sp, r7
 80102ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b2:	4770      	bx	lr

080102b4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80102b4:	b480      	push	{r7}
 80102b6:	b085      	sub	sp, #20
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	68fa      	ldr	r2, [r7, #12]
 80102ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80102ce:	f023 0303 	bic.w	r3, r3, #3
 80102d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102da:	685b      	ldr	r3, [r3, #4]
 80102dc:	68fa      	ldr	r2, [r7, #12]
 80102de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80102e2:	f023 0302 	bic.w	r3, r3, #2
 80102e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80102e8:	2300      	movs	r3, #0
}
 80102ea:	4618      	mov	r0, r3
 80102ec:	3714      	adds	r7, #20
 80102ee:	46bd      	mov	sp, r7
 80102f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f4:	4770      	bx	lr

080102f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80102f6:	b480      	push	{r7}
 80102f8:	b085      	sub	sp, #20
 80102fa:	af00      	add	r7, sp, #0
 80102fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	68fa      	ldr	r2, [r7, #12]
 801030c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010310:	f023 0303 	bic.w	r3, r3, #3
 8010314:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801031c:	685b      	ldr	r3, [r3, #4]
 801031e:	68fa      	ldr	r2, [r7, #12]
 8010320:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010324:	f043 0302 	orr.w	r3, r3, #2
 8010328:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801032a:	2300      	movs	r3, #0
}
 801032c:	4618      	mov	r0, r3
 801032e:	3714      	adds	r7, #20
 8010330:	46bd      	mov	sp, r7
 8010332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010336:	4770      	bx	lr

08010338 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8010338:	b480      	push	{r7}
 801033a:	b085      	sub	sp, #20
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	695b      	ldr	r3, [r3, #20]
 8010344:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	699b      	ldr	r3, [r3, #24]
 801034a:	68fa      	ldr	r2, [r7, #12]
 801034c:	4013      	ands	r3, r2
 801034e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010350:	68fb      	ldr	r3, [r7, #12]
}
 8010352:	4618      	mov	r0, r3
 8010354:	3714      	adds	r7, #20
 8010356:	46bd      	mov	sp, r7
 8010358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035c:	4770      	bx	lr

0801035e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801035e:	b480      	push	{r7}
 8010360:	b085      	sub	sp, #20
 8010362:	af00      	add	r7, sp, #0
 8010364:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010370:	699b      	ldr	r3, [r3, #24]
 8010372:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801037a:	69db      	ldr	r3, [r3, #28]
 801037c:	68ba      	ldr	r2, [r7, #8]
 801037e:	4013      	ands	r3, r2
 8010380:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010382:	68bb      	ldr	r3, [r7, #8]
 8010384:	0c1b      	lsrs	r3, r3, #16
}
 8010386:	4618      	mov	r0, r3
 8010388:	3714      	adds	r7, #20
 801038a:	46bd      	mov	sp, r7
 801038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010390:	4770      	bx	lr

08010392 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010392:	b480      	push	{r7}
 8010394:	b085      	sub	sp, #20
 8010396:	af00      	add	r7, sp, #0
 8010398:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103a4:	699b      	ldr	r3, [r3, #24]
 80103a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103ae:	69db      	ldr	r3, [r3, #28]
 80103b0:	68ba      	ldr	r2, [r7, #8]
 80103b2:	4013      	ands	r3, r2
 80103b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80103b6:	68bb      	ldr	r3, [r7, #8]
 80103b8:	b29b      	uxth	r3, r3
}
 80103ba:	4618      	mov	r0, r3
 80103bc:	3714      	adds	r7, #20
 80103be:	46bd      	mov	sp, r7
 80103c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c4:	4770      	bx	lr

080103c6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80103c6:	b480      	push	{r7}
 80103c8:	b085      	sub	sp, #20
 80103ca:	af00      	add	r7, sp, #0
 80103cc:	6078      	str	r0, [r7, #4]
 80103ce:	460b      	mov	r3, r1
 80103d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80103d6:	78fb      	ldrb	r3, [r7, #3]
 80103d8:	015a      	lsls	r2, r3, #5
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	4413      	add	r3, r2
 80103de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103e2:	689b      	ldr	r3, [r3, #8]
 80103e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103ec:	695b      	ldr	r3, [r3, #20]
 80103ee:	68ba      	ldr	r2, [r7, #8]
 80103f0:	4013      	ands	r3, r2
 80103f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80103f4:	68bb      	ldr	r3, [r7, #8]
}
 80103f6:	4618      	mov	r0, r3
 80103f8:	3714      	adds	r7, #20
 80103fa:	46bd      	mov	sp, r7
 80103fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010400:	4770      	bx	lr

08010402 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010402:	b480      	push	{r7}
 8010404:	b087      	sub	sp, #28
 8010406:	af00      	add	r7, sp, #0
 8010408:	6078      	str	r0, [r7, #4]
 801040a:	460b      	mov	r3, r1
 801040c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010412:	697b      	ldr	r3, [r7, #20]
 8010414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010418:	691b      	ldr	r3, [r3, #16]
 801041a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801041c:	697b      	ldr	r3, [r7, #20]
 801041e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010424:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010426:	78fb      	ldrb	r3, [r7, #3]
 8010428:	f003 030f 	and.w	r3, r3, #15
 801042c:	68fa      	ldr	r2, [r7, #12]
 801042e:	fa22 f303 	lsr.w	r3, r2, r3
 8010432:	01db      	lsls	r3, r3, #7
 8010434:	b2db      	uxtb	r3, r3
 8010436:	693a      	ldr	r2, [r7, #16]
 8010438:	4313      	orrs	r3, r2
 801043a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801043c:	78fb      	ldrb	r3, [r7, #3]
 801043e:	015a      	lsls	r2, r3, #5
 8010440:	697b      	ldr	r3, [r7, #20]
 8010442:	4413      	add	r3, r2
 8010444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010448:	689b      	ldr	r3, [r3, #8]
 801044a:	693a      	ldr	r2, [r7, #16]
 801044c:	4013      	ands	r3, r2
 801044e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010450:	68bb      	ldr	r3, [r7, #8]
}
 8010452:	4618      	mov	r0, r3
 8010454:	371c      	adds	r7, #28
 8010456:	46bd      	mov	sp, r7
 8010458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045c:	4770      	bx	lr

0801045e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801045e:	b480      	push	{r7}
 8010460:	b083      	sub	sp, #12
 8010462:	af00      	add	r7, sp, #0
 8010464:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	695b      	ldr	r3, [r3, #20]
 801046a:	f003 0301 	and.w	r3, r3, #1
}
 801046e:	4618      	mov	r0, r3
 8010470:	370c      	adds	r7, #12
 8010472:	46bd      	mov	sp, r7
 8010474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010478:	4770      	bx	lr
	...

0801047c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801047c:	b480      	push	{r7}
 801047e:	b085      	sub	sp, #20
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801048e:	681a      	ldr	r2, [r3, #0]
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010496:	4619      	mov	r1, r3
 8010498:	4b09      	ldr	r3, [pc, #36]	; (80104c0 <USB_ActivateSetup+0x44>)
 801049a:	4013      	ands	r3, r2
 801049c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104a4:	685b      	ldr	r3, [r3, #4]
 80104a6:	68fa      	ldr	r2, [r7, #12]
 80104a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80104ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80104b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80104b2:	2300      	movs	r3, #0
}
 80104b4:	4618      	mov	r0, r3
 80104b6:	3714      	adds	r7, #20
 80104b8:	46bd      	mov	sp, r7
 80104ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104be:	4770      	bx	lr
 80104c0:	fffff800 	.word	0xfffff800

080104c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80104c4:	b480      	push	{r7}
 80104c6:	b087      	sub	sp, #28
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	60f8      	str	r0, [r7, #12]
 80104cc:	460b      	mov	r3, r1
 80104ce:	607a      	str	r2, [r7, #4]
 80104d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	333c      	adds	r3, #60	; 0x3c
 80104da:	3304      	adds	r3, #4
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80104e0:	693b      	ldr	r3, [r7, #16]
 80104e2:	4a26      	ldr	r2, [pc, #152]	; (801057c <USB_EP0_OutStart+0xb8>)
 80104e4:	4293      	cmp	r3, r2
 80104e6:	d90a      	bls.n	80104fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80104e8:	697b      	ldr	r3, [r7, #20]
 80104ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80104f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80104f8:	d101      	bne.n	80104fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80104fa:	2300      	movs	r3, #0
 80104fc:	e037      	b.n	801056e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80104fe:	697b      	ldr	r3, [r7, #20]
 8010500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010504:	461a      	mov	r2, r3
 8010506:	2300      	movs	r3, #0
 8010508:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801050a:	697b      	ldr	r3, [r7, #20]
 801050c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010510:	691b      	ldr	r3, [r3, #16]
 8010512:	697a      	ldr	r2, [r7, #20]
 8010514:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010518:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801051c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801051e:	697b      	ldr	r3, [r7, #20]
 8010520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010524:	691b      	ldr	r3, [r3, #16]
 8010526:	697a      	ldr	r2, [r7, #20]
 8010528:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801052c:	f043 0318 	orr.w	r3, r3, #24
 8010530:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010532:	697b      	ldr	r3, [r7, #20]
 8010534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010538:	691b      	ldr	r3, [r3, #16]
 801053a:	697a      	ldr	r2, [r7, #20]
 801053c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010540:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010544:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010546:	7afb      	ldrb	r3, [r7, #11]
 8010548:	2b01      	cmp	r3, #1
 801054a:	d10f      	bne.n	801056c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801054c:	697b      	ldr	r3, [r7, #20]
 801054e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010552:	461a      	mov	r2, r3
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010558:	697b      	ldr	r3, [r7, #20]
 801055a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	697a      	ldr	r2, [r7, #20]
 8010562:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010566:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801056a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801056c:	2300      	movs	r3, #0
}
 801056e:	4618      	mov	r0, r3
 8010570:	371c      	adds	r7, #28
 8010572:	46bd      	mov	sp, r7
 8010574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010578:	4770      	bx	lr
 801057a:	bf00      	nop
 801057c:	4f54300a 	.word	0x4f54300a

08010580 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010580:	b480      	push	{r7}
 8010582:	b085      	sub	sp, #20
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010588:	2300      	movs	r3, #0
 801058a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	3301      	adds	r3, #1
 8010590:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	4a13      	ldr	r2, [pc, #76]	; (80105e4 <USB_CoreReset+0x64>)
 8010596:	4293      	cmp	r3, r2
 8010598:	d901      	bls.n	801059e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801059a:	2303      	movs	r3, #3
 801059c:	e01b      	b.n	80105d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	691b      	ldr	r3, [r3, #16]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	daf2      	bge.n	801058c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80105a6:	2300      	movs	r3, #0
 80105a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	691b      	ldr	r3, [r3, #16]
 80105ae:	f043 0201 	orr.w	r2, r3, #1
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	3301      	adds	r3, #1
 80105ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	4a09      	ldr	r2, [pc, #36]	; (80105e4 <USB_CoreReset+0x64>)
 80105c0:	4293      	cmp	r3, r2
 80105c2:	d901      	bls.n	80105c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80105c4:	2303      	movs	r3, #3
 80105c6:	e006      	b.n	80105d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	691b      	ldr	r3, [r3, #16]
 80105cc:	f003 0301 	and.w	r3, r3, #1
 80105d0:	2b01      	cmp	r3, #1
 80105d2:	d0f0      	beq.n	80105b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80105d4:	2300      	movs	r3, #0
}
 80105d6:	4618      	mov	r0, r3
 80105d8:	3714      	adds	r7, #20
 80105da:	46bd      	mov	sp, r7
 80105dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e0:	4770      	bx	lr
 80105e2:	bf00      	nop
 80105e4:	00030d40 	.word	0x00030d40

080105e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b084      	sub	sp, #16
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
 80105f0:	460b      	mov	r3, r1
 80105f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80105f4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80105f8:	f002 fd34 	bl	8013064 <USBD_static_malloc>
 80105fc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d109      	bne.n	8010618 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	32b0      	adds	r2, #176	; 0xb0
 801060e:	2100      	movs	r1, #0
 8010610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8010614:	2302      	movs	r3, #2
 8010616:	e0d4      	b.n	80107c2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8010618:	f44f 7207 	mov.w	r2, #540	; 0x21c
 801061c:	2100      	movs	r1, #0
 801061e:	68f8      	ldr	r0, [r7, #12]
 8010620:	f002 fd96 	bl	8013150 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	32b0      	adds	r2, #176	; 0xb0
 801062e:	68f9      	ldr	r1, [r7, #12]
 8010630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	32b0      	adds	r2, #176	; 0xb0
 801063e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	7c1b      	ldrb	r3, [r3, #16]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d138      	bne.n	80106c2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010650:	4b5e      	ldr	r3, [pc, #376]	; (80107cc <USBD_CDC_Init+0x1e4>)
 8010652:	7819      	ldrb	r1, [r3, #0]
 8010654:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010658:	2202      	movs	r2, #2
 801065a:	6878      	ldr	r0, [r7, #4]
 801065c:	f002 fbdf 	bl	8012e1e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010660:	4b5a      	ldr	r3, [pc, #360]	; (80107cc <USBD_CDC_Init+0x1e4>)
 8010662:	781b      	ldrb	r3, [r3, #0]
 8010664:	f003 020f 	and.w	r2, r3, #15
 8010668:	6879      	ldr	r1, [r7, #4]
 801066a:	4613      	mov	r3, r2
 801066c:	009b      	lsls	r3, r3, #2
 801066e:	4413      	add	r3, r2
 8010670:	009b      	lsls	r3, r3, #2
 8010672:	440b      	add	r3, r1
 8010674:	3324      	adds	r3, #36	; 0x24
 8010676:	2201      	movs	r2, #1
 8010678:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801067a:	4b55      	ldr	r3, [pc, #340]	; (80107d0 <USBD_CDC_Init+0x1e8>)
 801067c:	7819      	ldrb	r1, [r3, #0]
 801067e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010682:	2202      	movs	r2, #2
 8010684:	6878      	ldr	r0, [r7, #4]
 8010686:	f002 fbca 	bl	8012e1e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801068a:	4b51      	ldr	r3, [pc, #324]	; (80107d0 <USBD_CDC_Init+0x1e8>)
 801068c:	781b      	ldrb	r3, [r3, #0]
 801068e:	f003 020f 	and.w	r2, r3, #15
 8010692:	6879      	ldr	r1, [r7, #4]
 8010694:	4613      	mov	r3, r2
 8010696:	009b      	lsls	r3, r3, #2
 8010698:	4413      	add	r3, r2
 801069a:	009b      	lsls	r3, r3, #2
 801069c:	440b      	add	r3, r1
 801069e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80106a2:	2201      	movs	r2, #1
 80106a4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80106a6:	4b4b      	ldr	r3, [pc, #300]	; (80107d4 <USBD_CDC_Init+0x1ec>)
 80106a8:	781b      	ldrb	r3, [r3, #0]
 80106aa:	f003 020f 	and.w	r2, r3, #15
 80106ae:	6879      	ldr	r1, [r7, #4]
 80106b0:	4613      	mov	r3, r2
 80106b2:	009b      	lsls	r3, r3, #2
 80106b4:	4413      	add	r3, r2
 80106b6:	009b      	lsls	r3, r3, #2
 80106b8:	440b      	add	r3, r1
 80106ba:	3326      	adds	r3, #38	; 0x26
 80106bc:	2210      	movs	r2, #16
 80106be:	801a      	strh	r2, [r3, #0]
 80106c0:	e035      	b.n	801072e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80106c2:	4b42      	ldr	r3, [pc, #264]	; (80107cc <USBD_CDC_Init+0x1e4>)
 80106c4:	7819      	ldrb	r1, [r3, #0]
 80106c6:	2340      	movs	r3, #64	; 0x40
 80106c8:	2202      	movs	r2, #2
 80106ca:	6878      	ldr	r0, [r7, #4]
 80106cc:	f002 fba7 	bl	8012e1e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80106d0:	4b3e      	ldr	r3, [pc, #248]	; (80107cc <USBD_CDC_Init+0x1e4>)
 80106d2:	781b      	ldrb	r3, [r3, #0]
 80106d4:	f003 020f 	and.w	r2, r3, #15
 80106d8:	6879      	ldr	r1, [r7, #4]
 80106da:	4613      	mov	r3, r2
 80106dc:	009b      	lsls	r3, r3, #2
 80106de:	4413      	add	r3, r2
 80106e0:	009b      	lsls	r3, r3, #2
 80106e2:	440b      	add	r3, r1
 80106e4:	3324      	adds	r3, #36	; 0x24
 80106e6:	2201      	movs	r2, #1
 80106e8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80106ea:	4b39      	ldr	r3, [pc, #228]	; (80107d0 <USBD_CDC_Init+0x1e8>)
 80106ec:	7819      	ldrb	r1, [r3, #0]
 80106ee:	2340      	movs	r3, #64	; 0x40
 80106f0:	2202      	movs	r2, #2
 80106f2:	6878      	ldr	r0, [r7, #4]
 80106f4:	f002 fb93 	bl	8012e1e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80106f8:	4b35      	ldr	r3, [pc, #212]	; (80107d0 <USBD_CDC_Init+0x1e8>)
 80106fa:	781b      	ldrb	r3, [r3, #0]
 80106fc:	f003 020f 	and.w	r2, r3, #15
 8010700:	6879      	ldr	r1, [r7, #4]
 8010702:	4613      	mov	r3, r2
 8010704:	009b      	lsls	r3, r3, #2
 8010706:	4413      	add	r3, r2
 8010708:	009b      	lsls	r3, r3, #2
 801070a:	440b      	add	r3, r1
 801070c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010710:	2201      	movs	r2, #1
 8010712:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010714:	4b2f      	ldr	r3, [pc, #188]	; (80107d4 <USBD_CDC_Init+0x1ec>)
 8010716:	781b      	ldrb	r3, [r3, #0]
 8010718:	f003 020f 	and.w	r2, r3, #15
 801071c:	6879      	ldr	r1, [r7, #4]
 801071e:	4613      	mov	r3, r2
 8010720:	009b      	lsls	r3, r3, #2
 8010722:	4413      	add	r3, r2
 8010724:	009b      	lsls	r3, r3, #2
 8010726:	440b      	add	r3, r1
 8010728:	3326      	adds	r3, #38	; 0x26
 801072a:	2210      	movs	r2, #16
 801072c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801072e:	4b29      	ldr	r3, [pc, #164]	; (80107d4 <USBD_CDC_Init+0x1ec>)
 8010730:	7819      	ldrb	r1, [r3, #0]
 8010732:	2308      	movs	r3, #8
 8010734:	2203      	movs	r2, #3
 8010736:	6878      	ldr	r0, [r7, #4]
 8010738:	f002 fb71 	bl	8012e1e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801073c:	4b25      	ldr	r3, [pc, #148]	; (80107d4 <USBD_CDC_Init+0x1ec>)
 801073e:	781b      	ldrb	r3, [r3, #0]
 8010740:	f003 020f 	and.w	r2, r3, #15
 8010744:	6879      	ldr	r1, [r7, #4]
 8010746:	4613      	mov	r3, r2
 8010748:	009b      	lsls	r3, r3, #2
 801074a:	4413      	add	r3, r2
 801074c:	009b      	lsls	r3, r3, #2
 801074e:	440b      	add	r3, r1
 8010750:	3324      	adds	r3, #36	; 0x24
 8010752:	2201      	movs	r2, #1
 8010754:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	2200      	movs	r2, #0
 801075a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010764:	687a      	ldr	r2, [r7, #4]
 8010766:	33b0      	adds	r3, #176	; 0xb0
 8010768:	009b      	lsls	r3, r3, #2
 801076a:	4413      	add	r3, r2
 801076c:	685b      	ldr	r3, [r3, #4]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	2200      	movs	r2, #0
 8010776:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	2200      	movs	r2, #0
 801077e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8010788:	2b00      	cmp	r3, #0
 801078a:	d101      	bne.n	8010790 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801078c:	2302      	movs	r3, #2
 801078e:	e018      	b.n	80107c2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	7c1b      	ldrb	r3, [r3, #16]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d10a      	bne.n	80107ae <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010798:	4b0d      	ldr	r3, [pc, #52]	; (80107d0 <USBD_CDC_Init+0x1e8>)
 801079a:	7819      	ldrb	r1, [r3, #0]
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80107a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80107a6:	6878      	ldr	r0, [r7, #4]
 80107a8:	f002 fc28 	bl	8012ffc <USBD_LL_PrepareReceive>
 80107ac:	e008      	b.n	80107c0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80107ae:	4b08      	ldr	r3, [pc, #32]	; (80107d0 <USBD_CDC_Init+0x1e8>)
 80107b0:	7819      	ldrb	r1, [r3, #0]
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80107b8:	2340      	movs	r3, #64	; 0x40
 80107ba:	6878      	ldr	r0, [r7, #4]
 80107bc:	f002 fc1e 	bl	8012ffc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80107c0:	2300      	movs	r3, #0
}
 80107c2:	4618      	mov	r0, r3
 80107c4:	3710      	adds	r7, #16
 80107c6:	46bd      	mov	sp, r7
 80107c8:	bd80      	pop	{r7, pc}
 80107ca:	bf00      	nop
 80107cc:	24000097 	.word	0x24000097
 80107d0:	24000098 	.word	0x24000098
 80107d4:	24000099 	.word	0x24000099

080107d8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80107d8:	b580      	push	{r7, lr}
 80107da:	b082      	sub	sp, #8
 80107dc:	af00      	add	r7, sp, #0
 80107de:	6078      	str	r0, [r7, #4]
 80107e0:	460b      	mov	r3, r1
 80107e2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80107e4:	4b3a      	ldr	r3, [pc, #232]	; (80108d0 <USBD_CDC_DeInit+0xf8>)
 80107e6:	781b      	ldrb	r3, [r3, #0]
 80107e8:	4619      	mov	r1, r3
 80107ea:	6878      	ldr	r0, [r7, #4]
 80107ec:	f002 fb3d 	bl	8012e6a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80107f0:	4b37      	ldr	r3, [pc, #220]	; (80108d0 <USBD_CDC_DeInit+0xf8>)
 80107f2:	781b      	ldrb	r3, [r3, #0]
 80107f4:	f003 020f 	and.w	r2, r3, #15
 80107f8:	6879      	ldr	r1, [r7, #4]
 80107fa:	4613      	mov	r3, r2
 80107fc:	009b      	lsls	r3, r3, #2
 80107fe:	4413      	add	r3, r2
 8010800:	009b      	lsls	r3, r3, #2
 8010802:	440b      	add	r3, r1
 8010804:	3324      	adds	r3, #36	; 0x24
 8010806:	2200      	movs	r2, #0
 8010808:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801080a:	4b32      	ldr	r3, [pc, #200]	; (80108d4 <USBD_CDC_DeInit+0xfc>)
 801080c:	781b      	ldrb	r3, [r3, #0]
 801080e:	4619      	mov	r1, r3
 8010810:	6878      	ldr	r0, [r7, #4]
 8010812:	f002 fb2a 	bl	8012e6a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8010816:	4b2f      	ldr	r3, [pc, #188]	; (80108d4 <USBD_CDC_DeInit+0xfc>)
 8010818:	781b      	ldrb	r3, [r3, #0]
 801081a:	f003 020f 	and.w	r2, r3, #15
 801081e:	6879      	ldr	r1, [r7, #4]
 8010820:	4613      	mov	r3, r2
 8010822:	009b      	lsls	r3, r3, #2
 8010824:	4413      	add	r3, r2
 8010826:	009b      	lsls	r3, r3, #2
 8010828:	440b      	add	r3, r1
 801082a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801082e:	2200      	movs	r2, #0
 8010830:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8010832:	4b29      	ldr	r3, [pc, #164]	; (80108d8 <USBD_CDC_DeInit+0x100>)
 8010834:	781b      	ldrb	r3, [r3, #0]
 8010836:	4619      	mov	r1, r3
 8010838:	6878      	ldr	r0, [r7, #4]
 801083a:	f002 fb16 	bl	8012e6a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801083e:	4b26      	ldr	r3, [pc, #152]	; (80108d8 <USBD_CDC_DeInit+0x100>)
 8010840:	781b      	ldrb	r3, [r3, #0]
 8010842:	f003 020f 	and.w	r2, r3, #15
 8010846:	6879      	ldr	r1, [r7, #4]
 8010848:	4613      	mov	r3, r2
 801084a:	009b      	lsls	r3, r3, #2
 801084c:	4413      	add	r3, r2
 801084e:	009b      	lsls	r3, r3, #2
 8010850:	440b      	add	r3, r1
 8010852:	3324      	adds	r3, #36	; 0x24
 8010854:	2200      	movs	r2, #0
 8010856:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8010858:	4b1f      	ldr	r3, [pc, #124]	; (80108d8 <USBD_CDC_DeInit+0x100>)
 801085a:	781b      	ldrb	r3, [r3, #0]
 801085c:	f003 020f 	and.w	r2, r3, #15
 8010860:	6879      	ldr	r1, [r7, #4]
 8010862:	4613      	mov	r3, r2
 8010864:	009b      	lsls	r3, r3, #2
 8010866:	4413      	add	r3, r2
 8010868:	009b      	lsls	r3, r3, #2
 801086a:	440b      	add	r3, r1
 801086c:	3326      	adds	r3, #38	; 0x26
 801086e:	2200      	movs	r2, #0
 8010870:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	32b0      	adds	r2, #176	; 0xb0
 801087c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d01f      	beq.n	80108c4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801088a:	687a      	ldr	r2, [r7, #4]
 801088c:	33b0      	adds	r3, #176	; 0xb0
 801088e:	009b      	lsls	r3, r3, #2
 8010890:	4413      	add	r3, r2
 8010892:	685b      	ldr	r3, [r3, #4]
 8010894:	685b      	ldr	r3, [r3, #4]
 8010896:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	32b0      	adds	r2, #176	; 0xb0
 80108a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108a6:	4618      	mov	r0, r3
 80108a8:	f002 fbea 	bl	8013080 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	32b0      	adds	r2, #176	; 0xb0
 80108b6:	2100      	movs	r1, #0
 80108b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	2200      	movs	r2, #0
 80108c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80108c4:	2300      	movs	r3, #0
}
 80108c6:	4618      	mov	r0, r3
 80108c8:	3708      	adds	r7, #8
 80108ca:	46bd      	mov	sp, r7
 80108cc:	bd80      	pop	{r7, pc}
 80108ce:	bf00      	nop
 80108d0:	24000097 	.word	0x24000097
 80108d4:	24000098 	.word	0x24000098
 80108d8:	24000099 	.word	0x24000099

080108dc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b086      	sub	sp, #24
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
 80108e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	32b0      	adds	r2, #176	; 0xb0
 80108f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108f4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80108f6:	2300      	movs	r3, #0
 80108f8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80108fa:	2300      	movs	r3, #0
 80108fc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80108fe:	2300      	movs	r3, #0
 8010900:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8010902:	693b      	ldr	r3, [r7, #16]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d101      	bne.n	801090c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8010908:	2303      	movs	r3, #3
 801090a:	e0bf      	b.n	8010a8c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	781b      	ldrb	r3, [r3, #0]
 8010910:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010914:	2b00      	cmp	r3, #0
 8010916:	d050      	beq.n	80109ba <USBD_CDC_Setup+0xde>
 8010918:	2b20      	cmp	r3, #32
 801091a:	f040 80af 	bne.w	8010a7c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801091e:	683b      	ldr	r3, [r7, #0]
 8010920:	88db      	ldrh	r3, [r3, #6]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d03a      	beq.n	801099c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8010926:	683b      	ldr	r3, [r7, #0]
 8010928:	781b      	ldrb	r3, [r3, #0]
 801092a:	b25b      	sxtb	r3, r3
 801092c:	2b00      	cmp	r3, #0
 801092e:	da1b      	bge.n	8010968 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010936:	687a      	ldr	r2, [r7, #4]
 8010938:	33b0      	adds	r3, #176	; 0xb0
 801093a:	009b      	lsls	r3, r3, #2
 801093c:	4413      	add	r3, r2
 801093e:	685b      	ldr	r3, [r3, #4]
 8010940:	689b      	ldr	r3, [r3, #8]
 8010942:	683a      	ldr	r2, [r7, #0]
 8010944:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8010946:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010948:	683a      	ldr	r2, [r7, #0]
 801094a:	88d2      	ldrh	r2, [r2, #6]
 801094c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801094e:	683b      	ldr	r3, [r7, #0]
 8010950:	88db      	ldrh	r3, [r3, #6]
 8010952:	2b07      	cmp	r3, #7
 8010954:	bf28      	it	cs
 8010956:	2307      	movcs	r3, #7
 8010958:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801095a:	693b      	ldr	r3, [r7, #16]
 801095c:	89fa      	ldrh	r2, [r7, #14]
 801095e:	4619      	mov	r1, r3
 8010960:	6878      	ldr	r0, [r7, #4]
 8010962:	f001 fd89 	bl	8012478 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8010966:	e090      	b.n	8010a8a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8010968:	683b      	ldr	r3, [r7, #0]
 801096a:	785a      	ldrb	r2, [r3, #1]
 801096c:	693b      	ldr	r3, [r7, #16]
 801096e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8010972:	683b      	ldr	r3, [r7, #0]
 8010974:	88db      	ldrh	r3, [r3, #6]
 8010976:	2b3f      	cmp	r3, #63	; 0x3f
 8010978:	d803      	bhi.n	8010982 <USBD_CDC_Setup+0xa6>
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	88db      	ldrh	r3, [r3, #6]
 801097e:	b2da      	uxtb	r2, r3
 8010980:	e000      	b.n	8010984 <USBD_CDC_Setup+0xa8>
 8010982:	2240      	movs	r2, #64	; 0x40
 8010984:	693b      	ldr	r3, [r7, #16]
 8010986:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801098a:	6939      	ldr	r1, [r7, #16]
 801098c:	693b      	ldr	r3, [r7, #16]
 801098e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8010992:	461a      	mov	r2, r3
 8010994:	6878      	ldr	r0, [r7, #4]
 8010996:	f001 fd9b 	bl	80124d0 <USBD_CtlPrepareRx>
      break;
 801099a:	e076      	b.n	8010a8a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80109a2:	687a      	ldr	r2, [r7, #4]
 80109a4:	33b0      	adds	r3, #176	; 0xb0
 80109a6:	009b      	lsls	r3, r3, #2
 80109a8:	4413      	add	r3, r2
 80109aa:	685b      	ldr	r3, [r3, #4]
 80109ac:	689b      	ldr	r3, [r3, #8]
 80109ae:	683a      	ldr	r2, [r7, #0]
 80109b0:	7850      	ldrb	r0, [r2, #1]
 80109b2:	2200      	movs	r2, #0
 80109b4:	6839      	ldr	r1, [r7, #0]
 80109b6:	4798      	blx	r3
      break;
 80109b8:	e067      	b.n	8010a8a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80109ba:	683b      	ldr	r3, [r7, #0]
 80109bc:	785b      	ldrb	r3, [r3, #1]
 80109be:	2b0b      	cmp	r3, #11
 80109c0:	d851      	bhi.n	8010a66 <USBD_CDC_Setup+0x18a>
 80109c2:	a201      	add	r2, pc, #4	; (adr r2, 80109c8 <USBD_CDC_Setup+0xec>)
 80109c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109c8:	080109f9 	.word	0x080109f9
 80109cc:	08010a75 	.word	0x08010a75
 80109d0:	08010a67 	.word	0x08010a67
 80109d4:	08010a67 	.word	0x08010a67
 80109d8:	08010a67 	.word	0x08010a67
 80109dc:	08010a67 	.word	0x08010a67
 80109e0:	08010a67 	.word	0x08010a67
 80109e4:	08010a67 	.word	0x08010a67
 80109e8:	08010a67 	.word	0x08010a67
 80109ec:	08010a67 	.word	0x08010a67
 80109f0:	08010a23 	.word	0x08010a23
 80109f4:	08010a4d 	.word	0x08010a4d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80109fe:	b2db      	uxtb	r3, r3
 8010a00:	2b03      	cmp	r3, #3
 8010a02:	d107      	bne.n	8010a14 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010a04:	f107 030a 	add.w	r3, r7, #10
 8010a08:	2202      	movs	r2, #2
 8010a0a:	4619      	mov	r1, r3
 8010a0c:	6878      	ldr	r0, [r7, #4]
 8010a0e:	f001 fd33 	bl	8012478 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010a12:	e032      	b.n	8010a7a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010a14:	6839      	ldr	r1, [r7, #0]
 8010a16:	6878      	ldr	r0, [r7, #4]
 8010a18:	f001 fcbd 	bl	8012396 <USBD_CtlError>
            ret = USBD_FAIL;
 8010a1c:	2303      	movs	r3, #3
 8010a1e:	75fb      	strb	r3, [r7, #23]
          break;
 8010a20:	e02b      	b.n	8010a7a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a28:	b2db      	uxtb	r3, r3
 8010a2a:	2b03      	cmp	r3, #3
 8010a2c:	d107      	bne.n	8010a3e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010a2e:	f107 030d 	add.w	r3, r7, #13
 8010a32:	2201      	movs	r2, #1
 8010a34:	4619      	mov	r1, r3
 8010a36:	6878      	ldr	r0, [r7, #4]
 8010a38:	f001 fd1e 	bl	8012478 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010a3c:	e01d      	b.n	8010a7a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010a3e:	6839      	ldr	r1, [r7, #0]
 8010a40:	6878      	ldr	r0, [r7, #4]
 8010a42:	f001 fca8 	bl	8012396 <USBD_CtlError>
            ret = USBD_FAIL;
 8010a46:	2303      	movs	r3, #3
 8010a48:	75fb      	strb	r3, [r7, #23]
          break;
 8010a4a:	e016      	b.n	8010a7a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a52:	b2db      	uxtb	r3, r3
 8010a54:	2b03      	cmp	r3, #3
 8010a56:	d00f      	beq.n	8010a78 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8010a58:	6839      	ldr	r1, [r7, #0]
 8010a5a:	6878      	ldr	r0, [r7, #4]
 8010a5c:	f001 fc9b 	bl	8012396 <USBD_CtlError>
            ret = USBD_FAIL;
 8010a60:	2303      	movs	r3, #3
 8010a62:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010a64:	e008      	b.n	8010a78 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010a66:	6839      	ldr	r1, [r7, #0]
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f001 fc94 	bl	8012396 <USBD_CtlError>
          ret = USBD_FAIL;
 8010a6e:	2303      	movs	r3, #3
 8010a70:	75fb      	strb	r3, [r7, #23]
          break;
 8010a72:	e002      	b.n	8010a7a <USBD_CDC_Setup+0x19e>
          break;
 8010a74:	bf00      	nop
 8010a76:	e008      	b.n	8010a8a <USBD_CDC_Setup+0x1ae>
          break;
 8010a78:	bf00      	nop
      }
      break;
 8010a7a:	e006      	b.n	8010a8a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8010a7c:	6839      	ldr	r1, [r7, #0]
 8010a7e:	6878      	ldr	r0, [r7, #4]
 8010a80:	f001 fc89 	bl	8012396 <USBD_CtlError>
      ret = USBD_FAIL;
 8010a84:	2303      	movs	r3, #3
 8010a86:	75fb      	strb	r3, [r7, #23]
      break;
 8010a88:	bf00      	nop
  }

  return (uint8_t)ret;
 8010a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	3718      	adds	r7, #24
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}

08010a94 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b084      	sub	sp, #16
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
 8010a9c:	460b      	mov	r3, r1
 8010a9e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010aa6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	32b0      	adds	r2, #176	; 0xb0
 8010ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d101      	bne.n	8010abe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8010aba:	2303      	movs	r3, #3
 8010abc:	e065      	b.n	8010b8a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	32b0      	adds	r2, #176	; 0xb0
 8010ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010acc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010ace:	78fb      	ldrb	r3, [r7, #3]
 8010ad0:	f003 020f 	and.w	r2, r3, #15
 8010ad4:	6879      	ldr	r1, [r7, #4]
 8010ad6:	4613      	mov	r3, r2
 8010ad8:	009b      	lsls	r3, r3, #2
 8010ada:	4413      	add	r3, r2
 8010adc:	009b      	lsls	r3, r3, #2
 8010ade:	440b      	add	r3, r1
 8010ae0:	3318      	adds	r3, #24
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d02f      	beq.n	8010b48 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8010ae8:	78fb      	ldrb	r3, [r7, #3]
 8010aea:	f003 020f 	and.w	r2, r3, #15
 8010aee:	6879      	ldr	r1, [r7, #4]
 8010af0:	4613      	mov	r3, r2
 8010af2:	009b      	lsls	r3, r3, #2
 8010af4:	4413      	add	r3, r2
 8010af6:	009b      	lsls	r3, r3, #2
 8010af8:	440b      	add	r3, r1
 8010afa:	3318      	adds	r3, #24
 8010afc:	681a      	ldr	r2, [r3, #0]
 8010afe:	78fb      	ldrb	r3, [r7, #3]
 8010b00:	f003 010f 	and.w	r1, r3, #15
 8010b04:	68f8      	ldr	r0, [r7, #12]
 8010b06:	460b      	mov	r3, r1
 8010b08:	00db      	lsls	r3, r3, #3
 8010b0a:	440b      	add	r3, r1
 8010b0c:	009b      	lsls	r3, r3, #2
 8010b0e:	4403      	add	r3, r0
 8010b10:	3348      	adds	r3, #72	; 0x48
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	fbb2 f1f3 	udiv	r1, r2, r3
 8010b18:	fb01 f303 	mul.w	r3, r1, r3
 8010b1c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d112      	bne.n	8010b48 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8010b22:	78fb      	ldrb	r3, [r7, #3]
 8010b24:	f003 020f 	and.w	r2, r3, #15
 8010b28:	6879      	ldr	r1, [r7, #4]
 8010b2a:	4613      	mov	r3, r2
 8010b2c:	009b      	lsls	r3, r3, #2
 8010b2e:	4413      	add	r3, r2
 8010b30:	009b      	lsls	r3, r3, #2
 8010b32:	440b      	add	r3, r1
 8010b34:	3318      	adds	r3, #24
 8010b36:	2200      	movs	r2, #0
 8010b38:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010b3a:	78f9      	ldrb	r1, [r7, #3]
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	2200      	movs	r2, #0
 8010b40:	6878      	ldr	r0, [r7, #4]
 8010b42:	f002 fa3a 	bl	8012fba <USBD_LL_Transmit>
 8010b46:	e01f      	b.n	8010b88 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8010b48:	68bb      	ldr	r3, [r7, #8]
 8010b4a:	2200      	movs	r2, #0
 8010b4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010b56:	687a      	ldr	r2, [r7, #4]
 8010b58:	33b0      	adds	r3, #176	; 0xb0
 8010b5a:	009b      	lsls	r3, r3, #2
 8010b5c:	4413      	add	r3, r2
 8010b5e:	685b      	ldr	r3, [r3, #4]
 8010b60:	691b      	ldr	r3, [r3, #16]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d010      	beq.n	8010b88 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010b6c:	687a      	ldr	r2, [r7, #4]
 8010b6e:	33b0      	adds	r3, #176	; 0xb0
 8010b70:	009b      	lsls	r3, r3, #2
 8010b72:	4413      	add	r3, r2
 8010b74:	685b      	ldr	r3, [r3, #4]
 8010b76:	691b      	ldr	r3, [r3, #16]
 8010b78:	68ba      	ldr	r2, [r7, #8]
 8010b7a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8010b7e:	68ba      	ldr	r2, [r7, #8]
 8010b80:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8010b84:	78fa      	ldrb	r2, [r7, #3]
 8010b86:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010b88:	2300      	movs	r3, #0
}
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	3710      	adds	r7, #16
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd80      	pop	{r7, pc}

08010b92 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010b92:	b580      	push	{r7, lr}
 8010b94:	b084      	sub	sp, #16
 8010b96:	af00      	add	r7, sp, #0
 8010b98:	6078      	str	r0, [r7, #4]
 8010b9a:	460b      	mov	r3, r1
 8010b9c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	32b0      	adds	r2, #176	; 0xb0
 8010ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010bac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	32b0      	adds	r2, #176	; 0xb0
 8010bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d101      	bne.n	8010bc4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8010bc0:	2303      	movs	r3, #3
 8010bc2:	e01a      	b.n	8010bfa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010bc4:	78fb      	ldrb	r3, [r7, #3]
 8010bc6:	4619      	mov	r1, r3
 8010bc8:	6878      	ldr	r0, [r7, #4]
 8010bca:	f002 fa38 	bl	801303e <USBD_LL_GetRxDataSize>
 8010bce:	4602      	mov	r2, r0
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010bdc:	687a      	ldr	r2, [r7, #4]
 8010bde:	33b0      	adds	r3, #176	; 0xb0
 8010be0:	009b      	lsls	r3, r3, #2
 8010be2:	4413      	add	r3, r2
 8010be4:	685b      	ldr	r3, [r3, #4]
 8010be6:	68db      	ldr	r3, [r3, #12]
 8010be8:	68fa      	ldr	r2, [r7, #12]
 8010bea:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8010bee:	68fa      	ldr	r2, [r7, #12]
 8010bf0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8010bf4:	4611      	mov	r1, r2
 8010bf6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010bf8:	2300      	movs	r3, #0
}
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	3710      	adds	r7, #16
 8010bfe:	46bd      	mov	sp, r7
 8010c00:	bd80      	pop	{r7, pc}

08010c02 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010c02:	b580      	push	{r7, lr}
 8010c04:	b084      	sub	sp, #16
 8010c06:	af00      	add	r7, sp, #0
 8010c08:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	32b0      	adds	r2, #176	; 0xb0
 8010c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c18:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d101      	bne.n	8010c24 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010c20:	2303      	movs	r3, #3
 8010c22:	e025      	b.n	8010c70 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010c2a:	687a      	ldr	r2, [r7, #4]
 8010c2c:	33b0      	adds	r3, #176	; 0xb0
 8010c2e:	009b      	lsls	r3, r3, #2
 8010c30:	4413      	add	r3, r2
 8010c32:	685b      	ldr	r3, [r3, #4]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d01a      	beq.n	8010c6e <USBD_CDC_EP0_RxReady+0x6c>
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010c3e:	2bff      	cmp	r3, #255	; 0xff
 8010c40:	d015      	beq.n	8010c6e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010c48:	687a      	ldr	r2, [r7, #4]
 8010c4a:	33b0      	adds	r3, #176	; 0xb0
 8010c4c:	009b      	lsls	r3, r3, #2
 8010c4e:	4413      	add	r3, r2
 8010c50:	685b      	ldr	r3, [r3, #4]
 8010c52:	689b      	ldr	r3, [r3, #8]
 8010c54:	68fa      	ldr	r2, [r7, #12]
 8010c56:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8010c5a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8010c5c:	68fa      	ldr	r2, [r7, #12]
 8010c5e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010c62:	b292      	uxth	r2, r2
 8010c64:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	22ff      	movs	r2, #255	; 0xff
 8010c6a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8010c6e:	2300      	movs	r3, #0
}
 8010c70:	4618      	mov	r0, r3
 8010c72:	3710      	adds	r7, #16
 8010c74:	46bd      	mov	sp, r7
 8010c76:	bd80      	pop	{r7, pc}

08010c78 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b086      	sub	sp, #24
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010c80:	2182      	movs	r1, #130	; 0x82
 8010c82:	4818      	ldr	r0, [pc, #96]	; (8010ce4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010c84:	f000 fd4f 	bl	8011726 <USBD_GetEpDesc>
 8010c88:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010c8a:	2101      	movs	r1, #1
 8010c8c:	4815      	ldr	r0, [pc, #84]	; (8010ce4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010c8e:	f000 fd4a 	bl	8011726 <USBD_GetEpDesc>
 8010c92:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010c94:	2181      	movs	r1, #129	; 0x81
 8010c96:	4813      	ldr	r0, [pc, #76]	; (8010ce4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010c98:	f000 fd45 	bl	8011726 <USBD_GetEpDesc>
 8010c9c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010c9e:	697b      	ldr	r3, [r7, #20]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d002      	beq.n	8010caa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010ca4:	697b      	ldr	r3, [r7, #20]
 8010ca6:	2210      	movs	r2, #16
 8010ca8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010caa:	693b      	ldr	r3, [r7, #16]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d006      	beq.n	8010cbe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010cb0:	693b      	ldr	r3, [r7, #16]
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010cb8:	711a      	strb	r2, [r3, #4]
 8010cba:	2200      	movs	r2, #0
 8010cbc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d006      	beq.n	8010cd2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010ccc:	711a      	strb	r2, [r3, #4]
 8010cce:	2200      	movs	r2, #0
 8010cd0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	2243      	movs	r2, #67	; 0x43
 8010cd6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010cd8:	4b02      	ldr	r3, [pc, #8]	; (8010ce4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8010cda:	4618      	mov	r0, r3
 8010cdc:	3718      	adds	r7, #24
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd80      	pop	{r7, pc}
 8010ce2:	bf00      	nop
 8010ce4:	24000054 	.word	0x24000054

08010ce8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b086      	sub	sp, #24
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010cf0:	2182      	movs	r1, #130	; 0x82
 8010cf2:	4818      	ldr	r0, [pc, #96]	; (8010d54 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010cf4:	f000 fd17 	bl	8011726 <USBD_GetEpDesc>
 8010cf8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010cfa:	2101      	movs	r1, #1
 8010cfc:	4815      	ldr	r0, [pc, #84]	; (8010d54 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010cfe:	f000 fd12 	bl	8011726 <USBD_GetEpDesc>
 8010d02:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010d04:	2181      	movs	r1, #129	; 0x81
 8010d06:	4813      	ldr	r0, [pc, #76]	; (8010d54 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010d08:	f000 fd0d 	bl	8011726 <USBD_GetEpDesc>
 8010d0c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010d0e:	697b      	ldr	r3, [r7, #20]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d002      	beq.n	8010d1a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8010d14:	697b      	ldr	r3, [r7, #20]
 8010d16:	2210      	movs	r2, #16
 8010d18:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010d1a:	693b      	ldr	r3, [r7, #16]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d006      	beq.n	8010d2e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010d20:	693b      	ldr	r3, [r7, #16]
 8010d22:	2200      	movs	r2, #0
 8010d24:	711a      	strb	r2, [r3, #4]
 8010d26:	2200      	movs	r2, #0
 8010d28:	f042 0202 	orr.w	r2, r2, #2
 8010d2c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d006      	beq.n	8010d42 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	2200      	movs	r2, #0
 8010d38:	711a      	strb	r2, [r3, #4]
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	f042 0202 	orr.w	r2, r2, #2
 8010d40:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	2243      	movs	r2, #67	; 0x43
 8010d46:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010d48:	4b02      	ldr	r3, [pc, #8]	; (8010d54 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	3718      	adds	r7, #24
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	bd80      	pop	{r7, pc}
 8010d52:	bf00      	nop
 8010d54:	24000054 	.word	0x24000054

08010d58 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b086      	sub	sp, #24
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010d60:	2182      	movs	r1, #130	; 0x82
 8010d62:	4818      	ldr	r0, [pc, #96]	; (8010dc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010d64:	f000 fcdf 	bl	8011726 <USBD_GetEpDesc>
 8010d68:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010d6a:	2101      	movs	r1, #1
 8010d6c:	4815      	ldr	r0, [pc, #84]	; (8010dc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010d6e:	f000 fcda 	bl	8011726 <USBD_GetEpDesc>
 8010d72:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010d74:	2181      	movs	r1, #129	; 0x81
 8010d76:	4813      	ldr	r0, [pc, #76]	; (8010dc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010d78:	f000 fcd5 	bl	8011726 <USBD_GetEpDesc>
 8010d7c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010d7e:	697b      	ldr	r3, [r7, #20]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d002      	beq.n	8010d8a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010d84:	697b      	ldr	r3, [r7, #20]
 8010d86:	2210      	movs	r2, #16
 8010d88:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010d8a:	693b      	ldr	r3, [r7, #16]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d006      	beq.n	8010d9e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010d90:	693b      	ldr	r3, [r7, #16]
 8010d92:	2200      	movs	r2, #0
 8010d94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010d98:	711a      	strb	r2, [r3, #4]
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d006      	beq.n	8010db2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	2200      	movs	r2, #0
 8010da8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010dac:	711a      	strb	r2, [r3, #4]
 8010dae:	2200      	movs	r2, #0
 8010db0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	2243      	movs	r2, #67	; 0x43
 8010db6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010db8:	4b02      	ldr	r3, [pc, #8]	; (8010dc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8010dba:	4618      	mov	r0, r3
 8010dbc:	3718      	adds	r7, #24
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	bd80      	pop	{r7, pc}
 8010dc2:	bf00      	nop
 8010dc4:	24000054 	.word	0x24000054

08010dc8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010dc8:	b480      	push	{r7}
 8010dca:	b083      	sub	sp, #12
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	220a      	movs	r2, #10
 8010dd4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010dd6:	4b03      	ldr	r3, [pc, #12]	; (8010de4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010dd8:	4618      	mov	r0, r3
 8010dda:	370c      	adds	r7, #12
 8010ddc:	46bd      	mov	sp, r7
 8010dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de2:	4770      	bx	lr
 8010de4:	24000010 	.word	0x24000010

08010de8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010de8:	b480      	push	{r7}
 8010dea:	b083      	sub	sp, #12
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
 8010df0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010df2:	683b      	ldr	r3, [r7, #0]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d101      	bne.n	8010dfc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010df8:	2303      	movs	r3, #3
 8010dfa:	e009      	b.n	8010e10 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010e02:	687a      	ldr	r2, [r7, #4]
 8010e04:	33b0      	adds	r3, #176	; 0xb0
 8010e06:	009b      	lsls	r3, r3, #2
 8010e08:	4413      	add	r3, r2
 8010e0a:	683a      	ldr	r2, [r7, #0]
 8010e0c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8010e0e:	2300      	movs	r3, #0
}
 8010e10:	4618      	mov	r0, r3
 8010e12:	370c      	adds	r7, #12
 8010e14:	46bd      	mov	sp, r7
 8010e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1a:	4770      	bx	lr

08010e1c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010e1c:	b480      	push	{r7}
 8010e1e:	b087      	sub	sp, #28
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	60f8      	str	r0, [r7, #12]
 8010e24:	60b9      	str	r1, [r7, #8]
 8010e26:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	32b0      	adds	r2, #176	; 0xb0
 8010e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e36:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8010e38:	697b      	ldr	r3, [r7, #20]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d101      	bne.n	8010e42 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8010e3e:	2303      	movs	r3, #3
 8010e40:	e008      	b.n	8010e54 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8010e42:	697b      	ldr	r3, [r7, #20]
 8010e44:	68ba      	ldr	r2, [r7, #8]
 8010e46:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8010e4a:	697b      	ldr	r3, [r7, #20]
 8010e4c:	687a      	ldr	r2, [r7, #4]
 8010e4e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8010e52:	2300      	movs	r3, #0
}
 8010e54:	4618      	mov	r0, r3
 8010e56:	371c      	adds	r7, #28
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5e:	4770      	bx	lr

08010e60 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010e60:	b480      	push	{r7}
 8010e62:	b085      	sub	sp, #20
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
 8010e68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	32b0      	adds	r2, #176	; 0xb0
 8010e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e78:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d101      	bne.n	8010e84 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8010e80:	2303      	movs	r3, #3
 8010e82:	e004      	b.n	8010e8e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	683a      	ldr	r2, [r7, #0]
 8010e88:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8010e8c:	2300      	movs	r3, #0
}
 8010e8e:	4618      	mov	r0, r3
 8010e90:	3714      	adds	r7, #20
 8010e92:	46bd      	mov	sp, r7
 8010e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e98:	4770      	bx	lr
	...

08010e9c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b084      	sub	sp, #16
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	32b0      	adds	r2, #176	; 0xb0
 8010eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010eb2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8010eb4:	2301      	movs	r3, #1
 8010eb6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	32b0      	adds	r2, #176	; 0xb0
 8010ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d101      	bne.n	8010ece <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8010eca:	2303      	movs	r3, #3
 8010ecc:	e025      	b.n	8010f1a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8010ece:	68bb      	ldr	r3, [r7, #8]
 8010ed0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d11f      	bne.n	8010f18 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8010ed8:	68bb      	ldr	r3, [r7, #8]
 8010eda:	2201      	movs	r2, #1
 8010edc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8010ee0:	4b10      	ldr	r3, [pc, #64]	; (8010f24 <USBD_CDC_TransmitPacket+0x88>)
 8010ee2:	781b      	ldrb	r3, [r3, #0]
 8010ee4:	f003 020f 	and.w	r2, r3, #15
 8010ee8:	68bb      	ldr	r3, [r7, #8]
 8010eea:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8010eee:	6878      	ldr	r0, [r7, #4]
 8010ef0:	4613      	mov	r3, r2
 8010ef2:	009b      	lsls	r3, r3, #2
 8010ef4:	4413      	add	r3, r2
 8010ef6:	009b      	lsls	r3, r3, #2
 8010ef8:	4403      	add	r3, r0
 8010efa:	3318      	adds	r3, #24
 8010efc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8010efe:	4b09      	ldr	r3, [pc, #36]	; (8010f24 <USBD_CDC_TransmitPacket+0x88>)
 8010f00:	7819      	ldrb	r1, [r3, #0]
 8010f02:	68bb      	ldr	r3, [r7, #8]
 8010f04:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8010f08:	68bb      	ldr	r3, [r7, #8]
 8010f0a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010f0e:	6878      	ldr	r0, [r7, #4]
 8010f10:	f002 f853 	bl	8012fba <USBD_LL_Transmit>

    ret = USBD_OK;
 8010f14:	2300      	movs	r3, #0
 8010f16:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8010f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	3710      	adds	r7, #16
 8010f1e:	46bd      	mov	sp, r7
 8010f20:	bd80      	pop	{r7, pc}
 8010f22:	bf00      	nop
 8010f24:	24000097 	.word	0x24000097

08010f28 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b084      	sub	sp, #16
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	32b0      	adds	r2, #176	; 0xb0
 8010f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f3e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	32b0      	adds	r2, #176	; 0xb0
 8010f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d101      	bne.n	8010f56 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8010f52:	2303      	movs	r3, #3
 8010f54:	e018      	b.n	8010f88 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	7c1b      	ldrb	r3, [r3, #16]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d10a      	bne.n	8010f74 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010f5e:	4b0c      	ldr	r3, [pc, #48]	; (8010f90 <USBD_CDC_ReceivePacket+0x68>)
 8010f60:	7819      	ldrb	r1, [r3, #0]
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010f68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010f6c:	6878      	ldr	r0, [r7, #4]
 8010f6e:	f002 f845 	bl	8012ffc <USBD_LL_PrepareReceive>
 8010f72:	e008      	b.n	8010f86 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010f74:	4b06      	ldr	r3, [pc, #24]	; (8010f90 <USBD_CDC_ReceivePacket+0x68>)
 8010f76:	7819      	ldrb	r1, [r3, #0]
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010f7e:	2340      	movs	r3, #64	; 0x40
 8010f80:	6878      	ldr	r0, [r7, #4]
 8010f82:	f002 f83b 	bl	8012ffc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010f86:	2300      	movs	r3, #0
}
 8010f88:	4618      	mov	r0, r3
 8010f8a:	3710      	adds	r7, #16
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bd80      	pop	{r7, pc}
 8010f90:	24000098 	.word	0x24000098

08010f94 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b086      	sub	sp, #24
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	60f8      	str	r0, [r7, #12]
 8010f9c:	60b9      	str	r1, [r7, #8]
 8010f9e:	4613      	mov	r3, r2
 8010fa0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d101      	bne.n	8010fac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010fa8:	2303      	movs	r3, #3
 8010faa:	e01f      	b.n	8010fec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	2200      	movs	r2, #0
 8010fb0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	2200      	movs	r2, #0
 8010fb8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010fc4:	68bb      	ldr	r3, [r7, #8]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d003      	beq.n	8010fd2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	68ba      	ldr	r2, [r7, #8]
 8010fce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	2201      	movs	r2, #1
 8010fd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	79fa      	ldrb	r2, [r7, #7]
 8010fde:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010fe0:	68f8      	ldr	r0, [r7, #12]
 8010fe2:	f001 feb1 	bl	8012d48 <USBD_LL_Init>
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fec:	4618      	mov	r0, r3
 8010fee:	3718      	adds	r7, #24
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	bd80      	pop	{r7, pc}

08010ff4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b084      	sub	sp, #16
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]
 8010ffc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010ffe:	2300      	movs	r3, #0
 8011000:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011002:	683b      	ldr	r3, [r7, #0]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d101      	bne.n	801100c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011008:	2303      	movs	r3, #3
 801100a:	e025      	b.n	8011058 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	683a      	ldr	r2, [r7, #0]
 8011010:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	32ae      	adds	r2, #174	; 0xae
 801101e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011024:	2b00      	cmp	r3, #0
 8011026:	d00f      	beq.n	8011048 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	32ae      	adds	r2, #174	; 0xae
 8011032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011038:	f107 020e 	add.w	r2, r7, #14
 801103c:	4610      	mov	r0, r2
 801103e:	4798      	blx	r3
 8011040:	4602      	mov	r2, r0
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801104e:	1c5a      	adds	r2, r3, #1
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8011056:	2300      	movs	r3, #0
}
 8011058:	4618      	mov	r0, r3
 801105a:	3710      	adds	r7, #16
 801105c:	46bd      	mov	sp, r7
 801105e:	bd80      	pop	{r7, pc}

08011060 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b082      	sub	sp, #8
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011068:	6878      	ldr	r0, [r7, #4]
 801106a:	f001 febd 	bl	8012de8 <USBD_LL_Start>
 801106e:	4603      	mov	r3, r0
}
 8011070:	4618      	mov	r0, r3
 8011072:	3708      	adds	r7, #8
 8011074:	46bd      	mov	sp, r7
 8011076:	bd80      	pop	{r7, pc}

08011078 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8011078:	b480      	push	{r7}
 801107a:	b083      	sub	sp, #12
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011080:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8011082:	4618      	mov	r0, r3
 8011084:	370c      	adds	r7, #12
 8011086:	46bd      	mov	sp, r7
 8011088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108c:	4770      	bx	lr

0801108e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801108e:	b580      	push	{r7, lr}
 8011090:	b084      	sub	sp, #16
 8011092:	af00      	add	r7, sp, #0
 8011094:	6078      	str	r0, [r7, #4]
 8011096:	460b      	mov	r3, r1
 8011098:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801109a:	2300      	movs	r3, #0
 801109c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d009      	beq.n	80110bc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	78fa      	ldrb	r2, [r7, #3]
 80110b2:	4611      	mov	r1, r2
 80110b4:	6878      	ldr	r0, [r7, #4]
 80110b6:	4798      	blx	r3
 80110b8:	4603      	mov	r3, r0
 80110ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80110bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80110be:	4618      	mov	r0, r3
 80110c0:	3710      	adds	r7, #16
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bd80      	pop	{r7, pc}

080110c6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80110c6:	b580      	push	{r7, lr}
 80110c8:	b084      	sub	sp, #16
 80110ca:	af00      	add	r7, sp, #0
 80110cc:	6078      	str	r0, [r7, #4]
 80110ce:	460b      	mov	r3, r1
 80110d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80110d2:	2300      	movs	r3, #0
 80110d4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80110dc:	685b      	ldr	r3, [r3, #4]
 80110de:	78fa      	ldrb	r2, [r7, #3]
 80110e0:	4611      	mov	r1, r2
 80110e2:	6878      	ldr	r0, [r7, #4]
 80110e4:	4798      	blx	r3
 80110e6:	4603      	mov	r3, r0
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d001      	beq.n	80110f0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80110ec:	2303      	movs	r3, #3
 80110ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80110f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80110f2:	4618      	mov	r0, r3
 80110f4:	3710      	adds	r7, #16
 80110f6:	46bd      	mov	sp, r7
 80110f8:	bd80      	pop	{r7, pc}

080110fa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80110fa:	b580      	push	{r7, lr}
 80110fc:	b084      	sub	sp, #16
 80110fe:	af00      	add	r7, sp, #0
 8011100:	6078      	str	r0, [r7, #4]
 8011102:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801110a:	6839      	ldr	r1, [r7, #0]
 801110c:	4618      	mov	r0, r3
 801110e:	f001 f908 	bl	8012322 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	2201      	movs	r2, #1
 8011116:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011120:	461a      	mov	r2, r3
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801112e:	f003 031f 	and.w	r3, r3, #31
 8011132:	2b02      	cmp	r3, #2
 8011134:	d01a      	beq.n	801116c <USBD_LL_SetupStage+0x72>
 8011136:	2b02      	cmp	r3, #2
 8011138:	d822      	bhi.n	8011180 <USBD_LL_SetupStage+0x86>
 801113a:	2b00      	cmp	r3, #0
 801113c:	d002      	beq.n	8011144 <USBD_LL_SetupStage+0x4a>
 801113e:	2b01      	cmp	r3, #1
 8011140:	d00a      	beq.n	8011158 <USBD_LL_SetupStage+0x5e>
 8011142:	e01d      	b.n	8011180 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801114a:	4619      	mov	r1, r3
 801114c:	6878      	ldr	r0, [r7, #4]
 801114e:	f000 fb5f 	bl	8011810 <USBD_StdDevReq>
 8011152:	4603      	mov	r3, r0
 8011154:	73fb      	strb	r3, [r7, #15]
      break;
 8011156:	e020      	b.n	801119a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801115e:	4619      	mov	r1, r3
 8011160:	6878      	ldr	r0, [r7, #4]
 8011162:	f000 fbc7 	bl	80118f4 <USBD_StdItfReq>
 8011166:	4603      	mov	r3, r0
 8011168:	73fb      	strb	r3, [r7, #15]
      break;
 801116a:	e016      	b.n	801119a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011172:	4619      	mov	r1, r3
 8011174:	6878      	ldr	r0, [r7, #4]
 8011176:	f000 fc29 	bl	80119cc <USBD_StdEPReq>
 801117a:	4603      	mov	r3, r0
 801117c:	73fb      	strb	r3, [r7, #15]
      break;
 801117e:	e00c      	b.n	801119a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011186:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801118a:	b2db      	uxtb	r3, r3
 801118c:	4619      	mov	r1, r3
 801118e:	6878      	ldr	r0, [r7, #4]
 8011190:	f001 fe8a 	bl	8012ea8 <USBD_LL_StallEP>
 8011194:	4603      	mov	r3, r0
 8011196:	73fb      	strb	r3, [r7, #15]
      break;
 8011198:	bf00      	nop
  }

  return ret;
 801119a:	7bfb      	ldrb	r3, [r7, #15]
}
 801119c:	4618      	mov	r0, r3
 801119e:	3710      	adds	r7, #16
 80111a0:	46bd      	mov	sp, r7
 80111a2:	bd80      	pop	{r7, pc}

080111a4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b086      	sub	sp, #24
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	60f8      	str	r0, [r7, #12]
 80111ac:	460b      	mov	r3, r1
 80111ae:	607a      	str	r2, [r7, #4]
 80111b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80111b2:	2300      	movs	r3, #0
 80111b4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80111b6:	7afb      	ldrb	r3, [r7, #11]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d16e      	bne.n	801129a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80111c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80111ca:	2b03      	cmp	r3, #3
 80111cc:	f040 8098 	bne.w	8011300 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80111d0:	693b      	ldr	r3, [r7, #16]
 80111d2:	689a      	ldr	r2, [r3, #8]
 80111d4:	693b      	ldr	r3, [r7, #16]
 80111d6:	68db      	ldr	r3, [r3, #12]
 80111d8:	429a      	cmp	r2, r3
 80111da:	d913      	bls.n	8011204 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80111dc:	693b      	ldr	r3, [r7, #16]
 80111de:	689a      	ldr	r2, [r3, #8]
 80111e0:	693b      	ldr	r3, [r7, #16]
 80111e2:	68db      	ldr	r3, [r3, #12]
 80111e4:	1ad2      	subs	r2, r2, r3
 80111e6:	693b      	ldr	r3, [r7, #16]
 80111e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80111ea:	693b      	ldr	r3, [r7, #16]
 80111ec:	68da      	ldr	r2, [r3, #12]
 80111ee:	693b      	ldr	r3, [r7, #16]
 80111f0:	689b      	ldr	r3, [r3, #8]
 80111f2:	4293      	cmp	r3, r2
 80111f4:	bf28      	it	cs
 80111f6:	4613      	movcs	r3, r2
 80111f8:	461a      	mov	r2, r3
 80111fa:	6879      	ldr	r1, [r7, #4]
 80111fc:	68f8      	ldr	r0, [r7, #12]
 80111fe:	f001 f984 	bl	801250a <USBD_CtlContinueRx>
 8011202:	e07d      	b.n	8011300 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801120a:	f003 031f 	and.w	r3, r3, #31
 801120e:	2b02      	cmp	r3, #2
 8011210:	d014      	beq.n	801123c <USBD_LL_DataOutStage+0x98>
 8011212:	2b02      	cmp	r3, #2
 8011214:	d81d      	bhi.n	8011252 <USBD_LL_DataOutStage+0xae>
 8011216:	2b00      	cmp	r3, #0
 8011218:	d002      	beq.n	8011220 <USBD_LL_DataOutStage+0x7c>
 801121a:	2b01      	cmp	r3, #1
 801121c:	d003      	beq.n	8011226 <USBD_LL_DataOutStage+0x82>
 801121e:	e018      	b.n	8011252 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8011220:	2300      	movs	r3, #0
 8011222:	75bb      	strb	r3, [r7, #22]
            break;
 8011224:	e018      	b.n	8011258 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801122c:	b2db      	uxtb	r3, r3
 801122e:	4619      	mov	r1, r3
 8011230:	68f8      	ldr	r0, [r7, #12]
 8011232:	f000 fa5e 	bl	80116f2 <USBD_CoreFindIF>
 8011236:	4603      	mov	r3, r0
 8011238:	75bb      	strb	r3, [r7, #22]
            break;
 801123a:	e00d      	b.n	8011258 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8011242:	b2db      	uxtb	r3, r3
 8011244:	4619      	mov	r1, r3
 8011246:	68f8      	ldr	r0, [r7, #12]
 8011248:	f000 fa60 	bl	801170c <USBD_CoreFindEP>
 801124c:	4603      	mov	r3, r0
 801124e:	75bb      	strb	r3, [r7, #22]
            break;
 8011250:	e002      	b.n	8011258 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8011252:	2300      	movs	r3, #0
 8011254:	75bb      	strb	r3, [r7, #22]
            break;
 8011256:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8011258:	7dbb      	ldrb	r3, [r7, #22]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d119      	bne.n	8011292 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011264:	b2db      	uxtb	r3, r3
 8011266:	2b03      	cmp	r3, #3
 8011268:	d113      	bne.n	8011292 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801126a:	7dba      	ldrb	r2, [r7, #22]
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	32ae      	adds	r2, #174	; 0xae
 8011270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011274:	691b      	ldr	r3, [r3, #16]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d00b      	beq.n	8011292 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801127a:	7dba      	ldrb	r2, [r7, #22]
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8011282:	7dba      	ldrb	r2, [r7, #22]
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	32ae      	adds	r2, #174	; 0xae
 8011288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801128c:	691b      	ldr	r3, [r3, #16]
 801128e:	68f8      	ldr	r0, [r7, #12]
 8011290:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8011292:	68f8      	ldr	r0, [r7, #12]
 8011294:	f001 f94a 	bl	801252c <USBD_CtlSendStatus>
 8011298:	e032      	b.n	8011300 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801129a:	7afb      	ldrb	r3, [r7, #11]
 801129c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112a0:	b2db      	uxtb	r3, r3
 80112a2:	4619      	mov	r1, r3
 80112a4:	68f8      	ldr	r0, [r7, #12]
 80112a6:	f000 fa31 	bl	801170c <USBD_CoreFindEP>
 80112aa:	4603      	mov	r3, r0
 80112ac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80112ae:	7dbb      	ldrb	r3, [r7, #22]
 80112b0:	2bff      	cmp	r3, #255	; 0xff
 80112b2:	d025      	beq.n	8011300 <USBD_LL_DataOutStage+0x15c>
 80112b4:	7dbb      	ldrb	r3, [r7, #22]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d122      	bne.n	8011300 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80112c0:	b2db      	uxtb	r3, r3
 80112c2:	2b03      	cmp	r3, #3
 80112c4:	d117      	bne.n	80112f6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80112c6:	7dba      	ldrb	r2, [r7, #22]
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	32ae      	adds	r2, #174	; 0xae
 80112cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112d0:	699b      	ldr	r3, [r3, #24]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d00f      	beq.n	80112f6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80112d6:	7dba      	ldrb	r2, [r7, #22]
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80112de:	7dba      	ldrb	r2, [r7, #22]
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	32ae      	adds	r2, #174	; 0xae
 80112e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112e8:	699b      	ldr	r3, [r3, #24]
 80112ea:	7afa      	ldrb	r2, [r7, #11]
 80112ec:	4611      	mov	r1, r2
 80112ee:	68f8      	ldr	r0, [r7, #12]
 80112f0:	4798      	blx	r3
 80112f2:	4603      	mov	r3, r0
 80112f4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80112f6:	7dfb      	ldrb	r3, [r7, #23]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d001      	beq.n	8011300 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80112fc:	7dfb      	ldrb	r3, [r7, #23]
 80112fe:	e000      	b.n	8011302 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8011300:	2300      	movs	r3, #0
}
 8011302:	4618      	mov	r0, r3
 8011304:	3718      	adds	r7, #24
 8011306:	46bd      	mov	sp, r7
 8011308:	bd80      	pop	{r7, pc}

0801130a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801130a:	b580      	push	{r7, lr}
 801130c:	b086      	sub	sp, #24
 801130e:	af00      	add	r7, sp, #0
 8011310:	60f8      	str	r0, [r7, #12]
 8011312:	460b      	mov	r3, r1
 8011314:	607a      	str	r2, [r7, #4]
 8011316:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8011318:	7afb      	ldrb	r3, [r7, #11]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d16f      	bne.n	80113fe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	3314      	adds	r3, #20
 8011322:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801132a:	2b02      	cmp	r3, #2
 801132c:	d15a      	bne.n	80113e4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801132e:	693b      	ldr	r3, [r7, #16]
 8011330:	689a      	ldr	r2, [r3, #8]
 8011332:	693b      	ldr	r3, [r7, #16]
 8011334:	68db      	ldr	r3, [r3, #12]
 8011336:	429a      	cmp	r2, r3
 8011338:	d914      	bls.n	8011364 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801133a:	693b      	ldr	r3, [r7, #16]
 801133c:	689a      	ldr	r2, [r3, #8]
 801133e:	693b      	ldr	r3, [r7, #16]
 8011340:	68db      	ldr	r3, [r3, #12]
 8011342:	1ad2      	subs	r2, r2, r3
 8011344:	693b      	ldr	r3, [r7, #16]
 8011346:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011348:	693b      	ldr	r3, [r7, #16]
 801134a:	689b      	ldr	r3, [r3, #8]
 801134c:	461a      	mov	r2, r3
 801134e:	6879      	ldr	r1, [r7, #4]
 8011350:	68f8      	ldr	r0, [r7, #12]
 8011352:	f001 f8ac 	bl	80124ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011356:	2300      	movs	r3, #0
 8011358:	2200      	movs	r2, #0
 801135a:	2100      	movs	r1, #0
 801135c:	68f8      	ldr	r0, [r7, #12]
 801135e:	f001 fe4d 	bl	8012ffc <USBD_LL_PrepareReceive>
 8011362:	e03f      	b.n	80113e4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011364:	693b      	ldr	r3, [r7, #16]
 8011366:	68da      	ldr	r2, [r3, #12]
 8011368:	693b      	ldr	r3, [r7, #16]
 801136a:	689b      	ldr	r3, [r3, #8]
 801136c:	429a      	cmp	r2, r3
 801136e:	d11c      	bne.n	80113aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011370:	693b      	ldr	r3, [r7, #16]
 8011372:	685a      	ldr	r2, [r3, #4]
 8011374:	693b      	ldr	r3, [r7, #16]
 8011376:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011378:	429a      	cmp	r2, r3
 801137a:	d316      	bcc.n	80113aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801137c:	693b      	ldr	r3, [r7, #16]
 801137e:	685a      	ldr	r2, [r3, #4]
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011386:	429a      	cmp	r2, r3
 8011388:	d20f      	bcs.n	80113aa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801138a:	2200      	movs	r2, #0
 801138c:	2100      	movs	r1, #0
 801138e:	68f8      	ldr	r0, [r7, #12]
 8011390:	f001 f88d 	bl	80124ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	2200      	movs	r2, #0
 8011398:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801139c:	2300      	movs	r3, #0
 801139e:	2200      	movs	r2, #0
 80113a0:	2100      	movs	r1, #0
 80113a2:	68f8      	ldr	r0, [r7, #12]
 80113a4:	f001 fe2a 	bl	8012ffc <USBD_LL_PrepareReceive>
 80113a8:	e01c      	b.n	80113e4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80113b0:	b2db      	uxtb	r3, r3
 80113b2:	2b03      	cmp	r3, #3
 80113b4:	d10f      	bne.n	80113d6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113bc:	68db      	ldr	r3, [r3, #12]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d009      	beq.n	80113d6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	2200      	movs	r2, #0
 80113c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113d0:	68db      	ldr	r3, [r3, #12]
 80113d2:	68f8      	ldr	r0, [r7, #12]
 80113d4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80113d6:	2180      	movs	r1, #128	; 0x80
 80113d8:	68f8      	ldr	r0, [r7, #12]
 80113da:	f001 fd65 	bl	8012ea8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80113de:	68f8      	ldr	r0, [r7, #12]
 80113e0:	f001 f8b7 	bl	8012552 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d03a      	beq.n	8011464 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80113ee:	68f8      	ldr	r0, [r7, #12]
 80113f0:	f7ff fe42 	bl	8011078 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	2200      	movs	r2, #0
 80113f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80113fc:	e032      	b.n	8011464 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80113fe:	7afb      	ldrb	r3, [r7, #11]
 8011400:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011404:	b2db      	uxtb	r3, r3
 8011406:	4619      	mov	r1, r3
 8011408:	68f8      	ldr	r0, [r7, #12]
 801140a:	f000 f97f 	bl	801170c <USBD_CoreFindEP>
 801140e:	4603      	mov	r3, r0
 8011410:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011412:	7dfb      	ldrb	r3, [r7, #23]
 8011414:	2bff      	cmp	r3, #255	; 0xff
 8011416:	d025      	beq.n	8011464 <USBD_LL_DataInStage+0x15a>
 8011418:	7dfb      	ldrb	r3, [r7, #23]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d122      	bne.n	8011464 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011424:	b2db      	uxtb	r3, r3
 8011426:	2b03      	cmp	r3, #3
 8011428:	d11c      	bne.n	8011464 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801142a:	7dfa      	ldrb	r2, [r7, #23]
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	32ae      	adds	r2, #174	; 0xae
 8011430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011434:	695b      	ldr	r3, [r3, #20]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d014      	beq.n	8011464 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801143a:	7dfa      	ldrb	r2, [r7, #23]
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8011442:	7dfa      	ldrb	r2, [r7, #23]
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	32ae      	adds	r2, #174	; 0xae
 8011448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801144c:	695b      	ldr	r3, [r3, #20]
 801144e:	7afa      	ldrb	r2, [r7, #11]
 8011450:	4611      	mov	r1, r2
 8011452:	68f8      	ldr	r0, [r7, #12]
 8011454:	4798      	blx	r3
 8011456:	4603      	mov	r3, r0
 8011458:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801145a:	7dbb      	ldrb	r3, [r7, #22]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d001      	beq.n	8011464 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8011460:	7dbb      	ldrb	r3, [r7, #22]
 8011462:	e000      	b.n	8011466 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8011464:	2300      	movs	r3, #0
}
 8011466:	4618      	mov	r0, r3
 8011468:	3718      	adds	r7, #24
 801146a:	46bd      	mov	sp, r7
 801146c:	bd80      	pop	{r7, pc}

0801146e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801146e:	b580      	push	{r7, lr}
 8011470:	b084      	sub	sp, #16
 8011472:	af00      	add	r7, sp, #0
 8011474:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8011476:	2300      	movs	r3, #0
 8011478:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	2201      	movs	r2, #1
 801147e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	2200      	movs	r2, #0
 8011486:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	2200      	movs	r2, #0
 801148e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	2200      	movs	r2, #0
 8011494:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	2200      	movs	r2, #0
 801149c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d014      	beq.n	80114d4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114b0:	685b      	ldr	r3, [r3, #4]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d00e      	beq.n	80114d4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114bc:	685b      	ldr	r3, [r3, #4]
 80114be:	687a      	ldr	r2, [r7, #4]
 80114c0:	6852      	ldr	r2, [r2, #4]
 80114c2:	b2d2      	uxtb	r2, r2
 80114c4:	4611      	mov	r1, r2
 80114c6:	6878      	ldr	r0, [r7, #4]
 80114c8:	4798      	blx	r3
 80114ca:	4603      	mov	r3, r0
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d001      	beq.n	80114d4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80114d0:	2303      	movs	r3, #3
 80114d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80114d4:	2340      	movs	r3, #64	; 0x40
 80114d6:	2200      	movs	r2, #0
 80114d8:	2100      	movs	r1, #0
 80114da:	6878      	ldr	r0, [r7, #4]
 80114dc:	f001 fc9f 	bl	8012e1e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	2201      	movs	r2, #1
 80114e4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	2240      	movs	r2, #64	; 0x40
 80114ec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80114f0:	2340      	movs	r3, #64	; 0x40
 80114f2:	2200      	movs	r2, #0
 80114f4:	2180      	movs	r1, #128	; 0x80
 80114f6:	6878      	ldr	r0, [r7, #4]
 80114f8:	f001 fc91 	bl	8012e1e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	2201      	movs	r2, #1
 8011500:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	2240      	movs	r2, #64	; 0x40
 8011506:	621a      	str	r2, [r3, #32]

  return ret;
 8011508:	7bfb      	ldrb	r3, [r7, #15]
}
 801150a:	4618      	mov	r0, r3
 801150c:	3710      	adds	r7, #16
 801150e:	46bd      	mov	sp, r7
 8011510:	bd80      	pop	{r7, pc}

08011512 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011512:	b480      	push	{r7}
 8011514:	b083      	sub	sp, #12
 8011516:	af00      	add	r7, sp, #0
 8011518:	6078      	str	r0, [r7, #4]
 801151a:	460b      	mov	r3, r1
 801151c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	78fa      	ldrb	r2, [r7, #3]
 8011522:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011524:	2300      	movs	r3, #0
}
 8011526:	4618      	mov	r0, r3
 8011528:	370c      	adds	r7, #12
 801152a:	46bd      	mov	sp, r7
 801152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011530:	4770      	bx	lr

08011532 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011532:	b480      	push	{r7}
 8011534:	b083      	sub	sp, #12
 8011536:	af00      	add	r7, sp, #0
 8011538:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011540:	b2da      	uxtb	r2, r3
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	2204      	movs	r2, #4
 801154c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011550:	2300      	movs	r3, #0
}
 8011552:	4618      	mov	r0, r3
 8011554:	370c      	adds	r7, #12
 8011556:	46bd      	mov	sp, r7
 8011558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155c:	4770      	bx	lr

0801155e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801155e:	b480      	push	{r7}
 8011560:	b083      	sub	sp, #12
 8011562:	af00      	add	r7, sp, #0
 8011564:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801156c:	b2db      	uxtb	r3, r3
 801156e:	2b04      	cmp	r3, #4
 8011570:	d106      	bne.n	8011580 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8011578:	b2da      	uxtb	r2, r3
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011580:	2300      	movs	r3, #0
}
 8011582:	4618      	mov	r0, r3
 8011584:	370c      	adds	r7, #12
 8011586:	46bd      	mov	sp, r7
 8011588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158c:	4770      	bx	lr

0801158e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801158e:	b580      	push	{r7, lr}
 8011590:	b082      	sub	sp, #8
 8011592:	af00      	add	r7, sp, #0
 8011594:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801159c:	b2db      	uxtb	r3, r3
 801159e:	2b03      	cmp	r3, #3
 80115a0:	d110      	bne.n	80115c4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d00b      	beq.n	80115c4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115b2:	69db      	ldr	r3, [r3, #28]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d005      	beq.n	80115c4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115be:	69db      	ldr	r3, [r3, #28]
 80115c0:	6878      	ldr	r0, [r7, #4]
 80115c2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80115c4:	2300      	movs	r3, #0
}
 80115c6:	4618      	mov	r0, r3
 80115c8:	3708      	adds	r7, #8
 80115ca:	46bd      	mov	sp, r7
 80115cc:	bd80      	pop	{r7, pc}

080115ce <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80115ce:	b580      	push	{r7, lr}
 80115d0:	b082      	sub	sp, #8
 80115d2:	af00      	add	r7, sp, #0
 80115d4:	6078      	str	r0, [r7, #4]
 80115d6:	460b      	mov	r3, r1
 80115d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	32ae      	adds	r2, #174	; 0xae
 80115e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d101      	bne.n	80115f0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80115ec:	2303      	movs	r3, #3
 80115ee:	e01c      	b.n	801162a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80115f6:	b2db      	uxtb	r3, r3
 80115f8:	2b03      	cmp	r3, #3
 80115fa:	d115      	bne.n	8011628 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	32ae      	adds	r2, #174	; 0xae
 8011606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801160a:	6a1b      	ldr	r3, [r3, #32]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d00b      	beq.n	8011628 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	32ae      	adds	r2, #174	; 0xae
 801161a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801161e:	6a1b      	ldr	r3, [r3, #32]
 8011620:	78fa      	ldrb	r2, [r7, #3]
 8011622:	4611      	mov	r1, r2
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011628:	2300      	movs	r3, #0
}
 801162a:	4618      	mov	r0, r3
 801162c:	3708      	adds	r7, #8
 801162e:	46bd      	mov	sp, r7
 8011630:	bd80      	pop	{r7, pc}

08011632 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011632:	b580      	push	{r7, lr}
 8011634:	b082      	sub	sp, #8
 8011636:	af00      	add	r7, sp, #0
 8011638:	6078      	str	r0, [r7, #4]
 801163a:	460b      	mov	r3, r1
 801163c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	32ae      	adds	r2, #174	; 0xae
 8011648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d101      	bne.n	8011654 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8011650:	2303      	movs	r3, #3
 8011652:	e01c      	b.n	801168e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801165a:	b2db      	uxtb	r3, r3
 801165c:	2b03      	cmp	r3, #3
 801165e:	d115      	bne.n	801168c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	32ae      	adds	r2, #174	; 0xae
 801166a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801166e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011670:	2b00      	cmp	r3, #0
 8011672:	d00b      	beq.n	801168c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	32ae      	adds	r2, #174	; 0xae
 801167e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011684:	78fa      	ldrb	r2, [r7, #3]
 8011686:	4611      	mov	r1, r2
 8011688:	6878      	ldr	r0, [r7, #4]
 801168a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801168c:	2300      	movs	r3, #0
}
 801168e:	4618      	mov	r0, r3
 8011690:	3708      	adds	r7, #8
 8011692:	46bd      	mov	sp, r7
 8011694:	bd80      	pop	{r7, pc}

08011696 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011696:	b480      	push	{r7}
 8011698:	b083      	sub	sp, #12
 801169a:	af00      	add	r7, sp, #0
 801169c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801169e:	2300      	movs	r3, #0
}
 80116a0:	4618      	mov	r0, r3
 80116a2:	370c      	adds	r7, #12
 80116a4:	46bd      	mov	sp, r7
 80116a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116aa:	4770      	bx	lr

080116ac <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b084      	sub	sp, #16
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80116b4:	2300      	movs	r3, #0
 80116b6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	2201      	movs	r2, #1
 80116bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d00e      	beq.n	80116e8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116d0:	685b      	ldr	r3, [r3, #4]
 80116d2:	687a      	ldr	r2, [r7, #4]
 80116d4:	6852      	ldr	r2, [r2, #4]
 80116d6:	b2d2      	uxtb	r2, r2
 80116d8:	4611      	mov	r1, r2
 80116da:	6878      	ldr	r0, [r7, #4]
 80116dc:	4798      	blx	r3
 80116de:	4603      	mov	r3, r0
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d001      	beq.n	80116e8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80116e4:	2303      	movs	r3, #3
 80116e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80116e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80116ea:	4618      	mov	r0, r3
 80116ec:	3710      	adds	r7, #16
 80116ee:	46bd      	mov	sp, r7
 80116f0:	bd80      	pop	{r7, pc}

080116f2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80116f2:	b480      	push	{r7}
 80116f4:	b083      	sub	sp, #12
 80116f6:	af00      	add	r7, sp, #0
 80116f8:	6078      	str	r0, [r7, #4]
 80116fa:	460b      	mov	r3, r1
 80116fc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80116fe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011700:	4618      	mov	r0, r3
 8011702:	370c      	adds	r7, #12
 8011704:	46bd      	mov	sp, r7
 8011706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170a:	4770      	bx	lr

0801170c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801170c:	b480      	push	{r7}
 801170e:	b083      	sub	sp, #12
 8011710:	af00      	add	r7, sp, #0
 8011712:	6078      	str	r0, [r7, #4]
 8011714:	460b      	mov	r3, r1
 8011716:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011718:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801171a:	4618      	mov	r0, r3
 801171c:	370c      	adds	r7, #12
 801171e:	46bd      	mov	sp, r7
 8011720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011724:	4770      	bx	lr

08011726 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8011726:	b580      	push	{r7, lr}
 8011728:	b086      	sub	sp, #24
 801172a:	af00      	add	r7, sp, #0
 801172c:	6078      	str	r0, [r7, #4]
 801172e:	460b      	mov	r3, r1
 8011730:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801173a:	2300      	movs	r3, #0
 801173c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	885b      	ldrh	r3, [r3, #2]
 8011742:	b29a      	uxth	r2, r3
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	781b      	ldrb	r3, [r3, #0]
 8011748:	b29b      	uxth	r3, r3
 801174a:	429a      	cmp	r2, r3
 801174c:	d920      	bls.n	8011790 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	781b      	ldrb	r3, [r3, #0]
 8011752:	b29b      	uxth	r3, r3
 8011754:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8011756:	e013      	b.n	8011780 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8011758:	f107 030a 	add.w	r3, r7, #10
 801175c:	4619      	mov	r1, r3
 801175e:	6978      	ldr	r0, [r7, #20]
 8011760:	f000 f81b 	bl	801179a <USBD_GetNextDesc>
 8011764:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8011766:	697b      	ldr	r3, [r7, #20]
 8011768:	785b      	ldrb	r3, [r3, #1]
 801176a:	2b05      	cmp	r3, #5
 801176c:	d108      	bne.n	8011780 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801176e:	697b      	ldr	r3, [r7, #20]
 8011770:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8011772:	693b      	ldr	r3, [r7, #16]
 8011774:	789b      	ldrb	r3, [r3, #2]
 8011776:	78fa      	ldrb	r2, [r7, #3]
 8011778:	429a      	cmp	r2, r3
 801177a:	d008      	beq.n	801178e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801177c:	2300      	movs	r3, #0
 801177e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	885b      	ldrh	r3, [r3, #2]
 8011784:	b29a      	uxth	r2, r3
 8011786:	897b      	ldrh	r3, [r7, #10]
 8011788:	429a      	cmp	r2, r3
 801178a:	d8e5      	bhi.n	8011758 <USBD_GetEpDesc+0x32>
 801178c:	e000      	b.n	8011790 <USBD_GetEpDesc+0x6a>
          break;
 801178e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8011790:	693b      	ldr	r3, [r7, #16]
}
 8011792:	4618      	mov	r0, r3
 8011794:	3718      	adds	r7, #24
 8011796:	46bd      	mov	sp, r7
 8011798:	bd80      	pop	{r7, pc}

0801179a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801179a:	b480      	push	{r7}
 801179c:	b085      	sub	sp, #20
 801179e:	af00      	add	r7, sp, #0
 80117a0:	6078      	str	r0, [r7, #4]
 80117a2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80117a8:	683b      	ldr	r3, [r7, #0]
 80117aa:	881a      	ldrh	r2, [r3, #0]
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	781b      	ldrb	r3, [r3, #0]
 80117b0:	b29b      	uxth	r3, r3
 80117b2:	4413      	add	r3, r2
 80117b4:	b29a      	uxth	r2, r3
 80117b6:	683b      	ldr	r3, [r7, #0]
 80117b8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	781b      	ldrb	r3, [r3, #0]
 80117be:	461a      	mov	r2, r3
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	4413      	add	r3, r2
 80117c4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80117c6:	68fb      	ldr	r3, [r7, #12]
}
 80117c8:	4618      	mov	r0, r3
 80117ca:	3714      	adds	r7, #20
 80117cc:	46bd      	mov	sp, r7
 80117ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d2:	4770      	bx	lr

080117d4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80117d4:	b480      	push	{r7}
 80117d6:	b087      	sub	sp, #28
 80117d8:	af00      	add	r7, sp, #0
 80117da:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80117e0:	697b      	ldr	r3, [r7, #20]
 80117e2:	781b      	ldrb	r3, [r3, #0]
 80117e4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80117e6:	697b      	ldr	r3, [r7, #20]
 80117e8:	3301      	adds	r3, #1
 80117ea:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80117ec:	697b      	ldr	r3, [r7, #20]
 80117ee:	781b      	ldrb	r3, [r3, #0]
 80117f0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80117f2:	8a3b      	ldrh	r3, [r7, #16]
 80117f4:	021b      	lsls	r3, r3, #8
 80117f6:	b21a      	sxth	r2, r3
 80117f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80117fc:	4313      	orrs	r3, r2
 80117fe:	b21b      	sxth	r3, r3
 8011800:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011802:	89fb      	ldrh	r3, [r7, #14]
}
 8011804:	4618      	mov	r0, r3
 8011806:	371c      	adds	r7, #28
 8011808:	46bd      	mov	sp, r7
 801180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180e:	4770      	bx	lr

08011810 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011810:	b580      	push	{r7, lr}
 8011812:	b084      	sub	sp, #16
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
 8011818:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801181a:	2300      	movs	r3, #0
 801181c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801181e:	683b      	ldr	r3, [r7, #0]
 8011820:	781b      	ldrb	r3, [r3, #0]
 8011822:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011826:	2b40      	cmp	r3, #64	; 0x40
 8011828:	d005      	beq.n	8011836 <USBD_StdDevReq+0x26>
 801182a:	2b40      	cmp	r3, #64	; 0x40
 801182c:	d857      	bhi.n	80118de <USBD_StdDevReq+0xce>
 801182e:	2b00      	cmp	r3, #0
 8011830:	d00f      	beq.n	8011852 <USBD_StdDevReq+0x42>
 8011832:	2b20      	cmp	r3, #32
 8011834:	d153      	bne.n	80118de <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	32ae      	adds	r2, #174	; 0xae
 8011840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011844:	689b      	ldr	r3, [r3, #8]
 8011846:	6839      	ldr	r1, [r7, #0]
 8011848:	6878      	ldr	r0, [r7, #4]
 801184a:	4798      	blx	r3
 801184c:	4603      	mov	r3, r0
 801184e:	73fb      	strb	r3, [r7, #15]
      break;
 8011850:	e04a      	b.n	80118e8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011852:	683b      	ldr	r3, [r7, #0]
 8011854:	785b      	ldrb	r3, [r3, #1]
 8011856:	2b09      	cmp	r3, #9
 8011858:	d83b      	bhi.n	80118d2 <USBD_StdDevReq+0xc2>
 801185a:	a201      	add	r2, pc, #4	; (adr r2, 8011860 <USBD_StdDevReq+0x50>)
 801185c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011860:	080118b5 	.word	0x080118b5
 8011864:	080118c9 	.word	0x080118c9
 8011868:	080118d3 	.word	0x080118d3
 801186c:	080118bf 	.word	0x080118bf
 8011870:	080118d3 	.word	0x080118d3
 8011874:	08011893 	.word	0x08011893
 8011878:	08011889 	.word	0x08011889
 801187c:	080118d3 	.word	0x080118d3
 8011880:	080118ab 	.word	0x080118ab
 8011884:	0801189d 	.word	0x0801189d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011888:	6839      	ldr	r1, [r7, #0]
 801188a:	6878      	ldr	r0, [r7, #4]
 801188c:	f000 fa3c 	bl	8011d08 <USBD_GetDescriptor>
          break;
 8011890:	e024      	b.n	80118dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011892:	6839      	ldr	r1, [r7, #0]
 8011894:	6878      	ldr	r0, [r7, #4]
 8011896:	f000 fba1 	bl	8011fdc <USBD_SetAddress>
          break;
 801189a:	e01f      	b.n	80118dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801189c:	6839      	ldr	r1, [r7, #0]
 801189e:	6878      	ldr	r0, [r7, #4]
 80118a0:	f000 fbe0 	bl	8012064 <USBD_SetConfig>
 80118a4:	4603      	mov	r3, r0
 80118a6:	73fb      	strb	r3, [r7, #15]
          break;
 80118a8:	e018      	b.n	80118dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80118aa:	6839      	ldr	r1, [r7, #0]
 80118ac:	6878      	ldr	r0, [r7, #4]
 80118ae:	f000 fc83 	bl	80121b8 <USBD_GetConfig>
          break;
 80118b2:	e013      	b.n	80118dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80118b4:	6839      	ldr	r1, [r7, #0]
 80118b6:	6878      	ldr	r0, [r7, #4]
 80118b8:	f000 fcb4 	bl	8012224 <USBD_GetStatus>
          break;
 80118bc:	e00e      	b.n	80118dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80118be:	6839      	ldr	r1, [r7, #0]
 80118c0:	6878      	ldr	r0, [r7, #4]
 80118c2:	f000 fce3 	bl	801228c <USBD_SetFeature>
          break;
 80118c6:	e009      	b.n	80118dc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80118c8:	6839      	ldr	r1, [r7, #0]
 80118ca:	6878      	ldr	r0, [r7, #4]
 80118cc:	f000 fd07 	bl	80122de <USBD_ClrFeature>
          break;
 80118d0:	e004      	b.n	80118dc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80118d2:	6839      	ldr	r1, [r7, #0]
 80118d4:	6878      	ldr	r0, [r7, #4]
 80118d6:	f000 fd5e 	bl	8012396 <USBD_CtlError>
          break;
 80118da:	bf00      	nop
      }
      break;
 80118dc:	e004      	b.n	80118e8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80118de:	6839      	ldr	r1, [r7, #0]
 80118e0:	6878      	ldr	r0, [r7, #4]
 80118e2:	f000 fd58 	bl	8012396 <USBD_CtlError>
      break;
 80118e6:	bf00      	nop
  }

  return ret;
 80118e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80118ea:	4618      	mov	r0, r3
 80118ec:	3710      	adds	r7, #16
 80118ee:	46bd      	mov	sp, r7
 80118f0:	bd80      	pop	{r7, pc}
 80118f2:	bf00      	nop

080118f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b084      	sub	sp, #16
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
 80118fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80118fe:	2300      	movs	r3, #0
 8011900:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011902:	683b      	ldr	r3, [r7, #0]
 8011904:	781b      	ldrb	r3, [r3, #0]
 8011906:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801190a:	2b40      	cmp	r3, #64	; 0x40
 801190c:	d005      	beq.n	801191a <USBD_StdItfReq+0x26>
 801190e:	2b40      	cmp	r3, #64	; 0x40
 8011910:	d852      	bhi.n	80119b8 <USBD_StdItfReq+0xc4>
 8011912:	2b00      	cmp	r3, #0
 8011914:	d001      	beq.n	801191a <USBD_StdItfReq+0x26>
 8011916:	2b20      	cmp	r3, #32
 8011918:	d14e      	bne.n	80119b8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011920:	b2db      	uxtb	r3, r3
 8011922:	3b01      	subs	r3, #1
 8011924:	2b02      	cmp	r3, #2
 8011926:	d840      	bhi.n	80119aa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011928:	683b      	ldr	r3, [r7, #0]
 801192a:	889b      	ldrh	r3, [r3, #4]
 801192c:	b2db      	uxtb	r3, r3
 801192e:	2b01      	cmp	r3, #1
 8011930:	d836      	bhi.n	80119a0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8011932:	683b      	ldr	r3, [r7, #0]
 8011934:	889b      	ldrh	r3, [r3, #4]
 8011936:	b2db      	uxtb	r3, r3
 8011938:	4619      	mov	r1, r3
 801193a:	6878      	ldr	r0, [r7, #4]
 801193c:	f7ff fed9 	bl	80116f2 <USBD_CoreFindIF>
 8011940:	4603      	mov	r3, r0
 8011942:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011944:	7bbb      	ldrb	r3, [r7, #14]
 8011946:	2bff      	cmp	r3, #255	; 0xff
 8011948:	d01d      	beq.n	8011986 <USBD_StdItfReq+0x92>
 801194a:	7bbb      	ldrb	r3, [r7, #14]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d11a      	bne.n	8011986 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8011950:	7bba      	ldrb	r2, [r7, #14]
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	32ae      	adds	r2, #174	; 0xae
 8011956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801195a:	689b      	ldr	r3, [r3, #8]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d00f      	beq.n	8011980 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8011960:	7bba      	ldrb	r2, [r7, #14]
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011968:	7bba      	ldrb	r2, [r7, #14]
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	32ae      	adds	r2, #174	; 0xae
 801196e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011972:	689b      	ldr	r3, [r3, #8]
 8011974:	6839      	ldr	r1, [r7, #0]
 8011976:	6878      	ldr	r0, [r7, #4]
 8011978:	4798      	blx	r3
 801197a:	4603      	mov	r3, r0
 801197c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801197e:	e004      	b.n	801198a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8011980:	2303      	movs	r3, #3
 8011982:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011984:	e001      	b.n	801198a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8011986:	2303      	movs	r3, #3
 8011988:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801198a:	683b      	ldr	r3, [r7, #0]
 801198c:	88db      	ldrh	r3, [r3, #6]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d110      	bne.n	80119b4 <USBD_StdItfReq+0xc0>
 8011992:	7bfb      	ldrb	r3, [r7, #15]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d10d      	bne.n	80119b4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011998:	6878      	ldr	r0, [r7, #4]
 801199a:	f000 fdc7 	bl	801252c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801199e:	e009      	b.n	80119b4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80119a0:	6839      	ldr	r1, [r7, #0]
 80119a2:	6878      	ldr	r0, [r7, #4]
 80119a4:	f000 fcf7 	bl	8012396 <USBD_CtlError>
          break;
 80119a8:	e004      	b.n	80119b4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80119aa:	6839      	ldr	r1, [r7, #0]
 80119ac:	6878      	ldr	r0, [r7, #4]
 80119ae:	f000 fcf2 	bl	8012396 <USBD_CtlError>
          break;
 80119b2:	e000      	b.n	80119b6 <USBD_StdItfReq+0xc2>
          break;
 80119b4:	bf00      	nop
      }
      break;
 80119b6:	e004      	b.n	80119c2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80119b8:	6839      	ldr	r1, [r7, #0]
 80119ba:	6878      	ldr	r0, [r7, #4]
 80119bc:	f000 fceb 	bl	8012396 <USBD_CtlError>
      break;
 80119c0:	bf00      	nop
  }

  return ret;
 80119c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80119c4:	4618      	mov	r0, r3
 80119c6:	3710      	adds	r7, #16
 80119c8:	46bd      	mov	sp, r7
 80119ca:	bd80      	pop	{r7, pc}

080119cc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b084      	sub	sp, #16
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	6078      	str	r0, [r7, #4]
 80119d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80119d6:	2300      	movs	r3, #0
 80119d8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80119da:	683b      	ldr	r3, [r7, #0]
 80119dc:	889b      	ldrh	r3, [r3, #4]
 80119de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80119e0:	683b      	ldr	r3, [r7, #0]
 80119e2:	781b      	ldrb	r3, [r3, #0]
 80119e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80119e8:	2b40      	cmp	r3, #64	; 0x40
 80119ea:	d007      	beq.n	80119fc <USBD_StdEPReq+0x30>
 80119ec:	2b40      	cmp	r3, #64	; 0x40
 80119ee:	f200 817f 	bhi.w	8011cf0 <USBD_StdEPReq+0x324>
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d02a      	beq.n	8011a4c <USBD_StdEPReq+0x80>
 80119f6:	2b20      	cmp	r3, #32
 80119f8:	f040 817a 	bne.w	8011cf0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80119fc:	7bbb      	ldrb	r3, [r7, #14]
 80119fe:	4619      	mov	r1, r3
 8011a00:	6878      	ldr	r0, [r7, #4]
 8011a02:	f7ff fe83 	bl	801170c <USBD_CoreFindEP>
 8011a06:	4603      	mov	r3, r0
 8011a08:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011a0a:	7b7b      	ldrb	r3, [r7, #13]
 8011a0c:	2bff      	cmp	r3, #255	; 0xff
 8011a0e:	f000 8174 	beq.w	8011cfa <USBD_StdEPReq+0x32e>
 8011a12:	7b7b      	ldrb	r3, [r7, #13]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	f040 8170 	bne.w	8011cfa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8011a1a:	7b7a      	ldrb	r2, [r7, #13]
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8011a22:	7b7a      	ldrb	r2, [r7, #13]
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	32ae      	adds	r2, #174	; 0xae
 8011a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a2c:	689b      	ldr	r3, [r3, #8]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	f000 8163 	beq.w	8011cfa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8011a34:	7b7a      	ldrb	r2, [r7, #13]
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	32ae      	adds	r2, #174	; 0xae
 8011a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a3e:	689b      	ldr	r3, [r3, #8]
 8011a40:	6839      	ldr	r1, [r7, #0]
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	4798      	blx	r3
 8011a46:	4603      	mov	r3, r0
 8011a48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8011a4a:	e156      	b.n	8011cfa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011a4c:	683b      	ldr	r3, [r7, #0]
 8011a4e:	785b      	ldrb	r3, [r3, #1]
 8011a50:	2b03      	cmp	r3, #3
 8011a52:	d008      	beq.n	8011a66 <USBD_StdEPReq+0x9a>
 8011a54:	2b03      	cmp	r3, #3
 8011a56:	f300 8145 	bgt.w	8011ce4 <USBD_StdEPReq+0x318>
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	f000 809b 	beq.w	8011b96 <USBD_StdEPReq+0x1ca>
 8011a60:	2b01      	cmp	r3, #1
 8011a62:	d03c      	beq.n	8011ade <USBD_StdEPReq+0x112>
 8011a64:	e13e      	b.n	8011ce4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a6c:	b2db      	uxtb	r3, r3
 8011a6e:	2b02      	cmp	r3, #2
 8011a70:	d002      	beq.n	8011a78 <USBD_StdEPReq+0xac>
 8011a72:	2b03      	cmp	r3, #3
 8011a74:	d016      	beq.n	8011aa4 <USBD_StdEPReq+0xd8>
 8011a76:	e02c      	b.n	8011ad2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011a78:	7bbb      	ldrb	r3, [r7, #14]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d00d      	beq.n	8011a9a <USBD_StdEPReq+0xce>
 8011a7e:	7bbb      	ldrb	r3, [r7, #14]
 8011a80:	2b80      	cmp	r3, #128	; 0x80
 8011a82:	d00a      	beq.n	8011a9a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011a84:	7bbb      	ldrb	r3, [r7, #14]
 8011a86:	4619      	mov	r1, r3
 8011a88:	6878      	ldr	r0, [r7, #4]
 8011a8a:	f001 fa0d 	bl	8012ea8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011a8e:	2180      	movs	r1, #128	; 0x80
 8011a90:	6878      	ldr	r0, [r7, #4]
 8011a92:	f001 fa09 	bl	8012ea8 <USBD_LL_StallEP>
 8011a96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011a98:	e020      	b.n	8011adc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8011a9a:	6839      	ldr	r1, [r7, #0]
 8011a9c:	6878      	ldr	r0, [r7, #4]
 8011a9e:	f000 fc7a 	bl	8012396 <USBD_CtlError>
              break;
 8011aa2:	e01b      	b.n	8011adc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011aa4:	683b      	ldr	r3, [r7, #0]
 8011aa6:	885b      	ldrh	r3, [r3, #2]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d10e      	bne.n	8011aca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011aac:	7bbb      	ldrb	r3, [r7, #14]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d00b      	beq.n	8011aca <USBD_StdEPReq+0xfe>
 8011ab2:	7bbb      	ldrb	r3, [r7, #14]
 8011ab4:	2b80      	cmp	r3, #128	; 0x80
 8011ab6:	d008      	beq.n	8011aca <USBD_StdEPReq+0xfe>
 8011ab8:	683b      	ldr	r3, [r7, #0]
 8011aba:	88db      	ldrh	r3, [r3, #6]
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d104      	bne.n	8011aca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011ac0:	7bbb      	ldrb	r3, [r7, #14]
 8011ac2:	4619      	mov	r1, r3
 8011ac4:	6878      	ldr	r0, [r7, #4]
 8011ac6:	f001 f9ef 	bl	8012ea8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011aca:	6878      	ldr	r0, [r7, #4]
 8011acc:	f000 fd2e 	bl	801252c <USBD_CtlSendStatus>

              break;
 8011ad0:	e004      	b.n	8011adc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8011ad2:	6839      	ldr	r1, [r7, #0]
 8011ad4:	6878      	ldr	r0, [r7, #4]
 8011ad6:	f000 fc5e 	bl	8012396 <USBD_CtlError>
              break;
 8011ada:	bf00      	nop
          }
          break;
 8011adc:	e107      	b.n	8011cee <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ae4:	b2db      	uxtb	r3, r3
 8011ae6:	2b02      	cmp	r3, #2
 8011ae8:	d002      	beq.n	8011af0 <USBD_StdEPReq+0x124>
 8011aea:	2b03      	cmp	r3, #3
 8011aec:	d016      	beq.n	8011b1c <USBD_StdEPReq+0x150>
 8011aee:	e04b      	b.n	8011b88 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011af0:	7bbb      	ldrb	r3, [r7, #14]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d00d      	beq.n	8011b12 <USBD_StdEPReq+0x146>
 8011af6:	7bbb      	ldrb	r3, [r7, #14]
 8011af8:	2b80      	cmp	r3, #128	; 0x80
 8011afa:	d00a      	beq.n	8011b12 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011afc:	7bbb      	ldrb	r3, [r7, #14]
 8011afe:	4619      	mov	r1, r3
 8011b00:	6878      	ldr	r0, [r7, #4]
 8011b02:	f001 f9d1 	bl	8012ea8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011b06:	2180      	movs	r1, #128	; 0x80
 8011b08:	6878      	ldr	r0, [r7, #4]
 8011b0a:	f001 f9cd 	bl	8012ea8 <USBD_LL_StallEP>
 8011b0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011b10:	e040      	b.n	8011b94 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8011b12:	6839      	ldr	r1, [r7, #0]
 8011b14:	6878      	ldr	r0, [r7, #4]
 8011b16:	f000 fc3e 	bl	8012396 <USBD_CtlError>
              break;
 8011b1a:	e03b      	b.n	8011b94 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011b1c:	683b      	ldr	r3, [r7, #0]
 8011b1e:	885b      	ldrh	r3, [r3, #2]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d136      	bne.n	8011b92 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011b24:	7bbb      	ldrb	r3, [r7, #14]
 8011b26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d004      	beq.n	8011b38 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011b2e:	7bbb      	ldrb	r3, [r7, #14]
 8011b30:	4619      	mov	r1, r3
 8011b32:	6878      	ldr	r0, [r7, #4]
 8011b34:	f001 f9d7 	bl	8012ee6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011b38:	6878      	ldr	r0, [r7, #4]
 8011b3a:	f000 fcf7 	bl	801252c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8011b3e:	7bbb      	ldrb	r3, [r7, #14]
 8011b40:	4619      	mov	r1, r3
 8011b42:	6878      	ldr	r0, [r7, #4]
 8011b44:	f7ff fde2 	bl	801170c <USBD_CoreFindEP>
 8011b48:	4603      	mov	r3, r0
 8011b4a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011b4c:	7b7b      	ldrb	r3, [r7, #13]
 8011b4e:	2bff      	cmp	r3, #255	; 0xff
 8011b50:	d01f      	beq.n	8011b92 <USBD_StdEPReq+0x1c6>
 8011b52:	7b7b      	ldrb	r3, [r7, #13]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d11c      	bne.n	8011b92 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8011b58:	7b7a      	ldrb	r2, [r7, #13]
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8011b60:	7b7a      	ldrb	r2, [r7, #13]
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	32ae      	adds	r2, #174	; 0xae
 8011b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b6a:	689b      	ldr	r3, [r3, #8]
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d010      	beq.n	8011b92 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011b70:	7b7a      	ldrb	r2, [r7, #13]
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	32ae      	adds	r2, #174	; 0xae
 8011b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b7a:	689b      	ldr	r3, [r3, #8]
 8011b7c:	6839      	ldr	r1, [r7, #0]
 8011b7e:	6878      	ldr	r0, [r7, #4]
 8011b80:	4798      	blx	r3
 8011b82:	4603      	mov	r3, r0
 8011b84:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8011b86:	e004      	b.n	8011b92 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8011b88:	6839      	ldr	r1, [r7, #0]
 8011b8a:	6878      	ldr	r0, [r7, #4]
 8011b8c:	f000 fc03 	bl	8012396 <USBD_CtlError>
              break;
 8011b90:	e000      	b.n	8011b94 <USBD_StdEPReq+0x1c8>
              break;
 8011b92:	bf00      	nop
          }
          break;
 8011b94:	e0ab      	b.n	8011cee <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b9c:	b2db      	uxtb	r3, r3
 8011b9e:	2b02      	cmp	r3, #2
 8011ba0:	d002      	beq.n	8011ba8 <USBD_StdEPReq+0x1dc>
 8011ba2:	2b03      	cmp	r3, #3
 8011ba4:	d032      	beq.n	8011c0c <USBD_StdEPReq+0x240>
 8011ba6:	e097      	b.n	8011cd8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011ba8:	7bbb      	ldrb	r3, [r7, #14]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d007      	beq.n	8011bbe <USBD_StdEPReq+0x1f2>
 8011bae:	7bbb      	ldrb	r3, [r7, #14]
 8011bb0:	2b80      	cmp	r3, #128	; 0x80
 8011bb2:	d004      	beq.n	8011bbe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011bb4:	6839      	ldr	r1, [r7, #0]
 8011bb6:	6878      	ldr	r0, [r7, #4]
 8011bb8:	f000 fbed 	bl	8012396 <USBD_CtlError>
                break;
 8011bbc:	e091      	b.n	8011ce2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011bbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	da0b      	bge.n	8011bde <USBD_StdEPReq+0x212>
 8011bc6:	7bbb      	ldrb	r3, [r7, #14]
 8011bc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011bcc:	4613      	mov	r3, r2
 8011bce:	009b      	lsls	r3, r3, #2
 8011bd0:	4413      	add	r3, r2
 8011bd2:	009b      	lsls	r3, r3, #2
 8011bd4:	3310      	adds	r3, #16
 8011bd6:	687a      	ldr	r2, [r7, #4]
 8011bd8:	4413      	add	r3, r2
 8011bda:	3304      	adds	r3, #4
 8011bdc:	e00b      	b.n	8011bf6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011bde:	7bbb      	ldrb	r3, [r7, #14]
 8011be0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011be4:	4613      	mov	r3, r2
 8011be6:	009b      	lsls	r3, r3, #2
 8011be8:	4413      	add	r3, r2
 8011bea:	009b      	lsls	r3, r3, #2
 8011bec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011bf0:	687a      	ldr	r2, [r7, #4]
 8011bf2:	4413      	add	r3, r2
 8011bf4:	3304      	adds	r3, #4
 8011bf6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011bf8:	68bb      	ldr	r3, [r7, #8]
 8011bfa:	2200      	movs	r2, #0
 8011bfc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011bfe:	68bb      	ldr	r3, [r7, #8]
 8011c00:	2202      	movs	r2, #2
 8011c02:	4619      	mov	r1, r3
 8011c04:	6878      	ldr	r0, [r7, #4]
 8011c06:	f000 fc37 	bl	8012478 <USBD_CtlSendData>
              break;
 8011c0a:	e06a      	b.n	8011ce2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011c0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	da11      	bge.n	8011c38 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011c14:	7bbb      	ldrb	r3, [r7, #14]
 8011c16:	f003 020f 	and.w	r2, r3, #15
 8011c1a:	6879      	ldr	r1, [r7, #4]
 8011c1c:	4613      	mov	r3, r2
 8011c1e:	009b      	lsls	r3, r3, #2
 8011c20:	4413      	add	r3, r2
 8011c22:	009b      	lsls	r3, r3, #2
 8011c24:	440b      	add	r3, r1
 8011c26:	3324      	adds	r3, #36	; 0x24
 8011c28:	881b      	ldrh	r3, [r3, #0]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d117      	bne.n	8011c5e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011c2e:	6839      	ldr	r1, [r7, #0]
 8011c30:	6878      	ldr	r0, [r7, #4]
 8011c32:	f000 fbb0 	bl	8012396 <USBD_CtlError>
                  break;
 8011c36:	e054      	b.n	8011ce2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011c38:	7bbb      	ldrb	r3, [r7, #14]
 8011c3a:	f003 020f 	and.w	r2, r3, #15
 8011c3e:	6879      	ldr	r1, [r7, #4]
 8011c40:	4613      	mov	r3, r2
 8011c42:	009b      	lsls	r3, r3, #2
 8011c44:	4413      	add	r3, r2
 8011c46:	009b      	lsls	r3, r3, #2
 8011c48:	440b      	add	r3, r1
 8011c4a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011c4e:	881b      	ldrh	r3, [r3, #0]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d104      	bne.n	8011c5e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011c54:	6839      	ldr	r1, [r7, #0]
 8011c56:	6878      	ldr	r0, [r7, #4]
 8011c58:	f000 fb9d 	bl	8012396 <USBD_CtlError>
                  break;
 8011c5c:	e041      	b.n	8011ce2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011c5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	da0b      	bge.n	8011c7e <USBD_StdEPReq+0x2b2>
 8011c66:	7bbb      	ldrb	r3, [r7, #14]
 8011c68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011c6c:	4613      	mov	r3, r2
 8011c6e:	009b      	lsls	r3, r3, #2
 8011c70:	4413      	add	r3, r2
 8011c72:	009b      	lsls	r3, r3, #2
 8011c74:	3310      	adds	r3, #16
 8011c76:	687a      	ldr	r2, [r7, #4]
 8011c78:	4413      	add	r3, r2
 8011c7a:	3304      	adds	r3, #4
 8011c7c:	e00b      	b.n	8011c96 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011c7e:	7bbb      	ldrb	r3, [r7, #14]
 8011c80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011c84:	4613      	mov	r3, r2
 8011c86:	009b      	lsls	r3, r3, #2
 8011c88:	4413      	add	r3, r2
 8011c8a:	009b      	lsls	r3, r3, #2
 8011c8c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011c90:	687a      	ldr	r2, [r7, #4]
 8011c92:	4413      	add	r3, r2
 8011c94:	3304      	adds	r3, #4
 8011c96:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011c98:	7bbb      	ldrb	r3, [r7, #14]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d002      	beq.n	8011ca4 <USBD_StdEPReq+0x2d8>
 8011c9e:	7bbb      	ldrb	r3, [r7, #14]
 8011ca0:	2b80      	cmp	r3, #128	; 0x80
 8011ca2:	d103      	bne.n	8011cac <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8011ca4:	68bb      	ldr	r3, [r7, #8]
 8011ca6:	2200      	movs	r2, #0
 8011ca8:	601a      	str	r2, [r3, #0]
 8011caa:	e00e      	b.n	8011cca <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011cac:	7bbb      	ldrb	r3, [r7, #14]
 8011cae:	4619      	mov	r1, r3
 8011cb0:	6878      	ldr	r0, [r7, #4]
 8011cb2:	f001 f937 	bl	8012f24 <USBD_LL_IsStallEP>
 8011cb6:	4603      	mov	r3, r0
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d003      	beq.n	8011cc4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8011cbc:	68bb      	ldr	r3, [r7, #8]
 8011cbe:	2201      	movs	r2, #1
 8011cc0:	601a      	str	r2, [r3, #0]
 8011cc2:	e002      	b.n	8011cca <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8011cc4:	68bb      	ldr	r3, [r7, #8]
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011cca:	68bb      	ldr	r3, [r7, #8]
 8011ccc:	2202      	movs	r2, #2
 8011cce:	4619      	mov	r1, r3
 8011cd0:	6878      	ldr	r0, [r7, #4]
 8011cd2:	f000 fbd1 	bl	8012478 <USBD_CtlSendData>
              break;
 8011cd6:	e004      	b.n	8011ce2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8011cd8:	6839      	ldr	r1, [r7, #0]
 8011cda:	6878      	ldr	r0, [r7, #4]
 8011cdc:	f000 fb5b 	bl	8012396 <USBD_CtlError>
              break;
 8011ce0:	bf00      	nop
          }
          break;
 8011ce2:	e004      	b.n	8011cee <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8011ce4:	6839      	ldr	r1, [r7, #0]
 8011ce6:	6878      	ldr	r0, [r7, #4]
 8011ce8:	f000 fb55 	bl	8012396 <USBD_CtlError>
          break;
 8011cec:	bf00      	nop
      }
      break;
 8011cee:	e005      	b.n	8011cfc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8011cf0:	6839      	ldr	r1, [r7, #0]
 8011cf2:	6878      	ldr	r0, [r7, #4]
 8011cf4:	f000 fb4f 	bl	8012396 <USBD_CtlError>
      break;
 8011cf8:	e000      	b.n	8011cfc <USBD_StdEPReq+0x330>
      break;
 8011cfa:	bf00      	nop
  }

  return ret;
 8011cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cfe:	4618      	mov	r0, r3
 8011d00:	3710      	adds	r7, #16
 8011d02:	46bd      	mov	sp, r7
 8011d04:	bd80      	pop	{r7, pc}
	...

08011d08 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b084      	sub	sp, #16
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	6078      	str	r0, [r7, #4]
 8011d10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011d12:	2300      	movs	r3, #0
 8011d14:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011d16:	2300      	movs	r3, #0
 8011d18:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011d1e:	683b      	ldr	r3, [r7, #0]
 8011d20:	885b      	ldrh	r3, [r3, #2]
 8011d22:	0a1b      	lsrs	r3, r3, #8
 8011d24:	b29b      	uxth	r3, r3
 8011d26:	3b01      	subs	r3, #1
 8011d28:	2b06      	cmp	r3, #6
 8011d2a:	f200 8128 	bhi.w	8011f7e <USBD_GetDescriptor+0x276>
 8011d2e:	a201      	add	r2, pc, #4	; (adr r2, 8011d34 <USBD_GetDescriptor+0x2c>)
 8011d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d34:	08011d51 	.word	0x08011d51
 8011d38:	08011d69 	.word	0x08011d69
 8011d3c:	08011da9 	.word	0x08011da9
 8011d40:	08011f7f 	.word	0x08011f7f
 8011d44:	08011f7f 	.word	0x08011f7f
 8011d48:	08011f1f 	.word	0x08011f1f
 8011d4c:	08011f4b 	.word	0x08011f4b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	687a      	ldr	r2, [r7, #4]
 8011d5a:	7c12      	ldrb	r2, [r2, #16]
 8011d5c:	f107 0108 	add.w	r1, r7, #8
 8011d60:	4610      	mov	r0, r2
 8011d62:	4798      	blx	r3
 8011d64:	60f8      	str	r0, [r7, #12]
      break;
 8011d66:	e112      	b.n	8011f8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	7c1b      	ldrb	r3, [r3, #16]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d10d      	bne.n	8011d8c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d78:	f107 0208 	add.w	r2, r7, #8
 8011d7c:	4610      	mov	r0, r2
 8011d7e:	4798      	blx	r3
 8011d80:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	3301      	adds	r3, #1
 8011d86:	2202      	movs	r2, #2
 8011d88:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011d8a:	e100      	b.n	8011f8e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d94:	f107 0208 	add.w	r2, r7, #8
 8011d98:	4610      	mov	r0, r2
 8011d9a:	4798      	blx	r3
 8011d9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	3301      	adds	r3, #1
 8011da2:	2202      	movs	r2, #2
 8011da4:	701a      	strb	r2, [r3, #0]
      break;
 8011da6:	e0f2      	b.n	8011f8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011da8:	683b      	ldr	r3, [r7, #0]
 8011daa:	885b      	ldrh	r3, [r3, #2]
 8011dac:	b2db      	uxtb	r3, r3
 8011dae:	2b05      	cmp	r3, #5
 8011db0:	f200 80ac 	bhi.w	8011f0c <USBD_GetDescriptor+0x204>
 8011db4:	a201      	add	r2, pc, #4	; (adr r2, 8011dbc <USBD_GetDescriptor+0xb4>)
 8011db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dba:	bf00      	nop
 8011dbc:	08011dd5 	.word	0x08011dd5
 8011dc0:	08011e09 	.word	0x08011e09
 8011dc4:	08011e3d 	.word	0x08011e3d
 8011dc8:	08011e71 	.word	0x08011e71
 8011dcc:	08011ea5 	.word	0x08011ea5
 8011dd0:	08011ed9 	.word	0x08011ed9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011dda:	685b      	ldr	r3, [r3, #4]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d00b      	beq.n	8011df8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011de6:	685b      	ldr	r3, [r3, #4]
 8011de8:	687a      	ldr	r2, [r7, #4]
 8011dea:	7c12      	ldrb	r2, [r2, #16]
 8011dec:	f107 0108 	add.w	r1, r7, #8
 8011df0:	4610      	mov	r0, r2
 8011df2:	4798      	blx	r3
 8011df4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011df6:	e091      	b.n	8011f1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011df8:	6839      	ldr	r1, [r7, #0]
 8011dfa:	6878      	ldr	r0, [r7, #4]
 8011dfc:	f000 facb 	bl	8012396 <USBD_CtlError>
            err++;
 8011e00:	7afb      	ldrb	r3, [r7, #11]
 8011e02:	3301      	adds	r3, #1
 8011e04:	72fb      	strb	r3, [r7, #11]
          break;
 8011e06:	e089      	b.n	8011f1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e0e:	689b      	ldr	r3, [r3, #8]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d00b      	beq.n	8011e2c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e1a:	689b      	ldr	r3, [r3, #8]
 8011e1c:	687a      	ldr	r2, [r7, #4]
 8011e1e:	7c12      	ldrb	r2, [r2, #16]
 8011e20:	f107 0108 	add.w	r1, r7, #8
 8011e24:	4610      	mov	r0, r2
 8011e26:	4798      	blx	r3
 8011e28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011e2a:	e077      	b.n	8011f1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011e2c:	6839      	ldr	r1, [r7, #0]
 8011e2e:	6878      	ldr	r0, [r7, #4]
 8011e30:	f000 fab1 	bl	8012396 <USBD_CtlError>
            err++;
 8011e34:	7afb      	ldrb	r3, [r7, #11]
 8011e36:	3301      	adds	r3, #1
 8011e38:	72fb      	strb	r3, [r7, #11]
          break;
 8011e3a:	e06f      	b.n	8011f1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e42:	68db      	ldr	r3, [r3, #12]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d00b      	beq.n	8011e60 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e4e:	68db      	ldr	r3, [r3, #12]
 8011e50:	687a      	ldr	r2, [r7, #4]
 8011e52:	7c12      	ldrb	r2, [r2, #16]
 8011e54:	f107 0108 	add.w	r1, r7, #8
 8011e58:	4610      	mov	r0, r2
 8011e5a:	4798      	blx	r3
 8011e5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011e5e:	e05d      	b.n	8011f1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011e60:	6839      	ldr	r1, [r7, #0]
 8011e62:	6878      	ldr	r0, [r7, #4]
 8011e64:	f000 fa97 	bl	8012396 <USBD_CtlError>
            err++;
 8011e68:	7afb      	ldrb	r3, [r7, #11]
 8011e6a:	3301      	adds	r3, #1
 8011e6c:	72fb      	strb	r3, [r7, #11]
          break;
 8011e6e:	e055      	b.n	8011f1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e76:	691b      	ldr	r3, [r3, #16]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d00b      	beq.n	8011e94 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e82:	691b      	ldr	r3, [r3, #16]
 8011e84:	687a      	ldr	r2, [r7, #4]
 8011e86:	7c12      	ldrb	r2, [r2, #16]
 8011e88:	f107 0108 	add.w	r1, r7, #8
 8011e8c:	4610      	mov	r0, r2
 8011e8e:	4798      	blx	r3
 8011e90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011e92:	e043      	b.n	8011f1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011e94:	6839      	ldr	r1, [r7, #0]
 8011e96:	6878      	ldr	r0, [r7, #4]
 8011e98:	f000 fa7d 	bl	8012396 <USBD_CtlError>
            err++;
 8011e9c:	7afb      	ldrb	r3, [r7, #11]
 8011e9e:	3301      	adds	r3, #1
 8011ea0:	72fb      	strb	r3, [r7, #11]
          break;
 8011ea2:	e03b      	b.n	8011f1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011eaa:	695b      	ldr	r3, [r3, #20]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d00b      	beq.n	8011ec8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011eb6:	695b      	ldr	r3, [r3, #20]
 8011eb8:	687a      	ldr	r2, [r7, #4]
 8011eba:	7c12      	ldrb	r2, [r2, #16]
 8011ebc:	f107 0108 	add.w	r1, r7, #8
 8011ec0:	4610      	mov	r0, r2
 8011ec2:	4798      	blx	r3
 8011ec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011ec6:	e029      	b.n	8011f1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011ec8:	6839      	ldr	r1, [r7, #0]
 8011eca:	6878      	ldr	r0, [r7, #4]
 8011ecc:	f000 fa63 	bl	8012396 <USBD_CtlError>
            err++;
 8011ed0:	7afb      	ldrb	r3, [r7, #11]
 8011ed2:	3301      	adds	r3, #1
 8011ed4:	72fb      	strb	r3, [r7, #11]
          break;
 8011ed6:	e021      	b.n	8011f1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ede:	699b      	ldr	r3, [r3, #24]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d00b      	beq.n	8011efc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011eea:	699b      	ldr	r3, [r3, #24]
 8011eec:	687a      	ldr	r2, [r7, #4]
 8011eee:	7c12      	ldrb	r2, [r2, #16]
 8011ef0:	f107 0108 	add.w	r1, r7, #8
 8011ef4:	4610      	mov	r0, r2
 8011ef6:	4798      	blx	r3
 8011ef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011efa:	e00f      	b.n	8011f1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011efc:	6839      	ldr	r1, [r7, #0]
 8011efe:	6878      	ldr	r0, [r7, #4]
 8011f00:	f000 fa49 	bl	8012396 <USBD_CtlError>
            err++;
 8011f04:	7afb      	ldrb	r3, [r7, #11]
 8011f06:	3301      	adds	r3, #1
 8011f08:	72fb      	strb	r3, [r7, #11]
          break;
 8011f0a:	e007      	b.n	8011f1c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011f0c:	6839      	ldr	r1, [r7, #0]
 8011f0e:	6878      	ldr	r0, [r7, #4]
 8011f10:	f000 fa41 	bl	8012396 <USBD_CtlError>
          err++;
 8011f14:	7afb      	ldrb	r3, [r7, #11]
 8011f16:	3301      	adds	r3, #1
 8011f18:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8011f1a:	bf00      	nop
      }
      break;
 8011f1c:	e037      	b.n	8011f8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	7c1b      	ldrb	r3, [r3, #16]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d109      	bne.n	8011f3a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f2e:	f107 0208 	add.w	r2, r7, #8
 8011f32:	4610      	mov	r0, r2
 8011f34:	4798      	blx	r3
 8011f36:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011f38:	e029      	b.n	8011f8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011f3a:	6839      	ldr	r1, [r7, #0]
 8011f3c:	6878      	ldr	r0, [r7, #4]
 8011f3e:	f000 fa2a 	bl	8012396 <USBD_CtlError>
        err++;
 8011f42:	7afb      	ldrb	r3, [r7, #11]
 8011f44:	3301      	adds	r3, #1
 8011f46:	72fb      	strb	r3, [r7, #11]
      break;
 8011f48:	e021      	b.n	8011f8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	7c1b      	ldrb	r3, [r3, #16]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d10d      	bne.n	8011f6e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f5a:	f107 0208 	add.w	r2, r7, #8
 8011f5e:	4610      	mov	r0, r2
 8011f60:	4798      	blx	r3
 8011f62:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	3301      	adds	r3, #1
 8011f68:	2207      	movs	r2, #7
 8011f6a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011f6c:	e00f      	b.n	8011f8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011f6e:	6839      	ldr	r1, [r7, #0]
 8011f70:	6878      	ldr	r0, [r7, #4]
 8011f72:	f000 fa10 	bl	8012396 <USBD_CtlError>
        err++;
 8011f76:	7afb      	ldrb	r3, [r7, #11]
 8011f78:	3301      	adds	r3, #1
 8011f7a:	72fb      	strb	r3, [r7, #11]
      break;
 8011f7c:	e007      	b.n	8011f8e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8011f7e:	6839      	ldr	r1, [r7, #0]
 8011f80:	6878      	ldr	r0, [r7, #4]
 8011f82:	f000 fa08 	bl	8012396 <USBD_CtlError>
      err++;
 8011f86:	7afb      	ldrb	r3, [r7, #11]
 8011f88:	3301      	adds	r3, #1
 8011f8a:	72fb      	strb	r3, [r7, #11]
      break;
 8011f8c:	bf00      	nop
  }

  if (err != 0U)
 8011f8e:	7afb      	ldrb	r3, [r7, #11]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d11e      	bne.n	8011fd2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8011f94:	683b      	ldr	r3, [r7, #0]
 8011f96:	88db      	ldrh	r3, [r3, #6]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d016      	beq.n	8011fca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8011f9c:	893b      	ldrh	r3, [r7, #8]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d00e      	beq.n	8011fc0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8011fa2:	683b      	ldr	r3, [r7, #0]
 8011fa4:	88da      	ldrh	r2, [r3, #6]
 8011fa6:	893b      	ldrh	r3, [r7, #8]
 8011fa8:	4293      	cmp	r3, r2
 8011faa:	bf28      	it	cs
 8011fac:	4613      	movcs	r3, r2
 8011fae:	b29b      	uxth	r3, r3
 8011fb0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011fb2:	893b      	ldrh	r3, [r7, #8]
 8011fb4:	461a      	mov	r2, r3
 8011fb6:	68f9      	ldr	r1, [r7, #12]
 8011fb8:	6878      	ldr	r0, [r7, #4]
 8011fba:	f000 fa5d 	bl	8012478 <USBD_CtlSendData>
 8011fbe:	e009      	b.n	8011fd4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011fc0:	6839      	ldr	r1, [r7, #0]
 8011fc2:	6878      	ldr	r0, [r7, #4]
 8011fc4:	f000 f9e7 	bl	8012396 <USBD_CtlError>
 8011fc8:	e004      	b.n	8011fd4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8011fca:	6878      	ldr	r0, [r7, #4]
 8011fcc:	f000 faae 	bl	801252c <USBD_CtlSendStatus>
 8011fd0:	e000      	b.n	8011fd4 <USBD_GetDescriptor+0x2cc>
    return;
 8011fd2:	bf00      	nop
  }
}
 8011fd4:	3710      	adds	r7, #16
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	bd80      	pop	{r7, pc}
 8011fda:	bf00      	nop

08011fdc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011fdc:	b580      	push	{r7, lr}
 8011fde:	b084      	sub	sp, #16
 8011fe0:	af00      	add	r7, sp, #0
 8011fe2:	6078      	str	r0, [r7, #4]
 8011fe4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	889b      	ldrh	r3, [r3, #4]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d131      	bne.n	8012052 <USBD_SetAddress+0x76>
 8011fee:	683b      	ldr	r3, [r7, #0]
 8011ff0:	88db      	ldrh	r3, [r3, #6]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d12d      	bne.n	8012052 <USBD_SetAddress+0x76>
 8011ff6:	683b      	ldr	r3, [r7, #0]
 8011ff8:	885b      	ldrh	r3, [r3, #2]
 8011ffa:	2b7f      	cmp	r3, #127	; 0x7f
 8011ffc:	d829      	bhi.n	8012052 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011ffe:	683b      	ldr	r3, [r7, #0]
 8012000:	885b      	ldrh	r3, [r3, #2]
 8012002:	b2db      	uxtb	r3, r3
 8012004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012008:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012010:	b2db      	uxtb	r3, r3
 8012012:	2b03      	cmp	r3, #3
 8012014:	d104      	bne.n	8012020 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012016:	6839      	ldr	r1, [r7, #0]
 8012018:	6878      	ldr	r0, [r7, #4]
 801201a:	f000 f9bc 	bl	8012396 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801201e:	e01d      	b.n	801205c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	7bfa      	ldrb	r2, [r7, #15]
 8012024:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012028:	7bfb      	ldrb	r3, [r7, #15]
 801202a:	4619      	mov	r1, r3
 801202c:	6878      	ldr	r0, [r7, #4]
 801202e:	f000 ffa5 	bl	8012f7c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012032:	6878      	ldr	r0, [r7, #4]
 8012034:	f000 fa7a 	bl	801252c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012038:	7bfb      	ldrb	r3, [r7, #15]
 801203a:	2b00      	cmp	r3, #0
 801203c:	d004      	beq.n	8012048 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	2202      	movs	r2, #2
 8012042:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012046:	e009      	b.n	801205c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	2201      	movs	r2, #1
 801204c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012050:	e004      	b.n	801205c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012052:	6839      	ldr	r1, [r7, #0]
 8012054:	6878      	ldr	r0, [r7, #4]
 8012056:	f000 f99e 	bl	8012396 <USBD_CtlError>
  }
}
 801205a:	bf00      	nop
 801205c:	bf00      	nop
 801205e:	3710      	adds	r7, #16
 8012060:	46bd      	mov	sp, r7
 8012062:	bd80      	pop	{r7, pc}

08012064 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012064:	b580      	push	{r7, lr}
 8012066:	b084      	sub	sp, #16
 8012068:	af00      	add	r7, sp, #0
 801206a:	6078      	str	r0, [r7, #4]
 801206c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801206e:	2300      	movs	r3, #0
 8012070:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012072:	683b      	ldr	r3, [r7, #0]
 8012074:	885b      	ldrh	r3, [r3, #2]
 8012076:	b2da      	uxtb	r2, r3
 8012078:	4b4e      	ldr	r3, [pc, #312]	; (80121b4 <USBD_SetConfig+0x150>)
 801207a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801207c:	4b4d      	ldr	r3, [pc, #308]	; (80121b4 <USBD_SetConfig+0x150>)
 801207e:	781b      	ldrb	r3, [r3, #0]
 8012080:	2b01      	cmp	r3, #1
 8012082:	d905      	bls.n	8012090 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012084:	6839      	ldr	r1, [r7, #0]
 8012086:	6878      	ldr	r0, [r7, #4]
 8012088:	f000 f985 	bl	8012396 <USBD_CtlError>
    return USBD_FAIL;
 801208c:	2303      	movs	r3, #3
 801208e:	e08c      	b.n	80121aa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012096:	b2db      	uxtb	r3, r3
 8012098:	2b02      	cmp	r3, #2
 801209a:	d002      	beq.n	80120a2 <USBD_SetConfig+0x3e>
 801209c:	2b03      	cmp	r3, #3
 801209e:	d029      	beq.n	80120f4 <USBD_SetConfig+0x90>
 80120a0:	e075      	b.n	801218e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80120a2:	4b44      	ldr	r3, [pc, #272]	; (80121b4 <USBD_SetConfig+0x150>)
 80120a4:	781b      	ldrb	r3, [r3, #0]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d020      	beq.n	80120ec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80120aa:	4b42      	ldr	r3, [pc, #264]	; (80121b4 <USBD_SetConfig+0x150>)
 80120ac:	781b      	ldrb	r3, [r3, #0]
 80120ae:	461a      	mov	r2, r3
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80120b4:	4b3f      	ldr	r3, [pc, #252]	; (80121b4 <USBD_SetConfig+0x150>)
 80120b6:	781b      	ldrb	r3, [r3, #0]
 80120b8:	4619      	mov	r1, r3
 80120ba:	6878      	ldr	r0, [r7, #4]
 80120bc:	f7fe ffe7 	bl	801108e <USBD_SetClassConfig>
 80120c0:	4603      	mov	r3, r0
 80120c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80120c4:	7bfb      	ldrb	r3, [r7, #15]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d008      	beq.n	80120dc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80120ca:	6839      	ldr	r1, [r7, #0]
 80120cc:	6878      	ldr	r0, [r7, #4]
 80120ce:	f000 f962 	bl	8012396 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	2202      	movs	r2, #2
 80120d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80120da:	e065      	b.n	80121a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80120dc:	6878      	ldr	r0, [r7, #4]
 80120de:	f000 fa25 	bl	801252c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	2203      	movs	r2, #3
 80120e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80120ea:	e05d      	b.n	80121a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80120ec:	6878      	ldr	r0, [r7, #4]
 80120ee:	f000 fa1d 	bl	801252c <USBD_CtlSendStatus>
      break;
 80120f2:	e059      	b.n	80121a8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80120f4:	4b2f      	ldr	r3, [pc, #188]	; (80121b4 <USBD_SetConfig+0x150>)
 80120f6:	781b      	ldrb	r3, [r3, #0]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d112      	bne.n	8012122 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	2202      	movs	r2, #2
 8012100:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8012104:	4b2b      	ldr	r3, [pc, #172]	; (80121b4 <USBD_SetConfig+0x150>)
 8012106:	781b      	ldrb	r3, [r3, #0]
 8012108:	461a      	mov	r2, r3
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801210e:	4b29      	ldr	r3, [pc, #164]	; (80121b4 <USBD_SetConfig+0x150>)
 8012110:	781b      	ldrb	r3, [r3, #0]
 8012112:	4619      	mov	r1, r3
 8012114:	6878      	ldr	r0, [r7, #4]
 8012116:	f7fe ffd6 	bl	80110c6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801211a:	6878      	ldr	r0, [r7, #4]
 801211c:	f000 fa06 	bl	801252c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012120:	e042      	b.n	80121a8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8012122:	4b24      	ldr	r3, [pc, #144]	; (80121b4 <USBD_SetConfig+0x150>)
 8012124:	781b      	ldrb	r3, [r3, #0]
 8012126:	461a      	mov	r2, r3
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	685b      	ldr	r3, [r3, #4]
 801212c:	429a      	cmp	r2, r3
 801212e:	d02a      	beq.n	8012186 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	685b      	ldr	r3, [r3, #4]
 8012134:	b2db      	uxtb	r3, r3
 8012136:	4619      	mov	r1, r3
 8012138:	6878      	ldr	r0, [r7, #4]
 801213a:	f7fe ffc4 	bl	80110c6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801213e:	4b1d      	ldr	r3, [pc, #116]	; (80121b4 <USBD_SetConfig+0x150>)
 8012140:	781b      	ldrb	r3, [r3, #0]
 8012142:	461a      	mov	r2, r3
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012148:	4b1a      	ldr	r3, [pc, #104]	; (80121b4 <USBD_SetConfig+0x150>)
 801214a:	781b      	ldrb	r3, [r3, #0]
 801214c:	4619      	mov	r1, r3
 801214e:	6878      	ldr	r0, [r7, #4]
 8012150:	f7fe ff9d 	bl	801108e <USBD_SetClassConfig>
 8012154:	4603      	mov	r3, r0
 8012156:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012158:	7bfb      	ldrb	r3, [r7, #15]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d00f      	beq.n	801217e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801215e:	6839      	ldr	r1, [r7, #0]
 8012160:	6878      	ldr	r0, [r7, #4]
 8012162:	f000 f918 	bl	8012396 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	685b      	ldr	r3, [r3, #4]
 801216a:	b2db      	uxtb	r3, r3
 801216c:	4619      	mov	r1, r3
 801216e:	6878      	ldr	r0, [r7, #4]
 8012170:	f7fe ffa9 	bl	80110c6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	2202      	movs	r2, #2
 8012178:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801217c:	e014      	b.n	80121a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801217e:	6878      	ldr	r0, [r7, #4]
 8012180:	f000 f9d4 	bl	801252c <USBD_CtlSendStatus>
      break;
 8012184:	e010      	b.n	80121a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012186:	6878      	ldr	r0, [r7, #4]
 8012188:	f000 f9d0 	bl	801252c <USBD_CtlSendStatus>
      break;
 801218c:	e00c      	b.n	80121a8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801218e:	6839      	ldr	r1, [r7, #0]
 8012190:	6878      	ldr	r0, [r7, #4]
 8012192:	f000 f900 	bl	8012396 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012196:	4b07      	ldr	r3, [pc, #28]	; (80121b4 <USBD_SetConfig+0x150>)
 8012198:	781b      	ldrb	r3, [r3, #0]
 801219a:	4619      	mov	r1, r3
 801219c:	6878      	ldr	r0, [r7, #4]
 801219e:	f7fe ff92 	bl	80110c6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80121a2:	2303      	movs	r3, #3
 80121a4:	73fb      	strb	r3, [r7, #15]
      break;
 80121a6:	bf00      	nop
  }

  return ret;
 80121a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80121aa:	4618      	mov	r0, r3
 80121ac:	3710      	adds	r7, #16
 80121ae:	46bd      	mov	sp, r7
 80121b0:	bd80      	pop	{r7, pc}
 80121b2:	bf00      	nop
 80121b4:	240345e8 	.word	0x240345e8

080121b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b082      	sub	sp, #8
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]
 80121c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80121c2:	683b      	ldr	r3, [r7, #0]
 80121c4:	88db      	ldrh	r3, [r3, #6]
 80121c6:	2b01      	cmp	r3, #1
 80121c8:	d004      	beq.n	80121d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80121ca:	6839      	ldr	r1, [r7, #0]
 80121cc:	6878      	ldr	r0, [r7, #4]
 80121ce:	f000 f8e2 	bl	8012396 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80121d2:	e023      	b.n	801221c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80121da:	b2db      	uxtb	r3, r3
 80121dc:	2b02      	cmp	r3, #2
 80121de:	dc02      	bgt.n	80121e6 <USBD_GetConfig+0x2e>
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	dc03      	bgt.n	80121ec <USBD_GetConfig+0x34>
 80121e4:	e015      	b.n	8012212 <USBD_GetConfig+0x5a>
 80121e6:	2b03      	cmp	r3, #3
 80121e8:	d00b      	beq.n	8012202 <USBD_GetConfig+0x4a>
 80121ea:	e012      	b.n	8012212 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	2200      	movs	r2, #0
 80121f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	3308      	adds	r3, #8
 80121f6:	2201      	movs	r2, #1
 80121f8:	4619      	mov	r1, r3
 80121fa:	6878      	ldr	r0, [r7, #4]
 80121fc:	f000 f93c 	bl	8012478 <USBD_CtlSendData>
        break;
 8012200:	e00c      	b.n	801221c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	3304      	adds	r3, #4
 8012206:	2201      	movs	r2, #1
 8012208:	4619      	mov	r1, r3
 801220a:	6878      	ldr	r0, [r7, #4]
 801220c:	f000 f934 	bl	8012478 <USBD_CtlSendData>
        break;
 8012210:	e004      	b.n	801221c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012212:	6839      	ldr	r1, [r7, #0]
 8012214:	6878      	ldr	r0, [r7, #4]
 8012216:	f000 f8be 	bl	8012396 <USBD_CtlError>
        break;
 801221a:	bf00      	nop
}
 801221c:	bf00      	nop
 801221e:	3708      	adds	r7, #8
 8012220:	46bd      	mov	sp, r7
 8012222:	bd80      	pop	{r7, pc}

08012224 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012224:	b580      	push	{r7, lr}
 8012226:	b082      	sub	sp, #8
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
 801222c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012234:	b2db      	uxtb	r3, r3
 8012236:	3b01      	subs	r3, #1
 8012238:	2b02      	cmp	r3, #2
 801223a:	d81e      	bhi.n	801227a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	88db      	ldrh	r3, [r3, #6]
 8012240:	2b02      	cmp	r3, #2
 8012242:	d004      	beq.n	801224e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012244:	6839      	ldr	r1, [r7, #0]
 8012246:	6878      	ldr	r0, [r7, #4]
 8012248:	f000 f8a5 	bl	8012396 <USBD_CtlError>
        break;
 801224c:	e01a      	b.n	8012284 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	2201      	movs	r2, #1
 8012252:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801225a:	2b00      	cmp	r3, #0
 801225c:	d005      	beq.n	801226a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	68db      	ldr	r3, [r3, #12]
 8012262:	f043 0202 	orr.w	r2, r3, #2
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	330c      	adds	r3, #12
 801226e:	2202      	movs	r2, #2
 8012270:	4619      	mov	r1, r3
 8012272:	6878      	ldr	r0, [r7, #4]
 8012274:	f000 f900 	bl	8012478 <USBD_CtlSendData>
      break;
 8012278:	e004      	b.n	8012284 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801227a:	6839      	ldr	r1, [r7, #0]
 801227c:	6878      	ldr	r0, [r7, #4]
 801227e:	f000 f88a 	bl	8012396 <USBD_CtlError>
      break;
 8012282:	bf00      	nop
  }
}
 8012284:	bf00      	nop
 8012286:	3708      	adds	r7, #8
 8012288:	46bd      	mov	sp, r7
 801228a:	bd80      	pop	{r7, pc}

0801228c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b082      	sub	sp, #8
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
 8012294:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012296:	683b      	ldr	r3, [r7, #0]
 8012298:	885b      	ldrh	r3, [r3, #2]
 801229a:	2b01      	cmp	r3, #1
 801229c:	d107      	bne.n	80122ae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	2201      	movs	r2, #1
 80122a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80122a6:	6878      	ldr	r0, [r7, #4]
 80122a8:	f000 f940 	bl	801252c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80122ac:	e013      	b.n	80122d6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80122ae:	683b      	ldr	r3, [r7, #0]
 80122b0:	885b      	ldrh	r3, [r3, #2]
 80122b2:	2b02      	cmp	r3, #2
 80122b4:	d10b      	bne.n	80122ce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80122b6:	683b      	ldr	r3, [r7, #0]
 80122b8:	889b      	ldrh	r3, [r3, #4]
 80122ba:	0a1b      	lsrs	r3, r3, #8
 80122bc:	b29b      	uxth	r3, r3
 80122be:	b2da      	uxtb	r2, r3
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80122c6:	6878      	ldr	r0, [r7, #4]
 80122c8:	f000 f930 	bl	801252c <USBD_CtlSendStatus>
}
 80122cc:	e003      	b.n	80122d6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80122ce:	6839      	ldr	r1, [r7, #0]
 80122d0:	6878      	ldr	r0, [r7, #4]
 80122d2:	f000 f860 	bl	8012396 <USBD_CtlError>
}
 80122d6:	bf00      	nop
 80122d8:	3708      	adds	r7, #8
 80122da:	46bd      	mov	sp, r7
 80122dc:	bd80      	pop	{r7, pc}

080122de <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80122de:	b580      	push	{r7, lr}
 80122e0:	b082      	sub	sp, #8
 80122e2:	af00      	add	r7, sp, #0
 80122e4:	6078      	str	r0, [r7, #4]
 80122e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80122ee:	b2db      	uxtb	r3, r3
 80122f0:	3b01      	subs	r3, #1
 80122f2:	2b02      	cmp	r3, #2
 80122f4:	d80b      	bhi.n	801230e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80122f6:	683b      	ldr	r3, [r7, #0]
 80122f8:	885b      	ldrh	r3, [r3, #2]
 80122fa:	2b01      	cmp	r3, #1
 80122fc:	d10c      	bne.n	8012318 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	2200      	movs	r2, #0
 8012302:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012306:	6878      	ldr	r0, [r7, #4]
 8012308:	f000 f910 	bl	801252c <USBD_CtlSendStatus>
      }
      break;
 801230c:	e004      	b.n	8012318 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801230e:	6839      	ldr	r1, [r7, #0]
 8012310:	6878      	ldr	r0, [r7, #4]
 8012312:	f000 f840 	bl	8012396 <USBD_CtlError>
      break;
 8012316:	e000      	b.n	801231a <USBD_ClrFeature+0x3c>
      break;
 8012318:	bf00      	nop
  }
}
 801231a:	bf00      	nop
 801231c:	3708      	adds	r7, #8
 801231e:	46bd      	mov	sp, r7
 8012320:	bd80      	pop	{r7, pc}

08012322 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012322:	b580      	push	{r7, lr}
 8012324:	b084      	sub	sp, #16
 8012326:	af00      	add	r7, sp, #0
 8012328:	6078      	str	r0, [r7, #4]
 801232a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801232c:	683b      	ldr	r3, [r7, #0]
 801232e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	781a      	ldrb	r2, [r3, #0]
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	3301      	adds	r3, #1
 801233c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	781a      	ldrb	r2, [r3, #0]
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	3301      	adds	r3, #1
 801234a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801234c:	68f8      	ldr	r0, [r7, #12]
 801234e:	f7ff fa41 	bl	80117d4 <SWAPBYTE>
 8012352:	4603      	mov	r3, r0
 8012354:	461a      	mov	r2, r3
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	3301      	adds	r3, #1
 801235e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	3301      	adds	r3, #1
 8012364:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012366:	68f8      	ldr	r0, [r7, #12]
 8012368:	f7ff fa34 	bl	80117d4 <SWAPBYTE>
 801236c:	4603      	mov	r3, r0
 801236e:	461a      	mov	r2, r3
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	3301      	adds	r3, #1
 8012378:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	3301      	adds	r3, #1
 801237e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012380:	68f8      	ldr	r0, [r7, #12]
 8012382:	f7ff fa27 	bl	80117d4 <SWAPBYTE>
 8012386:	4603      	mov	r3, r0
 8012388:	461a      	mov	r2, r3
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	80da      	strh	r2, [r3, #6]
}
 801238e:	bf00      	nop
 8012390:	3710      	adds	r7, #16
 8012392:	46bd      	mov	sp, r7
 8012394:	bd80      	pop	{r7, pc}

08012396 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012396:	b580      	push	{r7, lr}
 8012398:	b082      	sub	sp, #8
 801239a:	af00      	add	r7, sp, #0
 801239c:	6078      	str	r0, [r7, #4]
 801239e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80123a0:	2180      	movs	r1, #128	; 0x80
 80123a2:	6878      	ldr	r0, [r7, #4]
 80123a4:	f000 fd80 	bl	8012ea8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80123a8:	2100      	movs	r1, #0
 80123aa:	6878      	ldr	r0, [r7, #4]
 80123ac:	f000 fd7c 	bl	8012ea8 <USBD_LL_StallEP>
}
 80123b0:	bf00      	nop
 80123b2:	3708      	adds	r7, #8
 80123b4:	46bd      	mov	sp, r7
 80123b6:	bd80      	pop	{r7, pc}

080123b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b086      	sub	sp, #24
 80123bc:	af00      	add	r7, sp, #0
 80123be:	60f8      	str	r0, [r7, #12]
 80123c0:	60b9      	str	r1, [r7, #8]
 80123c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80123c4:	2300      	movs	r3, #0
 80123c6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d036      	beq.n	801243c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80123d2:	6938      	ldr	r0, [r7, #16]
 80123d4:	f000 f836 	bl	8012444 <USBD_GetLen>
 80123d8:	4603      	mov	r3, r0
 80123da:	3301      	adds	r3, #1
 80123dc:	b29b      	uxth	r3, r3
 80123de:	005b      	lsls	r3, r3, #1
 80123e0:	b29a      	uxth	r2, r3
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80123e6:	7dfb      	ldrb	r3, [r7, #23]
 80123e8:	68ba      	ldr	r2, [r7, #8]
 80123ea:	4413      	add	r3, r2
 80123ec:	687a      	ldr	r2, [r7, #4]
 80123ee:	7812      	ldrb	r2, [r2, #0]
 80123f0:	701a      	strb	r2, [r3, #0]
  idx++;
 80123f2:	7dfb      	ldrb	r3, [r7, #23]
 80123f4:	3301      	adds	r3, #1
 80123f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80123f8:	7dfb      	ldrb	r3, [r7, #23]
 80123fa:	68ba      	ldr	r2, [r7, #8]
 80123fc:	4413      	add	r3, r2
 80123fe:	2203      	movs	r2, #3
 8012400:	701a      	strb	r2, [r3, #0]
  idx++;
 8012402:	7dfb      	ldrb	r3, [r7, #23]
 8012404:	3301      	adds	r3, #1
 8012406:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012408:	e013      	b.n	8012432 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801240a:	7dfb      	ldrb	r3, [r7, #23]
 801240c:	68ba      	ldr	r2, [r7, #8]
 801240e:	4413      	add	r3, r2
 8012410:	693a      	ldr	r2, [r7, #16]
 8012412:	7812      	ldrb	r2, [r2, #0]
 8012414:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012416:	693b      	ldr	r3, [r7, #16]
 8012418:	3301      	adds	r3, #1
 801241a:	613b      	str	r3, [r7, #16]
    idx++;
 801241c:	7dfb      	ldrb	r3, [r7, #23]
 801241e:	3301      	adds	r3, #1
 8012420:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012422:	7dfb      	ldrb	r3, [r7, #23]
 8012424:	68ba      	ldr	r2, [r7, #8]
 8012426:	4413      	add	r3, r2
 8012428:	2200      	movs	r2, #0
 801242a:	701a      	strb	r2, [r3, #0]
    idx++;
 801242c:	7dfb      	ldrb	r3, [r7, #23]
 801242e:	3301      	adds	r3, #1
 8012430:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012432:	693b      	ldr	r3, [r7, #16]
 8012434:	781b      	ldrb	r3, [r3, #0]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d1e7      	bne.n	801240a <USBD_GetString+0x52>
 801243a:	e000      	b.n	801243e <USBD_GetString+0x86>
    return;
 801243c:	bf00      	nop
  }
}
 801243e:	3718      	adds	r7, #24
 8012440:	46bd      	mov	sp, r7
 8012442:	bd80      	pop	{r7, pc}

08012444 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012444:	b480      	push	{r7}
 8012446:	b085      	sub	sp, #20
 8012448:	af00      	add	r7, sp, #0
 801244a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801244c:	2300      	movs	r3, #0
 801244e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012454:	e005      	b.n	8012462 <USBD_GetLen+0x1e>
  {
    len++;
 8012456:	7bfb      	ldrb	r3, [r7, #15]
 8012458:	3301      	adds	r3, #1
 801245a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801245c:	68bb      	ldr	r3, [r7, #8]
 801245e:	3301      	adds	r3, #1
 8012460:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012462:	68bb      	ldr	r3, [r7, #8]
 8012464:	781b      	ldrb	r3, [r3, #0]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d1f5      	bne.n	8012456 <USBD_GetLen+0x12>
  }

  return len;
 801246a:	7bfb      	ldrb	r3, [r7, #15]
}
 801246c:	4618      	mov	r0, r3
 801246e:	3714      	adds	r7, #20
 8012470:	46bd      	mov	sp, r7
 8012472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012476:	4770      	bx	lr

08012478 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012478:	b580      	push	{r7, lr}
 801247a:	b084      	sub	sp, #16
 801247c:	af00      	add	r7, sp, #0
 801247e:	60f8      	str	r0, [r7, #12]
 8012480:	60b9      	str	r1, [r7, #8]
 8012482:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	2202      	movs	r2, #2
 8012488:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	687a      	ldr	r2, [r7, #4]
 8012490:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	687a      	ldr	r2, [r7, #4]
 8012496:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	68ba      	ldr	r2, [r7, #8]
 801249c:	2100      	movs	r1, #0
 801249e:	68f8      	ldr	r0, [r7, #12]
 80124a0:	f000 fd8b 	bl	8012fba <USBD_LL_Transmit>

  return USBD_OK;
 80124a4:	2300      	movs	r3, #0
}
 80124a6:	4618      	mov	r0, r3
 80124a8:	3710      	adds	r7, #16
 80124aa:	46bd      	mov	sp, r7
 80124ac:	bd80      	pop	{r7, pc}

080124ae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80124ae:	b580      	push	{r7, lr}
 80124b0:	b084      	sub	sp, #16
 80124b2:	af00      	add	r7, sp, #0
 80124b4:	60f8      	str	r0, [r7, #12]
 80124b6:	60b9      	str	r1, [r7, #8]
 80124b8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	68ba      	ldr	r2, [r7, #8]
 80124be:	2100      	movs	r1, #0
 80124c0:	68f8      	ldr	r0, [r7, #12]
 80124c2:	f000 fd7a 	bl	8012fba <USBD_LL_Transmit>

  return USBD_OK;
 80124c6:	2300      	movs	r3, #0
}
 80124c8:	4618      	mov	r0, r3
 80124ca:	3710      	adds	r7, #16
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bd80      	pop	{r7, pc}

080124d0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b084      	sub	sp, #16
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	60f8      	str	r0, [r7, #12]
 80124d8:	60b9      	str	r1, [r7, #8]
 80124da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	2203      	movs	r2, #3
 80124e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	687a      	ldr	r2, [r7, #4]
 80124e8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	687a      	ldr	r2, [r7, #4]
 80124f0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	68ba      	ldr	r2, [r7, #8]
 80124f8:	2100      	movs	r1, #0
 80124fa:	68f8      	ldr	r0, [r7, #12]
 80124fc:	f000 fd7e 	bl	8012ffc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012500:	2300      	movs	r3, #0
}
 8012502:	4618      	mov	r0, r3
 8012504:	3710      	adds	r7, #16
 8012506:	46bd      	mov	sp, r7
 8012508:	bd80      	pop	{r7, pc}

0801250a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801250a:	b580      	push	{r7, lr}
 801250c:	b084      	sub	sp, #16
 801250e:	af00      	add	r7, sp, #0
 8012510:	60f8      	str	r0, [r7, #12]
 8012512:	60b9      	str	r1, [r7, #8]
 8012514:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	68ba      	ldr	r2, [r7, #8]
 801251a:	2100      	movs	r1, #0
 801251c:	68f8      	ldr	r0, [r7, #12]
 801251e:	f000 fd6d 	bl	8012ffc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012522:	2300      	movs	r3, #0
}
 8012524:	4618      	mov	r0, r3
 8012526:	3710      	adds	r7, #16
 8012528:	46bd      	mov	sp, r7
 801252a:	bd80      	pop	{r7, pc}

0801252c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801252c:	b580      	push	{r7, lr}
 801252e:	b082      	sub	sp, #8
 8012530:	af00      	add	r7, sp, #0
 8012532:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	2204      	movs	r2, #4
 8012538:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801253c:	2300      	movs	r3, #0
 801253e:	2200      	movs	r2, #0
 8012540:	2100      	movs	r1, #0
 8012542:	6878      	ldr	r0, [r7, #4]
 8012544:	f000 fd39 	bl	8012fba <USBD_LL_Transmit>

  return USBD_OK;
 8012548:	2300      	movs	r3, #0
}
 801254a:	4618      	mov	r0, r3
 801254c:	3708      	adds	r7, #8
 801254e:	46bd      	mov	sp, r7
 8012550:	bd80      	pop	{r7, pc}

08012552 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012552:	b580      	push	{r7, lr}
 8012554:	b082      	sub	sp, #8
 8012556:	af00      	add	r7, sp, #0
 8012558:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	2205      	movs	r2, #5
 801255e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012562:	2300      	movs	r3, #0
 8012564:	2200      	movs	r2, #0
 8012566:	2100      	movs	r1, #0
 8012568:	6878      	ldr	r0, [r7, #4]
 801256a:	f000 fd47 	bl	8012ffc <USBD_LL_PrepareReceive>

  return USBD_OK;
 801256e:	2300      	movs	r3, #0
}
 8012570:	4618      	mov	r0, r3
 8012572:	3708      	adds	r7, #8
 8012574:	46bd      	mov	sp, r7
 8012576:	bd80      	pop	{r7, pc}

08012578 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012578:	b580      	push	{r7, lr}
 801257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801257c:	2200      	movs	r2, #0
 801257e:	4913      	ldr	r1, [pc, #76]	; (80125cc <MX_USB_DEVICE_Init+0x54>)
 8012580:	4813      	ldr	r0, [pc, #76]	; (80125d0 <MX_USB_DEVICE_Init+0x58>)
 8012582:	f7fe fd07 	bl	8010f94 <USBD_Init>
 8012586:	4603      	mov	r3, r0
 8012588:	2b00      	cmp	r3, #0
 801258a:	d001      	beq.n	8012590 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801258c:	f7ef fc22 	bl	8001dd4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012590:	4910      	ldr	r1, [pc, #64]	; (80125d4 <MX_USB_DEVICE_Init+0x5c>)
 8012592:	480f      	ldr	r0, [pc, #60]	; (80125d0 <MX_USB_DEVICE_Init+0x58>)
 8012594:	f7fe fd2e 	bl	8010ff4 <USBD_RegisterClass>
 8012598:	4603      	mov	r3, r0
 801259a:	2b00      	cmp	r3, #0
 801259c:	d001      	beq.n	80125a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801259e:	f7ef fc19 	bl	8001dd4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80125a2:	490d      	ldr	r1, [pc, #52]	; (80125d8 <MX_USB_DEVICE_Init+0x60>)
 80125a4:	480a      	ldr	r0, [pc, #40]	; (80125d0 <MX_USB_DEVICE_Init+0x58>)
 80125a6:	f7fe fc1f 	bl	8010de8 <USBD_CDC_RegisterInterface>
 80125aa:	4603      	mov	r3, r0
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d001      	beq.n	80125b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80125b0:	f7ef fc10 	bl	8001dd4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80125b4:	4806      	ldr	r0, [pc, #24]	; (80125d0 <MX_USB_DEVICE_Init+0x58>)
 80125b6:	f7fe fd53 	bl	8011060 <USBD_Start>
 80125ba:	4603      	mov	r3, r0
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d001      	beq.n	80125c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80125c0:	f7ef fc08 	bl	8001dd4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80125c4:	f7f6 ff96 	bl	80094f4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80125c8:	bf00      	nop
 80125ca:	bd80      	pop	{r7, pc}
 80125cc:	240000b0 	.word	0x240000b0
 80125d0:	240345ec 	.word	0x240345ec
 80125d4:	2400001c 	.word	0x2400001c
 80125d8:	2400009c 	.word	0x2400009c

080125dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80125dc:	b580      	push	{r7, lr}
 80125de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80125e0:	2200      	movs	r2, #0
 80125e2:	4907      	ldr	r1, [pc, #28]	; (8012600 <CDC_Init_FS+0x24>)
 80125e4:	4807      	ldr	r0, [pc, #28]	; (8012604 <CDC_Init_FS+0x28>)
 80125e6:	f7fe fc19 	bl	8010e1c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80125ea:	4907      	ldr	r1, [pc, #28]	; (8012608 <CDC_Init_FS+0x2c>)
 80125ec:	4805      	ldr	r0, [pc, #20]	; (8012604 <CDC_Init_FS+0x28>)
 80125ee:	f7fe fc37 	bl	8010e60 <USBD_CDC_SetRxBuffer>
  start_flag = 1;
 80125f2:	4b06      	ldr	r3, [pc, #24]	; (801260c <CDC_Init_FS+0x30>)
 80125f4:	2201      	movs	r2, #1
 80125f6:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 80125f8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80125fa:	4618      	mov	r0, r3
 80125fc:	bd80      	pop	{r7, pc}
 80125fe:	bf00      	nop
 8012600:	240348dc 	.word	0x240348dc
 8012604:	240345ec 	.word	0x240345ec
 8012608:	240348d0 	.word	0x240348d0
 801260c:	24033a13 	.word	0x24033a13

08012610 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012610:	b480      	push	{r7}
 8012612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012614:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012616:	4618      	mov	r0, r3
 8012618:	46bd      	mov	sp, r7
 801261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801261e:	4770      	bx	lr

08012620 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012620:	b480      	push	{r7}
 8012622:	b083      	sub	sp, #12
 8012624:	af00      	add	r7, sp, #0
 8012626:	4603      	mov	r3, r0
 8012628:	6039      	str	r1, [r7, #0]
 801262a:	71fb      	strb	r3, [r7, #7]
 801262c:	4613      	mov	r3, r2
 801262e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012630:	79fb      	ldrb	r3, [r7, #7]
 8012632:	2b23      	cmp	r3, #35	; 0x23
 8012634:	f200 8095 	bhi.w	8012762 <CDC_Control_FS+0x142>
 8012638:	a201      	add	r2, pc, #4	; (adr r2, 8012640 <CDC_Control_FS+0x20>)
 801263a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801263e:	bf00      	nop
 8012640:	08012763 	.word	0x08012763
 8012644:	08012763 	.word	0x08012763
 8012648:	08012763 	.word	0x08012763
 801264c:	08012763 	.word	0x08012763
 8012650:	08012763 	.word	0x08012763
 8012654:	08012763 	.word	0x08012763
 8012658:	08012763 	.word	0x08012763
 801265c:	08012763 	.word	0x08012763
 8012660:	08012763 	.word	0x08012763
 8012664:	08012763 	.word	0x08012763
 8012668:	08012763 	.word	0x08012763
 801266c:	08012763 	.word	0x08012763
 8012670:	08012763 	.word	0x08012763
 8012674:	08012763 	.word	0x08012763
 8012678:	08012763 	.word	0x08012763
 801267c:	08012763 	.word	0x08012763
 8012680:	08012763 	.word	0x08012763
 8012684:	08012763 	.word	0x08012763
 8012688:	08012763 	.word	0x08012763
 801268c:	08012763 	.word	0x08012763
 8012690:	08012763 	.word	0x08012763
 8012694:	08012763 	.word	0x08012763
 8012698:	08012763 	.word	0x08012763
 801269c:	08012763 	.word	0x08012763
 80126a0:	08012763 	.word	0x08012763
 80126a4:	08012763 	.word	0x08012763
 80126a8:	08012763 	.word	0x08012763
 80126ac:	08012763 	.word	0x08012763
 80126b0:	08012763 	.word	0x08012763
 80126b4:	08012763 	.word	0x08012763
 80126b8:	08012763 	.word	0x08012763
 80126bc:	08012763 	.word	0x08012763
 80126c0:	080126d1 	.word	0x080126d1
 80126c4:	08012713 	.word	0x08012713
 80126c8:	08012763 	.word	0x08012763
 80126cc:	08012763 	.word	0x08012763
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	buf[0] = pbuf[0];
 80126d0:	683b      	ldr	r3, [r7, #0]
 80126d2:	781a      	ldrb	r2, [r3, #0]
 80126d4:	4b27      	ldr	r3, [pc, #156]	; (8012774 <CDC_Control_FS+0x154>)
 80126d6:	701a      	strb	r2, [r3, #0]
    	buf[1] = pbuf[1];
 80126d8:	683b      	ldr	r3, [r7, #0]
 80126da:	785a      	ldrb	r2, [r3, #1]
 80126dc:	4b25      	ldr	r3, [pc, #148]	; (8012774 <CDC_Control_FS+0x154>)
 80126de:	705a      	strb	r2, [r3, #1]
    	buf[2] = pbuf[2];
 80126e0:	683b      	ldr	r3, [r7, #0]
 80126e2:	789a      	ldrb	r2, [r3, #2]
 80126e4:	4b23      	ldr	r3, [pc, #140]	; (8012774 <CDC_Control_FS+0x154>)
 80126e6:	709a      	strb	r2, [r3, #2]
    	buf[3] = pbuf[3];
 80126e8:	683b      	ldr	r3, [r7, #0]
 80126ea:	78da      	ldrb	r2, [r3, #3]
 80126ec:	4b21      	ldr	r3, [pc, #132]	; (8012774 <CDC_Control_FS+0x154>)
 80126ee:	70da      	strb	r2, [r3, #3]
    	buf[4] = pbuf[4];
 80126f0:	683b      	ldr	r3, [r7, #0]
 80126f2:	791a      	ldrb	r2, [r3, #4]
 80126f4:	4b1f      	ldr	r3, [pc, #124]	; (8012774 <CDC_Control_FS+0x154>)
 80126f6:	711a      	strb	r2, [r3, #4]
    	buf[5] = pbuf[5];
 80126f8:	683b      	ldr	r3, [r7, #0]
 80126fa:	795a      	ldrb	r2, [r3, #5]
 80126fc:	4b1d      	ldr	r3, [pc, #116]	; (8012774 <CDC_Control_FS+0x154>)
 80126fe:	715a      	strb	r2, [r3, #5]
    	buf[6] = pbuf[6];
 8012700:	683b      	ldr	r3, [r7, #0]
 8012702:	799a      	ldrb	r2, [r3, #6]
 8012704:	4b1b      	ldr	r3, [pc, #108]	; (8012774 <CDC_Control_FS+0x154>)
 8012706:	719a      	strb	r2, [r3, #6]
    	buf[7] = pbuf[7];
 8012708:	683b      	ldr	r3, [r7, #0]
 801270a:	79da      	ldrb	r2, [r3, #7]
 801270c:	4b19      	ldr	r3, [pc, #100]	; (8012774 <CDC_Control_FS+0x154>)
 801270e:	71da      	strb	r2, [r3, #7]

    break;
 8012710:	e028      	b.n	8012764 <CDC_Control_FS+0x144>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = buf[0];
 8012712:	4b18      	ldr	r3, [pc, #96]	; (8012774 <CDC_Control_FS+0x154>)
 8012714:	781a      	ldrb	r2, [r3, #0]
 8012716:	683b      	ldr	r3, [r7, #0]
 8012718:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = buf[1];
 801271a:	683b      	ldr	r3, [r7, #0]
 801271c:	3301      	adds	r3, #1
 801271e:	4a15      	ldr	r2, [pc, #84]	; (8012774 <CDC_Control_FS+0x154>)
 8012720:	7852      	ldrb	r2, [r2, #1]
 8012722:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = buf[2];
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	3302      	adds	r3, #2
 8012728:	4a12      	ldr	r2, [pc, #72]	; (8012774 <CDC_Control_FS+0x154>)
 801272a:	7892      	ldrb	r2, [r2, #2]
 801272c:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = buf[3];
 801272e:	683b      	ldr	r3, [r7, #0]
 8012730:	3303      	adds	r3, #3
 8012732:	4a10      	ldr	r2, [pc, #64]	; (8012774 <CDC_Control_FS+0x154>)
 8012734:	78d2      	ldrb	r2, [r2, #3]
 8012736:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = buf[4];
 8012738:	683b      	ldr	r3, [r7, #0]
 801273a:	3304      	adds	r3, #4
 801273c:	4a0d      	ldr	r2, [pc, #52]	; (8012774 <CDC_Control_FS+0x154>)
 801273e:	7912      	ldrb	r2, [r2, #4]
 8012740:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = buf[5];
 8012742:	683b      	ldr	r3, [r7, #0]
 8012744:	3305      	adds	r3, #5
 8012746:	4a0b      	ldr	r2, [pc, #44]	; (8012774 <CDC_Control_FS+0x154>)
 8012748:	7952      	ldrb	r2, [r2, #5]
 801274a:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = buf[6];
 801274c:	683b      	ldr	r3, [r7, #0]
 801274e:	3306      	adds	r3, #6
 8012750:	4a08      	ldr	r2, [pc, #32]	; (8012774 <CDC_Control_FS+0x154>)
 8012752:	7992      	ldrb	r2, [r2, #6]
 8012754:	701a      	strb	r2, [r3, #0]
    	pbuf[7] = buf[7];
 8012756:	683b      	ldr	r3, [r7, #0]
 8012758:	3307      	adds	r3, #7
 801275a:	4a06      	ldr	r2, [pc, #24]	; (8012774 <CDC_Control_FS+0x154>)
 801275c:	79d2      	ldrb	r2, [r2, #7]
 801275e:	701a      	strb	r2, [r3, #0]
    break;
 8012760:	e000      	b.n	8012764 <CDC_Control_FS+0x144>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012762:	bf00      	nop
  }

  return (USBD_OK);
 8012764:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012766:	4618      	mov	r0, r3
 8012768:	370c      	adds	r7, #12
 801276a:	46bd      	mov	sp, r7
 801276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012770:	4770      	bx	lr
 8012772:	bf00      	nop
 8012774:	240348c8 	.word	0x240348c8

08012778 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012778:	b580      	push	{r7, lr}
 801277a:	b082      	sub	sp, #8
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
 8012780:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012782:	6879      	ldr	r1, [r7, #4]
 8012784:	4809      	ldr	r0, [pc, #36]	; (80127ac <CDC_Receive_FS+0x34>)
 8012786:	f7fe fb6b 	bl	8010e60 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801278a:	4808      	ldr	r0, [pc, #32]	; (80127ac <CDC_Receive_FS+0x34>)
 801278c:	f7fe fbcc 	bl	8010f28 <USBD_CDC_ReceivePacket>
  memcpy(options, Buf, *Len);
 8012790:	4b07      	ldr	r3, [pc, #28]	; (80127b0 <CDC_Receive_FS+0x38>)
 8012792:	6818      	ldr	r0, [r3, #0]
 8012794:	683b      	ldr	r3, [r7, #0]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	461a      	mov	r2, r3
 801279a:	6879      	ldr	r1, [r7, #4]
 801279c:	f000 fcca 	bl	8013134 <memcpy>
  return (USBD_OK);
 80127a0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80127a2:	4618      	mov	r0, r3
 80127a4:	3708      	adds	r7, #8
 80127a6:	46bd      	mov	sp, r7
 80127a8:	bd80      	pop	{r7, pc}
 80127aa:	bf00      	nop
 80127ac:	240345ec 	.word	0x240345ec
 80127b0:	240345d8 	.word	0x240345d8

080127b4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b084      	sub	sp, #16
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
 80127bc:	460b      	mov	r3, r1
 80127be:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80127c0:	2300      	movs	r3, #0
 80127c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80127c4:	4b0d      	ldr	r3, [pc, #52]	; (80127fc <CDC_Transmit_FS+0x48>)
 80127c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80127ca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80127cc:	68bb      	ldr	r3, [r7, #8]
 80127ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d001      	beq.n	80127da <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80127d6:	2301      	movs	r3, #1
 80127d8:	e00b      	b.n	80127f2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80127da:	887b      	ldrh	r3, [r7, #2]
 80127dc:	461a      	mov	r2, r3
 80127de:	6879      	ldr	r1, [r7, #4]
 80127e0:	4806      	ldr	r0, [pc, #24]	; (80127fc <CDC_Transmit_FS+0x48>)
 80127e2:	f7fe fb1b 	bl	8010e1c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80127e6:	4805      	ldr	r0, [pc, #20]	; (80127fc <CDC_Transmit_FS+0x48>)
 80127e8:	f7fe fb58 	bl	8010e9c <USBD_CDC_TransmitPacket>
 80127ec:	4603      	mov	r3, r0
 80127ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80127f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80127f2:	4618      	mov	r0, r3
 80127f4:	3710      	adds	r7, #16
 80127f6:	46bd      	mov	sp, r7
 80127f8:	bd80      	pop	{r7, pc}
 80127fa:	bf00      	nop
 80127fc:	240345ec 	.word	0x240345ec

08012800 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012800:	b480      	push	{r7}
 8012802:	b087      	sub	sp, #28
 8012804:	af00      	add	r7, sp, #0
 8012806:	60f8      	str	r0, [r7, #12]
 8012808:	60b9      	str	r1, [r7, #8]
 801280a:	4613      	mov	r3, r2
 801280c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801280e:	2300      	movs	r3, #0
 8012810:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012812:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012816:	4618      	mov	r0, r3
 8012818:	371c      	adds	r7, #28
 801281a:	46bd      	mov	sp, r7
 801281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012820:	4770      	bx	lr
	...

08012824 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012824:	b480      	push	{r7}
 8012826:	b083      	sub	sp, #12
 8012828:	af00      	add	r7, sp, #0
 801282a:	4603      	mov	r3, r0
 801282c:	6039      	str	r1, [r7, #0]
 801282e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012830:	683b      	ldr	r3, [r7, #0]
 8012832:	2212      	movs	r2, #18
 8012834:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012836:	4b03      	ldr	r3, [pc, #12]	; (8012844 <USBD_FS_DeviceDescriptor+0x20>)
}
 8012838:	4618      	mov	r0, r3
 801283a:	370c      	adds	r7, #12
 801283c:	46bd      	mov	sp, r7
 801283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012842:	4770      	bx	lr
 8012844:	240000cc 	.word	0x240000cc

08012848 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012848:	b480      	push	{r7}
 801284a:	b083      	sub	sp, #12
 801284c:	af00      	add	r7, sp, #0
 801284e:	4603      	mov	r3, r0
 8012850:	6039      	str	r1, [r7, #0]
 8012852:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012854:	683b      	ldr	r3, [r7, #0]
 8012856:	2204      	movs	r2, #4
 8012858:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801285a:	4b03      	ldr	r3, [pc, #12]	; (8012868 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801285c:	4618      	mov	r0, r3
 801285e:	370c      	adds	r7, #12
 8012860:	46bd      	mov	sp, r7
 8012862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012866:	4770      	bx	lr
 8012868:	240000e0 	.word	0x240000e0

0801286c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801286c:	b580      	push	{r7, lr}
 801286e:	b082      	sub	sp, #8
 8012870:	af00      	add	r7, sp, #0
 8012872:	4603      	mov	r3, r0
 8012874:	6039      	str	r1, [r7, #0]
 8012876:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012878:	79fb      	ldrb	r3, [r7, #7]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d105      	bne.n	801288a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801287e:	683a      	ldr	r2, [r7, #0]
 8012880:	4907      	ldr	r1, [pc, #28]	; (80128a0 <USBD_FS_ProductStrDescriptor+0x34>)
 8012882:	4808      	ldr	r0, [pc, #32]	; (80128a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8012884:	f7ff fd98 	bl	80123b8 <USBD_GetString>
 8012888:	e004      	b.n	8012894 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801288a:	683a      	ldr	r2, [r7, #0]
 801288c:	4904      	ldr	r1, [pc, #16]	; (80128a0 <USBD_FS_ProductStrDescriptor+0x34>)
 801288e:	4805      	ldr	r0, [pc, #20]	; (80128a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8012890:	f7ff fd92 	bl	80123b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012894:	4b02      	ldr	r3, [pc, #8]	; (80128a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012896:	4618      	mov	r0, r3
 8012898:	3708      	adds	r7, #8
 801289a:	46bd      	mov	sp, r7
 801289c:	bd80      	pop	{r7, pc}
 801289e:	bf00      	nop
 80128a0:	240350dc 	.word	0x240350dc
 80128a4:	08013178 	.word	0x08013178

080128a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80128a8:	b580      	push	{r7, lr}
 80128aa:	b082      	sub	sp, #8
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	4603      	mov	r3, r0
 80128b0:	6039      	str	r1, [r7, #0]
 80128b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80128b4:	683a      	ldr	r2, [r7, #0]
 80128b6:	4904      	ldr	r1, [pc, #16]	; (80128c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80128b8:	4804      	ldr	r0, [pc, #16]	; (80128cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80128ba:	f7ff fd7d 	bl	80123b8 <USBD_GetString>
  return USBD_StrDesc;
 80128be:	4b02      	ldr	r3, [pc, #8]	; (80128c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80128c0:	4618      	mov	r0, r3
 80128c2:	3708      	adds	r7, #8
 80128c4:	46bd      	mov	sp, r7
 80128c6:	bd80      	pop	{r7, pc}
 80128c8:	240350dc 	.word	0x240350dc
 80128cc:	08013190 	.word	0x08013190

080128d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b082      	sub	sp, #8
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	4603      	mov	r3, r0
 80128d8:	6039      	str	r1, [r7, #0]
 80128da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80128dc:	683b      	ldr	r3, [r7, #0]
 80128de:	221a      	movs	r2, #26
 80128e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80128e2:	f000 f843 	bl	801296c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80128e6:	4b02      	ldr	r3, [pc, #8]	; (80128f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80128e8:	4618      	mov	r0, r3
 80128ea:	3708      	adds	r7, #8
 80128ec:	46bd      	mov	sp, r7
 80128ee:	bd80      	pop	{r7, pc}
 80128f0:	240000e4 	.word	0x240000e4

080128f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80128f4:	b580      	push	{r7, lr}
 80128f6:	b082      	sub	sp, #8
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	4603      	mov	r3, r0
 80128fc:	6039      	str	r1, [r7, #0]
 80128fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012900:	79fb      	ldrb	r3, [r7, #7]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d105      	bne.n	8012912 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012906:	683a      	ldr	r2, [r7, #0]
 8012908:	4907      	ldr	r1, [pc, #28]	; (8012928 <USBD_FS_ConfigStrDescriptor+0x34>)
 801290a:	4808      	ldr	r0, [pc, #32]	; (801292c <USBD_FS_ConfigStrDescriptor+0x38>)
 801290c:	f7ff fd54 	bl	80123b8 <USBD_GetString>
 8012910:	e004      	b.n	801291c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012912:	683a      	ldr	r2, [r7, #0]
 8012914:	4904      	ldr	r1, [pc, #16]	; (8012928 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012916:	4805      	ldr	r0, [pc, #20]	; (801292c <USBD_FS_ConfigStrDescriptor+0x38>)
 8012918:	f7ff fd4e 	bl	80123b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801291c:	4b02      	ldr	r3, [pc, #8]	; (8012928 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801291e:	4618      	mov	r0, r3
 8012920:	3708      	adds	r7, #8
 8012922:	46bd      	mov	sp, r7
 8012924:	bd80      	pop	{r7, pc}
 8012926:	bf00      	nop
 8012928:	240350dc 	.word	0x240350dc
 801292c:	080131a4 	.word	0x080131a4

08012930 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012930:	b580      	push	{r7, lr}
 8012932:	b082      	sub	sp, #8
 8012934:	af00      	add	r7, sp, #0
 8012936:	4603      	mov	r3, r0
 8012938:	6039      	str	r1, [r7, #0]
 801293a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801293c:	79fb      	ldrb	r3, [r7, #7]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d105      	bne.n	801294e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012942:	683a      	ldr	r2, [r7, #0]
 8012944:	4907      	ldr	r1, [pc, #28]	; (8012964 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012946:	4808      	ldr	r0, [pc, #32]	; (8012968 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012948:	f7ff fd36 	bl	80123b8 <USBD_GetString>
 801294c:	e004      	b.n	8012958 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801294e:	683a      	ldr	r2, [r7, #0]
 8012950:	4904      	ldr	r1, [pc, #16]	; (8012964 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012952:	4805      	ldr	r0, [pc, #20]	; (8012968 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012954:	f7ff fd30 	bl	80123b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012958:	4b02      	ldr	r3, [pc, #8]	; (8012964 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801295a:	4618      	mov	r0, r3
 801295c:	3708      	adds	r7, #8
 801295e:	46bd      	mov	sp, r7
 8012960:	bd80      	pop	{r7, pc}
 8012962:	bf00      	nop
 8012964:	240350dc 	.word	0x240350dc
 8012968:	080131b0 	.word	0x080131b0

0801296c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801296c:	b580      	push	{r7, lr}
 801296e:	b084      	sub	sp, #16
 8012970:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012972:	4b0f      	ldr	r3, [pc, #60]	; (80129b0 <Get_SerialNum+0x44>)
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012978:	4b0e      	ldr	r3, [pc, #56]	; (80129b4 <Get_SerialNum+0x48>)
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801297e:	4b0e      	ldr	r3, [pc, #56]	; (80129b8 <Get_SerialNum+0x4c>)
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012984:	68fa      	ldr	r2, [r7, #12]
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	4413      	add	r3, r2
 801298a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d009      	beq.n	80129a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012992:	2208      	movs	r2, #8
 8012994:	4909      	ldr	r1, [pc, #36]	; (80129bc <Get_SerialNum+0x50>)
 8012996:	68f8      	ldr	r0, [r7, #12]
 8012998:	f000 f814 	bl	80129c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801299c:	2204      	movs	r2, #4
 801299e:	4908      	ldr	r1, [pc, #32]	; (80129c0 <Get_SerialNum+0x54>)
 80129a0:	68b8      	ldr	r0, [r7, #8]
 80129a2:	f000 f80f 	bl	80129c4 <IntToUnicode>
  }
}
 80129a6:	bf00      	nop
 80129a8:	3710      	adds	r7, #16
 80129aa:	46bd      	mov	sp, r7
 80129ac:	bd80      	pop	{r7, pc}
 80129ae:	bf00      	nop
 80129b0:	1ff1e800 	.word	0x1ff1e800
 80129b4:	1ff1e804 	.word	0x1ff1e804
 80129b8:	1ff1e808 	.word	0x1ff1e808
 80129bc:	240000e6 	.word	0x240000e6
 80129c0:	240000f6 	.word	0x240000f6

080129c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80129c4:	b480      	push	{r7}
 80129c6:	b087      	sub	sp, #28
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	60f8      	str	r0, [r7, #12]
 80129cc:	60b9      	str	r1, [r7, #8]
 80129ce:	4613      	mov	r3, r2
 80129d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80129d2:	2300      	movs	r3, #0
 80129d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80129d6:	2300      	movs	r3, #0
 80129d8:	75fb      	strb	r3, [r7, #23]
 80129da:	e027      	b.n	8012a2c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	0f1b      	lsrs	r3, r3, #28
 80129e0:	2b09      	cmp	r3, #9
 80129e2:	d80b      	bhi.n	80129fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	0f1b      	lsrs	r3, r3, #28
 80129e8:	b2da      	uxtb	r2, r3
 80129ea:	7dfb      	ldrb	r3, [r7, #23]
 80129ec:	005b      	lsls	r3, r3, #1
 80129ee:	4619      	mov	r1, r3
 80129f0:	68bb      	ldr	r3, [r7, #8]
 80129f2:	440b      	add	r3, r1
 80129f4:	3230      	adds	r2, #48	; 0x30
 80129f6:	b2d2      	uxtb	r2, r2
 80129f8:	701a      	strb	r2, [r3, #0]
 80129fa:	e00a      	b.n	8012a12 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	0f1b      	lsrs	r3, r3, #28
 8012a00:	b2da      	uxtb	r2, r3
 8012a02:	7dfb      	ldrb	r3, [r7, #23]
 8012a04:	005b      	lsls	r3, r3, #1
 8012a06:	4619      	mov	r1, r3
 8012a08:	68bb      	ldr	r3, [r7, #8]
 8012a0a:	440b      	add	r3, r1
 8012a0c:	3237      	adds	r2, #55	; 0x37
 8012a0e:	b2d2      	uxtb	r2, r2
 8012a10:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	011b      	lsls	r3, r3, #4
 8012a16:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012a18:	7dfb      	ldrb	r3, [r7, #23]
 8012a1a:	005b      	lsls	r3, r3, #1
 8012a1c:	3301      	adds	r3, #1
 8012a1e:	68ba      	ldr	r2, [r7, #8]
 8012a20:	4413      	add	r3, r2
 8012a22:	2200      	movs	r2, #0
 8012a24:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012a26:	7dfb      	ldrb	r3, [r7, #23]
 8012a28:	3301      	adds	r3, #1
 8012a2a:	75fb      	strb	r3, [r7, #23]
 8012a2c:	7dfa      	ldrb	r2, [r7, #23]
 8012a2e:	79fb      	ldrb	r3, [r7, #7]
 8012a30:	429a      	cmp	r2, r3
 8012a32:	d3d3      	bcc.n	80129dc <IntToUnicode+0x18>
  }
}
 8012a34:	bf00      	nop
 8012a36:	bf00      	nop
 8012a38:	371c      	adds	r7, #28
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a40:	4770      	bx	lr
	...

08012a44 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b0b8      	sub	sp, #224	; 0xe0
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012a4c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012a50:	2200      	movs	r2, #0
 8012a52:	601a      	str	r2, [r3, #0]
 8012a54:	605a      	str	r2, [r3, #4]
 8012a56:	609a      	str	r2, [r3, #8]
 8012a58:	60da      	str	r2, [r3, #12]
 8012a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8012a5c:	f107 0310 	add.w	r3, r7, #16
 8012a60:	22bc      	movs	r2, #188	; 0xbc
 8012a62:	2100      	movs	r1, #0
 8012a64:	4618      	mov	r0, r3
 8012a66:	f000 fb73 	bl	8013150 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	4a3a      	ldr	r2, [pc, #232]	; (8012b58 <HAL_PCD_MspInit+0x114>)
 8012a70:	4293      	cmp	r3, r2
 8012a72:	d16d      	bne.n	8012b50 <HAL_PCD_MspInit+0x10c>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012a74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012a78:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8012a7a:	2301      	movs	r3, #1
 8012a7c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 60;
 8012a7e:	233c      	movs	r3, #60	; 0x3c
 8012a80:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8012a82:	2302      	movs	r3, #2
 8012a84:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 10;
 8012a86:	230a      	movs	r3, #10
 8012a88:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8012a8a:	2302      	movs	r3, #2
 8012a8c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8012a8e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8012a92:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8012a94:	2300      	movs	r3, #0
 8012a96:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8012a98:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012a9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012aa0:	f107 0310 	add.w	r3, r7, #16
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	f7f7 fd59 	bl	800a55c <HAL_RCCEx_PeriphCLKConfig>
 8012aaa:	4603      	mov	r3, r0
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d001      	beq.n	8012ab4 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8012ab0:	f7ef f990 	bl	8001dd4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8012ab4:	f7f6 fd1e 	bl	80094f4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012ab8:	4b28      	ldr	r3, [pc, #160]	; (8012b5c <HAL_PCD_MspInit+0x118>)
 8012aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012abe:	4a27      	ldr	r2, [pc, #156]	; (8012b5c <HAL_PCD_MspInit+0x118>)
 8012ac0:	f043 0301 	orr.w	r3, r3, #1
 8012ac4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012ac8:	4b24      	ldr	r3, [pc, #144]	; (8012b5c <HAL_PCD_MspInit+0x118>)
 8012aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012ace:	f003 0301 	and.w	r3, r3, #1
 8012ad2:	60fb      	str	r3, [r7, #12]
 8012ad4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012ad6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012ada:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012ade:	2302      	movs	r3, #2
 8012ae0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012aea:	2300      	movs	r3, #0
 8012aec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8012af0:	230a      	movs	r3, #10
 8012af2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012af6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012afa:	4619      	mov	r1, r3
 8012afc:	4818      	ldr	r0, [pc, #96]	; (8012b60 <HAL_PCD_MspInit+0x11c>)
 8012afe:	f7f4 ffb7 	bl	8007a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012b02:	4b16      	ldr	r3, [pc, #88]	; (8012b5c <HAL_PCD_MspInit+0x118>)
 8012b04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012b08:	4a14      	ldr	r2, [pc, #80]	; (8012b5c <HAL_PCD_MspInit+0x118>)
 8012b0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012b0e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8012b12:	4b12      	ldr	r3, [pc, #72]	; (8012b5c <HAL_PCD_MspInit+0x118>)
 8012b14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012b18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012b1c:	60bb      	str	r3, [r7, #8]
 8012b1e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 8012b20:	2200      	movs	r2, #0
 8012b22:	2100      	movs	r1, #0
 8012b24:	2062      	movs	r0, #98	; 0x62
 8012b26:	f7f2 f99a 	bl	8004e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 8012b2a:	2062      	movs	r0, #98	; 0x62
 8012b2c:	f7f2 f9b1 	bl	8004e92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_EP1_IN_IRQn, 0, 0);
 8012b30:	2200      	movs	r2, #0
 8012b32:	2100      	movs	r1, #0
 8012b34:	2063      	movs	r0, #99	; 0x63
 8012b36:	f7f2 f992 	bl	8004e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_IN_IRQn);
 8012b3a:	2063      	movs	r0, #99	; 0x63
 8012b3c:	f7f2 f9a9 	bl	8004e92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8012b40:	2200      	movs	r2, #0
 8012b42:	2100      	movs	r1, #0
 8012b44:	2065      	movs	r0, #101	; 0x65
 8012b46:	f7f2 f98a 	bl	8004e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012b4a:	2065      	movs	r0, #101	; 0x65
 8012b4c:	f7f2 f9a1 	bl	8004e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012b50:	bf00      	nop
 8012b52:	37e0      	adds	r7, #224	; 0xe0
 8012b54:	46bd      	mov	sp, r7
 8012b56:	bd80      	pop	{r7, pc}
 8012b58:	40080000 	.word	0x40080000
 8012b5c:	58024400 	.word	0x58024400
 8012b60:	58020000 	.word	0x58020000

08012b64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b64:	b580      	push	{r7, lr}
 8012b66:	b082      	sub	sp, #8
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8012b78:	4619      	mov	r1, r3
 8012b7a:	4610      	mov	r0, r2
 8012b7c:	f7fe fabd 	bl	80110fa <USBD_LL_SetupStage>
}
 8012b80:	bf00      	nop
 8012b82:	3708      	adds	r7, #8
 8012b84:	46bd      	mov	sp, r7
 8012b86:	bd80      	pop	{r7, pc}

08012b88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	b082      	sub	sp, #8
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	6078      	str	r0, [r7, #4]
 8012b90:	460b      	mov	r3, r1
 8012b92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8012b9a:	78fa      	ldrb	r2, [r7, #3]
 8012b9c:	6879      	ldr	r1, [r7, #4]
 8012b9e:	4613      	mov	r3, r2
 8012ba0:	00db      	lsls	r3, r3, #3
 8012ba2:	4413      	add	r3, r2
 8012ba4:	009b      	lsls	r3, r3, #2
 8012ba6:	440b      	add	r3, r1
 8012ba8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8012bac:	681a      	ldr	r2, [r3, #0]
 8012bae:	78fb      	ldrb	r3, [r7, #3]
 8012bb0:	4619      	mov	r1, r3
 8012bb2:	f7fe faf7 	bl	80111a4 <USBD_LL_DataOutStage>
}
 8012bb6:	bf00      	nop
 8012bb8:	3708      	adds	r7, #8
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	bd80      	pop	{r7, pc}

08012bbe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012bbe:	b580      	push	{r7, lr}
 8012bc0:	b082      	sub	sp, #8
 8012bc2:	af00      	add	r7, sp, #0
 8012bc4:	6078      	str	r0, [r7, #4]
 8012bc6:	460b      	mov	r3, r1
 8012bc8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8012bd0:	78fa      	ldrb	r2, [r7, #3]
 8012bd2:	6879      	ldr	r1, [r7, #4]
 8012bd4:	4613      	mov	r3, r2
 8012bd6:	00db      	lsls	r3, r3, #3
 8012bd8:	4413      	add	r3, r2
 8012bda:	009b      	lsls	r3, r3, #2
 8012bdc:	440b      	add	r3, r1
 8012bde:	334c      	adds	r3, #76	; 0x4c
 8012be0:	681a      	ldr	r2, [r3, #0]
 8012be2:	78fb      	ldrb	r3, [r7, #3]
 8012be4:	4619      	mov	r1, r3
 8012be6:	f7fe fb90 	bl	801130a <USBD_LL_DataInStage>
}
 8012bea:	bf00      	nop
 8012bec:	3708      	adds	r7, #8
 8012bee:	46bd      	mov	sp, r7
 8012bf0:	bd80      	pop	{r7, pc}

08012bf2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012bf2:	b580      	push	{r7, lr}
 8012bf4:	b082      	sub	sp, #8
 8012bf6:	af00      	add	r7, sp, #0
 8012bf8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012c00:	4618      	mov	r0, r3
 8012c02:	f7fe fcc4 	bl	801158e <USBD_LL_SOF>
}
 8012c06:	bf00      	nop
 8012c08:	3708      	adds	r7, #8
 8012c0a:	46bd      	mov	sp, r7
 8012c0c:	bd80      	pop	{r7, pc}

08012c0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012c0e:	b580      	push	{r7, lr}
 8012c10:	b084      	sub	sp, #16
 8012c12:	af00      	add	r7, sp, #0
 8012c14:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012c16:	2301      	movs	r3, #1
 8012c18:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	68db      	ldr	r3, [r3, #12]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d102      	bne.n	8012c28 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8012c22:	2300      	movs	r3, #0
 8012c24:	73fb      	strb	r3, [r7, #15]
 8012c26:	e008      	b.n	8012c3a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	68db      	ldr	r3, [r3, #12]
 8012c2c:	2b02      	cmp	r3, #2
 8012c2e:	d102      	bne.n	8012c36 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8012c30:	2301      	movs	r3, #1
 8012c32:	73fb      	strb	r3, [r7, #15]
 8012c34:	e001      	b.n	8012c3a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8012c36:	f7ef f8cd 	bl	8001dd4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012c40:	7bfa      	ldrb	r2, [r7, #15]
 8012c42:	4611      	mov	r1, r2
 8012c44:	4618      	mov	r0, r3
 8012c46:	f7fe fc64 	bl	8011512 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012c50:	4618      	mov	r0, r3
 8012c52:	f7fe fc0c 	bl	801146e <USBD_LL_Reset>
}
 8012c56:	bf00      	nop
 8012c58:	3710      	adds	r7, #16
 8012c5a:	46bd      	mov	sp, r7
 8012c5c:	bd80      	pop	{r7, pc}
	...

08012c60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012c60:	b580      	push	{r7, lr}
 8012c62:	b082      	sub	sp, #8
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012c6e:	4618      	mov	r0, r3
 8012c70:	f7fe fc5f 	bl	8011532 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	687a      	ldr	r2, [r7, #4]
 8012c80:	6812      	ldr	r2, [r2, #0]
 8012c82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012c86:	f043 0301 	orr.w	r3, r3, #1
 8012c8a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	6a1b      	ldr	r3, [r3, #32]
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d005      	beq.n	8012ca0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012c94:	4b04      	ldr	r3, [pc, #16]	; (8012ca8 <HAL_PCD_SuspendCallback+0x48>)
 8012c96:	691b      	ldr	r3, [r3, #16]
 8012c98:	4a03      	ldr	r2, [pc, #12]	; (8012ca8 <HAL_PCD_SuspendCallback+0x48>)
 8012c9a:	f043 0306 	orr.w	r3, r3, #6
 8012c9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012ca0:	bf00      	nop
 8012ca2:	3708      	adds	r7, #8
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	bd80      	pop	{r7, pc}
 8012ca8:	e000ed00 	.word	0xe000ed00

08012cac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b082      	sub	sp, #8
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012cba:	4618      	mov	r0, r3
 8012cbc:	f7fe fc4f 	bl	801155e <USBD_LL_Resume>
}
 8012cc0:	bf00      	nop
 8012cc2:	3708      	adds	r7, #8
 8012cc4:	46bd      	mov	sp, r7
 8012cc6:	bd80      	pop	{r7, pc}

08012cc8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012cc8:	b580      	push	{r7, lr}
 8012cca:	b082      	sub	sp, #8
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	6078      	str	r0, [r7, #4]
 8012cd0:	460b      	mov	r3, r1
 8012cd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012cda:	78fa      	ldrb	r2, [r7, #3]
 8012cdc:	4611      	mov	r1, r2
 8012cde:	4618      	mov	r0, r3
 8012ce0:	f7fe fca7 	bl	8011632 <USBD_LL_IsoOUTIncomplete>
}
 8012ce4:	bf00      	nop
 8012ce6:	3708      	adds	r7, #8
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	bd80      	pop	{r7, pc}

08012cec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b082      	sub	sp, #8
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
 8012cf4:	460b      	mov	r3, r1
 8012cf6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012cfe:	78fa      	ldrb	r2, [r7, #3]
 8012d00:	4611      	mov	r1, r2
 8012d02:	4618      	mov	r0, r3
 8012d04:	f7fe fc63 	bl	80115ce <USBD_LL_IsoINIncomplete>
}
 8012d08:	bf00      	nop
 8012d0a:	3708      	adds	r7, #8
 8012d0c:	46bd      	mov	sp, r7
 8012d0e:	bd80      	pop	{r7, pc}

08012d10 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b082      	sub	sp, #8
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012d1e:	4618      	mov	r0, r3
 8012d20:	f7fe fcb9 	bl	8011696 <USBD_LL_DevConnected>
}
 8012d24:	bf00      	nop
 8012d26:	3708      	adds	r7, #8
 8012d28:	46bd      	mov	sp, r7
 8012d2a:	bd80      	pop	{r7, pc}

08012d2c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b082      	sub	sp, #8
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	f7fe fcb6 	bl	80116ac <USBD_LL_DevDisconnected>
}
 8012d40:	bf00      	nop
 8012d42:	3708      	adds	r7, #8
 8012d44:	46bd      	mov	sp, r7
 8012d46:	bd80      	pop	{r7, pc}

08012d48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b082      	sub	sp, #8
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	781b      	ldrb	r3, [r3, #0]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d13e      	bne.n	8012dd6 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012d58:	4a21      	ldr	r2, [pc, #132]	; (8012de0 <USBD_LL_Init+0x98>)
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	4a1f      	ldr	r2, [pc, #124]	; (8012de0 <USBD_LL_Init+0x98>)
 8012d64:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012d68:	4b1d      	ldr	r3, [pc, #116]	; (8012de0 <USBD_LL_Init+0x98>)
 8012d6a:	4a1e      	ldr	r2, [pc, #120]	; (8012de4 <USBD_LL_Init+0x9c>)
 8012d6c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8012d6e:	4b1c      	ldr	r3, [pc, #112]	; (8012de0 <USBD_LL_Init+0x98>)
 8012d70:	2209      	movs	r2, #9
 8012d72:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8012d74:	4b1a      	ldr	r3, [pc, #104]	; (8012de0 <USBD_LL_Init+0x98>)
 8012d76:	2202      	movs	r2, #2
 8012d78:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012d7a:	4b19      	ldr	r3, [pc, #100]	; (8012de0 <USBD_LL_Init+0x98>)
 8012d7c:	2200      	movs	r2, #0
 8012d7e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012d80:	4b17      	ldr	r3, [pc, #92]	; (8012de0 <USBD_LL_Init+0x98>)
 8012d82:	2202      	movs	r2, #2
 8012d84:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012d86:	4b16      	ldr	r3, [pc, #88]	; (8012de0 <USBD_LL_Init+0x98>)
 8012d88:	2200      	movs	r2, #0
 8012d8a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8012d8c:	4b14      	ldr	r3, [pc, #80]	; (8012de0 <USBD_LL_Init+0x98>)
 8012d8e:	2200      	movs	r2, #0
 8012d90:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8012d92:	4b13      	ldr	r3, [pc, #76]	; (8012de0 <USBD_LL_Init+0x98>)
 8012d94:	2200      	movs	r2, #0
 8012d96:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8012d98:	4b11      	ldr	r3, [pc, #68]	; (8012de0 <USBD_LL_Init+0x98>)
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8012d9e:	4b10      	ldr	r3, [pc, #64]	; (8012de0 <USBD_LL_Init+0x98>)
 8012da0:	2200      	movs	r2, #0
 8012da2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8012da4:	4b0e      	ldr	r3, [pc, #56]	; (8012de0 <USBD_LL_Init+0x98>)
 8012da6:	2200      	movs	r2, #0
 8012da8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8012daa:	480d      	ldr	r0, [pc, #52]	; (8012de0 <USBD_LL_Init+0x98>)
 8012dac:	f7f5 f872 	bl	8007e94 <HAL_PCD_Init>
 8012db0:	4603      	mov	r3, r0
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d001      	beq.n	8012dba <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8012db6:	f7ef f80d 	bl	8001dd4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8012dba:	2180      	movs	r1, #128	; 0x80
 8012dbc:	4808      	ldr	r0, [pc, #32]	; (8012de0 <USBD_LL_Init+0x98>)
 8012dbe:	f7f6 fafe 	bl	80093be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8012dc2:	2240      	movs	r2, #64	; 0x40
 8012dc4:	2100      	movs	r1, #0
 8012dc6:	4806      	ldr	r0, [pc, #24]	; (8012de0 <USBD_LL_Init+0x98>)
 8012dc8:	f7f6 fab2 	bl	8009330 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8012dcc:	2280      	movs	r2, #128	; 0x80
 8012dce:	2101      	movs	r1, #1
 8012dd0:	4803      	ldr	r0, [pc, #12]	; (8012de0 <USBD_LL_Init+0x98>)
 8012dd2:	f7f6 faad 	bl	8009330 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8012dd6:	2300      	movs	r3, #0
}
 8012dd8:	4618      	mov	r0, r3
 8012dda:	3708      	adds	r7, #8
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	bd80      	pop	{r7, pc}
 8012de0:	2403511c 	.word	0x2403511c
 8012de4:	40080000 	.word	0x40080000

08012de8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012de8:	b580      	push	{r7, lr}
 8012dea:	b084      	sub	sp, #16
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012df0:	2300      	movs	r3, #0
 8012df2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012df4:	2300      	movs	r3, #0
 8012df6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012dfe:	4618      	mov	r0, r3
 8012e00:	f7f5 f96c 	bl	80080dc <HAL_PCD_Start>
 8012e04:	4603      	mov	r3, r0
 8012e06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012e08:	7bfb      	ldrb	r3, [r7, #15]
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	f000 f942 	bl	8013094 <USBD_Get_USB_Status>
 8012e10:	4603      	mov	r3, r0
 8012e12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012e14:	7bbb      	ldrb	r3, [r7, #14]
}
 8012e16:	4618      	mov	r0, r3
 8012e18:	3710      	adds	r7, #16
 8012e1a:	46bd      	mov	sp, r7
 8012e1c:	bd80      	pop	{r7, pc}

08012e1e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012e1e:	b580      	push	{r7, lr}
 8012e20:	b084      	sub	sp, #16
 8012e22:	af00      	add	r7, sp, #0
 8012e24:	6078      	str	r0, [r7, #4]
 8012e26:	4608      	mov	r0, r1
 8012e28:	4611      	mov	r1, r2
 8012e2a:	461a      	mov	r2, r3
 8012e2c:	4603      	mov	r3, r0
 8012e2e:	70fb      	strb	r3, [r7, #3]
 8012e30:	460b      	mov	r3, r1
 8012e32:	70bb      	strb	r3, [r7, #2]
 8012e34:	4613      	mov	r3, r2
 8012e36:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012e38:	2300      	movs	r3, #0
 8012e3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012e46:	78bb      	ldrb	r3, [r7, #2]
 8012e48:	883a      	ldrh	r2, [r7, #0]
 8012e4a:	78f9      	ldrb	r1, [r7, #3]
 8012e4c:	f7f5 fe6a 	bl	8008b24 <HAL_PCD_EP_Open>
 8012e50:	4603      	mov	r3, r0
 8012e52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012e54:	7bfb      	ldrb	r3, [r7, #15]
 8012e56:	4618      	mov	r0, r3
 8012e58:	f000 f91c 	bl	8013094 <USBD_Get_USB_Status>
 8012e5c:	4603      	mov	r3, r0
 8012e5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012e60:	7bbb      	ldrb	r3, [r7, #14]
}
 8012e62:	4618      	mov	r0, r3
 8012e64:	3710      	adds	r7, #16
 8012e66:	46bd      	mov	sp, r7
 8012e68:	bd80      	pop	{r7, pc}

08012e6a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012e6a:	b580      	push	{r7, lr}
 8012e6c:	b084      	sub	sp, #16
 8012e6e:	af00      	add	r7, sp, #0
 8012e70:	6078      	str	r0, [r7, #4]
 8012e72:	460b      	mov	r3, r1
 8012e74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012e76:	2300      	movs	r3, #0
 8012e78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012e84:	78fa      	ldrb	r2, [r7, #3]
 8012e86:	4611      	mov	r1, r2
 8012e88:	4618      	mov	r0, r3
 8012e8a:	f7f5 feb3 	bl	8008bf4 <HAL_PCD_EP_Close>
 8012e8e:	4603      	mov	r3, r0
 8012e90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012e92:	7bfb      	ldrb	r3, [r7, #15]
 8012e94:	4618      	mov	r0, r3
 8012e96:	f000 f8fd 	bl	8013094 <USBD_Get_USB_Status>
 8012e9a:	4603      	mov	r3, r0
 8012e9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012e9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	3710      	adds	r7, #16
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	bd80      	pop	{r7, pc}

08012ea8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b084      	sub	sp, #16
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	6078      	str	r0, [r7, #4]
 8012eb0:	460b      	mov	r3, r1
 8012eb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012eb8:	2300      	movs	r3, #0
 8012eba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012ec2:	78fa      	ldrb	r2, [r7, #3]
 8012ec4:	4611      	mov	r1, r2
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	f7f5 ff8b 	bl	8008de2 <HAL_PCD_EP_SetStall>
 8012ecc:	4603      	mov	r3, r0
 8012ece:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012ed0:	7bfb      	ldrb	r3, [r7, #15]
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	f000 f8de 	bl	8013094 <USBD_Get_USB_Status>
 8012ed8:	4603      	mov	r3, r0
 8012eda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012edc:	7bbb      	ldrb	r3, [r7, #14]
}
 8012ede:	4618      	mov	r0, r3
 8012ee0:	3710      	adds	r7, #16
 8012ee2:	46bd      	mov	sp, r7
 8012ee4:	bd80      	pop	{r7, pc}

08012ee6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012ee6:	b580      	push	{r7, lr}
 8012ee8:	b084      	sub	sp, #16
 8012eea:	af00      	add	r7, sp, #0
 8012eec:	6078      	str	r0, [r7, #4]
 8012eee:	460b      	mov	r3, r1
 8012ef0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012f00:	78fa      	ldrb	r2, [r7, #3]
 8012f02:	4611      	mov	r1, r2
 8012f04:	4618      	mov	r0, r3
 8012f06:	f7f5 ffd0 	bl	8008eaa <HAL_PCD_EP_ClrStall>
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012f0e:	7bfb      	ldrb	r3, [r7, #15]
 8012f10:	4618      	mov	r0, r3
 8012f12:	f000 f8bf 	bl	8013094 <USBD_Get_USB_Status>
 8012f16:	4603      	mov	r3, r0
 8012f18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012f1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	3710      	adds	r7, #16
 8012f20:	46bd      	mov	sp, r7
 8012f22:	bd80      	pop	{r7, pc}

08012f24 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012f24:	b480      	push	{r7}
 8012f26:	b085      	sub	sp, #20
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	6078      	str	r0, [r7, #4]
 8012f2c:	460b      	mov	r3, r1
 8012f2e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012f36:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012f38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	da0b      	bge.n	8012f58 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012f40:	78fb      	ldrb	r3, [r7, #3]
 8012f42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012f46:	68f9      	ldr	r1, [r7, #12]
 8012f48:	4613      	mov	r3, r2
 8012f4a:	00db      	lsls	r3, r3, #3
 8012f4c:	4413      	add	r3, r2
 8012f4e:	009b      	lsls	r3, r3, #2
 8012f50:	440b      	add	r3, r1
 8012f52:	333e      	adds	r3, #62	; 0x3e
 8012f54:	781b      	ldrb	r3, [r3, #0]
 8012f56:	e00b      	b.n	8012f70 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012f58:	78fb      	ldrb	r3, [r7, #3]
 8012f5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012f5e:	68f9      	ldr	r1, [r7, #12]
 8012f60:	4613      	mov	r3, r2
 8012f62:	00db      	lsls	r3, r3, #3
 8012f64:	4413      	add	r3, r2
 8012f66:	009b      	lsls	r3, r3, #2
 8012f68:	440b      	add	r3, r1
 8012f6a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8012f6e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012f70:	4618      	mov	r0, r3
 8012f72:	3714      	adds	r7, #20
 8012f74:	46bd      	mov	sp, r7
 8012f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f7a:	4770      	bx	lr

08012f7c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	b084      	sub	sp, #16
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	6078      	str	r0, [r7, #4]
 8012f84:	460b      	mov	r3, r1
 8012f86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012f88:	2300      	movs	r3, #0
 8012f8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012f96:	78fa      	ldrb	r2, [r7, #3]
 8012f98:	4611      	mov	r1, r2
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	f7f5 fd9d 	bl	8008ada <HAL_PCD_SetAddress>
 8012fa0:	4603      	mov	r3, r0
 8012fa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012fa4:	7bfb      	ldrb	r3, [r7, #15]
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	f000 f874 	bl	8013094 <USBD_Get_USB_Status>
 8012fac:	4603      	mov	r3, r0
 8012fae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012fb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	3710      	adds	r7, #16
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	bd80      	pop	{r7, pc}

08012fba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012fba:	b580      	push	{r7, lr}
 8012fbc:	b086      	sub	sp, #24
 8012fbe:	af00      	add	r7, sp, #0
 8012fc0:	60f8      	str	r0, [r7, #12]
 8012fc2:	607a      	str	r2, [r7, #4]
 8012fc4:	603b      	str	r3, [r7, #0]
 8012fc6:	460b      	mov	r3, r1
 8012fc8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012fca:	2300      	movs	r3, #0
 8012fcc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012fce:	2300      	movs	r3, #0
 8012fd0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012fd8:	7af9      	ldrb	r1, [r7, #11]
 8012fda:	683b      	ldr	r3, [r7, #0]
 8012fdc:	687a      	ldr	r2, [r7, #4]
 8012fde:	f7f5 feb6 	bl	8008d4e <HAL_PCD_EP_Transmit>
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012fe6:	7dfb      	ldrb	r3, [r7, #23]
 8012fe8:	4618      	mov	r0, r3
 8012fea:	f000 f853 	bl	8013094 <USBD_Get_USB_Status>
 8012fee:	4603      	mov	r3, r0
 8012ff0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012ff2:	7dbb      	ldrb	r3, [r7, #22]
}
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	3718      	adds	r7, #24
 8012ff8:	46bd      	mov	sp, r7
 8012ffa:	bd80      	pop	{r7, pc}

08012ffc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012ffc:	b580      	push	{r7, lr}
 8012ffe:	b086      	sub	sp, #24
 8013000:	af00      	add	r7, sp, #0
 8013002:	60f8      	str	r0, [r7, #12]
 8013004:	607a      	str	r2, [r7, #4]
 8013006:	603b      	str	r3, [r7, #0]
 8013008:	460b      	mov	r3, r1
 801300a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801300c:	2300      	movs	r3, #0
 801300e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013010:	2300      	movs	r3, #0
 8013012:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801301a:	7af9      	ldrb	r1, [r7, #11]
 801301c:	683b      	ldr	r3, [r7, #0]
 801301e:	687a      	ldr	r2, [r7, #4]
 8013020:	f7f5 fe32 	bl	8008c88 <HAL_PCD_EP_Receive>
 8013024:	4603      	mov	r3, r0
 8013026:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013028:	7dfb      	ldrb	r3, [r7, #23]
 801302a:	4618      	mov	r0, r3
 801302c:	f000 f832 	bl	8013094 <USBD_Get_USB_Status>
 8013030:	4603      	mov	r3, r0
 8013032:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013034:	7dbb      	ldrb	r3, [r7, #22]
}
 8013036:	4618      	mov	r0, r3
 8013038:	3718      	adds	r7, #24
 801303a:	46bd      	mov	sp, r7
 801303c:	bd80      	pop	{r7, pc}

0801303e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801303e:	b580      	push	{r7, lr}
 8013040:	b082      	sub	sp, #8
 8013042:	af00      	add	r7, sp, #0
 8013044:	6078      	str	r0, [r7, #4]
 8013046:	460b      	mov	r3, r1
 8013048:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013050:	78fa      	ldrb	r2, [r7, #3]
 8013052:	4611      	mov	r1, r2
 8013054:	4618      	mov	r0, r3
 8013056:	f7f5 fe62 	bl	8008d1e <HAL_PCD_EP_GetRxCount>
 801305a:	4603      	mov	r3, r0
}
 801305c:	4618      	mov	r0, r3
 801305e:	3708      	adds	r7, #8
 8013060:	46bd      	mov	sp, r7
 8013062:	bd80      	pop	{r7, pc}

08013064 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013064:	b480      	push	{r7}
 8013066:	b083      	sub	sp, #12
 8013068:	af00      	add	r7, sp, #0
 801306a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801306c:	4b03      	ldr	r3, [pc, #12]	; (801307c <USBD_static_malloc+0x18>)
}
 801306e:	4618      	mov	r0, r3
 8013070:	370c      	adds	r7, #12
 8013072:	46bd      	mov	sp, r7
 8013074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013078:	4770      	bx	lr
 801307a:	bf00      	nop
 801307c:	24035628 	.word	0x24035628

08013080 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013080:	b480      	push	{r7}
 8013082:	b083      	sub	sp, #12
 8013084:	af00      	add	r7, sp, #0
 8013086:	6078      	str	r0, [r7, #4]

}
 8013088:	bf00      	nop
 801308a:	370c      	adds	r7, #12
 801308c:	46bd      	mov	sp, r7
 801308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013092:	4770      	bx	lr

08013094 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013094:	b480      	push	{r7}
 8013096:	b085      	sub	sp, #20
 8013098:	af00      	add	r7, sp, #0
 801309a:	4603      	mov	r3, r0
 801309c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801309e:	2300      	movs	r3, #0
 80130a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80130a2:	79fb      	ldrb	r3, [r7, #7]
 80130a4:	2b03      	cmp	r3, #3
 80130a6:	d817      	bhi.n	80130d8 <USBD_Get_USB_Status+0x44>
 80130a8:	a201      	add	r2, pc, #4	; (adr r2, 80130b0 <USBD_Get_USB_Status+0x1c>)
 80130aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130ae:	bf00      	nop
 80130b0:	080130c1 	.word	0x080130c1
 80130b4:	080130c7 	.word	0x080130c7
 80130b8:	080130cd 	.word	0x080130cd
 80130bc:	080130d3 	.word	0x080130d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80130c0:	2300      	movs	r3, #0
 80130c2:	73fb      	strb	r3, [r7, #15]
    break;
 80130c4:	e00b      	b.n	80130de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80130c6:	2303      	movs	r3, #3
 80130c8:	73fb      	strb	r3, [r7, #15]
    break;
 80130ca:	e008      	b.n	80130de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80130cc:	2301      	movs	r3, #1
 80130ce:	73fb      	strb	r3, [r7, #15]
    break;
 80130d0:	e005      	b.n	80130de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80130d2:	2303      	movs	r3, #3
 80130d4:	73fb      	strb	r3, [r7, #15]
    break;
 80130d6:	e002      	b.n	80130de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80130d8:	2303      	movs	r3, #3
 80130da:	73fb      	strb	r3, [r7, #15]
    break;
 80130dc:	bf00      	nop
  }
  return usb_status;
 80130de:	7bfb      	ldrb	r3, [r7, #15]
}
 80130e0:	4618      	mov	r0, r3
 80130e2:	3714      	adds	r7, #20
 80130e4:	46bd      	mov	sp, r7
 80130e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ea:	4770      	bx	lr

080130ec <__libc_init_array>:
 80130ec:	b570      	push	{r4, r5, r6, lr}
 80130ee:	4d0d      	ldr	r5, [pc, #52]	; (8013124 <__libc_init_array+0x38>)
 80130f0:	4c0d      	ldr	r4, [pc, #52]	; (8013128 <__libc_init_array+0x3c>)
 80130f2:	1b64      	subs	r4, r4, r5
 80130f4:	10a4      	asrs	r4, r4, #2
 80130f6:	2600      	movs	r6, #0
 80130f8:	42a6      	cmp	r6, r4
 80130fa:	d109      	bne.n	8013110 <__libc_init_array+0x24>
 80130fc:	4d0b      	ldr	r5, [pc, #44]	; (801312c <__libc_init_array+0x40>)
 80130fe:	4c0c      	ldr	r4, [pc, #48]	; (8013130 <__libc_init_array+0x44>)
 8013100:	f000 f82e 	bl	8013160 <_init>
 8013104:	1b64      	subs	r4, r4, r5
 8013106:	10a4      	asrs	r4, r4, #2
 8013108:	2600      	movs	r6, #0
 801310a:	42a6      	cmp	r6, r4
 801310c:	d105      	bne.n	801311a <__libc_init_array+0x2e>
 801310e:	bd70      	pop	{r4, r5, r6, pc}
 8013110:	f855 3b04 	ldr.w	r3, [r5], #4
 8013114:	4798      	blx	r3
 8013116:	3601      	adds	r6, #1
 8013118:	e7ee      	b.n	80130f8 <__libc_init_array+0xc>
 801311a:	f855 3b04 	ldr.w	r3, [r5], #4
 801311e:	4798      	blx	r3
 8013120:	3601      	adds	r6, #1
 8013122:	e7f2      	b.n	801310a <__libc_init_array+0x1e>
 8013124:	08013208 	.word	0x08013208
 8013128:	08013208 	.word	0x08013208
 801312c:	08013208 	.word	0x08013208
 8013130:	0801320c 	.word	0x0801320c

08013134 <memcpy>:
 8013134:	440a      	add	r2, r1
 8013136:	4291      	cmp	r1, r2
 8013138:	f100 33ff 	add.w	r3, r0, #4294967295
 801313c:	d100      	bne.n	8013140 <memcpy+0xc>
 801313e:	4770      	bx	lr
 8013140:	b510      	push	{r4, lr}
 8013142:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013146:	f803 4f01 	strb.w	r4, [r3, #1]!
 801314a:	4291      	cmp	r1, r2
 801314c:	d1f9      	bne.n	8013142 <memcpy+0xe>
 801314e:	bd10      	pop	{r4, pc}

08013150 <memset>:
 8013150:	4402      	add	r2, r0
 8013152:	4603      	mov	r3, r0
 8013154:	4293      	cmp	r3, r2
 8013156:	d100      	bne.n	801315a <memset+0xa>
 8013158:	4770      	bx	lr
 801315a:	f803 1b01 	strb.w	r1, [r3], #1
 801315e:	e7f9      	b.n	8013154 <memset+0x4>

08013160 <_init>:
 8013160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013162:	bf00      	nop
 8013164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013166:	bc08      	pop	{r3}
 8013168:	469e      	mov	lr, r3
 801316a:	4770      	bx	lr

0801316c <_fini>:
 801316c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801316e:	bf00      	nop
 8013170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013172:	bc08      	pop	{r3}
 8013174:	469e      	mov	lr, r3
 8013176:	4770      	bx	lr
