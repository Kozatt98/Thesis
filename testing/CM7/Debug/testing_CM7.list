
testing_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010dec  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08011084  08011084  00021084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801110c  0801110c  00030164  2**0
                  CONTENTS
  4 .ARM          00000008  0801110c  0801110c  0002110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011114  08011114  00030164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011114  08011114  00021114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011118  08011118  00021118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  24000000  0801111c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005830  24000164  08011280  00030164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24005994  08011280  00035994  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027922  00000000  00000000  00030192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047c3  00000000  00000000  00057ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d18  00000000  00000000  0005c278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b60  00000000  00000000  0005df90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040925  00000000  00000000  0005faf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027554  00000000  00000000  000a0415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a073c  00000000  00000000  000c7969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002680a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ebc  00000000  00000000  002680f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000164 	.word	0x24000164
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0801106c 	.word	0x0801106c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000168 	.word	0x24000168
 80002d4:	0801106c 	.word	0x0801106c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3f      	ldr	r3, [pc, #252]	; (80006e0 <SystemInit+0x104>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3e      	ldr	r2, [pc, #248]	; (80006e0 <SystemInit+0x104>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b3b      	ldr	r3, [pc, #236]	; (80006e0 <SystemInit+0x104>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a3a      	ldr	r2, [pc, #232]	; (80006e0 <SystemInit+0x104>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b39      	ldr	r3, [pc, #228]	; (80006e4 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b36      	ldr	r3, [pc, #216]	; (80006e4 <SystemInit+0x108>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a34      	ldr	r2, [pc, #208]	; (80006e4 <SystemInit+0x108>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b33      	ldr	r3, [pc, #204]	; (80006e8 <SystemInit+0x10c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a32      	ldr	r2, [pc, #200]	; (80006e8 <SystemInit+0x10c>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b30      	ldr	r3, [pc, #192]	; (80006e8 <SystemInit+0x10c>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2f      	ldr	r3, [pc, #188]	; (80006e8 <SystemInit+0x10c>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492e      	ldr	r1, [pc, #184]	; (80006e8 <SystemInit+0x10c>)
 8000630:	4b2e      	ldr	r3, [pc, #184]	; (80006ec <SystemInit+0x110>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b2b      	ldr	r3, [pc, #172]	; (80006e4 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <SystemInit+0x108>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a26      	ldr	r2, [pc, #152]	; (80006e4 <SystemInit+0x108>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <SystemInit+0x10c>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b22      	ldr	r3, [pc, #136]	; (80006e8 <SystemInit+0x10c>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000666:	4a22      	ldr	r2, [pc, #136]	; (80006f0 <SystemInit+0x114>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <SystemInit+0x10c>)
 800066c:	4a21      	ldr	r2, [pc, #132]	; (80006f4 <SystemInit+0x118>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1d      	ldr	r3, [pc, #116]	; (80006e8 <SystemInit+0x10c>)
 8000672:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <SystemInit+0x11c>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <SystemInit+0x10c>)
 800067e:	4a1e      	ldr	r2, [pc, #120]	; (80006f8 <SystemInit+0x11c>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <SystemInit+0x10c>)
 800068a:	4a1b      	ldr	r2, [pc, #108]	; (80006f8 <SystemInit+0x11c>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <SystemInit+0x10c>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <SystemInit+0x10c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a13      	ldr	r2, [pc, #76]	; (80006e8 <SystemInit+0x10c>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <SystemInit+0x10c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b15      	ldr	r3, [pc, #84]	; (80006fc <SystemInit+0x120>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a14      	ldr	r2, [pc, #80]	; (80006fc <SystemInit+0x120>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <SystemInit+0x124>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <SystemInit+0x128>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <SystemInit+0x12c>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <SystemInit+0x130>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006ce:	4b04      	ldr	r3, [pc, #16]	; (80006e0 <SystemInit+0x104>)
 80006d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006d4:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000ed00 	.word	0xe000ed00
 80006e4:	52002000 	.word	0x52002000
 80006e8:	58024400 	.word	0x58024400
 80006ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80006f0:	02020200 	.word	0x02020200
 80006f4:	01ff0000 	.word	0x01ff0000
 80006f8:	01010280 	.word	0x01010280
 80006fc:	580000c0 	.word	0x580000c0
 8000700:	5c001000 	.word	0x5c001000
 8000704:	ffff0000 	.word	0xffff0000
 8000708:	51008108 	.word	0x51008108
 800070c:	52004000 	.word	0x52004000

08000710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000716:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800071a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800071c:	bf00      	nop
 800071e:	4b3c      	ldr	r3, [pc, #240]	; (8000810 <main+0x100>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000726:	2b00      	cmp	r3, #0
 8000728:	d004      	beq.n	8000734 <main+0x24>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	1e5a      	subs	r2, r3, #1
 800072e:	607a      	str	r2, [r7, #4]
 8000730:	2b00      	cmp	r3, #0
 8000732:	dcf4      	bgt.n	800071e <main+0xe>
  if ( timeout < 0 )
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2b00      	cmp	r3, #0
 8000738:	da01      	bge.n	800073e <main+0x2e>
  {
  Error_Handler();
 800073a:	f000 fdcb 	bl	80012d4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073e:	f001 f8bd 	bl	80018bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000742:	f000 f877 	bl	8000834 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000746:	f000 f903 	bl	8000950 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800074a:	4b31      	ldr	r3, [pc, #196]	; (8000810 <main+0x100>)
 800074c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000750:	4a2f      	ldr	r2, [pc, #188]	; (8000810 <main+0x100>)
 8000752:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000756:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800075a:	4b2d      	ldr	r3, [pc, #180]	; (8000810 <main+0x100>)
 800075c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000768:	2000      	movs	r0, #0
 800076a:	f005 fc0f 	bl	8005f8c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800076e:	2100      	movs	r1, #0
 8000770:	2000      	movs	r0, #0
 8000772:	f005 fc25 	bl	8005fc0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000776:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800077a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800077c:	bf00      	nop
 800077e:	4b24      	ldr	r3, [pc, #144]	; (8000810 <main+0x100>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000786:	2b00      	cmp	r3, #0
 8000788:	d104      	bne.n	8000794 <main+0x84>
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	1e5a      	subs	r2, r3, #1
 800078e:	607a      	str	r2, [r7, #4]
 8000790:	2b00      	cmp	r3, #0
 8000792:	dcf4      	bgt.n	800077e <main+0x6e>
if ( timeout < 0 )
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2b00      	cmp	r3, #0
 8000798:	da01      	bge.n	800079e <main+0x8e>
{
Error_Handler();
 800079a:	f000 fd9b 	bl	80012d4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079e:	f000 fbc1 	bl	8000f24 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007a2:	f000 faff 	bl	8000da4 <MX_USART3_UART_Init>
  MX_DMA_Init();
 80007a6:	f000 fb49 	bl	8000e3c <MX_DMA_Init>
  MX_ADC1_Init();
 80007aa:	f000 f8fd 	bl	80009a8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80007ae:	f000 fa6b 	bl	8000c88 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 80007b2:	f00f fda1 	bl	80102f8 <MX_USB_DEVICE_Init>
  MX_ADC3_Init();
 80007b6:	f000 f9f5 	bl	8000ba4 <MX_ADC3_Init>
  MX_ADC2_Init();
 80007ba:	f000 f97d 	bl	8000ab8 <MX_ADC2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0);
 80007be:	bf00      	nop
 80007c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007c4:	4813      	ldr	r0, [pc, #76]	; (8000814 <main+0x104>)
 80007c6:	f005 fb95 	bl	8005ef4 <HAL_GPIO_ReadPin>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d0f7      	beq.n	80007c0 <main+0xb0>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer[0], ADC_BUFFER_SIZE); // Channel 0 adc dma
 80007d0:	f640 72fe 	movw	r2, #4094	; 0xffe
 80007d4:	4910      	ldr	r1, [pc, #64]	; (8000818 <main+0x108>)
 80007d6:	4811      	ldr	r0, [pc, #68]	; (800081c <main+0x10c>)
 80007d8:	f001 fd3c 	bl	8002254 <HAL_ADC_Start_DMA>
	  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)buffer[1], ADC_BUFFER_SIZE);
 80007dc:	f640 72fe 	movw	r2, #4094	; 0xffe
 80007e0:	490f      	ldr	r1, [pc, #60]	; (8000820 <main+0x110>)
 80007e2:	4810      	ldr	r0, [pc, #64]	; (8000824 <main+0x114>)
 80007e4:	f001 fd36 	bl	8002254 <HAL_ADC_Start_DMA>
	  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)buffer[2], ADC_BUFFER_SIZE);
 80007e8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80007ec:	490e      	ldr	r1, [pc, #56]	; (8000828 <main+0x118>)
 80007ee:	480f      	ldr	r0, [pc, #60]	; (800082c <main+0x11c>)
 80007f0:	f001 fd30 	bl	8002254 <HAL_ADC_Start_DMA>
	  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 80007f4:	2100      	movs	r1, #0
 80007f6:	480e      	ldr	r0, [pc, #56]	; (8000830 <main+0x120>)
 80007f8:	f00a f9d4 	bl	800aba4 <HAL_TIM_PWM_Start_IT>
	  HAL_Delay(10000);
 80007fc:	f242 7010 	movw	r0, #10000	; 0x2710
 8000800:	f001 f8ee 	bl	80019e0 <HAL_Delay>
	  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000804:	2100      	movs	r1, #0
 8000806:	480a      	ldr	r0, [pc, #40]	; (8000830 <main+0x120>)
 8000808:	f00a f936 	bl	800aa78 <HAL_TIM_PWM_Stop>
	  while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0);
 800080c:	e7d7      	b.n	80007be <main+0xae>
 800080e:	bf00      	nop
 8000810:	58024400 	.word	0x58024400
 8000814:	58020800 	.word	0x58020800
 8000818:	24000568 	.word	0x24000568
 800081c:	24000180 	.word	0x24000180
 8000820:	24001566 	.word	0x24001566
 8000824:	240001e4 	.word	0x240001e4
 8000828:	24002564 	.word	0x24002564
 800082c:	24000248 	.word	0x24000248
 8000830:	24000414 	.word	0x24000414

08000834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b09c      	sub	sp, #112	; 0x70
 8000838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083e:	224c      	movs	r2, #76	; 0x4c
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f010 fb58 	bl	8010ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2220      	movs	r2, #32
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f010 fb52 	bl	8010ef8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000854:	2004      	movs	r0, #4
 8000856:	f006 fe9d 	bl	8007594 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800085a:	2300      	movs	r3, #0
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	4b39      	ldr	r3, [pc, #228]	; (8000944 <SystemClock_Config+0x110>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	4a38      	ldr	r2, [pc, #224]	; (8000944 <SystemClock_Config+0x110>)
 8000864:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000868:	6193      	str	r3, [r2, #24]
 800086a:	4b36      	ldr	r3, [pc, #216]	; (8000944 <SystemClock_Config+0x110>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	4b34      	ldr	r3, [pc, #208]	; (8000948 <SystemClock_Config+0x114>)
 8000876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000878:	4a33      	ldr	r2, [pc, #204]	; (8000948 <SystemClock_Config+0x114>)
 800087a:	f043 0301 	orr.w	r3, r3, #1
 800087e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000880:	4b31      	ldr	r3, [pc, #196]	; (8000948 <SystemClock_Config+0x114>)
 8000882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000884:	f003 0301 	and.w	r3, r3, #1
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800088c:	bf00      	nop
 800088e:	4b2d      	ldr	r3, [pc, #180]	; (8000944 <SystemClock_Config+0x110>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800089a:	d1f8      	bne.n	800088e <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800089c:	4b2b      	ldr	r3, [pc, #172]	; (800094c <SystemClock_Config+0x118>)
 800089e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008a0:	f023 0303 	bic.w	r3, r3, #3
 80008a4:	4a29      	ldr	r2, [pc, #164]	; (800094c <SystemClock_Config+0x118>)
 80008a6:	f043 0302 	orr.w	r3, r3, #2
 80008aa:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80008ac:	2303      	movs	r3, #3
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008b6:	2301      	movs	r3, #1
 80008b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ba:	2340      	movs	r3, #64	; 0x40
 80008bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008be:	2302      	movs	r3, #2
 80008c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008c2:	2302      	movs	r3, #2
 80008c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008c6:	2301      	movs	r3, #1
 80008c8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80008ca:	2378      	movs	r3, #120	; 0x78
 80008cc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008ce:	2302      	movs	r3, #2
 80008d0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008d2:	2304      	movs	r3, #4
 80008d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008d6:	2302      	movs	r3, #2
 80008d8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008da:	230c      	movs	r3, #12
 80008dc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008de:	2300      	movs	r3, #0
 80008e0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ea:	4618      	mov	r0, r3
 80008ec:	f006 febc 	bl	8007668 <HAL_RCC_OscConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008f6:	f000 fced 	bl	80012d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fa:	233f      	movs	r3, #63	; 0x3f
 80008fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fe:	2303      	movs	r3, #3
 8000900:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000906:	2308      	movs	r3, #8
 8000908:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800090a:	2340      	movs	r3, #64	; 0x40
 800090c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800090e:	2340      	movs	r3, #64	; 0x40
 8000910:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000912:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000916:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000918:	2340      	movs	r3, #64	; 0x40
 800091a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2104      	movs	r1, #4
 8000920:	4618      	mov	r0, r3
 8000922:	f007 facf 	bl	8007ec4 <HAL_RCC_ClockConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800092c:	f000 fcd2 	bl	80012d4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_1);
 8000930:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000934:	2100      	movs	r1, #0
 8000936:	2001      	movs	r0, #1
 8000938:	f007 fc7a 	bl	8008230 <HAL_RCC_MCOConfig>
}
 800093c:	bf00      	nop
 800093e:	3770      	adds	r7, #112	; 0x70
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	58024800 	.word	0x58024800
 8000948:	58000400 	.word	0x58000400
 800094c:	58024400 	.word	0x58024400

08000950 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b0b0      	sub	sp, #192	; 0xc0
 8000954:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	22bc      	movs	r2, #188	; 0xbc
 800095a:	2100      	movs	r1, #0
 800095c:	4618      	mov	r0, r3
 800095e:	f010 facb 	bl	8010ef8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000962:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000966:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000968:	2301      	movs	r3, #1
 800096a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 36;
 800096c:	2324      	movs	r3, #36	; 0x24
 800096e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8000970:	2308      	movs	r3, #8
 8000972:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8000974:	2301      	movs	r3, #1
 8000976:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000978:	2302      	movs	r3, #2
 800097a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800097c:	23c0      	movs	r3, #192	; 0xc0
 800097e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000988:	2300      	movs	r3, #0
 800098a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	4618      	mov	r0, r3
 8000992:	f007 fe8d 	bl	80086b0 <HAL_RCCEx_PeriphCLKConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 800099c:	f000 fc9a 	bl	80012d4 <Error_Handler>
  }
}
 80009a0:	bf00      	nop
 80009a2:	37c0      	adds	r7, #192	; 0xc0
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009ba:	463b      	mov	r3, r7
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
 80009c8:	615a      	str	r2, [r3, #20]
 80009ca:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009cc:	4b37      	ldr	r3, [pc, #220]	; (8000aac <MX_ADC1_Init+0x104>)
 80009ce:	4a38      	ldr	r2, [pc, #224]	; (8000ab0 <MX_ADC1_Init+0x108>)
 80009d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009d2:	4b36      	ldr	r3, [pc, #216]	; (8000aac <MX_ADC1_Init+0x104>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80009d8:	4b34      	ldr	r3, [pc, #208]	; (8000aac <MX_ADC1_Init+0x104>)
 80009da:	2210      	movs	r2, #16
 80009dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009de:	4b33      	ldr	r3, [pc, #204]	; (8000aac <MX_ADC1_Init+0x104>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009e4:	4b31      	ldr	r3, [pc, #196]	; (8000aac <MX_ADC1_Init+0x104>)
 80009e6:	2204      	movs	r2, #4
 80009e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009ea:	4b30      	ldr	r3, [pc, #192]	; (8000aac <MX_ADC1_Init+0x104>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009f0:	4b2e      	ldr	r3, [pc, #184]	; (8000aac <MX_ADC1_Init+0x104>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80009f6:	4b2d      	ldr	r3, [pc, #180]	; (8000aac <MX_ADC1_Init+0x104>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009fc:	4b2b      	ldr	r3, [pc, #172]	; (8000aac <MX_ADC1_Init+0x104>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO2;
 8000a02:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <MX_ADC1_Init+0x104>)
 8000a04:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 8000a08:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a0a:	4b28      	ldr	r3, [pc, #160]	; (8000aac <MX_ADC1_Init+0x104>)
 8000a0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000a12:	4b26      	ldr	r3, [pc, #152]	; (8000aac <MX_ADC1_Init+0x104>)
 8000a14:	2203      	movs	r2, #3
 8000a16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000a18:	4b24      	ldr	r3, [pc, #144]	; (8000aac <MX_ADC1_Init+0x104>)
 8000a1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a1e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a20:	4b22      	ldr	r3, [pc, #136]	; (8000aac <MX_ADC1_Init+0x104>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a26:	4b21      	ldr	r3, [pc, #132]	; (8000aac <MX_ADC1_Init+0x104>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a2e:	481f      	ldr	r0, [pc, #124]	; (8000aac <MX_ADC1_Init+0x104>)
 8000a30:	f001 fa6e 	bl	8001f10 <HAL_ADC_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000a3a:	f000 fc4b 	bl	80012d4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4818      	ldr	r0, [pc, #96]	; (8000aac <MX_ADC1_Init+0x104>)
 8000a4a:	f002 fddd 	bl	8003608 <HAL_ADCEx_MultiModeConfigChannel>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000a54:	f000 fc3e 	bl	80012d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <MX_ADC1_Init+0x10c>)
 8000a5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a5c:	2306      	movs	r3, #6
 8000a5e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a64:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a68:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a6a:	2304      	movs	r3, #4
 8000a6c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a72:	2300      	movs	r3, #0
 8000a74:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a76:	463b      	mov	r3, r7
 8000a78:	4619      	mov	r1, r3
 8000a7a:	480c      	ldr	r0, [pc, #48]	; (8000aac <MX_ADC1_Init+0x104>)
 8000a7c:	f001 fefc 	bl	8002878 <HAL_ADC_ConfigChannel>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000a86:	f000 fc25 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  if(HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8000a8a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000a8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000a92:	4806      	ldr	r0, [pc, #24]	; (8000aac <MX_ADC1_Init+0x104>)
 8000a94:	f002 fd22 	bl	80034dc <HAL_ADCEx_Calibration_Start>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_ADC1_Init+0xfa>
  {
	  Error_Handler();
 8000a9e:	f000 fc19 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE END ADC1_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	3728      	adds	r7, #40	; 0x28
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	24000180 	.word	0x24000180
 8000ab0:	40022000 	.word	0x40022000
 8000ab4:	08600004 	.word	0x08600004

08000ab8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b088      	sub	sp, #32
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
 8000acc:	615a      	str	r2, [r3, #20]
 8000ace:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000ad0:	4b30      	ldr	r3, [pc, #192]	; (8000b94 <MX_ADC2_Init+0xdc>)
 8000ad2:	4a31      	ldr	r2, [pc, #196]	; (8000b98 <MX_ADC2_Init+0xe0>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ad6:	4b2f      	ldr	r3, [pc, #188]	; (8000b94 <MX_ADC2_Init+0xdc>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8000adc:	4b2d      	ldr	r3, [pc, #180]	; (8000b94 <MX_ADC2_Init+0xdc>)
 8000ade:	2210      	movs	r2, #16
 8000ae0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ae2:	4b2c      	ldr	r3, [pc, #176]	; (8000b94 <MX_ADC2_Init+0xdc>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ae8:	4b2a      	ldr	r3, [pc, #168]	; (8000b94 <MX_ADC2_Init+0xdc>)
 8000aea:	2204      	movs	r2, #4
 8000aec:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000aee:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <MX_ADC2_Init+0xdc>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000af4:	4b27      	ldr	r3, [pc, #156]	; (8000b94 <MX_ADC2_Init+0xdc>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000afa:	4b26      	ldr	r3, [pc, #152]	; (8000b94 <MX_ADC2_Init+0xdc>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b00:	4b24      	ldr	r3, [pc, #144]	; (8000b94 <MX_ADC2_Init+0xdc>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO2;
 8000b06:	4b23      	ldr	r3, [pc, #140]	; (8000b94 <MX_ADC2_Init+0xdc>)
 8000b08:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 8000b0c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b0e:	4b21      	ldr	r3, [pc, #132]	; (8000b94 <MX_ADC2_Init+0xdc>)
 8000b10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b14:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000b16:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <MX_ADC2_Init+0xdc>)
 8000b18:	2203      	movs	r2, #3
 8000b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000b1c:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <MX_ADC2_Init+0xdc>)
 8000b1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b22:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b24:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <MX_ADC2_Init+0xdc>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <MX_ADC2_Init+0xdc>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b32:	4818      	ldr	r0, [pc, #96]	; (8000b94 <MX_ADC2_Init+0xdc>)
 8000b34:	f001 f9ec 	bl	8001f10 <HAL_ADC_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000b3e:	f000 fbc9 	bl	80012d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000b42:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <MX_ADC2_Init+0xe4>)
 8000b44:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b46:	2306      	movs	r3, #6
 8000b48:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b4e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b52:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b54:	2304      	movs	r3, #4
 8000b56:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	4619      	mov	r1, r3
 8000b64:	480b      	ldr	r0, [pc, #44]	; (8000b94 <MX_ADC2_Init+0xdc>)
 8000b66:	f001 fe87 	bl	8002878 <HAL_ADC_ConfigChannel>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8000b70:	f000 fbb0 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  if(HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8000b74:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000b78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000b7c:	4808      	ldr	r0, [pc, #32]	; (8000ba0 <MX_ADC2_Init+0xe8>)
 8000b7e:	f002 fcad 	bl	80034dc <HAL_ADCEx_Calibration_Start>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_ADC2_Init+0xd4>
  {
	  Error_Handler();
 8000b88:	f000 fba4 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE END ADC2_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	3720      	adds	r7, #32
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	240001e4 	.word	0x240001e4
 8000b98:	40022100 	.word	0x40022100
 8000b9c:	19200040 	.word	0x19200040
 8000ba0:	24000180 	.word	0x24000180

08000ba4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b088      	sub	sp, #32
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
 8000bb8:	615a      	str	r2, [r3, #20]
 8000bba:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000bbc:	4b2f      	ldr	r3, [pc, #188]	; (8000c7c <MX_ADC3_Init+0xd8>)
 8000bbe:	4a30      	ldr	r2, [pc, #192]	; (8000c80 <MX_ADC3_Init+0xdc>)
 8000bc0:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_8B;
 8000bc2:	4b2e      	ldr	r3, [pc, #184]	; (8000c7c <MX_ADC3_Init+0xd8>)
 8000bc4:	2210      	movs	r2, #16
 8000bc6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bc8:	4b2c      	ldr	r3, [pc, #176]	; (8000c7c <MX_ADC3_Init+0xd8>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bce:	4b2b      	ldr	r3, [pc, #172]	; (8000c7c <MX_ADC3_Init+0xd8>)
 8000bd0:	2204      	movs	r2, #4
 8000bd2:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000bd4:	4b29      	ldr	r3, [pc, #164]	; (8000c7c <MX_ADC3_Init+0xd8>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000bda:	4b28      	ldr	r3, [pc, #160]	; (8000c7c <MX_ADC3_Init+0xd8>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000be0:	4b26      	ldr	r3, [pc, #152]	; (8000c7c <MX_ADC3_Init+0xd8>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000be6:	4b25      	ldr	r3, [pc, #148]	; (8000c7c <MX_ADC3_Init+0xd8>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO2;
 8000bec:	4b23      	ldr	r3, [pc, #140]	; (8000c7c <MX_ADC3_Init+0xd8>)
 8000bee:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 8000bf2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000bf4:	4b21      	ldr	r3, [pc, #132]	; (8000c7c <MX_ADC3_Init+0xd8>)
 8000bf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bfa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000bfc:	4b1f      	ldr	r3, [pc, #124]	; (8000c7c <MX_ADC3_Init+0xd8>)
 8000bfe:	2203      	movs	r2, #3
 8000c00:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c02:	4b1e      	ldr	r3, [pc, #120]	; (8000c7c <MX_ADC3_Init+0xd8>)
 8000c04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c08:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <MX_ADC3_Init+0xd8>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000c10:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <MX_ADC3_Init+0xd8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c18:	4818      	ldr	r0, [pc, #96]	; (8000c7c <MX_ADC3_Init+0xd8>)
 8000c1a:	f001 f979 	bl	8001f10 <HAL_ADC_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8000c24:	f000 fb56 	bl	80012d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c2c:	2306      	movs	r3, #6
 8000c2e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c34:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c38:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	4619      	mov	r1, r3
 8000c4a:	480c      	ldr	r0, [pc, #48]	; (8000c7c <MX_ADC3_Init+0xd8>)
 8000c4c:	f001 fe14 	bl	8002878 <HAL_ADC_ConfigChannel>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 8000c56:	f000 fb3d 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  if(HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8000c5a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000c5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000c62:	4808      	ldr	r0, [pc, #32]	; (8000c84 <MX_ADC3_Init+0xe0>)
 8000c64:	f002 fc3a 	bl	80034dc <HAL_ADCEx_Calibration_Start>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_ADC3_Init+0xce>
  {
	  Error_Handler();
 8000c6e:	f000 fb31 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE END ADC3_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	3720      	adds	r7, #32
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	24000248 	.word	0x24000248
 8000c80:	58026000 	.word	0x58026000
 8000c84:	24000180 	.word	0x24000180

08000c88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b096      	sub	sp, #88	; 0x58
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]
 8000caa:	615a      	str	r2, [r3, #20]
 8000cac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	222c      	movs	r2, #44	; 0x2c
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f010 f91f 	bl	8010ef8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cba:	4b38      	ldr	r3, [pc, #224]	; (8000d9c <MX_TIM1_Init+0x114>)
 8000cbc:	4a38      	ldr	r2, [pc, #224]	; (8000da0 <MX_TIM1_Init+0x118>)
 8000cbe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000cc0:	4b36      	ldr	r3, [pc, #216]	; (8000d9c <MX_TIM1_Init+0x114>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc6:	4b35      	ldr	r3, [pc, #212]	; (8000d9c <MX_TIM1_Init+0x114>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5121;
 8000ccc:	4b33      	ldr	r3, [pc, #204]	; (8000d9c <MX_TIM1_Init+0x114>)
 8000cce:	f241 4201 	movw	r2, #5121	; 0x1401
 8000cd2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd4:	4b31      	ldr	r3, [pc, #196]	; (8000d9c <MX_TIM1_Init+0x114>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cda:	4b30      	ldr	r3, [pc, #192]	; (8000d9c <MX_TIM1_Init+0x114>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ce0:	4b2e      	ldr	r3, [pc, #184]	; (8000d9c <MX_TIM1_Init+0x114>)
 8000ce2:	2280      	movs	r2, #128	; 0x80
 8000ce4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ce6:	482d      	ldr	r0, [pc, #180]	; (8000d9c <MX_TIM1_Init+0x114>)
 8000ce8:	f009 fe6e 	bl	800a9c8 <HAL_TIM_PWM_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000cf2:	f000 faef 	bl	80012d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8000cfa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000cfe:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4824      	ldr	r0, [pc, #144]	; (8000d9c <MX_TIM1_Init+0x114>)
 8000d0c:	f00a fd4e 	bl	800b7ac <HAL_TIMEx_MasterConfigSynchronization>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000d16:	f000 fadd 	bl	80012d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d1a:	2360      	movs	r3, #96	; 0x60
 8000d1c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d22:	2300      	movs	r3, #0
 8000d24:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d26:	2300      	movs	r3, #0
 8000d28:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d32:	2300      	movs	r3, #0
 8000d34:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4817      	ldr	r0, [pc, #92]	; (8000d9c <MX_TIM1_Init+0x114>)
 8000d40:	f00a f88a 	bl	800ae58 <HAL_TIM_PWM_ConfigChannel>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000d4a:	f000 fac3 	bl	80012d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d66:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	4619      	mov	r1, r3
 8000d82:	4806      	ldr	r0, [pc, #24]	; (8000d9c <MX_TIM1_Init+0x114>)
 8000d84:	f00a fda0 	bl	800b8c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8000d8e:	f000 faa1 	bl	80012d4 <Error_Handler>
  /* USER CODE BEGIN TIM1_Init 2 */
  //TIM1->CCR1 = 10;

  /* USER CODE END TIM1_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	3758      	adds	r7, #88	; 0x58
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	24000414 	.word	0x24000414
 8000da0:	40010000 	.word	0x40010000

08000da4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000da8:	4b22      	ldr	r3, [pc, #136]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000daa:	4a23      	ldr	r2, [pc, #140]	; (8000e38 <MX_USART3_UART_Init+0x94>)
 8000dac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dae:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000db0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000db4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000db6:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dbc:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dc2:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000dca:	2208      	movs	r2, #8
 8000dcc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dce:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd4:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dda:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000de0:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de6:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dec:	4811      	ldr	r0, [pc, #68]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000dee:	f00a fde9 	bl	800b9c4 <HAL_UART_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000df8:	f000 fa6c 	bl	80012d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	480d      	ldr	r0, [pc, #52]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000e00:	f00b fd86 	bl	800c910 <HAL_UARTEx_SetTxFifoThreshold>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e0a:	f000 fa63 	bl	80012d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4808      	ldr	r0, [pc, #32]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000e12:	f00b fdbb 	bl	800c98c <HAL_UARTEx_SetRxFifoThreshold>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e1c:	f000 fa5a 	bl	80012d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e20:	4804      	ldr	r0, [pc, #16]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000e22:	f00b fd3c 	bl	800c89e <HAL_UARTEx_DisableFifoMode>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e2c:	f000 fa52 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	24000460 	.word	0x24000460
 8000e38:	40004800 	.word	0x40004800

08000e3c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e42:	4b35      	ldr	r3, [pc, #212]	; (8000f18 <MX_DMA_Init+0xdc>)
 8000e44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e48:	4a33      	ldr	r2, [pc, #204]	; (8000f18 <MX_DMA_Init+0xdc>)
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e52:	4b31      	ldr	r3, [pc, #196]	; (8000f18 <MX_DMA_Init+0xdc>)
 8000e54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e60:	4b2d      	ldr	r3, [pc, #180]	; (8000f18 <MX_DMA_Init+0xdc>)
 8000e62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e66:	4a2c      	ldr	r2, [pc, #176]	; (8000f18 <MX_DMA_Init+0xdc>)
 8000e68:	f043 0302 	orr.w	r3, r3, #2
 8000e6c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e70:	4b29      	ldr	r3, [pc, #164]	; (8000f18 <MX_DMA_Init+0xdc>)
 8000e72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000e7e:	4b27      	ldr	r3, [pc, #156]	; (8000f1c <MX_DMA_Init+0xe0>)
 8000e80:	4a27      	ldr	r2, [pc, #156]	; (8000f20 <MX_DMA_Init+0xe4>)
 8000e82:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Request = DMA_REQUEST_MEM2MEM;
 8000e84:	4b25      	ldr	r3, [pc, #148]	; (8000f1c <MX_DMA_Init+0xe0>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000e8a:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <MX_DMA_Init+0xe0>)
 8000e8c:	2280      	movs	r2, #128	; 0x80
 8000e8e:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000e90:	4b22      	ldr	r3, [pc, #136]	; (8000f1c <MX_DMA_Init+0xe0>)
 8000e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e96:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000e98:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <MX_DMA_Init+0xe0>)
 8000e9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e9e:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ea0:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <MX_DMA_Init+0xe0>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <MX_DMA_Init+0xe0>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000eac:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <MX_DMA_Init+0xe0>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <MX_DMA_Init+0xe0>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000eb8:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <MX_DMA_Init+0xe0>)
 8000eba:	2204      	movs	r2, #4
 8000ebc:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000ebe:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <MX_DMA_Init+0xe0>)
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000ec4:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <MX_DMA_Init+0xe0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000eca:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <MX_DMA_Init+0xe0>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000ed0:	4812      	ldr	r0, [pc, #72]	; (8000f1c <MX_DMA_Init+0xe0>)
 8000ed2:	f002 fd87 	bl	80039e4 <HAL_DMA_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_DMA_Init+0xa4>
  {
    Error_Handler( );
 8000edc:	f000 f9fa 	bl	80012d4 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	200b      	movs	r0, #11
 8000ee6:	f002 fd48 	bl	800397a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000eea:	200b      	movs	r0, #11
 8000eec:	f002 fd5f 	bl	80039ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	200c      	movs	r0, #12
 8000ef6:	f002 fd40 	bl	800397a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000efa:	200c      	movs	r0, #12
 8000efc:	f002 fd57 	bl	80039ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2100      	movs	r1, #0
 8000f04:	200d      	movs	r0, #13
 8000f06:	f002 fd38 	bl	800397a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000f0a:	200d      	movs	r0, #13
 8000f0c:	f002 fd4f 	bl	80039ae <HAL_NVIC_EnableIRQ>

}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	58024400 	.word	0x58024400
 8000f1c:	240004f0 	.word	0x240004f0
 8000f20:	40020410 	.word	0x40020410

08000f24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08c      	sub	sp, #48	; 0x30
 8000f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2a:	f107 031c 	add.w	r3, r7, #28
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3a:	4b70      	ldr	r3, [pc, #448]	; (80010fc <MX_GPIO_Init+0x1d8>)
 8000f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f40:	4a6e      	ldr	r2, [pc, #440]	; (80010fc <MX_GPIO_Init+0x1d8>)
 8000f42:	f043 0304 	orr.w	r3, r3, #4
 8000f46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f4a:	4b6c      	ldr	r3, [pc, #432]	; (80010fc <MX_GPIO_Init+0x1d8>)
 8000f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f50:	f003 0304 	and.w	r3, r3, #4
 8000f54:	61bb      	str	r3, [r7, #24]
 8000f56:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f58:	4b68      	ldr	r3, [pc, #416]	; (80010fc <MX_GPIO_Init+0x1d8>)
 8000f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5e:	4a67      	ldr	r2, [pc, #412]	; (80010fc <MX_GPIO_Init+0x1d8>)
 8000f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f68:	4b64      	ldr	r3, [pc, #400]	; (80010fc <MX_GPIO_Init+0x1d8>)
 8000f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f76:	4b61      	ldr	r3, [pc, #388]	; (80010fc <MX_GPIO_Init+0x1d8>)
 8000f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7c:	4a5f      	ldr	r2, [pc, #380]	; (80010fc <MX_GPIO_Init+0x1d8>)
 8000f7e:	f043 0302 	orr.w	r3, r3, #2
 8000f82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f86:	4b5d      	ldr	r3, [pc, #372]	; (80010fc <MX_GPIO_Init+0x1d8>)
 8000f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f94:	4b59      	ldr	r3, [pc, #356]	; (80010fc <MX_GPIO_Init+0x1d8>)
 8000f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f9a:	4a58      	ldr	r2, [pc, #352]	; (80010fc <MX_GPIO_Init+0x1d8>)
 8000f9c:	f043 0320 	orr.w	r3, r3, #32
 8000fa0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fa4:	4b55      	ldr	r3, [pc, #340]	; (80010fc <MX_GPIO_Init+0x1d8>)
 8000fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000faa:	f003 0320 	and.w	r3, r3, #32
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb2:	4b52      	ldr	r3, [pc, #328]	; (80010fc <MX_GPIO_Init+0x1d8>)
 8000fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb8:	4a50      	ldr	r2, [pc, #320]	; (80010fc <MX_GPIO_Init+0x1d8>)
 8000fba:	f043 0308 	orr.w	r3, r3, #8
 8000fbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc2:	4b4e      	ldr	r3, [pc, #312]	; (80010fc <MX_GPIO_Init+0x1d8>)
 8000fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc8:	f003 0308 	and.w	r3, r3, #8
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd0:	4b4a      	ldr	r3, [pc, #296]	; (80010fc <MX_GPIO_Init+0x1d8>)
 8000fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd6:	4a49      	ldr	r2, [pc, #292]	; (80010fc <MX_GPIO_Init+0x1d8>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fe0:	4b46      	ldr	r3, [pc, #280]	; (80010fc <MX_GPIO_Init+0x1d8>)
 8000fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fee:	4b43      	ldr	r3, [pc, #268]	; (80010fc <MX_GPIO_Init+0x1d8>)
 8000ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff4:	4a41      	ldr	r2, [pc, #260]	; (80010fc <MX_GPIO_Init+0x1d8>)
 8000ff6:	f043 0310 	orr.w	r3, r3, #16
 8000ffa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ffe:	4b3f      	ldr	r3, [pc, #252]	; (80010fc <MX_GPIO_Init+0x1d8>)
 8001000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001004:	f003 0310 	and.w	r3, r3, #16
 8001008:	603b      	str	r3, [r7, #0]
 800100a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	f244 0101 	movw	r1, #16385	; 0x4001
 8001012:	483b      	ldr	r0, [pc, #236]	; (8001100 <MX_GPIO_Init+0x1dc>)
 8001014:	f004 ff86 	bl	8005f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MUX_C_GPIO_Port, MUX_C_Pin, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800101e:	4839      	ldr	r0, [pc, #228]	; (8001104 <MX_GPIO_Init+0x1e0>)
 8001020:	f004 ff80 	bl	8005f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MUX_A_Pin|MUX_B_Pin, GPIO_PIN_SET);
 8001024:	2201      	movs	r2, #1
 8001026:	2103      	movs	r1, #3
 8001028:	4837      	ldr	r0, [pc, #220]	; (8001108 <MX_GPIO_Init+0x1e4>)
 800102a:	f004 ff7b 	bl	8005f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Sending2_Pin|Sendeng_done_Pin|USB_test_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	21e0      	movs	r1, #224	; 0xe0
 8001032:	4835      	ldr	r0, [pc, #212]	; (8001108 <MX_GPIO_Init+0x1e4>)
 8001034:	f004 ff76 	bl	8005f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	2102      	movs	r1, #2
 800103c:	4833      	ldr	r0, [pc, #204]	; (800110c <MX_GPIO_Init+0x1e8>)
 800103e:	f004 ff71 	bl	8005f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001042:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001046:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001048:	2300      	movs	r3, #0
 800104a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	4619      	mov	r1, r3
 8001056:	482e      	ldr	r0, [pc, #184]	; (8001110 <MX_GPIO_Init+0x1ec>)
 8001058:	f004 fd9c 	bl	8005b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800105c:	f244 0301 	movw	r3, #16385	; 0x4001
 8001060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001062:	2301      	movs	r3, #1
 8001064:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106e:	f107 031c 	add.w	r3, r7, #28
 8001072:	4619      	mov	r1, r3
 8001074:	4822      	ldr	r0, [pc, #136]	; (8001100 <MX_GPIO_Init+0x1dc>)
 8001076:	f004 fd8d 	bl	8005b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : MUX_C_Pin */
  GPIO_InitStruct.Pin = MUX_C_Pin;
 800107a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800107e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	2301      	movs	r3, #1
 8001082:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MUX_C_GPIO_Port, &GPIO_InitStruct);
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	4619      	mov	r1, r3
 8001092:	481c      	ldr	r0, [pc, #112]	; (8001104 <MX_GPIO_Init+0x1e0>)
 8001094:	f004 fd7e 	bl	8005b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001098:	f44f 7300 	mov.w	r3, #512	; 0x200
 800109c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80010aa:	2300      	movs	r3, #0
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	4619      	mov	r1, r3
 80010b4:	4816      	ldr	r0, [pc, #88]	; (8001110 <MX_GPIO_Init+0x1ec>)
 80010b6:	f004 fd6d 	bl	8005b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX_A_Pin MUX_B_Pin Sending2_Pin Sendeng_done_Pin
                           USB_test_Pin */
  GPIO_InitStruct.Pin = MUX_A_Pin|MUX_B_Pin|Sending2_Pin|Sendeng_done_Pin
 80010ba:	23e3      	movs	r3, #227	; 0xe3
 80010bc:	61fb      	str	r3, [r7, #28]
                          |USB_test_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010be:	2301      	movs	r3, #1
 80010c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	4619      	mov	r1, r3
 80010d0:	480d      	ldr	r0, [pc, #52]	; (8001108 <MX_GPIO_Init+0x1e4>)
 80010d2:	f004 fd5f 	bl	8005b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010d6:	2302      	movs	r3, #2
 80010d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010da:	2301      	movs	r3, #1
 80010dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	4619      	mov	r1, r3
 80010ec:	4807      	ldr	r0, [pc, #28]	; (800110c <MX_GPIO_Init+0x1e8>)
 80010ee:	f004 fd51 	bl	8005b94 <HAL_GPIO_Init>

}
 80010f2:	bf00      	nop
 80010f4:	3730      	adds	r7, #48	; 0x30
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	58024400 	.word	0x58024400
 8001100:	58020400 	.word	0x58020400
 8001104:	58021400 	.word	0x58021400
 8001108:	58020c00 	.word	0x58020c00
 800110c:	58021000 	.word	0x58021000
 8001110:	58020800 	.word	0x58020800

08001114 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void data_send(uint8_t is_first);
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	data_send(0u);
 800111c:	2000      	movs	r0, #0
 800111e:	f000 f869 	bl	80011f4 <data_send>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc){
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]

	data_send(1u);
 8001132:	2001      	movs	r0, #1
 8001134:	f000 f85e 	bl	80011f4 <data_send>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <data_received>:

void data_received(void){
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
	uint8_t first_byte = input_buffer[0];
 8001146:	4b26      	ldr	r3, [pc, #152]	; (80011e0 <data_received+0xa0>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	71fb      	strb	r3, [r7, #7]
	uint8_t A = (first_byte & 0b0000100) >> 2;
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	109b      	asrs	r3, r3, #2
 8001150:	b2db      	uxtb	r3, r3
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	71bb      	strb	r3, [r7, #6]
	uint8_t B = (first_byte & 0b0000010) >> 1;
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	105b      	asrs	r3, r3, #1
 800115c:	b2db      	uxtb	r3, r3
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	717b      	strb	r3, [r7, #5]
	uint8_t C = (first_byte & 0b0000001) >> 0;
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	713b      	strb	r3, [r7, #4]

	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, C);
 800116c:	793b      	ldrb	r3, [r7, #4]
 800116e:	461a      	mov	r2, r3
 8001170:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001174:	481b      	ldr	r0, [pc, #108]	; (80011e4 <data_received+0xa4>)
 8001176:	f004 fed5 	bl	8005f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, B);
 800117a:	797b      	ldrb	r3, [r7, #5]
 800117c:	461a      	mov	r2, r3
 800117e:	2102      	movs	r1, #2
 8001180:	4819      	ldr	r0, [pc, #100]	; (80011e8 <data_received+0xa8>)
 8001182:	f004 fecf 	bl	8005f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, A);
 8001186:	79bb      	ldrb	r3, [r7, #6]
 8001188:	461a      	mov	r2, r3
 800118a:	2101      	movs	r1, #1
 800118c:	4815      	ldr	r0, [pc, #84]	; (80011e4 <data_received+0xa4>)
 800118e:	f004 fec9 	bl	8005f24 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MUX_A_GPIO_Port, MUX_A_Pin, !A);
 8001192:	79bb      	ldrb	r3, [r7, #6]
 8001194:	2b00      	cmp	r3, #0
 8001196:	bf0c      	ite	eq
 8001198:	2301      	moveq	r3, #1
 800119a:	2300      	movne	r3, #0
 800119c:	b2db      	uxtb	r3, r3
 800119e:	461a      	mov	r2, r3
 80011a0:	2101      	movs	r1, #1
 80011a2:	4812      	ldr	r0, [pc, #72]	; (80011ec <data_received+0xac>)
 80011a4:	f004 febe 	bl	8005f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX_B_GPIO_Port, MUX_B_Pin, !B);
 80011a8:	797b      	ldrb	r3, [r7, #5]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	bf0c      	ite	eq
 80011ae:	2301      	moveq	r3, #1
 80011b0:	2300      	movne	r3, #0
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	461a      	mov	r2, r3
 80011b6:	2102      	movs	r1, #2
 80011b8:	480c      	ldr	r0, [pc, #48]	; (80011ec <data_received+0xac>)
 80011ba:	f004 feb3 	bl	8005f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX_C_GPIO_Port, MUX_C_Pin, !C);
 80011be:	793b      	ldrb	r3, [r7, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	bf0c      	ite	eq
 80011c4:	2301      	moveq	r3, #1
 80011c6:	2300      	movne	r3, #0
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	461a      	mov	r2, r3
 80011cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011d0:	4807      	ldr	r0, [pc, #28]	; (80011f0 <data_received+0xb0>)
 80011d2:	f004 fea7 	bl	8005f24 <HAL_GPIO_WritePin>

}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	24003564 	.word	0x24003564
 80011e4:	58020400 	.word	0x58020400
 80011e8:	58021000 	.word	0x58021000
 80011ec:	58020c00 	.word	0x58020c00
 80011f0:	58021400 	.word	0x58021400

080011f4 <data_send>:

void data_send(uint8_t is_first){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
	uint8_t* to_send = malloc((ADC_BUFFER_SIZE / 2 + 1) * sizeof(uint8_t) * CHANNEL_COUNT);
 80011fe:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001202:	f00f fe63 	bl	8010ecc <malloc>
 8001206:	4603      	mov	r3, r0
 8001208:	617b      	str	r3, [r7, #20]

//	uint16_t to_send_bytes =  ADC_BUFFER_SIZE / 2 * sizeof(uint8_t);
	uint16_t to_send_data_len =  ADC_BUFFER_SIZE / 2;
 800120a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800120e:	827b      	strh	r3, [r7, #18]
//	if(is_first){
//		memcpy(to_send + 1, buffer[channel_id], to_send_bytes);
//	}else{
//		memcpy(to_send + 1, buffer[channel_id] + to_send_data_len, to_send_bytes);
//	}
	uint8_t channel0[] = {0};
 8001210:	2300      	movs	r3, #0
 8001212:	743b      	strb	r3, [r7, #16]
	uint8_t channel1[] = {1};
 8001214:	2301      	movs	r3, #1
 8001216:	733b      	strb	r3, [r7, #12]
	uint8_t channel2[] = {2};
 8001218:	2302      	movs	r3, #2
 800121a:	723b      	strb	r3, [r7, #8]
 800121c:	7c3a      	ldrb	r2, [r7, #16]

	memcpy(to_send, channel0, 1);
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	701a      	strb	r2, [r3, #0]
	memcpy(to_send + 2048, channel1, 1);
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001228:	7b3a      	ldrb	r2, [r7, #12]
 800122a:	701a      	strb	r2, [r3, #0]
	memcpy(to_send + 4096, channel2, 1);
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001232:	7a3a      	ldrb	r2, [r7, #8]
 8001234:	701a      	strb	r2, [r3, #0]
	if(is_first){
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d018      	beq.n	800126e <data_send+0x7a>
		memcpy(to_send + 1, buffer[0], to_send_data_len);
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	3301      	adds	r3, #1
 8001240:	8a7a      	ldrh	r2, [r7, #18]
 8001242:	4921      	ldr	r1, [pc, #132]	; (80012c8 <data_send+0xd4>)
 8001244:	4618      	mov	r0, r3
 8001246:	f00f fe49 	bl	8010edc <memcpy>
		memcpy(to_send + 2049, buffer[1], to_send_data_len);
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	f603 0301 	addw	r3, r3, #2049	; 0x801
 8001250:	8a7a      	ldrh	r2, [r7, #18]
 8001252:	491e      	ldr	r1, [pc, #120]	; (80012cc <data_send+0xd8>)
 8001254:	4618      	mov	r0, r3
 8001256:	f00f fe41 	bl	8010edc <memcpy>
		memcpy(to_send + 4097, buffer[2], to_send_data_len);
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	f241 0301 	movw	r3, #4097	; 0x1001
 8001260:	4413      	add	r3, r2
 8001262:	8a7a      	ldrh	r2, [r7, #18]
 8001264:	491a      	ldr	r1, [pc, #104]	; (80012d0 <data_send+0xdc>)
 8001266:	4618      	mov	r0, r3
 8001268:	f00f fe38 	bl	8010edc <memcpy>
 800126c:	e01d      	b.n	80012aa <data_send+0xb6>
	}else{
		memcpy(to_send + 1, buffer[0] + to_send_data_len, to_send_data_len);
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	1c58      	adds	r0, r3, #1
 8001272:	8a7b      	ldrh	r3, [r7, #18]
 8001274:	4a14      	ldr	r2, [pc, #80]	; (80012c8 <data_send+0xd4>)
 8001276:	4413      	add	r3, r2
 8001278:	8a7a      	ldrh	r2, [r7, #18]
 800127a:	4619      	mov	r1, r3
 800127c:	f00f fe2e 	bl	8010edc <memcpy>
		memcpy(to_send + 2049, buffer[1] + to_send_data_len, to_send_data_len);
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f603 0001 	addw	r0, r3, #2049	; 0x801
 8001286:	8a7b      	ldrh	r3, [r7, #18]
 8001288:	4a10      	ldr	r2, [pc, #64]	; (80012cc <data_send+0xd8>)
 800128a:	4413      	add	r3, r2
 800128c:	8a7a      	ldrh	r2, [r7, #18]
 800128e:	4619      	mov	r1, r3
 8001290:	f00f fe24 	bl	8010edc <memcpy>
		memcpy(to_send + 4097, buffer[2] + to_send_data_len, to_send_data_len);
 8001294:	697a      	ldr	r2, [r7, #20]
 8001296:	f241 0301 	movw	r3, #4097	; 0x1001
 800129a:	4413      	add	r3, r2
 800129c:	8a7a      	ldrh	r2, [r7, #18]
 800129e:	490c      	ldr	r1, [pc, #48]	; (80012d0 <data_send+0xdc>)
 80012a0:	4411      	add	r1, r2
 80012a2:	8a7a      	ldrh	r2, [r7, #18]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f00f fe19 	bl	8010edc <memcpy>
	}

	CDC_Transmit_FS(to_send, (to_send_data_len + 1) * CHANNEL_COUNT);
 80012aa:	8a7b      	ldrh	r3, [r7, #18]
 80012ac:	3301      	adds	r3, #1
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	461a      	mov	r2, r3
 80012b2:	0052      	lsls	r2, r2, #1
 80012b4:	4413      	add	r3, r2
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	4619      	mov	r1, r3
 80012ba:	6978      	ldr	r0, [r7, #20]
 80012bc:	f00f f938 	bl	8010530 <CDC_Transmit_FS>
}
 80012c0:	bf00      	nop
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	24000568 	.word	0x24000568
 80012cc:	24001566 	.word	0x24001566
 80012d0:	24002564 	.word	0x24002564

080012d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012da:	b672      	cpsid	i
}
 80012dc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  int a = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
	  int b = 1;
 80012e2:	2301      	movs	r3, #1
 80012e4:	603b      	str	r3, [r7, #0]
  {
 80012e6:	e7fa      	b.n	80012de <Error_Handler+0xa>

080012e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	4b13      	ldr	r3, [pc, #76]	; (800133c <HAL_MspInit+0x54>)
 80012f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012f4:	4a11      	ldr	r2, [pc, #68]	; (800133c <HAL_MspInit+0x54>)
 80012f6:	f043 0302 	orr.w	r3, r3, #2
 80012fa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012fe:	4b0f      	ldr	r3, [pc, #60]	; (800133c <HAL_MspInit+0x54>)
 8001300:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <HAL_MspInit+0x54>)
 800130e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001312:	4a0a      	ldr	r2, [pc, #40]	; (800133c <HAL_MspInit+0x54>)
 8001314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001318:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <HAL_MspInit+0x54>)
 800131e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001322:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	683b      	ldr	r3, [r7, #0]

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 800132a:	f000 fb9d 	bl	8001a68 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 800132e:	2002      	movs	r0, #2
 8001330:	f000 fb86 	bl	8001a40 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	58024400 	.word	0x58024400

08001340 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08e      	sub	sp, #56	; 0x38
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a9d      	ldr	r2, [pc, #628]	; (80015d4 <HAL_ADC_MspInit+0x294>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d16b      	bne.n	800143a <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001362:	4b9d      	ldr	r3, [pc, #628]	; (80015d8 <HAL_ADC_MspInit+0x298>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	3301      	adds	r3, #1
 8001368:	4a9b      	ldr	r2, [pc, #620]	; (80015d8 <HAL_ADC_MspInit+0x298>)
 800136a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800136c:	4b9a      	ldr	r3, [pc, #616]	; (80015d8 <HAL_ADC_MspInit+0x298>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d10e      	bne.n	8001392 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001374:	4b99      	ldr	r3, [pc, #612]	; (80015dc <HAL_ADC_MspInit+0x29c>)
 8001376:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800137a:	4a98      	ldr	r2, [pc, #608]	; (80015dc <HAL_ADC_MspInit+0x29c>)
 800137c:	f043 0320 	orr.w	r3, r3, #32
 8001380:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001384:	4b95      	ldr	r3, [pc, #596]	; (80015dc <HAL_ADC_MspInit+0x29c>)
 8001386:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800138a:	f003 0320 	and.w	r3, r3, #32
 800138e:	623b      	str	r3, [r7, #32]
 8001390:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001392:	4b92      	ldr	r3, [pc, #584]	; (80015dc <HAL_ADC_MspInit+0x29c>)
 8001394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001398:	4a90      	ldr	r2, [pc, #576]	; (80015dc <HAL_ADC_MspInit+0x29c>)
 800139a:	f043 0320 	orr.w	r3, r3, #32
 800139e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013a2:	4b8e      	ldr	r3, [pc, #568]	; (80015dc <HAL_ADC_MspInit+0x29c>)
 80013a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a8:	f003 0320 	and.w	r3, r3, #32
 80013ac:	61fb      	str	r3, [r7, #28]
 80013ae:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b6:	2303      	movs	r3, #3
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c2:	4619      	mov	r1, r3
 80013c4:	4886      	ldr	r0, [pc, #536]	; (80015e0 <HAL_ADC_MspInit+0x2a0>)
 80013c6:	f004 fbe5 	bl	8005b94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80013ca:	4b86      	ldr	r3, [pc, #536]	; (80015e4 <HAL_ADC_MspInit+0x2a4>)
 80013cc:	4a86      	ldr	r2, [pc, #536]	; (80015e8 <HAL_ADC_MspInit+0x2a8>)
 80013ce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80013d0:	4b84      	ldr	r3, [pc, #528]	; (80015e4 <HAL_ADC_MspInit+0x2a4>)
 80013d2:	2209      	movs	r2, #9
 80013d4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013d6:	4b83      	ldr	r3, [pc, #524]	; (80015e4 <HAL_ADC_MspInit+0x2a4>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013dc:	4b81      	ldr	r3, [pc, #516]	; (80015e4 <HAL_ADC_MspInit+0x2a4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013e2:	4b80      	ldr	r3, [pc, #512]	; (80015e4 <HAL_ADC_MspInit+0x2a4>)
 80013e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013e8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013ea:	4b7e      	ldr	r3, [pc, #504]	; (80015e4 <HAL_ADC_MspInit+0x2a4>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013f0:	4b7c      	ldr	r3, [pc, #496]	; (80015e4 <HAL_ADC_MspInit+0x2a4>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80013f6:	4b7b      	ldr	r3, [pc, #492]	; (80015e4 <HAL_ADC_MspInit+0x2a4>)
 80013f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013fc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80013fe:	4b79      	ldr	r3, [pc, #484]	; (80015e4 <HAL_ADC_MspInit+0x2a4>)
 8001400:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001404:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001406:	4b77      	ldr	r3, [pc, #476]	; (80015e4 <HAL_ADC_MspInit+0x2a4>)
 8001408:	2200      	movs	r2, #0
 800140a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800140c:	4875      	ldr	r0, [pc, #468]	; (80015e4 <HAL_ADC_MspInit+0x2a4>)
 800140e:	f002 fae9 	bl	80039e4 <HAL_DMA_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <HAL_ADC_MspInit+0xdc>
    {
      Error_Handler();
 8001418:	f7ff ff5c 	bl	80012d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a71      	ldr	r2, [pc, #452]	; (80015e4 <HAL_ADC_MspInit+0x2a4>)
 8001420:	64da      	str	r2, [r3, #76]	; 0x4c
 8001422:	4a70      	ldr	r2, [pc, #448]	; (80015e4 <HAL_ADC_MspInit+0x2a4>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001428:	2200      	movs	r2, #0
 800142a:	2100      	movs	r1, #0
 800142c:	2012      	movs	r0, #18
 800142e:	f002 faa4 	bl	800397a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001432:	2012      	movs	r0, #18
 8001434:	f002 fabb 	bl	80039ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001438:	e0c8      	b.n	80015cc <HAL_ADC_MspInit+0x28c>
  else if(hadc->Instance==ADC2)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a6b      	ldr	r2, [pc, #428]	; (80015ec <HAL_ADC_MspInit+0x2ac>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d16b      	bne.n	800151c <HAL_ADC_MspInit+0x1dc>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001444:	4b64      	ldr	r3, [pc, #400]	; (80015d8 <HAL_ADC_MspInit+0x298>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	3301      	adds	r3, #1
 800144a:	4a63      	ldr	r2, [pc, #396]	; (80015d8 <HAL_ADC_MspInit+0x298>)
 800144c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800144e:	4b62      	ldr	r3, [pc, #392]	; (80015d8 <HAL_ADC_MspInit+0x298>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d10e      	bne.n	8001474 <HAL_ADC_MspInit+0x134>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001456:	4b61      	ldr	r3, [pc, #388]	; (80015dc <HAL_ADC_MspInit+0x29c>)
 8001458:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800145c:	4a5f      	ldr	r2, [pc, #380]	; (80015dc <HAL_ADC_MspInit+0x29c>)
 800145e:	f043 0320 	orr.w	r3, r3, #32
 8001462:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001466:	4b5d      	ldr	r3, [pc, #372]	; (80015dc <HAL_ADC_MspInit+0x29c>)
 8001468:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800146c:	f003 0320 	and.w	r3, r3, #32
 8001470:	61bb      	str	r3, [r7, #24]
 8001472:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001474:	4b59      	ldr	r3, [pc, #356]	; (80015dc <HAL_ADC_MspInit+0x29c>)
 8001476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147a:	4a58      	ldr	r2, [pc, #352]	; (80015dc <HAL_ADC_MspInit+0x29c>)
 800147c:	f043 0320 	orr.w	r3, r3, #32
 8001480:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001484:	4b55      	ldr	r3, [pc, #340]	; (80015dc <HAL_ADC_MspInit+0x29c>)
 8001486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148a:	f003 0320 	and.w	r3, r3, #32
 800148e:	617b      	str	r3, [r7, #20]
 8001490:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001492:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001498:	2303      	movs	r3, #3
 800149a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a4:	4619      	mov	r1, r3
 80014a6:	484e      	ldr	r0, [pc, #312]	; (80015e0 <HAL_ADC_MspInit+0x2a0>)
 80014a8:	f004 fb74 	bl	8005b94 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 80014ac:	4b50      	ldr	r3, [pc, #320]	; (80015f0 <HAL_ADC_MspInit+0x2b0>)
 80014ae:	4a51      	ldr	r2, [pc, #324]	; (80015f4 <HAL_ADC_MspInit+0x2b4>)
 80014b0:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80014b2:	4b4f      	ldr	r3, [pc, #316]	; (80015f0 <HAL_ADC_MspInit+0x2b0>)
 80014b4:	220a      	movs	r2, #10
 80014b6:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014b8:	4b4d      	ldr	r3, [pc, #308]	; (80015f0 <HAL_ADC_MspInit+0x2b0>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80014be:	4b4c      	ldr	r3, [pc, #304]	; (80015f0 <HAL_ADC_MspInit+0x2b0>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80014c4:	4b4a      	ldr	r3, [pc, #296]	; (80015f0 <HAL_ADC_MspInit+0x2b0>)
 80014c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ca:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014cc:	4b48      	ldr	r3, [pc, #288]	; (80015f0 <HAL_ADC_MspInit+0x2b0>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014d2:	4b47      	ldr	r3, [pc, #284]	; (80015f0 <HAL_ADC_MspInit+0x2b0>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80014d8:	4b45      	ldr	r3, [pc, #276]	; (80015f0 <HAL_ADC_MspInit+0x2b0>)
 80014da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014de:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 80014e0:	4b43      	ldr	r3, [pc, #268]	; (80015f0 <HAL_ADC_MspInit+0x2b0>)
 80014e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014e6:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014e8:	4b41      	ldr	r3, [pc, #260]	; (80015f0 <HAL_ADC_MspInit+0x2b0>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80014ee:	4840      	ldr	r0, [pc, #256]	; (80015f0 <HAL_ADC_MspInit+0x2b0>)
 80014f0:	f002 fa78 	bl	80039e4 <HAL_DMA_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_ADC_MspInit+0x1be>
      Error_Handler();
 80014fa:	f7ff feeb 	bl	80012d4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a3b      	ldr	r2, [pc, #236]	; (80015f0 <HAL_ADC_MspInit+0x2b0>)
 8001502:	64da      	str	r2, [r3, #76]	; 0x4c
 8001504:	4a3a      	ldr	r2, [pc, #232]	; (80015f0 <HAL_ADC_MspInit+0x2b0>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2100      	movs	r1, #0
 800150e:	2012      	movs	r0, #18
 8001510:	f002 fa33 	bl	800397a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001514:	2012      	movs	r0, #18
 8001516:	f002 fa4a 	bl	80039ae <HAL_NVIC_EnableIRQ>
}
 800151a:	e057      	b.n	80015cc <HAL_ADC_MspInit+0x28c>
  else if(hadc->Instance==ADC3)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a35      	ldr	r2, [pc, #212]	; (80015f8 <HAL_ADC_MspInit+0x2b8>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d152      	bne.n	80015cc <HAL_ADC_MspInit+0x28c>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001526:	4b2d      	ldr	r3, [pc, #180]	; (80015dc <HAL_ADC_MspInit+0x29c>)
 8001528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152c:	4a2b      	ldr	r2, [pc, #172]	; (80015dc <HAL_ADC_MspInit+0x29c>)
 800152e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001532:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001536:	4b29      	ldr	r3, [pc, #164]	; (80015dc <HAL_ADC_MspInit+0x29c>)
 8001538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001544:	4b25      	ldr	r3, [pc, #148]	; (80015dc <HAL_ADC_MspInit+0x29c>)
 8001546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154a:	4a24      	ldr	r2, [pc, #144]	; (80015dc <HAL_ADC_MspInit+0x29c>)
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001554:	4b21      	ldr	r3, [pc, #132]	; (80015dc <HAL_ADC_MspInit+0x29c>)
 8001556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001562:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001566:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800156a:	f000 fa8d 	bl	8001a88 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream2;
 800156e:	4b23      	ldr	r3, [pc, #140]	; (80015fc <HAL_ADC_MspInit+0x2bc>)
 8001570:	4a23      	ldr	r2, [pc, #140]	; (8001600 <HAL_ADC_MspInit+0x2c0>)
 8001572:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001574:	4b21      	ldr	r3, [pc, #132]	; (80015fc <HAL_ADC_MspInit+0x2bc>)
 8001576:	2273      	movs	r2, #115	; 0x73
 8001578:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800157a:	4b20      	ldr	r3, [pc, #128]	; (80015fc <HAL_ADC_MspInit+0x2bc>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001580:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <HAL_ADC_MspInit+0x2bc>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001586:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <HAL_ADC_MspInit+0x2bc>)
 8001588:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800158c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800158e:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <HAL_ADC_MspInit+0x2bc>)
 8001590:	2200      	movs	r2, #0
 8001592:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001594:	4b19      	ldr	r3, [pc, #100]	; (80015fc <HAL_ADC_MspInit+0x2bc>)
 8001596:	2200      	movs	r2, #0
 8001598:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800159a:	4b18      	ldr	r3, [pc, #96]	; (80015fc <HAL_ADC_MspInit+0x2bc>)
 800159c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015a0:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 80015a2:	4b16      	ldr	r3, [pc, #88]	; (80015fc <HAL_ADC_MspInit+0x2bc>)
 80015a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015a8:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015aa:	4b14      	ldr	r3, [pc, #80]	; (80015fc <HAL_ADC_MspInit+0x2bc>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80015b0:	4812      	ldr	r0, [pc, #72]	; (80015fc <HAL_ADC_MspInit+0x2bc>)
 80015b2:	f002 fa17 	bl	80039e4 <HAL_DMA_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <HAL_ADC_MspInit+0x280>
      Error_Handler();
 80015bc:	f7ff fe8a 	bl	80012d4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a0e      	ldr	r2, [pc, #56]	; (80015fc <HAL_ADC_MspInit+0x2bc>)
 80015c4:	64da      	str	r2, [r3, #76]	; 0x4c
 80015c6:	4a0d      	ldr	r2, [pc, #52]	; (80015fc <HAL_ADC_MspInit+0x2bc>)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6393      	str	r3, [r2, #56]	; 0x38
}
 80015cc:	bf00      	nop
 80015ce:	3738      	adds	r7, #56	; 0x38
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40022000 	.word	0x40022000
 80015d8:	24003d64 	.word	0x24003d64
 80015dc:	58024400 	.word	0x58024400
 80015e0:	58021400 	.word	0x58021400
 80015e4:	240002ac 	.word	0x240002ac
 80015e8:	40020010 	.word	0x40020010
 80015ec:	40022100 	.word	0x40022100
 80015f0:	24000324 	.word	0x24000324
 80015f4:	40020028 	.word	0x40020028
 80015f8:	58026000 	.word	0x58026000
 80015fc:	2400039c 	.word	0x2400039c
 8001600:	40020040 	.word	0x40020040

08001604 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a0b      	ldr	r2, [pc, #44]	; (8001640 <HAL_TIM_PWM_MspInit+0x3c>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d10e      	bne.n	8001634 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001616:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <HAL_TIM_PWM_MspInit+0x40>)
 8001618:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800161c:	4a09      	ldr	r2, [pc, #36]	; (8001644 <HAL_TIM_PWM_MspInit+0x40>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001626:	4b07      	ldr	r3, [pc, #28]	; (8001644 <HAL_TIM_PWM_MspInit+0x40>)
 8001628:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001634:	bf00      	nop
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	40010000 	.word	0x40010000
 8001644:	58024400 	.word	0x58024400

08001648 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b0b8      	sub	sp, #224	; 0xe0
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001660:	f107 0310 	add.w	r3, r7, #16
 8001664:	22bc      	movs	r2, #188	; 0xbc
 8001666:	2100      	movs	r1, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f00f fc45 	bl	8010ef8 <memset>
  if(huart->Instance==USART3)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a25      	ldr	r2, [pc, #148]	; (8001708 <HAL_UART_MspInit+0xc0>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d142      	bne.n	80016fe <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001678:	2302      	movs	r3, #2
 800167a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 800167c:	2303      	movs	r3, #3
 800167e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001682:	f107 0310 	add.w	r3, r7, #16
 8001686:	4618      	mov	r0, r3
 8001688:	f007 f812 	bl	80086b0 <HAL_RCCEx_PeriphCLKConfig>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001692:	f7ff fe1f 	bl	80012d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001696:	4b1d      	ldr	r3, [pc, #116]	; (800170c <HAL_UART_MspInit+0xc4>)
 8001698:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800169c:	4a1b      	ldr	r2, [pc, #108]	; (800170c <HAL_UART_MspInit+0xc4>)
 800169e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016a6:	4b19      	ldr	r3, [pc, #100]	; (800170c <HAL_UART_MspInit+0xc4>)
 80016a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b4:	4b15      	ldr	r3, [pc, #84]	; (800170c <HAL_UART_MspInit+0xc4>)
 80016b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ba:	4a14      	ldr	r2, [pc, #80]	; (800170c <HAL_UART_MspInit+0xc4>)
 80016bc:	f043 0308 	orr.w	r3, r3, #8
 80016c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <HAL_UART_MspInit+0xc4>)
 80016c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80016d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2300      	movs	r3, #0
 80016e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016ec:	2307      	movs	r3, #7
 80016ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016f2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016f6:	4619      	mov	r1, r3
 80016f8:	4805      	ldr	r0, [pc, #20]	; (8001710 <HAL_UART_MspInit+0xc8>)
 80016fa:	f004 fa4b 	bl	8005b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016fe:	bf00      	nop
 8001700:	37e0      	adds	r7, #224	; 0xe0
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40004800 	.word	0x40004800
 800170c:	58024400 	.word	0x58024400
 8001710:	58020c00 	.word	0x58020c00

08001714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <NMI_Handler+0x4>

0800171a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <HardFault_Handler+0x4>

08001720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <MemManage_Handler+0x4>

08001726 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <BusFault_Handler+0x4>

0800172c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <UsageFault_Handler+0x4>

08001732 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001760:	f000 f91e 	bl	80019a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}

08001768 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800176c:	4802      	ldr	r0, [pc, #8]	; (8001778 <DMA1_Stream0_IRQHandler+0x10>)
 800176e:	f002 feff 	bl	8004570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	240002ac 	.word	0x240002ac

0800177c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001780:	4802      	ldr	r0, [pc, #8]	; (800178c <DMA1_Stream1_IRQHandler+0x10>)
 8001782:	f002 fef5 	bl	8004570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	24000324 	.word	0x24000324

08001790 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001794:	4802      	ldr	r0, [pc, #8]	; (80017a0 <DMA1_Stream2_IRQHandler+0x10>)
 8001796:	f002 feeb 	bl	8004570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	2400039c 	.word	0x2400039c

080017a4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80017a8:	4803      	ldr	r0, [pc, #12]	; (80017b8 <ADC_IRQHandler+0x14>)
 80017aa:	f000 fe17 	bl	80023dc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80017ae:	4803      	ldr	r0, [pc, #12]	; (80017bc <ADC_IRQHandler+0x18>)
 80017b0:	f000 fe14 	bl	80023dc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	24000180 	.word	0x24000180
 80017bc:	240001e4 	.word	0x240001e4

080017c0 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80017c4:	4802      	ldr	r0, [pc, #8]	; (80017d0 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 80017c6:	f004 fd66 	bl	8006296 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	24005258 	.word	0x24005258

080017d4 <OTG_FS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 In global interrupt.
  */
void OTG_FS_EP1_IN_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <OTG_FS_EP1_IN_IRQHandler+0x10>)
 80017da:	f004 fd5c 	bl	8006296 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	24005258 	.word	0x24005258

080017e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <OTG_FS_IRQHandler+0x10>)
 80017ee:	f004 fd52 	bl	8006296 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	24005258 	.word	0x24005258

080017fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001804:	4a14      	ldr	r2, [pc, #80]	; (8001858 <_sbrk+0x5c>)
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <_sbrk+0x60>)
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001810:	4b13      	ldr	r3, [pc, #76]	; (8001860 <_sbrk+0x64>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d102      	bne.n	800181e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <_sbrk+0x64>)
 800181a:	4a12      	ldr	r2, [pc, #72]	; (8001864 <_sbrk+0x68>)
 800181c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <_sbrk+0x64>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	429a      	cmp	r2, r3
 800182a:	d207      	bcs.n	800183c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800182c:	f00f fb24 	bl	8010e78 <__errno>
 8001830:	4603      	mov	r3, r0
 8001832:	220c      	movs	r2, #12
 8001834:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001836:	f04f 33ff 	mov.w	r3, #4294967295
 800183a:	e009      	b.n	8001850 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <_sbrk+0x64>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001842:	4b07      	ldr	r3, [pc, #28]	; (8001860 <_sbrk+0x64>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	4a05      	ldr	r2, [pc, #20]	; (8001860 <_sbrk+0x64>)
 800184c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800184e:	68fb      	ldr	r3, [r7, #12]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	24080000 	.word	0x24080000
 800185c:	00000400 	.word	0x00000400
 8001860:	24003d68 	.word	0x24003d68
 8001864:	24005998 	.word	0x24005998

08001868 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001868:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800186c:	f7fe feb6 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001870:	480c      	ldr	r0, [pc, #48]	; (80018a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001872:	490d      	ldr	r1, [pc, #52]	; (80018a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001874:	4a0d      	ldr	r2, [pc, #52]	; (80018ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001878:	e002      	b.n	8001880 <LoopCopyDataInit>

0800187a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800187c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800187e:	3304      	adds	r3, #4

08001880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001884:	d3f9      	bcc.n	800187a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001888:	4c0a      	ldr	r4, [pc, #40]	; (80018b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800188c:	e001      	b.n	8001892 <LoopFillZerobss>

0800188e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800188e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001890:	3204      	adds	r2, #4

08001892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001894:	d3fb      	bcc.n	800188e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001896:	f00f faf5 	bl	8010e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800189a:	f7fe ff39 	bl	8000710 <main>
  bx  lr
 800189e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018a0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80018a4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018a8:	24000164 	.word	0x24000164
  ldr r2, =_sidata
 80018ac:	0801111c 	.word	0x0801111c
  ldr r2, =_sbss
 80018b0:	24000164 	.word	0x24000164
  ldr r4, =_ebss
 80018b4:	24005994 	.word	0x24005994

080018b8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018b8:	e7fe      	b.n	80018b8 <ADC3_IRQHandler>
	...

080018bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c2:	2003      	movs	r0, #3
 80018c4:	f002 f84e 	bl	8003964 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018c8:	f006 fd1c 	bl	8008304 <HAL_RCC_GetSysClockFreq>
 80018cc:	4602      	mov	r2, r0
 80018ce:	4b15      	ldr	r3, [pc, #84]	; (8001924 <HAL_Init+0x68>)
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	0a1b      	lsrs	r3, r3, #8
 80018d4:	f003 030f 	and.w	r3, r3, #15
 80018d8:	4913      	ldr	r1, [pc, #76]	; (8001928 <HAL_Init+0x6c>)
 80018da:	5ccb      	ldrb	r3, [r1, r3]
 80018dc:	f003 031f 	and.w	r3, r3, #31
 80018e0:	fa22 f303 	lsr.w	r3, r2, r3
 80018e4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <HAL_Init+0x68>)
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	4a0e      	ldr	r2, [pc, #56]	; (8001928 <HAL_Init+0x6c>)
 80018f0:	5cd3      	ldrb	r3, [r2, r3]
 80018f2:	f003 031f 	and.w	r3, r3, #31
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	fa22 f303 	lsr.w	r3, r2, r3
 80018fc:	4a0b      	ldr	r2, [pc, #44]	; (800192c <HAL_Init+0x70>)
 80018fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001900:	4a0b      	ldr	r2, [pc, #44]	; (8001930 <HAL_Init+0x74>)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001906:	2000      	movs	r0, #0
 8001908:	f000 f814 	bl	8001934 <HAL_InitTick>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e002      	b.n	800191c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001916:	f7ff fce7 	bl	80012e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	58024400 	.word	0x58024400
 8001928:	080110cc 	.word	0x080110cc
 800192c:	24000004 	.word	0x24000004
 8001930:	24000000 	.word	0x24000000

08001934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800193c:	4b15      	ldr	r3, [pc, #84]	; (8001994 <HAL_InitTick+0x60>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e021      	b.n	800198c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001948:	4b13      	ldr	r3, [pc, #76]	; (8001998 <HAL_InitTick+0x64>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <HAL_InitTick+0x60>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	4619      	mov	r1, r3
 8001952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001956:	fbb3 f3f1 	udiv	r3, r3, r1
 800195a:	fbb2 f3f3 	udiv	r3, r2, r3
 800195e:	4618      	mov	r0, r3
 8001960:	f002 f833 	bl	80039ca <HAL_SYSTICK_Config>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e00e      	b.n	800198c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b0f      	cmp	r3, #15
 8001972:	d80a      	bhi.n	800198a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001974:	2200      	movs	r2, #0
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	f04f 30ff 	mov.w	r0, #4294967295
 800197c:	f001 fffd 	bl	800397a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001980:	4a06      	ldr	r2, [pc, #24]	; (800199c <HAL_InitTick+0x68>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001986:	2300      	movs	r3, #0
 8001988:	e000      	b.n	800198c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
}
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	2400000c 	.word	0x2400000c
 8001998:	24000000 	.word	0x24000000
 800199c:	24000008 	.word	0x24000008

080019a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_IncTick+0x20>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_IncTick+0x24>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4413      	add	r3, r2
 80019b0:	4a04      	ldr	r2, [pc, #16]	; (80019c4 <HAL_IncTick+0x24>)
 80019b2:	6013      	str	r3, [r2, #0]
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	2400000c 	.word	0x2400000c
 80019c4:	24003d6c 	.word	0x24003d6c

080019c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return uwTick;
 80019cc:	4b03      	ldr	r3, [pc, #12]	; (80019dc <HAL_GetTick+0x14>)
 80019ce:	681b      	ldr	r3, [r3, #0]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	24003d6c 	.word	0x24003d6c

080019e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e8:	f7ff ffee 	bl	80019c8 <HAL_GetTick>
 80019ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f8:	d005      	beq.n	8001a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019fa:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <HAL_Delay+0x44>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4413      	add	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a06:	bf00      	nop
 8001a08:	f7ff ffde 	bl	80019c8 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d8f7      	bhi.n	8001a08 <HAL_Delay+0x28>
  {
  }
}
 8001a18:	bf00      	nop
 8001a1a:	bf00      	nop
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	2400000c 	.word	0x2400000c

08001a28 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a2c:	4b03      	ldr	r3, [pc, #12]	; (8001a3c <HAL_GetREVID+0x14>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	0c1b      	lsrs	r3, r3, #16
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	5c001000 	.word	0x5c001000

08001a40 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f023 0202 	bic.w	r2, r3, #2
 8001a50:	4904      	ldr	r1, [pc, #16]	; (8001a64 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	600b      	str	r3, [r1, #0]
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	58003c00 	.word	0x58003c00

08001a68 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8001a72:	f023 0301 	bic.w	r3, r3, #1
 8001a76:	6013      	str	r3, [r2, #0]
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	58003c00 	.word	0x58003c00

08001a88 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001a92:	4b07      	ldr	r3, [pc, #28]	; (8001ab0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	401a      	ands	r2, r3
 8001a9c:	4904      	ldr	r1, [pc, #16]	; (8001ab0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	604b      	str	r3, [r1, #4]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	58000400 	.word	0x58000400

08001ab4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	609a      	str	r2, [r3, #8]
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	609a      	str	r2, [r3, #8]
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b087      	sub	sp, #28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
 8001b28:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	3360      	adds	r3, #96	; 0x60
 8001b2e:	461a      	mov	r2, r3
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	430b      	orrs	r3, r1
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001b50:	bf00      	nop
 8001b52:	371c      	adds	r7, #28
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	f003 031f 	and.w	r3, r3, #31
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	611a      	str	r2, [r3, #16]
}
 8001b82:	bf00      	nop
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b087      	sub	sp, #28
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	60f8      	str	r0, [r7, #12]
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	3360      	adds	r3, #96	; 0x60
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	601a      	str	r2, [r3, #0]
  }
}
 8001bb8:	bf00      	nop
 8001bba:	371c      	adds	r7, #28
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e000      	b.n	8001bde <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b087      	sub	sp, #28
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	60f8      	str	r0, [r7, #12]
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	3330      	adds	r3, #48	; 0x30
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	0a1b      	lsrs	r3, r3, #8
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	4413      	add	r3, r2
 8001c08:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	f003 031f 	and.w	r3, r3, #31
 8001c14:	211f      	movs	r1, #31
 8001c16:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	401a      	ands	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	0e9b      	lsrs	r3, r3, #26
 8001c22:	f003 011f 	and.w	r1, r3, #31
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	f003 031f 	and.w	r3, r3, #31
 8001c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c30:	431a      	orrs	r2, r3
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c36:	bf00      	nop
 8001c38:	371c      	adds	r7, #28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	f023 0203 	bic.w	r2, r3, #3
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	60da      	str	r2, [r3, #12]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c74:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e000      	b.n	8001c82 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b087      	sub	sp, #28
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	60f8      	str	r0, [r7, #12]
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	3314      	adds	r3, #20
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	0e5b      	lsrs	r3, r3, #25
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	4413      	add	r3, r2
 8001cac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	0d1b      	lsrs	r3, r3, #20
 8001cb6:	f003 031f 	and.w	r3, r3, #31
 8001cba:	2107      	movs	r1, #7
 8001cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	0d1b      	lsrs	r3, r3, #20
 8001cc8:	f003 031f 	and.w	r3, r3, #31
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001cd8:	bf00      	nop
 8001cda:	371c      	adds	r7, #28
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	401a      	ands	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f003 0318 	and.w	r3, r3, #24
 8001d06:	4908      	ldr	r1, [pc, #32]	; (8001d28 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d08:	40d9      	lsrs	r1, r3
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	400b      	ands	r3, r1
 8001d0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d12:	431a      	orrs	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001d1a:	bf00      	nop
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	000fffff 	.word	0x000fffff

08001d2c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 031f 	and.w	r3, r3, #31
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6093      	str	r3, [r2, #8]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	5fffffc0 	.word	0x5fffffc0

08001d88 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d9c:	d101      	bne.n	8001da2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <LL_ADC_EnableInternalRegulator+0x24>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	6fffffc0 	.word	0x6fffffc0

08001dd8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001dec:	d101      	bne.n	8001df2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <LL_ADC_Enable+0x24>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	f043 0201 	orr.w	r2, r3, #1
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	7fffffc0 	.word	0x7fffffc0

08001e28 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <LL_ADC_Disable+0x24>)
 8001e36:	4013      	ands	r3, r2
 8001e38:	f043 0202 	orr.w	r2, r3, #2
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	7fffffc0 	.word	0x7fffffc0

08001e50 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d101      	bne.n	8001e68 <LL_ADC_IsEnabled+0x18>
 8001e64:	2301      	movs	r3, #1
 8001e66:	e000      	b.n	8001e6a <LL_ADC_IsEnabled+0x1a>
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d101      	bne.n	8001e8e <LL_ADC_IsDisableOngoing+0x18>
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <LL_ADC_IsDisableOngoing+0x1a>
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <LL_ADC_REG_StartConversion+0x24>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	f043 0204 	orr.w	r2, r3, #4
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	7fffffc0 	.word	0x7fffffc0

08001ec4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d101      	bne.n	8001edc <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e000      	b.n	8001ede <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	2b08      	cmp	r3, #8
 8001efc:	d101      	bne.n	8001f02 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f10:	b590      	push	{r4, r7, lr}
 8001f12:	b089      	sub	sp, #36	; 0x24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e18f      	b.n	800224a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d109      	bne.n	8001f4c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff fa01 	bl	8001340 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff ff19 	bl	8001d88 <LL_ADC_IsDeepPowerDownEnabled>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d004      	beq.n	8001f66 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff feff 	bl	8001d64 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff ff34 	bl	8001dd8 <LL_ADC_IsInternalRegulatorEnabled>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d114      	bne.n	8001fa0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff ff18 	bl	8001db0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f80:	4b87      	ldr	r3, [pc, #540]	; (80021a0 <HAL_ADC_Init+0x290>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	099b      	lsrs	r3, r3, #6
 8001f86:	4a87      	ldr	r2, [pc, #540]	; (80021a4 <HAL_ADC_Init+0x294>)
 8001f88:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8c:	099b      	lsrs	r3, r3, #6
 8001f8e:	3301      	adds	r3, #1
 8001f90:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f92:	e002      	b.n	8001f9a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1f9      	bne.n	8001f94 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff17 	bl	8001dd8 <LL_ADC_IsInternalRegulatorEnabled>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10d      	bne.n	8001fcc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb4:	f043 0210 	orr.w	r2, r3, #16
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc0:	f043 0201 	orr.w	r2, r3, #1
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff77 	bl	8001ec4 <LL_ADC_REG_IsConversionOngoing>
 8001fd6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fdc:	f003 0310 	and.w	r3, r3, #16
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f040 8129 	bne.w	8002238 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f040 8125 	bne.w	8002238 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ff6:	f043 0202 	orr.w	r2, r3, #2
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff ff24 	bl	8001e50 <LL_ADC_IsEnabled>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d136      	bne.n	800207c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a65      	ldr	r2, [pc, #404]	; (80021a8 <HAL_ADC_Init+0x298>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d004      	beq.n	8002022 <HAL_ADC_Init+0x112>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a63      	ldr	r2, [pc, #396]	; (80021ac <HAL_ADC_Init+0x29c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d10e      	bne.n	8002040 <HAL_ADC_Init+0x130>
 8002022:	4861      	ldr	r0, [pc, #388]	; (80021a8 <HAL_ADC_Init+0x298>)
 8002024:	f7ff ff14 	bl	8001e50 <LL_ADC_IsEnabled>
 8002028:	4604      	mov	r4, r0
 800202a:	4860      	ldr	r0, [pc, #384]	; (80021ac <HAL_ADC_Init+0x29c>)
 800202c:	f7ff ff10 	bl	8001e50 <LL_ADC_IsEnabled>
 8002030:	4603      	mov	r3, r0
 8002032:	4323      	orrs	r3, r4
 8002034:	2b00      	cmp	r3, #0
 8002036:	bf0c      	ite	eq
 8002038:	2301      	moveq	r3, #1
 800203a:	2300      	movne	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	e008      	b.n	8002052 <HAL_ADC_Init+0x142>
 8002040:	485b      	ldr	r0, [pc, #364]	; (80021b0 <HAL_ADC_Init+0x2a0>)
 8002042:	f7ff ff05 	bl	8001e50 <LL_ADC_IsEnabled>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	bf0c      	ite	eq
 800204c:	2301      	moveq	r3, #1
 800204e:	2300      	movne	r3, #0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d012      	beq.n	800207c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a53      	ldr	r2, [pc, #332]	; (80021a8 <HAL_ADC_Init+0x298>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d004      	beq.n	800206a <HAL_ADC_Init+0x15a>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a51      	ldr	r2, [pc, #324]	; (80021ac <HAL_ADC_Init+0x29c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d101      	bne.n	800206e <HAL_ADC_Init+0x15e>
 800206a:	4a52      	ldr	r2, [pc, #328]	; (80021b4 <HAL_ADC_Init+0x2a4>)
 800206c:	e000      	b.n	8002070 <HAL_ADC_Init+0x160>
 800206e:	4a52      	ldr	r2, [pc, #328]	; (80021b8 <HAL_ADC_Init+0x2a8>)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	4619      	mov	r1, r3
 8002076:	4610      	mov	r0, r2
 8002078:	f7ff fd1c 	bl	8001ab4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800207c:	f7ff fcd4 	bl	8001a28 <HAL_GetREVID>
 8002080:	4603      	mov	r3, r0
 8002082:	f241 0203 	movw	r2, #4099	; 0x1003
 8002086:	4293      	cmp	r3, r2
 8002088:	d914      	bls.n	80020b4 <HAL_ADC_Init+0x1a4>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	2b10      	cmp	r3, #16
 8002090:	d110      	bne.n	80020b4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	7d5b      	ldrb	r3, [r3, #21]
 8002096:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800209c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80020a2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	7f1b      	ldrb	r3, [r3, #28]
 80020a8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80020aa:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020ac:	f043 030c 	orr.w	r3, r3, #12
 80020b0:	61bb      	str	r3, [r7, #24]
 80020b2:	e00d      	b.n	80020d0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	7d5b      	ldrb	r3, [r3, #21]
 80020b8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020be:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80020c4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	7f1b      	ldrb	r3, [r3, #28]
 80020ca:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	7f1b      	ldrb	r3, [r3, #28]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d106      	bne.n	80020e6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	3b01      	subs	r3, #1
 80020de:	045b      	lsls	r3, r3, #17
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d009      	beq.n	8002102 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fa:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68da      	ldr	r2, [r3, #12]
 8002108:	4b2c      	ldr	r3, [pc, #176]	; (80021bc <HAL_ADC_Init+0x2ac>)
 800210a:	4013      	ands	r3, r2
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6812      	ldr	r2, [r2, #0]
 8002110:	69b9      	ldr	r1, [r7, #24]
 8002112:	430b      	orrs	r3, r1
 8002114:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fed2 	bl	8001ec4 <LL_ADC_REG_IsConversionOngoing>
 8002120:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff fedf 	bl	8001eea <LL_ADC_INJ_IsConversionOngoing>
 800212c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d15f      	bne.n	80021f4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d15c      	bne.n	80021f4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	7d1b      	ldrb	r3, [r3, #20]
 800213e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	4b1c      	ldr	r3, [pc, #112]	; (80021c0 <HAL_ADC_Init+0x2b0>)
 8002150:	4013      	ands	r3, r2
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6812      	ldr	r2, [r2, #0]
 8002156:	69b9      	ldr	r1, [r7, #24]
 8002158:	430b      	orrs	r3, r1
 800215a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002162:	2b01      	cmp	r3, #1
 8002164:	d130      	bne.n	80021c8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	691a      	ldr	r2, [r3, #16]
 8002172:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <HAL_ADC_Init+0x2b4>)
 8002174:	4013      	ands	r3, r2
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800217a:	3a01      	subs	r2, #1
 800217c:	0411      	lsls	r1, r2, #16
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002182:	4311      	orrs	r1, r2
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002188:	4311      	orrs	r1, r2
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800218e:	430a      	orrs	r2, r1
 8002190:	431a      	orrs	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0201 	orr.w	r2, r2, #1
 800219a:	611a      	str	r2, [r3, #16]
 800219c:	e01c      	b.n	80021d8 <HAL_ADC_Init+0x2c8>
 800219e:	bf00      	nop
 80021a0:	24000000 	.word	0x24000000
 80021a4:	053e2d63 	.word	0x053e2d63
 80021a8:	40022000 	.word	0x40022000
 80021ac:	40022100 	.word	0x40022100
 80021b0:	58026000 	.word	0x58026000
 80021b4:	40022300 	.word	0x40022300
 80021b8:	58026300 	.word	0x58026300
 80021bc:	fff0c003 	.word	0xfff0c003
 80021c0:	ffffbffc 	.word	0xffffbffc
 80021c4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	691a      	ldr	r2, [r3, #16]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0201 	bic.w	r2, r2, #1
 80021d6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f001 f810 	bl	8003214 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d10c      	bne.n	8002216 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	f023 010f 	bic.w	r1, r3, #15
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	1e5a      	subs	r2, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	631a      	str	r2, [r3, #48]	; 0x30
 8002214:	e007      	b.n	8002226 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 020f 	bic.w	r2, r2, #15
 8002224:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222a:	f023 0303 	bic.w	r3, r3, #3
 800222e:	f043 0201 	orr.w	r2, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	655a      	str	r2, [r3, #84]	; 0x54
 8002236:	e007      	b.n	8002248 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223c:	f043 0210 	orr.w	r2, r3, #16
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002248:	7ffb      	ldrb	r3, [r7, #31]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3724      	adds	r7, #36	; 0x24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd90      	pop	{r4, r7, pc}
 8002252:	bf00      	nop

08002254 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a55      	ldr	r2, [pc, #340]	; (80023bc <HAL_ADC_Start_DMA+0x168>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d004      	beq.n	8002274 <HAL_ADC_Start_DMA+0x20>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a54      	ldr	r2, [pc, #336]	; (80023c0 <HAL_ADC_Start_DMA+0x16c>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d101      	bne.n	8002278 <HAL_ADC_Start_DMA+0x24>
 8002274:	4b53      	ldr	r3, [pc, #332]	; (80023c4 <HAL_ADC_Start_DMA+0x170>)
 8002276:	e000      	b.n	800227a <HAL_ADC_Start_DMA+0x26>
 8002278:	4b53      	ldr	r3, [pc, #332]	; (80023c8 <HAL_ADC_Start_DMA+0x174>)
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff fd56 	bl	8001d2c <LL_ADC_GetMultimode>
 8002280:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff fe1c 	bl	8001ec4 <LL_ADC_REG_IsConversionOngoing>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	f040 808c 	bne.w	80023ac <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HAL_ADC_Start_DMA+0x4e>
 800229e:	2302      	movs	r3, #2
 80022a0:	e087      	b.n	80023b2 <HAL_ADC_Start_DMA+0x15e>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d005      	beq.n	80022bc <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	2b05      	cmp	r3, #5
 80022b4:	d002      	beq.n	80022bc <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	2b09      	cmp	r3, #9
 80022ba:	d170      	bne.n	800239e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f000 fe2b 	bl	8002f18 <ADC_Enable>
 80022c2:	4603      	mov	r3, r0
 80022c4:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80022c6:	7dfb      	ldrb	r3, [r7, #23]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d163      	bne.n	8002394 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80022d0:	4b3e      	ldr	r3, [pc, #248]	; (80023cc <HAL_ADC_Start_DMA+0x178>)
 80022d2:	4013      	ands	r3, r2
 80022d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a37      	ldr	r2, [pc, #220]	; (80023c0 <HAL_ADC_Start_DMA+0x16c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d002      	beq.n	80022ec <HAL_ADC_Start_DMA+0x98>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	e000      	b.n	80022ee <HAL_ADC_Start_DMA+0x9a>
 80022ec:	4b33      	ldr	r3, [pc, #204]	; (80023bc <HAL_ADC_Start_DMA+0x168>)
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d002      	beq.n	80022fc <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d105      	bne.n	8002308 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002300:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d006      	beq.n	8002322 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002318:	f023 0206 	bic.w	r2, r3, #6
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	659a      	str	r2, [r3, #88]	; 0x58
 8002320:	e002      	b.n	8002328 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232c:	4a28      	ldr	r2, [pc, #160]	; (80023d0 <HAL_ADC_Start_DMA+0x17c>)
 800232e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002334:	4a27      	ldr	r2, [pc, #156]	; (80023d4 <HAL_ADC_Start_DMA+0x180>)
 8002336:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233c:	4a26      	ldr	r2, [pc, #152]	; (80023d8 <HAL_ADC_Start_DMA+0x184>)
 800233e:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	221c      	movs	r2, #28
 8002346:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 0210 	orr.w	r2, r2, #16
 800235e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002368:	4619      	mov	r1, r3
 800236a:	4610      	mov	r0, r2
 800236c:	f7ff fc69 	bl	8001c42 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	3340      	adds	r3, #64	; 0x40
 800237a:	4619      	mov	r1, r3
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f001 fe8c 	bl	800409c <HAL_DMA_Start_IT>
 8002384:	4603      	mov	r3, r0
 8002386:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff fd85 	bl	8001e9c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002392:	e00d      	b.n	80023b0 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800239c:	e008      	b.n	80023b0 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80023aa:	e001      	b.n	80023b0 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80023ac:	2302      	movs	r3, #2
 80023ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80023b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40022000 	.word	0x40022000
 80023c0:	40022100 	.word	0x40022100
 80023c4:	40022300 	.word	0x40022300
 80023c8:	58026300 	.word	0x58026300
 80023cc:	fffff0fe 	.word	0xfffff0fe
 80023d0:	080030eb 	.word	0x080030eb
 80023d4:	080031c3 	.word	0x080031c3
 80023d8:	080031df 	.word	0x080031df

080023dc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08a      	sub	sp, #40	; 0x28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80023e4:	2300      	movs	r3, #0
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a87      	ldr	r2, [pc, #540]	; (800261c <HAL_ADC_IRQHandler+0x240>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d004      	beq.n	800240c <HAL_ADC_IRQHandler+0x30>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a86      	ldr	r2, [pc, #536]	; (8002620 <HAL_ADC_IRQHandler+0x244>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d101      	bne.n	8002410 <HAL_ADC_IRQHandler+0x34>
 800240c:	4b85      	ldr	r3, [pc, #532]	; (8002624 <HAL_ADC_IRQHandler+0x248>)
 800240e:	e000      	b.n	8002412 <HAL_ADC_IRQHandler+0x36>
 8002410:	4b85      	ldr	r3, [pc, #532]	; (8002628 <HAL_ADC_IRQHandler+0x24c>)
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff fc8a 	bl	8001d2c <LL_ADC_GetMultimode>
 8002418:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d017      	beq.n	8002454 <HAL_ADC_IRQHandler+0x78>
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d012      	beq.n	8002454 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002432:	f003 0310 	and.w	r3, r3, #16
 8002436:	2b00      	cmp	r3, #0
 8002438:	d105      	bne.n	8002446 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f001 f8d4 	bl	80035f4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2202      	movs	r2, #2
 8002452:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	2b00      	cmp	r3, #0
 800245c:	d004      	beq.n	8002468 <HAL_ADC_IRQHandler+0x8c>
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10a      	bne.n	800247e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 8083 	beq.w	800257a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d07d      	beq.n	800257a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002482:	f003 0310 	and.w	r3, r3, #16
 8002486:	2b00      	cmp	r3, #0
 8002488:	d105      	bne.n	8002496 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff fb92 	bl	8001bc4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d062      	beq.n	800256c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a5d      	ldr	r2, [pc, #372]	; (8002620 <HAL_ADC_IRQHandler+0x244>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d002      	beq.n	80024b6 <HAL_ADC_IRQHandler+0xda>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	e000      	b.n	80024b8 <HAL_ADC_IRQHandler+0xdc>
 80024b6:	4b59      	ldr	r3, [pc, #356]	; (800261c <HAL_ADC_IRQHandler+0x240>)
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	4293      	cmp	r3, r2
 80024be:	d008      	beq.n	80024d2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d005      	beq.n	80024d2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	2b05      	cmp	r3, #5
 80024ca:	d002      	beq.n	80024d2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	2b09      	cmp	r3, #9
 80024d0:	d104      	bne.n	80024dc <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	623b      	str	r3, [r7, #32]
 80024da:	e00c      	b.n	80024f6 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a4f      	ldr	r2, [pc, #316]	; (8002620 <HAL_ADC_IRQHandler+0x244>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d002      	beq.n	80024ec <HAL_ADC_IRQHandler+0x110>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	e000      	b.n	80024ee <HAL_ADC_IRQHandler+0x112>
 80024ec:	4b4b      	ldr	r3, [pc, #300]	; (800261c <HAL_ADC_IRQHandler+0x240>)
 80024ee:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80024f6:	6a3b      	ldr	r3, [r7, #32]
 80024f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d135      	bne.n	800256c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b08      	cmp	r3, #8
 800250c:	d12e      	bne.n	800256c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff fcd6 	bl	8001ec4 <LL_ADC_REG_IsConversionOngoing>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d11a      	bne.n	8002554 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 020c 	bic.w	r2, r2, #12
 800252c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002532:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d112      	bne.n	800256c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254a:	f043 0201 	orr.w	r2, r3, #1
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	655a      	str	r2, [r3, #84]	; 0x54
 8002552:	e00b      	b.n	800256c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002558:	f043 0210 	orr.w	r2, r3, #16
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002564:	f043 0201 	orr.w	r2, r3, #1
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7fe fdd1 	bl	8001114 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	220c      	movs	r2, #12
 8002578:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	f003 0320 	and.w	r3, r3, #32
 8002580:	2b00      	cmp	r3, #0
 8002582:	d004      	beq.n	800258e <HAL_ADC_IRQHandler+0x1b2>
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	f003 0320 	and.w	r3, r3, #32
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10b      	bne.n	80025a6 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 80a0 	beq.w	80026da <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 809a 	beq.w	80026da <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025aa:	f003 0310 	and.w	r3, r3, #16
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d105      	bne.n	80025be <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff fb50 	bl	8001c68 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80025c8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff faf8 	bl	8001bc4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80025d4:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a11      	ldr	r2, [pc, #68]	; (8002620 <HAL_ADC_IRQHandler+0x244>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d002      	beq.n	80025e6 <HAL_ADC_IRQHandler+0x20a>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	e000      	b.n	80025e8 <HAL_ADC_IRQHandler+0x20c>
 80025e6:	4b0d      	ldr	r3, [pc, #52]	; (800261c <HAL_ADC_IRQHandler+0x240>)
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d008      	beq.n	8002602 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d005      	beq.n	8002602 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	2b06      	cmp	r3, #6
 80025fa:	d002      	beq.n	8002602 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	2b07      	cmp	r3, #7
 8002600:	d104      	bne.n	800260c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	623b      	str	r3, [r7, #32]
 800260a:	e014      	b.n	8002636 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a03      	ldr	r2, [pc, #12]	; (8002620 <HAL_ADC_IRQHandler+0x244>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d00a      	beq.n	800262c <HAL_ADC_IRQHandler+0x250>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	e008      	b.n	800262e <HAL_ADC_IRQHandler+0x252>
 800261c:	40022000 	.word	0x40022000
 8002620:	40022100 	.word	0x40022100
 8002624:	40022300 	.word	0x40022300
 8002628:	58026300 	.word	0x58026300
 800262c:	4b84      	ldr	r3, [pc, #528]	; (8002840 <HAL_ADC_IRQHandler+0x464>)
 800262e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d047      	beq.n	80026cc <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d007      	beq.n	8002656 <HAL_ADC_IRQHandler+0x27a>
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d03f      	beq.n	80026cc <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002652:	2b00      	cmp	r3, #0
 8002654:	d13a      	bne.n	80026cc <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002660:	2b40      	cmp	r3, #64	; 0x40
 8002662:	d133      	bne.n	80026cc <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d12e      	bne.n	80026cc <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff fc39 	bl	8001eea <LL_ADC_INJ_IsConversionOngoing>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d11a      	bne.n	80026b4 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800268c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002692:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d112      	bne.n	80026cc <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026aa:	f043 0201 	orr.w	r2, r3, #1
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	655a      	str	r2, [r3, #84]	; 0x54
 80026b2:	e00b      	b.n	80026cc <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b8:	f043 0210 	orr.w	r2, r3, #16
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c4:	f043 0201 	orr.w	r2, r3, #1
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 ff69 	bl	80035a4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2260      	movs	r2, #96	; 0x60
 80026d8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d011      	beq.n	8002708 <HAL_ADC_IRQHandler+0x32c>
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00c      	beq.n	8002708 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f8a8 	bl	8002850 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2280      	movs	r2, #128	; 0x80
 8002706:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270e:	2b00      	cmp	r3, #0
 8002710:	d012      	beq.n	8002738 <HAL_ADC_IRQHandler+0x35c>
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00d      	beq.n	8002738 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002720:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 ff4f 	bl	80035cc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002736:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800273e:	2b00      	cmp	r3, #0
 8002740:	d012      	beq.n	8002768 <HAL_ADC_IRQHandler+0x38c>
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00d      	beq.n	8002768 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002750:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 ff41 	bl	80035e0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002766:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f003 0310 	and.w	r3, r3, #16
 800276e:	2b00      	cmp	r3, #0
 8002770:	d043      	beq.n	80027fa <HAL_ADC_IRQHandler+0x41e>
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	f003 0310 	and.w	r3, r3, #16
 8002778:	2b00      	cmp	r3, #0
 800277a:	d03e      	beq.n	80027fa <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002780:	2b00      	cmp	r3, #0
 8002782:	d102      	bne.n	800278a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8002784:	2301      	movs	r3, #1
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
 8002788:	e021      	b.n	80027ce <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d015      	beq.n	80027bc <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a2a      	ldr	r2, [pc, #168]	; (8002840 <HAL_ADC_IRQHandler+0x464>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d004      	beq.n	80027a4 <HAL_ADC_IRQHandler+0x3c8>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a29      	ldr	r2, [pc, #164]	; (8002844 <HAL_ADC_IRQHandler+0x468>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d101      	bne.n	80027a8 <HAL_ADC_IRQHandler+0x3cc>
 80027a4:	4b28      	ldr	r3, [pc, #160]	; (8002848 <HAL_ADC_IRQHandler+0x46c>)
 80027a6:	e000      	b.n	80027aa <HAL_ADC_IRQHandler+0x3ce>
 80027a8:	4b28      	ldr	r3, [pc, #160]	; (800284c <HAL_ADC_IRQHandler+0x470>)
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff facc 	bl	8001d48 <LL_ADC_GetMultiDMATransfer>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00b      	beq.n	80027ce <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80027b6:	2301      	movs	r3, #1
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
 80027ba:	e008      	b.n	80027ce <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80027ca:	2301      	movs	r3, #1
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d10e      	bne.n	80027f2 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e4:	f043 0202 	orr.w	r2, r3, #2
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 f839 	bl	8002864 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2210      	movs	r2, #16
 80027f8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002800:	2b00      	cmp	r3, #0
 8002802:	d018      	beq.n	8002836 <HAL_ADC_IRQHandler+0x45a>
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280a:	2b00      	cmp	r3, #0
 800280c:	d013      	beq.n	8002836 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002812:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281e:	f043 0208 	orr.w	r2, r3, #8
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800282e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 fec1 	bl	80035b8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002836:	bf00      	nop
 8002838:	3728      	adds	r7, #40	; 0x28
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40022000 	.word	0x40022000
 8002844:	40022100 	.word	0x40022100
 8002848:	40022300 	.word	0x40022300
 800284c:	58026300 	.word	0x58026300

08002850 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002878:	b590      	push	{r4, r7, lr}
 800287a:	b0a1      	sub	sp, #132	; 0x84
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	4a9d      	ldr	r2, [pc, #628]	; (8002b08 <HAL_ADC_ConfigChannel+0x290>)
 8002892:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800289a:	2b01      	cmp	r3, #1
 800289c:	d101      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x2a>
 800289e:	2302      	movs	r3, #2
 80028a0:	e321      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x66e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff fb08 	bl	8001ec4 <LL_ADC_REG_IsConversionOngoing>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f040 8306 	bne.w	8002ec8 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d108      	bne.n	80028da <HAL_ADC_ConfigChannel+0x62>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	0e9b      	lsrs	r3, r3, #26
 80028ce:	f003 031f 	and.w	r3, r3, #31
 80028d2:	2201      	movs	r2, #1
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	e016      	b.n	8002908 <HAL_ADC_ConfigChannel+0x90>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028e2:	fa93 f3a3 	rbit	r3, r3
 80028e6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028ea:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80028ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80028f2:	2320      	movs	r3, #32
 80028f4:	e003      	b.n	80028fe <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80028f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028f8:	fab3 f383 	clz	r3, r3
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	f003 031f 	and.w	r3, r3, #31
 8002902:	2201      	movs	r2, #1
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	6812      	ldr	r2, [r2, #0]
 800290c:	69d1      	ldr	r1, [r2, #28]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6812      	ldr	r2, [r2, #0]
 8002912:	430b      	orrs	r3, r1
 8002914:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	6859      	ldr	r1, [r3, #4]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	f7ff f961 	bl	8001bea <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff fac9 	bl	8001ec4 <LL_ADC_REG_IsConversionOngoing>
 8002932:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff fad6 	bl	8001eea <LL_ADC_INJ_IsConversionOngoing>
 800293e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002940:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002942:	2b00      	cmp	r3, #0
 8002944:	f040 80b3 	bne.w	8002aae <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002948:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800294a:	2b00      	cmp	r3, #0
 800294c:	f040 80af 	bne.w	8002aae <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6818      	ldr	r0, [r3, #0]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	6819      	ldr	r1, [r3, #0]
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	461a      	mov	r2, r3
 800295e:	f7ff f996 	bl	8001c8e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002962:	4b6a      	ldr	r3, [pc, #424]	; (8002b0c <HAL_ADC_ConfigChannel+0x294>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800296a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800296e:	d10b      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x110>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	695a      	ldr	r2, [r3, #20]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	089b      	lsrs	r3, r3, #2
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	e01d      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x14c>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f003 0310 	and.w	r3, r3, #16
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10b      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x136>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	695a      	ldr	r2, [r3, #20]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	089b      	lsrs	r3, r3, #2
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	e00a      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x14c>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	695a      	ldr	r2, [r3, #20]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	089b      	lsrs	r3, r3, #2
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d027      	beq.n	8002a1e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6818      	ldr	r0, [r3, #0]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	6919      	ldr	r1, [r3, #16]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029dc:	f7ff f89e 	bl	8001b1c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6818      	ldr	r0, [r3, #0]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	6919      	ldr	r1, [r3, #16]
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	7e5b      	ldrb	r3, [r3, #25]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d102      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x17e>
 80029f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80029f4:	e000      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x180>
 80029f6:	2300      	movs	r3, #0
 80029f8:	461a      	mov	r2, r3
 80029fa:	f7ff f8c8 	bl	8001b8e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	6919      	ldr	r1, [r3, #16]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	7e1b      	ldrb	r3, [r3, #24]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d102      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x19c>
 8002a0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a12:	e000      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x19e>
 8002a14:	2300      	movs	r3, #0
 8002a16:	461a      	mov	r2, r3
 8002a18:	f7ff f8a0 	bl	8001b5c <LL_ADC_SetDataRightShift>
 8002a1c:	e047      	b.n	8002aae <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	069b      	lsls	r3, r3, #26
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d107      	bne.n	8002a42 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a40:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	069b      	lsls	r3, r3, #26
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d107      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a64:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	069b      	lsls	r3, r3, #26
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d107      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a88:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	069b      	lsls	r3, r3, #26
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d107      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002aac:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff f9cc 	bl	8001e50 <LL_ADC_IsEnabled>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f040 820d 	bne.w	8002eda <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6818      	ldr	r0, [r3, #0]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	6819      	ldr	r1, [r3, #0]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	461a      	mov	r2, r3
 8002ace:	f7ff f909 	bl	8001ce4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	4a0c      	ldr	r2, [pc, #48]	; (8002b08 <HAL_ADC_ConfigChannel+0x290>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	f040 8133 	bne.w	8002d44 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d110      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x298>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	0e9b      	lsrs	r3, r3, #26
 8002af4:	3301      	adds	r3, #1
 8002af6:	f003 031f 	and.w	r3, r3, #31
 8002afa:	2b09      	cmp	r3, #9
 8002afc:	bf94      	ite	ls
 8002afe:	2301      	movls	r3, #1
 8002b00:	2300      	movhi	r3, #0
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	e01e      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x2cc>
 8002b06:	bf00      	nop
 8002b08:	47ff0000 	.word	0x47ff0000
 8002b0c:	5c001000 	.word	0x5c001000
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b18:	fa93 f3a3 	rbit	r3, r3
 8002b1c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b20:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002b22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002b28:	2320      	movs	r3, #32
 8002b2a:	e003      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002b2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b2e:	fab3 f383 	clz	r3, r3
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	3301      	adds	r3, #1
 8002b36:	f003 031f 	and.w	r3, r3, #31
 8002b3a:	2b09      	cmp	r3, #9
 8002b3c:	bf94      	ite	ls
 8002b3e:	2301      	movls	r3, #1
 8002b40:	2300      	movhi	r3, #0
 8002b42:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d079      	beq.n	8002c3c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d107      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x2ec>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	0e9b      	lsrs	r3, r3, #26
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	069b      	lsls	r3, r3, #26
 8002b5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b62:	e015      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x318>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b6c:	fa93 f3a3 	rbit	r3, r3
 8002b70:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b74:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002b7c:	2320      	movs	r3, #32
 8002b7e:	e003      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002b80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b82:	fab3 f383 	clz	r3, r3
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	3301      	adds	r3, #1
 8002b8a:	069b      	lsls	r3, r3, #26
 8002b8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d109      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x338>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	0e9b      	lsrs	r3, r3, #26
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	f003 031f 	and.w	r3, r3, #31
 8002ba8:	2101      	movs	r1, #1
 8002baa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bae:	e017      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x368>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bb8:	fa93 f3a3 	rbit	r3, r3
 8002bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002bc8:	2320      	movs	r3, #32
 8002bca:	e003      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	f003 031f 	and.w	r3, r3, #31
 8002bda:	2101      	movs	r1, #1
 8002bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002be0:	ea42 0103 	orr.w	r1, r2, r3
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10a      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x38e>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	0e9b      	lsrs	r3, r3, #26
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	f003 021f 	and.w	r2, r3, #31
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	4413      	add	r3, r2
 8002c02:	051b      	lsls	r3, r3, #20
 8002c04:	e018      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x3c0>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c0e:	fa93 f3a3 	rbit	r3, r3
 8002c12:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c16:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002c1e:	2320      	movs	r3, #32
 8002c20:	e003      	b.n	8002c2a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c24:	fab3 f383 	clz	r3, r3
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	f003 021f 	and.w	r2, r3, #31
 8002c30:	4613      	mov	r3, r2
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	4413      	add	r3, r2
 8002c36:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c38:	430b      	orrs	r3, r1
 8002c3a:	e07e      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d107      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x3e0>
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	0e9b      	lsrs	r3, r3, #26
 8002c4e:	3301      	adds	r3, #1
 8002c50:	069b      	lsls	r3, r3, #26
 8002c52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c56:	e015      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x40c>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c60:	fa93 f3a3 	rbit	r3, r3
 8002c64:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002c70:	2320      	movs	r3, #32
 8002c72:	e003      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c76:	fab3 f383 	clz	r3, r3
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	069b      	lsls	r3, r3, #26
 8002c80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d109      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x42c>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	0e9b      	lsrs	r3, r3, #26
 8002c96:	3301      	adds	r3, #1
 8002c98:	f003 031f 	and.w	r3, r3, #31
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca2:	e017      	b.n	8002cd4 <HAL_ADC_ConfigChannel+0x45c>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	fa93 f3a3 	rbit	r3, r3
 8002cb0:	61bb      	str	r3, [r7, #24]
  return result;
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002cbc:	2320      	movs	r3, #32
 8002cbe:	e003      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	fab3 f383 	clz	r3, r3
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	3301      	adds	r3, #1
 8002cca:	f003 031f 	and.w	r3, r3, #31
 8002cce:	2101      	movs	r1, #1
 8002cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd4:	ea42 0103 	orr.w	r1, r2, r3
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10d      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x488>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	0e9b      	lsrs	r3, r3, #26
 8002cea:	3301      	adds	r3, #1
 8002cec:	f003 021f 	and.w	r2, r3, #31
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	4413      	add	r3, r2
 8002cf6:	3b1e      	subs	r3, #30
 8002cf8:	051b      	lsls	r3, r3, #20
 8002cfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cfe:	e01b      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x4c0>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	fa93 f3a3 	rbit	r3, r3
 8002d0c:	60fb      	str	r3, [r7, #12]
  return result;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002d18:	2320      	movs	r3, #32
 8002d1a:	e003      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	fab3 f383 	clz	r3, r3
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	3301      	adds	r3, #1
 8002d26:	f003 021f 	and.w	r2, r3, #31
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	4413      	add	r3, r2
 8002d30:	3b1e      	subs	r3, #30
 8002d32:	051b      	lsls	r3, r3, #20
 8002d34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d38:	430b      	orrs	r3, r1
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	6892      	ldr	r2, [r2, #8]
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f7fe ffa5 	bl	8001c8e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f280 80c6 	bge.w	8002eda <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a67      	ldr	r2, [pc, #412]	; (8002ef0 <HAL_ADC_ConfigChannel+0x678>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d004      	beq.n	8002d62 <HAL_ADC_ConfigChannel+0x4ea>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a65      	ldr	r2, [pc, #404]	; (8002ef4 <HAL_ADC_ConfigChannel+0x67c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d101      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x4ee>
 8002d62:	4b65      	ldr	r3, [pc, #404]	; (8002ef8 <HAL_ADC_ConfigChannel+0x680>)
 8002d64:	e000      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x4f0>
 8002d66:	4b65      	ldr	r3, [pc, #404]	; (8002efc <HAL_ADC_ConfigChannel+0x684>)
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fe fec9 	bl	8001b00 <LL_ADC_GetCommonPathInternalCh>
 8002d6e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a5e      	ldr	r2, [pc, #376]	; (8002ef0 <HAL_ADC_ConfigChannel+0x678>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d004      	beq.n	8002d84 <HAL_ADC_ConfigChannel+0x50c>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a5d      	ldr	r2, [pc, #372]	; (8002ef4 <HAL_ADC_ConfigChannel+0x67c>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d10e      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x52a>
 8002d84:	485a      	ldr	r0, [pc, #360]	; (8002ef0 <HAL_ADC_ConfigChannel+0x678>)
 8002d86:	f7ff f863 	bl	8001e50 <LL_ADC_IsEnabled>
 8002d8a:	4604      	mov	r4, r0
 8002d8c:	4859      	ldr	r0, [pc, #356]	; (8002ef4 <HAL_ADC_ConfigChannel+0x67c>)
 8002d8e:	f7ff f85f 	bl	8001e50 <LL_ADC_IsEnabled>
 8002d92:	4603      	mov	r3, r0
 8002d94:	4323      	orrs	r3, r4
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	bf0c      	ite	eq
 8002d9a:	2301      	moveq	r3, #1
 8002d9c:	2300      	movne	r3, #0
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	e008      	b.n	8002db4 <HAL_ADC_ConfigChannel+0x53c>
 8002da2:	4857      	ldr	r0, [pc, #348]	; (8002f00 <HAL_ADC_ConfigChannel+0x688>)
 8002da4:	f7ff f854 	bl	8001e50 <LL_ADC_IsEnabled>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	bf0c      	ite	eq
 8002dae:	2301      	moveq	r3, #1
 8002db0:	2300      	movne	r3, #0
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d07d      	beq.n	8002eb4 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a51      	ldr	r2, [pc, #324]	; (8002f04 <HAL_ADC_ConfigChannel+0x68c>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d130      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x5ac>
 8002dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d12b      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a4b      	ldr	r2, [pc, #300]	; (8002f00 <HAL_ADC_ConfigChannel+0x688>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	f040 8081 	bne.w	8002eda <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a44      	ldr	r2, [pc, #272]	; (8002ef0 <HAL_ADC_ConfigChannel+0x678>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d004      	beq.n	8002dec <HAL_ADC_ConfigChannel+0x574>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a43      	ldr	r2, [pc, #268]	; (8002ef4 <HAL_ADC_ConfigChannel+0x67c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d101      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x578>
 8002dec:	4a42      	ldr	r2, [pc, #264]	; (8002ef8 <HAL_ADC_ConfigChannel+0x680>)
 8002dee:	e000      	b.n	8002df2 <HAL_ADC_ConfigChannel+0x57a>
 8002df0:	4a42      	ldr	r2, [pc, #264]	; (8002efc <HAL_ADC_ConfigChannel+0x684>)
 8002df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4610      	mov	r0, r2
 8002dfc:	f7fe fe6d 	bl	8001ada <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e00:	4b41      	ldr	r3, [pc, #260]	; (8002f08 <HAL_ADC_ConfigChannel+0x690>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	099b      	lsrs	r3, r3, #6
 8002e06:	4a41      	ldr	r2, [pc, #260]	; (8002f0c <HAL_ADC_ConfigChannel+0x694>)
 8002e08:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0c:	099b      	lsrs	r3, r3, #6
 8002e0e:	3301      	adds	r3, #1
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002e14:	e002      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f9      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e22:	e05a      	b.n	8002eda <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a39      	ldr	r2, [pc, #228]	; (8002f10 <HAL_ADC_ConfigChannel+0x698>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d11e      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x5f4>
 8002e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d119      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a30      	ldr	r2, [pc, #192]	; (8002f00 <HAL_ADC_ConfigChannel+0x688>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d14b      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a2a      	ldr	r2, [pc, #168]	; (8002ef0 <HAL_ADC_ConfigChannel+0x678>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d004      	beq.n	8002e56 <HAL_ADC_ConfigChannel+0x5de>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a28      	ldr	r2, [pc, #160]	; (8002ef4 <HAL_ADC_ConfigChannel+0x67c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d101      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x5e2>
 8002e56:	4a28      	ldr	r2, [pc, #160]	; (8002ef8 <HAL_ADC_ConfigChannel+0x680>)
 8002e58:	e000      	b.n	8002e5c <HAL_ADC_ConfigChannel+0x5e4>
 8002e5a:	4a28      	ldr	r2, [pc, #160]	; (8002efc <HAL_ADC_ConfigChannel+0x684>)
 8002e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e62:	4619      	mov	r1, r3
 8002e64:	4610      	mov	r0, r2
 8002e66:	f7fe fe38 	bl	8001ada <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e6a:	e036      	b.n	8002eda <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a28      	ldr	r2, [pc, #160]	; (8002f14 <HAL_ADC_ConfigChannel+0x69c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d131      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x662>
 8002e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d12c      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a1e      	ldr	r2, [pc, #120]	; (8002f00 <HAL_ADC_ConfigChannel+0x688>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d127      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a18      	ldr	r2, [pc, #96]	; (8002ef0 <HAL_ADC_ConfigChannel+0x678>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d004      	beq.n	8002e9e <HAL_ADC_ConfigChannel+0x626>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a16      	ldr	r2, [pc, #88]	; (8002ef4 <HAL_ADC_ConfigChannel+0x67c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d101      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x62a>
 8002e9e:	4a16      	ldr	r2, [pc, #88]	; (8002ef8 <HAL_ADC_ConfigChannel+0x680>)
 8002ea0:	e000      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x62c>
 8002ea2:	4a16      	ldr	r2, [pc, #88]	; (8002efc <HAL_ADC_ConfigChannel+0x684>)
 8002ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4610      	mov	r0, r2
 8002eae:	f7fe fe14 	bl	8001ada <LL_ADC_SetCommonPathInternalCh>
 8002eb2:	e012      	b.n	8002eda <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb8:	f043 0220 	orr.w	r2, r3, #32
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002ec6:	e008      	b.n	8002eda <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ecc:	f043 0220 	orr.w	r2, r3, #32
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ee2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3784      	adds	r7, #132	; 0x84
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd90      	pop	{r4, r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40022000 	.word	0x40022000
 8002ef4:	40022100 	.word	0x40022100
 8002ef8:	40022300 	.word	0x40022300
 8002efc:	58026300 	.word	0x58026300
 8002f00:	58026000 	.word	0x58026000
 8002f04:	cb840000 	.word	0xcb840000
 8002f08:	24000000 	.word	0x24000000
 8002f0c:	053e2d63 	.word	0x053e2d63
 8002f10:	c7520000 	.word	0xc7520000
 8002f14:	cfb80000 	.word	0xcfb80000

08002f18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7fe ff93 	bl	8001e50 <LL_ADC_IsEnabled>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d16e      	bne.n	800300e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	4b38      	ldr	r3, [pc, #224]	; (8003018 <ADC_Enable+0x100>)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00d      	beq.n	8002f5a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f42:	f043 0210 	orr.w	r2, r3, #16
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4e:	f043 0201 	orr.w	r2, r3, #1
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e05a      	b.n	8003010 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fe ff4e 	bl	8001e00 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f64:	f7fe fd30 	bl	80019c8 <HAL_GetTick>
 8002f68:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a2b      	ldr	r2, [pc, #172]	; (800301c <ADC_Enable+0x104>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d004      	beq.n	8002f7e <ADC_Enable+0x66>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a29      	ldr	r2, [pc, #164]	; (8003020 <ADC_Enable+0x108>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d101      	bne.n	8002f82 <ADC_Enable+0x6a>
 8002f7e:	4b29      	ldr	r3, [pc, #164]	; (8003024 <ADC_Enable+0x10c>)
 8002f80:	e000      	b.n	8002f84 <ADC_Enable+0x6c>
 8002f82:	4b29      	ldr	r3, [pc, #164]	; (8003028 <ADC_Enable+0x110>)
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7fe fed1 	bl	8001d2c <LL_ADC_GetMultimode>
 8002f8a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a23      	ldr	r2, [pc, #140]	; (8003020 <ADC_Enable+0x108>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d002      	beq.n	8002f9c <ADC_Enable+0x84>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	e000      	b.n	8002f9e <ADC_Enable+0x86>
 8002f9c:	4b1f      	ldr	r3, [pc, #124]	; (800301c <ADC_Enable+0x104>)
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6812      	ldr	r2, [r2, #0]
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d02c      	beq.n	8003000 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d130      	bne.n	800300e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fac:	e028      	b.n	8003000 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fe ff4c 	bl	8001e50 <LL_ADC_IsEnabled>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d104      	bne.n	8002fc8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fe ff1c 	bl	8001e00 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fc8:	f7fe fcfe 	bl	80019c8 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d914      	bls.n	8003000 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d00d      	beq.n	8003000 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe8:	f043 0210 	orr.w	r2, r3, #16
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff4:	f043 0201 	orr.w	r2, r3, #1
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e007      	b.n	8003010 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b01      	cmp	r3, #1
 800300c:	d1cf      	bne.n	8002fae <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	8000003f 	.word	0x8000003f
 800301c:	40022000 	.word	0x40022000
 8003020:	40022100 	.word	0x40022100
 8003024:	40022300 	.word	0x40022300
 8003028:	58026300 	.word	0x58026300

0800302c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f7fe ff1c 	bl	8001e76 <LL_ADC_IsDisableOngoing>
 800303e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f7fe ff03 	bl	8001e50 <LL_ADC_IsEnabled>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d047      	beq.n	80030e0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d144      	bne.n	80030e0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f003 030d 	and.w	r3, r3, #13
 8003060:	2b01      	cmp	r3, #1
 8003062:	d10c      	bne.n	800307e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f7fe fedd 	bl	8001e28 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2203      	movs	r2, #3
 8003074:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003076:	f7fe fca7 	bl	80019c8 <HAL_GetTick>
 800307a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800307c:	e029      	b.n	80030d2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003082:	f043 0210 	orr.w	r2, r3, #16
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308e:	f043 0201 	orr.w	r2, r3, #1
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e023      	b.n	80030e2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800309a:	f7fe fc95 	bl	80019c8 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d914      	bls.n	80030d2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00d      	beq.n	80030d2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ba:	f043 0210 	orr.w	r2, r3, #16
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c6:	f043 0201 	orr.w	r2, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e007      	b.n	80030e2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1dc      	bne.n	800309a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b084      	sub	sp, #16
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003100:	2b00      	cmp	r3, #0
 8003102:	d14b      	bne.n	800319c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003108:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	2b00      	cmp	r3, #0
 800311c:	d021      	beq.n	8003162 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7fe fd4e 	bl	8001bc4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d032      	beq.n	8003194 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d12b      	bne.n	8003194 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003140:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d11f      	bne.n	8003194 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003158:	f043 0201 	orr.w	r2, r3, #1
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	655a      	str	r2, [r3, #84]	; 0x54
 8003160:	e018      	b.n	8003194 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f003 0303 	and.w	r3, r3, #3
 800316c:	2b00      	cmp	r3, #0
 800316e:	d111      	bne.n	8003194 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003174:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003180:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d105      	bne.n	8003194 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318c:	f043 0201 	orr.w	r2, r3, #1
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f7fd ffbd 	bl	8001114 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800319a:	e00e      	b.n	80031ba <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a0:	f003 0310 	and.w	r3, r3, #16
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f7ff fb5b 	bl	8002864 <HAL_ADC_ErrorCallback>
}
 80031ae:	e004      	b.n	80031ba <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	4798      	blx	r3
}
 80031ba:	bf00      	nop
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ce:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f7fd ffaa 	bl	800112a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031d6:	bf00      	nop
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b084      	sub	sp, #16
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fc:	f043 0204 	orr.w	r2, r3, #4
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f7ff fb2d 	bl	8002864 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800320a:	bf00      	nop
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a79      	ldr	r2, [pc, #484]	; (8003408 <ADC_ConfigureBoostMode+0x1f4>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d004      	beq.n	8003230 <ADC_ConfigureBoostMode+0x1c>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a78      	ldr	r2, [pc, #480]	; (800340c <ADC_ConfigureBoostMode+0x1f8>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d109      	bne.n	8003244 <ADC_ConfigureBoostMode+0x30>
 8003230:	4b77      	ldr	r3, [pc, #476]	; (8003410 <ADC_ConfigureBoostMode+0x1fc>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003238:	2b00      	cmp	r3, #0
 800323a:	bf14      	ite	ne
 800323c:	2301      	movne	r3, #1
 800323e:	2300      	moveq	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	e008      	b.n	8003256 <ADC_ConfigureBoostMode+0x42>
 8003244:	4b73      	ldr	r3, [pc, #460]	; (8003414 <ADC_ConfigureBoostMode+0x200>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800324c:	2b00      	cmp	r3, #0
 800324e:	bf14      	ite	ne
 8003250:	2301      	movne	r3, #1
 8003252:	2300      	moveq	r3, #0
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d01c      	beq.n	8003294 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800325a:	f005 f9cd 	bl	80085f8 <HAL_RCC_GetHCLKFreq>
 800325e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003268:	d010      	beq.n	800328c <ADC_ConfigureBoostMode+0x78>
 800326a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800326e:	d871      	bhi.n	8003354 <ADC_ConfigureBoostMode+0x140>
 8003270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003274:	d002      	beq.n	800327c <ADC_ConfigureBoostMode+0x68>
 8003276:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800327a:	d16b      	bne.n	8003354 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	0c1b      	lsrs	r3, r3, #16
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	fbb2 f3f3 	udiv	r3, r2, r3
 8003288:	60fb      	str	r3, [r7, #12]
        break;
 800328a:	e066      	b.n	800335a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	089b      	lsrs	r3, r3, #2
 8003290:	60fb      	str	r3, [r7, #12]
        break;
 8003292:	e062      	b.n	800335a <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003294:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003298:	f006 f950 	bl	800953c <HAL_RCCEx_GetPeriphCLKFreq>
 800329c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80032a6:	d051      	beq.n	800334c <ADC_ConfigureBoostMode+0x138>
 80032a8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80032ac:	d854      	bhi.n	8003358 <ADC_ConfigureBoostMode+0x144>
 80032ae:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80032b2:	d047      	beq.n	8003344 <ADC_ConfigureBoostMode+0x130>
 80032b4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80032b8:	d84e      	bhi.n	8003358 <ADC_ConfigureBoostMode+0x144>
 80032ba:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80032be:	d03d      	beq.n	800333c <ADC_ConfigureBoostMode+0x128>
 80032c0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80032c4:	d848      	bhi.n	8003358 <ADC_ConfigureBoostMode+0x144>
 80032c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032ca:	d033      	beq.n	8003334 <ADC_ConfigureBoostMode+0x120>
 80032cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032d0:	d842      	bhi.n	8003358 <ADC_ConfigureBoostMode+0x144>
 80032d2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80032d6:	d029      	beq.n	800332c <ADC_ConfigureBoostMode+0x118>
 80032d8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80032dc:	d83c      	bhi.n	8003358 <ADC_ConfigureBoostMode+0x144>
 80032de:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80032e2:	d01a      	beq.n	800331a <ADC_ConfigureBoostMode+0x106>
 80032e4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80032e8:	d836      	bhi.n	8003358 <ADC_ConfigureBoostMode+0x144>
 80032ea:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80032ee:	d014      	beq.n	800331a <ADC_ConfigureBoostMode+0x106>
 80032f0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80032f4:	d830      	bhi.n	8003358 <ADC_ConfigureBoostMode+0x144>
 80032f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032fa:	d00e      	beq.n	800331a <ADC_ConfigureBoostMode+0x106>
 80032fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003300:	d82a      	bhi.n	8003358 <ADC_ConfigureBoostMode+0x144>
 8003302:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003306:	d008      	beq.n	800331a <ADC_ConfigureBoostMode+0x106>
 8003308:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800330c:	d824      	bhi.n	8003358 <ADC_ConfigureBoostMode+0x144>
 800330e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003312:	d002      	beq.n	800331a <ADC_ConfigureBoostMode+0x106>
 8003314:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003318:	d11e      	bne.n	8003358 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	0c9b      	lsrs	r3, r3, #18
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	fbb2 f3f3 	udiv	r3, r2, r3
 8003328:	60fb      	str	r3, [r7, #12]
        break;
 800332a:	e016      	b.n	800335a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	091b      	lsrs	r3, r3, #4
 8003330:	60fb      	str	r3, [r7, #12]
        break;
 8003332:	e012      	b.n	800335a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	095b      	lsrs	r3, r3, #5
 8003338:	60fb      	str	r3, [r7, #12]
        break;
 800333a:	e00e      	b.n	800335a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	099b      	lsrs	r3, r3, #6
 8003340:	60fb      	str	r3, [r7, #12]
        break;
 8003342:	e00a      	b.n	800335a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	09db      	lsrs	r3, r3, #7
 8003348:	60fb      	str	r3, [r7, #12]
        break;
 800334a:	e006      	b.n	800335a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	0a1b      	lsrs	r3, r3, #8
 8003350:	60fb      	str	r3, [r7, #12]
        break;
 8003352:	e002      	b.n	800335a <ADC_ConfigureBoostMode+0x146>
        break;
 8003354:	bf00      	nop
 8003356:	e000      	b.n	800335a <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003358:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800335a:	f7fe fb65 	bl	8001a28 <HAL_GetREVID>
 800335e:	4603      	mov	r3, r0
 8003360:	f241 0203 	movw	r2, #4099	; 0x1003
 8003364:	4293      	cmp	r3, r2
 8003366:	d815      	bhi.n	8003394 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4a2b      	ldr	r2, [pc, #172]	; (8003418 <ADC_ConfigureBoostMode+0x204>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d908      	bls.n	8003382 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689a      	ldr	r2, [r3, #8]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800337e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003380:	e03e      	b.n	8003400 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003390:	609a      	str	r2, [r3, #8]
}
 8003392:	e035      	b.n	8003400 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	085b      	lsrs	r3, r3, #1
 8003398:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4a1f      	ldr	r2, [pc, #124]	; (800341c <ADC_ConfigureBoostMode+0x208>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d808      	bhi.n	80033b4 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80033b0:	609a      	str	r2, [r3, #8]
}
 80033b2:	e025      	b.n	8003400 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4a1a      	ldr	r2, [pc, #104]	; (8003420 <ADC_ConfigureBoostMode+0x20c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d80a      	bhi.n	80033d2 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ce:	609a      	str	r2, [r3, #8]
}
 80033d0:	e016      	b.n	8003400 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	4a13      	ldr	r2, [pc, #76]	; (8003424 <ADC_ConfigureBoostMode+0x210>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d80a      	bhi.n	80033f0 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ec:	609a      	str	r2, [r3, #8]
}
 80033ee:	e007      	b.n	8003400 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80033fe:	609a      	str	r2, [r3, #8]
}
 8003400:	bf00      	nop
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40022000 	.word	0x40022000
 800340c:	40022100 	.word	0x40022100
 8003410:	40022300 	.word	0x40022300
 8003414:	58026300 	.word	0x58026300
 8003418:	01312d00 	.word	0x01312d00
 800341c:	005f5e10 	.word	0x005f5e10
 8003420:	00bebc20 	.word	0x00bebc20
 8003424:	017d7840 	.word	0x017d7840

08003428 <LL_ADC_IsEnabled>:
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b01      	cmp	r3, #1
 800343a:	d101      	bne.n	8003440 <LL_ADC_IsEnabled+0x18>
 800343c:	2301      	movs	r3, #1
 800343e:	e000      	b.n	8003442 <LL_ADC_IsEnabled+0x1a>
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
	...

08003450 <LL_ADC_StartCalibration>:
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	4b09      	ldr	r3, [pc, #36]	; (8003488 <LL_ADC_StartCalibration+0x38>)
 8003462:	4013      	ands	r3, r2
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003470:	430a      	orrs	r2, r1
 8003472:	4313      	orrs	r3, r2
 8003474:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	609a      	str	r2, [r3, #8]
}
 800347c:	bf00      	nop
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	3ffeffc0 	.word	0x3ffeffc0

0800348c <LL_ADC_IsCalibrationOnGoing>:
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800349c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034a0:	d101      	bne.n	80034a6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <LL_ADC_REG_IsConversionOngoing>:
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d101      	bne.n	80034cc <LL_ADC_REG_IsConversionOngoing+0x18>
 80034c8:	2301      	movs	r3, #1
 80034ca:	e000      	b.n	80034ce <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
	...

080034dc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80034e8:	2300      	movs	r3, #0
 80034ea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d101      	bne.n	80034fa <HAL_ADCEx_Calibration_Start+0x1e>
 80034f6:	2302      	movs	r3, #2
 80034f8:	e04c      	b.n	8003594 <HAL_ADCEx_Calibration_Start+0xb8>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f7ff fd92 	bl	800302c <ADC_Disable>
 8003508:	4603      	mov	r3, r0
 800350a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800350c:	7dfb      	ldrb	r3, [r7, #23]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d135      	bne.n	800357e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003516:	4b21      	ldr	r3, [pc, #132]	; (800359c <HAL_ADCEx_Calibration_Start+0xc0>)
 8003518:	4013      	ands	r3, r2
 800351a:	f043 0202 	orr.w	r2, r3, #2
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	68b9      	ldr	r1, [r7, #8]
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff ff90 	bl	8003450 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003530:	e014      	b.n	800355c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	3301      	adds	r3, #1
 8003536:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4a19      	ldr	r2, [pc, #100]	; (80035a0 <HAL_ADCEx_Calibration_Start+0xc4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d30d      	bcc.n	800355c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003544:	f023 0312 	bic.w	r3, r3, #18
 8003548:	f043 0210 	orr.w	r2, r3, #16
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e01b      	b.n	8003594 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff ff93 	bl	800348c <LL_ADC_IsCalibrationOnGoing>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1e2      	bne.n	8003532 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003570:	f023 0303 	bic.w	r3, r3, #3
 8003574:	f043 0201 	orr.w	r2, r3, #1
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	655a      	str	r2, [r3, #84]	; 0x54
 800357c:	e005      	b.n	800358a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003582:	f043 0210 	orr.w	r2, r3, #16
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003592:	7dfb      	ldrb	r3, [r7, #23]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	ffffeefd 	.word	0xffffeefd
 80035a0:	25c3f800 	.word	0x25c3f800

080035a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003608:	b590      	push	{r4, r7, lr}
 800360a:	b09f      	sub	sp, #124	; 0x7c
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003612:	2300      	movs	r3, #0
 8003614:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800361e:	2b01      	cmp	r3, #1
 8003620:	d101      	bne.n	8003626 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003622:	2302      	movs	r3, #2
 8003624:	e0be      	b.n	80037a4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800362e:	2300      	movs	r3, #0
 8003630:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003632:	2300      	movs	r3, #0
 8003634:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a5c      	ldr	r2, [pc, #368]	; (80037ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d102      	bne.n	8003646 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003640:	4b5b      	ldr	r3, [pc, #364]	; (80037b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003642:	60bb      	str	r3, [r7, #8]
 8003644:	e001      	b.n	800364a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003646:	2300      	movs	r3, #0
 8003648:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10b      	bne.n	8003668 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003654:	f043 0220 	orr.w	r2, r3, #32
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e09d      	b.n	80037a4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff ff22 	bl	80034b4 <LL_ADC_REG_IsConversionOngoing>
 8003670:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff ff1c 	bl	80034b4 <LL_ADC_REG_IsConversionOngoing>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d17f      	bne.n	8003782 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003682:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003684:	2b00      	cmp	r3, #0
 8003686:	d17c      	bne.n	8003782 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a47      	ldr	r2, [pc, #284]	; (80037ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d004      	beq.n	800369c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a46      	ldr	r2, [pc, #280]	; (80037b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d101      	bne.n	80036a0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800369c:	4b45      	ldr	r3, [pc, #276]	; (80037b4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800369e:	e000      	b.n	80036a2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80036a0:	4b45      	ldr	r3, [pc, #276]	; (80037b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80036a2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d039      	beq.n	8003720 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80036ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	431a      	orrs	r2, r3
 80036ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036bc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a3a      	ldr	r2, [pc, #232]	; (80037ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d004      	beq.n	80036d2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a38      	ldr	r2, [pc, #224]	; (80037b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d10e      	bne.n	80036f0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80036d2:	4836      	ldr	r0, [pc, #216]	; (80037ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80036d4:	f7ff fea8 	bl	8003428 <LL_ADC_IsEnabled>
 80036d8:	4604      	mov	r4, r0
 80036da:	4835      	ldr	r0, [pc, #212]	; (80037b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80036dc:	f7ff fea4 	bl	8003428 <LL_ADC_IsEnabled>
 80036e0:	4603      	mov	r3, r0
 80036e2:	4323      	orrs	r3, r4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	bf0c      	ite	eq
 80036e8:	2301      	moveq	r3, #1
 80036ea:	2300      	movne	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	e008      	b.n	8003702 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80036f0:	4832      	ldr	r0, [pc, #200]	; (80037bc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80036f2:	f7ff fe99 	bl	8003428 <LL_ADC_IsEnabled>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	bf0c      	ite	eq
 80036fc:	2301      	moveq	r3, #1
 80036fe:	2300      	movne	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d047      	beq.n	8003796 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003708:	689a      	ldr	r2, [r3, #8]
 800370a:	4b2d      	ldr	r3, [pc, #180]	; (80037c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800370c:	4013      	ands	r3, r2
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	6811      	ldr	r1, [r2, #0]
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	6892      	ldr	r2, [r2, #8]
 8003716:	430a      	orrs	r2, r1
 8003718:	431a      	orrs	r2, r3
 800371a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800371c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800371e:	e03a      	b.n	8003796 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800372a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a1e      	ldr	r2, [pc, #120]	; (80037ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d004      	beq.n	8003740 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a1d      	ldr	r2, [pc, #116]	; (80037b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d10e      	bne.n	800375e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003740:	481a      	ldr	r0, [pc, #104]	; (80037ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003742:	f7ff fe71 	bl	8003428 <LL_ADC_IsEnabled>
 8003746:	4604      	mov	r4, r0
 8003748:	4819      	ldr	r0, [pc, #100]	; (80037b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800374a:	f7ff fe6d 	bl	8003428 <LL_ADC_IsEnabled>
 800374e:	4603      	mov	r3, r0
 8003750:	4323      	orrs	r3, r4
 8003752:	2b00      	cmp	r3, #0
 8003754:	bf0c      	ite	eq
 8003756:	2301      	moveq	r3, #1
 8003758:	2300      	movne	r3, #0
 800375a:	b2db      	uxtb	r3, r3
 800375c:	e008      	b.n	8003770 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800375e:	4817      	ldr	r0, [pc, #92]	; (80037bc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003760:	f7ff fe62 	bl	8003428 <LL_ADC_IsEnabled>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	bf0c      	ite	eq
 800376a:	2301      	moveq	r3, #1
 800376c:	2300      	movne	r3, #0
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d010      	beq.n	8003796 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800377a:	4013      	ands	r3, r2
 800377c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800377e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003780:	e009      	b.n	8003796 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003786:	f043 0220 	orr.w	r2, r3, #32
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003794:	e000      	b.n	8003798 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003796:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80037a0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	377c      	adds	r7, #124	; 0x7c
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd90      	pop	{r4, r7, pc}
 80037ac:	40022000 	.word	0x40022000
 80037b0:	40022100 	.word	0x40022100
 80037b4:	40022300 	.word	0x40022300
 80037b8:	58026300 	.word	0x58026300
 80037bc:	58026000 	.word	0x58026000
 80037c0:	fffff0e0 	.word	0xfffff0e0

080037c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037d4:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <__NVIC_SetPriorityGrouping+0x40>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037e0:	4013      	ands	r3, r2
 80037e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80037ec:	4b06      	ldr	r3, [pc, #24]	; (8003808 <__NVIC_SetPriorityGrouping+0x44>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037f2:	4a04      	ldr	r2, [pc, #16]	; (8003804 <__NVIC_SetPriorityGrouping+0x40>)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	60d3      	str	r3, [r2, #12]
}
 80037f8:	bf00      	nop
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000ed00 	.word	0xe000ed00
 8003808:	05fa0000 	.word	0x05fa0000

0800380c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003810:	4b04      	ldr	r3, [pc, #16]	; (8003824 <__NVIC_GetPriorityGrouping+0x18>)
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	0a1b      	lsrs	r3, r3, #8
 8003816:	f003 0307 	and.w	r3, r3, #7
}
 800381a:	4618      	mov	r0, r3
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	e000ed00 	.word	0xe000ed00

08003828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	4603      	mov	r3, r0
 8003830:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003836:	2b00      	cmp	r3, #0
 8003838:	db0b      	blt.n	8003852 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800383a:	88fb      	ldrh	r3, [r7, #6]
 800383c:	f003 021f 	and.w	r2, r3, #31
 8003840:	4907      	ldr	r1, [pc, #28]	; (8003860 <__NVIC_EnableIRQ+0x38>)
 8003842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003846:	095b      	lsrs	r3, r3, #5
 8003848:	2001      	movs	r0, #1
 800384a:	fa00 f202 	lsl.w	r2, r0, r2
 800384e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	e000e100 	.word	0xe000e100

08003864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	4603      	mov	r3, r0
 800386c:	6039      	str	r1, [r7, #0]
 800386e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003870:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003874:	2b00      	cmp	r3, #0
 8003876:	db0a      	blt.n	800388e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	b2da      	uxtb	r2, r3
 800387c:	490c      	ldr	r1, [pc, #48]	; (80038b0 <__NVIC_SetPriority+0x4c>)
 800387e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003882:	0112      	lsls	r2, r2, #4
 8003884:	b2d2      	uxtb	r2, r2
 8003886:	440b      	add	r3, r1
 8003888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800388c:	e00a      	b.n	80038a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	b2da      	uxtb	r2, r3
 8003892:	4908      	ldr	r1, [pc, #32]	; (80038b4 <__NVIC_SetPriority+0x50>)
 8003894:	88fb      	ldrh	r3, [r7, #6]
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	3b04      	subs	r3, #4
 800389c:	0112      	lsls	r2, r2, #4
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	440b      	add	r3, r1
 80038a2:	761a      	strb	r2, [r3, #24]
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	e000e100 	.word	0xe000e100
 80038b4:	e000ed00 	.word	0xe000ed00

080038b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b089      	sub	sp, #36	; 0x24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f1c3 0307 	rsb	r3, r3, #7
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	bf28      	it	cs
 80038d6:	2304      	movcs	r3, #4
 80038d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	3304      	adds	r3, #4
 80038de:	2b06      	cmp	r3, #6
 80038e0:	d902      	bls.n	80038e8 <NVIC_EncodePriority+0x30>
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	3b03      	subs	r3, #3
 80038e6:	e000      	b.n	80038ea <NVIC_EncodePriority+0x32>
 80038e8:	2300      	movs	r3, #0
 80038ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038ec:	f04f 32ff 	mov.w	r2, #4294967295
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	fa02 f303 	lsl.w	r3, r2, r3
 80038f6:	43da      	mvns	r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	401a      	ands	r2, r3
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003900:	f04f 31ff 	mov.w	r1, #4294967295
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	fa01 f303 	lsl.w	r3, r1, r3
 800390a:	43d9      	mvns	r1, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003910:	4313      	orrs	r3, r2
         );
}
 8003912:	4618      	mov	r0, r3
 8003914:	3724      	adds	r7, #36	; 0x24
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
	...

08003920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3b01      	subs	r3, #1
 800392c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003930:	d301      	bcc.n	8003936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003932:	2301      	movs	r3, #1
 8003934:	e00f      	b.n	8003956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003936:	4a0a      	ldr	r2, [pc, #40]	; (8003960 <SysTick_Config+0x40>)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3b01      	subs	r3, #1
 800393c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800393e:	210f      	movs	r1, #15
 8003940:	f04f 30ff 	mov.w	r0, #4294967295
 8003944:	f7ff ff8e 	bl	8003864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003948:	4b05      	ldr	r3, [pc, #20]	; (8003960 <SysTick_Config+0x40>)
 800394a:	2200      	movs	r2, #0
 800394c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800394e:	4b04      	ldr	r3, [pc, #16]	; (8003960 <SysTick_Config+0x40>)
 8003950:	2207      	movs	r2, #7
 8003952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	e000e010 	.word	0xe000e010

08003964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7ff ff29 	bl	80037c4 <__NVIC_SetPriorityGrouping>
}
 8003972:	bf00      	nop
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b086      	sub	sp, #24
 800397e:	af00      	add	r7, sp, #0
 8003980:	4603      	mov	r3, r0
 8003982:	60b9      	str	r1, [r7, #8]
 8003984:	607a      	str	r2, [r7, #4]
 8003986:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003988:	f7ff ff40 	bl	800380c <__NVIC_GetPriorityGrouping>
 800398c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	68b9      	ldr	r1, [r7, #8]
 8003992:	6978      	ldr	r0, [r7, #20]
 8003994:	f7ff ff90 	bl	80038b8 <NVIC_EncodePriority>
 8003998:	4602      	mov	r2, r0
 800399a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800399e:	4611      	mov	r1, r2
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff ff5f 	bl	8003864 <__NVIC_SetPriority>
}
 80039a6:	bf00      	nop
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	4603      	mov	r3, r0
 80039b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039bc:	4618      	mov	r0, r3
 80039be:	f7ff ff33 	bl	8003828 <__NVIC_EnableIRQ>
}
 80039c2:	bf00      	nop
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b082      	sub	sp, #8
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7ff ffa4 	bl	8003920 <SysTick_Config>
 80039d8:	4603      	mov	r3, r0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80039ec:	f7fd ffec 	bl	80019c8 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e316      	b.n	800402a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a66      	ldr	r2, [pc, #408]	; (8003b9c <HAL_DMA_Init+0x1b8>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d04a      	beq.n	8003a9c <HAL_DMA_Init+0xb8>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a65      	ldr	r2, [pc, #404]	; (8003ba0 <HAL_DMA_Init+0x1bc>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d045      	beq.n	8003a9c <HAL_DMA_Init+0xb8>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a63      	ldr	r2, [pc, #396]	; (8003ba4 <HAL_DMA_Init+0x1c0>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d040      	beq.n	8003a9c <HAL_DMA_Init+0xb8>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a62      	ldr	r2, [pc, #392]	; (8003ba8 <HAL_DMA_Init+0x1c4>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d03b      	beq.n	8003a9c <HAL_DMA_Init+0xb8>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a60      	ldr	r2, [pc, #384]	; (8003bac <HAL_DMA_Init+0x1c8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d036      	beq.n	8003a9c <HAL_DMA_Init+0xb8>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a5f      	ldr	r2, [pc, #380]	; (8003bb0 <HAL_DMA_Init+0x1cc>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d031      	beq.n	8003a9c <HAL_DMA_Init+0xb8>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a5d      	ldr	r2, [pc, #372]	; (8003bb4 <HAL_DMA_Init+0x1d0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d02c      	beq.n	8003a9c <HAL_DMA_Init+0xb8>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a5c      	ldr	r2, [pc, #368]	; (8003bb8 <HAL_DMA_Init+0x1d4>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d027      	beq.n	8003a9c <HAL_DMA_Init+0xb8>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a5a      	ldr	r2, [pc, #360]	; (8003bbc <HAL_DMA_Init+0x1d8>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d022      	beq.n	8003a9c <HAL_DMA_Init+0xb8>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a59      	ldr	r2, [pc, #356]	; (8003bc0 <HAL_DMA_Init+0x1dc>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d01d      	beq.n	8003a9c <HAL_DMA_Init+0xb8>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a57      	ldr	r2, [pc, #348]	; (8003bc4 <HAL_DMA_Init+0x1e0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d018      	beq.n	8003a9c <HAL_DMA_Init+0xb8>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a56      	ldr	r2, [pc, #344]	; (8003bc8 <HAL_DMA_Init+0x1e4>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d013      	beq.n	8003a9c <HAL_DMA_Init+0xb8>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a54      	ldr	r2, [pc, #336]	; (8003bcc <HAL_DMA_Init+0x1e8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00e      	beq.n	8003a9c <HAL_DMA_Init+0xb8>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a53      	ldr	r2, [pc, #332]	; (8003bd0 <HAL_DMA_Init+0x1ec>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d009      	beq.n	8003a9c <HAL_DMA_Init+0xb8>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a51      	ldr	r2, [pc, #324]	; (8003bd4 <HAL_DMA_Init+0x1f0>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d004      	beq.n	8003a9c <HAL_DMA_Init+0xb8>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a50      	ldr	r2, [pc, #320]	; (8003bd8 <HAL_DMA_Init+0x1f4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d101      	bne.n	8003aa0 <HAL_DMA_Init+0xbc>
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e000      	b.n	8003aa2 <HAL_DMA_Init+0xbe>
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 813b 	beq.w	8003d1e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a37      	ldr	r2, [pc, #220]	; (8003b9c <HAL_DMA_Init+0x1b8>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d04a      	beq.n	8003b58 <HAL_DMA_Init+0x174>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a36      	ldr	r2, [pc, #216]	; (8003ba0 <HAL_DMA_Init+0x1bc>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d045      	beq.n	8003b58 <HAL_DMA_Init+0x174>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a34      	ldr	r2, [pc, #208]	; (8003ba4 <HAL_DMA_Init+0x1c0>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d040      	beq.n	8003b58 <HAL_DMA_Init+0x174>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a33      	ldr	r2, [pc, #204]	; (8003ba8 <HAL_DMA_Init+0x1c4>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d03b      	beq.n	8003b58 <HAL_DMA_Init+0x174>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a31      	ldr	r2, [pc, #196]	; (8003bac <HAL_DMA_Init+0x1c8>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d036      	beq.n	8003b58 <HAL_DMA_Init+0x174>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a30      	ldr	r2, [pc, #192]	; (8003bb0 <HAL_DMA_Init+0x1cc>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d031      	beq.n	8003b58 <HAL_DMA_Init+0x174>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a2e      	ldr	r2, [pc, #184]	; (8003bb4 <HAL_DMA_Init+0x1d0>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d02c      	beq.n	8003b58 <HAL_DMA_Init+0x174>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a2d      	ldr	r2, [pc, #180]	; (8003bb8 <HAL_DMA_Init+0x1d4>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d027      	beq.n	8003b58 <HAL_DMA_Init+0x174>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a2b      	ldr	r2, [pc, #172]	; (8003bbc <HAL_DMA_Init+0x1d8>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d022      	beq.n	8003b58 <HAL_DMA_Init+0x174>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a2a      	ldr	r2, [pc, #168]	; (8003bc0 <HAL_DMA_Init+0x1dc>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d01d      	beq.n	8003b58 <HAL_DMA_Init+0x174>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a28      	ldr	r2, [pc, #160]	; (8003bc4 <HAL_DMA_Init+0x1e0>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d018      	beq.n	8003b58 <HAL_DMA_Init+0x174>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a27      	ldr	r2, [pc, #156]	; (8003bc8 <HAL_DMA_Init+0x1e4>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d013      	beq.n	8003b58 <HAL_DMA_Init+0x174>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a25      	ldr	r2, [pc, #148]	; (8003bcc <HAL_DMA_Init+0x1e8>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d00e      	beq.n	8003b58 <HAL_DMA_Init+0x174>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a24      	ldr	r2, [pc, #144]	; (8003bd0 <HAL_DMA_Init+0x1ec>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d009      	beq.n	8003b58 <HAL_DMA_Init+0x174>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a22      	ldr	r2, [pc, #136]	; (8003bd4 <HAL_DMA_Init+0x1f0>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d004      	beq.n	8003b58 <HAL_DMA_Init+0x174>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a21      	ldr	r2, [pc, #132]	; (8003bd8 <HAL_DMA_Init+0x1f4>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d108      	bne.n	8003b6a <HAL_DMA_Init+0x186>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 0201 	bic.w	r2, r2, #1
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	e007      	b.n	8003b7a <HAL_DMA_Init+0x196>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0201 	bic.w	r2, r2, #1
 8003b78:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b7a:	e02f      	b.n	8003bdc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b7c:	f7fd ff24 	bl	80019c8 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b05      	cmp	r3, #5
 8003b88:	d928      	bls.n	8003bdc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2203      	movs	r2, #3
 8003b94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e246      	b.n	800402a <HAL_DMA_Init+0x646>
 8003b9c:	40020010 	.word	0x40020010
 8003ba0:	40020028 	.word	0x40020028
 8003ba4:	40020040 	.word	0x40020040
 8003ba8:	40020058 	.word	0x40020058
 8003bac:	40020070 	.word	0x40020070
 8003bb0:	40020088 	.word	0x40020088
 8003bb4:	400200a0 	.word	0x400200a0
 8003bb8:	400200b8 	.word	0x400200b8
 8003bbc:	40020410 	.word	0x40020410
 8003bc0:	40020428 	.word	0x40020428
 8003bc4:	40020440 	.word	0x40020440
 8003bc8:	40020458 	.word	0x40020458
 8003bcc:	40020470 	.word	0x40020470
 8003bd0:	40020488 	.word	0x40020488
 8003bd4:	400204a0 	.word	0x400204a0
 8003bd8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1c8      	bne.n	8003b7c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	4b83      	ldr	r3, [pc, #524]	; (8003e04 <HAL_DMA_Init+0x420>)
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003c02:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c0e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c1a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	2b04      	cmp	r3, #4
 8003c2e:	d107      	bne.n	8003c40 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003c40:	4b71      	ldr	r3, [pc, #452]	; (8003e08 <HAL_DMA_Init+0x424>)
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	4b71      	ldr	r3, [pc, #452]	; (8003e0c <HAL_DMA_Init+0x428>)
 8003c46:	4013      	ands	r3, r2
 8003c48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c4c:	d328      	bcc.n	8003ca0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2b28      	cmp	r3, #40	; 0x28
 8003c54:	d903      	bls.n	8003c5e <HAL_DMA_Init+0x27a>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b2e      	cmp	r3, #46	; 0x2e
 8003c5c:	d917      	bls.n	8003c8e <HAL_DMA_Init+0x2aa>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2b3e      	cmp	r3, #62	; 0x3e
 8003c64:	d903      	bls.n	8003c6e <HAL_DMA_Init+0x28a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b42      	cmp	r3, #66	; 0x42
 8003c6c:	d90f      	bls.n	8003c8e <HAL_DMA_Init+0x2aa>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b46      	cmp	r3, #70	; 0x46
 8003c74:	d903      	bls.n	8003c7e <HAL_DMA_Init+0x29a>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b48      	cmp	r3, #72	; 0x48
 8003c7c:	d907      	bls.n	8003c8e <HAL_DMA_Init+0x2aa>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2b4e      	cmp	r3, #78	; 0x4e
 8003c84:	d905      	bls.n	8003c92 <HAL_DMA_Init+0x2ae>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2b52      	cmp	r3, #82	; 0x52
 8003c8c:	d801      	bhi.n	8003c92 <HAL_DMA_Init+0x2ae>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <HAL_DMA_Init+0x2b0>
 8003c92:	2300      	movs	r3, #0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d003      	beq.n	8003ca0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c9e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f023 0307 	bic.w	r3, r3, #7
 8003cb6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d117      	bne.n	8003cfa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00e      	beq.n	8003cfa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f001 fdcf 	bl	8005880 <DMA_CheckFifoParam>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d008      	beq.n	8003cfa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2240      	movs	r2, #64	; 0x40
 8003cec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e197      	b.n	800402a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f001 fd0a 	bl	800571c <DMA_CalcBaseAndBitshift>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d10:	f003 031f 	and.w	r3, r3, #31
 8003d14:	223f      	movs	r2, #63	; 0x3f
 8003d16:	409a      	lsls	r2, r3
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	609a      	str	r2, [r3, #8]
 8003d1c:	e0cd      	b.n	8003eba <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a3b      	ldr	r2, [pc, #236]	; (8003e10 <HAL_DMA_Init+0x42c>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d022      	beq.n	8003d6e <HAL_DMA_Init+0x38a>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a39      	ldr	r2, [pc, #228]	; (8003e14 <HAL_DMA_Init+0x430>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d01d      	beq.n	8003d6e <HAL_DMA_Init+0x38a>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a38      	ldr	r2, [pc, #224]	; (8003e18 <HAL_DMA_Init+0x434>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d018      	beq.n	8003d6e <HAL_DMA_Init+0x38a>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a36      	ldr	r2, [pc, #216]	; (8003e1c <HAL_DMA_Init+0x438>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d013      	beq.n	8003d6e <HAL_DMA_Init+0x38a>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a35      	ldr	r2, [pc, #212]	; (8003e20 <HAL_DMA_Init+0x43c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d00e      	beq.n	8003d6e <HAL_DMA_Init+0x38a>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a33      	ldr	r2, [pc, #204]	; (8003e24 <HAL_DMA_Init+0x440>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d009      	beq.n	8003d6e <HAL_DMA_Init+0x38a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a32      	ldr	r2, [pc, #200]	; (8003e28 <HAL_DMA_Init+0x444>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d004      	beq.n	8003d6e <HAL_DMA_Init+0x38a>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a30      	ldr	r2, [pc, #192]	; (8003e2c <HAL_DMA_Init+0x448>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d101      	bne.n	8003d72 <HAL_DMA_Init+0x38e>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e000      	b.n	8003d74 <HAL_DMA_Init+0x390>
 8003d72:	2300      	movs	r3, #0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 8097 	beq.w	8003ea8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a24      	ldr	r2, [pc, #144]	; (8003e10 <HAL_DMA_Init+0x42c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d021      	beq.n	8003dc8 <HAL_DMA_Init+0x3e4>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a22      	ldr	r2, [pc, #136]	; (8003e14 <HAL_DMA_Init+0x430>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d01c      	beq.n	8003dc8 <HAL_DMA_Init+0x3e4>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a21      	ldr	r2, [pc, #132]	; (8003e18 <HAL_DMA_Init+0x434>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d017      	beq.n	8003dc8 <HAL_DMA_Init+0x3e4>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a1f      	ldr	r2, [pc, #124]	; (8003e1c <HAL_DMA_Init+0x438>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d012      	beq.n	8003dc8 <HAL_DMA_Init+0x3e4>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a1e      	ldr	r2, [pc, #120]	; (8003e20 <HAL_DMA_Init+0x43c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d00d      	beq.n	8003dc8 <HAL_DMA_Init+0x3e4>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a1c      	ldr	r2, [pc, #112]	; (8003e24 <HAL_DMA_Init+0x440>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d008      	beq.n	8003dc8 <HAL_DMA_Init+0x3e4>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a1b      	ldr	r2, [pc, #108]	; (8003e28 <HAL_DMA_Init+0x444>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d003      	beq.n	8003dc8 <HAL_DMA_Init+0x3e4>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a19      	ldr	r2, [pc, #100]	; (8003e2c <HAL_DMA_Init+0x448>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2202      	movs	r2, #2
 8003dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	4b12      	ldr	r3, [pc, #72]	; (8003e30 <HAL_DMA_Init+0x44c>)
 8003de6:	4013      	ands	r3, r2
 8003de8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	2b40      	cmp	r3, #64	; 0x40
 8003df0:	d020      	beq.n	8003e34 <HAL_DMA_Init+0x450>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	2b80      	cmp	r3, #128	; 0x80
 8003df8:	d102      	bne.n	8003e00 <HAL_DMA_Init+0x41c>
 8003dfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003dfe:	e01a      	b.n	8003e36 <HAL_DMA_Init+0x452>
 8003e00:	2300      	movs	r3, #0
 8003e02:	e018      	b.n	8003e36 <HAL_DMA_Init+0x452>
 8003e04:	fe10803f 	.word	0xfe10803f
 8003e08:	5c001000 	.word	0x5c001000
 8003e0c:	ffff0000 	.word	0xffff0000
 8003e10:	58025408 	.word	0x58025408
 8003e14:	5802541c 	.word	0x5802541c
 8003e18:	58025430 	.word	0x58025430
 8003e1c:	58025444 	.word	0x58025444
 8003e20:	58025458 	.word	0x58025458
 8003e24:	5802546c 	.word	0x5802546c
 8003e28:	58025480 	.word	0x58025480
 8003e2c:	58025494 	.word	0x58025494
 8003e30:	fffe000f 	.word	0xfffe000f
 8003e34:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	68d2      	ldr	r2, [r2, #12]
 8003e3a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003e64:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	461a      	mov	r2, r3
 8003e7a:	4b6e      	ldr	r3, [pc, #440]	; (8004034 <HAL_DMA_Init+0x650>)
 8003e7c:	4413      	add	r3, r2
 8003e7e:	4a6e      	ldr	r2, [pc, #440]	; (8004038 <HAL_DMA_Init+0x654>)
 8003e80:	fba2 2303 	umull	r2, r3, r2, r3
 8003e84:	091b      	lsrs	r3, r3, #4
 8003e86:	009a      	lsls	r2, r3, #2
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f001 fc45 	bl	800571c <DMA_CalcBaseAndBitshift>
 8003e92:	4603      	mov	r3, r0
 8003e94:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9a:	f003 031f 	and.w	r3, r3, #31
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	409a      	lsls	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	605a      	str	r2, [r3, #4]
 8003ea6:	e008      	b.n	8003eba <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2240      	movs	r2, #64	; 0x40
 8003eac:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2203      	movs	r2, #3
 8003eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e0b7      	b.n	800402a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a5f      	ldr	r2, [pc, #380]	; (800403c <HAL_DMA_Init+0x658>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d072      	beq.n	8003faa <HAL_DMA_Init+0x5c6>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a5d      	ldr	r2, [pc, #372]	; (8004040 <HAL_DMA_Init+0x65c>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d06d      	beq.n	8003faa <HAL_DMA_Init+0x5c6>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a5c      	ldr	r2, [pc, #368]	; (8004044 <HAL_DMA_Init+0x660>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d068      	beq.n	8003faa <HAL_DMA_Init+0x5c6>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a5a      	ldr	r2, [pc, #360]	; (8004048 <HAL_DMA_Init+0x664>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d063      	beq.n	8003faa <HAL_DMA_Init+0x5c6>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a59      	ldr	r2, [pc, #356]	; (800404c <HAL_DMA_Init+0x668>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d05e      	beq.n	8003faa <HAL_DMA_Init+0x5c6>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a57      	ldr	r2, [pc, #348]	; (8004050 <HAL_DMA_Init+0x66c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d059      	beq.n	8003faa <HAL_DMA_Init+0x5c6>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a56      	ldr	r2, [pc, #344]	; (8004054 <HAL_DMA_Init+0x670>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d054      	beq.n	8003faa <HAL_DMA_Init+0x5c6>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a54      	ldr	r2, [pc, #336]	; (8004058 <HAL_DMA_Init+0x674>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d04f      	beq.n	8003faa <HAL_DMA_Init+0x5c6>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a53      	ldr	r2, [pc, #332]	; (800405c <HAL_DMA_Init+0x678>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d04a      	beq.n	8003faa <HAL_DMA_Init+0x5c6>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a51      	ldr	r2, [pc, #324]	; (8004060 <HAL_DMA_Init+0x67c>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d045      	beq.n	8003faa <HAL_DMA_Init+0x5c6>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a50      	ldr	r2, [pc, #320]	; (8004064 <HAL_DMA_Init+0x680>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d040      	beq.n	8003faa <HAL_DMA_Init+0x5c6>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a4e      	ldr	r2, [pc, #312]	; (8004068 <HAL_DMA_Init+0x684>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d03b      	beq.n	8003faa <HAL_DMA_Init+0x5c6>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a4d      	ldr	r2, [pc, #308]	; (800406c <HAL_DMA_Init+0x688>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d036      	beq.n	8003faa <HAL_DMA_Init+0x5c6>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a4b      	ldr	r2, [pc, #300]	; (8004070 <HAL_DMA_Init+0x68c>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d031      	beq.n	8003faa <HAL_DMA_Init+0x5c6>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a4a      	ldr	r2, [pc, #296]	; (8004074 <HAL_DMA_Init+0x690>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d02c      	beq.n	8003faa <HAL_DMA_Init+0x5c6>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a48      	ldr	r2, [pc, #288]	; (8004078 <HAL_DMA_Init+0x694>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d027      	beq.n	8003faa <HAL_DMA_Init+0x5c6>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a47      	ldr	r2, [pc, #284]	; (800407c <HAL_DMA_Init+0x698>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d022      	beq.n	8003faa <HAL_DMA_Init+0x5c6>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a45      	ldr	r2, [pc, #276]	; (8004080 <HAL_DMA_Init+0x69c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d01d      	beq.n	8003faa <HAL_DMA_Init+0x5c6>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a44      	ldr	r2, [pc, #272]	; (8004084 <HAL_DMA_Init+0x6a0>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d018      	beq.n	8003faa <HAL_DMA_Init+0x5c6>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a42      	ldr	r2, [pc, #264]	; (8004088 <HAL_DMA_Init+0x6a4>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d013      	beq.n	8003faa <HAL_DMA_Init+0x5c6>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a41      	ldr	r2, [pc, #260]	; (800408c <HAL_DMA_Init+0x6a8>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d00e      	beq.n	8003faa <HAL_DMA_Init+0x5c6>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a3f      	ldr	r2, [pc, #252]	; (8004090 <HAL_DMA_Init+0x6ac>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d009      	beq.n	8003faa <HAL_DMA_Init+0x5c6>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a3e      	ldr	r2, [pc, #248]	; (8004094 <HAL_DMA_Init+0x6b0>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d004      	beq.n	8003faa <HAL_DMA_Init+0x5c6>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a3c      	ldr	r2, [pc, #240]	; (8004098 <HAL_DMA_Init+0x6b4>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d101      	bne.n	8003fae <HAL_DMA_Init+0x5ca>
 8003faa:	2301      	movs	r3, #1
 8003fac:	e000      	b.n	8003fb0 <HAL_DMA_Init+0x5cc>
 8003fae:	2300      	movs	r3, #0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d032      	beq.n	800401a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f001 fcdf 	bl	8005978 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	2b80      	cmp	r3, #128	; 0x80
 8003fc0:	d102      	bne.n	8003fc8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd0:	b2d2      	uxtb	r2, r2
 8003fd2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003fdc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d010      	beq.n	8004008 <HAL_DMA_Init+0x624>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	d80c      	bhi.n	8004008 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f001 fd5c 	bl	8005aac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004004:	605a      	str	r2, [r3, #4]
 8004006:	e008      	b.n	800401a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	a7fdabf8 	.word	0xa7fdabf8
 8004038:	cccccccd 	.word	0xcccccccd
 800403c:	40020010 	.word	0x40020010
 8004040:	40020028 	.word	0x40020028
 8004044:	40020040 	.word	0x40020040
 8004048:	40020058 	.word	0x40020058
 800404c:	40020070 	.word	0x40020070
 8004050:	40020088 	.word	0x40020088
 8004054:	400200a0 	.word	0x400200a0
 8004058:	400200b8 	.word	0x400200b8
 800405c:	40020410 	.word	0x40020410
 8004060:	40020428 	.word	0x40020428
 8004064:	40020440 	.word	0x40020440
 8004068:	40020458 	.word	0x40020458
 800406c:	40020470 	.word	0x40020470
 8004070:	40020488 	.word	0x40020488
 8004074:	400204a0 	.word	0x400204a0
 8004078:	400204b8 	.word	0x400204b8
 800407c:	58025408 	.word	0x58025408
 8004080:	5802541c 	.word	0x5802541c
 8004084:	58025430 	.word	0x58025430
 8004088:	58025444 	.word	0x58025444
 800408c:	58025458 	.word	0x58025458
 8004090:	5802546c 	.word	0x5802546c
 8004094:	58025480 	.word	0x58025480
 8004098:	58025494 	.word	0x58025494

0800409c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
 80040a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e226      	b.n	8004506 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d101      	bne.n	80040c6 <HAL_DMA_Start_IT+0x2a>
 80040c2:	2302      	movs	r3, #2
 80040c4:	e21f      	b.n	8004506 <HAL_DMA_Start_IT+0x46a>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	f040 820a 	bne.w	80044f0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a68      	ldr	r2, [pc, #416]	; (8004290 <HAL_DMA_Start_IT+0x1f4>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d04a      	beq.n	800418a <HAL_DMA_Start_IT+0xee>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a66      	ldr	r2, [pc, #408]	; (8004294 <HAL_DMA_Start_IT+0x1f8>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d045      	beq.n	800418a <HAL_DMA_Start_IT+0xee>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a65      	ldr	r2, [pc, #404]	; (8004298 <HAL_DMA_Start_IT+0x1fc>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d040      	beq.n	800418a <HAL_DMA_Start_IT+0xee>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a63      	ldr	r2, [pc, #396]	; (800429c <HAL_DMA_Start_IT+0x200>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d03b      	beq.n	800418a <HAL_DMA_Start_IT+0xee>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a62      	ldr	r2, [pc, #392]	; (80042a0 <HAL_DMA_Start_IT+0x204>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d036      	beq.n	800418a <HAL_DMA_Start_IT+0xee>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a60      	ldr	r2, [pc, #384]	; (80042a4 <HAL_DMA_Start_IT+0x208>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d031      	beq.n	800418a <HAL_DMA_Start_IT+0xee>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a5f      	ldr	r2, [pc, #380]	; (80042a8 <HAL_DMA_Start_IT+0x20c>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d02c      	beq.n	800418a <HAL_DMA_Start_IT+0xee>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a5d      	ldr	r2, [pc, #372]	; (80042ac <HAL_DMA_Start_IT+0x210>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d027      	beq.n	800418a <HAL_DMA_Start_IT+0xee>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a5c      	ldr	r2, [pc, #368]	; (80042b0 <HAL_DMA_Start_IT+0x214>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d022      	beq.n	800418a <HAL_DMA_Start_IT+0xee>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a5a      	ldr	r2, [pc, #360]	; (80042b4 <HAL_DMA_Start_IT+0x218>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d01d      	beq.n	800418a <HAL_DMA_Start_IT+0xee>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a59      	ldr	r2, [pc, #356]	; (80042b8 <HAL_DMA_Start_IT+0x21c>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d018      	beq.n	800418a <HAL_DMA_Start_IT+0xee>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a57      	ldr	r2, [pc, #348]	; (80042bc <HAL_DMA_Start_IT+0x220>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d013      	beq.n	800418a <HAL_DMA_Start_IT+0xee>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a56      	ldr	r2, [pc, #344]	; (80042c0 <HAL_DMA_Start_IT+0x224>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d00e      	beq.n	800418a <HAL_DMA_Start_IT+0xee>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a54      	ldr	r2, [pc, #336]	; (80042c4 <HAL_DMA_Start_IT+0x228>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d009      	beq.n	800418a <HAL_DMA_Start_IT+0xee>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a53      	ldr	r2, [pc, #332]	; (80042c8 <HAL_DMA_Start_IT+0x22c>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d004      	beq.n	800418a <HAL_DMA_Start_IT+0xee>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a51      	ldr	r2, [pc, #324]	; (80042cc <HAL_DMA_Start_IT+0x230>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d108      	bne.n	800419c <HAL_DMA_Start_IT+0x100>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 0201 	bic.w	r2, r2, #1
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	e007      	b.n	80041ac <HAL_DMA_Start_IT+0x110>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0201 	bic.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	68b9      	ldr	r1, [r7, #8]
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f001 f906 	bl	80053c4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a34      	ldr	r2, [pc, #208]	; (8004290 <HAL_DMA_Start_IT+0x1f4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d04a      	beq.n	8004258 <HAL_DMA_Start_IT+0x1bc>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a33      	ldr	r2, [pc, #204]	; (8004294 <HAL_DMA_Start_IT+0x1f8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d045      	beq.n	8004258 <HAL_DMA_Start_IT+0x1bc>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a31      	ldr	r2, [pc, #196]	; (8004298 <HAL_DMA_Start_IT+0x1fc>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d040      	beq.n	8004258 <HAL_DMA_Start_IT+0x1bc>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a30      	ldr	r2, [pc, #192]	; (800429c <HAL_DMA_Start_IT+0x200>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d03b      	beq.n	8004258 <HAL_DMA_Start_IT+0x1bc>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a2e      	ldr	r2, [pc, #184]	; (80042a0 <HAL_DMA_Start_IT+0x204>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d036      	beq.n	8004258 <HAL_DMA_Start_IT+0x1bc>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a2d      	ldr	r2, [pc, #180]	; (80042a4 <HAL_DMA_Start_IT+0x208>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d031      	beq.n	8004258 <HAL_DMA_Start_IT+0x1bc>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a2b      	ldr	r2, [pc, #172]	; (80042a8 <HAL_DMA_Start_IT+0x20c>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d02c      	beq.n	8004258 <HAL_DMA_Start_IT+0x1bc>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a2a      	ldr	r2, [pc, #168]	; (80042ac <HAL_DMA_Start_IT+0x210>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d027      	beq.n	8004258 <HAL_DMA_Start_IT+0x1bc>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a28      	ldr	r2, [pc, #160]	; (80042b0 <HAL_DMA_Start_IT+0x214>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d022      	beq.n	8004258 <HAL_DMA_Start_IT+0x1bc>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a27      	ldr	r2, [pc, #156]	; (80042b4 <HAL_DMA_Start_IT+0x218>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d01d      	beq.n	8004258 <HAL_DMA_Start_IT+0x1bc>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a25      	ldr	r2, [pc, #148]	; (80042b8 <HAL_DMA_Start_IT+0x21c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d018      	beq.n	8004258 <HAL_DMA_Start_IT+0x1bc>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a24      	ldr	r2, [pc, #144]	; (80042bc <HAL_DMA_Start_IT+0x220>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d013      	beq.n	8004258 <HAL_DMA_Start_IT+0x1bc>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a22      	ldr	r2, [pc, #136]	; (80042c0 <HAL_DMA_Start_IT+0x224>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d00e      	beq.n	8004258 <HAL_DMA_Start_IT+0x1bc>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a21      	ldr	r2, [pc, #132]	; (80042c4 <HAL_DMA_Start_IT+0x228>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d009      	beq.n	8004258 <HAL_DMA_Start_IT+0x1bc>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a1f      	ldr	r2, [pc, #124]	; (80042c8 <HAL_DMA_Start_IT+0x22c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d004      	beq.n	8004258 <HAL_DMA_Start_IT+0x1bc>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a1e      	ldr	r2, [pc, #120]	; (80042cc <HAL_DMA_Start_IT+0x230>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d101      	bne.n	800425c <HAL_DMA_Start_IT+0x1c0>
 8004258:	2301      	movs	r3, #1
 800425a:	e000      	b.n	800425e <HAL_DMA_Start_IT+0x1c2>
 800425c:	2300      	movs	r3, #0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d036      	beq.n	80042d0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f023 021e 	bic.w	r2, r3, #30
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f042 0216 	orr.w	r2, r2, #22
 8004274:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	2b00      	cmp	r3, #0
 800427c:	d03e      	beq.n	80042fc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f042 0208 	orr.w	r2, r2, #8
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	e035      	b.n	80042fc <HAL_DMA_Start_IT+0x260>
 8004290:	40020010 	.word	0x40020010
 8004294:	40020028 	.word	0x40020028
 8004298:	40020040 	.word	0x40020040
 800429c:	40020058 	.word	0x40020058
 80042a0:	40020070 	.word	0x40020070
 80042a4:	40020088 	.word	0x40020088
 80042a8:	400200a0 	.word	0x400200a0
 80042ac:	400200b8 	.word	0x400200b8
 80042b0:	40020410 	.word	0x40020410
 80042b4:	40020428 	.word	0x40020428
 80042b8:	40020440 	.word	0x40020440
 80042bc:	40020458 	.word	0x40020458
 80042c0:	40020470 	.word	0x40020470
 80042c4:	40020488 	.word	0x40020488
 80042c8:	400204a0 	.word	0x400204a0
 80042cc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f023 020e 	bic.w	r2, r3, #14
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 020a 	orr.w	r2, r2, #10
 80042e2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d007      	beq.n	80042fc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f042 0204 	orr.w	r2, r2, #4
 80042fa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a83      	ldr	r2, [pc, #524]	; (8004510 <HAL_DMA_Start_IT+0x474>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d072      	beq.n	80043ec <HAL_DMA_Start_IT+0x350>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a82      	ldr	r2, [pc, #520]	; (8004514 <HAL_DMA_Start_IT+0x478>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d06d      	beq.n	80043ec <HAL_DMA_Start_IT+0x350>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a80      	ldr	r2, [pc, #512]	; (8004518 <HAL_DMA_Start_IT+0x47c>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d068      	beq.n	80043ec <HAL_DMA_Start_IT+0x350>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a7f      	ldr	r2, [pc, #508]	; (800451c <HAL_DMA_Start_IT+0x480>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d063      	beq.n	80043ec <HAL_DMA_Start_IT+0x350>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a7d      	ldr	r2, [pc, #500]	; (8004520 <HAL_DMA_Start_IT+0x484>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d05e      	beq.n	80043ec <HAL_DMA_Start_IT+0x350>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a7c      	ldr	r2, [pc, #496]	; (8004524 <HAL_DMA_Start_IT+0x488>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d059      	beq.n	80043ec <HAL_DMA_Start_IT+0x350>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a7a      	ldr	r2, [pc, #488]	; (8004528 <HAL_DMA_Start_IT+0x48c>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d054      	beq.n	80043ec <HAL_DMA_Start_IT+0x350>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a79      	ldr	r2, [pc, #484]	; (800452c <HAL_DMA_Start_IT+0x490>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d04f      	beq.n	80043ec <HAL_DMA_Start_IT+0x350>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a77      	ldr	r2, [pc, #476]	; (8004530 <HAL_DMA_Start_IT+0x494>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d04a      	beq.n	80043ec <HAL_DMA_Start_IT+0x350>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a76      	ldr	r2, [pc, #472]	; (8004534 <HAL_DMA_Start_IT+0x498>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d045      	beq.n	80043ec <HAL_DMA_Start_IT+0x350>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a74      	ldr	r2, [pc, #464]	; (8004538 <HAL_DMA_Start_IT+0x49c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d040      	beq.n	80043ec <HAL_DMA_Start_IT+0x350>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a73      	ldr	r2, [pc, #460]	; (800453c <HAL_DMA_Start_IT+0x4a0>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d03b      	beq.n	80043ec <HAL_DMA_Start_IT+0x350>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a71      	ldr	r2, [pc, #452]	; (8004540 <HAL_DMA_Start_IT+0x4a4>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d036      	beq.n	80043ec <HAL_DMA_Start_IT+0x350>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a70      	ldr	r2, [pc, #448]	; (8004544 <HAL_DMA_Start_IT+0x4a8>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d031      	beq.n	80043ec <HAL_DMA_Start_IT+0x350>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a6e      	ldr	r2, [pc, #440]	; (8004548 <HAL_DMA_Start_IT+0x4ac>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d02c      	beq.n	80043ec <HAL_DMA_Start_IT+0x350>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a6d      	ldr	r2, [pc, #436]	; (800454c <HAL_DMA_Start_IT+0x4b0>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d027      	beq.n	80043ec <HAL_DMA_Start_IT+0x350>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a6b      	ldr	r2, [pc, #428]	; (8004550 <HAL_DMA_Start_IT+0x4b4>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d022      	beq.n	80043ec <HAL_DMA_Start_IT+0x350>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a6a      	ldr	r2, [pc, #424]	; (8004554 <HAL_DMA_Start_IT+0x4b8>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d01d      	beq.n	80043ec <HAL_DMA_Start_IT+0x350>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a68      	ldr	r2, [pc, #416]	; (8004558 <HAL_DMA_Start_IT+0x4bc>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d018      	beq.n	80043ec <HAL_DMA_Start_IT+0x350>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a67      	ldr	r2, [pc, #412]	; (800455c <HAL_DMA_Start_IT+0x4c0>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d013      	beq.n	80043ec <HAL_DMA_Start_IT+0x350>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a65      	ldr	r2, [pc, #404]	; (8004560 <HAL_DMA_Start_IT+0x4c4>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d00e      	beq.n	80043ec <HAL_DMA_Start_IT+0x350>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a64      	ldr	r2, [pc, #400]	; (8004564 <HAL_DMA_Start_IT+0x4c8>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d009      	beq.n	80043ec <HAL_DMA_Start_IT+0x350>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a62      	ldr	r2, [pc, #392]	; (8004568 <HAL_DMA_Start_IT+0x4cc>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d004      	beq.n	80043ec <HAL_DMA_Start_IT+0x350>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a61      	ldr	r2, [pc, #388]	; (800456c <HAL_DMA_Start_IT+0x4d0>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d101      	bne.n	80043f0 <HAL_DMA_Start_IT+0x354>
 80043ec:	2301      	movs	r3, #1
 80043ee:	e000      	b.n	80043f2 <HAL_DMA_Start_IT+0x356>
 80043f0:	2300      	movs	r3, #0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d01a      	beq.n	800442c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d007      	beq.n	8004414 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800440e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004412:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004418:	2b00      	cmp	r3, #0
 800441a:	d007      	beq.n	800442c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004426:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800442a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a37      	ldr	r2, [pc, #220]	; (8004510 <HAL_DMA_Start_IT+0x474>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d04a      	beq.n	80044cc <HAL_DMA_Start_IT+0x430>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a36      	ldr	r2, [pc, #216]	; (8004514 <HAL_DMA_Start_IT+0x478>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d045      	beq.n	80044cc <HAL_DMA_Start_IT+0x430>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a34      	ldr	r2, [pc, #208]	; (8004518 <HAL_DMA_Start_IT+0x47c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d040      	beq.n	80044cc <HAL_DMA_Start_IT+0x430>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a33      	ldr	r2, [pc, #204]	; (800451c <HAL_DMA_Start_IT+0x480>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d03b      	beq.n	80044cc <HAL_DMA_Start_IT+0x430>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a31      	ldr	r2, [pc, #196]	; (8004520 <HAL_DMA_Start_IT+0x484>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d036      	beq.n	80044cc <HAL_DMA_Start_IT+0x430>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a30      	ldr	r2, [pc, #192]	; (8004524 <HAL_DMA_Start_IT+0x488>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d031      	beq.n	80044cc <HAL_DMA_Start_IT+0x430>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a2e      	ldr	r2, [pc, #184]	; (8004528 <HAL_DMA_Start_IT+0x48c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d02c      	beq.n	80044cc <HAL_DMA_Start_IT+0x430>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a2d      	ldr	r2, [pc, #180]	; (800452c <HAL_DMA_Start_IT+0x490>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d027      	beq.n	80044cc <HAL_DMA_Start_IT+0x430>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a2b      	ldr	r2, [pc, #172]	; (8004530 <HAL_DMA_Start_IT+0x494>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d022      	beq.n	80044cc <HAL_DMA_Start_IT+0x430>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a2a      	ldr	r2, [pc, #168]	; (8004534 <HAL_DMA_Start_IT+0x498>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d01d      	beq.n	80044cc <HAL_DMA_Start_IT+0x430>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a28      	ldr	r2, [pc, #160]	; (8004538 <HAL_DMA_Start_IT+0x49c>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d018      	beq.n	80044cc <HAL_DMA_Start_IT+0x430>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a27      	ldr	r2, [pc, #156]	; (800453c <HAL_DMA_Start_IT+0x4a0>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d013      	beq.n	80044cc <HAL_DMA_Start_IT+0x430>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a25      	ldr	r2, [pc, #148]	; (8004540 <HAL_DMA_Start_IT+0x4a4>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d00e      	beq.n	80044cc <HAL_DMA_Start_IT+0x430>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a24      	ldr	r2, [pc, #144]	; (8004544 <HAL_DMA_Start_IT+0x4a8>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d009      	beq.n	80044cc <HAL_DMA_Start_IT+0x430>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a22      	ldr	r2, [pc, #136]	; (8004548 <HAL_DMA_Start_IT+0x4ac>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d004      	beq.n	80044cc <HAL_DMA_Start_IT+0x430>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a21      	ldr	r2, [pc, #132]	; (800454c <HAL_DMA_Start_IT+0x4b0>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d108      	bne.n	80044de <HAL_DMA_Start_IT+0x442>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 0201 	orr.w	r2, r2, #1
 80044da:	601a      	str	r2, [r3, #0]
 80044dc:	e012      	b.n	8004504 <HAL_DMA_Start_IT+0x468>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f042 0201 	orr.w	r2, r2, #1
 80044ec:	601a      	str	r2, [r3, #0]
 80044ee:	e009      	b.n	8004504 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004504:	7dfb      	ldrb	r3, [r7, #23]
}
 8004506:	4618      	mov	r0, r3
 8004508:	3718      	adds	r7, #24
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	40020010 	.word	0x40020010
 8004514:	40020028 	.word	0x40020028
 8004518:	40020040 	.word	0x40020040
 800451c:	40020058 	.word	0x40020058
 8004520:	40020070 	.word	0x40020070
 8004524:	40020088 	.word	0x40020088
 8004528:	400200a0 	.word	0x400200a0
 800452c:	400200b8 	.word	0x400200b8
 8004530:	40020410 	.word	0x40020410
 8004534:	40020428 	.word	0x40020428
 8004538:	40020440 	.word	0x40020440
 800453c:	40020458 	.word	0x40020458
 8004540:	40020470 	.word	0x40020470
 8004544:	40020488 	.word	0x40020488
 8004548:	400204a0 	.word	0x400204a0
 800454c:	400204b8 	.word	0x400204b8
 8004550:	58025408 	.word	0x58025408
 8004554:	5802541c 	.word	0x5802541c
 8004558:	58025430 	.word	0x58025430
 800455c:	58025444 	.word	0x58025444
 8004560:	58025458 	.word	0x58025458
 8004564:	5802546c 	.word	0x5802546c
 8004568:	58025480 	.word	0x58025480
 800456c:	58025494 	.word	0x58025494

08004570 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b08a      	sub	sp, #40	; 0x28
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004578:	2300      	movs	r3, #0
 800457a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800457c:	4b67      	ldr	r3, [pc, #412]	; (800471c <HAL_DMA_IRQHandler+0x1ac>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a67      	ldr	r2, [pc, #412]	; (8004720 <HAL_DMA_IRQHandler+0x1b0>)
 8004582:	fba2 2303 	umull	r2, r3, r2, r3
 8004586:	0a9b      	lsrs	r3, r3, #10
 8004588:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004594:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a5f      	ldr	r2, [pc, #380]	; (8004724 <HAL_DMA_IRQHandler+0x1b4>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d04a      	beq.n	8004642 <HAL_DMA_IRQHandler+0xd2>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a5d      	ldr	r2, [pc, #372]	; (8004728 <HAL_DMA_IRQHandler+0x1b8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d045      	beq.n	8004642 <HAL_DMA_IRQHandler+0xd2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a5c      	ldr	r2, [pc, #368]	; (800472c <HAL_DMA_IRQHandler+0x1bc>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d040      	beq.n	8004642 <HAL_DMA_IRQHandler+0xd2>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a5a      	ldr	r2, [pc, #360]	; (8004730 <HAL_DMA_IRQHandler+0x1c0>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d03b      	beq.n	8004642 <HAL_DMA_IRQHandler+0xd2>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a59      	ldr	r2, [pc, #356]	; (8004734 <HAL_DMA_IRQHandler+0x1c4>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d036      	beq.n	8004642 <HAL_DMA_IRQHandler+0xd2>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a57      	ldr	r2, [pc, #348]	; (8004738 <HAL_DMA_IRQHandler+0x1c8>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d031      	beq.n	8004642 <HAL_DMA_IRQHandler+0xd2>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a56      	ldr	r2, [pc, #344]	; (800473c <HAL_DMA_IRQHandler+0x1cc>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d02c      	beq.n	8004642 <HAL_DMA_IRQHandler+0xd2>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a54      	ldr	r2, [pc, #336]	; (8004740 <HAL_DMA_IRQHandler+0x1d0>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d027      	beq.n	8004642 <HAL_DMA_IRQHandler+0xd2>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a53      	ldr	r2, [pc, #332]	; (8004744 <HAL_DMA_IRQHandler+0x1d4>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d022      	beq.n	8004642 <HAL_DMA_IRQHandler+0xd2>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a51      	ldr	r2, [pc, #324]	; (8004748 <HAL_DMA_IRQHandler+0x1d8>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d01d      	beq.n	8004642 <HAL_DMA_IRQHandler+0xd2>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a50      	ldr	r2, [pc, #320]	; (800474c <HAL_DMA_IRQHandler+0x1dc>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d018      	beq.n	8004642 <HAL_DMA_IRQHandler+0xd2>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a4e      	ldr	r2, [pc, #312]	; (8004750 <HAL_DMA_IRQHandler+0x1e0>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d013      	beq.n	8004642 <HAL_DMA_IRQHandler+0xd2>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a4d      	ldr	r2, [pc, #308]	; (8004754 <HAL_DMA_IRQHandler+0x1e4>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d00e      	beq.n	8004642 <HAL_DMA_IRQHandler+0xd2>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a4b      	ldr	r2, [pc, #300]	; (8004758 <HAL_DMA_IRQHandler+0x1e8>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d009      	beq.n	8004642 <HAL_DMA_IRQHandler+0xd2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a4a      	ldr	r2, [pc, #296]	; (800475c <HAL_DMA_IRQHandler+0x1ec>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d004      	beq.n	8004642 <HAL_DMA_IRQHandler+0xd2>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a48      	ldr	r2, [pc, #288]	; (8004760 <HAL_DMA_IRQHandler+0x1f0>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d101      	bne.n	8004646 <HAL_DMA_IRQHandler+0xd6>
 8004642:	2301      	movs	r3, #1
 8004644:	e000      	b.n	8004648 <HAL_DMA_IRQHandler+0xd8>
 8004646:	2300      	movs	r3, #0
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 842b 	beq.w	8004ea4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004652:	f003 031f 	and.w	r3, r3, #31
 8004656:	2208      	movs	r2, #8
 8004658:	409a      	lsls	r2, r3
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	4013      	ands	r3, r2
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 80a2 	beq.w	80047a8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a2e      	ldr	r2, [pc, #184]	; (8004724 <HAL_DMA_IRQHandler+0x1b4>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d04a      	beq.n	8004704 <HAL_DMA_IRQHandler+0x194>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a2d      	ldr	r2, [pc, #180]	; (8004728 <HAL_DMA_IRQHandler+0x1b8>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d045      	beq.n	8004704 <HAL_DMA_IRQHandler+0x194>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a2b      	ldr	r2, [pc, #172]	; (800472c <HAL_DMA_IRQHandler+0x1bc>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d040      	beq.n	8004704 <HAL_DMA_IRQHandler+0x194>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a2a      	ldr	r2, [pc, #168]	; (8004730 <HAL_DMA_IRQHandler+0x1c0>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d03b      	beq.n	8004704 <HAL_DMA_IRQHandler+0x194>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a28      	ldr	r2, [pc, #160]	; (8004734 <HAL_DMA_IRQHandler+0x1c4>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d036      	beq.n	8004704 <HAL_DMA_IRQHandler+0x194>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a27      	ldr	r2, [pc, #156]	; (8004738 <HAL_DMA_IRQHandler+0x1c8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d031      	beq.n	8004704 <HAL_DMA_IRQHandler+0x194>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a25      	ldr	r2, [pc, #148]	; (800473c <HAL_DMA_IRQHandler+0x1cc>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d02c      	beq.n	8004704 <HAL_DMA_IRQHandler+0x194>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a24      	ldr	r2, [pc, #144]	; (8004740 <HAL_DMA_IRQHandler+0x1d0>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d027      	beq.n	8004704 <HAL_DMA_IRQHandler+0x194>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a22      	ldr	r2, [pc, #136]	; (8004744 <HAL_DMA_IRQHandler+0x1d4>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d022      	beq.n	8004704 <HAL_DMA_IRQHandler+0x194>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a21      	ldr	r2, [pc, #132]	; (8004748 <HAL_DMA_IRQHandler+0x1d8>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d01d      	beq.n	8004704 <HAL_DMA_IRQHandler+0x194>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a1f      	ldr	r2, [pc, #124]	; (800474c <HAL_DMA_IRQHandler+0x1dc>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d018      	beq.n	8004704 <HAL_DMA_IRQHandler+0x194>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a1e      	ldr	r2, [pc, #120]	; (8004750 <HAL_DMA_IRQHandler+0x1e0>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d013      	beq.n	8004704 <HAL_DMA_IRQHandler+0x194>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a1c      	ldr	r2, [pc, #112]	; (8004754 <HAL_DMA_IRQHandler+0x1e4>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d00e      	beq.n	8004704 <HAL_DMA_IRQHandler+0x194>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a1b      	ldr	r2, [pc, #108]	; (8004758 <HAL_DMA_IRQHandler+0x1e8>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d009      	beq.n	8004704 <HAL_DMA_IRQHandler+0x194>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a19      	ldr	r2, [pc, #100]	; (800475c <HAL_DMA_IRQHandler+0x1ec>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d004      	beq.n	8004704 <HAL_DMA_IRQHandler+0x194>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a18      	ldr	r2, [pc, #96]	; (8004760 <HAL_DMA_IRQHandler+0x1f0>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d12f      	bne.n	8004764 <HAL_DMA_IRQHandler+0x1f4>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	2b00      	cmp	r3, #0
 8004710:	bf14      	ite	ne
 8004712:	2301      	movne	r3, #1
 8004714:	2300      	moveq	r3, #0
 8004716:	b2db      	uxtb	r3, r3
 8004718:	e02e      	b.n	8004778 <HAL_DMA_IRQHandler+0x208>
 800471a:	bf00      	nop
 800471c:	24000000 	.word	0x24000000
 8004720:	1b4e81b5 	.word	0x1b4e81b5
 8004724:	40020010 	.word	0x40020010
 8004728:	40020028 	.word	0x40020028
 800472c:	40020040 	.word	0x40020040
 8004730:	40020058 	.word	0x40020058
 8004734:	40020070 	.word	0x40020070
 8004738:	40020088 	.word	0x40020088
 800473c:	400200a0 	.word	0x400200a0
 8004740:	400200b8 	.word	0x400200b8
 8004744:	40020410 	.word	0x40020410
 8004748:	40020428 	.word	0x40020428
 800474c:	40020440 	.word	0x40020440
 8004750:	40020458 	.word	0x40020458
 8004754:	40020470 	.word	0x40020470
 8004758:	40020488 	.word	0x40020488
 800475c:	400204a0 	.word	0x400204a0
 8004760:	400204b8 	.word	0x400204b8
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0308 	and.w	r3, r3, #8
 800476e:	2b00      	cmp	r3, #0
 8004770:	bf14      	ite	ne
 8004772:	2301      	movne	r3, #1
 8004774:	2300      	moveq	r3, #0
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d015      	beq.n	80047a8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0204 	bic.w	r2, r2, #4
 800478a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004790:	f003 031f 	and.w	r3, r3, #31
 8004794:	2208      	movs	r2, #8
 8004796:	409a      	lsls	r2, r3
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a0:	f043 0201 	orr.w	r2, r3, #1
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ac:	f003 031f 	and.w	r3, r3, #31
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	fa22 f303 	lsr.w	r3, r2, r3
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d06e      	beq.n	800489c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a69      	ldr	r2, [pc, #420]	; (8004968 <HAL_DMA_IRQHandler+0x3f8>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d04a      	beq.n	800485e <HAL_DMA_IRQHandler+0x2ee>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a67      	ldr	r2, [pc, #412]	; (800496c <HAL_DMA_IRQHandler+0x3fc>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d045      	beq.n	800485e <HAL_DMA_IRQHandler+0x2ee>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a66      	ldr	r2, [pc, #408]	; (8004970 <HAL_DMA_IRQHandler+0x400>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d040      	beq.n	800485e <HAL_DMA_IRQHandler+0x2ee>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a64      	ldr	r2, [pc, #400]	; (8004974 <HAL_DMA_IRQHandler+0x404>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d03b      	beq.n	800485e <HAL_DMA_IRQHandler+0x2ee>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a63      	ldr	r2, [pc, #396]	; (8004978 <HAL_DMA_IRQHandler+0x408>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d036      	beq.n	800485e <HAL_DMA_IRQHandler+0x2ee>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a61      	ldr	r2, [pc, #388]	; (800497c <HAL_DMA_IRQHandler+0x40c>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d031      	beq.n	800485e <HAL_DMA_IRQHandler+0x2ee>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a60      	ldr	r2, [pc, #384]	; (8004980 <HAL_DMA_IRQHandler+0x410>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d02c      	beq.n	800485e <HAL_DMA_IRQHandler+0x2ee>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a5e      	ldr	r2, [pc, #376]	; (8004984 <HAL_DMA_IRQHandler+0x414>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d027      	beq.n	800485e <HAL_DMA_IRQHandler+0x2ee>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a5d      	ldr	r2, [pc, #372]	; (8004988 <HAL_DMA_IRQHandler+0x418>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d022      	beq.n	800485e <HAL_DMA_IRQHandler+0x2ee>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a5b      	ldr	r2, [pc, #364]	; (800498c <HAL_DMA_IRQHandler+0x41c>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d01d      	beq.n	800485e <HAL_DMA_IRQHandler+0x2ee>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a5a      	ldr	r2, [pc, #360]	; (8004990 <HAL_DMA_IRQHandler+0x420>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d018      	beq.n	800485e <HAL_DMA_IRQHandler+0x2ee>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a58      	ldr	r2, [pc, #352]	; (8004994 <HAL_DMA_IRQHandler+0x424>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d013      	beq.n	800485e <HAL_DMA_IRQHandler+0x2ee>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a57      	ldr	r2, [pc, #348]	; (8004998 <HAL_DMA_IRQHandler+0x428>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d00e      	beq.n	800485e <HAL_DMA_IRQHandler+0x2ee>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a55      	ldr	r2, [pc, #340]	; (800499c <HAL_DMA_IRQHandler+0x42c>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d009      	beq.n	800485e <HAL_DMA_IRQHandler+0x2ee>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a54      	ldr	r2, [pc, #336]	; (80049a0 <HAL_DMA_IRQHandler+0x430>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d004      	beq.n	800485e <HAL_DMA_IRQHandler+0x2ee>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a52      	ldr	r2, [pc, #328]	; (80049a4 <HAL_DMA_IRQHandler+0x434>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d10a      	bne.n	8004874 <HAL_DMA_IRQHandler+0x304>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004868:	2b00      	cmp	r3, #0
 800486a:	bf14      	ite	ne
 800486c:	2301      	movne	r3, #1
 800486e:	2300      	moveq	r3, #0
 8004870:	b2db      	uxtb	r3, r3
 8004872:	e003      	b.n	800487c <HAL_DMA_IRQHandler+0x30c>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2300      	movs	r3, #0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00d      	beq.n	800489c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004884:	f003 031f 	and.w	r3, r3, #31
 8004888:	2201      	movs	r2, #1
 800488a:	409a      	lsls	r2, r3
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004894:	f043 0202 	orr.w	r2, r3, #2
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a0:	f003 031f 	and.w	r3, r3, #31
 80048a4:	2204      	movs	r2, #4
 80048a6:	409a      	lsls	r2, r3
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	4013      	ands	r3, r2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 808f 	beq.w	80049d0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a2c      	ldr	r2, [pc, #176]	; (8004968 <HAL_DMA_IRQHandler+0x3f8>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d04a      	beq.n	8004952 <HAL_DMA_IRQHandler+0x3e2>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a2a      	ldr	r2, [pc, #168]	; (800496c <HAL_DMA_IRQHandler+0x3fc>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d045      	beq.n	8004952 <HAL_DMA_IRQHandler+0x3e2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a29      	ldr	r2, [pc, #164]	; (8004970 <HAL_DMA_IRQHandler+0x400>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d040      	beq.n	8004952 <HAL_DMA_IRQHandler+0x3e2>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a27      	ldr	r2, [pc, #156]	; (8004974 <HAL_DMA_IRQHandler+0x404>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d03b      	beq.n	8004952 <HAL_DMA_IRQHandler+0x3e2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a26      	ldr	r2, [pc, #152]	; (8004978 <HAL_DMA_IRQHandler+0x408>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d036      	beq.n	8004952 <HAL_DMA_IRQHandler+0x3e2>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a24      	ldr	r2, [pc, #144]	; (800497c <HAL_DMA_IRQHandler+0x40c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d031      	beq.n	8004952 <HAL_DMA_IRQHandler+0x3e2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a23      	ldr	r2, [pc, #140]	; (8004980 <HAL_DMA_IRQHandler+0x410>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d02c      	beq.n	8004952 <HAL_DMA_IRQHandler+0x3e2>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a21      	ldr	r2, [pc, #132]	; (8004984 <HAL_DMA_IRQHandler+0x414>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d027      	beq.n	8004952 <HAL_DMA_IRQHandler+0x3e2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a20      	ldr	r2, [pc, #128]	; (8004988 <HAL_DMA_IRQHandler+0x418>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d022      	beq.n	8004952 <HAL_DMA_IRQHandler+0x3e2>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a1e      	ldr	r2, [pc, #120]	; (800498c <HAL_DMA_IRQHandler+0x41c>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d01d      	beq.n	8004952 <HAL_DMA_IRQHandler+0x3e2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a1d      	ldr	r2, [pc, #116]	; (8004990 <HAL_DMA_IRQHandler+0x420>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d018      	beq.n	8004952 <HAL_DMA_IRQHandler+0x3e2>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a1b      	ldr	r2, [pc, #108]	; (8004994 <HAL_DMA_IRQHandler+0x424>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d013      	beq.n	8004952 <HAL_DMA_IRQHandler+0x3e2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a1a      	ldr	r2, [pc, #104]	; (8004998 <HAL_DMA_IRQHandler+0x428>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d00e      	beq.n	8004952 <HAL_DMA_IRQHandler+0x3e2>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a18      	ldr	r2, [pc, #96]	; (800499c <HAL_DMA_IRQHandler+0x42c>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d009      	beq.n	8004952 <HAL_DMA_IRQHandler+0x3e2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a17      	ldr	r2, [pc, #92]	; (80049a0 <HAL_DMA_IRQHandler+0x430>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d004      	beq.n	8004952 <HAL_DMA_IRQHandler+0x3e2>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a15      	ldr	r2, [pc, #84]	; (80049a4 <HAL_DMA_IRQHandler+0x434>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d12a      	bne.n	80049a8 <HAL_DMA_IRQHandler+0x438>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0302 	and.w	r3, r3, #2
 800495c:	2b00      	cmp	r3, #0
 800495e:	bf14      	ite	ne
 8004960:	2301      	movne	r3, #1
 8004962:	2300      	moveq	r3, #0
 8004964:	b2db      	uxtb	r3, r3
 8004966:	e023      	b.n	80049b0 <HAL_DMA_IRQHandler+0x440>
 8004968:	40020010 	.word	0x40020010
 800496c:	40020028 	.word	0x40020028
 8004970:	40020040 	.word	0x40020040
 8004974:	40020058 	.word	0x40020058
 8004978:	40020070 	.word	0x40020070
 800497c:	40020088 	.word	0x40020088
 8004980:	400200a0 	.word	0x400200a0
 8004984:	400200b8 	.word	0x400200b8
 8004988:	40020410 	.word	0x40020410
 800498c:	40020428 	.word	0x40020428
 8004990:	40020440 	.word	0x40020440
 8004994:	40020458 	.word	0x40020458
 8004998:	40020470 	.word	0x40020470
 800499c:	40020488 	.word	0x40020488
 80049a0:	400204a0 	.word	0x400204a0
 80049a4:	400204b8 	.word	0x400204b8
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2300      	movs	r3, #0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00d      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b8:	f003 031f 	and.w	r3, r3, #31
 80049bc:	2204      	movs	r2, #4
 80049be:	409a      	lsls	r2, r3
 80049c0:	6a3b      	ldr	r3, [r7, #32]
 80049c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c8:	f043 0204 	orr.w	r2, r3, #4
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d4:	f003 031f 	and.w	r3, r3, #31
 80049d8:	2210      	movs	r2, #16
 80049da:	409a      	lsls	r2, r3
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	4013      	ands	r3, r2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 80a6 	beq.w	8004b32 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a85      	ldr	r2, [pc, #532]	; (8004c00 <HAL_DMA_IRQHandler+0x690>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d04a      	beq.n	8004a86 <HAL_DMA_IRQHandler+0x516>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a83      	ldr	r2, [pc, #524]	; (8004c04 <HAL_DMA_IRQHandler+0x694>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d045      	beq.n	8004a86 <HAL_DMA_IRQHandler+0x516>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a82      	ldr	r2, [pc, #520]	; (8004c08 <HAL_DMA_IRQHandler+0x698>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d040      	beq.n	8004a86 <HAL_DMA_IRQHandler+0x516>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a80      	ldr	r2, [pc, #512]	; (8004c0c <HAL_DMA_IRQHandler+0x69c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d03b      	beq.n	8004a86 <HAL_DMA_IRQHandler+0x516>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a7f      	ldr	r2, [pc, #508]	; (8004c10 <HAL_DMA_IRQHandler+0x6a0>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d036      	beq.n	8004a86 <HAL_DMA_IRQHandler+0x516>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a7d      	ldr	r2, [pc, #500]	; (8004c14 <HAL_DMA_IRQHandler+0x6a4>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d031      	beq.n	8004a86 <HAL_DMA_IRQHandler+0x516>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a7c      	ldr	r2, [pc, #496]	; (8004c18 <HAL_DMA_IRQHandler+0x6a8>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d02c      	beq.n	8004a86 <HAL_DMA_IRQHandler+0x516>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a7a      	ldr	r2, [pc, #488]	; (8004c1c <HAL_DMA_IRQHandler+0x6ac>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d027      	beq.n	8004a86 <HAL_DMA_IRQHandler+0x516>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a79      	ldr	r2, [pc, #484]	; (8004c20 <HAL_DMA_IRQHandler+0x6b0>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d022      	beq.n	8004a86 <HAL_DMA_IRQHandler+0x516>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a77      	ldr	r2, [pc, #476]	; (8004c24 <HAL_DMA_IRQHandler+0x6b4>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d01d      	beq.n	8004a86 <HAL_DMA_IRQHandler+0x516>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a76      	ldr	r2, [pc, #472]	; (8004c28 <HAL_DMA_IRQHandler+0x6b8>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d018      	beq.n	8004a86 <HAL_DMA_IRQHandler+0x516>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a74      	ldr	r2, [pc, #464]	; (8004c2c <HAL_DMA_IRQHandler+0x6bc>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d013      	beq.n	8004a86 <HAL_DMA_IRQHandler+0x516>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a73      	ldr	r2, [pc, #460]	; (8004c30 <HAL_DMA_IRQHandler+0x6c0>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d00e      	beq.n	8004a86 <HAL_DMA_IRQHandler+0x516>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a71      	ldr	r2, [pc, #452]	; (8004c34 <HAL_DMA_IRQHandler+0x6c4>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d009      	beq.n	8004a86 <HAL_DMA_IRQHandler+0x516>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a70      	ldr	r2, [pc, #448]	; (8004c38 <HAL_DMA_IRQHandler+0x6c8>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d004      	beq.n	8004a86 <HAL_DMA_IRQHandler+0x516>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a6e      	ldr	r2, [pc, #440]	; (8004c3c <HAL_DMA_IRQHandler+0x6cc>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d10a      	bne.n	8004a9c <HAL_DMA_IRQHandler+0x52c>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0308 	and.w	r3, r3, #8
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	bf14      	ite	ne
 8004a94:	2301      	movne	r3, #1
 8004a96:	2300      	moveq	r3, #0
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	e009      	b.n	8004ab0 <HAL_DMA_IRQHandler+0x540>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0304 	and.w	r3, r3, #4
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	bf14      	ite	ne
 8004aaa:	2301      	movne	r3, #1
 8004aac:	2300      	moveq	r3, #0
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d03e      	beq.n	8004b32 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab8:	f003 031f 	and.w	r3, r3, #31
 8004abc:	2210      	movs	r2, #16
 8004abe:	409a      	lsls	r2, r3
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d018      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d108      	bne.n	8004af2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d024      	beq.n	8004b32 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	4798      	blx	r3
 8004af0:	e01f      	b.n	8004b32 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d01b      	beq.n	8004b32 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	4798      	blx	r3
 8004b02:	e016      	b.n	8004b32 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d107      	bne.n	8004b22 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 0208 	bic.w	r2, r2, #8
 8004b20:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b36:	f003 031f 	and.w	r3, r3, #31
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	409a      	lsls	r2, r3
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	4013      	ands	r3, r2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f000 8110 	beq.w	8004d68 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a2c      	ldr	r2, [pc, #176]	; (8004c00 <HAL_DMA_IRQHandler+0x690>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d04a      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x678>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a2b      	ldr	r2, [pc, #172]	; (8004c04 <HAL_DMA_IRQHandler+0x694>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d045      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x678>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a29      	ldr	r2, [pc, #164]	; (8004c08 <HAL_DMA_IRQHandler+0x698>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d040      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x678>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a28      	ldr	r2, [pc, #160]	; (8004c0c <HAL_DMA_IRQHandler+0x69c>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d03b      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x678>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a26      	ldr	r2, [pc, #152]	; (8004c10 <HAL_DMA_IRQHandler+0x6a0>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d036      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x678>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a25      	ldr	r2, [pc, #148]	; (8004c14 <HAL_DMA_IRQHandler+0x6a4>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d031      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x678>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a23      	ldr	r2, [pc, #140]	; (8004c18 <HAL_DMA_IRQHandler+0x6a8>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d02c      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x678>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a22      	ldr	r2, [pc, #136]	; (8004c1c <HAL_DMA_IRQHandler+0x6ac>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d027      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x678>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a20      	ldr	r2, [pc, #128]	; (8004c20 <HAL_DMA_IRQHandler+0x6b0>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d022      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x678>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a1f      	ldr	r2, [pc, #124]	; (8004c24 <HAL_DMA_IRQHandler+0x6b4>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d01d      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x678>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a1d      	ldr	r2, [pc, #116]	; (8004c28 <HAL_DMA_IRQHandler+0x6b8>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d018      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x678>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a1c      	ldr	r2, [pc, #112]	; (8004c2c <HAL_DMA_IRQHandler+0x6bc>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d013      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x678>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a1a      	ldr	r2, [pc, #104]	; (8004c30 <HAL_DMA_IRQHandler+0x6c0>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d00e      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x678>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a19      	ldr	r2, [pc, #100]	; (8004c34 <HAL_DMA_IRQHandler+0x6c4>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d009      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x678>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a17      	ldr	r2, [pc, #92]	; (8004c38 <HAL_DMA_IRQHandler+0x6c8>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d004      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x678>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a16      	ldr	r2, [pc, #88]	; (8004c3c <HAL_DMA_IRQHandler+0x6cc>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d12b      	bne.n	8004c40 <HAL_DMA_IRQHandler+0x6d0>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0310 	and.w	r3, r3, #16
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	bf14      	ite	ne
 8004bf6:	2301      	movne	r3, #1
 8004bf8:	2300      	moveq	r3, #0
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	e02a      	b.n	8004c54 <HAL_DMA_IRQHandler+0x6e4>
 8004bfe:	bf00      	nop
 8004c00:	40020010 	.word	0x40020010
 8004c04:	40020028 	.word	0x40020028
 8004c08:	40020040 	.word	0x40020040
 8004c0c:	40020058 	.word	0x40020058
 8004c10:	40020070 	.word	0x40020070
 8004c14:	40020088 	.word	0x40020088
 8004c18:	400200a0 	.word	0x400200a0
 8004c1c:	400200b8 	.word	0x400200b8
 8004c20:	40020410 	.word	0x40020410
 8004c24:	40020428 	.word	0x40020428
 8004c28:	40020440 	.word	0x40020440
 8004c2c:	40020458 	.word	0x40020458
 8004c30:	40020470 	.word	0x40020470
 8004c34:	40020488 	.word	0x40020488
 8004c38:	400204a0 	.word	0x400204a0
 8004c3c:	400204b8 	.word	0x400204b8
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	bf14      	ite	ne
 8004c4e:	2301      	movne	r3, #1
 8004c50:	2300      	moveq	r3, #0
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 8087 	beq.w	8004d68 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c5e:	f003 031f 	and.w	r3, r3, #31
 8004c62:	2220      	movs	r2, #32
 8004c64:	409a      	lsls	r2, r3
 8004c66:	6a3b      	ldr	r3, [r7, #32]
 8004c68:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	d139      	bne.n	8004cea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 0216 	bic.w	r2, r2, #22
 8004c84:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	695a      	ldr	r2, [r3, #20]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c94:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d103      	bne.n	8004ca6 <HAL_DMA_IRQHandler+0x736>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d007      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 0208 	bic.w	r2, r2, #8
 8004cb4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cba:	f003 031f 	and.w	r3, r3, #31
 8004cbe:	223f      	movs	r2, #63	; 0x3f
 8004cc0:	409a      	lsls	r2, r3
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f000 834a 	beq.w	8005374 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	4798      	blx	r3
          }
          return;
 8004ce8:	e344      	b.n	8005374 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d018      	beq.n	8004d2a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d108      	bne.n	8004d18 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d02c      	beq.n	8004d68 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	4798      	blx	r3
 8004d16:	e027      	b.n	8004d68 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d023      	beq.n	8004d68 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	4798      	blx	r3
 8004d28:	e01e      	b.n	8004d68 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10f      	bne.n	8004d58 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 0210 	bic.w	r2, r2, #16
 8004d46:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 8306 	beq.w	800537e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f000 8088 	beq.w	8004e90 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2204      	movs	r2, #4
 8004d84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a7a      	ldr	r2, [pc, #488]	; (8004f78 <HAL_DMA_IRQHandler+0xa08>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d04a      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x8b8>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a79      	ldr	r2, [pc, #484]	; (8004f7c <HAL_DMA_IRQHandler+0xa0c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d045      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x8b8>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a77      	ldr	r2, [pc, #476]	; (8004f80 <HAL_DMA_IRQHandler+0xa10>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d040      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x8b8>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a76      	ldr	r2, [pc, #472]	; (8004f84 <HAL_DMA_IRQHandler+0xa14>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d03b      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x8b8>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a74      	ldr	r2, [pc, #464]	; (8004f88 <HAL_DMA_IRQHandler+0xa18>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d036      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x8b8>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a73      	ldr	r2, [pc, #460]	; (8004f8c <HAL_DMA_IRQHandler+0xa1c>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d031      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x8b8>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a71      	ldr	r2, [pc, #452]	; (8004f90 <HAL_DMA_IRQHandler+0xa20>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d02c      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x8b8>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a70      	ldr	r2, [pc, #448]	; (8004f94 <HAL_DMA_IRQHandler+0xa24>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d027      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x8b8>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a6e      	ldr	r2, [pc, #440]	; (8004f98 <HAL_DMA_IRQHandler+0xa28>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d022      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x8b8>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a6d      	ldr	r2, [pc, #436]	; (8004f9c <HAL_DMA_IRQHandler+0xa2c>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d01d      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x8b8>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a6b      	ldr	r2, [pc, #428]	; (8004fa0 <HAL_DMA_IRQHandler+0xa30>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d018      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x8b8>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a6a      	ldr	r2, [pc, #424]	; (8004fa4 <HAL_DMA_IRQHandler+0xa34>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d013      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x8b8>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a68      	ldr	r2, [pc, #416]	; (8004fa8 <HAL_DMA_IRQHandler+0xa38>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d00e      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x8b8>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a67      	ldr	r2, [pc, #412]	; (8004fac <HAL_DMA_IRQHandler+0xa3c>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d009      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x8b8>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a65      	ldr	r2, [pc, #404]	; (8004fb0 <HAL_DMA_IRQHandler+0xa40>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d004      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x8b8>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a64      	ldr	r2, [pc, #400]	; (8004fb4 <HAL_DMA_IRQHandler+0xa44>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d108      	bne.n	8004e3a <HAL_DMA_IRQHandler+0x8ca>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 0201 	bic.w	r2, r2, #1
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	e007      	b.n	8004e4a <HAL_DMA_IRQHandler+0x8da>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f022 0201 	bic.w	r2, r2, #1
 8004e48:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d307      	bcc.n	8004e66 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1f2      	bne.n	8004e4a <HAL_DMA_IRQHandler+0x8da>
 8004e64:	e000      	b.n	8004e68 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004e66:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d004      	beq.n	8004e80 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2203      	movs	r2, #3
 8004e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004e7e:	e003      	b.n	8004e88 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 8272 	beq.w	800537e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	4798      	blx	r3
 8004ea2:	e26c      	b.n	800537e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a43      	ldr	r2, [pc, #268]	; (8004fb8 <HAL_DMA_IRQHandler+0xa48>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d022      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x984>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a42      	ldr	r2, [pc, #264]	; (8004fbc <HAL_DMA_IRQHandler+0xa4c>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d01d      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x984>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a40      	ldr	r2, [pc, #256]	; (8004fc0 <HAL_DMA_IRQHandler+0xa50>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d018      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x984>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a3f      	ldr	r2, [pc, #252]	; (8004fc4 <HAL_DMA_IRQHandler+0xa54>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d013      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x984>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a3d      	ldr	r2, [pc, #244]	; (8004fc8 <HAL_DMA_IRQHandler+0xa58>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00e      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x984>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a3c      	ldr	r2, [pc, #240]	; (8004fcc <HAL_DMA_IRQHandler+0xa5c>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d009      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x984>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a3a      	ldr	r2, [pc, #232]	; (8004fd0 <HAL_DMA_IRQHandler+0xa60>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d004      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x984>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a39      	ldr	r2, [pc, #228]	; (8004fd4 <HAL_DMA_IRQHandler+0xa64>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d101      	bne.n	8004ef8 <HAL_DMA_IRQHandler+0x988>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e000      	b.n	8004efa <HAL_DMA_IRQHandler+0x98a>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 823f 	beq.w	800537e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f0c:	f003 031f 	and.w	r3, r3, #31
 8004f10:	2204      	movs	r2, #4
 8004f12:	409a      	lsls	r2, r3
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	4013      	ands	r3, r2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 80cd 	beq.w	80050b8 <HAL_DMA_IRQHandler+0xb48>
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 80c7 	beq.w	80050b8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f2e:	f003 031f 	and.w	r3, r3, #31
 8004f32:	2204      	movs	r2, #4
 8004f34:	409a      	lsls	r2, r3
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d049      	beq.n	8004fd8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d109      	bne.n	8004f62 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f000 8210 	beq.w	8005378 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f60:	e20a      	b.n	8005378 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 8206 	beq.w	8005378 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f74:	e200      	b.n	8005378 <HAL_DMA_IRQHandler+0xe08>
 8004f76:	bf00      	nop
 8004f78:	40020010 	.word	0x40020010
 8004f7c:	40020028 	.word	0x40020028
 8004f80:	40020040 	.word	0x40020040
 8004f84:	40020058 	.word	0x40020058
 8004f88:	40020070 	.word	0x40020070
 8004f8c:	40020088 	.word	0x40020088
 8004f90:	400200a0 	.word	0x400200a0
 8004f94:	400200b8 	.word	0x400200b8
 8004f98:	40020410 	.word	0x40020410
 8004f9c:	40020428 	.word	0x40020428
 8004fa0:	40020440 	.word	0x40020440
 8004fa4:	40020458 	.word	0x40020458
 8004fa8:	40020470 	.word	0x40020470
 8004fac:	40020488 	.word	0x40020488
 8004fb0:	400204a0 	.word	0x400204a0
 8004fb4:	400204b8 	.word	0x400204b8
 8004fb8:	58025408 	.word	0x58025408
 8004fbc:	5802541c 	.word	0x5802541c
 8004fc0:	58025430 	.word	0x58025430
 8004fc4:	58025444 	.word	0x58025444
 8004fc8:	58025458 	.word	0x58025458
 8004fcc:	5802546c 	.word	0x5802546c
 8004fd0:	58025480 	.word	0x58025480
 8004fd4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	f003 0320 	and.w	r3, r3, #32
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d160      	bne.n	80050a4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a7f      	ldr	r2, [pc, #508]	; (80051e4 <HAL_DMA_IRQHandler+0xc74>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d04a      	beq.n	8005082 <HAL_DMA_IRQHandler+0xb12>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a7d      	ldr	r2, [pc, #500]	; (80051e8 <HAL_DMA_IRQHandler+0xc78>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d045      	beq.n	8005082 <HAL_DMA_IRQHandler+0xb12>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a7c      	ldr	r2, [pc, #496]	; (80051ec <HAL_DMA_IRQHandler+0xc7c>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d040      	beq.n	8005082 <HAL_DMA_IRQHandler+0xb12>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a7a      	ldr	r2, [pc, #488]	; (80051f0 <HAL_DMA_IRQHandler+0xc80>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d03b      	beq.n	8005082 <HAL_DMA_IRQHandler+0xb12>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a79      	ldr	r2, [pc, #484]	; (80051f4 <HAL_DMA_IRQHandler+0xc84>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d036      	beq.n	8005082 <HAL_DMA_IRQHandler+0xb12>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a77      	ldr	r2, [pc, #476]	; (80051f8 <HAL_DMA_IRQHandler+0xc88>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d031      	beq.n	8005082 <HAL_DMA_IRQHandler+0xb12>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a76      	ldr	r2, [pc, #472]	; (80051fc <HAL_DMA_IRQHandler+0xc8c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d02c      	beq.n	8005082 <HAL_DMA_IRQHandler+0xb12>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a74      	ldr	r2, [pc, #464]	; (8005200 <HAL_DMA_IRQHandler+0xc90>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d027      	beq.n	8005082 <HAL_DMA_IRQHandler+0xb12>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a73      	ldr	r2, [pc, #460]	; (8005204 <HAL_DMA_IRQHandler+0xc94>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d022      	beq.n	8005082 <HAL_DMA_IRQHandler+0xb12>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a71      	ldr	r2, [pc, #452]	; (8005208 <HAL_DMA_IRQHandler+0xc98>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d01d      	beq.n	8005082 <HAL_DMA_IRQHandler+0xb12>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a70      	ldr	r2, [pc, #448]	; (800520c <HAL_DMA_IRQHandler+0xc9c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d018      	beq.n	8005082 <HAL_DMA_IRQHandler+0xb12>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a6e      	ldr	r2, [pc, #440]	; (8005210 <HAL_DMA_IRQHandler+0xca0>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d013      	beq.n	8005082 <HAL_DMA_IRQHandler+0xb12>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a6d      	ldr	r2, [pc, #436]	; (8005214 <HAL_DMA_IRQHandler+0xca4>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d00e      	beq.n	8005082 <HAL_DMA_IRQHandler+0xb12>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a6b      	ldr	r2, [pc, #428]	; (8005218 <HAL_DMA_IRQHandler+0xca8>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d009      	beq.n	8005082 <HAL_DMA_IRQHandler+0xb12>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a6a      	ldr	r2, [pc, #424]	; (800521c <HAL_DMA_IRQHandler+0xcac>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d004      	beq.n	8005082 <HAL_DMA_IRQHandler+0xb12>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a68      	ldr	r2, [pc, #416]	; (8005220 <HAL_DMA_IRQHandler+0xcb0>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d108      	bne.n	8005094 <HAL_DMA_IRQHandler+0xb24>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0208 	bic.w	r2, r2, #8
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	e007      	b.n	80050a4 <HAL_DMA_IRQHandler+0xb34>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 0204 	bic.w	r2, r2, #4
 80050a2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 8165 	beq.w	8005378 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050b6:	e15f      	b.n	8005378 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050bc:	f003 031f 	and.w	r3, r3, #31
 80050c0:	2202      	movs	r2, #2
 80050c2:	409a      	lsls	r2, r3
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	4013      	ands	r3, r2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 80c5 	beq.w	8005258 <HAL_DMA_IRQHandler+0xce8>
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	f003 0302 	and.w	r3, r3, #2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 80bf 	beq.w	8005258 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050de:	f003 031f 	and.w	r3, r3, #31
 80050e2:	2202      	movs	r2, #2
 80050e4:	409a      	lsls	r2, r3
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d018      	beq.n	8005126 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d109      	bne.n	8005112 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005102:	2b00      	cmp	r3, #0
 8005104:	f000 813a 	beq.w	800537c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005110:	e134      	b.n	800537c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005116:	2b00      	cmp	r3, #0
 8005118:	f000 8130 	beq.w	800537c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005124:	e12a      	b.n	800537c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f003 0320 	and.w	r3, r3, #32
 800512c:	2b00      	cmp	r3, #0
 800512e:	f040 8089 	bne.w	8005244 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a2b      	ldr	r2, [pc, #172]	; (80051e4 <HAL_DMA_IRQHandler+0xc74>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d04a      	beq.n	80051d2 <HAL_DMA_IRQHandler+0xc62>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a29      	ldr	r2, [pc, #164]	; (80051e8 <HAL_DMA_IRQHandler+0xc78>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d045      	beq.n	80051d2 <HAL_DMA_IRQHandler+0xc62>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a28      	ldr	r2, [pc, #160]	; (80051ec <HAL_DMA_IRQHandler+0xc7c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d040      	beq.n	80051d2 <HAL_DMA_IRQHandler+0xc62>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a26      	ldr	r2, [pc, #152]	; (80051f0 <HAL_DMA_IRQHandler+0xc80>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d03b      	beq.n	80051d2 <HAL_DMA_IRQHandler+0xc62>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a25      	ldr	r2, [pc, #148]	; (80051f4 <HAL_DMA_IRQHandler+0xc84>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d036      	beq.n	80051d2 <HAL_DMA_IRQHandler+0xc62>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a23      	ldr	r2, [pc, #140]	; (80051f8 <HAL_DMA_IRQHandler+0xc88>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d031      	beq.n	80051d2 <HAL_DMA_IRQHandler+0xc62>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a22      	ldr	r2, [pc, #136]	; (80051fc <HAL_DMA_IRQHandler+0xc8c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d02c      	beq.n	80051d2 <HAL_DMA_IRQHandler+0xc62>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a20      	ldr	r2, [pc, #128]	; (8005200 <HAL_DMA_IRQHandler+0xc90>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d027      	beq.n	80051d2 <HAL_DMA_IRQHandler+0xc62>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a1f      	ldr	r2, [pc, #124]	; (8005204 <HAL_DMA_IRQHandler+0xc94>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d022      	beq.n	80051d2 <HAL_DMA_IRQHandler+0xc62>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a1d      	ldr	r2, [pc, #116]	; (8005208 <HAL_DMA_IRQHandler+0xc98>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d01d      	beq.n	80051d2 <HAL_DMA_IRQHandler+0xc62>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a1c      	ldr	r2, [pc, #112]	; (800520c <HAL_DMA_IRQHandler+0xc9c>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d018      	beq.n	80051d2 <HAL_DMA_IRQHandler+0xc62>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a1a      	ldr	r2, [pc, #104]	; (8005210 <HAL_DMA_IRQHandler+0xca0>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d013      	beq.n	80051d2 <HAL_DMA_IRQHandler+0xc62>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a19      	ldr	r2, [pc, #100]	; (8005214 <HAL_DMA_IRQHandler+0xca4>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d00e      	beq.n	80051d2 <HAL_DMA_IRQHandler+0xc62>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a17      	ldr	r2, [pc, #92]	; (8005218 <HAL_DMA_IRQHandler+0xca8>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d009      	beq.n	80051d2 <HAL_DMA_IRQHandler+0xc62>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a16      	ldr	r2, [pc, #88]	; (800521c <HAL_DMA_IRQHandler+0xcac>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d004      	beq.n	80051d2 <HAL_DMA_IRQHandler+0xc62>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a14      	ldr	r2, [pc, #80]	; (8005220 <HAL_DMA_IRQHandler+0xcb0>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d128      	bne.n	8005224 <HAL_DMA_IRQHandler+0xcb4>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f022 0214 	bic.w	r2, r2, #20
 80051e0:	601a      	str	r2, [r3, #0]
 80051e2:	e027      	b.n	8005234 <HAL_DMA_IRQHandler+0xcc4>
 80051e4:	40020010 	.word	0x40020010
 80051e8:	40020028 	.word	0x40020028
 80051ec:	40020040 	.word	0x40020040
 80051f0:	40020058 	.word	0x40020058
 80051f4:	40020070 	.word	0x40020070
 80051f8:	40020088 	.word	0x40020088
 80051fc:	400200a0 	.word	0x400200a0
 8005200:	400200b8 	.word	0x400200b8
 8005204:	40020410 	.word	0x40020410
 8005208:	40020428 	.word	0x40020428
 800520c:	40020440 	.word	0x40020440
 8005210:	40020458 	.word	0x40020458
 8005214:	40020470 	.word	0x40020470
 8005218:	40020488 	.word	0x40020488
 800521c:	400204a0 	.word	0x400204a0
 8005220:	400204b8 	.word	0x400204b8
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 020a 	bic.w	r2, r2, #10
 8005232:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 8097 	beq.w	800537c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005256:	e091      	b.n	800537c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800525c:	f003 031f 	and.w	r3, r3, #31
 8005260:	2208      	movs	r2, #8
 8005262:	409a      	lsls	r2, r3
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	4013      	ands	r3, r2
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 8088 	beq.w	800537e <HAL_DMA_IRQHandler+0xe0e>
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	f003 0308 	and.w	r3, r3, #8
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 8082 	beq.w	800537e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a41      	ldr	r2, [pc, #260]	; (8005384 <HAL_DMA_IRQHandler+0xe14>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d04a      	beq.n	800531a <HAL_DMA_IRQHandler+0xdaa>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a3f      	ldr	r2, [pc, #252]	; (8005388 <HAL_DMA_IRQHandler+0xe18>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d045      	beq.n	800531a <HAL_DMA_IRQHandler+0xdaa>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a3e      	ldr	r2, [pc, #248]	; (800538c <HAL_DMA_IRQHandler+0xe1c>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d040      	beq.n	800531a <HAL_DMA_IRQHandler+0xdaa>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a3c      	ldr	r2, [pc, #240]	; (8005390 <HAL_DMA_IRQHandler+0xe20>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d03b      	beq.n	800531a <HAL_DMA_IRQHandler+0xdaa>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a3b      	ldr	r2, [pc, #236]	; (8005394 <HAL_DMA_IRQHandler+0xe24>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d036      	beq.n	800531a <HAL_DMA_IRQHandler+0xdaa>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a39      	ldr	r2, [pc, #228]	; (8005398 <HAL_DMA_IRQHandler+0xe28>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d031      	beq.n	800531a <HAL_DMA_IRQHandler+0xdaa>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a38      	ldr	r2, [pc, #224]	; (800539c <HAL_DMA_IRQHandler+0xe2c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d02c      	beq.n	800531a <HAL_DMA_IRQHandler+0xdaa>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a36      	ldr	r2, [pc, #216]	; (80053a0 <HAL_DMA_IRQHandler+0xe30>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d027      	beq.n	800531a <HAL_DMA_IRQHandler+0xdaa>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a35      	ldr	r2, [pc, #212]	; (80053a4 <HAL_DMA_IRQHandler+0xe34>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d022      	beq.n	800531a <HAL_DMA_IRQHandler+0xdaa>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a33      	ldr	r2, [pc, #204]	; (80053a8 <HAL_DMA_IRQHandler+0xe38>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d01d      	beq.n	800531a <HAL_DMA_IRQHandler+0xdaa>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a32      	ldr	r2, [pc, #200]	; (80053ac <HAL_DMA_IRQHandler+0xe3c>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d018      	beq.n	800531a <HAL_DMA_IRQHandler+0xdaa>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a30      	ldr	r2, [pc, #192]	; (80053b0 <HAL_DMA_IRQHandler+0xe40>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d013      	beq.n	800531a <HAL_DMA_IRQHandler+0xdaa>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a2f      	ldr	r2, [pc, #188]	; (80053b4 <HAL_DMA_IRQHandler+0xe44>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d00e      	beq.n	800531a <HAL_DMA_IRQHandler+0xdaa>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a2d      	ldr	r2, [pc, #180]	; (80053b8 <HAL_DMA_IRQHandler+0xe48>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d009      	beq.n	800531a <HAL_DMA_IRQHandler+0xdaa>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a2c      	ldr	r2, [pc, #176]	; (80053bc <HAL_DMA_IRQHandler+0xe4c>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d004      	beq.n	800531a <HAL_DMA_IRQHandler+0xdaa>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a2a      	ldr	r2, [pc, #168]	; (80053c0 <HAL_DMA_IRQHandler+0xe50>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d108      	bne.n	800532c <HAL_DMA_IRQHandler+0xdbc>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 021c 	bic.w	r2, r2, #28
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	e007      	b.n	800533c <HAL_DMA_IRQHandler+0xdcc>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 020e 	bic.w	r2, r2, #14
 800533a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005340:	f003 031f 	and.w	r3, r3, #31
 8005344:	2201      	movs	r2, #1
 8005346:	409a      	lsls	r2, r3
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005366:	2b00      	cmp	r3, #0
 8005368:	d009      	beq.n	800537e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	4798      	blx	r3
 8005372:	e004      	b.n	800537e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005374:	bf00      	nop
 8005376:	e002      	b.n	800537e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005378:	bf00      	nop
 800537a:	e000      	b.n	800537e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800537c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800537e:	3728      	adds	r7, #40	; 0x28
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	40020010 	.word	0x40020010
 8005388:	40020028 	.word	0x40020028
 800538c:	40020040 	.word	0x40020040
 8005390:	40020058 	.word	0x40020058
 8005394:	40020070 	.word	0x40020070
 8005398:	40020088 	.word	0x40020088
 800539c:	400200a0 	.word	0x400200a0
 80053a0:	400200b8 	.word	0x400200b8
 80053a4:	40020410 	.word	0x40020410
 80053a8:	40020428 	.word	0x40020428
 80053ac:	40020440 	.word	0x40020440
 80053b0:	40020458 	.word	0x40020458
 80053b4:	40020470 	.word	0x40020470
 80053b8:	40020488 	.word	0x40020488
 80053bc:	400204a0 	.word	0x400204a0
 80053c0:	400204b8 	.word	0x400204b8

080053c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
 80053d0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053dc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a7f      	ldr	r2, [pc, #508]	; (80055e0 <DMA_SetConfig+0x21c>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d072      	beq.n	80054ce <DMA_SetConfig+0x10a>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a7d      	ldr	r2, [pc, #500]	; (80055e4 <DMA_SetConfig+0x220>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d06d      	beq.n	80054ce <DMA_SetConfig+0x10a>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a7c      	ldr	r2, [pc, #496]	; (80055e8 <DMA_SetConfig+0x224>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d068      	beq.n	80054ce <DMA_SetConfig+0x10a>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a7a      	ldr	r2, [pc, #488]	; (80055ec <DMA_SetConfig+0x228>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d063      	beq.n	80054ce <DMA_SetConfig+0x10a>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a79      	ldr	r2, [pc, #484]	; (80055f0 <DMA_SetConfig+0x22c>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d05e      	beq.n	80054ce <DMA_SetConfig+0x10a>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a77      	ldr	r2, [pc, #476]	; (80055f4 <DMA_SetConfig+0x230>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d059      	beq.n	80054ce <DMA_SetConfig+0x10a>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a76      	ldr	r2, [pc, #472]	; (80055f8 <DMA_SetConfig+0x234>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d054      	beq.n	80054ce <DMA_SetConfig+0x10a>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a74      	ldr	r2, [pc, #464]	; (80055fc <DMA_SetConfig+0x238>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d04f      	beq.n	80054ce <DMA_SetConfig+0x10a>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a73      	ldr	r2, [pc, #460]	; (8005600 <DMA_SetConfig+0x23c>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d04a      	beq.n	80054ce <DMA_SetConfig+0x10a>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a71      	ldr	r2, [pc, #452]	; (8005604 <DMA_SetConfig+0x240>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d045      	beq.n	80054ce <DMA_SetConfig+0x10a>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a70      	ldr	r2, [pc, #448]	; (8005608 <DMA_SetConfig+0x244>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d040      	beq.n	80054ce <DMA_SetConfig+0x10a>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a6e      	ldr	r2, [pc, #440]	; (800560c <DMA_SetConfig+0x248>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d03b      	beq.n	80054ce <DMA_SetConfig+0x10a>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a6d      	ldr	r2, [pc, #436]	; (8005610 <DMA_SetConfig+0x24c>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d036      	beq.n	80054ce <DMA_SetConfig+0x10a>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a6b      	ldr	r2, [pc, #428]	; (8005614 <DMA_SetConfig+0x250>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d031      	beq.n	80054ce <DMA_SetConfig+0x10a>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a6a      	ldr	r2, [pc, #424]	; (8005618 <DMA_SetConfig+0x254>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d02c      	beq.n	80054ce <DMA_SetConfig+0x10a>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a68      	ldr	r2, [pc, #416]	; (800561c <DMA_SetConfig+0x258>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d027      	beq.n	80054ce <DMA_SetConfig+0x10a>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a67      	ldr	r2, [pc, #412]	; (8005620 <DMA_SetConfig+0x25c>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d022      	beq.n	80054ce <DMA_SetConfig+0x10a>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a65      	ldr	r2, [pc, #404]	; (8005624 <DMA_SetConfig+0x260>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d01d      	beq.n	80054ce <DMA_SetConfig+0x10a>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a64      	ldr	r2, [pc, #400]	; (8005628 <DMA_SetConfig+0x264>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d018      	beq.n	80054ce <DMA_SetConfig+0x10a>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a62      	ldr	r2, [pc, #392]	; (800562c <DMA_SetConfig+0x268>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d013      	beq.n	80054ce <DMA_SetConfig+0x10a>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a61      	ldr	r2, [pc, #388]	; (8005630 <DMA_SetConfig+0x26c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d00e      	beq.n	80054ce <DMA_SetConfig+0x10a>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a5f      	ldr	r2, [pc, #380]	; (8005634 <DMA_SetConfig+0x270>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d009      	beq.n	80054ce <DMA_SetConfig+0x10a>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a5e      	ldr	r2, [pc, #376]	; (8005638 <DMA_SetConfig+0x274>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d004      	beq.n	80054ce <DMA_SetConfig+0x10a>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a5c      	ldr	r2, [pc, #368]	; (800563c <DMA_SetConfig+0x278>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d101      	bne.n	80054d2 <DMA_SetConfig+0x10e>
 80054ce:	2301      	movs	r3, #1
 80054d0:	e000      	b.n	80054d4 <DMA_SetConfig+0x110>
 80054d2:	2300      	movs	r3, #0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00d      	beq.n	80054f4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80054e0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d004      	beq.n	80054f4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80054f2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a39      	ldr	r2, [pc, #228]	; (80055e0 <DMA_SetConfig+0x21c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d04a      	beq.n	8005594 <DMA_SetConfig+0x1d0>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a38      	ldr	r2, [pc, #224]	; (80055e4 <DMA_SetConfig+0x220>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d045      	beq.n	8005594 <DMA_SetConfig+0x1d0>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a36      	ldr	r2, [pc, #216]	; (80055e8 <DMA_SetConfig+0x224>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d040      	beq.n	8005594 <DMA_SetConfig+0x1d0>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a35      	ldr	r2, [pc, #212]	; (80055ec <DMA_SetConfig+0x228>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d03b      	beq.n	8005594 <DMA_SetConfig+0x1d0>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a33      	ldr	r2, [pc, #204]	; (80055f0 <DMA_SetConfig+0x22c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d036      	beq.n	8005594 <DMA_SetConfig+0x1d0>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a32      	ldr	r2, [pc, #200]	; (80055f4 <DMA_SetConfig+0x230>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d031      	beq.n	8005594 <DMA_SetConfig+0x1d0>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a30      	ldr	r2, [pc, #192]	; (80055f8 <DMA_SetConfig+0x234>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d02c      	beq.n	8005594 <DMA_SetConfig+0x1d0>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a2f      	ldr	r2, [pc, #188]	; (80055fc <DMA_SetConfig+0x238>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d027      	beq.n	8005594 <DMA_SetConfig+0x1d0>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a2d      	ldr	r2, [pc, #180]	; (8005600 <DMA_SetConfig+0x23c>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d022      	beq.n	8005594 <DMA_SetConfig+0x1d0>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a2c      	ldr	r2, [pc, #176]	; (8005604 <DMA_SetConfig+0x240>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d01d      	beq.n	8005594 <DMA_SetConfig+0x1d0>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a2a      	ldr	r2, [pc, #168]	; (8005608 <DMA_SetConfig+0x244>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d018      	beq.n	8005594 <DMA_SetConfig+0x1d0>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a29      	ldr	r2, [pc, #164]	; (800560c <DMA_SetConfig+0x248>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d013      	beq.n	8005594 <DMA_SetConfig+0x1d0>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a27      	ldr	r2, [pc, #156]	; (8005610 <DMA_SetConfig+0x24c>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d00e      	beq.n	8005594 <DMA_SetConfig+0x1d0>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a26      	ldr	r2, [pc, #152]	; (8005614 <DMA_SetConfig+0x250>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d009      	beq.n	8005594 <DMA_SetConfig+0x1d0>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a24      	ldr	r2, [pc, #144]	; (8005618 <DMA_SetConfig+0x254>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d004      	beq.n	8005594 <DMA_SetConfig+0x1d0>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a23      	ldr	r2, [pc, #140]	; (800561c <DMA_SetConfig+0x258>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d101      	bne.n	8005598 <DMA_SetConfig+0x1d4>
 8005594:	2301      	movs	r3, #1
 8005596:	e000      	b.n	800559a <DMA_SetConfig+0x1d6>
 8005598:	2300      	movs	r3, #0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d059      	beq.n	8005652 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a2:	f003 031f 	and.w	r3, r3, #31
 80055a6:	223f      	movs	r2, #63	; 0x3f
 80055a8:	409a      	lsls	r2, r3
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80055bc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	2b40      	cmp	r3, #64	; 0x40
 80055cc:	d138      	bne.n	8005640 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80055de:	e086      	b.n	80056ee <DMA_SetConfig+0x32a>
 80055e0:	40020010 	.word	0x40020010
 80055e4:	40020028 	.word	0x40020028
 80055e8:	40020040 	.word	0x40020040
 80055ec:	40020058 	.word	0x40020058
 80055f0:	40020070 	.word	0x40020070
 80055f4:	40020088 	.word	0x40020088
 80055f8:	400200a0 	.word	0x400200a0
 80055fc:	400200b8 	.word	0x400200b8
 8005600:	40020410 	.word	0x40020410
 8005604:	40020428 	.word	0x40020428
 8005608:	40020440 	.word	0x40020440
 800560c:	40020458 	.word	0x40020458
 8005610:	40020470 	.word	0x40020470
 8005614:	40020488 	.word	0x40020488
 8005618:	400204a0 	.word	0x400204a0
 800561c:	400204b8 	.word	0x400204b8
 8005620:	58025408 	.word	0x58025408
 8005624:	5802541c 	.word	0x5802541c
 8005628:	58025430 	.word	0x58025430
 800562c:	58025444 	.word	0x58025444
 8005630:	58025458 	.word	0x58025458
 8005634:	5802546c 	.word	0x5802546c
 8005638:	58025480 	.word	0x58025480
 800563c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	60da      	str	r2, [r3, #12]
}
 8005650:	e04d      	b.n	80056ee <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a29      	ldr	r2, [pc, #164]	; (80056fc <DMA_SetConfig+0x338>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d022      	beq.n	80056a2 <DMA_SetConfig+0x2de>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a27      	ldr	r2, [pc, #156]	; (8005700 <DMA_SetConfig+0x33c>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d01d      	beq.n	80056a2 <DMA_SetConfig+0x2de>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a26      	ldr	r2, [pc, #152]	; (8005704 <DMA_SetConfig+0x340>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d018      	beq.n	80056a2 <DMA_SetConfig+0x2de>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a24      	ldr	r2, [pc, #144]	; (8005708 <DMA_SetConfig+0x344>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d013      	beq.n	80056a2 <DMA_SetConfig+0x2de>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a23      	ldr	r2, [pc, #140]	; (800570c <DMA_SetConfig+0x348>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d00e      	beq.n	80056a2 <DMA_SetConfig+0x2de>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a21      	ldr	r2, [pc, #132]	; (8005710 <DMA_SetConfig+0x34c>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d009      	beq.n	80056a2 <DMA_SetConfig+0x2de>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a20      	ldr	r2, [pc, #128]	; (8005714 <DMA_SetConfig+0x350>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d004      	beq.n	80056a2 <DMA_SetConfig+0x2de>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a1e      	ldr	r2, [pc, #120]	; (8005718 <DMA_SetConfig+0x354>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d101      	bne.n	80056a6 <DMA_SetConfig+0x2e2>
 80056a2:	2301      	movs	r3, #1
 80056a4:	e000      	b.n	80056a8 <DMA_SetConfig+0x2e4>
 80056a6:	2300      	movs	r3, #0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d020      	beq.n	80056ee <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b0:	f003 031f 	and.w	r3, r3, #31
 80056b4:	2201      	movs	r2, #1
 80056b6:	409a      	lsls	r2, r3
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	2b40      	cmp	r3, #64	; 0x40
 80056ca:	d108      	bne.n	80056de <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	60da      	str	r2, [r3, #12]
}
 80056dc:	e007      	b.n	80056ee <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	60da      	str	r2, [r3, #12]
}
 80056ee:	bf00      	nop
 80056f0:	371c      	adds	r7, #28
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	58025408 	.word	0x58025408
 8005700:	5802541c 	.word	0x5802541c
 8005704:	58025430 	.word	0x58025430
 8005708:	58025444 	.word	0x58025444
 800570c:	58025458 	.word	0x58025458
 8005710:	5802546c 	.word	0x5802546c
 8005714:	58025480 	.word	0x58025480
 8005718:	58025494 	.word	0x58025494

0800571c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a42      	ldr	r2, [pc, #264]	; (8005834 <DMA_CalcBaseAndBitshift+0x118>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d04a      	beq.n	80057c4 <DMA_CalcBaseAndBitshift+0xa8>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a41      	ldr	r2, [pc, #260]	; (8005838 <DMA_CalcBaseAndBitshift+0x11c>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d045      	beq.n	80057c4 <DMA_CalcBaseAndBitshift+0xa8>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a3f      	ldr	r2, [pc, #252]	; (800583c <DMA_CalcBaseAndBitshift+0x120>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d040      	beq.n	80057c4 <DMA_CalcBaseAndBitshift+0xa8>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a3e      	ldr	r2, [pc, #248]	; (8005840 <DMA_CalcBaseAndBitshift+0x124>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d03b      	beq.n	80057c4 <DMA_CalcBaseAndBitshift+0xa8>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a3c      	ldr	r2, [pc, #240]	; (8005844 <DMA_CalcBaseAndBitshift+0x128>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d036      	beq.n	80057c4 <DMA_CalcBaseAndBitshift+0xa8>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a3b      	ldr	r2, [pc, #236]	; (8005848 <DMA_CalcBaseAndBitshift+0x12c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d031      	beq.n	80057c4 <DMA_CalcBaseAndBitshift+0xa8>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a39      	ldr	r2, [pc, #228]	; (800584c <DMA_CalcBaseAndBitshift+0x130>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d02c      	beq.n	80057c4 <DMA_CalcBaseAndBitshift+0xa8>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a38      	ldr	r2, [pc, #224]	; (8005850 <DMA_CalcBaseAndBitshift+0x134>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d027      	beq.n	80057c4 <DMA_CalcBaseAndBitshift+0xa8>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a36      	ldr	r2, [pc, #216]	; (8005854 <DMA_CalcBaseAndBitshift+0x138>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d022      	beq.n	80057c4 <DMA_CalcBaseAndBitshift+0xa8>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a35      	ldr	r2, [pc, #212]	; (8005858 <DMA_CalcBaseAndBitshift+0x13c>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d01d      	beq.n	80057c4 <DMA_CalcBaseAndBitshift+0xa8>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a33      	ldr	r2, [pc, #204]	; (800585c <DMA_CalcBaseAndBitshift+0x140>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d018      	beq.n	80057c4 <DMA_CalcBaseAndBitshift+0xa8>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a32      	ldr	r2, [pc, #200]	; (8005860 <DMA_CalcBaseAndBitshift+0x144>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d013      	beq.n	80057c4 <DMA_CalcBaseAndBitshift+0xa8>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a30      	ldr	r2, [pc, #192]	; (8005864 <DMA_CalcBaseAndBitshift+0x148>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d00e      	beq.n	80057c4 <DMA_CalcBaseAndBitshift+0xa8>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a2f      	ldr	r2, [pc, #188]	; (8005868 <DMA_CalcBaseAndBitshift+0x14c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d009      	beq.n	80057c4 <DMA_CalcBaseAndBitshift+0xa8>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a2d      	ldr	r2, [pc, #180]	; (800586c <DMA_CalcBaseAndBitshift+0x150>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d004      	beq.n	80057c4 <DMA_CalcBaseAndBitshift+0xa8>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a2c      	ldr	r2, [pc, #176]	; (8005870 <DMA_CalcBaseAndBitshift+0x154>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d101      	bne.n	80057c8 <DMA_CalcBaseAndBitshift+0xac>
 80057c4:	2301      	movs	r3, #1
 80057c6:	e000      	b.n	80057ca <DMA_CalcBaseAndBitshift+0xae>
 80057c8:	2300      	movs	r3, #0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d024      	beq.n	8005818 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	3b10      	subs	r3, #16
 80057d6:	4a27      	ldr	r2, [pc, #156]	; (8005874 <DMA_CalcBaseAndBitshift+0x158>)
 80057d8:	fba2 2303 	umull	r2, r3, r2, r3
 80057dc:	091b      	lsrs	r3, r3, #4
 80057de:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f003 0307 	and.w	r3, r3, #7
 80057e6:	4a24      	ldr	r2, [pc, #144]	; (8005878 <DMA_CalcBaseAndBitshift+0x15c>)
 80057e8:	5cd3      	ldrb	r3, [r2, r3]
 80057ea:	461a      	mov	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2b03      	cmp	r3, #3
 80057f4:	d908      	bls.n	8005808 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	461a      	mov	r2, r3
 80057fc:	4b1f      	ldr	r3, [pc, #124]	; (800587c <DMA_CalcBaseAndBitshift+0x160>)
 80057fe:	4013      	ands	r3, r2
 8005800:	1d1a      	adds	r2, r3, #4
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	659a      	str	r2, [r3, #88]	; 0x58
 8005806:	e00d      	b.n	8005824 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	461a      	mov	r2, r3
 800580e:	4b1b      	ldr	r3, [pc, #108]	; (800587c <DMA_CalcBaseAndBitshift+0x160>)
 8005810:	4013      	ands	r3, r2
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	6593      	str	r3, [r2, #88]	; 0x58
 8005816:	e005      	b.n	8005824 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005828:	4618      	mov	r0, r3
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	40020010 	.word	0x40020010
 8005838:	40020028 	.word	0x40020028
 800583c:	40020040 	.word	0x40020040
 8005840:	40020058 	.word	0x40020058
 8005844:	40020070 	.word	0x40020070
 8005848:	40020088 	.word	0x40020088
 800584c:	400200a0 	.word	0x400200a0
 8005850:	400200b8 	.word	0x400200b8
 8005854:	40020410 	.word	0x40020410
 8005858:	40020428 	.word	0x40020428
 800585c:	40020440 	.word	0x40020440
 8005860:	40020458 	.word	0x40020458
 8005864:	40020470 	.word	0x40020470
 8005868:	40020488 	.word	0x40020488
 800586c:	400204a0 	.word	0x400204a0
 8005870:	400204b8 	.word	0x400204b8
 8005874:	aaaaaaab 	.word	0xaaaaaaab
 8005878:	080110dc 	.word	0x080110dc
 800587c:	fffffc00 	.word	0xfffffc00

08005880 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005888:	2300      	movs	r3, #0
 800588a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d120      	bne.n	80058d6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005898:	2b03      	cmp	r3, #3
 800589a:	d858      	bhi.n	800594e <DMA_CheckFifoParam+0xce>
 800589c:	a201      	add	r2, pc, #4	; (adr r2, 80058a4 <DMA_CheckFifoParam+0x24>)
 800589e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a2:	bf00      	nop
 80058a4:	080058b5 	.word	0x080058b5
 80058a8:	080058c7 	.word	0x080058c7
 80058ac:	080058b5 	.word	0x080058b5
 80058b0:	0800594f 	.word	0x0800594f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d048      	beq.n	8005952 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058c4:	e045      	b.n	8005952 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058ce:	d142      	bne.n	8005956 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058d4:	e03f      	b.n	8005956 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058de:	d123      	bne.n	8005928 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e4:	2b03      	cmp	r3, #3
 80058e6:	d838      	bhi.n	800595a <DMA_CheckFifoParam+0xda>
 80058e8:	a201      	add	r2, pc, #4	; (adr r2, 80058f0 <DMA_CheckFifoParam+0x70>)
 80058ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ee:	bf00      	nop
 80058f0:	08005901 	.word	0x08005901
 80058f4:	08005907 	.word	0x08005907
 80058f8:	08005901 	.word	0x08005901
 80058fc:	08005919 	.word	0x08005919
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	73fb      	strb	r3, [r7, #15]
        break;
 8005904:	e030      	b.n	8005968 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d025      	beq.n	800595e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005916:	e022      	b.n	800595e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005920:	d11f      	bne.n	8005962 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005926:	e01c      	b.n	8005962 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592c:	2b02      	cmp	r3, #2
 800592e:	d902      	bls.n	8005936 <DMA_CheckFifoParam+0xb6>
 8005930:	2b03      	cmp	r3, #3
 8005932:	d003      	beq.n	800593c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005934:	e018      	b.n	8005968 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	73fb      	strb	r3, [r7, #15]
        break;
 800593a:	e015      	b.n	8005968 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005940:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00e      	beq.n	8005966 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	73fb      	strb	r3, [r7, #15]
    break;
 800594c:	e00b      	b.n	8005966 <DMA_CheckFifoParam+0xe6>
        break;
 800594e:	bf00      	nop
 8005950:	e00a      	b.n	8005968 <DMA_CheckFifoParam+0xe8>
        break;
 8005952:	bf00      	nop
 8005954:	e008      	b.n	8005968 <DMA_CheckFifoParam+0xe8>
        break;
 8005956:	bf00      	nop
 8005958:	e006      	b.n	8005968 <DMA_CheckFifoParam+0xe8>
        break;
 800595a:	bf00      	nop
 800595c:	e004      	b.n	8005968 <DMA_CheckFifoParam+0xe8>
        break;
 800595e:	bf00      	nop
 8005960:	e002      	b.n	8005968 <DMA_CheckFifoParam+0xe8>
        break;
 8005962:	bf00      	nop
 8005964:	e000      	b.n	8005968 <DMA_CheckFifoParam+0xe8>
    break;
 8005966:	bf00      	nop
    }
  }

  return status;
 8005968:	7bfb      	ldrb	r3, [r7, #15]
}
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop

08005978 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a38      	ldr	r2, [pc, #224]	; (8005a6c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d022      	beq.n	80059d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a36      	ldr	r2, [pc, #216]	; (8005a70 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d01d      	beq.n	80059d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a35      	ldr	r2, [pc, #212]	; (8005a74 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d018      	beq.n	80059d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a33      	ldr	r2, [pc, #204]	; (8005a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d013      	beq.n	80059d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a32      	ldr	r2, [pc, #200]	; (8005a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d00e      	beq.n	80059d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a30      	ldr	r2, [pc, #192]	; (8005a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d009      	beq.n	80059d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a2f      	ldr	r2, [pc, #188]	; (8005a84 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d004      	beq.n	80059d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a2d      	ldr	r2, [pc, #180]	; (8005a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d101      	bne.n	80059da <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80059d6:	2301      	movs	r3, #1
 80059d8:	e000      	b.n	80059dc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80059da:	2300      	movs	r3, #0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d01a      	beq.n	8005a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	3b08      	subs	r3, #8
 80059e8:	4a28      	ldr	r2, [pc, #160]	; (8005a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80059ea:	fba2 2303 	umull	r2, r3, r2, r3
 80059ee:	091b      	lsrs	r3, r3, #4
 80059f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	4b26      	ldr	r3, [pc, #152]	; (8005a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80059f6:	4413      	add	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	461a      	mov	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a24      	ldr	r2, [pc, #144]	; (8005a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005a04:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f003 031f 	and.w	r3, r3, #31
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	409a      	lsls	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005a14:	e024      	b.n	8005a60 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	3b10      	subs	r3, #16
 8005a1e:	4a1e      	ldr	r2, [pc, #120]	; (8005a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005a20:	fba2 2303 	umull	r2, r3, r2, r3
 8005a24:	091b      	lsrs	r3, r3, #4
 8005a26:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	4a1c      	ldr	r2, [pc, #112]	; (8005a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d806      	bhi.n	8005a3e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	4a1b      	ldr	r2, [pc, #108]	; (8005aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d902      	bls.n	8005a3e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	3308      	adds	r3, #8
 8005a3c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	4b18      	ldr	r3, [pc, #96]	; (8005aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005a42:	4413      	add	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	461a      	mov	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a16      	ldr	r2, [pc, #88]	; (8005aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005a50:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f003 031f 	and.w	r3, r3, #31
 8005a58:	2201      	movs	r2, #1
 8005a5a:	409a      	lsls	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005a60:	bf00      	nop
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	58025408 	.word	0x58025408
 8005a70:	5802541c 	.word	0x5802541c
 8005a74:	58025430 	.word	0x58025430
 8005a78:	58025444 	.word	0x58025444
 8005a7c:	58025458 	.word	0x58025458
 8005a80:	5802546c 	.word	0x5802546c
 8005a84:	58025480 	.word	0x58025480
 8005a88:	58025494 	.word	0x58025494
 8005a8c:	cccccccd 	.word	0xcccccccd
 8005a90:	16009600 	.word	0x16009600
 8005a94:	58025880 	.word	0x58025880
 8005a98:	aaaaaaab 	.word	0xaaaaaaab
 8005a9c:	400204b8 	.word	0x400204b8
 8005aa0:	4002040f 	.word	0x4002040f
 8005aa4:	10008200 	.word	0x10008200
 8005aa8:	40020880 	.word	0x40020880

08005aac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d04a      	beq.n	8005b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2b08      	cmp	r3, #8
 8005ac6:	d847      	bhi.n	8005b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a25      	ldr	r2, [pc, #148]	; (8005b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d022      	beq.n	8005b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a24      	ldr	r2, [pc, #144]	; (8005b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d01d      	beq.n	8005b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a22      	ldr	r2, [pc, #136]	; (8005b6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d018      	beq.n	8005b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a21      	ldr	r2, [pc, #132]	; (8005b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d013      	beq.n	8005b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a1f      	ldr	r2, [pc, #124]	; (8005b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d00e      	beq.n	8005b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a1e      	ldr	r2, [pc, #120]	; (8005b78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d009      	beq.n	8005b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a1c      	ldr	r2, [pc, #112]	; (8005b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d004      	beq.n	8005b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a1b      	ldr	r2, [pc, #108]	; (8005b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d101      	bne.n	8005b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e000      	b.n	8005b1e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00a      	beq.n	8005b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4b17      	ldr	r3, [pc, #92]	; (8005b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005b26:	4413      	add	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a15      	ldr	r2, [pc, #84]	; (8005b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005b34:	671a      	str	r2, [r3, #112]	; 0x70
 8005b36:	e009      	b.n	8005b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	4b14      	ldr	r3, [pc, #80]	; (8005b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005b3c:	4413      	add	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	461a      	mov	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a11      	ldr	r2, [pc, #68]	; (8005b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005b4a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	2201      	movs	r2, #1
 8005b52:	409a      	lsls	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005b58:	bf00      	nop
 8005b5a:	3714      	adds	r7, #20
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	58025408 	.word	0x58025408
 8005b68:	5802541c 	.word	0x5802541c
 8005b6c:	58025430 	.word	0x58025430
 8005b70:	58025444 	.word	0x58025444
 8005b74:	58025458 	.word	0x58025458
 8005b78:	5802546c 	.word	0x5802546c
 8005b7c:	58025480 	.word	0x58025480
 8005b80:	58025494 	.word	0x58025494
 8005b84:	1600963f 	.word	0x1600963f
 8005b88:	58025940 	.word	0x58025940
 8005b8c:	1000823f 	.word	0x1000823f
 8005b90:	40020940 	.word	0x40020940

08005b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b089      	sub	sp, #36	; 0x24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005ba2:	4b89      	ldr	r3, [pc, #548]	; (8005dc8 <HAL_GPIO_Init+0x234>)
 8005ba4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005ba6:	e194      	b.n	8005ed2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	2101      	movs	r1, #1
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f000 8186 	beq.w	8005ecc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f003 0303 	and.w	r3, r3, #3
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d005      	beq.n	8005bd8 <HAL_GPIO_Init+0x44>
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f003 0303 	and.w	r3, r3, #3
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d130      	bne.n	8005c3a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	005b      	lsls	r3, r3, #1
 8005be2:	2203      	movs	r2, #3
 8005be4:	fa02 f303 	lsl.w	r3, r2, r3
 8005be8:	43db      	mvns	r3, r3
 8005bea:	69ba      	ldr	r2, [r7, #24]
 8005bec:	4013      	ands	r3, r2
 8005bee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	68da      	ldr	r2, [r3, #12]
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	005b      	lsls	r3, r3, #1
 8005bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c0e:	2201      	movs	r2, #1
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	fa02 f303 	lsl.w	r3, r2, r3
 8005c16:	43db      	mvns	r3, r3
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	091b      	lsrs	r3, r3, #4
 8005c24:	f003 0201 	and.w	r2, r3, #1
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2e:	69ba      	ldr	r2, [r7, #24]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f003 0303 	and.w	r3, r3, #3
 8005c42:	2b03      	cmp	r3, #3
 8005c44:	d017      	beq.n	8005c76 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	2203      	movs	r2, #3
 8005c52:	fa02 f303 	lsl.w	r3, r2, r3
 8005c56:	43db      	mvns	r3, r3
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	689a      	ldr	r2, [r3, #8]
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	005b      	lsls	r3, r3, #1
 8005c66:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6a:	69ba      	ldr	r2, [r7, #24]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f003 0303 	and.w	r3, r3, #3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d123      	bne.n	8005cca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	08da      	lsrs	r2, r3, #3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	3208      	adds	r2, #8
 8005c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	f003 0307 	and.w	r3, r3, #7
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	220f      	movs	r2, #15
 8005c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9e:	43db      	mvns	r3, r3
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	691a      	ldr	r2, [r3, #16]
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	f003 0307 	and.w	r3, r3, #7
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	08da      	lsrs	r2, r3, #3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	3208      	adds	r2, #8
 8005cc4:	69b9      	ldr	r1, [r7, #24]
 8005cc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	005b      	lsls	r3, r3, #1
 8005cd4:	2203      	movs	r2, #3
 8005cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cda:	43db      	mvns	r3, r3
 8005cdc:	69ba      	ldr	r2, [r7, #24]
 8005cde:	4013      	ands	r3, r2
 8005ce0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f003 0203 	and.w	r2, r3, #3
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	005b      	lsls	r3, r3, #1
 8005cee:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	69ba      	ldr	r2, [r7, #24]
 8005cfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f000 80e0 	beq.w	8005ecc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d0c:	4b2f      	ldr	r3, [pc, #188]	; (8005dcc <HAL_GPIO_Init+0x238>)
 8005d0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d12:	4a2e      	ldr	r2, [pc, #184]	; (8005dcc <HAL_GPIO_Init+0x238>)
 8005d14:	f043 0302 	orr.w	r3, r3, #2
 8005d18:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005d1c:	4b2b      	ldr	r3, [pc, #172]	; (8005dcc <HAL_GPIO_Init+0x238>)
 8005d1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d22:	f003 0302 	and.w	r3, r3, #2
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d2a:	4a29      	ldr	r2, [pc, #164]	; (8005dd0 <HAL_GPIO_Init+0x23c>)
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	089b      	lsrs	r3, r3, #2
 8005d30:	3302      	adds	r3, #2
 8005d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	f003 0303 	and.w	r3, r3, #3
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	220f      	movs	r2, #15
 8005d42:	fa02 f303 	lsl.w	r3, r2, r3
 8005d46:	43db      	mvns	r3, r3
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a20      	ldr	r2, [pc, #128]	; (8005dd4 <HAL_GPIO_Init+0x240>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d052      	beq.n	8005dfc <HAL_GPIO_Init+0x268>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a1f      	ldr	r2, [pc, #124]	; (8005dd8 <HAL_GPIO_Init+0x244>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d031      	beq.n	8005dc2 <HAL_GPIO_Init+0x22e>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a1e      	ldr	r2, [pc, #120]	; (8005ddc <HAL_GPIO_Init+0x248>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d02b      	beq.n	8005dbe <HAL_GPIO_Init+0x22a>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a1d      	ldr	r2, [pc, #116]	; (8005de0 <HAL_GPIO_Init+0x24c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d025      	beq.n	8005dba <HAL_GPIO_Init+0x226>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a1c      	ldr	r2, [pc, #112]	; (8005de4 <HAL_GPIO_Init+0x250>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d01f      	beq.n	8005db6 <HAL_GPIO_Init+0x222>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a1b      	ldr	r2, [pc, #108]	; (8005de8 <HAL_GPIO_Init+0x254>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d019      	beq.n	8005db2 <HAL_GPIO_Init+0x21e>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a1a      	ldr	r2, [pc, #104]	; (8005dec <HAL_GPIO_Init+0x258>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d013      	beq.n	8005dae <HAL_GPIO_Init+0x21a>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a19      	ldr	r2, [pc, #100]	; (8005df0 <HAL_GPIO_Init+0x25c>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d00d      	beq.n	8005daa <HAL_GPIO_Init+0x216>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a18      	ldr	r2, [pc, #96]	; (8005df4 <HAL_GPIO_Init+0x260>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d007      	beq.n	8005da6 <HAL_GPIO_Init+0x212>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a17      	ldr	r2, [pc, #92]	; (8005df8 <HAL_GPIO_Init+0x264>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d101      	bne.n	8005da2 <HAL_GPIO_Init+0x20e>
 8005d9e:	2309      	movs	r3, #9
 8005da0:	e02d      	b.n	8005dfe <HAL_GPIO_Init+0x26a>
 8005da2:	230a      	movs	r3, #10
 8005da4:	e02b      	b.n	8005dfe <HAL_GPIO_Init+0x26a>
 8005da6:	2308      	movs	r3, #8
 8005da8:	e029      	b.n	8005dfe <HAL_GPIO_Init+0x26a>
 8005daa:	2307      	movs	r3, #7
 8005dac:	e027      	b.n	8005dfe <HAL_GPIO_Init+0x26a>
 8005dae:	2306      	movs	r3, #6
 8005db0:	e025      	b.n	8005dfe <HAL_GPIO_Init+0x26a>
 8005db2:	2305      	movs	r3, #5
 8005db4:	e023      	b.n	8005dfe <HAL_GPIO_Init+0x26a>
 8005db6:	2304      	movs	r3, #4
 8005db8:	e021      	b.n	8005dfe <HAL_GPIO_Init+0x26a>
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e01f      	b.n	8005dfe <HAL_GPIO_Init+0x26a>
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	e01d      	b.n	8005dfe <HAL_GPIO_Init+0x26a>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e01b      	b.n	8005dfe <HAL_GPIO_Init+0x26a>
 8005dc6:	bf00      	nop
 8005dc8:	58000080 	.word	0x58000080
 8005dcc:	58024400 	.word	0x58024400
 8005dd0:	58000400 	.word	0x58000400
 8005dd4:	58020000 	.word	0x58020000
 8005dd8:	58020400 	.word	0x58020400
 8005ddc:	58020800 	.word	0x58020800
 8005de0:	58020c00 	.word	0x58020c00
 8005de4:	58021000 	.word	0x58021000
 8005de8:	58021400 	.word	0x58021400
 8005dec:	58021800 	.word	0x58021800
 8005df0:	58021c00 	.word	0x58021c00
 8005df4:	58022000 	.word	0x58022000
 8005df8:	58022400 	.word	0x58022400
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	69fa      	ldr	r2, [r7, #28]
 8005e00:	f002 0203 	and.w	r2, r2, #3
 8005e04:	0092      	lsls	r2, r2, #2
 8005e06:	4093      	lsls	r3, r2
 8005e08:	69ba      	ldr	r2, [r7, #24]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e0e:	4938      	ldr	r1, [pc, #224]	; (8005ef0 <HAL_GPIO_Init+0x35c>)
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	089b      	lsrs	r3, r3, #2
 8005e14:	3302      	adds	r3, #2
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	43db      	mvns	r3, r3
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005e3a:	69ba      	ldr	r2, [r7, #24]
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005e42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	43db      	mvns	r3, r3
 8005e56:	69ba      	ldr	r2, [r7, #24]
 8005e58:	4013      	ands	r3, r2
 8005e5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d003      	beq.n	8005e70 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005e70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	43db      	mvns	r3, r3
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	4013      	ands	r3, r2
 8005e86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d003      	beq.n	8005e9c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	69ba      	ldr	r2, [r7, #24]
 8005ea0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	43db      	mvns	r3, r3
 8005eac:	69ba      	ldr	r2, [r7, #24]
 8005eae:	4013      	ands	r3, r2
 8005eb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	3301      	adds	r3, #1
 8005ed0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f47f ae63 	bne.w	8005ba8 <HAL_GPIO_Init+0x14>
  }
}
 8005ee2:	bf00      	nop
 8005ee4:	bf00      	nop
 8005ee6:	3724      	adds	r7, #36	; 0x24
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	58000400 	.word	0x58000400

08005ef4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	460b      	mov	r3, r1
 8005efe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	691a      	ldr	r2, [r3, #16]
 8005f04:	887b      	ldrh	r3, [r7, #2]
 8005f06:	4013      	ands	r3, r2
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d002      	beq.n	8005f12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	73fb      	strb	r3, [r7, #15]
 8005f10:	e001      	b.n	8005f16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f12:	2300      	movs	r3, #0
 8005f14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3714      	adds	r7, #20
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	807b      	strh	r3, [r7, #2]
 8005f30:	4613      	mov	r3, r2
 8005f32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f34:	787b      	ldrb	r3, [r7, #1]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f3a:	887a      	ldrh	r2, [r7, #2]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005f40:	e003      	b.n	8005f4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005f42:	887b      	ldrh	r3, [r7, #2]
 8005f44:	041a      	lsls	r2, r3, #16
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	619a      	str	r2, [r3, #24]
}
 8005f4a:	bf00      	nop
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b085      	sub	sp, #20
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
 8005f5e:	460b      	mov	r3, r1
 8005f60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005f68:	887a      	ldrh	r2, [r7, #2]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	041a      	lsls	r2, r3, #16
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	43d9      	mvns	r1, r3
 8005f74:	887b      	ldrh	r3, [r7, #2]
 8005f76:	400b      	ands	r3, r1
 8005f78:	431a      	orrs	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	619a      	str	r2, [r3, #24]
}
 8005f7e:	bf00      	nop
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
	...

08005f8c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005f94:	4a08      	ldr	r2, [pc, #32]	; (8005fb8 <HAL_HSEM_FastTake+0x2c>)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	3320      	adds	r3, #32
 8005f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f9e:	4a07      	ldr	r2, [pc, #28]	; (8005fbc <HAL_HSEM_FastTake+0x30>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d101      	bne.n	8005fa8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	e000      	b.n	8005faa <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	58026400 	.word	0x58026400
 8005fbc:	80000300 	.word	0x80000300

08005fc0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005fca:	4906      	ldr	r1, [pc, #24]	; (8005fe4 <HAL_HSEM_Release+0x24>)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr
 8005fe4:	58026400 	.word	0x58026400

08005fe8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fea:	b08f      	sub	sp, #60	; 0x3c
 8005fec:	af0a      	add	r7, sp, #40	; 0x28
 8005fee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e116      	b.n	8006228 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b00      	cmp	r3, #0
 800600a:	d106      	bne.n	800601a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f00a fbdb 	bl	80107d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2203      	movs	r2, #3
 800601e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800602a:	2b00      	cmp	r3, #0
 800602c:	d102      	bne.n	8006034 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4618      	mov	r0, r3
 800603a:	f006 fe54 	bl	800cce6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	603b      	str	r3, [r7, #0]
 8006044:	687e      	ldr	r6, [r7, #4]
 8006046:	466d      	mov	r5, sp
 8006048:	f106 0410 	add.w	r4, r6, #16
 800604c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800604e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006052:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006054:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006058:	e885 0003 	stmia.w	r5, {r0, r1}
 800605c:	1d33      	adds	r3, r6, #4
 800605e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006060:	6838      	ldr	r0, [r7, #0]
 8006062:	f006 fd1f 	bl	800caa4 <USB_CoreInit>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d005      	beq.n	8006078 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e0d7      	b.n	8006228 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2100      	movs	r1, #0
 800607e:	4618      	mov	r0, r3
 8006080:	f006 fe42 	bl	800cd08 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006084:	2300      	movs	r3, #0
 8006086:	73fb      	strb	r3, [r7, #15]
 8006088:	e04a      	b.n	8006120 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800608a:	7bfa      	ldrb	r2, [r7, #15]
 800608c:	6879      	ldr	r1, [r7, #4]
 800608e:	4613      	mov	r3, r2
 8006090:	00db      	lsls	r3, r3, #3
 8006092:	4413      	add	r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	440b      	add	r3, r1
 8006098:	333d      	adds	r3, #61	; 0x3d
 800609a:	2201      	movs	r2, #1
 800609c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800609e:	7bfa      	ldrb	r2, [r7, #15]
 80060a0:	6879      	ldr	r1, [r7, #4]
 80060a2:	4613      	mov	r3, r2
 80060a4:	00db      	lsls	r3, r3, #3
 80060a6:	4413      	add	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	440b      	add	r3, r1
 80060ac:	333c      	adds	r3, #60	; 0x3c
 80060ae:	7bfa      	ldrb	r2, [r7, #15]
 80060b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80060b2:	7bfa      	ldrb	r2, [r7, #15]
 80060b4:	7bfb      	ldrb	r3, [r7, #15]
 80060b6:	b298      	uxth	r0, r3
 80060b8:	6879      	ldr	r1, [r7, #4]
 80060ba:	4613      	mov	r3, r2
 80060bc:	00db      	lsls	r3, r3, #3
 80060be:	4413      	add	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	440b      	add	r3, r1
 80060c4:	3344      	adds	r3, #68	; 0x44
 80060c6:	4602      	mov	r2, r0
 80060c8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80060ca:	7bfa      	ldrb	r2, [r7, #15]
 80060cc:	6879      	ldr	r1, [r7, #4]
 80060ce:	4613      	mov	r3, r2
 80060d0:	00db      	lsls	r3, r3, #3
 80060d2:	4413      	add	r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	440b      	add	r3, r1
 80060d8:	3340      	adds	r3, #64	; 0x40
 80060da:	2200      	movs	r2, #0
 80060dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80060de:	7bfa      	ldrb	r2, [r7, #15]
 80060e0:	6879      	ldr	r1, [r7, #4]
 80060e2:	4613      	mov	r3, r2
 80060e4:	00db      	lsls	r3, r3, #3
 80060e6:	4413      	add	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	440b      	add	r3, r1
 80060ec:	3348      	adds	r3, #72	; 0x48
 80060ee:	2200      	movs	r2, #0
 80060f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80060f2:	7bfa      	ldrb	r2, [r7, #15]
 80060f4:	6879      	ldr	r1, [r7, #4]
 80060f6:	4613      	mov	r3, r2
 80060f8:	00db      	lsls	r3, r3, #3
 80060fa:	4413      	add	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	440b      	add	r3, r1
 8006100:	334c      	adds	r3, #76	; 0x4c
 8006102:	2200      	movs	r2, #0
 8006104:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006106:	7bfa      	ldrb	r2, [r7, #15]
 8006108:	6879      	ldr	r1, [r7, #4]
 800610a:	4613      	mov	r3, r2
 800610c:	00db      	lsls	r3, r3, #3
 800610e:	4413      	add	r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	440b      	add	r3, r1
 8006114:	3354      	adds	r3, #84	; 0x54
 8006116:	2200      	movs	r2, #0
 8006118:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800611a:	7bfb      	ldrb	r3, [r7, #15]
 800611c:	3301      	adds	r3, #1
 800611e:	73fb      	strb	r3, [r7, #15]
 8006120:	7bfa      	ldrb	r2, [r7, #15]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	429a      	cmp	r2, r3
 8006128:	d3af      	bcc.n	800608a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800612a:	2300      	movs	r3, #0
 800612c:	73fb      	strb	r3, [r7, #15]
 800612e:	e044      	b.n	80061ba <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006130:	7bfa      	ldrb	r2, [r7, #15]
 8006132:	6879      	ldr	r1, [r7, #4]
 8006134:	4613      	mov	r3, r2
 8006136:	00db      	lsls	r3, r3, #3
 8006138:	4413      	add	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	440b      	add	r3, r1
 800613e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006142:	2200      	movs	r2, #0
 8006144:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006146:	7bfa      	ldrb	r2, [r7, #15]
 8006148:	6879      	ldr	r1, [r7, #4]
 800614a:	4613      	mov	r3, r2
 800614c:	00db      	lsls	r3, r3, #3
 800614e:	4413      	add	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	440b      	add	r3, r1
 8006154:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006158:	7bfa      	ldrb	r2, [r7, #15]
 800615a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800615c:	7bfa      	ldrb	r2, [r7, #15]
 800615e:	6879      	ldr	r1, [r7, #4]
 8006160:	4613      	mov	r3, r2
 8006162:	00db      	lsls	r3, r3, #3
 8006164:	4413      	add	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	440b      	add	r3, r1
 800616a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800616e:	2200      	movs	r2, #0
 8006170:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006172:	7bfa      	ldrb	r2, [r7, #15]
 8006174:	6879      	ldr	r1, [r7, #4]
 8006176:	4613      	mov	r3, r2
 8006178:	00db      	lsls	r3, r3, #3
 800617a:	4413      	add	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	440b      	add	r3, r1
 8006180:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006184:	2200      	movs	r2, #0
 8006186:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006188:	7bfa      	ldrb	r2, [r7, #15]
 800618a:	6879      	ldr	r1, [r7, #4]
 800618c:	4613      	mov	r3, r2
 800618e:	00db      	lsls	r3, r3, #3
 8006190:	4413      	add	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	440b      	add	r3, r1
 8006196:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800619a:	2200      	movs	r2, #0
 800619c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800619e:	7bfa      	ldrb	r2, [r7, #15]
 80061a0:	6879      	ldr	r1, [r7, #4]
 80061a2:	4613      	mov	r3, r2
 80061a4:	00db      	lsls	r3, r3, #3
 80061a6:	4413      	add	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	440b      	add	r3, r1
 80061ac:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80061b0:	2200      	movs	r2, #0
 80061b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
 80061b6:	3301      	adds	r3, #1
 80061b8:	73fb      	strb	r3, [r7, #15]
 80061ba:	7bfa      	ldrb	r2, [r7, #15]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d3b5      	bcc.n	8006130 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	603b      	str	r3, [r7, #0]
 80061ca:	687e      	ldr	r6, [r7, #4]
 80061cc:	466d      	mov	r5, sp
 80061ce:	f106 0410 	add.w	r4, r6, #16
 80061d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80061de:	e885 0003 	stmia.w	r5, {r0, r1}
 80061e2:	1d33      	adds	r3, r6, #4
 80061e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061e6:	6838      	ldr	r0, [r7, #0]
 80061e8:	f006 fdda 	bl	800cda0 <USB_DevInit>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d005      	beq.n	80061fe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2202      	movs	r2, #2
 80061f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e014      	b.n	8006228 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006212:	2b01      	cmp	r3, #1
 8006214:	d102      	bne.n	800621c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f001 f98c 	bl	8007534 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4618      	mov	r0, r3
 8006222:	f007 ff28 	bl	800e076 <USB_DevDisconnect>

  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3714      	adds	r7, #20
 800622c:	46bd      	mov	sp, r7
 800622e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006230 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006244:	2b01      	cmp	r3, #1
 8006246:	d101      	bne.n	800624c <HAL_PCD_Start+0x1c>
 8006248:	2302      	movs	r3, #2
 800624a:	e020      	b.n	800628e <HAL_PCD_Start+0x5e>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006258:	2b01      	cmp	r3, #1
 800625a:	d109      	bne.n	8006270 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006260:	2b01      	cmp	r3, #1
 8006262:	d005      	beq.n	8006270 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006268:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4618      	mov	r0, r3
 8006276:	f006 fd25 	bl	800ccc4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4618      	mov	r0, r3
 8006280:	f007 fed8 	bl	800e034 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006296:	b590      	push	{r4, r7, lr}
 8006298:	b08d      	sub	sp, #52	; 0x34
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062a4:	6a3b      	ldr	r3, [r7, #32]
 80062a6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4618      	mov	r0, r3
 80062ae:	f007 ff96 	bl	800e1de <USB_GetMode>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f040 84b7 	bne.w	8006c28 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4618      	mov	r0, r3
 80062c0:	f007 fefa 	bl	800e0b8 <USB_ReadInterrupts>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f000 84ad 	beq.w	8006c26 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	0a1b      	lsrs	r3, r3, #8
 80062d6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4618      	mov	r0, r3
 80062e6:	f007 fee7 	bl	800e0b8 <USB_ReadInterrupts>
 80062ea:	4603      	mov	r3, r0
 80062ec:	f003 0302 	and.w	r3, r3, #2
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d107      	bne.n	8006304 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	695a      	ldr	r2, [r3, #20]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f002 0202 	and.w	r2, r2, #2
 8006302:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4618      	mov	r0, r3
 800630a:	f007 fed5 	bl	800e0b8 <USB_ReadInterrupts>
 800630e:	4603      	mov	r3, r0
 8006310:	f003 0310 	and.w	r3, r3, #16
 8006314:	2b10      	cmp	r3, #16
 8006316:	d161      	bne.n	80063dc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	699a      	ldr	r2, [r3, #24]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f022 0210 	bic.w	r2, r2, #16
 8006326:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006328:	6a3b      	ldr	r3, [r7, #32]
 800632a:	6a1b      	ldr	r3, [r3, #32]
 800632c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	f003 020f 	and.w	r2, r3, #15
 8006334:	4613      	mov	r3, r2
 8006336:	00db      	lsls	r3, r3, #3
 8006338:	4413      	add	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	4413      	add	r3, r2
 8006344:	3304      	adds	r3, #4
 8006346:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	0c5b      	lsrs	r3, r3, #17
 800634c:	f003 030f 	and.w	r3, r3, #15
 8006350:	2b02      	cmp	r3, #2
 8006352:	d124      	bne.n	800639e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006354:	69ba      	ldr	r2, [r7, #24]
 8006356:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800635a:	4013      	ands	r3, r2
 800635c:	2b00      	cmp	r3, #0
 800635e:	d035      	beq.n	80063cc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	091b      	lsrs	r3, r3, #4
 8006368:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800636a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800636e:	b29b      	uxth	r3, r3
 8006370:	461a      	mov	r2, r3
 8006372:	6a38      	ldr	r0, [r7, #32]
 8006374:	f007 fd0c 	bl	800dd90 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	691a      	ldr	r2, [r3, #16]
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	091b      	lsrs	r3, r3, #4
 8006380:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006384:	441a      	add	r2, r3
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	6a1a      	ldr	r2, [r3, #32]
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	091b      	lsrs	r3, r3, #4
 8006392:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006396:	441a      	add	r2, r3
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	621a      	str	r2, [r3, #32]
 800639c:	e016      	b.n	80063cc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	0c5b      	lsrs	r3, r3, #17
 80063a2:	f003 030f 	and.w	r3, r3, #15
 80063a6:	2b06      	cmp	r3, #6
 80063a8:	d110      	bne.n	80063cc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80063b0:	2208      	movs	r2, #8
 80063b2:	4619      	mov	r1, r3
 80063b4:	6a38      	ldr	r0, [r7, #32]
 80063b6:	f007 fceb 	bl	800dd90 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	6a1a      	ldr	r2, [r3, #32]
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	091b      	lsrs	r3, r3, #4
 80063c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063c6:	441a      	add	r2, r3
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	699a      	ldr	r2, [r3, #24]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f042 0210 	orr.w	r2, r2, #16
 80063da:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4618      	mov	r0, r3
 80063e2:	f007 fe69 	bl	800e0b8 <USB_ReadInterrupts>
 80063e6:	4603      	mov	r3, r0
 80063e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80063f0:	f040 80a7 	bne.w	8006542 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80063f4:	2300      	movs	r3, #0
 80063f6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4618      	mov	r0, r3
 80063fe:	f007 fe6e 	bl	800e0de <USB_ReadDevAllOutEpInterrupt>
 8006402:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006404:	e099      	b.n	800653a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006408:	f003 0301 	and.w	r3, r3, #1
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 808e 	beq.w	800652e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006418:	b2d2      	uxtb	r2, r2
 800641a:	4611      	mov	r1, r2
 800641c:	4618      	mov	r0, r3
 800641e:	f007 fe92 	bl	800e146 <USB_ReadDevOutEPInterrupt>
 8006422:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00c      	beq.n	8006448 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800642e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	4413      	add	r3, r2
 8006436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800643a:	461a      	mov	r2, r3
 800643c:	2301      	movs	r3, #1
 800643e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006440:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 fef0 	bl	8007228 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	f003 0308 	and.w	r3, r3, #8
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00c      	beq.n	800646c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	4413      	add	r3, r2
 800645a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800645e:	461a      	mov	r2, r3
 8006460:	2308      	movs	r3, #8
 8006462:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006464:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 ffc6 	bl	80073f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f003 0310 	and.w	r3, r3, #16
 8006472:	2b00      	cmp	r3, #0
 8006474:	d008      	beq.n	8006488 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006478:	015a      	lsls	r2, r3, #5
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	4413      	add	r3, r2
 800647e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006482:	461a      	mov	r2, r3
 8006484:	2310      	movs	r3, #16
 8006486:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	f003 0302 	and.w	r3, r3, #2
 800648e:	2b00      	cmp	r3, #0
 8006490:	d030      	beq.n	80064f4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006492:	6a3b      	ldr	r3, [r7, #32]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800649a:	2b80      	cmp	r3, #128	; 0x80
 800649c:	d109      	bne.n	80064b2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	69fa      	ldr	r2, [r7, #28]
 80064a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80064b0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80064b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b4:	4613      	mov	r3, r2
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	4413      	add	r3, r2
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	4413      	add	r3, r2
 80064c4:	3304      	adds	r3, #4
 80064c6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	78db      	ldrb	r3, [r3, #3]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d108      	bne.n	80064e2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	2200      	movs	r2, #0
 80064d4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	4619      	mov	r1, r3
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f00a fab9 	bl	8010a54 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ee:	461a      	mov	r2, r3
 80064f0:	2302      	movs	r3, #2
 80064f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	f003 0320 	and.w	r3, r3, #32
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d008      	beq.n	8006510 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80064fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006500:	015a      	lsls	r2, r3, #5
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	4413      	add	r3, r2
 8006506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800650a:	461a      	mov	r2, r3
 800650c:	2320      	movs	r3, #32
 800650e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d009      	beq.n	800652e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	015a      	lsls	r2, r3, #5
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	4413      	add	r3, r2
 8006522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006526:	461a      	mov	r2, r3
 8006528:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800652c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006530:	3301      	adds	r3, #1
 8006532:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006536:	085b      	lsrs	r3, r3, #1
 8006538:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800653a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653c:	2b00      	cmp	r3, #0
 800653e:	f47f af62 	bne.w	8006406 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4618      	mov	r0, r3
 8006548:	f007 fdb6 	bl	800e0b8 <USB_ReadInterrupts>
 800654c:	4603      	mov	r3, r0
 800654e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006552:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006556:	f040 80db 	bne.w	8006710 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4618      	mov	r0, r3
 8006560:	f007 fdd7 	bl	800e112 <USB_ReadDevAllInEpInterrupt>
 8006564:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006566:	2300      	movs	r3, #0
 8006568:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800656a:	e0cd      	b.n	8006708 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800656c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	2b00      	cmp	r3, #0
 8006574:	f000 80c2 	beq.w	80066fc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800657e:	b2d2      	uxtb	r2, r2
 8006580:	4611      	mov	r1, r2
 8006582:	4618      	mov	r0, r3
 8006584:	f007 fdfd 	bl	800e182 <USB_ReadDevInEPInterrupt>
 8006588:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	f003 0301 	and.w	r3, r3, #1
 8006590:	2b00      	cmp	r3, #0
 8006592:	d057      	beq.n	8006644 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006596:	f003 030f 	and.w	r3, r3, #15
 800659a:	2201      	movs	r2, #1
 800659c:	fa02 f303 	lsl.w	r3, r2, r3
 80065a0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	43db      	mvns	r3, r3
 80065ae:	69f9      	ldr	r1, [r7, #28]
 80065b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065b4:	4013      	ands	r3, r2
 80065b6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80065b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c4:	461a      	mov	r2, r3
 80065c6:	2301      	movs	r3, #1
 80065c8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d132      	bne.n	8006638 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80065d2:	6879      	ldr	r1, [r7, #4]
 80065d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065d6:	4613      	mov	r3, r2
 80065d8:	00db      	lsls	r3, r3, #3
 80065da:	4413      	add	r3, r2
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	440b      	add	r3, r1
 80065e0:	334c      	adds	r3, #76	; 0x4c
 80065e2:	6819      	ldr	r1, [r3, #0]
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065e8:	4613      	mov	r3, r2
 80065ea:	00db      	lsls	r3, r3, #3
 80065ec:	4413      	add	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4403      	add	r3, r0
 80065f2:	3348      	adds	r3, #72	; 0x48
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4419      	add	r1, r3
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065fc:	4613      	mov	r3, r2
 80065fe:	00db      	lsls	r3, r3, #3
 8006600:	4413      	add	r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4403      	add	r3, r0
 8006606:	334c      	adds	r3, #76	; 0x4c
 8006608:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	2b00      	cmp	r3, #0
 800660e:	d113      	bne.n	8006638 <HAL_PCD_IRQHandler+0x3a2>
 8006610:	6879      	ldr	r1, [r7, #4]
 8006612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006614:	4613      	mov	r3, r2
 8006616:	00db      	lsls	r3, r3, #3
 8006618:	4413      	add	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	440b      	add	r3, r1
 800661e:	3354      	adds	r3, #84	; 0x54
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d108      	bne.n	8006638 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6818      	ldr	r0, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006630:	461a      	mov	r2, r3
 8006632:	2101      	movs	r1, #1
 8006634:	f007 fe06 	bl	800e244 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663a:	b2db      	uxtb	r3, r3
 800663c:	4619      	mov	r1, r3
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f00a f983 	bl	801094a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	f003 0308 	and.w	r3, r3, #8
 800664a:	2b00      	cmp	r3, #0
 800664c:	d008      	beq.n	8006660 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800664e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006650:	015a      	lsls	r2, r3, #5
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	4413      	add	r3, r2
 8006656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800665a:	461a      	mov	r2, r3
 800665c:	2308      	movs	r3, #8
 800665e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	f003 0310 	and.w	r3, r3, #16
 8006666:	2b00      	cmp	r3, #0
 8006668:	d008      	beq.n	800667c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666c:	015a      	lsls	r2, r3, #5
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	4413      	add	r3, r2
 8006672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006676:	461a      	mov	r2, r3
 8006678:	2310      	movs	r3, #16
 800667a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006682:	2b00      	cmp	r3, #0
 8006684:	d008      	beq.n	8006698 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006688:	015a      	lsls	r2, r3, #5
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	4413      	add	r3, r2
 800668e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006692:	461a      	mov	r2, r3
 8006694:	2340      	movs	r3, #64	; 0x40
 8006696:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	f003 0302 	and.w	r3, r3, #2
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d023      	beq.n	80066ea <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80066a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066a4:	6a38      	ldr	r0, [r7, #32]
 80066a6:	f006 fcd9 	bl	800d05c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80066aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ac:	4613      	mov	r3, r2
 80066ae:	00db      	lsls	r3, r3, #3
 80066b0:	4413      	add	r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	3338      	adds	r3, #56	; 0x38
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	4413      	add	r3, r2
 80066ba:	3304      	adds	r3, #4
 80066bc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	78db      	ldrb	r3, [r3, #3]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d108      	bne.n	80066d8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	2200      	movs	r2, #0
 80066ca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	4619      	mov	r1, r3
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f00a f9d0 	bl	8010a78 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e4:	461a      	mov	r2, r3
 80066e6:	2302      	movs	r3, #2
 80066e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d003      	beq.n	80066fc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80066f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fd08 	bl	800710c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80066fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fe:	3301      	adds	r3, #1
 8006700:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006704:	085b      	lsrs	r3, r3, #1
 8006706:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670a:	2b00      	cmp	r3, #0
 800670c:	f47f af2e 	bne.w	800656c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4618      	mov	r0, r3
 8006716:	f007 fccf 	bl	800e0b8 <USB_ReadInterrupts>
 800671a:	4603      	mov	r3, r0
 800671c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006720:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006724:	d122      	bne.n	800676c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	69fa      	ldr	r2, [r7, #28]
 8006730:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006734:	f023 0301 	bic.w	r3, r3, #1
 8006738:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006740:	2b01      	cmp	r3, #1
 8006742:	d108      	bne.n	8006756 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800674c:	2100      	movs	r1, #0
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 ff14 	bl	800757c <HAL_PCDEx_LPM_Callback>
 8006754:	e002      	b.n	800675c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f00a f96e 	bl	8010a38 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	695a      	ldr	r2, [r3, #20]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800676a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4618      	mov	r0, r3
 8006772:	f007 fca1 	bl	800e0b8 <USB_ReadInterrupts>
 8006776:	4603      	mov	r3, r0
 8006778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800677c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006780:	d112      	bne.n	80067a8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	2b01      	cmp	r3, #1
 8006790:	d102      	bne.n	8006798 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f00a f92a 	bl	80109ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	695a      	ldr	r2, [r3, #20]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80067a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4618      	mov	r0, r3
 80067ae:	f007 fc83 	bl	800e0b8 <USB_ReadInterrupts>
 80067b2:	4603      	mov	r3, r0
 80067b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067bc:	d121      	bne.n	8006802 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	695a      	ldr	r2, [r3, #20]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80067cc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d111      	bne.n	80067fc <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e6:	089b      	lsrs	r3, r3, #2
 80067e8:	f003 020f 	and.w	r2, r3, #15
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80067f2:	2101      	movs	r1, #1
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 fec1 	bl	800757c <HAL_PCDEx_LPM_Callback>
 80067fa:	e002      	b.n	8006802 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f00a f8f5 	bl	80109ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4618      	mov	r0, r3
 8006808:	f007 fc56 	bl	800e0b8 <USB_ReadInterrupts>
 800680c:	4603      	mov	r3, r0
 800680e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006816:	f040 80b7 	bne.w	8006988 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	69fa      	ldr	r2, [r7, #28]
 8006824:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006828:	f023 0301 	bic.w	r3, r3, #1
 800682c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2110      	movs	r1, #16
 8006834:	4618      	mov	r0, r3
 8006836:	f006 fc11 	bl	800d05c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800683a:	2300      	movs	r3, #0
 800683c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800683e:	e046      	b.n	80068ce <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006842:	015a      	lsls	r2, r3, #5
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	4413      	add	r3, r2
 8006848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800684c:	461a      	mov	r2, r3
 800684e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006852:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006856:	015a      	lsls	r2, r3, #5
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	4413      	add	r3, r2
 800685c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006864:	0151      	lsls	r1, r2, #5
 8006866:	69fa      	ldr	r2, [r7, #28]
 8006868:	440a      	add	r2, r1
 800686a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800686e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006872:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	4413      	add	r3, r2
 800687c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006880:	461a      	mov	r2, r3
 8006882:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006886:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688a:	015a      	lsls	r2, r3, #5
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	4413      	add	r3, r2
 8006890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006898:	0151      	lsls	r1, r2, #5
 800689a:	69fa      	ldr	r2, [r7, #28]
 800689c:	440a      	add	r2, r1
 800689e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068a6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80068a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068aa:	015a      	lsls	r2, r3, #5
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068b8:	0151      	lsls	r1, r2, #5
 80068ba:	69fa      	ldr	r2, [r7, #28]
 80068bc:	440a      	add	r2, r1
 80068be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80068c6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ca:	3301      	adds	r3, #1
 80068cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d3b3      	bcc.n	8006840 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068de:	69db      	ldr	r3, [r3, #28]
 80068e0:	69fa      	ldr	r2, [r7, #28]
 80068e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068e6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80068ea:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d016      	beq.n	8006922 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068fe:	69fa      	ldr	r2, [r7, #28]
 8006900:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006904:	f043 030b 	orr.w	r3, r3, #11
 8006908:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006914:	69fa      	ldr	r2, [r7, #28]
 8006916:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800691a:	f043 030b 	orr.w	r3, r3, #11
 800691e:	6453      	str	r3, [r2, #68]	; 0x44
 8006920:	e015      	b.n	800694e <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006928:	695a      	ldr	r2, [r3, #20]
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006930:	4619      	mov	r1, r3
 8006932:	f242 032b 	movw	r3, #8235	; 0x202b
 8006936:	4313      	orrs	r3, r2
 8006938:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	69fa      	ldr	r2, [r7, #28]
 8006944:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006948:	f043 030b 	orr.w	r3, r3, #11
 800694c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	69fa      	ldr	r2, [r7, #28]
 8006958:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800695c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006960:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6818      	ldr	r0, [r3, #0]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006972:	461a      	mov	r2, r3
 8006974:	f007 fc66 	bl	800e244 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	695a      	ldr	r2, [r3, #20]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006986:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4618      	mov	r0, r3
 800698e:	f007 fb93 	bl	800e0b8 <USB_ReadInterrupts>
 8006992:	4603      	mov	r3, r0
 8006994:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800699c:	d124      	bne.n	80069e8 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f007 fc2a 	bl	800e1fc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4618      	mov	r0, r3
 80069ae:	f006 fbd2 	bl	800d156 <USB_GetDevSpeed>
 80069b2:	4603      	mov	r3, r0
 80069b4:	461a      	mov	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681c      	ldr	r4, [r3, #0]
 80069be:	f001 fe1b 	bl	80085f8 <HAL_RCC_GetHCLKFreq>
 80069c2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	461a      	mov	r2, r3
 80069cc:	4620      	mov	r0, r4
 80069ce:	f006 f8d7 	bl	800cb80 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f009 ffe1 	bl	801099a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	695a      	ldr	r2, [r3, #20]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80069e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f007 fb63 	bl	800e0b8 <USB_ReadInterrupts>
 80069f2:	4603      	mov	r3, r0
 80069f4:	f003 0308 	and.w	r3, r3, #8
 80069f8:	2b08      	cmp	r3, #8
 80069fa:	d10a      	bne.n	8006a12 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f009 ffbe 	bl	801097e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	695a      	ldr	r2, [r3, #20]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f002 0208 	and.w	r2, r2, #8
 8006a10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f007 fb4e 	bl	800e0b8 <USB_ReadInterrupts>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a22:	2b80      	cmp	r3, #128	; 0x80
 8006a24:	d122      	bne.n	8006a6c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006a26:	6a3b      	ldr	r3, [r7, #32]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a2e:	6a3b      	ldr	r3, [r7, #32]
 8006a30:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006a32:	2301      	movs	r3, #1
 8006a34:	627b      	str	r3, [r7, #36]	; 0x24
 8006a36:	e014      	b.n	8006a62 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006a38:	6879      	ldr	r1, [r7, #4]
 8006a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	00db      	lsls	r3, r3, #3
 8006a40:	4413      	add	r3, r2
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	440b      	add	r3, r1
 8006a46:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d105      	bne.n	8006a5c <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	4619      	mov	r1, r3
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fb27 	bl	80070aa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5e:	3301      	adds	r3, #1
 8006a60:	627b      	str	r3, [r7, #36]	; 0x24
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d3e5      	bcc.n	8006a38 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f007 fb21 	bl	800e0b8 <USB_ReadInterrupts>
 8006a76:	4603      	mov	r3, r0
 8006a78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a80:	d13b      	bne.n	8006afa <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006a82:	2301      	movs	r3, #1
 8006a84:	627b      	str	r3, [r7, #36]	; 0x24
 8006a86:	e02b      	b.n	8006ae0 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8a:	015a      	lsls	r2, r3, #5
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	4413      	add	r3, r2
 8006a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006a98:	6879      	ldr	r1, [r7, #4]
 8006a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	00db      	lsls	r3, r3, #3
 8006aa0:	4413      	add	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	440b      	add	r3, r1
 8006aa6:	3340      	adds	r3, #64	; 0x40
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d115      	bne.n	8006ada <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006aae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	da12      	bge.n	8006ada <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006ab4:	6879      	ldr	r1, [r7, #4]
 8006ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ab8:	4613      	mov	r3, r2
 8006aba:	00db      	lsls	r3, r3, #3
 8006abc:	4413      	add	r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	440b      	add	r3, r1
 8006ac2:	333f      	adds	r3, #63	; 0x3f
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 fae8 	bl	80070aa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006adc:	3301      	adds	r3, #1
 8006ade:	627b      	str	r3, [r7, #36]	; 0x24
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d3ce      	bcc.n	8006a88 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	695a      	ldr	r2, [r3, #20]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006af8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4618      	mov	r0, r3
 8006b00:	f007 fada 	bl	800e0b8 <USB_ReadInterrupts>
 8006b04:	4603      	mov	r3, r0
 8006b06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b0e:	d155      	bne.n	8006bbc <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006b10:	2301      	movs	r3, #1
 8006b12:	627b      	str	r3, [r7, #36]	; 0x24
 8006b14:	e045      	b.n	8006ba2 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b18:	015a      	lsls	r2, r3, #5
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006b26:	6879      	ldr	r1, [r7, #4]
 8006b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	00db      	lsls	r3, r3, #3
 8006b2e:	4413      	add	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	440b      	add	r3, r1
 8006b34:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d12e      	bne.n	8006b9c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006b3e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	da2b      	bge.n	8006b9c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8006b50:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d121      	bne.n	8006b9c <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006b58:	6879      	ldr	r1, [r7, #4]
 8006b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	00db      	lsls	r3, r3, #3
 8006b60:	4413      	add	r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	440b      	add	r3, r1
 8006b66:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006b6e:	6a3b      	ldr	r3, [r7, #32]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006b7a:	6a3b      	ldr	r3, [r7, #32]
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10a      	bne.n	8006b9c <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	69fa      	ldr	r2, [r7, #28]
 8006b90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b98:	6053      	str	r3, [r2, #4]
            break;
 8006b9a:	e007      	b.n	8006bac <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d3b4      	bcc.n	8006b16 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	695a      	ldr	r2, [r3, #20]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006bba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f007 fa79 	bl	800e0b8 <USB_ReadInterrupts>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bd0:	d10a      	bne.n	8006be8 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f009 ff62 	bl	8010a9c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	695a      	ldr	r2, [r3, #20]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006be6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4618      	mov	r0, r3
 8006bee:	f007 fa63 	bl	800e0b8 <USB_ReadInterrupts>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	f003 0304 	and.w	r3, r3, #4
 8006bf8:	2b04      	cmp	r3, #4
 8006bfa:	d115      	bne.n	8006c28 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	f003 0304 	and.w	r3, r3, #4
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d002      	beq.n	8006c14 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f009 ff52 	bl	8010ab8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6859      	ldr	r1, [r3, #4]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	69ba      	ldr	r2, [r7, #24]
 8006c20:	430a      	orrs	r2, r1
 8006c22:	605a      	str	r2, [r3, #4]
 8006c24:	e000      	b.n	8006c28 <HAL_PCD_IRQHandler+0x992>
      return;
 8006c26:	bf00      	nop
    }
  }
}
 8006c28:	3734      	adds	r7, #52	; 0x34
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd90      	pop	{r4, r7, pc}

08006c2e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b082      	sub	sp, #8
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	460b      	mov	r3, r1
 8006c38:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d101      	bne.n	8006c48 <HAL_PCD_SetAddress+0x1a>
 8006c44:	2302      	movs	r3, #2
 8006c46:	e013      	b.n	8006c70 <HAL_PCD_SetAddress+0x42>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	78fa      	ldrb	r2, [r7, #3]
 8006c54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	78fa      	ldrb	r2, [r7, #3]
 8006c5e:	4611      	mov	r1, r2
 8006c60:	4618      	mov	r0, r3
 8006c62:	f007 f9c1 	bl	800dfe8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	4608      	mov	r0, r1
 8006c82:	4611      	mov	r1, r2
 8006c84:	461a      	mov	r2, r3
 8006c86:	4603      	mov	r3, r0
 8006c88:	70fb      	strb	r3, [r7, #3]
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	803b      	strh	r3, [r7, #0]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006c92:	2300      	movs	r3, #0
 8006c94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006c96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	da0f      	bge.n	8006cbe <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c9e:	78fb      	ldrb	r3, [r7, #3]
 8006ca0:	f003 020f 	and.w	r2, r3, #15
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	00db      	lsls	r3, r3, #3
 8006ca8:	4413      	add	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	3338      	adds	r3, #56	; 0x38
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	3304      	adds	r3, #4
 8006cb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	705a      	strb	r2, [r3, #1]
 8006cbc:	e00f      	b.n	8006cde <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006cbe:	78fb      	ldrb	r3, [r7, #3]
 8006cc0:	f003 020f 	and.w	r2, r3, #15
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	00db      	lsls	r3, r3, #3
 8006cc8:	4413      	add	r3, r2
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	3304      	adds	r3, #4
 8006cd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006cde:	78fb      	ldrb	r3, [r7, #3]
 8006ce0:	f003 030f 	and.w	r3, r3, #15
 8006ce4:	b2da      	uxtb	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006cea:	883a      	ldrh	r2, [r7, #0]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	78ba      	ldrb	r2, [r7, #2]
 8006cf4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	785b      	ldrb	r3, [r3, #1]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d004      	beq.n	8006d08 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006d08:	78bb      	ldrb	r3, [r7, #2]
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d102      	bne.n	8006d14 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d101      	bne.n	8006d22 <HAL_PCD_EP_Open+0xaa>
 8006d1e:	2302      	movs	r3, #2
 8006d20:	e00e      	b.n	8006d40 <HAL_PCD_EP_Open+0xc8>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68f9      	ldr	r1, [r7, #12]
 8006d30:	4618      	mov	r0, r3
 8006d32:	f006 fa35 	bl	800d1a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006d3e:	7afb      	ldrb	r3, [r7, #11]
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	460b      	mov	r3, r1
 8006d52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006d54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	da0f      	bge.n	8006d7c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d5c:	78fb      	ldrb	r3, [r7, #3]
 8006d5e:	f003 020f 	and.w	r2, r3, #15
 8006d62:	4613      	mov	r3, r2
 8006d64:	00db      	lsls	r3, r3, #3
 8006d66:	4413      	add	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	3338      	adds	r3, #56	; 0x38
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	4413      	add	r3, r2
 8006d70:	3304      	adds	r3, #4
 8006d72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2201      	movs	r2, #1
 8006d78:	705a      	strb	r2, [r3, #1]
 8006d7a:	e00f      	b.n	8006d9c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d7c:	78fb      	ldrb	r3, [r7, #3]
 8006d7e:	f003 020f 	and.w	r2, r3, #15
 8006d82:	4613      	mov	r3, r2
 8006d84:	00db      	lsls	r3, r3, #3
 8006d86:	4413      	add	r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	4413      	add	r3, r2
 8006d92:	3304      	adds	r3, #4
 8006d94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006d9c:	78fb      	ldrb	r3, [r7, #3]
 8006d9e:	f003 030f 	and.w	r3, r3, #15
 8006da2:	b2da      	uxtb	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d101      	bne.n	8006db6 <HAL_PCD_EP_Close+0x6e>
 8006db2:	2302      	movs	r3, #2
 8006db4:	e00e      	b.n	8006dd4 <HAL_PCD_EP_Close+0x8c>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68f9      	ldr	r1, [r7, #12]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f006 fa73 	bl	800d2b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b086      	sub	sp, #24
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	607a      	str	r2, [r7, #4]
 8006de6:	603b      	str	r3, [r7, #0]
 8006de8:	460b      	mov	r3, r1
 8006dea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006dec:	7afb      	ldrb	r3, [r7, #11]
 8006dee:	f003 020f 	and.w	r2, r3, #15
 8006df2:	4613      	mov	r3, r2
 8006df4:	00db      	lsls	r3, r3, #3
 8006df6:	4413      	add	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	4413      	add	r3, r2
 8006e02:	3304      	adds	r3, #4
 8006e04:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	683a      	ldr	r2, [r7, #0]
 8006e10:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2200      	movs	r2, #0
 8006e16:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e1e:	7afb      	ldrb	r3, [r7, #11]
 8006e20:	f003 030f 	and.w	r3, r3, #15
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d102      	bne.n	8006e38 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006e38:	7afb      	ldrb	r3, [r7, #11]
 8006e3a:	f003 030f 	and.w	r3, r3, #15
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d109      	bne.n	8006e56 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6818      	ldr	r0, [r3, #0]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	6979      	ldr	r1, [r7, #20]
 8006e50:	f006 fd5a 	bl	800d908 <USB_EP0StartXfer>
 8006e54:	e008      	b.n	8006e68 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6818      	ldr	r0, [r3, #0]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	461a      	mov	r2, r3
 8006e62:	6979      	ldr	r1, [r7, #20]
 8006e64:	f006 fb00 	bl	800d468 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3718      	adds	r7, #24
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b083      	sub	sp, #12
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006e7e:	78fb      	ldrb	r3, [r7, #3]
 8006e80:	f003 020f 	and.w	r2, r3, #15
 8006e84:	6879      	ldr	r1, [r7, #4]
 8006e86:	4613      	mov	r3, r2
 8006e88:	00db      	lsls	r3, r3, #3
 8006e8a:	4413      	add	r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	440b      	add	r3, r1
 8006e90:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006e94:	681b      	ldr	r3, [r3, #0]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	370c      	adds	r7, #12
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr

08006ea2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b086      	sub	sp, #24
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	60f8      	str	r0, [r7, #12]
 8006eaa:	607a      	str	r2, [r7, #4]
 8006eac:	603b      	str	r3, [r7, #0]
 8006eae:	460b      	mov	r3, r1
 8006eb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006eb2:	7afb      	ldrb	r3, [r7, #11]
 8006eb4:	f003 020f 	and.w	r2, r3, #15
 8006eb8:	4613      	mov	r3, r2
 8006eba:	00db      	lsls	r3, r3, #3
 8006ebc:	4413      	add	r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	3338      	adds	r3, #56	; 0x38
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	3304      	adds	r3, #4
 8006ec8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	683a      	ldr	r2, [r7, #0]
 8006ed4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ee2:	7afb      	ldrb	r3, [r7, #11]
 8006ee4:	f003 030f 	and.w	r3, r3, #15
 8006ee8:	b2da      	uxtb	r2, r3
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d102      	bne.n	8006efc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006efc:	7afb      	ldrb	r3, [r7, #11]
 8006efe:	f003 030f 	and.w	r3, r3, #15
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d109      	bne.n	8006f1a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6818      	ldr	r0, [r3, #0]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	461a      	mov	r2, r3
 8006f12:	6979      	ldr	r1, [r7, #20]
 8006f14:	f006 fcf8 	bl	800d908 <USB_EP0StartXfer>
 8006f18:	e008      	b.n	8006f2c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6818      	ldr	r0, [r3, #0]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	461a      	mov	r2, r3
 8006f26:	6979      	ldr	r1, [r7, #20]
 8006f28:	f006 fa9e 	bl	800d468 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3718      	adds	r7, #24
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b084      	sub	sp, #16
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
 8006f3e:	460b      	mov	r3, r1
 8006f40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006f42:	78fb      	ldrb	r3, [r7, #3]
 8006f44:	f003 020f 	and.w	r2, r3, #15
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d901      	bls.n	8006f54 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e050      	b.n	8006ff6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006f54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	da0f      	bge.n	8006f7c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f5c:	78fb      	ldrb	r3, [r7, #3]
 8006f5e:	f003 020f 	and.w	r2, r3, #15
 8006f62:	4613      	mov	r3, r2
 8006f64:	00db      	lsls	r3, r3, #3
 8006f66:	4413      	add	r3, r2
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	3338      	adds	r3, #56	; 0x38
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	4413      	add	r3, r2
 8006f70:	3304      	adds	r3, #4
 8006f72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2201      	movs	r2, #1
 8006f78:	705a      	strb	r2, [r3, #1]
 8006f7a:	e00d      	b.n	8006f98 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006f7c:	78fa      	ldrb	r2, [r7, #3]
 8006f7e:	4613      	mov	r3, r2
 8006f80:	00db      	lsls	r3, r3, #3
 8006f82:	4413      	add	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	3304      	adds	r3, #4
 8006f90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f9e:	78fb      	ldrb	r3, [r7, #3]
 8006fa0:	f003 030f 	and.w	r3, r3, #15
 8006fa4:	b2da      	uxtb	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d101      	bne.n	8006fb8 <HAL_PCD_EP_SetStall+0x82>
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	e01e      	b.n	8006ff6 <HAL_PCD_EP_SetStall+0xc0>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68f9      	ldr	r1, [r7, #12]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f006 ff3a 	bl	800de40 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006fcc:	78fb      	ldrb	r3, [r7, #3]
 8006fce:	f003 030f 	and.w	r3, r3, #15
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10a      	bne.n	8006fec <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6818      	ldr	r0, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	b2d9      	uxtb	r1, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	f007 f92c 	bl	800e244 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b084      	sub	sp, #16
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
 8007006:	460b      	mov	r3, r1
 8007008:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800700a:	78fb      	ldrb	r3, [r7, #3]
 800700c:	f003 020f 	and.w	r2, r3, #15
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	429a      	cmp	r2, r3
 8007016:	d901      	bls.n	800701c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e042      	b.n	80070a2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800701c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007020:	2b00      	cmp	r3, #0
 8007022:	da0f      	bge.n	8007044 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007024:	78fb      	ldrb	r3, [r7, #3]
 8007026:	f003 020f 	and.w	r2, r3, #15
 800702a:	4613      	mov	r3, r2
 800702c:	00db      	lsls	r3, r3, #3
 800702e:	4413      	add	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	3338      	adds	r3, #56	; 0x38
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	4413      	add	r3, r2
 8007038:	3304      	adds	r3, #4
 800703a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2201      	movs	r2, #1
 8007040:	705a      	strb	r2, [r3, #1]
 8007042:	e00f      	b.n	8007064 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007044:	78fb      	ldrb	r3, [r7, #3]
 8007046:	f003 020f 	and.w	r2, r3, #15
 800704a:	4613      	mov	r3, r2
 800704c:	00db      	lsls	r3, r3, #3
 800704e:	4413      	add	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	4413      	add	r3, r2
 800705a:	3304      	adds	r3, #4
 800705c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800706a:	78fb      	ldrb	r3, [r7, #3]
 800706c:	f003 030f 	and.w	r3, r3, #15
 8007070:	b2da      	uxtb	r2, r3
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800707c:	2b01      	cmp	r3, #1
 800707e:	d101      	bne.n	8007084 <HAL_PCD_EP_ClrStall+0x86>
 8007080:	2302      	movs	r3, #2
 8007082:	e00e      	b.n	80070a2 <HAL_PCD_EP_ClrStall+0xa4>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68f9      	ldr	r1, [r7, #12]
 8007092:	4618      	mov	r0, r3
 8007094:	f006 ff42 	bl	800df1c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b084      	sub	sp, #16
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
 80070b2:	460b      	mov	r3, r1
 80070b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80070b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	da0c      	bge.n	80070d8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070be:	78fb      	ldrb	r3, [r7, #3]
 80070c0:	f003 020f 	and.w	r2, r3, #15
 80070c4:	4613      	mov	r3, r2
 80070c6:	00db      	lsls	r3, r3, #3
 80070c8:	4413      	add	r3, r2
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	3338      	adds	r3, #56	; 0x38
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	4413      	add	r3, r2
 80070d2:	3304      	adds	r3, #4
 80070d4:	60fb      	str	r3, [r7, #12]
 80070d6:	e00c      	b.n	80070f2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80070d8:	78fb      	ldrb	r3, [r7, #3]
 80070da:	f003 020f 	and.w	r2, r3, #15
 80070de:	4613      	mov	r3, r2
 80070e0:	00db      	lsls	r3, r3, #3
 80070e2:	4413      	add	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	4413      	add	r3, r2
 80070ee:	3304      	adds	r3, #4
 80070f0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68f9      	ldr	r1, [r7, #12]
 80070f8:	4618      	mov	r0, r3
 80070fa:	f006 fd61 	bl	800dbc0 <USB_EPStopXfer>
 80070fe:	4603      	mov	r3, r0
 8007100:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007102:	7afb      	ldrb	r3, [r7, #11]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b08a      	sub	sp, #40	; 0x28
 8007110:	af02      	add	r7, sp, #8
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007120:	683a      	ldr	r2, [r7, #0]
 8007122:	4613      	mov	r3, r2
 8007124:	00db      	lsls	r3, r3, #3
 8007126:	4413      	add	r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	3338      	adds	r3, #56	; 0x38
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	4413      	add	r3, r2
 8007130:	3304      	adds	r3, #4
 8007132:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6a1a      	ldr	r2, [r3, #32]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	429a      	cmp	r2, r3
 800713e:	d901      	bls.n	8007144 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e06c      	b.n	800721e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	699a      	ldr	r2, [r3, #24]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6a1b      	ldr	r3, [r3, #32]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	69fa      	ldr	r2, [r7, #28]
 8007156:	429a      	cmp	r2, r3
 8007158:	d902      	bls.n	8007160 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	3303      	adds	r3, #3
 8007164:	089b      	lsrs	r3, r3, #2
 8007166:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007168:	e02b      	b.n	80071c2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	699a      	ldr	r2, [r3, #24]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6a1b      	ldr	r3, [r3, #32]
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	69fa      	ldr	r2, [r7, #28]
 800717c:	429a      	cmp	r2, r3
 800717e:	d902      	bls.n	8007186 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	3303      	adds	r3, #3
 800718a:	089b      	lsrs	r3, r3, #2
 800718c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6919      	ldr	r1, [r3, #16]
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	b2da      	uxtb	r2, r3
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	9300      	str	r3, [sp, #0]
 80071a2:	4603      	mov	r3, r0
 80071a4:	6978      	ldr	r0, [r7, #20]
 80071a6:	f006 fdb5 	bl	800dd14 <USB_WritePacket>

    ep->xfer_buff  += len;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	691a      	ldr	r2, [r3, #16]
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	441a      	add	r2, r3
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6a1a      	ldr	r2, [r3, #32]
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	441a      	add	r2, r3
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	015a      	lsls	r2, r3, #5
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	4413      	add	r3, r2
 80071ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	69ba      	ldr	r2, [r7, #24]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d809      	bhi.n	80071ec <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6a1a      	ldr	r2, [r3, #32]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d203      	bcs.n	80071ec <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1be      	bne.n	800716a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	699a      	ldr	r2, [r3, #24]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6a1b      	ldr	r3, [r3, #32]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d811      	bhi.n	800721c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	f003 030f 	and.w	r3, r3, #15
 80071fe:	2201      	movs	r2, #1
 8007200:	fa02 f303 	lsl.w	r3, r2, r3
 8007204:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800720c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	43db      	mvns	r3, r3
 8007212:	6939      	ldr	r1, [r7, #16]
 8007214:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007218:	4013      	ands	r3, r2
 800721a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3720      	adds	r7, #32
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
	...

08007228 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b088      	sub	sp, #32
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	333c      	adds	r3, #60	; 0x3c
 8007240:	3304      	adds	r3, #4
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	015a      	lsls	r2, r3, #5
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	4413      	add	r3, r2
 800724e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d17b      	bne.n	8007356 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	f003 0308 	and.w	r3, r3, #8
 8007264:	2b00      	cmp	r3, #0
 8007266:	d015      	beq.n	8007294 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	4a61      	ldr	r2, [pc, #388]	; (80073f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800726c:	4293      	cmp	r3, r2
 800726e:	f240 80b9 	bls.w	80073e4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007278:	2b00      	cmp	r3, #0
 800727a:	f000 80b3 	beq.w	80073e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	015a      	lsls	r2, r3, #5
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	4413      	add	r3, r2
 8007286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800728a:	461a      	mov	r2, r3
 800728c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007290:	6093      	str	r3, [r2, #8]
 8007292:	e0a7      	b.n	80073e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	f003 0320 	and.w	r3, r3, #32
 800729a:	2b00      	cmp	r3, #0
 800729c:	d009      	beq.n	80072b2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072aa:	461a      	mov	r2, r3
 80072ac:	2320      	movs	r3, #32
 80072ae:	6093      	str	r3, [r2, #8]
 80072b0:	e098      	b.n	80073e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f040 8093 	bne.w	80073e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	4a4b      	ldr	r2, [pc, #300]	; (80073f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d90f      	bls.n	80072e6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00a      	beq.n	80072e6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	015a      	lsls	r2, r3, #5
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	4413      	add	r3, r2
 80072d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072dc:	461a      	mov	r2, r3
 80072de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072e2:	6093      	str	r3, [r2, #8]
 80072e4:	e07e      	b.n	80073e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80072e6:	683a      	ldr	r2, [r7, #0]
 80072e8:	4613      	mov	r3, r2
 80072ea:	00db      	lsls	r3, r3, #3
 80072ec:	4413      	add	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	4413      	add	r3, r2
 80072f8:	3304      	adds	r3, #4
 80072fa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	69da      	ldr	r2, [r3, #28]
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	0159      	lsls	r1, r3, #5
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	440b      	add	r3, r1
 8007308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007312:	1ad2      	subs	r2, r2, r3
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d114      	bne.n	8007348 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d109      	bne.n	800733a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6818      	ldr	r0, [r3, #0]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007330:	461a      	mov	r2, r3
 8007332:	2101      	movs	r1, #1
 8007334:	f006 ff86 	bl	800e244 <USB_EP0_OutStart>
 8007338:	e006      	b.n	8007348 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	691a      	ldr	r2, [r3, #16]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	441a      	add	r2, r3
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	b2db      	uxtb	r3, r3
 800734c:	4619      	mov	r1, r3
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f009 fae0 	bl	8010914 <HAL_PCD_DataOutStageCallback>
 8007354:	e046      	b.n	80073e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	4a26      	ldr	r2, [pc, #152]	; (80073f4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d124      	bne.n	80073a8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00a      	beq.n	800737e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	015a      	lsls	r2, r3, #5
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	4413      	add	r3, r2
 8007370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007374:	461a      	mov	r2, r3
 8007376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800737a:	6093      	str	r3, [r2, #8]
 800737c:	e032      	b.n	80073e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	f003 0320 	and.w	r3, r3, #32
 8007384:	2b00      	cmp	r3, #0
 8007386:	d008      	beq.n	800739a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	015a      	lsls	r2, r3, #5
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	4413      	add	r3, r2
 8007390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007394:	461a      	mov	r2, r3
 8007396:	2320      	movs	r3, #32
 8007398:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	b2db      	uxtb	r3, r3
 800739e:	4619      	mov	r1, r3
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f009 fab7 	bl	8010914 <HAL_PCD_DataOutStageCallback>
 80073a6:	e01d      	b.n	80073e4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d114      	bne.n	80073d8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80073ae:	6879      	ldr	r1, [r7, #4]
 80073b0:	683a      	ldr	r2, [r7, #0]
 80073b2:	4613      	mov	r3, r2
 80073b4:	00db      	lsls	r3, r3, #3
 80073b6:	4413      	add	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	440b      	add	r3, r1
 80073bc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d108      	bne.n	80073d8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6818      	ldr	r0, [r3, #0]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80073d0:	461a      	mov	r2, r3
 80073d2:	2100      	movs	r1, #0
 80073d4:	f006 ff36 	bl	800e244 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	4619      	mov	r1, r3
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f009 fa98 	bl	8010914 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3720      	adds	r7, #32
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	4f54300a 	.word	0x4f54300a
 80073f4:	4f54310a 	.word	0x4f54310a

080073f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b086      	sub	sp, #24
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	333c      	adds	r3, #60	; 0x3c
 8007410:	3304      	adds	r3, #4
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	015a      	lsls	r2, r3, #5
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	4413      	add	r3, r2
 800741e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	4a15      	ldr	r2, [pc, #84]	; (8007480 <PCD_EP_OutSetupPacket_int+0x88>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d90e      	bls.n	800744c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007434:	2b00      	cmp	r3, #0
 8007436:	d009      	beq.n	800744c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	015a      	lsls	r2, r3, #5
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	4413      	add	r3, r2
 8007440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007444:	461a      	mov	r2, r3
 8007446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800744a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f009 fa4f 	bl	80108f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	4a0a      	ldr	r2, [pc, #40]	; (8007480 <PCD_EP_OutSetupPacket_int+0x88>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d90c      	bls.n	8007474 <PCD_EP_OutSetupPacket_int+0x7c>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	2b01      	cmp	r3, #1
 8007460:	d108      	bne.n	8007474 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6818      	ldr	r0, [r3, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800746c:	461a      	mov	r2, r3
 800746e:	2101      	movs	r1, #1
 8007470:	f006 fee8 	bl	800e244 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3718      	adds	r7, #24
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	4f54300a 	.word	0x4f54300a

08007484 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	460b      	mov	r3, r1
 800748e:	70fb      	strb	r3, [r7, #3]
 8007490:	4613      	mov	r3, r2
 8007492:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800749c:	78fb      	ldrb	r3, [r7, #3]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d107      	bne.n	80074b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80074a2:	883b      	ldrh	r3, [r7, #0]
 80074a4:	0419      	lsls	r1, r3, #16
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68ba      	ldr	r2, [r7, #8]
 80074ac:	430a      	orrs	r2, r1
 80074ae:	629a      	str	r2, [r3, #40]	; 0x28
 80074b0:	e028      	b.n	8007504 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b8:	0c1b      	lsrs	r3, r3, #16
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	4413      	add	r3, r2
 80074be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80074c0:	2300      	movs	r3, #0
 80074c2:	73fb      	strb	r3, [r7, #15]
 80074c4:	e00d      	b.n	80074e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
 80074cc:	3340      	adds	r3, #64	; 0x40
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	4413      	add	r3, r2
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	0c1b      	lsrs	r3, r3, #16
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	4413      	add	r3, r2
 80074da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
 80074de:	3301      	adds	r3, #1
 80074e0:	73fb      	strb	r3, [r7, #15]
 80074e2:	7bfa      	ldrb	r2, [r7, #15]
 80074e4:	78fb      	ldrb	r3, [r7, #3]
 80074e6:	3b01      	subs	r3, #1
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d3ec      	bcc.n	80074c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80074ec:	883b      	ldrh	r3, [r7, #0]
 80074ee:	0418      	lsls	r0, r3, #16
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6819      	ldr	r1, [r3, #0]
 80074f4:	78fb      	ldrb	r3, [r7, #3]
 80074f6:	3b01      	subs	r3, #1
 80074f8:	68ba      	ldr	r2, [r7, #8]
 80074fa:	4302      	orrs	r2, r0
 80074fc:	3340      	adds	r3, #64	; 0x40
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	440b      	add	r3, r1
 8007502:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3714      	adds	r7, #20
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007512:	b480      	push	{r7}
 8007514:	b083      	sub	sp, #12
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
 800751a:	460b      	mov	r3, r1
 800751c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	887a      	ldrh	r2, [r7, #2]
 8007524:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	699b      	ldr	r3, [r3, #24]
 8007556:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007562:	4b05      	ldr	r3, [pc, #20]	; (8007578 <HAL_PCDEx_ActivateLPM+0x44>)
 8007564:	4313      	orrs	r3, r2
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3714      	adds	r7, #20
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr
 8007578:	10000003 	.word	0x10000003

0800757c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	460b      	mov	r3, r1
 8007586:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800759c:	4b29      	ldr	r3, [pc, #164]	; (8007644 <HAL_PWREx_ConfigSupply+0xb0>)
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	f003 0307 	and.w	r3, r3, #7
 80075a4:	2b06      	cmp	r3, #6
 80075a6:	d00a      	beq.n	80075be <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80075a8:	4b26      	ldr	r3, [pc, #152]	; (8007644 <HAL_PWREx_ConfigSupply+0xb0>)
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d001      	beq.n	80075ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e040      	b.n	800763c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80075ba:	2300      	movs	r3, #0
 80075bc:	e03e      	b.n	800763c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80075be:	4b21      	ldr	r3, [pc, #132]	; (8007644 <HAL_PWREx_ConfigSupply+0xb0>)
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80075c6:	491f      	ldr	r1, [pc, #124]	; (8007644 <HAL_PWREx_ConfigSupply+0xb0>)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80075ce:	f7fa f9fb 	bl	80019c8 <HAL_GetTick>
 80075d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80075d4:	e009      	b.n	80075ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80075d6:	f7fa f9f7 	bl	80019c8 <HAL_GetTick>
 80075da:	4602      	mov	r2, r0
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075e4:	d901      	bls.n	80075ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e028      	b.n	800763c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80075ea:	4b16      	ldr	r3, [pc, #88]	; (8007644 <HAL_PWREx_ConfigSupply+0xb0>)
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075f6:	d1ee      	bne.n	80075d6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2b1e      	cmp	r3, #30
 80075fc:	d008      	beq.n	8007610 <HAL_PWREx_ConfigSupply+0x7c>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b2e      	cmp	r3, #46	; 0x2e
 8007602:	d005      	beq.n	8007610 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2b1d      	cmp	r3, #29
 8007608:	d002      	beq.n	8007610 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2b2d      	cmp	r3, #45	; 0x2d
 800760e:	d114      	bne.n	800763a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007610:	f7fa f9da 	bl	80019c8 <HAL_GetTick>
 8007614:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007616:	e009      	b.n	800762c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007618:	f7fa f9d6 	bl	80019c8 <HAL_GetTick>
 800761c:	4602      	mov	r2, r0
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007626:	d901      	bls.n	800762c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	e007      	b.n	800763c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800762c:	4b05      	ldr	r3, [pc, #20]	; (8007644 <HAL_PWREx_ConfigSupply+0xb0>)
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007638:	d1ee      	bne.n	8007618 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	58024800 	.word	0x58024800

08007648 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007648:	b480      	push	{r7}
 800764a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800764c:	4b05      	ldr	r3, [pc, #20]	; (8007664 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	4a04      	ldr	r2, [pc, #16]	; (8007664 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007652:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007656:	60d3      	str	r3, [r2, #12]
}
 8007658:	bf00      	nop
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	58024800 	.word	0x58024800

08007668 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b08c      	sub	sp, #48	; 0x30
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d102      	bne.n	800767c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	f000 bc1d 	b.w	8007eb6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 0301 	and.w	r3, r3, #1
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 8087 	beq.w	8007798 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800768a:	4b99      	ldr	r3, [pc, #612]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007692:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007694:	4b96      	ldr	r3, [pc, #600]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 8007696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007698:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800769a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769c:	2b10      	cmp	r3, #16
 800769e:	d007      	beq.n	80076b0 <HAL_RCC_OscConfig+0x48>
 80076a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a2:	2b18      	cmp	r3, #24
 80076a4:	d110      	bne.n	80076c8 <HAL_RCC_OscConfig+0x60>
 80076a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a8:	f003 0303 	and.w	r3, r3, #3
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d10b      	bne.n	80076c8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076b0:	4b8f      	ldr	r3, [pc, #572]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d06c      	beq.n	8007796 <HAL_RCC_OscConfig+0x12e>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d168      	bne.n	8007796 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e3f6      	b.n	8007eb6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076d0:	d106      	bne.n	80076e0 <HAL_RCC_OscConfig+0x78>
 80076d2:	4b87      	ldr	r3, [pc, #540]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a86      	ldr	r2, [pc, #536]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 80076d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076dc:	6013      	str	r3, [r2, #0]
 80076de:	e02e      	b.n	800773e <HAL_RCC_OscConfig+0xd6>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d10c      	bne.n	8007702 <HAL_RCC_OscConfig+0x9a>
 80076e8:	4b81      	ldr	r3, [pc, #516]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a80      	ldr	r2, [pc, #512]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 80076ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076f2:	6013      	str	r3, [r2, #0]
 80076f4:	4b7e      	ldr	r3, [pc, #504]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a7d      	ldr	r2, [pc, #500]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 80076fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076fe:	6013      	str	r3, [r2, #0]
 8007700:	e01d      	b.n	800773e <HAL_RCC_OscConfig+0xd6>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800770a:	d10c      	bne.n	8007726 <HAL_RCC_OscConfig+0xbe>
 800770c:	4b78      	ldr	r3, [pc, #480]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a77      	ldr	r2, [pc, #476]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 8007712:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007716:	6013      	str	r3, [r2, #0]
 8007718:	4b75      	ldr	r3, [pc, #468]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a74      	ldr	r2, [pc, #464]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 800771e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007722:	6013      	str	r3, [r2, #0]
 8007724:	e00b      	b.n	800773e <HAL_RCC_OscConfig+0xd6>
 8007726:	4b72      	ldr	r3, [pc, #456]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a71      	ldr	r2, [pc, #452]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 800772c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007730:	6013      	str	r3, [r2, #0]
 8007732:	4b6f      	ldr	r3, [pc, #444]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a6e      	ldr	r2, [pc, #440]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 8007738:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800773c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d013      	beq.n	800776e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007746:	f7fa f93f 	bl	80019c8 <HAL_GetTick>
 800774a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800774c:	e008      	b.n	8007760 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800774e:	f7fa f93b 	bl	80019c8 <HAL_GetTick>
 8007752:	4602      	mov	r2, r0
 8007754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	2b64      	cmp	r3, #100	; 0x64
 800775a:	d901      	bls.n	8007760 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e3aa      	b.n	8007eb6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007760:	4b63      	ldr	r3, [pc, #396]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007768:	2b00      	cmp	r3, #0
 800776a:	d0f0      	beq.n	800774e <HAL_RCC_OscConfig+0xe6>
 800776c:	e014      	b.n	8007798 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800776e:	f7fa f92b 	bl	80019c8 <HAL_GetTick>
 8007772:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007774:	e008      	b.n	8007788 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007776:	f7fa f927 	bl	80019c8 <HAL_GetTick>
 800777a:	4602      	mov	r2, r0
 800777c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777e:	1ad3      	subs	r3, r2, r3
 8007780:	2b64      	cmp	r3, #100	; 0x64
 8007782:	d901      	bls.n	8007788 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8007784:	2303      	movs	r3, #3
 8007786:	e396      	b.n	8007eb6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007788:	4b59      	ldr	r3, [pc, #356]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1f0      	bne.n	8007776 <HAL_RCC_OscConfig+0x10e>
 8007794:	e000      	b.n	8007798 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007796:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0302 	and.w	r3, r3, #2
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f000 80cb 	beq.w	800793c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077a6:	4b52      	ldr	r3, [pc, #328]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077ae:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80077b0:	4b4f      	ldr	r3, [pc, #316]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 80077b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80077b6:	6a3b      	ldr	r3, [r7, #32]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d007      	beq.n	80077cc <HAL_RCC_OscConfig+0x164>
 80077bc:	6a3b      	ldr	r3, [r7, #32]
 80077be:	2b18      	cmp	r3, #24
 80077c0:	d156      	bne.n	8007870 <HAL_RCC_OscConfig+0x208>
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	f003 0303 	and.w	r3, r3, #3
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d151      	bne.n	8007870 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077cc:	4b48      	ldr	r3, [pc, #288]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0304 	and.w	r3, r3, #4
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d005      	beq.n	80077e4 <HAL_RCC_OscConfig+0x17c>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d101      	bne.n	80077e4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	e368      	b.n	8007eb6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80077e4:	4b42      	ldr	r3, [pc, #264]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f023 0219 	bic.w	r2, r3, #25
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	493f      	ldr	r1, [pc, #252]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 80077f2:	4313      	orrs	r3, r2
 80077f4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80077f6:	f7fa f8e7 	bl	80019c8 <HAL_GetTick>
 80077fa:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80077fc:	e008      	b.n	8007810 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077fe:	f7fa f8e3 	bl	80019c8 <HAL_GetTick>
 8007802:	4602      	mov	r2, r0
 8007804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	2b02      	cmp	r3, #2
 800780a:	d901      	bls.n	8007810 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800780c:	2303      	movs	r3, #3
 800780e:	e352      	b.n	8007eb6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007810:	4b37      	ldr	r3, [pc, #220]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 0304 	and.w	r3, r3, #4
 8007818:	2b00      	cmp	r3, #0
 800781a:	d0f0      	beq.n	80077fe <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800781c:	f7fa f904 	bl	8001a28 <HAL_GetREVID>
 8007820:	4603      	mov	r3, r0
 8007822:	f241 0203 	movw	r2, #4099	; 0x1003
 8007826:	4293      	cmp	r3, r2
 8007828:	d817      	bhi.n	800785a <HAL_RCC_OscConfig+0x1f2>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	2b40      	cmp	r3, #64	; 0x40
 8007830:	d108      	bne.n	8007844 <HAL_RCC_OscConfig+0x1dc>
 8007832:	4b2f      	ldr	r3, [pc, #188]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800783a:	4a2d      	ldr	r2, [pc, #180]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 800783c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007840:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007842:	e07b      	b.n	800793c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007844:	4b2a      	ldr	r3, [pc, #168]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	031b      	lsls	r3, r3, #12
 8007852:	4927      	ldr	r1, [pc, #156]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 8007854:	4313      	orrs	r3, r2
 8007856:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007858:	e070      	b.n	800793c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800785a:	4b25      	ldr	r3, [pc, #148]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	061b      	lsls	r3, r3, #24
 8007868:	4921      	ldr	r1, [pc, #132]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 800786a:	4313      	orrs	r3, r2
 800786c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800786e:	e065      	b.n	800793c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d048      	beq.n	800790a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007878:	4b1d      	ldr	r3, [pc, #116]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f023 0219 	bic.w	r2, r3, #25
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	491a      	ldr	r1, [pc, #104]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 8007886:	4313      	orrs	r3, r2
 8007888:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800788a:	f7fa f89d 	bl	80019c8 <HAL_GetTick>
 800788e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007890:	e008      	b.n	80078a4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007892:	f7fa f899 	bl	80019c8 <HAL_GetTick>
 8007896:	4602      	mov	r2, r0
 8007898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789a:	1ad3      	subs	r3, r2, r3
 800789c:	2b02      	cmp	r3, #2
 800789e:	d901      	bls.n	80078a4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80078a0:	2303      	movs	r3, #3
 80078a2:	e308      	b.n	8007eb6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80078a4:	4b12      	ldr	r3, [pc, #72]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 0304 	and.w	r3, r3, #4
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d0f0      	beq.n	8007892 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078b0:	f7fa f8ba 	bl	8001a28 <HAL_GetREVID>
 80078b4:	4603      	mov	r3, r0
 80078b6:	f241 0203 	movw	r2, #4099	; 0x1003
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d81a      	bhi.n	80078f4 <HAL_RCC_OscConfig+0x28c>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	2b40      	cmp	r3, #64	; 0x40
 80078c4:	d108      	bne.n	80078d8 <HAL_RCC_OscConfig+0x270>
 80078c6:	4b0a      	ldr	r3, [pc, #40]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80078ce:	4a08      	ldr	r2, [pc, #32]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 80078d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078d4:	6053      	str	r3, [r2, #4]
 80078d6:	e031      	b.n	800793c <HAL_RCC_OscConfig+0x2d4>
 80078d8:	4b05      	ldr	r3, [pc, #20]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	031b      	lsls	r3, r3, #12
 80078e6:	4902      	ldr	r1, [pc, #8]	; (80078f0 <HAL_RCC_OscConfig+0x288>)
 80078e8:	4313      	orrs	r3, r2
 80078ea:	604b      	str	r3, [r1, #4]
 80078ec:	e026      	b.n	800793c <HAL_RCC_OscConfig+0x2d4>
 80078ee:	bf00      	nop
 80078f0:	58024400 	.word	0x58024400
 80078f4:	4b9a      	ldr	r3, [pc, #616]	; (8007b60 <HAL_RCC_OscConfig+0x4f8>)
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	061b      	lsls	r3, r3, #24
 8007902:	4997      	ldr	r1, [pc, #604]	; (8007b60 <HAL_RCC_OscConfig+0x4f8>)
 8007904:	4313      	orrs	r3, r2
 8007906:	604b      	str	r3, [r1, #4]
 8007908:	e018      	b.n	800793c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800790a:	4b95      	ldr	r3, [pc, #596]	; (8007b60 <HAL_RCC_OscConfig+0x4f8>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a94      	ldr	r2, [pc, #592]	; (8007b60 <HAL_RCC_OscConfig+0x4f8>)
 8007910:	f023 0301 	bic.w	r3, r3, #1
 8007914:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007916:	f7fa f857 	bl	80019c8 <HAL_GetTick>
 800791a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800791c:	e008      	b.n	8007930 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800791e:	f7fa f853 	bl	80019c8 <HAL_GetTick>
 8007922:	4602      	mov	r2, r0
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	1ad3      	subs	r3, r2, r3
 8007928:	2b02      	cmp	r3, #2
 800792a:	d901      	bls.n	8007930 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800792c:	2303      	movs	r3, #3
 800792e:	e2c2      	b.n	8007eb6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007930:	4b8b      	ldr	r3, [pc, #556]	; (8007b60 <HAL_RCC_OscConfig+0x4f8>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 0304 	and.w	r3, r3, #4
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1f0      	bne.n	800791e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 0310 	and.w	r3, r3, #16
 8007944:	2b00      	cmp	r3, #0
 8007946:	f000 80a9 	beq.w	8007a9c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800794a:	4b85      	ldr	r3, [pc, #532]	; (8007b60 <HAL_RCC_OscConfig+0x4f8>)
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007952:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007954:	4b82      	ldr	r3, [pc, #520]	; (8007b60 <HAL_RCC_OscConfig+0x4f8>)
 8007956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007958:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	2b08      	cmp	r3, #8
 800795e:	d007      	beq.n	8007970 <HAL_RCC_OscConfig+0x308>
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	2b18      	cmp	r3, #24
 8007964:	d13a      	bne.n	80079dc <HAL_RCC_OscConfig+0x374>
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	f003 0303 	and.w	r3, r3, #3
 800796c:	2b01      	cmp	r3, #1
 800796e:	d135      	bne.n	80079dc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007970:	4b7b      	ldr	r3, [pc, #492]	; (8007b60 <HAL_RCC_OscConfig+0x4f8>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007978:	2b00      	cmp	r3, #0
 800797a:	d005      	beq.n	8007988 <HAL_RCC_OscConfig+0x320>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	69db      	ldr	r3, [r3, #28]
 8007980:	2b80      	cmp	r3, #128	; 0x80
 8007982:	d001      	beq.n	8007988 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e296      	b.n	8007eb6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007988:	f7fa f84e 	bl	8001a28 <HAL_GetREVID>
 800798c:	4603      	mov	r3, r0
 800798e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007992:	4293      	cmp	r3, r2
 8007994:	d817      	bhi.n	80079c6 <HAL_RCC_OscConfig+0x35e>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a1b      	ldr	r3, [r3, #32]
 800799a:	2b20      	cmp	r3, #32
 800799c:	d108      	bne.n	80079b0 <HAL_RCC_OscConfig+0x348>
 800799e:	4b70      	ldr	r3, [pc, #448]	; (8007b60 <HAL_RCC_OscConfig+0x4f8>)
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80079a6:	4a6e      	ldr	r2, [pc, #440]	; (8007b60 <HAL_RCC_OscConfig+0x4f8>)
 80079a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079ac:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80079ae:	e075      	b.n	8007a9c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80079b0:	4b6b      	ldr	r3, [pc, #428]	; (8007b60 <HAL_RCC_OscConfig+0x4f8>)
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a1b      	ldr	r3, [r3, #32]
 80079bc:	069b      	lsls	r3, r3, #26
 80079be:	4968      	ldr	r1, [pc, #416]	; (8007b60 <HAL_RCC_OscConfig+0x4f8>)
 80079c0:	4313      	orrs	r3, r2
 80079c2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80079c4:	e06a      	b.n	8007a9c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80079c6:	4b66      	ldr	r3, [pc, #408]	; (8007b60 <HAL_RCC_OscConfig+0x4f8>)
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a1b      	ldr	r3, [r3, #32]
 80079d2:	061b      	lsls	r3, r3, #24
 80079d4:	4962      	ldr	r1, [pc, #392]	; (8007b60 <HAL_RCC_OscConfig+0x4f8>)
 80079d6:	4313      	orrs	r3, r2
 80079d8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80079da:	e05f      	b.n	8007a9c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	69db      	ldr	r3, [r3, #28]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d042      	beq.n	8007a6a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80079e4:	4b5e      	ldr	r3, [pc, #376]	; (8007b60 <HAL_RCC_OscConfig+0x4f8>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a5d      	ldr	r2, [pc, #372]	; (8007b60 <HAL_RCC_OscConfig+0x4f8>)
 80079ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079f0:	f7f9 ffea 	bl	80019c8 <HAL_GetTick>
 80079f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80079f6:	e008      	b.n	8007a0a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80079f8:	f7f9 ffe6 	bl	80019c8 <HAL_GetTick>
 80079fc:	4602      	mov	r2, r0
 80079fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d901      	bls.n	8007a0a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007a06:	2303      	movs	r3, #3
 8007a08:	e255      	b.n	8007eb6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007a0a:	4b55      	ldr	r3, [pc, #340]	; (8007b60 <HAL_RCC_OscConfig+0x4f8>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d0f0      	beq.n	80079f8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a16:	f7fa f807 	bl	8001a28 <HAL_GetREVID>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d817      	bhi.n	8007a54 <HAL_RCC_OscConfig+0x3ec>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6a1b      	ldr	r3, [r3, #32]
 8007a28:	2b20      	cmp	r3, #32
 8007a2a:	d108      	bne.n	8007a3e <HAL_RCC_OscConfig+0x3d6>
 8007a2c:	4b4c      	ldr	r3, [pc, #304]	; (8007b60 <HAL_RCC_OscConfig+0x4f8>)
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007a34:	4a4a      	ldr	r2, [pc, #296]	; (8007b60 <HAL_RCC_OscConfig+0x4f8>)
 8007a36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a3a:	6053      	str	r3, [r2, #4]
 8007a3c:	e02e      	b.n	8007a9c <HAL_RCC_OscConfig+0x434>
 8007a3e:	4b48      	ldr	r3, [pc, #288]	; (8007b60 <HAL_RCC_OscConfig+0x4f8>)
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a1b      	ldr	r3, [r3, #32]
 8007a4a:	069b      	lsls	r3, r3, #26
 8007a4c:	4944      	ldr	r1, [pc, #272]	; (8007b60 <HAL_RCC_OscConfig+0x4f8>)
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	604b      	str	r3, [r1, #4]
 8007a52:	e023      	b.n	8007a9c <HAL_RCC_OscConfig+0x434>
 8007a54:	4b42      	ldr	r3, [pc, #264]	; (8007b60 <HAL_RCC_OscConfig+0x4f8>)
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a1b      	ldr	r3, [r3, #32]
 8007a60:	061b      	lsls	r3, r3, #24
 8007a62:	493f      	ldr	r1, [pc, #252]	; (8007b60 <HAL_RCC_OscConfig+0x4f8>)
 8007a64:	4313      	orrs	r3, r2
 8007a66:	60cb      	str	r3, [r1, #12]
 8007a68:	e018      	b.n	8007a9c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007a6a:	4b3d      	ldr	r3, [pc, #244]	; (8007b60 <HAL_RCC_OscConfig+0x4f8>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a3c      	ldr	r2, [pc, #240]	; (8007b60 <HAL_RCC_OscConfig+0x4f8>)
 8007a70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a76:	f7f9 ffa7 	bl	80019c8 <HAL_GetTick>
 8007a7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007a7c:	e008      	b.n	8007a90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007a7e:	f7f9 ffa3 	bl	80019c8 <HAL_GetTick>
 8007a82:	4602      	mov	r2, r0
 8007a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	d901      	bls.n	8007a90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	e212      	b.n	8007eb6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007a90:	4b33      	ldr	r3, [pc, #204]	; (8007b60 <HAL_RCC_OscConfig+0x4f8>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1f0      	bne.n	8007a7e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 0308 	and.w	r3, r3, #8
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d036      	beq.n	8007b16 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	695b      	ldr	r3, [r3, #20]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d019      	beq.n	8007ae4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ab0:	4b2b      	ldr	r3, [pc, #172]	; (8007b60 <HAL_RCC_OscConfig+0x4f8>)
 8007ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ab4:	4a2a      	ldr	r2, [pc, #168]	; (8007b60 <HAL_RCC_OscConfig+0x4f8>)
 8007ab6:	f043 0301 	orr.w	r3, r3, #1
 8007aba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007abc:	f7f9 ff84 	bl	80019c8 <HAL_GetTick>
 8007ac0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007ac2:	e008      	b.n	8007ad6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ac4:	f7f9 ff80 	bl	80019c8 <HAL_GetTick>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007acc:	1ad3      	subs	r3, r2, r3
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d901      	bls.n	8007ad6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	e1ef      	b.n	8007eb6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007ad6:	4b22      	ldr	r3, [pc, #136]	; (8007b60 <HAL_RCC_OscConfig+0x4f8>)
 8007ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ada:	f003 0302 	and.w	r3, r3, #2
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d0f0      	beq.n	8007ac4 <HAL_RCC_OscConfig+0x45c>
 8007ae2:	e018      	b.n	8007b16 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ae4:	4b1e      	ldr	r3, [pc, #120]	; (8007b60 <HAL_RCC_OscConfig+0x4f8>)
 8007ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ae8:	4a1d      	ldr	r2, [pc, #116]	; (8007b60 <HAL_RCC_OscConfig+0x4f8>)
 8007aea:	f023 0301 	bic.w	r3, r3, #1
 8007aee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007af0:	f7f9 ff6a 	bl	80019c8 <HAL_GetTick>
 8007af4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007af6:	e008      	b.n	8007b0a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007af8:	f7f9 ff66 	bl	80019c8 <HAL_GetTick>
 8007afc:	4602      	mov	r2, r0
 8007afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b00:	1ad3      	subs	r3, r2, r3
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d901      	bls.n	8007b0a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007b06:	2303      	movs	r3, #3
 8007b08:	e1d5      	b.n	8007eb6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007b0a:	4b15      	ldr	r3, [pc, #84]	; (8007b60 <HAL_RCC_OscConfig+0x4f8>)
 8007b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b0e:	f003 0302 	and.w	r3, r3, #2
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1f0      	bne.n	8007af8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 0320 	and.w	r3, r3, #32
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d039      	beq.n	8007b96 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	699b      	ldr	r3, [r3, #24]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d01c      	beq.n	8007b64 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007b2a:	4b0d      	ldr	r3, [pc, #52]	; (8007b60 <HAL_RCC_OscConfig+0x4f8>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a0c      	ldr	r2, [pc, #48]	; (8007b60 <HAL_RCC_OscConfig+0x4f8>)
 8007b30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007b34:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007b36:	f7f9 ff47 	bl	80019c8 <HAL_GetTick>
 8007b3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007b3c:	e008      	b.n	8007b50 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007b3e:	f7f9 ff43 	bl	80019c8 <HAL_GetTick>
 8007b42:	4602      	mov	r2, r0
 8007b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d901      	bls.n	8007b50 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	e1b2      	b.n	8007eb6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007b50:	4b03      	ldr	r3, [pc, #12]	; (8007b60 <HAL_RCC_OscConfig+0x4f8>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d0f0      	beq.n	8007b3e <HAL_RCC_OscConfig+0x4d6>
 8007b5c:	e01b      	b.n	8007b96 <HAL_RCC_OscConfig+0x52e>
 8007b5e:	bf00      	nop
 8007b60:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007b64:	4b9b      	ldr	r3, [pc, #620]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a9a      	ldr	r2, [pc, #616]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007b6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b6e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007b70:	f7f9 ff2a 	bl	80019c8 <HAL_GetTick>
 8007b74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007b76:	e008      	b.n	8007b8a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007b78:	f7f9 ff26 	bl	80019c8 <HAL_GetTick>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d901      	bls.n	8007b8a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007b86:	2303      	movs	r3, #3
 8007b88:	e195      	b.n	8007eb6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007b8a:	4b92      	ldr	r3, [pc, #584]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d1f0      	bne.n	8007b78 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 0304 	and.w	r3, r3, #4
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f000 8081 	beq.w	8007ca6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007ba4:	4b8c      	ldr	r3, [pc, #560]	; (8007dd8 <HAL_RCC_OscConfig+0x770>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a8b      	ldr	r2, [pc, #556]	; (8007dd8 <HAL_RCC_OscConfig+0x770>)
 8007baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007bb0:	f7f9 ff0a 	bl	80019c8 <HAL_GetTick>
 8007bb4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007bb6:	e008      	b.n	8007bca <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007bb8:	f7f9 ff06 	bl	80019c8 <HAL_GetTick>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	2b64      	cmp	r3, #100	; 0x64
 8007bc4:	d901      	bls.n	8007bca <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e175      	b.n	8007eb6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007bca:	4b83      	ldr	r3, [pc, #524]	; (8007dd8 <HAL_RCC_OscConfig+0x770>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d0f0      	beq.n	8007bb8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d106      	bne.n	8007bec <HAL_RCC_OscConfig+0x584>
 8007bde:	4b7d      	ldr	r3, [pc, #500]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007be2:	4a7c      	ldr	r2, [pc, #496]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007be4:	f043 0301 	orr.w	r3, r3, #1
 8007be8:	6713      	str	r3, [r2, #112]	; 0x70
 8007bea:	e02d      	b.n	8007c48 <HAL_RCC_OscConfig+0x5e0>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d10c      	bne.n	8007c0e <HAL_RCC_OscConfig+0x5a6>
 8007bf4:	4b77      	ldr	r3, [pc, #476]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bf8:	4a76      	ldr	r2, [pc, #472]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007bfa:	f023 0301 	bic.w	r3, r3, #1
 8007bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8007c00:	4b74      	ldr	r3, [pc, #464]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c04:	4a73      	ldr	r2, [pc, #460]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007c06:	f023 0304 	bic.w	r3, r3, #4
 8007c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8007c0c:	e01c      	b.n	8007c48 <HAL_RCC_OscConfig+0x5e0>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	2b05      	cmp	r3, #5
 8007c14:	d10c      	bne.n	8007c30 <HAL_RCC_OscConfig+0x5c8>
 8007c16:	4b6f      	ldr	r3, [pc, #444]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c1a:	4a6e      	ldr	r2, [pc, #440]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007c1c:	f043 0304 	orr.w	r3, r3, #4
 8007c20:	6713      	str	r3, [r2, #112]	; 0x70
 8007c22:	4b6c      	ldr	r3, [pc, #432]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c26:	4a6b      	ldr	r2, [pc, #428]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007c28:	f043 0301 	orr.w	r3, r3, #1
 8007c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8007c2e:	e00b      	b.n	8007c48 <HAL_RCC_OscConfig+0x5e0>
 8007c30:	4b68      	ldr	r3, [pc, #416]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c34:	4a67      	ldr	r2, [pc, #412]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007c36:	f023 0301 	bic.w	r3, r3, #1
 8007c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8007c3c:	4b65      	ldr	r3, [pc, #404]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c40:	4a64      	ldr	r2, [pc, #400]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007c42:	f023 0304 	bic.w	r3, r3, #4
 8007c46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d015      	beq.n	8007c7c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c50:	f7f9 feba 	bl	80019c8 <HAL_GetTick>
 8007c54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c56:	e00a      	b.n	8007c6e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c58:	f7f9 feb6 	bl	80019c8 <HAL_GetTick>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d901      	bls.n	8007c6e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e123      	b.n	8007eb6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c6e:	4b59      	ldr	r3, [pc, #356]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c72:	f003 0302 	and.w	r3, r3, #2
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d0ee      	beq.n	8007c58 <HAL_RCC_OscConfig+0x5f0>
 8007c7a:	e014      	b.n	8007ca6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c7c:	f7f9 fea4 	bl	80019c8 <HAL_GetTick>
 8007c80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007c82:	e00a      	b.n	8007c9a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c84:	f7f9 fea0 	bl	80019c8 <HAL_GetTick>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8c:	1ad3      	subs	r3, r2, r3
 8007c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d901      	bls.n	8007c9a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007c96:	2303      	movs	r3, #3
 8007c98:	e10d      	b.n	8007eb6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007c9a:	4b4e      	ldr	r3, [pc, #312]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c9e:	f003 0302 	and.w	r3, r3, #2
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d1ee      	bne.n	8007c84 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	f000 8102 	beq.w	8007eb4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007cb0:	4b48      	ldr	r3, [pc, #288]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007cb8:	2b18      	cmp	r3, #24
 8007cba:	f000 80bd 	beq.w	8007e38 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	f040 809e 	bne.w	8007e04 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cc8:	4b42      	ldr	r3, [pc, #264]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a41      	ldr	r2, [pc, #260]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007cce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cd4:	f7f9 fe78 	bl	80019c8 <HAL_GetTick>
 8007cd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007cda:	e008      	b.n	8007cee <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007cdc:	f7f9 fe74 	bl	80019c8 <HAL_GetTick>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d901      	bls.n	8007cee <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007cea:	2303      	movs	r3, #3
 8007cec:	e0e3      	b.n	8007eb6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007cee:	4b39      	ldr	r3, [pc, #228]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1f0      	bne.n	8007cdc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007cfa:	4b36      	ldr	r3, [pc, #216]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007cfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cfe:	4b37      	ldr	r3, [pc, #220]	; (8007ddc <HAL_RCC_OscConfig+0x774>)
 8007d00:	4013      	ands	r3, r2
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007d0a:	0112      	lsls	r2, r2, #4
 8007d0c:	430a      	orrs	r2, r1
 8007d0e:	4931      	ldr	r1, [pc, #196]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007d10:	4313      	orrs	r3, r2
 8007d12:	628b      	str	r3, [r1, #40]	; 0x28
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d22:	3b01      	subs	r3, #1
 8007d24:	025b      	lsls	r3, r3, #9
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	431a      	orrs	r2, r3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	041b      	lsls	r3, r3, #16
 8007d32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007d36:	431a      	orrs	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	061b      	lsls	r3, r3, #24
 8007d40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007d44:	4923      	ldr	r1, [pc, #140]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007d46:	4313      	orrs	r3, r2
 8007d48:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007d4a:	4b22      	ldr	r3, [pc, #136]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d4e:	4a21      	ldr	r2, [pc, #132]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007d50:	f023 0301 	bic.w	r3, r3, #1
 8007d54:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007d56:	4b1f      	ldr	r3, [pc, #124]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007d58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d5a:	4b21      	ldr	r3, [pc, #132]	; (8007de0 <HAL_RCC_OscConfig+0x778>)
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007d62:	00d2      	lsls	r2, r2, #3
 8007d64:	491b      	ldr	r1, [pc, #108]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007d66:	4313      	orrs	r3, r2
 8007d68:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007d6a:	4b1a      	ldr	r3, [pc, #104]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6e:	f023 020c 	bic.w	r2, r3, #12
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d76:	4917      	ldr	r1, [pc, #92]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007d7c:	4b15      	ldr	r3, [pc, #84]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d80:	f023 0202 	bic.w	r2, r3, #2
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d88:	4912      	ldr	r1, [pc, #72]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007d8e:	4b11      	ldr	r3, [pc, #68]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d92:	4a10      	ldr	r2, [pc, #64]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d9a:	4b0e      	ldr	r3, [pc, #56]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9e:	4a0d      	ldr	r2, [pc, #52]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007da4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007da6:	4b0b      	ldr	r3, [pc, #44]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007daa:	4a0a      	ldr	r2, [pc, #40]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007db0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007db2:	4b08      	ldr	r3, [pc, #32]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db6:	4a07      	ldr	r2, [pc, #28]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007db8:	f043 0301 	orr.w	r3, r3, #1
 8007dbc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007dbe:	4b05      	ldr	r3, [pc, #20]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a04      	ldr	r2, [pc, #16]	; (8007dd4 <HAL_RCC_OscConfig+0x76c>)
 8007dc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007dc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dca:	f7f9 fdfd 	bl	80019c8 <HAL_GetTick>
 8007dce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007dd0:	e011      	b.n	8007df6 <HAL_RCC_OscConfig+0x78e>
 8007dd2:	bf00      	nop
 8007dd4:	58024400 	.word	0x58024400
 8007dd8:	58024800 	.word	0x58024800
 8007ddc:	fffffc0c 	.word	0xfffffc0c
 8007de0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007de4:	f7f9 fdf0 	bl	80019c8 <HAL_GetTick>
 8007de8:	4602      	mov	r2, r0
 8007dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	2b02      	cmp	r3, #2
 8007df0:	d901      	bls.n	8007df6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e05f      	b.n	8007eb6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007df6:	4b32      	ldr	r3, [pc, #200]	; (8007ec0 <HAL_RCC_OscConfig+0x858>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d0f0      	beq.n	8007de4 <HAL_RCC_OscConfig+0x77c>
 8007e02:	e057      	b.n	8007eb4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e04:	4b2e      	ldr	r3, [pc, #184]	; (8007ec0 <HAL_RCC_OscConfig+0x858>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a2d      	ldr	r2, [pc, #180]	; (8007ec0 <HAL_RCC_OscConfig+0x858>)
 8007e0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e10:	f7f9 fdda 	bl	80019c8 <HAL_GetTick>
 8007e14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e16:	e008      	b.n	8007e2a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e18:	f7f9 fdd6 	bl	80019c8 <HAL_GetTick>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d901      	bls.n	8007e2a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	e045      	b.n	8007eb6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e2a:	4b25      	ldr	r3, [pc, #148]	; (8007ec0 <HAL_RCC_OscConfig+0x858>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1f0      	bne.n	8007e18 <HAL_RCC_OscConfig+0x7b0>
 8007e36:	e03d      	b.n	8007eb4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007e38:	4b21      	ldr	r3, [pc, #132]	; (8007ec0 <HAL_RCC_OscConfig+0x858>)
 8007e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e3c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007e3e:	4b20      	ldr	r3, [pc, #128]	; (8007ec0 <HAL_RCC_OscConfig+0x858>)
 8007e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e42:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d031      	beq.n	8007eb0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	f003 0203 	and.w	r2, r3, #3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d12a      	bne.n	8007eb0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	091b      	lsrs	r3, r3, #4
 8007e5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d122      	bne.n	8007eb0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e74:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d11a      	bne.n	8007eb0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	0a5b      	lsrs	r3, r3, #9
 8007e7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e86:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d111      	bne.n	8007eb0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	0c1b      	lsrs	r3, r3, #16
 8007e90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e98:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d108      	bne.n	8007eb0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	0e1b      	lsrs	r3, r3, #24
 8007ea2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eaa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d001      	beq.n	8007eb4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e000      	b.n	8007eb6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3730      	adds	r7, #48	; 0x30
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	58024400 	.word	0x58024400

08007ec4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b086      	sub	sp, #24
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d101      	bne.n	8007ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e19c      	b.n	8008212 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ed8:	4b8a      	ldr	r3, [pc, #552]	; (8008104 <HAL_RCC_ClockConfig+0x240>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f003 030f 	and.w	r3, r3, #15
 8007ee0:	683a      	ldr	r2, [r7, #0]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d910      	bls.n	8007f08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ee6:	4b87      	ldr	r3, [pc, #540]	; (8008104 <HAL_RCC_ClockConfig+0x240>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f023 020f 	bic.w	r2, r3, #15
 8007eee:	4985      	ldr	r1, [pc, #532]	; (8008104 <HAL_RCC_ClockConfig+0x240>)
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ef6:	4b83      	ldr	r3, [pc, #524]	; (8008104 <HAL_RCC_ClockConfig+0x240>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 030f 	and.w	r3, r3, #15
 8007efe:	683a      	ldr	r2, [r7, #0]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d001      	beq.n	8007f08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	e184      	b.n	8008212 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f003 0304 	and.w	r3, r3, #4
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d010      	beq.n	8007f36 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	691a      	ldr	r2, [r3, #16]
 8007f18:	4b7b      	ldr	r3, [pc, #492]	; (8008108 <HAL_RCC_ClockConfig+0x244>)
 8007f1a:	699b      	ldr	r3, [r3, #24]
 8007f1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d908      	bls.n	8007f36 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007f24:	4b78      	ldr	r3, [pc, #480]	; (8008108 <HAL_RCC_ClockConfig+0x244>)
 8007f26:	699b      	ldr	r3, [r3, #24]
 8007f28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	4975      	ldr	r1, [pc, #468]	; (8008108 <HAL_RCC_ClockConfig+0x244>)
 8007f32:	4313      	orrs	r3, r2
 8007f34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 0308 	and.w	r3, r3, #8
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d010      	beq.n	8007f64 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	695a      	ldr	r2, [r3, #20]
 8007f46:	4b70      	ldr	r3, [pc, #448]	; (8008108 <HAL_RCC_ClockConfig+0x244>)
 8007f48:	69db      	ldr	r3, [r3, #28]
 8007f4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d908      	bls.n	8007f64 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007f52:	4b6d      	ldr	r3, [pc, #436]	; (8008108 <HAL_RCC_ClockConfig+0x244>)
 8007f54:	69db      	ldr	r3, [r3, #28]
 8007f56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	695b      	ldr	r3, [r3, #20]
 8007f5e:	496a      	ldr	r1, [pc, #424]	; (8008108 <HAL_RCC_ClockConfig+0x244>)
 8007f60:	4313      	orrs	r3, r2
 8007f62:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0310 	and.w	r3, r3, #16
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d010      	beq.n	8007f92 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	699a      	ldr	r2, [r3, #24]
 8007f74:	4b64      	ldr	r3, [pc, #400]	; (8008108 <HAL_RCC_ClockConfig+0x244>)
 8007f76:	69db      	ldr	r3, [r3, #28]
 8007f78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d908      	bls.n	8007f92 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007f80:	4b61      	ldr	r3, [pc, #388]	; (8008108 <HAL_RCC_ClockConfig+0x244>)
 8007f82:	69db      	ldr	r3, [r3, #28]
 8007f84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	699b      	ldr	r3, [r3, #24]
 8007f8c:	495e      	ldr	r1, [pc, #376]	; (8008108 <HAL_RCC_ClockConfig+0x244>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f003 0320 	and.w	r3, r3, #32
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d010      	beq.n	8007fc0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	69da      	ldr	r2, [r3, #28]
 8007fa2:	4b59      	ldr	r3, [pc, #356]	; (8008108 <HAL_RCC_ClockConfig+0x244>)
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d908      	bls.n	8007fc0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007fae:	4b56      	ldr	r3, [pc, #344]	; (8008108 <HAL_RCC_ClockConfig+0x244>)
 8007fb0:	6a1b      	ldr	r3, [r3, #32]
 8007fb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	69db      	ldr	r3, [r3, #28]
 8007fba:	4953      	ldr	r1, [pc, #332]	; (8008108 <HAL_RCC_ClockConfig+0x244>)
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 0302 	and.w	r3, r3, #2
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d010      	beq.n	8007fee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	68da      	ldr	r2, [r3, #12]
 8007fd0:	4b4d      	ldr	r3, [pc, #308]	; (8008108 <HAL_RCC_ClockConfig+0x244>)
 8007fd2:	699b      	ldr	r3, [r3, #24]
 8007fd4:	f003 030f 	and.w	r3, r3, #15
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d908      	bls.n	8007fee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fdc:	4b4a      	ldr	r3, [pc, #296]	; (8008108 <HAL_RCC_ClockConfig+0x244>)
 8007fde:	699b      	ldr	r3, [r3, #24]
 8007fe0:	f023 020f 	bic.w	r2, r3, #15
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	4947      	ldr	r1, [pc, #284]	; (8008108 <HAL_RCC_ClockConfig+0x244>)
 8007fea:	4313      	orrs	r3, r2
 8007fec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 0301 	and.w	r3, r3, #1
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d055      	beq.n	80080a6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007ffa:	4b43      	ldr	r3, [pc, #268]	; (8008108 <HAL_RCC_ClockConfig+0x244>)
 8007ffc:	699b      	ldr	r3, [r3, #24]
 8007ffe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	4940      	ldr	r1, [pc, #256]	; (8008108 <HAL_RCC_ClockConfig+0x244>)
 8008008:	4313      	orrs	r3, r2
 800800a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	2b02      	cmp	r3, #2
 8008012:	d107      	bne.n	8008024 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008014:	4b3c      	ldr	r3, [pc, #240]	; (8008108 <HAL_RCC_ClockConfig+0x244>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800801c:	2b00      	cmp	r3, #0
 800801e:	d121      	bne.n	8008064 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	e0f6      	b.n	8008212 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	2b03      	cmp	r3, #3
 800802a:	d107      	bne.n	800803c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800802c:	4b36      	ldr	r3, [pc, #216]	; (8008108 <HAL_RCC_ClockConfig+0x244>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008034:	2b00      	cmp	r3, #0
 8008036:	d115      	bne.n	8008064 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	e0ea      	b.n	8008212 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d107      	bne.n	8008054 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008044:	4b30      	ldr	r3, [pc, #192]	; (8008108 <HAL_RCC_ClockConfig+0x244>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800804c:	2b00      	cmp	r3, #0
 800804e:	d109      	bne.n	8008064 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	e0de      	b.n	8008212 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008054:	4b2c      	ldr	r3, [pc, #176]	; (8008108 <HAL_RCC_ClockConfig+0x244>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f003 0304 	and.w	r3, r3, #4
 800805c:	2b00      	cmp	r3, #0
 800805e:	d101      	bne.n	8008064 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	e0d6      	b.n	8008212 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008064:	4b28      	ldr	r3, [pc, #160]	; (8008108 <HAL_RCC_ClockConfig+0x244>)
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	f023 0207 	bic.w	r2, r3, #7
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	4925      	ldr	r1, [pc, #148]	; (8008108 <HAL_RCC_ClockConfig+0x244>)
 8008072:	4313      	orrs	r3, r2
 8008074:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008076:	f7f9 fca7 	bl	80019c8 <HAL_GetTick>
 800807a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800807c:	e00a      	b.n	8008094 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800807e:	f7f9 fca3 	bl	80019c8 <HAL_GetTick>
 8008082:	4602      	mov	r2, r0
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	1ad3      	subs	r3, r2, r3
 8008088:	f241 3288 	movw	r2, #5000	; 0x1388
 800808c:	4293      	cmp	r3, r2
 800808e:	d901      	bls.n	8008094 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008090:	2303      	movs	r3, #3
 8008092:	e0be      	b.n	8008212 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008094:	4b1c      	ldr	r3, [pc, #112]	; (8008108 <HAL_RCC_ClockConfig+0x244>)
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	00db      	lsls	r3, r3, #3
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d1eb      	bne.n	800807e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f003 0302 	and.w	r3, r3, #2
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d010      	beq.n	80080d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	68da      	ldr	r2, [r3, #12]
 80080b6:	4b14      	ldr	r3, [pc, #80]	; (8008108 <HAL_RCC_ClockConfig+0x244>)
 80080b8:	699b      	ldr	r3, [r3, #24]
 80080ba:	f003 030f 	and.w	r3, r3, #15
 80080be:	429a      	cmp	r2, r3
 80080c0:	d208      	bcs.n	80080d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080c2:	4b11      	ldr	r3, [pc, #68]	; (8008108 <HAL_RCC_ClockConfig+0x244>)
 80080c4:	699b      	ldr	r3, [r3, #24]
 80080c6:	f023 020f 	bic.w	r2, r3, #15
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	490e      	ldr	r1, [pc, #56]	; (8008108 <HAL_RCC_ClockConfig+0x244>)
 80080d0:	4313      	orrs	r3, r2
 80080d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80080d4:	4b0b      	ldr	r3, [pc, #44]	; (8008104 <HAL_RCC_ClockConfig+0x240>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f003 030f 	and.w	r3, r3, #15
 80080dc:	683a      	ldr	r2, [r7, #0]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d214      	bcs.n	800810c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080e2:	4b08      	ldr	r3, [pc, #32]	; (8008104 <HAL_RCC_ClockConfig+0x240>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f023 020f 	bic.w	r2, r3, #15
 80080ea:	4906      	ldr	r1, [pc, #24]	; (8008104 <HAL_RCC_ClockConfig+0x240>)
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80080f2:	4b04      	ldr	r3, [pc, #16]	; (8008104 <HAL_RCC_ClockConfig+0x240>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 030f 	and.w	r3, r3, #15
 80080fa:	683a      	ldr	r2, [r7, #0]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d005      	beq.n	800810c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	e086      	b.n	8008212 <HAL_RCC_ClockConfig+0x34e>
 8008104:	52002000 	.word	0x52002000
 8008108:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 0304 	and.w	r3, r3, #4
 8008114:	2b00      	cmp	r3, #0
 8008116:	d010      	beq.n	800813a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	691a      	ldr	r2, [r3, #16]
 800811c:	4b3f      	ldr	r3, [pc, #252]	; (800821c <HAL_RCC_ClockConfig+0x358>)
 800811e:	699b      	ldr	r3, [r3, #24]
 8008120:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008124:	429a      	cmp	r2, r3
 8008126:	d208      	bcs.n	800813a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008128:	4b3c      	ldr	r3, [pc, #240]	; (800821c <HAL_RCC_ClockConfig+0x358>)
 800812a:	699b      	ldr	r3, [r3, #24]
 800812c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	691b      	ldr	r3, [r3, #16]
 8008134:	4939      	ldr	r1, [pc, #228]	; (800821c <HAL_RCC_ClockConfig+0x358>)
 8008136:	4313      	orrs	r3, r2
 8008138:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 0308 	and.w	r3, r3, #8
 8008142:	2b00      	cmp	r3, #0
 8008144:	d010      	beq.n	8008168 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	695a      	ldr	r2, [r3, #20]
 800814a:	4b34      	ldr	r3, [pc, #208]	; (800821c <HAL_RCC_ClockConfig+0x358>)
 800814c:	69db      	ldr	r3, [r3, #28]
 800814e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008152:	429a      	cmp	r2, r3
 8008154:	d208      	bcs.n	8008168 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008156:	4b31      	ldr	r3, [pc, #196]	; (800821c <HAL_RCC_ClockConfig+0x358>)
 8008158:	69db      	ldr	r3, [r3, #28]
 800815a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	695b      	ldr	r3, [r3, #20]
 8008162:	492e      	ldr	r1, [pc, #184]	; (800821c <HAL_RCC_ClockConfig+0x358>)
 8008164:	4313      	orrs	r3, r2
 8008166:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 0310 	and.w	r3, r3, #16
 8008170:	2b00      	cmp	r3, #0
 8008172:	d010      	beq.n	8008196 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	699a      	ldr	r2, [r3, #24]
 8008178:	4b28      	ldr	r3, [pc, #160]	; (800821c <HAL_RCC_ClockConfig+0x358>)
 800817a:	69db      	ldr	r3, [r3, #28]
 800817c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008180:	429a      	cmp	r2, r3
 8008182:	d208      	bcs.n	8008196 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008184:	4b25      	ldr	r3, [pc, #148]	; (800821c <HAL_RCC_ClockConfig+0x358>)
 8008186:	69db      	ldr	r3, [r3, #28]
 8008188:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	699b      	ldr	r3, [r3, #24]
 8008190:	4922      	ldr	r1, [pc, #136]	; (800821c <HAL_RCC_ClockConfig+0x358>)
 8008192:	4313      	orrs	r3, r2
 8008194:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 0320 	and.w	r3, r3, #32
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d010      	beq.n	80081c4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	69da      	ldr	r2, [r3, #28]
 80081a6:	4b1d      	ldr	r3, [pc, #116]	; (800821c <HAL_RCC_ClockConfig+0x358>)
 80081a8:	6a1b      	ldr	r3, [r3, #32]
 80081aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d208      	bcs.n	80081c4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80081b2:	4b1a      	ldr	r3, [pc, #104]	; (800821c <HAL_RCC_ClockConfig+0x358>)
 80081b4:	6a1b      	ldr	r3, [r3, #32]
 80081b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	69db      	ldr	r3, [r3, #28]
 80081be:	4917      	ldr	r1, [pc, #92]	; (800821c <HAL_RCC_ClockConfig+0x358>)
 80081c0:	4313      	orrs	r3, r2
 80081c2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80081c4:	f000 f89e 	bl	8008304 <HAL_RCC_GetSysClockFreq>
 80081c8:	4602      	mov	r2, r0
 80081ca:	4b14      	ldr	r3, [pc, #80]	; (800821c <HAL_RCC_ClockConfig+0x358>)
 80081cc:	699b      	ldr	r3, [r3, #24]
 80081ce:	0a1b      	lsrs	r3, r3, #8
 80081d0:	f003 030f 	and.w	r3, r3, #15
 80081d4:	4912      	ldr	r1, [pc, #72]	; (8008220 <HAL_RCC_ClockConfig+0x35c>)
 80081d6:	5ccb      	ldrb	r3, [r1, r3]
 80081d8:	f003 031f 	and.w	r3, r3, #31
 80081dc:	fa22 f303 	lsr.w	r3, r2, r3
 80081e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80081e2:	4b0e      	ldr	r3, [pc, #56]	; (800821c <HAL_RCC_ClockConfig+0x358>)
 80081e4:	699b      	ldr	r3, [r3, #24]
 80081e6:	f003 030f 	and.w	r3, r3, #15
 80081ea:	4a0d      	ldr	r2, [pc, #52]	; (8008220 <HAL_RCC_ClockConfig+0x35c>)
 80081ec:	5cd3      	ldrb	r3, [r2, r3]
 80081ee:	f003 031f 	and.w	r3, r3, #31
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	fa22 f303 	lsr.w	r3, r2, r3
 80081f8:	4a0a      	ldr	r2, [pc, #40]	; (8008224 <HAL_RCC_ClockConfig+0x360>)
 80081fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80081fc:	4a0a      	ldr	r2, [pc, #40]	; (8008228 <HAL_RCC_ClockConfig+0x364>)
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008202:	4b0a      	ldr	r3, [pc, #40]	; (800822c <HAL_RCC_ClockConfig+0x368>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4618      	mov	r0, r3
 8008208:	f7f9 fb94 	bl	8001934 <HAL_InitTick>
 800820c:	4603      	mov	r3, r0
 800820e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008210:	7bfb      	ldrb	r3, [r7, #15]
}
 8008212:	4618      	mov	r0, r3
 8008214:	3718      	adds	r7, #24
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	58024400 	.word	0x58024400
 8008220:	080110cc 	.word	0x080110cc
 8008224:	24000004 	.word	0x24000004
 8008228:	24000000 	.word	0x24000000
 800822c:	24000008 	.word	0x24000008

08008230 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b08c      	sub	sp, #48	; 0x30
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d12a      	bne.n	8008298 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8008242:	4b2d      	ldr	r3, [pc, #180]	; (80082f8 <HAL_RCC_MCOConfig+0xc8>)
 8008244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008248:	4a2b      	ldr	r2, [pc, #172]	; (80082f8 <HAL_RCC_MCOConfig+0xc8>)
 800824a:	f043 0301 	orr.w	r3, r3, #1
 800824e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008252:	4b29      	ldr	r3, [pc, #164]	; (80082f8 <HAL_RCC_MCOConfig+0xc8>)
 8008254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008258:	f003 0301 	and.w	r3, r3, #1
 800825c:	61bb      	str	r3, [r7, #24]
 800825e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8008260:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008266:	2302      	movs	r3, #2
 8008268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800826a:	2303      	movs	r3, #3
 800826c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800826e:	2300      	movs	r3, #0
 8008270:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008272:	2300      	movs	r3, #0
 8008274:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8008276:	f107 031c 	add.w	r3, r7, #28
 800827a:	4619      	mov	r1, r3
 800827c:	481f      	ldr	r0, [pc, #124]	; (80082fc <HAL_RCC_MCOConfig+0xcc>)
 800827e:	f7fd fc89 	bl	8005b94 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8008282:	4b1d      	ldr	r3, [pc, #116]	; (80082f8 <HAL_RCC_MCOConfig+0xc8>)
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800828a:	68b9      	ldr	r1, [r7, #8]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	430b      	orrs	r3, r1
 8008290:	4919      	ldr	r1, [pc, #100]	; (80082f8 <HAL_RCC_MCOConfig+0xc8>)
 8008292:	4313      	orrs	r3, r2
 8008294:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8008296:	e02a      	b.n	80082ee <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8008298:	4b17      	ldr	r3, [pc, #92]	; (80082f8 <HAL_RCC_MCOConfig+0xc8>)
 800829a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800829e:	4a16      	ldr	r2, [pc, #88]	; (80082f8 <HAL_RCC_MCOConfig+0xc8>)
 80082a0:	f043 0304 	orr.w	r3, r3, #4
 80082a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80082a8:	4b13      	ldr	r3, [pc, #76]	; (80082f8 <HAL_RCC_MCOConfig+0xc8>)
 80082aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80082ae:	f003 0304 	and.w	r3, r3, #4
 80082b2:	617b      	str	r3, [r7, #20]
 80082b4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80082b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082bc:	2302      	movs	r3, #2
 80082be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082c0:	2303      	movs	r3, #3
 80082c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082c4:	2300      	movs	r3, #0
 80082c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80082c8:	2300      	movs	r3, #0
 80082ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80082cc:	f107 031c 	add.w	r3, r7, #28
 80082d0:	4619      	mov	r1, r3
 80082d2:	480b      	ldr	r0, [pc, #44]	; (8008300 <HAL_RCC_MCOConfig+0xd0>)
 80082d4:	f7fd fc5e 	bl	8005b94 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80082d8:	4b07      	ldr	r3, [pc, #28]	; (80082f8 <HAL_RCC_MCOConfig+0xc8>)
 80082da:	691b      	ldr	r3, [r3, #16]
 80082dc:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	01d9      	lsls	r1, r3, #7
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	430b      	orrs	r3, r1
 80082e8:	4903      	ldr	r1, [pc, #12]	; (80082f8 <HAL_RCC_MCOConfig+0xc8>)
 80082ea:	4313      	orrs	r3, r2
 80082ec:	610b      	str	r3, [r1, #16]
}
 80082ee:	bf00      	nop
 80082f0:	3730      	adds	r7, #48	; 0x30
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	58024400 	.word	0x58024400
 80082fc:	58020000 	.word	0x58020000
 8008300:	58020800 	.word	0x58020800

08008304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008304:	b480      	push	{r7}
 8008306:	b089      	sub	sp, #36	; 0x24
 8008308:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800830a:	4bb3      	ldr	r3, [pc, #716]	; (80085d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008312:	2b18      	cmp	r3, #24
 8008314:	f200 8155 	bhi.w	80085c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8008318:	a201      	add	r2, pc, #4	; (adr r2, 8008320 <HAL_RCC_GetSysClockFreq+0x1c>)
 800831a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831e:	bf00      	nop
 8008320:	08008385 	.word	0x08008385
 8008324:	080085c3 	.word	0x080085c3
 8008328:	080085c3 	.word	0x080085c3
 800832c:	080085c3 	.word	0x080085c3
 8008330:	080085c3 	.word	0x080085c3
 8008334:	080085c3 	.word	0x080085c3
 8008338:	080085c3 	.word	0x080085c3
 800833c:	080085c3 	.word	0x080085c3
 8008340:	080083ab 	.word	0x080083ab
 8008344:	080085c3 	.word	0x080085c3
 8008348:	080085c3 	.word	0x080085c3
 800834c:	080085c3 	.word	0x080085c3
 8008350:	080085c3 	.word	0x080085c3
 8008354:	080085c3 	.word	0x080085c3
 8008358:	080085c3 	.word	0x080085c3
 800835c:	080085c3 	.word	0x080085c3
 8008360:	080083b1 	.word	0x080083b1
 8008364:	080085c3 	.word	0x080085c3
 8008368:	080085c3 	.word	0x080085c3
 800836c:	080085c3 	.word	0x080085c3
 8008370:	080085c3 	.word	0x080085c3
 8008374:	080085c3 	.word	0x080085c3
 8008378:	080085c3 	.word	0x080085c3
 800837c:	080085c3 	.word	0x080085c3
 8008380:	080083b7 	.word	0x080083b7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008384:	4b94      	ldr	r3, [pc, #592]	; (80085d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 0320 	and.w	r3, r3, #32
 800838c:	2b00      	cmp	r3, #0
 800838e:	d009      	beq.n	80083a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008390:	4b91      	ldr	r3, [pc, #580]	; (80085d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	08db      	lsrs	r3, r3, #3
 8008396:	f003 0303 	and.w	r3, r3, #3
 800839a:	4a90      	ldr	r2, [pc, #576]	; (80085dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800839c:	fa22 f303 	lsr.w	r3, r2, r3
 80083a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80083a2:	e111      	b.n	80085c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80083a4:	4b8d      	ldr	r3, [pc, #564]	; (80085dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80083a6:	61bb      	str	r3, [r7, #24]
    break;
 80083a8:	e10e      	b.n	80085c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80083aa:	4b8d      	ldr	r3, [pc, #564]	; (80085e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80083ac:	61bb      	str	r3, [r7, #24]
    break;
 80083ae:	e10b      	b.n	80085c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80083b0:	4b8c      	ldr	r3, [pc, #560]	; (80085e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80083b2:	61bb      	str	r3, [r7, #24]
    break;
 80083b4:	e108      	b.n	80085c8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80083b6:	4b88      	ldr	r3, [pc, #544]	; (80085d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ba:	f003 0303 	and.w	r3, r3, #3
 80083be:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80083c0:	4b85      	ldr	r3, [pc, #532]	; (80085d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c4:	091b      	lsrs	r3, r3, #4
 80083c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083ca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80083cc:	4b82      	ldr	r3, [pc, #520]	; (80085d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d0:	f003 0301 	and.w	r3, r3, #1
 80083d4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80083d6:	4b80      	ldr	r3, [pc, #512]	; (80085d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083da:	08db      	lsrs	r3, r3, #3
 80083dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	fb02 f303 	mul.w	r3, r2, r3
 80083e6:	ee07 3a90 	vmov	s15, r3
 80083ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ee:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f000 80e1 	beq.w	80085bc <HAL_RCC_GetSysClockFreq+0x2b8>
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	f000 8083 	beq.w	8008508 <HAL_RCC_GetSysClockFreq+0x204>
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	2b02      	cmp	r3, #2
 8008406:	f200 80a1 	bhi.w	800854c <HAL_RCC_GetSysClockFreq+0x248>
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d003      	beq.n	8008418 <HAL_RCC_GetSysClockFreq+0x114>
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	2b01      	cmp	r3, #1
 8008414:	d056      	beq.n	80084c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008416:	e099      	b.n	800854c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008418:	4b6f      	ldr	r3, [pc, #444]	; (80085d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 0320 	and.w	r3, r3, #32
 8008420:	2b00      	cmp	r3, #0
 8008422:	d02d      	beq.n	8008480 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008424:	4b6c      	ldr	r3, [pc, #432]	; (80085d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	08db      	lsrs	r3, r3, #3
 800842a:	f003 0303 	and.w	r3, r3, #3
 800842e:	4a6b      	ldr	r2, [pc, #428]	; (80085dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008430:	fa22 f303 	lsr.w	r3, r2, r3
 8008434:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	ee07 3a90 	vmov	s15, r3
 800843c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	ee07 3a90 	vmov	s15, r3
 8008446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800844a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800844e:	4b62      	ldr	r3, [pc, #392]	; (80085d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008456:	ee07 3a90 	vmov	s15, r3
 800845a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800845e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008462:	eddf 5a61 	vldr	s11, [pc, #388]	; 80085e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800846a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800846e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800847a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800847e:	e087      	b.n	8008590 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	ee07 3a90 	vmov	s15, r3
 8008486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800848a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80085ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800848e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008492:	4b51      	ldr	r3, [pc, #324]	; (80085d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800849a:	ee07 3a90 	vmov	s15, r3
 800849e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80084a6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80085e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80084aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084c2:	e065      	b.n	8008590 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	ee07 3a90 	vmov	s15, r3
 80084ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ce:	eddf 6a48 	vldr	s13, [pc, #288]	; 80085f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80084d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084d6:	4b40      	ldr	r3, [pc, #256]	; (80085d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084de:	ee07 3a90 	vmov	s15, r3
 80084e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80084ea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80085e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80084ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008502:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008506:	e043      	b.n	8008590 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	ee07 3a90 	vmov	s15, r3
 800850e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008512:	eddf 6a38 	vldr	s13, [pc, #224]	; 80085f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800851a:	4b2f      	ldr	r3, [pc, #188]	; (80085d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800851c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800851e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008522:	ee07 3a90 	vmov	s15, r3
 8008526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800852a:	ed97 6a02 	vldr	s12, [r7, #8]
 800852e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80085e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800853a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800853e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008546:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800854a:	e021      	b.n	8008590 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	ee07 3a90 	vmov	s15, r3
 8008552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008556:	eddf 6a26 	vldr	s13, [pc, #152]	; 80085f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800855a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800855e:	4b1e      	ldr	r3, [pc, #120]	; (80085d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008566:	ee07 3a90 	vmov	s15, r3
 800856a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800856e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008572:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80085e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800857a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800857e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800858a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800858e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008590:	4b11      	ldr	r3, [pc, #68]	; (80085d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008594:	0a5b      	lsrs	r3, r3, #9
 8008596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800859a:	3301      	adds	r3, #1
 800859c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	ee07 3a90 	vmov	s15, r3
 80085a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80085a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80085ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085b4:	ee17 3a90 	vmov	r3, s15
 80085b8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80085ba:	e005      	b.n	80085c8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80085bc:	2300      	movs	r3, #0
 80085be:	61bb      	str	r3, [r7, #24]
    break;
 80085c0:	e002      	b.n	80085c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80085c2:	4b07      	ldr	r3, [pc, #28]	; (80085e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80085c4:	61bb      	str	r3, [r7, #24]
    break;
 80085c6:	bf00      	nop
  }

  return sysclockfreq;
 80085c8:	69bb      	ldr	r3, [r7, #24]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3724      	adds	r7, #36	; 0x24
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr
 80085d6:	bf00      	nop
 80085d8:	58024400 	.word	0x58024400
 80085dc:	03d09000 	.word	0x03d09000
 80085e0:	003d0900 	.word	0x003d0900
 80085e4:	007a1200 	.word	0x007a1200
 80085e8:	46000000 	.word	0x46000000
 80085ec:	4c742400 	.word	0x4c742400
 80085f0:	4a742400 	.word	0x4a742400
 80085f4:	4af42400 	.word	0x4af42400

080085f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80085fe:	f7ff fe81 	bl	8008304 <HAL_RCC_GetSysClockFreq>
 8008602:	4602      	mov	r2, r0
 8008604:	4b10      	ldr	r3, [pc, #64]	; (8008648 <HAL_RCC_GetHCLKFreq+0x50>)
 8008606:	699b      	ldr	r3, [r3, #24]
 8008608:	0a1b      	lsrs	r3, r3, #8
 800860a:	f003 030f 	and.w	r3, r3, #15
 800860e:	490f      	ldr	r1, [pc, #60]	; (800864c <HAL_RCC_GetHCLKFreq+0x54>)
 8008610:	5ccb      	ldrb	r3, [r1, r3]
 8008612:	f003 031f 	and.w	r3, r3, #31
 8008616:	fa22 f303 	lsr.w	r3, r2, r3
 800861a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800861c:	4b0a      	ldr	r3, [pc, #40]	; (8008648 <HAL_RCC_GetHCLKFreq+0x50>)
 800861e:	699b      	ldr	r3, [r3, #24]
 8008620:	f003 030f 	and.w	r3, r3, #15
 8008624:	4a09      	ldr	r2, [pc, #36]	; (800864c <HAL_RCC_GetHCLKFreq+0x54>)
 8008626:	5cd3      	ldrb	r3, [r2, r3]
 8008628:	f003 031f 	and.w	r3, r3, #31
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	fa22 f303 	lsr.w	r3, r2, r3
 8008632:	4a07      	ldr	r2, [pc, #28]	; (8008650 <HAL_RCC_GetHCLKFreq+0x58>)
 8008634:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008636:	4a07      	ldr	r2, [pc, #28]	; (8008654 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800863c:	4b04      	ldr	r3, [pc, #16]	; (8008650 <HAL_RCC_GetHCLKFreq+0x58>)
 800863e:	681b      	ldr	r3, [r3, #0]
}
 8008640:	4618      	mov	r0, r3
 8008642:	3708      	adds	r7, #8
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}
 8008648:	58024400 	.word	0x58024400
 800864c:	080110cc 	.word	0x080110cc
 8008650:	24000004 	.word	0x24000004
 8008654:	24000000 	.word	0x24000000

08008658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800865c:	f7ff ffcc 	bl	80085f8 <HAL_RCC_GetHCLKFreq>
 8008660:	4602      	mov	r2, r0
 8008662:	4b06      	ldr	r3, [pc, #24]	; (800867c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008664:	69db      	ldr	r3, [r3, #28]
 8008666:	091b      	lsrs	r3, r3, #4
 8008668:	f003 0307 	and.w	r3, r3, #7
 800866c:	4904      	ldr	r1, [pc, #16]	; (8008680 <HAL_RCC_GetPCLK1Freq+0x28>)
 800866e:	5ccb      	ldrb	r3, [r1, r3]
 8008670:	f003 031f 	and.w	r3, r3, #31
 8008674:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008678:	4618      	mov	r0, r3
 800867a:	bd80      	pop	{r7, pc}
 800867c:	58024400 	.word	0x58024400
 8008680:	080110cc 	.word	0x080110cc

08008684 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008688:	f7ff ffb6 	bl	80085f8 <HAL_RCC_GetHCLKFreq>
 800868c:	4602      	mov	r2, r0
 800868e:	4b06      	ldr	r3, [pc, #24]	; (80086a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008690:	69db      	ldr	r3, [r3, #28]
 8008692:	0a1b      	lsrs	r3, r3, #8
 8008694:	f003 0307 	and.w	r3, r3, #7
 8008698:	4904      	ldr	r1, [pc, #16]	; (80086ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800869a:	5ccb      	ldrb	r3, [r1, r3]
 800869c:	f003 031f 	and.w	r3, r3, #31
 80086a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	58024400 	.word	0x58024400
 80086ac:	080110cc 	.word	0x080110cc

080086b0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b086      	sub	sp, #24
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80086b8:	2300      	movs	r3, #0
 80086ba:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80086bc:	2300      	movs	r3, #0
 80086be:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d03f      	beq.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086d4:	d02a      	beq.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80086d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086da:	d824      	bhi.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80086dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086e0:	d018      	beq.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80086e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086e6:	d81e      	bhi.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d003      	beq.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80086ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086f0:	d007      	beq.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80086f2:	e018      	b.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086f4:	4ba3      	ldr	r3, [pc, #652]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80086f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f8:	4aa2      	ldr	r2, [pc, #648]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80086fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008700:	e015      	b.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	3304      	adds	r3, #4
 8008706:	2102      	movs	r1, #2
 8008708:	4618      	mov	r0, r3
 800870a:	f001 fff9 	bl	800a700 <RCCEx_PLL2_Config>
 800870e:	4603      	mov	r3, r0
 8008710:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008712:	e00c      	b.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	3324      	adds	r3, #36	; 0x24
 8008718:	2102      	movs	r1, #2
 800871a:	4618      	mov	r0, r3
 800871c:	f002 f8a2 	bl	800a864 <RCCEx_PLL3_Config>
 8008720:	4603      	mov	r3, r0
 8008722:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008724:	e003      	b.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	75fb      	strb	r3, [r7, #23]
      break;
 800872a:	e000      	b.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800872c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800872e:	7dfb      	ldrb	r3, [r7, #23]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d109      	bne.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008734:	4b93      	ldr	r3, [pc, #588]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008738:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008740:	4990      	ldr	r1, [pc, #576]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008742:	4313      	orrs	r3, r2
 8008744:	650b      	str	r3, [r1, #80]	; 0x50
 8008746:	e001      	b.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008748:	7dfb      	ldrb	r3, [r7, #23]
 800874a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008754:	2b00      	cmp	r3, #0
 8008756:	d03d      	beq.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800875c:	2b04      	cmp	r3, #4
 800875e:	d826      	bhi.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008760:	a201      	add	r2, pc, #4	; (adr r2, 8008768 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008766:	bf00      	nop
 8008768:	0800877d 	.word	0x0800877d
 800876c:	0800878b 	.word	0x0800878b
 8008770:	0800879d 	.word	0x0800879d
 8008774:	080087b5 	.word	0x080087b5
 8008778:	080087b5 	.word	0x080087b5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800877c:	4b81      	ldr	r3, [pc, #516]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800877e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008780:	4a80      	ldr	r2, [pc, #512]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008786:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008788:	e015      	b.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	3304      	adds	r3, #4
 800878e:	2100      	movs	r1, #0
 8008790:	4618      	mov	r0, r3
 8008792:	f001 ffb5 	bl	800a700 <RCCEx_PLL2_Config>
 8008796:	4603      	mov	r3, r0
 8008798:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800879a:	e00c      	b.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	3324      	adds	r3, #36	; 0x24
 80087a0:	2100      	movs	r1, #0
 80087a2:	4618      	mov	r0, r3
 80087a4:	f002 f85e 	bl	800a864 <RCCEx_PLL3_Config>
 80087a8:	4603      	mov	r3, r0
 80087aa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80087ac:	e003      	b.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	75fb      	strb	r3, [r7, #23]
      break;
 80087b2:	e000      	b.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80087b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087b6:	7dfb      	ldrb	r3, [r7, #23]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d109      	bne.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80087bc:	4b71      	ldr	r3, [pc, #452]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80087be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087c0:	f023 0207 	bic.w	r2, r3, #7
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c8:	496e      	ldr	r1, [pc, #440]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80087ca:	4313      	orrs	r3, r2
 80087cc:	650b      	str	r3, [r1, #80]	; 0x50
 80087ce:	e001      	b.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087d0:	7dfb      	ldrb	r3, [r7, #23]
 80087d2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d042      	beq.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087e8:	d02b      	beq.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80087ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087ee:	d825      	bhi.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80087f0:	2bc0      	cmp	r3, #192	; 0xc0
 80087f2:	d028      	beq.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80087f4:	2bc0      	cmp	r3, #192	; 0xc0
 80087f6:	d821      	bhi.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80087f8:	2b80      	cmp	r3, #128	; 0x80
 80087fa:	d016      	beq.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80087fc:	2b80      	cmp	r3, #128	; 0x80
 80087fe:	d81d      	bhi.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008800:	2b00      	cmp	r3, #0
 8008802:	d002      	beq.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008804:	2b40      	cmp	r3, #64	; 0x40
 8008806:	d007      	beq.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008808:	e018      	b.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800880a:	4b5e      	ldr	r3, [pc, #376]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800880c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880e:	4a5d      	ldr	r2, [pc, #372]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008814:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008816:	e017      	b.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	3304      	adds	r3, #4
 800881c:	2100      	movs	r1, #0
 800881e:	4618      	mov	r0, r3
 8008820:	f001 ff6e 	bl	800a700 <RCCEx_PLL2_Config>
 8008824:	4603      	mov	r3, r0
 8008826:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008828:	e00e      	b.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	3324      	adds	r3, #36	; 0x24
 800882e:	2100      	movs	r1, #0
 8008830:	4618      	mov	r0, r3
 8008832:	f002 f817 	bl	800a864 <RCCEx_PLL3_Config>
 8008836:	4603      	mov	r3, r0
 8008838:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800883a:	e005      	b.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	75fb      	strb	r3, [r7, #23]
      break;
 8008840:	e002      	b.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008842:	bf00      	nop
 8008844:	e000      	b.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008846:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008848:	7dfb      	ldrb	r3, [r7, #23]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d109      	bne.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800884e:	4b4d      	ldr	r3, [pc, #308]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008852:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800885a:	494a      	ldr	r1, [pc, #296]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800885c:	4313      	orrs	r3, r2
 800885e:	650b      	str	r3, [r1, #80]	; 0x50
 8008860:	e001      	b.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008862:	7dfb      	ldrb	r3, [r7, #23]
 8008864:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800886e:	2b00      	cmp	r3, #0
 8008870:	d049      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008878:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800887c:	d030      	beq.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800887e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008882:	d82a      	bhi.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008884:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008888:	d02c      	beq.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800888a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800888e:	d824      	bhi.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008890:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008894:	d018      	beq.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008896:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800889a:	d81e      	bhi.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800889c:	2b00      	cmp	r3, #0
 800889e:	d003      	beq.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80088a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80088a4:	d007      	beq.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80088a6:	e018      	b.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088a8:	4b36      	ldr	r3, [pc, #216]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80088aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ac:	4a35      	ldr	r2, [pc, #212]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80088ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80088b4:	e017      	b.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	3304      	adds	r3, #4
 80088ba:	2100      	movs	r1, #0
 80088bc:	4618      	mov	r0, r3
 80088be:	f001 ff1f 	bl	800a700 <RCCEx_PLL2_Config>
 80088c2:	4603      	mov	r3, r0
 80088c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80088c6:	e00e      	b.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	3324      	adds	r3, #36	; 0x24
 80088cc:	2100      	movs	r1, #0
 80088ce:	4618      	mov	r0, r3
 80088d0:	f001 ffc8 	bl	800a864 <RCCEx_PLL3_Config>
 80088d4:	4603      	mov	r3, r0
 80088d6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80088d8:	e005      	b.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	75fb      	strb	r3, [r7, #23]
      break;
 80088de:	e002      	b.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80088e0:	bf00      	nop
 80088e2:	e000      	b.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80088e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088e6:	7dfb      	ldrb	r3, [r7, #23]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d10a      	bne.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80088ec:	4b25      	ldr	r3, [pc, #148]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80088ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088f0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80088fa:	4922      	ldr	r1, [pc, #136]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80088fc:	4313      	orrs	r3, r2
 80088fe:	658b      	str	r3, [r1, #88]	; 0x58
 8008900:	e001      	b.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008902:	7dfb      	ldrb	r3, [r7, #23]
 8008904:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800890e:	2b00      	cmp	r3, #0
 8008910:	d04b      	beq.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008918:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800891c:	d030      	beq.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800891e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008922:	d82a      	bhi.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008924:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008928:	d02e      	beq.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800892a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800892e:	d824      	bhi.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008930:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008934:	d018      	beq.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008936:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800893a:	d81e      	bhi.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800893c:	2b00      	cmp	r3, #0
 800893e:	d003      	beq.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008940:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008944:	d007      	beq.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008946:	e018      	b.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008948:	4b0e      	ldr	r3, [pc, #56]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800894a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894c:	4a0d      	ldr	r2, [pc, #52]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800894e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008952:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008954:	e019      	b.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	3304      	adds	r3, #4
 800895a:	2100      	movs	r1, #0
 800895c:	4618      	mov	r0, r3
 800895e:	f001 fecf 	bl	800a700 <RCCEx_PLL2_Config>
 8008962:	4603      	mov	r3, r0
 8008964:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008966:	e010      	b.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	3324      	adds	r3, #36	; 0x24
 800896c:	2100      	movs	r1, #0
 800896e:	4618      	mov	r0, r3
 8008970:	f001 ff78 	bl	800a864 <RCCEx_PLL3_Config>
 8008974:	4603      	mov	r3, r0
 8008976:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008978:	e007      	b.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	75fb      	strb	r3, [r7, #23]
      break;
 800897e:	e004      	b.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8008980:	bf00      	nop
 8008982:	e002      	b.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008984:	58024400 	.word	0x58024400
      break;
 8008988:	bf00      	nop
    }

    if(ret == HAL_OK)
 800898a:	7dfb      	ldrb	r3, [r7, #23]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d10a      	bne.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008990:	4b99      	ldr	r3, [pc, #612]	; (8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008994:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800899e:	4996      	ldr	r1, [pc, #600]	; (8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80089a0:	4313      	orrs	r3, r2
 80089a2:	658b      	str	r3, [r1, #88]	; 0x58
 80089a4:	e001      	b.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089a6:	7dfb      	ldrb	r3, [r7, #23]
 80089a8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d032      	beq.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089ba:	2b30      	cmp	r3, #48	; 0x30
 80089bc:	d01c      	beq.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80089be:	2b30      	cmp	r3, #48	; 0x30
 80089c0:	d817      	bhi.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80089c2:	2b20      	cmp	r3, #32
 80089c4:	d00c      	beq.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80089c6:	2b20      	cmp	r3, #32
 80089c8:	d813      	bhi.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d016      	beq.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80089ce:	2b10      	cmp	r3, #16
 80089d0:	d10f      	bne.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089d2:	4b89      	ldr	r3, [pc, #548]	; (8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80089d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d6:	4a88      	ldr	r2, [pc, #544]	; (8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80089d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80089de:	e00e      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	3304      	adds	r3, #4
 80089e4:	2102      	movs	r1, #2
 80089e6:	4618      	mov	r0, r3
 80089e8:	f001 fe8a 	bl	800a700 <RCCEx_PLL2_Config>
 80089ec:	4603      	mov	r3, r0
 80089ee:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80089f0:	e005      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	75fb      	strb	r3, [r7, #23]
      break;
 80089f6:	e002      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80089f8:	bf00      	nop
 80089fa:	e000      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80089fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089fe:	7dfb      	ldrb	r3, [r7, #23]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d109      	bne.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008a04:	4b7c      	ldr	r3, [pc, #496]	; (8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a10:	4979      	ldr	r1, [pc, #484]	; (8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008a12:	4313      	orrs	r3, r2
 8008a14:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008a16:	e001      	b.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a18:	7dfb      	ldrb	r3, [r7, #23]
 8008a1a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d047      	beq.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a30:	d030      	beq.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008a32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a36:	d82a      	bhi.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008a38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a3c:	d02c      	beq.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8008a3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a42:	d824      	bhi.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a48:	d018      	beq.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8008a4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a4e:	d81e      	bhi.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d003      	beq.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8008a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a58:	d007      	beq.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8008a5a:	e018      	b.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a5c:	4b66      	ldr	r3, [pc, #408]	; (8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a60:	4a65      	ldr	r2, [pc, #404]	; (8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008a68:	e017      	b.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	3304      	adds	r3, #4
 8008a6e:	2100      	movs	r1, #0
 8008a70:	4618      	mov	r0, r3
 8008a72:	f001 fe45 	bl	800a700 <RCCEx_PLL2_Config>
 8008a76:	4603      	mov	r3, r0
 8008a78:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008a7a:	e00e      	b.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	3324      	adds	r3, #36	; 0x24
 8008a80:	2100      	movs	r1, #0
 8008a82:	4618      	mov	r0, r3
 8008a84:	f001 feee 	bl	800a864 <RCCEx_PLL3_Config>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008a8c:	e005      	b.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	75fb      	strb	r3, [r7, #23]
      break;
 8008a92:	e002      	b.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008a94:	bf00      	nop
 8008a96:	e000      	b.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008a98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a9a:	7dfb      	ldrb	r3, [r7, #23]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d109      	bne.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008aa0:	4b55      	ldr	r3, [pc, #340]	; (8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aa4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008aac:	4952      	ldr	r1, [pc, #328]	; (8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	650b      	str	r3, [r1, #80]	; 0x50
 8008ab2:	e001      	b.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ab4:	7dfb      	ldrb	r3, [r7, #23]
 8008ab6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d049      	beq.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008acc:	d02e      	beq.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008ace:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ad2:	d828      	bhi.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008ad4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ad8:	d02a      	beq.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8008ada:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ade:	d822      	bhi.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008ae0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008ae4:	d026      	beq.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8008ae6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008aea:	d81c      	bhi.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008aec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008af0:	d010      	beq.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8008af2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008af6:	d816      	bhi.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d01d      	beq.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8008afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b00:	d111      	bne.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	3304      	adds	r3, #4
 8008b06:	2101      	movs	r1, #1
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f001 fdf9 	bl	800a700 <RCCEx_PLL2_Config>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008b12:	e012      	b.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	3324      	adds	r3, #36	; 0x24
 8008b18:	2101      	movs	r1, #1
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f001 fea2 	bl	800a864 <RCCEx_PLL3_Config>
 8008b20:	4603      	mov	r3, r0
 8008b22:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008b24:	e009      	b.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	75fb      	strb	r3, [r7, #23]
      break;
 8008b2a:	e006      	b.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008b2c:	bf00      	nop
 8008b2e:	e004      	b.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008b30:	bf00      	nop
 8008b32:	e002      	b.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008b34:	bf00      	nop
 8008b36:	e000      	b.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008b38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b3a:	7dfb      	ldrb	r3, [r7, #23]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d109      	bne.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008b40:	4b2d      	ldr	r3, [pc, #180]	; (8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b44:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b4c:	492a      	ldr	r1, [pc, #168]	; (8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	650b      	str	r3, [r1, #80]	; 0x50
 8008b52:	e001      	b.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b54:	7dfb      	ldrb	r3, [r7, #23]
 8008b56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d04d      	beq.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008b6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b6e:	d02e      	beq.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8008b70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b74:	d828      	bhi.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b7a:	d02a      	beq.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b80:	d822      	bhi.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008b82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008b86:	d026      	beq.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8008b88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008b8c:	d81c      	bhi.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008b8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b92:	d010      	beq.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008b94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b98:	d816      	bhi.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d01d      	beq.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8008b9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ba2:	d111      	bne.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	3304      	adds	r3, #4
 8008ba8:	2101      	movs	r1, #1
 8008baa:	4618      	mov	r0, r3
 8008bac:	f001 fda8 	bl	800a700 <RCCEx_PLL2_Config>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008bb4:	e012      	b.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	3324      	adds	r3, #36	; 0x24
 8008bba:	2101      	movs	r1, #1
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f001 fe51 	bl	800a864 <RCCEx_PLL3_Config>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008bc6:	e009      	b.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	75fb      	strb	r3, [r7, #23]
      break;
 8008bcc:	e006      	b.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008bce:	bf00      	nop
 8008bd0:	e004      	b.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008bd2:	bf00      	nop
 8008bd4:	e002      	b.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008bd6:	bf00      	nop
 8008bd8:	e000      	b.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008bda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bdc:	7dfb      	ldrb	r3, [r7, #23]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d10c      	bne.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008be2:	4b05      	ldr	r3, [pc, #20]	; (8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008be6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008bf0:	4901      	ldr	r1, [pc, #4]	; (8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	658b      	str	r3, [r1, #88]	; 0x58
 8008bf6:	e003      	b.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008bf8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bfc:	7dfb      	ldrb	r3, [r7, #23]
 8008bfe:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d02f      	beq.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c14:	d00e      	beq.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8008c16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c1a:	d814      	bhi.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d015      	beq.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8008c20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c24:	d10f      	bne.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c26:	4baf      	ldr	r3, [pc, #700]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2a:	4aae      	ldr	r2, [pc, #696]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008c32:	e00c      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	3304      	adds	r3, #4
 8008c38:	2101      	movs	r1, #1
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f001 fd60 	bl	800a700 <RCCEx_PLL2_Config>
 8008c40:	4603      	mov	r3, r0
 8008c42:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008c44:	e003      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	75fb      	strb	r3, [r7, #23]
      break;
 8008c4a:	e000      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8008c4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c4e:	7dfb      	ldrb	r3, [r7, #23]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d109      	bne.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008c54:	4ba3      	ldr	r3, [pc, #652]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c58:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c60:	49a0      	ldr	r1, [pc, #640]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c62:	4313      	orrs	r3, r2
 8008c64:	650b      	str	r3, [r1, #80]	; 0x50
 8008c66:	e001      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c68:	7dfb      	ldrb	r3, [r7, #23]
 8008c6a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d032      	beq.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c7c:	2b03      	cmp	r3, #3
 8008c7e:	d81b      	bhi.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008c80:	a201      	add	r2, pc, #4	; (adr r2, 8008c88 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8008c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c86:	bf00      	nop
 8008c88:	08008cbf 	.word	0x08008cbf
 8008c8c:	08008c99 	.word	0x08008c99
 8008c90:	08008ca7 	.word	0x08008ca7
 8008c94:	08008cbf 	.word	0x08008cbf
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c98:	4b92      	ldr	r3, [pc, #584]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9c:	4a91      	ldr	r2, [pc, #580]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ca2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008ca4:	e00c      	b.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	3304      	adds	r3, #4
 8008caa:	2102      	movs	r1, #2
 8008cac:	4618      	mov	r0, r3
 8008cae:	f001 fd27 	bl	800a700 <RCCEx_PLL2_Config>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008cb6:	e003      	b.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	75fb      	strb	r3, [r7, #23]
      break;
 8008cbc:	e000      	b.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008cbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cc0:	7dfb      	ldrb	r3, [r7, #23]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d109      	bne.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008cc6:	4b87      	ldr	r3, [pc, #540]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cca:	f023 0203 	bic.w	r2, r3, #3
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cd2:	4984      	ldr	r1, [pc, #528]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008cd8:	e001      	b.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cda:	7dfb      	ldrb	r3, [r7, #23]
 8008cdc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	f000 8086 	beq.w	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008cec:	4b7e      	ldr	r3, [pc, #504]	; (8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a7d      	ldr	r2, [pc, #500]	; (8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cf6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008cf8:	f7f8 fe66 	bl	80019c8 <HAL_GetTick>
 8008cfc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008cfe:	e009      	b.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d00:	f7f8 fe62 	bl	80019c8 <HAL_GetTick>
 8008d04:	4602      	mov	r2, r0
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	1ad3      	subs	r3, r2, r3
 8008d0a:	2b64      	cmp	r3, #100	; 0x64
 8008d0c:	d902      	bls.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008d0e:	2303      	movs	r3, #3
 8008d10:	75fb      	strb	r3, [r7, #23]
        break;
 8008d12:	e005      	b.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d14:	4b74      	ldr	r3, [pc, #464]	; (8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d0ef      	beq.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008d20:	7dfb      	ldrb	r3, [r7, #23]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d166      	bne.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008d26:	4b6f      	ldr	r3, [pc, #444]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d30:	4053      	eors	r3, r2
 8008d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d013      	beq.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008d3a:	4b6a      	ldr	r3, [pc, #424]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d42:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008d44:	4b67      	ldr	r3, [pc, #412]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d48:	4a66      	ldr	r2, [pc, #408]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d4e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008d50:	4b64      	ldr	r3, [pc, #400]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d54:	4a63      	ldr	r2, [pc, #396]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d5a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008d5c:	4a61      	ldr	r2, [pc, #388]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d6c:	d115      	bne.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d6e:	f7f8 fe2b 	bl	80019c8 <HAL_GetTick>
 8008d72:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d74:	e00b      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d76:	f7f8 fe27 	bl	80019c8 <HAL_GetTick>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	1ad3      	subs	r3, r2, r3
 8008d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d902      	bls.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008d88:	2303      	movs	r3, #3
 8008d8a:	75fb      	strb	r3, [r7, #23]
            break;
 8008d8c:	e005      	b.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d8e:	4b55      	ldr	r3, [pc, #340]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d92:	f003 0302 	and.w	r3, r3, #2
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d0ed      	beq.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8008d9a:	7dfb      	ldrb	r3, [r7, #23]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d126      	bne.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008daa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008dae:	d10d      	bne.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008db0:	4b4c      	ldr	r3, [pc, #304]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008db2:	691b      	ldr	r3, [r3, #16]
 8008db4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008dbe:	0919      	lsrs	r1, r3, #4
 8008dc0:	4b4a      	ldr	r3, [pc, #296]	; (8008eec <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8008dc2:	400b      	ands	r3, r1
 8008dc4:	4947      	ldr	r1, [pc, #284]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	610b      	str	r3, [r1, #16]
 8008dca:	e005      	b.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008dcc:	4b45      	ldr	r3, [pc, #276]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	4a44      	ldr	r2, [pc, #272]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008dd2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008dd6:	6113      	str	r3, [r2, #16]
 8008dd8:	4b42      	ldr	r3, [pc, #264]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008dda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008de2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008de6:	493f      	ldr	r1, [pc, #252]	; (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008de8:	4313      	orrs	r3, r2
 8008dea:	670b      	str	r3, [r1, #112]	; 0x70
 8008dec:	e004      	b.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008dee:	7dfb      	ldrb	r3, [r7, #23]
 8008df0:	75bb      	strb	r3, [r7, #22]
 8008df2:	e001      	b.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008df4:	7dfb      	ldrb	r3, [r7, #23]
 8008df6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f003 0301 	and.w	r3, r3, #1
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f000 8085 	beq.w	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e0a:	2b28      	cmp	r3, #40	; 0x28
 8008e0c:	d866      	bhi.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008e0e:	a201      	add	r2, pc, #4	; (adr r2, 8008e14 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e14:	08008ef1 	.word	0x08008ef1
 8008e18:	08008edd 	.word	0x08008edd
 8008e1c:	08008edd 	.word	0x08008edd
 8008e20:	08008edd 	.word	0x08008edd
 8008e24:	08008edd 	.word	0x08008edd
 8008e28:	08008edd 	.word	0x08008edd
 8008e2c:	08008edd 	.word	0x08008edd
 8008e30:	08008edd 	.word	0x08008edd
 8008e34:	08008eb9 	.word	0x08008eb9
 8008e38:	08008edd 	.word	0x08008edd
 8008e3c:	08008edd 	.word	0x08008edd
 8008e40:	08008edd 	.word	0x08008edd
 8008e44:	08008edd 	.word	0x08008edd
 8008e48:	08008edd 	.word	0x08008edd
 8008e4c:	08008edd 	.word	0x08008edd
 8008e50:	08008edd 	.word	0x08008edd
 8008e54:	08008ecb 	.word	0x08008ecb
 8008e58:	08008edd 	.word	0x08008edd
 8008e5c:	08008edd 	.word	0x08008edd
 8008e60:	08008edd 	.word	0x08008edd
 8008e64:	08008edd 	.word	0x08008edd
 8008e68:	08008edd 	.word	0x08008edd
 8008e6c:	08008edd 	.word	0x08008edd
 8008e70:	08008edd 	.word	0x08008edd
 8008e74:	08008ef1 	.word	0x08008ef1
 8008e78:	08008edd 	.word	0x08008edd
 8008e7c:	08008edd 	.word	0x08008edd
 8008e80:	08008edd 	.word	0x08008edd
 8008e84:	08008edd 	.word	0x08008edd
 8008e88:	08008edd 	.word	0x08008edd
 8008e8c:	08008edd 	.word	0x08008edd
 8008e90:	08008edd 	.word	0x08008edd
 8008e94:	08008ef1 	.word	0x08008ef1
 8008e98:	08008edd 	.word	0x08008edd
 8008e9c:	08008edd 	.word	0x08008edd
 8008ea0:	08008edd 	.word	0x08008edd
 8008ea4:	08008edd 	.word	0x08008edd
 8008ea8:	08008edd 	.word	0x08008edd
 8008eac:	08008edd 	.word	0x08008edd
 8008eb0:	08008edd 	.word	0x08008edd
 8008eb4:	08008ef1 	.word	0x08008ef1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	3304      	adds	r3, #4
 8008ebc:	2101      	movs	r1, #1
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f001 fc1e 	bl	800a700 <RCCEx_PLL2_Config>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008ec8:	e013      	b.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	3324      	adds	r3, #36	; 0x24
 8008ece:	2101      	movs	r1, #1
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f001 fcc7 	bl	800a864 <RCCEx_PLL3_Config>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008eda:	e00a      	b.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008edc:	2301      	movs	r3, #1
 8008ede:	75fb      	strb	r3, [r7, #23]
      break;
 8008ee0:	e007      	b.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8008ee2:	bf00      	nop
 8008ee4:	58024400 	.word	0x58024400
 8008ee8:	58024800 	.word	0x58024800
 8008eec:	00ffffcf 	.word	0x00ffffcf
      break;
 8008ef0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ef2:	7dfb      	ldrb	r3, [r7, #23]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d109      	bne.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008ef8:	4b96      	ldr	r3, [pc, #600]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008efc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f04:	4993      	ldr	r1, [pc, #588]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008f06:	4313      	orrs	r3, r2
 8008f08:	654b      	str	r3, [r1, #84]	; 0x54
 8008f0a:	e001      	b.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f0c:	7dfb      	ldrb	r3, [r7, #23]
 8008f0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f003 0302 	and.w	r3, r3, #2
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d038      	beq.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f20:	2b05      	cmp	r3, #5
 8008f22:	d821      	bhi.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8008f24:	a201      	add	r2, pc, #4	; (adr r2, 8008f2c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8008f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f2a:	bf00      	nop
 8008f2c:	08008f6f 	.word	0x08008f6f
 8008f30:	08008f45 	.word	0x08008f45
 8008f34:	08008f57 	.word	0x08008f57
 8008f38:	08008f6f 	.word	0x08008f6f
 8008f3c:	08008f6f 	.word	0x08008f6f
 8008f40:	08008f6f 	.word	0x08008f6f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	3304      	adds	r3, #4
 8008f48:	2101      	movs	r1, #1
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f001 fbd8 	bl	800a700 <RCCEx_PLL2_Config>
 8008f50:	4603      	mov	r3, r0
 8008f52:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008f54:	e00c      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	3324      	adds	r3, #36	; 0x24
 8008f5a:	2101      	movs	r1, #1
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f001 fc81 	bl	800a864 <RCCEx_PLL3_Config>
 8008f62:	4603      	mov	r3, r0
 8008f64:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008f66:	e003      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8008f6c:	e000      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8008f6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f70:	7dfb      	ldrb	r3, [r7, #23]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d109      	bne.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008f76:	4b77      	ldr	r3, [pc, #476]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f7a:	f023 0207 	bic.w	r2, r3, #7
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f82:	4974      	ldr	r1, [pc, #464]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008f84:	4313      	orrs	r3, r2
 8008f86:	654b      	str	r3, [r1, #84]	; 0x54
 8008f88:	e001      	b.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f8a:	7dfb      	ldrb	r3, [r7, #23]
 8008f8c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f003 0304 	and.w	r3, r3, #4
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d03a      	beq.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fa0:	2b05      	cmp	r3, #5
 8008fa2:	d821      	bhi.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8008fa4:	a201      	add	r2, pc, #4	; (adr r2, 8008fac <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8008fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008faa:	bf00      	nop
 8008fac:	08008fef 	.word	0x08008fef
 8008fb0:	08008fc5 	.word	0x08008fc5
 8008fb4:	08008fd7 	.word	0x08008fd7
 8008fb8:	08008fef 	.word	0x08008fef
 8008fbc:	08008fef 	.word	0x08008fef
 8008fc0:	08008fef 	.word	0x08008fef
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	3304      	adds	r3, #4
 8008fc8:	2101      	movs	r1, #1
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f001 fb98 	bl	800a700 <RCCEx_PLL2_Config>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008fd4:	e00c      	b.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	3324      	adds	r3, #36	; 0x24
 8008fda:	2101      	movs	r1, #1
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f001 fc41 	bl	800a864 <RCCEx_PLL3_Config>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008fe6:	e003      	b.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	75fb      	strb	r3, [r7, #23]
      break;
 8008fec:	e000      	b.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8008fee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ff0:	7dfb      	ldrb	r3, [r7, #23]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d10a      	bne.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008ff6:	4b57      	ldr	r3, [pc, #348]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ffa:	f023 0207 	bic.w	r2, r3, #7
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009004:	4953      	ldr	r1, [pc, #332]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009006:	4313      	orrs	r3, r2
 8009008:	658b      	str	r3, [r1, #88]	; 0x58
 800900a:	e001      	b.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800900c:	7dfb      	ldrb	r3, [r7, #23]
 800900e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 0320 	and.w	r3, r3, #32
 8009018:	2b00      	cmp	r3, #0
 800901a:	d04b      	beq.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009022:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009026:	d02e      	beq.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009028:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800902c:	d828      	bhi.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800902e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009032:	d02a      	beq.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009038:	d822      	bhi.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800903a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800903e:	d026      	beq.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009040:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009044:	d81c      	bhi.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009046:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800904a:	d010      	beq.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800904c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009050:	d816      	bhi.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009052:	2b00      	cmp	r3, #0
 8009054:	d01d      	beq.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8009056:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800905a:	d111      	bne.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	3304      	adds	r3, #4
 8009060:	2100      	movs	r1, #0
 8009062:	4618      	mov	r0, r3
 8009064:	f001 fb4c 	bl	800a700 <RCCEx_PLL2_Config>
 8009068:	4603      	mov	r3, r0
 800906a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800906c:	e012      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	3324      	adds	r3, #36	; 0x24
 8009072:	2102      	movs	r1, #2
 8009074:	4618      	mov	r0, r3
 8009076:	f001 fbf5 	bl	800a864 <RCCEx_PLL3_Config>
 800907a:	4603      	mov	r3, r0
 800907c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800907e:	e009      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009080:	2301      	movs	r3, #1
 8009082:	75fb      	strb	r3, [r7, #23]
      break;
 8009084:	e006      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009086:	bf00      	nop
 8009088:	e004      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800908a:	bf00      	nop
 800908c:	e002      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800908e:	bf00      	nop
 8009090:	e000      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009092:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009094:	7dfb      	ldrb	r3, [r7, #23]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d10a      	bne.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800909a:	4b2e      	ldr	r3, [pc, #184]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800909c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800909e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090a8:	492a      	ldr	r1, [pc, #168]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80090aa:	4313      	orrs	r3, r2
 80090ac:	654b      	str	r3, [r1, #84]	; 0x54
 80090ae:	e001      	b.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090b0:	7dfb      	ldrb	r3, [r7, #23]
 80090b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d04d      	beq.n	800915c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80090c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80090ca:	d02e      	beq.n	800912a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80090cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80090d0:	d828      	bhi.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80090d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090d6:	d02a      	beq.n	800912e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80090d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090dc:	d822      	bhi.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80090de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80090e2:	d026      	beq.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80090e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80090e8:	d81c      	bhi.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80090ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090ee:	d010      	beq.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80090f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090f4:	d816      	bhi.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d01d      	beq.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80090fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090fe:	d111      	bne.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	3304      	adds	r3, #4
 8009104:	2100      	movs	r1, #0
 8009106:	4618      	mov	r0, r3
 8009108:	f001 fafa 	bl	800a700 <RCCEx_PLL2_Config>
 800910c:	4603      	mov	r3, r0
 800910e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009110:	e012      	b.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	3324      	adds	r3, #36	; 0x24
 8009116:	2102      	movs	r1, #2
 8009118:	4618      	mov	r0, r3
 800911a:	f001 fba3 	bl	800a864 <RCCEx_PLL3_Config>
 800911e:	4603      	mov	r3, r0
 8009120:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009122:	e009      	b.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009124:	2301      	movs	r3, #1
 8009126:	75fb      	strb	r3, [r7, #23]
      break;
 8009128:	e006      	b.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800912a:	bf00      	nop
 800912c:	e004      	b.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800912e:	bf00      	nop
 8009130:	e002      	b.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009132:	bf00      	nop
 8009134:	e000      	b.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009136:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009138:	7dfb      	ldrb	r3, [r7, #23]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d10c      	bne.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800913e:	4b05      	ldr	r3, [pc, #20]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009142:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800914c:	4901      	ldr	r1, [pc, #4]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800914e:	4313      	orrs	r3, r2
 8009150:	658b      	str	r3, [r1, #88]	; 0x58
 8009152:	e003      	b.n	800915c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009154:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009158:	7dfb      	ldrb	r3, [r7, #23]
 800915a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009164:	2b00      	cmp	r3, #0
 8009166:	d04b      	beq.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800916e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009172:	d02e      	beq.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009174:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009178:	d828      	bhi.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800917a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800917e:	d02a      	beq.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009184:	d822      	bhi.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009186:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800918a:	d026      	beq.n	80091da <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800918c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009190:	d81c      	bhi.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009192:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009196:	d010      	beq.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8009198:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800919c:	d816      	bhi.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d01d      	beq.n	80091de <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80091a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091a6:	d111      	bne.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	3304      	adds	r3, #4
 80091ac:	2100      	movs	r1, #0
 80091ae:	4618      	mov	r0, r3
 80091b0:	f001 faa6 	bl	800a700 <RCCEx_PLL2_Config>
 80091b4:	4603      	mov	r3, r0
 80091b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80091b8:	e012      	b.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	3324      	adds	r3, #36	; 0x24
 80091be:	2102      	movs	r1, #2
 80091c0:	4618      	mov	r0, r3
 80091c2:	f001 fb4f 	bl	800a864 <RCCEx_PLL3_Config>
 80091c6:	4603      	mov	r3, r0
 80091c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80091ca:	e009      	b.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091cc:	2301      	movs	r3, #1
 80091ce:	75fb      	strb	r3, [r7, #23]
      break;
 80091d0:	e006      	b.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80091d2:	bf00      	nop
 80091d4:	e004      	b.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80091d6:	bf00      	nop
 80091d8:	e002      	b.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80091da:	bf00      	nop
 80091dc:	e000      	b.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80091de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091e0:	7dfb      	ldrb	r3, [r7, #23]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d10a      	bne.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80091e6:	4b9d      	ldr	r3, [pc, #628]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80091e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80091f4:	4999      	ldr	r1, [pc, #612]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80091f6:	4313      	orrs	r3, r2
 80091f8:	658b      	str	r3, [r1, #88]	; 0x58
 80091fa:	e001      	b.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091fc:	7dfb      	ldrb	r3, [r7, #23]
 80091fe:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f003 0308 	and.w	r3, r3, #8
 8009208:	2b00      	cmp	r3, #0
 800920a:	d01a      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009216:	d10a      	bne.n	800922e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	3324      	adds	r3, #36	; 0x24
 800921c:	2102      	movs	r1, #2
 800921e:	4618      	mov	r0, r3
 8009220:	f001 fb20 	bl	800a864 <RCCEx_PLL3_Config>
 8009224:	4603      	mov	r3, r0
 8009226:	2b00      	cmp	r3, #0
 8009228:	d001      	beq.n	800922e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800922e:	4b8b      	ldr	r3, [pc, #556]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009232:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800923c:	4987      	ldr	r1, [pc, #540]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800923e:	4313      	orrs	r3, r2
 8009240:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f003 0310 	and.w	r3, r3, #16
 800924a:	2b00      	cmp	r3, #0
 800924c:	d01a      	beq.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009258:	d10a      	bne.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	3324      	adds	r3, #36	; 0x24
 800925e:	2102      	movs	r1, #2
 8009260:	4618      	mov	r0, r3
 8009262:	f001 faff 	bl	800a864 <RCCEx_PLL3_Config>
 8009266:	4603      	mov	r3, r0
 8009268:	2b00      	cmp	r3, #0
 800926a:	d001      	beq.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800926c:	2301      	movs	r3, #1
 800926e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009270:	4b7a      	ldr	r3, [pc, #488]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009274:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800927e:	4977      	ldr	r1, [pc, #476]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009280:	4313      	orrs	r3, r2
 8009282:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800928c:	2b00      	cmp	r3, #0
 800928e:	d034      	beq.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009296:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800929a:	d01d      	beq.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800929c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092a0:	d817      	bhi.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d003      	beq.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80092a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092aa:	d009      	beq.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80092ac:	e011      	b.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	3304      	adds	r3, #4
 80092b2:	2100      	movs	r1, #0
 80092b4:	4618      	mov	r0, r3
 80092b6:	f001 fa23 	bl	800a700 <RCCEx_PLL2_Config>
 80092ba:	4603      	mov	r3, r0
 80092bc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80092be:	e00c      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	3324      	adds	r3, #36	; 0x24
 80092c4:	2102      	movs	r1, #2
 80092c6:	4618      	mov	r0, r3
 80092c8:	f001 facc 	bl	800a864 <RCCEx_PLL3_Config>
 80092cc:	4603      	mov	r3, r0
 80092ce:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80092d0:	e003      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	75fb      	strb	r3, [r7, #23]
      break;
 80092d6:	e000      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80092d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092da:	7dfb      	ldrb	r3, [r7, #23]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d10a      	bne.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80092e0:	4b5e      	ldr	r3, [pc, #376]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80092e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80092ee:	495b      	ldr	r1, [pc, #364]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80092f0:	4313      	orrs	r3, r2
 80092f2:	658b      	str	r3, [r1, #88]	; 0x58
 80092f4:	e001      	b.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092f6:	7dfb      	ldrb	r3, [r7, #23]
 80092f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009302:	2b00      	cmp	r3, #0
 8009304:	d033      	beq.n	800936e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800930c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009310:	d01c      	beq.n	800934c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8009312:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009316:	d816      	bhi.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8009318:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800931c:	d003      	beq.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800931e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009322:	d007      	beq.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8009324:	e00f      	b.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009326:	4b4d      	ldr	r3, [pc, #308]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932a:	4a4c      	ldr	r2, [pc, #304]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800932c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009330:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009332:	e00c      	b.n	800934e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	3324      	adds	r3, #36	; 0x24
 8009338:	2101      	movs	r1, #1
 800933a:	4618      	mov	r0, r3
 800933c:	f001 fa92 	bl	800a864 <RCCEx_PLL3_Config>
 8009340:	4603      	mov	r3, r0
 8009342:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009344:	e003      	b.n	800934e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009346:	2301      	movs	r3, #1
 8009348:	75fb      	strb	r3, [r7, #23]
      break;
 800934a:	e000      	b.n	800934e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800934c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800934e:	7dfb      	ldrb	r3, [r7, #23]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d10a      	bne.n	800936a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009354:	4b41      	ldr	r3, [pc, #260]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009358:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009362:	493e      	ldr	r1, [pc, #248]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009364:	4313      	orrs	r3, r2
 8009366:	654b      	str	r3, [r1, #84]	; 0x54
 8009368:	e001      	b.n	800936e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800936a:	7dfb      	ldrb	r3, [r7, #23]
 800936c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009376:	2b00      	cmp	r3, #0
 8009378:	d029      	beq.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800937e:	2b00      	cmp	r3, #0
 8009380:	d003      	beq.n	800938a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8009382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009386:	d007      	beq.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8009388:	e00f      	b.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800938a:	4b34      	ldr	r3, [pc, #208]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800938c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800938e:	4a33      	ldr	r2, [pc, #204]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009394:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009396:	e00b      	b.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	3304      	adds	r3, #4
 800939c:	2102      	movs	r1, #2
 800939e:	4618      	mov	r0, r3
 80093a0:	f001 f9ae 	bl	800a700 <RCCEx_PLL2_Config>
 80093a4:	4603      	mov	r3, r0
 80093a6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80093a8:	e002      	b.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	75fb      	strb	r3, [r7, #23]
      break;
 80093ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093b0:	7dfb      	ldrb	r3, [r7, #23]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d109      	bne.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80093b6:	4b29      	ldr	r3, [pc, #164]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80093b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093c2:	4926      	ldr	r1, [pc, #152]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80093c4:	4313      	orrs	r3, r2
 80093c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80093c8:	e001      	b.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093ca:	7dfb      	ldrb	r3, [r7, #23]
 80093cc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d00a      	beq.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	3324      	adds	r3, #36	; 0x24
 80093de:	2102      	movs	r1, #2
 80093e0:	4618      	mov	r0, r3
 80093e2:	f001 fa3f 	bl	800a864 <RCCEx_PLL3_Config>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d001      	beq.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80093ec:	2301      	movs	r3, #1
 80093ee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d033      	beq.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009400:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009404:	d017      	beq.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009406:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800940a:	d811      	bhi.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800940c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009410:	d013      	beq.n	800943a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009412:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009416:	d80b      	bhi.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009418:	2b00      	cmp	r3, #0
 800941a:	d010      	beq.n	800943e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800941c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009420:	d106      	bne.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009422:	4b0e      	ldr	r3, [pc, #56]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009426:	4a0d      	ldr	r2, [pc, #52]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800942c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800942e:	e007      	b.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009430:	2301      	movs	r3, #1
 8009432:	75fb      	strb	r3, [r7, #23]
      break;
 8009434:	e004      	b.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009436:	bf00      	nop
 8009438:	e002      	b.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800943a:	bf00      	nop
 800943c:	e000      	b.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800943e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009440:	7dfb      	ldrb	r3, [r7, #23]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d10c      	bne.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009446:	4b05      	ldr	r3, [pc, #20]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800944a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009452:	4902      	ldr	r1, [pc, #8]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009454:	4313      	orrs	r3, r2
 8009456:	654b      	str	r3, [r1, #84]	; 0x54
 8009458:	e004      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800945a:	bf00      	nop
 800945c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009460:	7dfb      	ldrb	r3, [r7, #23]
 8009462:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800946c:	2b00      	cmp	r3, #0
 800946e:	d008      	beq.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009470:	4b31      	ldr	r3, [pc, #196]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009474:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800947c:	492e      	ldr	r1, [pc, #184]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800947e:	4313      	orrs	r3, r2
 8009480:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800948a:	2b00      	cmp	r3, #0
 800948c:	d009      	beq.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800948e:	4b2a      	ldr	r3, [pc, #168]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800949c:	4926      	ldr	r1, [pc, #152]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800949e:	4313      	orrs	r3, r2
 80094a0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d008      	beq.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80094ae:	4b22      	ldr	r3, [pc, #136]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80094b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094b2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094ba:	491f      	ldr	r1, [pc, #124]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80094bc:	4313      	orrs	r3, r2
 80094be:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d00d      	beq.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80094cc:	4b1a      	ldr	r3, [pc, #104]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80094ce:	691b      	ldr	r3, [r3, #16]
 80094d0:	4a19      	ldr	r2, [pc, #100]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80094d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80094d6:	6113      	str	r3, [r2, #16]
 80094d8:	4b17      	ldr	r3, [pc, #92]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80094da:	691a      	ldr	r2, [r3, #16]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80094e2:	4915      	ldr	r1, [pc, #84]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80094e4:	4313      	orrs	r3, r2
 80094e6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	da08      	bge.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80094f0:	4b11      	ldr	r3, [pc, #68]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80094f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094fc:	490e      	ldr	r1, [pc, #56]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80094fe:	4313      	orrs	r3, r2
 8009500:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800950a:	2b00      	cmp	r3, #0
 800950c:	d009      	beq.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800950e:	4b0a      	ldr	r3, [pc, #40]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009512:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800951c:	4906      	ldr	r1, [pc, #24]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800951e:	4313      	orrs	r3, r2
 8009520:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009522:	7dbb      	ldrb	r3, [r7, #22]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d101      	bne.n	800952c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8009528:	2300      	movs	r3, #0
 800952a:	e000      	b.n	800952e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800952c:	2301      	movs	r3, #1
}
 800952e:	4618      	mov	r0, r3
 8009530:	3718      	adds	r7, #24
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	58024400 	.word	0x58024400

0800953c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b090      	sub	sp, #64	; 0x40
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800954a:	f040 8095 	bne.w	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800954e:	4b97      	ldr	r3, [pc, #604]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009552:	f003 0307 	and.w	r3, r3, #7
 8009556:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955a:	2b04      	cmp	r3, #4
 800955c:	f200 8088 	bhi.w	8009670 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8009560:	a201      	add	r2, pc, #4	; (adr r2, 8009568 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8009562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009566:	bf00      	nop
 8009568:	0800957d 	.word	0x0800957d
 800956c:	080095a5 	.word	0x080095a5
 8009570:	080095cd 	.word	0x080095cd
 8009574:	08009669 	.word	0x08009669
 8009578:	080095f5 	.word	0x080095f5
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800957c:	4b8b      	ldr	r3, [pc, #556]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009584:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009588:	d108      	bne.n	800959c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800958a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800958e:	4618      	mov	r0, r3
 8009590:	f000 ff64 	bl	800a45c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8009594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009596:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009598:	f000 bc94 	b.w	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800959c:	2300      	movs	r3, #0
 800959e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095a0:	f000 bc90 	b.w	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095a4:	4b81      	ldr	r3, [pc, #516]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095b0:	d108      	bne.n	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095b2:	f107 0318 	add.w	r3, r7, #24
 80095b6:	4618      	mov	r0, r3
 80095b8:	f000 fca8 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80095bc:	69bb      	ldr	r3, [r7, #24]
 80095be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80095c0:	f000 bc80 	b.w	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80095c4:	2300      	movs	r3, #0
 80095c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095c8:	f000 bc7c 	b.w	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80095cc:	4b77      	ldr	r3, [pc, #476]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095d8:	d108      	bne.n	80095ec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095da:	f107 030c 	add.w	r3, r7, #12
 80095de:	4618      	mov	r0, r3
 80095e0:	f000 fde8 	bl	800a1b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80095e8:	f000 bc6c 	b.w	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80095ec:	2300      	movs	r3, #0
 80095ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095f0:	f000 bc68 	b.w	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80095f4:	4b6d      	ldr	r3, [pc, #436]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80095f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80095fc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80095fe:	4b6b      	ldr	r3, [pc, #428]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f003 0304 	and.w	r3, r3, #4
 8009606:	2b04      	cmp	r3, #4
 8009608:	d10c      	bne.n	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800960a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800960c:	2b00      	cmp	r3, #0
 800960e:	d109      	bne.n	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009610:	4b66      	ldr	r3, [pc, #408]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	08db      	lsrs	r3, r3, #3
 8009616:	f003 0303 	and.w	r3, r3, #3
 800961a:	4a65      	ldr	r2, [pc, #404]	; (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800961c:	fa22 f303 	lsr.w	r3, r2, r3
 8009620:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009622:	e01f      	b.n	8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009624:	4b61      	ldr	r3, [pc, #388]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800962c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009630:	d106      	bne.n	8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8009632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009634:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009638:	d102      	bne.n	8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800963a:	4b5e      	ldr	r3, [pc, #376]	; (80097b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800963c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800963e:	e011      	b.n	8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009640:	4b5a      	ldr	r3, [pc, #360]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009648:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800964c:	d106      	bne.n	800965c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800964e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009650:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009654:	d102      	bne.n	800965c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009656:	4b58      	ldr	r3, [pc, #352]	; (80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009658:	63fb      	str	r3, [r7, #60]	; 0x3c
 800965a:	e003      	b.n	8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800965c:	2300      	movs	r3, #0
 800965e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009660:	f000 bc30 	b.w	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009664:	f000 bc2e 	b.w	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009668:	4b54      	ldr	r3, [pc, #336]	; (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800966a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800966c:	f000 bc2a 	b.w	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8009670:	2300      	movs	r3, #0
 8009672:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009674:	f000 bc26 	b.w	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800967e:	f040 809f 	bne.w	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8009682:	4b4a      	ldr	r3, [pc, #296]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009686:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800968a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800968c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009692:	d04d      	beq.n	8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8009694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800969a:	f200 8084 	bhi.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800969e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a0:	2bc0      	cmp	r3, #192	; 0xc0
 80096a2:	d07d      	beq.n	80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80096a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a6:	2bc0      	cmp	r3, #192	; 0xc0
 80096a8:	d87d      	bhi.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80096aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ac:	2b80      	cmp	r3, #128	; 0x80
 80096ae:	d02d      	beq.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80096b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b2:	2b80      	cmp	r3, #128	; 0x80
 80096b4:	d877      	bhi.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80096b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d003      	beq.n	80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80096bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096be:	2b40      	cmp	r3, #64	; 0x40
 80096c0:	d012      	beq.n	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80096c2:	e070      	b.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80096c4:	4b39      	ldr	r3, [pc, #228]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80096d0:	d107      	bne.n	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80096d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096d6:	4618      	mov	r0, r3
 80096d8:	f000 fec0 	bl	800a45c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80096dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80096e0:	e3f0      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80096e2:	2300      	movs	r3, #0
 80096e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096e6:	e3ed      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80096e8:	4b30      	ldr	r3, [pc, #192]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80096f4:	d107      	bne.n	8009706 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096f6:	f107 0318 	add.w	r3, r7, #24
 80096fa:	4618      	mov	r0, r3
 80096fc:	f000 fc06 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009700:	69bb      	ldr	r3, [r7, #24]
 8009702:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009704:	e3de      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009706:	2300      	movs	r3, #0
 8009708:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800970a:	e3db      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800970c:	4b27      	ldr	r3, [pc, #156]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009714:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009718:	d107      	bne.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800971a:	f107 030c 	add.w	r3, r7, #12
 800971e:	4618      	mov	r0, r3
 8009720:	f000 fd48 	bl	800a1b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009728:	e3cc      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800972a:	2300      	movs	r3, #0
 800972c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800972e:	e3c9      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009730:	4b1e      	ldr	r3, [pc, #120]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009734:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009738:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800973a:	4b1c      	ldr	r3, [pc, #112]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f003 0304 	and.w	r3, r3, #4
 8009742:	2b04      	cmp	r3, #4
 8009744:	d10c      	bne.n	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8009746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009748:	2b00      	cmp	r3, #0
 800974a:	d109      	bne.n	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800974c:	4b17      	ldr	r3, [pc, #92]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	08db      	lsrs	r3, r3, #3
 8009752:	f003 0303 	and.w	r3, r3, #3
 8009756:	4a16      	ldr	r2, [pc, #88]	; (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009758:	fa22 f303 	lsr.w	r3, r2, r3
 800975c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800975e:	e01e      	b.n	800979e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009760:	4b12      	ldr	r3, [pc, #72]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009768:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800976c:	d106      	bne.n	800977c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800976e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009770:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009774:	d102      	bne.n	800977c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009776:	4b0f      	ldr	r3, [pc, #60]	; (80097b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009778:	63fb      	str	r3, [r7, #60]	; 0x3c
 800977a:	e010      	b.n	800979e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800977c:	4b0b      	ldr	r3, [pc, #44]	; (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009784:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009788:	d106      	bne.n	8009798 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800978a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800978c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009790:	d102      	bne.n	8009798 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009792:	4b09      	ldr	r3, [pc, #36]	; (80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009794:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009796:	e002      	b.n	800979e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009798:	2300      	movs	r3, #0
 800979a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800979c:	e392      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800979e:	e391      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80097a0:	4b06      	ldr	r3, [pc, #24]	; (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80097a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097a4:	e38e      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80097a6:	2300      	movs	r3, #0
 80097a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097aa:	e38b      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80097ac:	58024400 	.word	0x58024400
 80097b0:	03d09000 	.word	0x03d09000
 80097b4:	003d0900 	.word	0x003d0900
 80097b8:	007a1200 	.word	0x007a1200
 80097bc:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097c6:	f040 809c 	bne.w	8009902 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80097ca:	4b9d      	ldr	r3, [pc, #628]	; (8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80097cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ce:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80097d2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80097d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80097da:	d054      	beq.n	8009886 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 80097dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80097e2:	f200 808b 	bhi.w	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80097e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80097ec:	f000 8083 	beq.w	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 80097f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80097f6:	f200 8081 	bhi.w	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80097fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009800:	d02f      	beq.n	8009862 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8009802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009804:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009808:	d878      	bhi.n	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800980a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980c:	2b00      	cmp	r3, #0
 800980e:	d004      	beq.n	800981a <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8009810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009812:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009816:	d012      	beq.n	800983e <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8009818:	e070      	b.n	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800981a:	4b89      	ldr	r3, [pc, #548]	; (8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009822:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009826:	d107      	bne.n	8009838 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800982c:	4618      	mov	r0, r3
 800982e:	f000 fe15 	bl	800a45c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009834:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009836:	e345      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009838:	2300      	movs	r3, #0
 800983a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800983c:	e342      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800983e:	4b80      	ldr	r3, [pc, #512]	; (8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009846:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800984a:	d107      	bne.n	800985c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800984c:	f107 0318 	add.w	r3, r7, #24
 8009850:	4618      	mov	r0, r3
 8009852:	f000 fb5b 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009856:	69bb      	ldr	r3, [r7, #24]
 8009858:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800985a:	e333      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800985c:	2300      	movs	r3, #0
 800985e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009860:	e330      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009862:	4b77      	ldr	r3, [pc, #476]	; (8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800986a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800986e:	d107      	bne.n	8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009870:	f107 030c 	add.w	r3, r7, #12
 8009874:	4618      	mov	r0, r3
 8009876:	f000 fc9d 	bl	800a1b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800987e:	e321      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009880:	2300      	movs	r3, #0
 8009882:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009884:	e31e      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009886:	4b6e      	ldr	r3, [pc, #440]	; (8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800988a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800988e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009890:	4b6b      	ldr	r3, [pc, #428]	; (8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f003 0304 	and.w	r3, r3, #4
 8009898:	2b04      	cmp	r3, #4
 800989a:	d10c      	bne.n	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800989c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d109      	bne.n	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80098a2:	4b67      	ldr	r3, [pc, #412]	; (8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	08db      	lsrs	r3, r3, #3
 80098a8:	f003 0303 	and.w	r3, r3, #3
 80098ac:	4a65      	ldr	r2, [pc, #404]	; (8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80098ae:	fa22 f303 	lsr.w	r3, r2, r3
 80098b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098b4:	e01e      	b.n	80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80098b6:	4b62      	ldr	r3, [pc, #392]	; (8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098c2:	d106      	bne.n	80098d2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80098c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098ca:	d102      	bne.n	80098d2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80098cc:	4b5e      	ldr	r3, [pc, #376]	; (8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80098ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098d0:	e010      	b.n	80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80098d2:	4b5b      	ldr	r3, [pc, #364]	; (8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098de:	d106      	bne.n	80098ee <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80098e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098e6:	d102      	bne.n	80098ee <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80098e8:	4b58      	ldr	r3, [pc, #352]	; (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80098ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098ec:	e002      	b.n	80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80098ee:	2300      	movs	r3, #0
 80098f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80098f2:	e2e7      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80098f4:	e2e6      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80098f6:	4b56      	ldr	r3, [pc, #344]	; (8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80098f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098fa:	e2e3      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80098fc:	2300      	movs	r3, #0
 80098fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009900:	e2e0      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009908:	f040 80a7 	bne.w	8009a5a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800990c:	4b4c      	ldr	r3, [pc, #304]	; (8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800990e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009910:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009914:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009918:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800991c:	d055      	beq.n	80099ca <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800991e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009920:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009924:	f200 8096 	bhi.w	8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8009928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800992e:	f000 8084 	beq.w	8009a3a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8009932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009934:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009938:	f200 808c 	bhi.w	8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800993c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009942:	d030      	beq.n	80099a6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8009944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009946:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800994a:	f200 8083 	bhi.w	8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800994e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009950:	2b00      	cmp	r3, #0
 8009952:	d004      	beq.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8009954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009956:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800995a:	d012      	beq.n	8009982 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800995c:	e07a      	b.n	8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800995e:	4b38      	ldr	r3, [pc, #224]	; (8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009966:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800996a:	d107      	bne.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800996c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009970:	4618      	mov	r0, r3
 8009972:	f000 fd73 	bl	800a45c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009978:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800997a:	e2a3      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800997c:	2300      	movs	r3, #0
 800997e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009980:	e2a0      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009982:	4b2f      	ldr	r3, [pc, #188]	; (8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800998a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800998e:	d107      	bne.n	80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009990:	f107 0318 	add.w	r3, r7, #24
 8009994:	4618      	mov	r0, r3
 8009996:	f000 fab9 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800999e:	e291      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80099a0:	2300      	movs	r3, #0
 80099a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099a4:	e28e      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80099a6:	4b26      	ldr	r3, [pc, #152]	; (8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80099ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099b2:	d107      	bne.n	80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099b4:	f107 030c 	add.w	r3, r7, #12
 80099b8:	4618      	mov	r0, r3
 80099ba:	f000 fbfb 	bl	800a1b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80099c2:	e27f      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80099c4:	2300      	movs	r3, #0
 80099c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099c8:	e27c      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80099ca:	4b1d      	ldr	r3, [pc, #116]	; (8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80099cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80099d2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80099d4:	4b1a      	ldr	r3, [pc, #104]	; (8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f003 0304 	and.w	r3, r3, #4
 80099dc:	2b04      	cmp	r3, #4
 80099de:	d10c      	bne.n	80099fa <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80099e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d109      	bne.n	80099fa <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80099e6:	4b16      	ldr	r3, [pc, #88]	; (8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	08db      	lsrs	r3, r3, #3
 80099ec:	f003 0303 	and.w	r3, r3, #3
 80099f0:	4a14      	ldr	r2, [pc, #80]	; (8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80099f2:	fa22 f303 	lsr.w	r3, r2, r3
 80099f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099f8:	e01e      	b.n	8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80099fa:	4b11      	ldr	r3, [pc, #68]	; (8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a06:	d106      	bne.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8009a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a0e:	d102      	bne.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009a10:	4b0d      	ldr	r3, [pc, #52]	; (8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8009a12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a14:	e010      	b.n	8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a16:	4b0a      	ldr	r3, [pc, #40]	; (8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a22:	d106      	bne.n	8009a32 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8009a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a2a:	d102      	bne.n	8009a32 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009a2c:	4b07      	ldr	r3, [pc, #28]	; (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8009a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a30:	e002      	b.n	8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009a32:	2300      	movs	r3, #0
 8009a34:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009a36:	e245      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009a38:	e244      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009a3a:	4b05      	ldr	r3, [pc, #20]	; (8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a3e:	e241      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009a40:	58024400 	.word	0x58024400
 8009a44:	03d09000 	.word	0x03d09000
 8009a48:	003d0900 	.word	0x003d0900
 8009a4c:	007a1200 	.word	0x007a1200
 8009a50:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8009a54:	2300      	movs	r3, #0
 8009a56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a58:	e234      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a60:	f040 809c 	bne.w	8009b9c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009a64:	4b9b      	ldr	r3, [pc, #620]	; (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a68:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009a6c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a74:	d054      	beq.n	8009b20 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8009a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a7c:	f200 808b 	bhi.w	8009b96 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8009a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a86:	f000 8083 	beq.w	8009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8009a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a90:	f200 8081 	bhi.w	8009b96 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8009a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a9a:	d02f      	beq.n	8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8009a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009aa2:	d878      	bhi.n	8009b96 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8009aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d004      	beq.n	8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8009aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ab0:	d012      	beq.n	8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8009ab2:	e070      	b.n	8009b96 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ab4:	4b87      	ldr	r3, [pc, #540]	; (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009abc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ac0:	d107      	bne.n	8009ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f000 fcc8 	bl	800a45c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ace:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009ad0:	e1f8      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ad6:	e1f5      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ad8:	4b7e      	ldr	r3, [pc, #504]	; (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ae0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ae4:	d107      	bne.n	8009af6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ae6:	f107 0318 	add.w	r3, r7, #24
 8009aea:	4618      	mov	r0, r3
 8009aec:	f000 fa0e 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009af0:	69bb      	ldr	r3, [r7, #24]
 8009af2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009af4:	e1e6      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009af6:	2300      	movs	r3, #0
 8009af8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009afa:	e1e3      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009afc:	4b75      	ldr	r3, [pc, #468]	; (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b08:	d107      	bne.n	8009b1a <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b0a:	f107 030c 	add.w	r3, r7, #12
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f000 fb50 	bl	800a1b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009b18:	e1d4      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b1e:	e1d1      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009b20:	4b6c      	ldr	r3, [pc, #432]	; (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009b28:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b2a:	4b6a      	ldr	r3, [pc, #424]	; (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f003 0304 	and.w	r3, r3, #4
 8009b32:	2b04      	cmp	r3, #4
 8009b34:	d10c      	bne.n	8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d109      	bne.n	8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b3c:	4b65      	ldr	r3, [pc, #404]	; (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	08db      	lsrs	r3, r3, #3
 8009b42:	f003 0303 	and.w	r3, r3, #3
 8009b46:	4a64      	ldr	r2, [pc, #400]	; (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8009b48:	fa22 f303 	lsr.w	r3, r2, r3
 8009b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b4e:	e01e      	b.n	8009b8e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009b50:	4b60      	ldr	r3, [pc, #384]	; (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b5c:	d106      	bne.n	8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8009b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b64:	d102      	bne.n	8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009b66:	4b5d      	ldr	r3, [pc, #372]	; (8009cdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8009b68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b6a:	e010      	b.n	8009b8e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009b6c:	4b59      	ldr	r3, [pc, #356]	; (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b78:	d106      	bne.n	8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8009b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b80:	d102      	bne.n	8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009b82:	4b57      	ldr	r3, [pc, #348]	; (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8009b84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b86:	e002      	b.n	8009b8e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009b8c:	e19a      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009b8e:	e199      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009b90:	4b54      	ldr	r3, [pc, #336]	; (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b94:	e196      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8009b96:	2300      	movs	r3, #0
 8009b98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b9a:	e193      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009ba2:	d173      	bne.n	8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009ba4:	4b4b      	ldr	r3, [pc, #300]	; (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ba8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009bac:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bb4:	d02f      	beq.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8009bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bbc:	d863      	bhi.n	8009c86 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8009bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d004      	beq.n	8009bce <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8009bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bca:	d012      	beq.n	8009bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8009bcc:	e05b      	b.n	8009c86 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009bce:	4b41      	ldr	r3, [pc, #260]	; (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009bd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009bda:	d107      	bne.n	8009bec <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bdc:	f107 0318 	add.w	r3, r7, #24
 8009be0:	4618      	mov	r0, r3
 8009be2:	f000 f993 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009be6:	69bb      	ldr	r3, [r7, #24]
 8009be8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009bea:	e16b      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009bec:	2300      	movs	r3, #0
 8009bee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009bf0:	e168      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009bf2:	4b38      	ldr	r3, [pc, #224]	; (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bfe:	d107      	bne.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c00:	f107 030c 	add.w	r3, r7, #12
 8009c04:	4618      	mov	r0, r3
 8009c06:	f000 fad5 	bl	800a1b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009c0e:	e159      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009c10:	2300      	movs	r3, #0
 8009c12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c14:	e156      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009c16:	4b2f      	ldr	r3, [pc, #188]	; (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009c1e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c20:	4b2c      	ldr	r3, [pc, #176]	; (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f003 0304 	and.w	r3, r3, #4
 8009c28:	2b04      	cmp	r3, #4
 8009c2a:	d10c      	bne.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8009c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d109      	bne.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c32:	4b28      	ldr	r3, [pc, #160]	; (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	08db      	lsrs	r3, r3, #3
 8009c38:	f003 0303 	and.w	r3, r3, #3
 8009c3c:	4a26      	ldr	r2, [pc, #152]	; (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8009c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8009c42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c44:	e01e      	b.n	8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009c46:	4b23      	ldr	r3, [pc, #140]	; (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c52:	d106      	bne.n	8009c62 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8009c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c5a:	d102      	bne.n	8009c62 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009c5c:	4b1f      	ldr	r3, [pc, #124]	; (8009cdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8009c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c60:	e010      	b.n	8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009c62:	4b1c      	ldr	r3, [pc, #112]	; (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c6e:	d106      	bne.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8009c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c76:	d102      	bne.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009c78:	4b19      	ldr	r3, [pc, #100]	; (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8009c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c7c:	e002      	b.n	8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009c82:	e11f      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009c84:	e11e      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8009c86:	2300      	movs	r3, #0
 8009c88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c8a:	e11b      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c92:	d13e      	bne.n	8009d12 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009c94:	4b0f      	ldr	r3, [pc, #60]	; (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c9c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d004      	beq.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8009ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009caa:	d01d      	beq.n	8009ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8009cac:	e02e      	b.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009cae:	4b09      	ldr	r3, [pc, #36]	; (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009cba:	d107      	bne.n	8009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f000 fbcb 	bl	800a45c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009cca:	e0fb      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009cd0:	e0f8      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009cd2:	bf00      	nop
 8009cd4:	58024400 	.word	0x58024400
 8009cd8:	03d09000 	.word	0x03d09000
 8009cdc:	003d0900 	.word	0x003d0900
 8009ce0:	007a1200 	.word	0x007a1200
 8009ce4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ce8:	4b79      	ldr	r3, [pc, #484]	; (8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009cf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009cf4:	d107      	bne.n	8009d06 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cf6:	f107 0318 	add.w	r3, r7, #24
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f000 f906 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009d00:	6a3b      	ldr	r3, [r7, #32]
 8009d02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009d04:	e0de      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009d06:	2300      	movs	r3, #0
 8009d08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d0a:	e0db      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d10:	e0d8      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d18:	f040 8085 	bne.w	8009e26 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8009d1c:	4b6c      	ldr	r3, [pc, #432]	; (8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d20:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009d24:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d2c:	d06b      	beq.n	8009e06 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8009d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d34:	d874      	bhi.n	8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8009d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d3c:	d056      	beq.n	8009dec <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8009d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d44:	d86c      	bhi.n	8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8009d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d48:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009d4c:	d03b      	beq.n	8009dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8009d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009d54:	d864      	bhi.n	8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8009d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d5c:	d021      	beq.n	8009da2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8009d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d64:	d85c      	bhi.n	8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8009d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d004      	beq.n	8009d76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d72:	d004      	beq.n	8009d7e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8009d74:	e054      	b.n	8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009d76:	f000 f8b3 	bl	8009ee0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009d7a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8009d7c:	e0a2      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d7e:	4b54      	ldr	r3, [pc, #336]	; (8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d8a:	d107      	bne.n	8009d9c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d8c:	f107 0318 	add.w	r3, r7, #24
 8009d90:	4618      	mov	r0, r3
 8009d92:	f000 f8bb 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009d96:	69fb      	ldr	r3, [r7, #28]
 8009d98:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009d9a:	e093      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009da0:	e090      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009da2:	4b4b      	ldr	r3, [pc, #300]	; (8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009daa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009dae:	d107      	bne.n	8009dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009db0:	f107 030c 	add.w	r3, r7, #12
 8009db4:	4618      	mov	r0, r3
 8009db6:	f000 f9fd 	bl	800a1b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009dbe:	e081      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009dc4:	e07e      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009dc6:	4b42      	ldr	r3, [pc, #264]	; (8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f003 0304 	and.w	r3, r3, #4
 8009dce:	2b04      	cmp	r3, #4
 8009dd0:	d109      	bne.n	8009de6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009dd2:	4b3f      	ldr	r3, [pc, #252]	; (8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	08db      	lsrs	r3, r3, #3
 8009dd8:	f003 0303 	and.w	r3, r3, #3
 8009ddc:	4a3d      	ldr	r2, [pc, #244]	; (8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8009dde:	fa22 f303 	lsr.w	r3, r2, r3
 8009de2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009de4:	e06e      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009de6:	2300      	movs	r3, #0
 8009de8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009dea:	e06b      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009dec:	4b38      	ldr	r3, [pc, #224]	; (8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009df8:	d102      	bne.n	8009e00 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8009dfa:	4b37      	ldr	r3, [pc, #220]	; (8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009dfe:	e061      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009e00:	2300      	movs	r3, #0
 8009e02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e04:	e05e      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009e06:	4b32      	ldr	r3, [pc, #200]	; (8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e12:	d102      	bne.n	8009e1a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8009e14:	4b31      	ldr	r3, [pc, #196]	; (8009edc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009e16:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009e18:	e054      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e1e:	e051      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8009e20:	2300      	movs	r3, #0
 8009e22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e24:	e04e      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e2c:	d148      	bne.n	8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009e2e:	4b28      	ldr	r3, [pc, #160]	; (8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009e36:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e3e:	d02a      	beq.n	8009e96 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8009e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e46:	d838      	bhi.n	8009eba <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8009e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d004      	beq.n	8009e58 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8009e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e54:	d00d      	beq.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8009e56:	e030      	b.n	8009eba <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009e58:	4b1d      	ldr	r3, [pc, #116]	; (8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e64:	d102      	bne.n	8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8009e66:	4b1d      	ldr	r3, [pc, #116]	; (8009edc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009e68:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009e6a:	e02b      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e70:	e028      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009e72:	4b17      	ldr	r3, [pc, #92]	; (8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e7e:	d107      	bne.n	8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e84:	4618      	mov	r0, r3
 8009e86:	f000 fae9 	bl	800a45c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009e8e:	e019      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009e90:	2300      	movs	r3, #0
 8009e92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e94:	e016      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e96:	4b0e      	ldr	r3, [pc, #56]	; (8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ea2:	d107      	bne.n	8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ea4:	f107 0318 	add.w	r3, r7, #24
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f000 f82f 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009eae:	69fb      	ldr	r3, [r7, #28]
 8009eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009eb2:	e007      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009eb8:	e004      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ebe:	e001      	b.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3740      	adds	r7, #64	; 0x40
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	58024400 	.word	0x58024400
 8009ed4:	03d09000 	.word	0x03d09000
 8009ed8:	003d0900 	.word	0x003d0900
 8009edc:	007a1200 	.word	0x007a1200

08009ee0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009ee4:	f7fe fb88 	bl	80085f8 <HAL_RCC_GetHCLKFreq>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	4b06      	ldr	r3, [pc, #24]	; (8009f04 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009eec:	6a1b      	ldr	r3, [r3, #32]
 8009eee:	091b      	lsrs	r3, r3, #4
 8009ef0:	f003 0307 	and.w	r3, r3, #7
 8009ef4:	4904      	ldr	r1, [pc, #16]	; (8009f08 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009ef6:	5ccb      	ldrb	r3, [r1, r3]
 8009ef8:	f003 031f 	and.w	r3, r3, #31
 8009efc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	58024400 	.word	0x58024400
 8009f08:	080110cc 	.word	0x080110cc

08009f0c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b089      	sub	sp, #36	; 0x24
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f14:	4ba1      	ldr	r3, [pc, #644]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f18:	f003 0303 	and.w	r3, r3, #3
 8009f1c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009f1e:	4b9f      	ldr	r3, [pc, #636]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f22:	0b1b      	lsrs	r3, r3, #12
 8009f24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f28:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009f2a:	4b9c      	ldr	r3, [pc, #624]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2e:	091b      	lsrs	r3, r3, #4
 8009f30:	f003 0301 	and.w	r3, r3, #1
 8009f34:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009f36:	4b99      	ldr	r3, [pc, #612]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f3a:	08db      	lsrs	r3, r3, #3
 8009f3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f40:	693a      	ldr	r2, [r7, #16]
 8009f42:	fb02 f303 	mul.w	r3, r2, r3
 8009f46:	ee07 3a90 	vmov	s15, r3
 8009f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	f000 8111 	beq.w	800a17c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009f5a:	69bb      	ldr	r3, [r7, #24]
 8009f5c:	2b02      	cmp	r3, #2
 8009f5e:	f000 8083 	beq.w	800a068 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009f62:	69bb      	ldr	r3, [r7, #24]
 8009f64:	2b02      	cmp	r3, #2
 8009f66:	f200 80a1 	bhi.w	800a0ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d003      	beq.n	8009f78 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d056      	beq.n	800a024 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009f76:	e099      	b.n	800a0ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f78:	4b88      	ldr	r3, [pc, #544]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f003 0320 	and.w	r3, r3, #32
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d02d      	beq.n	8009fe0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f84:	4b85      	ldr	r3, [pc, #532]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	08db      	lsrs	r3, r3, #3
 8009f8a:	f003 0303 	and.w	r3, r3, #3
 8009f8e:	4a84      	ldr	r2, [pc, #528]	; (800a1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009f90:	fa22 f303 	lsr.w	r3, r2, r3
 8009f94:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	ee07 3a90 	vmov	s15, r3
 8009f9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	ee07 3a90 	vmov	s15, r3
 8009fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fae:	4b7b      	ldr	r3, [pc, #492]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fb6:	ee07 3a90 	vmov	s15, r3
 8009fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fc2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fda:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009fde:	e087      	b.n	800a0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	ee07 3a90 	vmov	s15, r3
 8009fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ff2:	4b6a      	ldr	r3, [pc, #424]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ffa:	ee07 3a90 	vmov	s15, r3
 8009ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a002:	ed97 6a03 	vldr	s12, [r7, #12]
 800a006:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a00a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a00e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a012:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a01a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a01e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a022:	e065      	b.n	800a0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	ee07 3a90 	vmov	s15, r3
 800a02a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a02e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a1ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a036:	4b59      	ldr	r3, [pc, #356]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a03a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a03e:	ee07 3a90 	vmov	s15, r3
 800a042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a046:	ed97 6a03 	vldr	s12, [r7, #12]
 800a04a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a04e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a056:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a05a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a05e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a062:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a066:	e043      	b.n	800a0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	ee07 3a90 	vmov	s15, r3
 800a06e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a072:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a07a:	4b48      	ldr	r3, [pc, #288]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a07e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a082:	ee07 3a90 	vmov	s15, r3
 800a086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a08a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a08e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a09a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a09e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a0aa:	e021      	b.n	800a0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	ee07 3a90 	vmov	s15, r3
 800a0b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a1ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a0ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0be:	4b37      	ldr	r3, [pc, #220]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0c6:	ee07 3a90 	vmov	s15, r3
 800a0ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a0d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a0ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a0f0:	4b2a      	ldr	r3, [pc, #168]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0f4:	0a5b      	lsrs	r3, r3, #9
 800a0f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0fa:	ee07 3a90 	vmov	s15, r3
 800a0fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a102:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a106:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a10a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a10e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a116:	ee17 2a90 	vmov	r2, s15
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a11e:	4b1f      	ldr	r3, [pc, #124]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a122:	0c1b      	lsrs	r3, r3, #16
 800a124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a128:	ee07 3a90 	vmov	s15, r3
 800a12c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a130:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a134:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a138:	edd7 6a07 	vldr	s13, [r7, #28]
 800a13c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a144:	ee17 2a90 	vmov	r2, s15
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a14c:	4b13      	ldr	r3, [pc, #76]	; (800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a14e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a150:	0e1b      	lsrs	r3, r3, #24
 800a152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a156:	ee07 3a90 	vmov	s15, r3
 800a15a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a15e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a162:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a166:	edd7 6a07 	vldr	s13, [r7, #28]
 800a16a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a16e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a172:	ee17 2a90 	vmov	r2, s15
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a17a:	e008      	b.n	800a18e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	609a      	str	r2, [r3, #8]
}
 800a18e:	bf00      	nop
 800a190:	3724      	adds	r7, #36	; 0x24
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr
 800a19a:	bf00      	nop
 800a19c:	58024400 	.word	0x58024400
 800a1a0:	03d09000 	.word	0x03d09000
 800a1a4:	46000000 	.word	0x46000000
 800a1a8:	4c742400 	.word	0x4c742400
 800a1ac:	4a742400 	.word	0x4a742400
 800a1b0:	4af42400 	.word	0x4af42400

0800a1b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b089      	sub	sp, #36	; 0x24
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a1bc:	4ba1      	ldr	r3, [pc, #644]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1c0:	f003 0303 	and.w	r3, r3, #3
 800a1c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a1c6:	4b9f      	ldr	r3, [pc, #636]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ca:	0d1b      	lsrs	r3, r3, #20
 800a1cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a1d2:	4b9c      	ldr	r3, [pc, #624]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d6:	0a1b      	lsrs	r3, r3, #8
 800a1d8:	f003 0301 	and.w	r3, r3, #1
 800a1dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a1de:	4b99      	ldr	r3, [pc, #612]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1e2:	08db      	lsrs	r3, r3, #3
 800a1e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a1e8:	693a      	ldr	r2, [r7, #16]
 800a1ea:	fb02 f303 	mul.w	r3, r2, r3
 800a1ee:	ee07 3a90 	vmov	s15, r3
 800a1f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	f000 8111 	beq.w	800a424 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a202:	69bb      	ldr	r3, [r7, #24]
 800a204:	2b02      	cmp	r3, #2
 800a206:	f000 8083 	beq.w	800a310 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a20a:	69bb      	ldr	r3, [r7, #24]
 800a20c:	2b02      	cmp	r3, #2
 800a20e:	f200 80a1 	bhi.w	800a354 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a212:	69bb      	ldr	r3, [r7, #24]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d003      	beq.n	800a220 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a218:	69bb      	ldr	r3, [r7, #24]
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d056      	beq.n	800a2cc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a21e:	e099      	b.n	800a354 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a220:	4b88      	ldr	r3, [pc, #544]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f003 0320 	and.w	r3, r3, #32
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d02d      	beq.n	800a288 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a22c:	4b85      	ldr	r3, [pc, #532]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	08db      	lsrs	r3, r3, #3
 800a232:	f003 0303 	and.w	r3, r3, #3
 800a236:	4a84      	ldr	r2, [pc, #528]	; (800a448 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a238:	fa22 f303 	lsr.w	r3, r2, r3
 800a23c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	ee07 3a90 	vmov	s15, r3
 800a244:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	ee07 3a90 	vmov	s15, r3
 800a24e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a256:	4b7b      	ldr	r3, [pc, #492]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a25a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a25e:	ee07 3a90 	vmov	s15, r3
 800a262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a266:	ed97 6a03 	vldr	s12, [r7, #12]
 800a26a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a44c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a26e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a27a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a27e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a282:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a286:	e087      	b.n	800a398 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	ee07 3a90 	vmov	s15, r3
 800a28e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a292:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a29a:	4b6a      	ldr	r3, [pc, #424]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a29c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a29e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2a2:	ee07 3a90 	vmov	s15, r3
 800a2a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2ae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a44c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a2b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a2ca:	e065      	b.n	800a398 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	ee07 3a90 	vmov	s15, r3
 800a2d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2d6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a2da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2de:	4b59      	ldr	r3, [pc, #356]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2e6:	ee07 3a90 	vmov	s15, r3
 800a2ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2f2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a44c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a2f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a30a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a30e:	e043      	b.n	800a398 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	ee07 3a90 	vmov	s15, r3
 800a316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a31a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a458 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a31e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a322:	4b48      	ldr	r3, [pc, #288]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a32a:	ee07 3a90 	vmov	s15, r3
 800a32e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a332:	ed97 6a03 	vldr	s12, [r7, #12]
 800a336:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a44c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a33a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a33e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a34a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a34e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a352:	e021      	b.n	800a398 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	ee07 3a90 	vmov	s15, r3
 800a35a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a35e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a366:	4b37      	ldr	r3, [pc, #220]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a36a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a36e:	ee07 3a90 	vmov	s15, r3
 800a372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a376:	ed97 6a03 	vldr	s12, [r7, #12]
 800a37a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a44c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a37e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a38a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a38e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a392:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a396:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a398:	4b2a      	ldr	r3, [pc, #168]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a39a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a39c:	0a5b      	lsrs	r3, r3, #9
 800a39e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3a2:	ee07 3a90 	vmov	s15, r3
 800a3a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3be:	ee17 2a90 	vmov	r2, s15
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a3c6:	4b1f      	ldr	r3, [pc, #124]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ca:	0c1b      	lsrs	r3, r3, #16
 800a3cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3d0:	ee07 3a90 	vmov	s15, r3
 800a3d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3e0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3ec:	ee17 2a90 	vmov	r2, s15
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a3f4:	4b13      	ldr	r3, [pc, #76]	; (800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3f8:	0e1b      	lsrs	r3, r3, #24
 800a3fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3fe:	ee07 3a90 	vmov	s15, r3
 800a402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a406:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a40a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a40e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a41a:	ee17 2a90 	vmov	r2, s15
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a422:	e008      	b.n	800a436 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2200      	movs	r2, #0
 800a428:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2200      	movs	r2, #0
 800a42e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2200      	movs	r2, #0
 800a434:	609a      	str	r2, [r3, #8]
}
 800a436:	bf00      	nop
 800a438:	3724      	adds	r7, #36	; 0x24
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop
 800a444:	58024400 	.word	0x58024400
 800a448:	03d09000 	.word	0x03d09000
 800a44c:	46000000 	.word	0x46000000
 800a450:	4c742400 	.word	0x4c742400
 800a454:	4a742400 	.word	0x4a742400
 800a458:	4af42400 	.word	0x4af42400

0800a45c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b089      	sub	sp, #36	; 0x24
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a464:	4ba0      	ldr	r3, [pc, #640]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a468:	f003 0303 	and.w	r3, r3, #3
 800a46c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a46e:	4b9e      	ldr	r3, [pc, #632]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a472:	091b      	lsrs	r3, r3, #4
 800a474:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a478:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a47a:	4b9b      	ldr	r3, [pc, #620]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a47c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a47e:	f003 0301 	and.w	r3, r3, #1
 800a482:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a484:	4b98      	ldr	r3, [pc, #608]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a488:	08db      	lsrs	r3, r3, #3
 800a48a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a48e:	693a      	ldr	r2, [r7, #16]
 800a490:	fb02 f303 	mul.w	r3, r2, r3
 800a494:	ee07 3a90 	vmov	s15, r3
 800a498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a49c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	f000 8111 	beq.w	800a6ca <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	2b02      	cmp	r3, #2
 800a4ac:	f000 8083 	beq.w	800a5b6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a4b0:	69bb      	ldr	r3, [r7, #24]
 800a4b2:	2b02      	cmp	r3, #2
 800a4b4:	f200 80a1 	bhi.w	800a5fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a4b8:	69bb      	ldr	r3, [r7, #24]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d003      	beq.n	800a4c6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a4be:	69bb      	ldr	r3, [r7, #24]
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	d056      	beq.n	800a572 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a4c4:	e099      	b.n	800a5fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4c6:	4b88      	ldr	r3, [pc, #544]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f003 0320 	and.w	r3, r3, #32
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d02d      	beq.n	800a52e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a4d2:	4b85      	ldr	r3, [pc, #532]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	08db      	lsrs	r3, r3, #3
 800a4d8:	f003 0303 	and.w	r3, r3, #3
 800a4dc:	4a83      	ldr	r2, [pc, #524]	; (800a6ec <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a4de:	fa22 f303 	lsr.w	r3, r2, r3
 800a4e2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	ee07 3a90 	vmov	s15, r3
 800a4ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	ee07 3a90 	vmov	s15, r3
 800a4f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4fc:	4b7a      	ldr	r3, [pc, #488]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a4fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a504:	ee07 3a90 	vmov	s15, r3
 800a508:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a50c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a510:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a514:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a518:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a51c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a520:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a524:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a528:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a52c:	e087      	b.n	800a63e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	ee07 3a90 	vmov	s15, r3
 800a534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a538:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a6f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a53c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a540:	4b69      	ldr	r3, [pc, #420]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a548:	ee07 3a90 	vmov	s15, r3
 800a54c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a550:	ed97 6a03 	vldr	s12, [r7, #12]
 800a554:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a558:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a55c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a560:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a564:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a56c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a570:	e065      	b.n	800a63e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	ee07 3a90 	vmov	s15, r3
 800a578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a57c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a6f8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a580:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a584:	4b58      	ldr	r3, [pc, #352]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a58c:	ee07 3a90 	vmov	s15, r3
 800a590:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a594:	ed97 6a03 	vldr	s12, [r7, #12]
 800a598:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a59c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a5b4:	e043      	b.n	800a63e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	ee07 3a90 	vmov	s15, r3
 800a5bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5c0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a6fc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a5c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5c8:	4b47      	ldr	r3, [pc, #284]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a5ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5d0:	ee07 3a90 	vmov	s15, r3
 800a5d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5d8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5dc:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a5e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a5f8:	e021      	b.n	800a63e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	ee07 3a90 	vmov	s15, r3
 800a600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a604:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a6f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a608:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a60c:	4b36      	ldr	r3, [pc, #216]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a60e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a614:	ee07 3a90 	vmov	s15, r3
 800a618:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a61c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a620:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a624:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a628:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a62c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a630:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a634:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a638:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a63c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a63e:	4b2a      	ldr	r3, [pc, #168]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a642:	0a5b      	lsrs	r3, r3, #9
 800a644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a648:	ee07 3a90 	vmov	s15, r3
 800a64c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a650:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a654:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a658:	edd7 6a07 	vldr	s13, [r7, #28]
 800a65c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a664:	ee17 2a90 	vmov	r2, s15
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a66c:	4b1e      	ldr	r3, [pc, #120]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a66e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a670:	0c1b      	lsrs	r3, r3, #16
 800a672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a676:	ee07 3a90 	vmov	s15, r3
 800a67a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a67e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a682:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a686:	edd7 6a07 	vldr	s13, [r7, #28]
 800a68a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a68e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a692:	ee17 2a90 	vmov	r2, s15
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a69a:	4b13      	ldr	r3, [pc, #76]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a69c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a69e:	0e1b      	lsrs	r3, r3, #24
 800a6a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6a4:	ee07 3a90 	vmov	s15, r3
 800a6a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a6b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a6b4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6c0:	ee17 2a90 	vmov	r2, s15
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a6c8:	e008      	b.n	800a6dc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	609a      	str	r2, [r3, #8]
}
 800a6dc:	bf00      	nop
 800a6de:	3724      	adds	r7, #36	; 0x24
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr
 800a6e8:	58024400 	.word	0x58024400
 800a6ec:	03d09000 	.word	0x03d09000
 800a6f0:	46000000 	.word	0x46000000
 800a6f4:	4c742400 	.word	0x4c742400
 800a6f8:	4a742400 	.word	0x4a742400
 800a6fc:	4af42400 	.word	0x4af42400

0800a700 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a70a:	2300      	movs	r3, #0
 800a70c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a70e:	4b53      	ldr	r3, [pc, #332]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a712:	f003 0303 	and.w	r3, r3, #3
 800a716:	2b03      	cmp	r3, #3
 800a718:	d101      	bne.n	800a71e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a71a:	2301      	movs	r3, #1
 800a71c:	e099      	b.n	800a852 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a71e:	4b4f      	ldr	r3, [pc, #316]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a4e      	ldr	r2, [pc, #312]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a724:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a728:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a72a:	f7f7 f94d 	bl	80019c8 <HAL_GetTick>
 800a72e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a730:	e008      	b.n	800a744 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a732:	f7f7 f949 	bl	80019c8 <HAL_GetTick>
 800a736:	4602      	mov	r2, r0
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	1ad3      	subs	r3, r2, r3
 800a73c:	2b02      	cmp	r3, #2
 800a73e:	d901      	bls.n	800a744 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a740:	2303      	movs	r3, #3
 800a742:	e086      	b.n	800a852 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a744:	4b45      	ldr	r3, [pc, #276]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d1f0      	bne.n	800a732 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a750:	4b42      	ldr	r3, [pc, #264]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a754:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	031b      	lsls	r3, r3, #12
 800a75e:	493f      	ldr	r1, [pc, #252]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a760:	4313      	orrs	r3, r2
 800a762:	628b      	str	r3, [r1, #40]	; 0x28
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	3b01      	subs	r3, #1
 800a76a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	3b01      	subs	r3, #1
 800a774:	025b      	lsls	r3, r3, #9
 800a776:	b29b      	uxth	r3, r3
 800a778:	431a      	orrs	r2, r3
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	68db      	ldr	r3, [r3, #12]
 800a77e:	3b01      	subs	r3, #1
 800a780:	041b      	lsls	r3, r3, #16
 800a782:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a786:	431a      	orrs	r2, r3
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	691b      	ldr	r3, [r3, #16]
 800a78c:	3b01      	subs	r3, #1
 800a78e:	061b      	lsls	r3, r3, #24
 800a790:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a794:	4931      	ldr	r1, [pc, #196]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a796:	4313      	orrs	r3, r2
 800a798:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a79a:	4b30      	ldr	r3, [pc, #192]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a79c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a79e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	695b      	ldr	r3, [r3, #20]
 800a7a6:	492d      	ldr	r1, [pc, #180]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a7ac:	4b2b      	ldr	r3, [pc, #172]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b0:	f023 0220 	bic.w	r2, r3, #32
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	699b      	ldr	r3, [r3, #24]
 800a7b8:	4928      	ldr	r1, [pc, #160]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a7be:	4b27      	ldr	r3, [pc, #156]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c2:	4a26      	ldr	r2, [pc, #152]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a7c4:	f023 0310 	bic.w	r3, r3, #16
 800a7c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a7ca:	4b24      	ldr	r3, [pc, #144]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a7cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7ce:	4b24      	ldr	r3, [pc, #144]	; (800a860 <RCCEx_PLL2_Config+0x160>)
 800a7d0:	4013      	ands	r3, r2
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	69d2      	ldr	r2, [r2, #28]
 800a7d6:	00d2      	lsls	r2, r2, #3
 800a7d8:	4920      	ldr	r1, [pc, #128]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a7de:	4b1f      	ldr	r3, [pc, #124]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a7e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7e2:	4a1e      	ldr	r2, [pc, #120]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a7e4:	f043 0310 	orr.w	r3, r3, #16
 800a7e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d106      	bne.n	800a7fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a7f0:	4b1a      	ldr	r3, [pc, #104]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f4:	4a19      	ldr	r2, [pc, #100]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a7f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a7fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a7fc:	e00f      	b.n	800a81e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	2b01      	cmp	r3, #1
 800a802:	d106      	bne.n	800a812 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a804:	4b15      	ldr	r3, [pc, #84]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a808:	4a14      	ldr	r2, [pc, #80]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a80a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a80e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a810:	e005      	b.n	800a81e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a812:	4b12      	ldr	r3, [pc, #72]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a816:	4a11      	ldr	r2, [pc, #68]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a818:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a81c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a81e:	4b0f      	ldr	r3, [pc, #60]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4a0e      	ldr	r2, [pc, #56]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a824:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a828:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a82a:	f7f7 f8cd 	bl	80019c8 <HAL_GetTick>
 800a82e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a830:	e008      	b.n	800a844 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a832:	f7f7 f8c9 	bl	80019c8 <HAL_GetTick>
 800a836:	4602      	mov	r2, r0
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	1ad3      	subs	r3, r2, r3
 800a83c:	2b02      	cmp	r3, #2
 800a83e:	d901      	bls.n	800a844 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a840:	2303      	movs	r3, #3
 800a842:	e006      	b.n	800a852 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a844:	4b05      	ldr	r3, [pc, #20]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d0f0      	beq.n	800a832 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a850:	7bfb      	ldrb	r3, [r7, #15]
}
 800a852:	4618      	mov	r0, r3
 800a854:	3710      	adds	r7, #16
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	58024400 	.word	0x58024400
 800a860:	ffff0007 	.word	0xffff0007

0800a864 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b084      	sub	sp, #16
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a86e:	2300      	movs	r3, #0
 800a870:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a872:	4b53      	ldr	r3, [pc, #332]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a876:	f003 0303 	and.w	r3, r3, #3
 800a87a:	2b03      	cmp	r3, #3
 800a87c:	d101      	bne.n	800a882 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a87e:	2301      	movs	r3, #1
 800a880:	e099      	b.n	800a9b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a882:	4b4f      	ldr	r3, [pc, #316]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4a4e      	ldr	r2, [pc, #312]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a88c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a88e:	f7f7 f89b 	bl	80019c8 <HAL_GetTick>
 800a892:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a894:	e008      	b.n	800a8a8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a896:	f7f7 f897 	bl	80019c8 <HAL_GetTick>
 800a89a:	4602      	mov	r2, r0
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	1ad3      	subs	r3, r2, r3
 800a8a0:	2b02      	cmp	r3, #2
 800a8a2:	d901      	bls.n	800a8a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a8a4:	2303      	movs	r3, #3
 800a8a6:	e086      	b.n	800a9b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a8a8:	4b45      	ldr	r3, [pc, #276]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d1f0      	bne.n	800a896 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a8b4:	4b42      	ldr	r3, [pc, #264]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a8b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8b8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	051b      	lsls	r3, r3, #20
 800a8c2:	493f      	ldr	r1, [pc, #252]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	628b      	str	r3, [r1, #40]	; 0x28
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	3b01      	subs	r3, #1
 800a8ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	689b      	ldr	r3, [r3, #8]
 800a8d6:	3b01      	subs	r3, #1
 800a8d8:	025b      	lsls	r3, r3, #9
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	431a      	orrs	r2, r3
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	68db      	ldr	r3, [r3, #12]
 800a8e2:	3b01      	subs	r3, #1
 800a8e4:	041b      	lsls	r3, r3, #16
 800a8e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a8ea:	431a      	orrs	r2, r3
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	691b      	ldr	r3, [r3, #16]
 800a8f0:	3b01      	subs	r3, #1
 800a8f2:	061b      	lsls	r3, r3, #24
 800a8f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a8f8:	4931      	ldr	r1, [pc, #196]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a8fe:	4b30      	ldr	r3, [pc, #192]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a902:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	695b      	ldr	r3, [r3, #20]
 800a90a:	492d      	ldr	r1, [pc, #180]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a90c:	4313      	orrs	r3, r2
 800a90e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a910:	4b2b      	ldr	r3, [pc, #172]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a914:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	699b      	ldr	r3, [r3, #24]
 800a91c:	4928      	ldr	r1, [pc, #160]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a91e:	4313      	orrs	r3, r2
 800a920:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a922:	4b27      	ldr	r3, [pc, #156]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a926:	4a26      	ldr	r2, [pc, #152]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a928:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a92c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a92e:	4b24      	ldr	r3, [pc, #144]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a932:	4b24      	ldr	r3, [pc, #144]	; (800a9c4 <RCCEx_PLL3_Config+0x160>)
 800a934:	4013      	ands	r3, r2
 800a936:	687a      	ldr	r2, [r7, #4]
 800a938:	69d2      	ldr	r2, [r2, #28]
 800a93a:	00d2      	lsls	r2, r2, #3
 800a93c:	4920      	ldr	r1, [pc, #128]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a93e:	4313      	orrs	r3, r2
 800a940:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a942:	4b1f      	ldr	r3, [pc, #124]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a946:	4a1e      	ldr	r2, [pc, #120]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a94c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d106      	bne.n	800a962 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a954:	4b1a      	ldr	r3, [pc, #104]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a958:	4a19      	ldr	r2, [pc, #100]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a95a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a95e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a960:	e00f      	b.n	800a982 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	2b01      	cmp	r3, #1
 800a966:	d106      	bne.n	800a976 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a968:	4b15      	ldr	r3, [pc, #84]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a96c:	4a14      	ldr	r2, [pc, #80]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a96e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a972:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a974:	e005      	b.n	800a982 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a976:	4b12      	ldr	r3, [pc, #72]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a97a:	4a11      	ldr	r2, [pc, #68]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a97c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a980:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a982:	4b0f      	ldr	r3, [pc, #60]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4a0e      	ldr	r2, [pc, #56]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a98c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a98e:	f7f7 f81b 	bl	80019c8 <HAL_GetTick>
 800a992:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a994:	e008      	b.n	800a9a8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a996:	f7f7 f817 	bl	80019c8 <HAL_GetTick>
 800a99a:	4602      	mov	r2, r0
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	1ad3      	subs	r3, r2, r3
 800a9a0:	2b02      	cmp	r3, #2
 800a9a2:	d901      	bls.n	800a9a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a9a4:	2303      	movs	r3, #3
 800a9a6:	e006      	b.n	800a9b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a9a8:	4b05      	ldr	r3, [pc, #20]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d0f0      	beq.n	800a996 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a9b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3710      	adds	r7, #16
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	58024400 	.word	0x58024400
 800a9c4:	ffff0007 	.word	0xffff0007

0800a9c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d101      	bne.n	800a9da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e049      	b.n	800aa6e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d106      	bne.n	800a9f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f7f6 fe08 	bl	8001604 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2202      	movs	r2, #2
 800a9f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681a      	ldr	r2, [r3, #0]
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	3304      	adds	r3, #4
 800aa04:	4619      	mov	r1, r3
 800aa06:	4610      	mov	r0, r2
 800aa08:	f000 fb3a 	bl	800b080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2201      	movs	r2, #1
 800aa10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2201      	movs	r2, #1
 800aa18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2201      	movs	r2, #1
 800aa28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2201      	movs	r2, #1
 800aa38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2201      	movs	r2, #1
 800aa58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2201      	movs	r2, #1
 800aa68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa6c:	2300      	movs	r3, #0
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3708      	adds	r7, #8
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
	...

0800aa78 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2200      	movs	r2, #0
 800aa88:	6839      	ldr	r1, [r7, #0]
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f000 fe68 	bl	800b760 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a3e      	ldr	r2, [pc, #248]	; (800ab90 <HAL_TIM_PWM_Stop+0x118>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d013      	beq.n	800aac2 <HAL_TIM_PWM_Stop+0x4a>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4a3d      	ldr	r2, [pc, #244]	; (800ab94 <HAL_TIM_PWM_Stop+0x11c>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d00e      	beq.n	800aac2 <HAL_TIM_PWM_Stop+0x4a>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a3b      	ldr	r2, [pc, #236]	; (800ab98 <HAL_TIM_PWM_Stop+0x120>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d009      	beq.n	800aac2 <HAL_TIM_PWM_Stop+0x4a>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a3a      	ldr	r2, [pc, #232]	; (800ab9c <HAL_TIM_PWM_Stop+0x124>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d004      	beq.n	800aac2 <HAL_TIM_PWM_Stop+0x4a>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a38      	ldr	r2, [pc, #224]	; (800aba0 <HAL_TIM_PWM_Stop+0x128>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d101      	bne.n	800aac6 <HAL_TIM_PWM_Stop+0x4e>
 800aac2:	2301      	movs	r3, #1
 800aac4:	e000      	b.n	800aac8 <HAL_TIM_PWM_Stop+0x50>
 800aac6:	2300      	movs	r3, #0
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d017      	beq.n	800aafc <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	6a1a      	ldr	r2, [r3, #32]
 800aad2:	f241 1311 	movw	r3, #4369	; 0x1111
 800aad6:	4013      	ands	r3, r2
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d10f      	bne.n	800aafc <HAL_TIM_PWM_Stop+0x84>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	6a1a      	ldr	r2, [r3, #32]
 800aae2:	f240 4344 	movw	r3, #1092	; 0x444
 800aae6:	4013      	ands	r3, r2
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d107      	bne.n	800aafc <HAL_TIM_PWM_Stop+0x84>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aafa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	6a1a      	ldr	r2, [r3, #32]
 800ab02:	f241 1311 	movw	r3, #4369	; 0x1111
 800ab06:	4013      	ands	r3, r2
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d10f      	bne.n	800ab2c <HAL_TIM_PWM_Stop+0xb4>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	6a1a      	ldr	r2, [r3, #32]
 800ab12:	f240 4344 	movw	r3, #1092	; 0x444
 800ab16:	4013      	ands	r3, r2
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d107      	bne.n	800ab2c <HAL_TIM_PWM_Stop+0xb4>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f022 0201 	bic.w	r2, r2, #1
 800ab2a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d104      	bne.n	800ab3c <HAL_TIM_PWM_Stop+0xc4>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2201      	movs	r2, #1
 800ab36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab3a:	e023      	b.n	800ab84 <HAL_TIM_PWM_Stop+0x10c>
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	2b04      	cmp	r3, #4
 800ab40:	d104      	bne.n	800ab4c <HAL_TIM_PWM_Stop+0xd4>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2201      	movs	r2, #1
 800ab46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab4a:	e01b      	b.n	800ab84 <HAL_TIM_PWM_Stop+0x10c>
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	2b08      	cmp	r3, #8
 800ab50:	d104      	bne.n	800ab5c <HAL_TIM_PWM_Stop+0xe4>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2201      	movs	r2, #1
 800ab56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab5a:	e013      	b.n	800ab84 <HAL_TIM_PWM_Stop+0x10c>
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	2b0c      	cmp	r3, #12
 800ab60:	d104      	bne.n	800ab6c <HAL_TIM_PWM_Stop+0xf4>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2201      	movs	r2, #1
 800ab66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ab6a:	e00b      	b.n	800ab84 <HAL_TIM_PWM_Stop+0x10c>
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	2b10      	cmp	r3, #16
 800ab70:	d104      	bne.n	800ab7c <HAL_TIM_PWM_Stop+0x104>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2201      	movs	r2, #1
 800ab76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab7a:	e003      	b.n	800ab84 <HAL_TIM_PWM_Stop+0x10c>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800ab84:	2300      	movs	r3, #0
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3708      	adds	r7, #8
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	40010000 	.word	0x40010000
 800ab94:	40010400 	.word	0x40010400
 800ab98:	40014000 	.word	0x40014000
 800ab9c:	40014400 	.word	0x40014400
 800aba0:	40014800 	.word	0x40014800

0800aba4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800abae:	2300      	movs	r3, #0
 800abb0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d109      	bne.n	800abcc <HAL_TIM_PWM_Start_IT+0x28>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	2b01      	cmp	r3, #1
 800abc2:	bf14      	ite	ne
 800abc4:	2301      	movne	r3, #1
 800abc6:	2300      	moveq	r3, #0
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	e03c      	b.n	800ac46 <HAL_TIM_PWM_Start_IT+0xa2>
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	2b04      	cmp	r3, #4
 800abd0:	d109      	bne.n	800abe6 <HAL_TIM_PWM_Start_IT+0x42>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	2b01      	cmp	r3, #1
 800abdc:	bf14      	ite	ne
 800abde:	2301      	movne	r3, #1
 800abe0:	2300      	moveq	r3, #0
 800abe2:	b2db      	uxtb	r3, r3
 800abe4:	e02f      	b.n	800ac46 <HAL_TIM_PWM_Start_IT+0xa2>
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	2b08      	cmp	r3, #8
 800abea:	d109      	bne.n	800ac00 <HAL_TIM_PWM_Start_IT+0x5c>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	bf14      	ite	ne
 800abf8:	2301      	movne	r3, #1
 800abfa:	2300      	moveq	r3, #0
 800abfc:	b2db      	uxtb	r3, r3
 800abfe:	e022      	b.n	800ac46 <HAL_TIM_PWM_Start_IT+0xa2>
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	2b0c      	cmp	r3, #12
 800ac04:	d109      	bne.n	800ac1a <HAL_TIM_PWM_Start_IT+0x76>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac0c:	b2db      	uxtb	r3, r3
 800ac0e:	2b01      	cmp	r3, #1
 800ac10:	bf14      	ite	ne
 800ac12:	2301      	movne	r3, #1
 800ac14:	2300      	moveq	r3, #0
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	e015      	b.n	800ac46 <HAL_TIM_PWM_Start_IT+0xa2>
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	2b10      	cmp	r3, #16
 800ac1e:	d109      	bne.n	800ac34 <HAL_TIM_PWM_Start_IT+0x90>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	bf14      	ite	ne
 800ac2c:	2301      	movne	r3, #1
 800ac2e:	2300      	moveq	r3, #0
 800ac30:	b2db      	uxtb	r3, r3
 800ac32:	e008      	b.n	800ac46 <HAL_TIM_PWM_Start_IT+0xa2>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ac3a:	b2db      	uxtb	r3, r3
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	bf14      	ite	ne
 800ac40:	2301      	movne	r3, #1
 800ac42:	2300      	moveq	r3, #0
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d001      	beq.n	800ac4e <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	e0ec      	b.n	800ae28 <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d104      	bne.n	800ac5e <HAL_TIM_PWM_Start_IT+0xba>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2202      	movs	r2, #2
 800ac58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac5c:	e023      	b.n	800aca6 <HAL_TIM_PWM_Start_IT+0x102>
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	2b04      	cmp	r3, #4
 800ac62:	d104      	bne.n	800ac6e <HAL_TIM_PWM_Start_IT+0xca>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2202      	movs	r2, #2
 800ac68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac6c:	e01b      	b.n	800aca6 <HAL_TIM_PWM_Start_IT+0x102>
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	2b08      	cmp	r3, #8
 800ac72:	d104      	bne.n	800ac7e <HAL_TIM_PWM_Start_IT+0xda>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2202      	movs	r2, #2
 800ac78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac7c:	e013      	b.n	800aca6 <HAL_TIM_PWM_Start_IT+0x102>
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	2b0c      	cmp	r3, #12
 800ac82:	d104      	bne.n	800ac8e <HAL_TIM_PWM_Start_IT+0xea>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2202      	movs	r2, #2
 800ac88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ac8c:	e00b      	b.n	800aca6 <HAL_TIM_PWM_Start_IT+0x102>
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	2b10      	cmp	r3, #16
 800ac92:	d104      	bne.n	800ac9e <HAL_TIM_PWM_Start_IT+0xfa>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2202      	movs	r2, #2
 800ac98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac9c:	e003      	b.n	800aca6 <HAL_TIM_PWM_Start_IT+0x102>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2202      	movs	r2, #2
 800aca2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	2b0c      	cmp	r3, #12
 800acaa:	d841      	bhi.n	800ad30 <HAL_TIM_PWM_Start_IT+0x18c>
 800acac:	a201      	add	r2, pc, #4	; (adr r2, 800acb4 <HAL_TIM_PWM_Start_IT+0x110>)
 800acae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb2:	bf00      	nop
 800acb4:	0800ace9 	.word	0x0800ace9
 800acb8:	0800ad31 	.word	0x0800ad31
 800acbc:	0800ad31 	.word	0x0800ad31
 800acc0:	0800ad31 	.word	0x0800ad31
 800acc4:	0800acfb 	.word	0x0800acfb
 800acc8:	0800ad31 	.word	0x0800ad31
 800accc:	0800ad31 	.word	0x0800ad31
 800acd0:	0800ad31 	.word	0x0800ad31
 800acd4:	0800ad0d 	.word	0x0800ad0d
 800acd8:	0800ad31 	.word	0x0800ad31
 800acdc:	0800ad31 	.word	0x0800ad31
 800ace0:	0800ad31 	.word	0x0800ad31
 800ace4:	0800ad1f 	.word	0x0800ad1f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	68da      	ldr	r2, [r3, #12]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f042 0202 	orr.w	r2, r2, #2
 800acf6:	60da      	str	r2, [r3, #12]
      break;
 800acf8:	e01d      	b.n	800ad36 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	68da      	ldr	r2, [r3, #12]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f042 0204 	orr.w	r2, r2, #4
 800ad08:	60da      	str	r2, [r3, #12]
      break;
 800ad0a:	e014      	b.n	800ad36 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	68da      	ldr	r2, [r3, #12]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f042 0208 	orr.w	r2, r2, #8
 800ad1a:	60da      	str	r2, [r3, #12]
      break;
 800ad1c:	e00b      	b.n	800ad36 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	68da      	ldr	r2, [r3, #12]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f042 0210 	orr.w	r2, r2, #16
 800ad2c:	60da      	str	r2, [r3, #12]
      break;
 800ad2e:	e002      	b.n	800ad36 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800ad30:	2301      	movs	r3, #1
 800ad32:	73fb      	strb	r3, [r7, #15]
      break;
 800ad34:	bf00      	nop
  }

  if (status == HAL_OK)
 800ad36:	7bfb      	ldrb	r3, [r7, #15]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d174      	bne.n	800ae26 <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	2201      	movs	r2, #1
 800ad42:	6839      	ldr	r1, [r7, #0]
 800ad44:	4618      	mov	r0, r3
 800ad46:	f000 fd0b 	bl	800b760 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4a38      	ldr	r2, [pc, #224]	; (800ae30 <HAL_TIM_PWM_Start_IT+0x28c>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d013      	beq.n	800ad7c <HAL_TIM_PWM_Start_IT+0x1d8>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4a36      	ldr	r2, [pc, #216]	; (800ae34 <HAL_TIM_PWM_Start_IT+0x290>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d00e      	beq.n	800ad7c <HAL_TIM_PWM_Start_IT+0x1d8>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4a35      	ldr	r2, [pc, #212]	; (800ae38 <HAL_TIM_PWM_Start_IT+0x294>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d009      	beq.n	800ad7c <HAL_TIM_PWM_Start_IT+0x1d8>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4a33      	ldr	r2, [pc, #204]	; (800ae3c <HAL_TIM_PWM_Start_IT+0x298>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d004      	beq.n	800ad7c <HAL_TIM_PWM_Start_IT+0x1d8>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4a32      	ldr	r2, [pc, #200]	; (800ae40 <HAL_TIM_PWM_Start_IT+0x29c>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d101      	bne.n	800ad80 <HAL_TIM_PWM_Start_IT+0x1dc>
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	e000      	b.n	800ad82 <HAL_TIM_PWM_Start_IT+0x1de>
 800ad80:	2300      	movs	r3, #0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d007      	beq.n	800ad96 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ad94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a25      	ldr	r2, [pc, #148]	; (800ae30 <HAL_TIM_PWM_Start_IT+0x28c>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d022      	beq.n	800ade6 <HAL_TIM_PWM_Start_IT+0x242>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ada8:	d01d      	beq.n	800ade6 <HAL_TIM_PWM_Start_IT+0x242>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	4a25      	ldr	r2, [pc, #148]	; (800ae44 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d018      	beq.n	800ade6 <HAL_TIM_PWM_Start_IT+0x242>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4a23      	ldr	r2, [pc, #140]	; (800ae48 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d013      	beq.n	800ade6 <HAL_TIM_PWM_Start_IT+0x242>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	4a22      	ldr	r2, [pc, #136]	; (800ae4c <HAL_TIM_PWM_Start_IT+0x2a8>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d00e      	beq.n	800ade6 <HAL_TIM_PWM_Start_IT+0x242>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a19      	ldr	r2, [pc, #100]	; (800ae34 <HAL_TIM_PWM_Start_IT+0x290>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d009      	beq.n	800ade6 <HAL_TIM_PWM_Start_IT+0x242>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4a1e      	ldr	r2, [pc, #120]	; (800ae50 <HAL_TIM_PWM_Start_IT+0x2ac>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d004      	beq.n	800ade6 <HAL_TIM_PWM_Start_IT+0x242>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a15      	ldr	r2, [pc, #84]	; (800ae38 <HAL_TIM_PWM_Start_IT+0x294>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d115      	bne.n	800ae12 <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	689a      	ldr	r2, [r3, #8]
 800adec:	4b19      	ldr	r3, [pc, #100]	; (800ae54 <HAL_TIM_PWM_Start_IT+0x2b0>)
 800adee:	4013      	ands	r3, r2
 800adf0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	2b06      	cmp	r3, #6
 800adf6:	d015      	beq.n	800ae24 <HAL_TIM_PWM_Start_IT+0x280>
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adfe:	d011      	beq.n	800ae24 <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f042 0201 	orr.w	r2, r2, #1
 800ae0e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae10:	e008      	b.n	800ae24 <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	681a      	ldr	r2, [r3, #0]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f042 0201 	orr.w	r2, r2, #1
 800ae20:	601a      	str	r2, [r3, #0]
 800ae22:	e000      	b.n	800ae26 <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae24:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800ae26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3710      	adds	r7, #16
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}
 800ae30:	40010000 	.word	0x40010000
 800ae34:	40010400 	.word	0x40010400
 800ae38:	40014000 	.word	0x40014000
 800ae3c:	40014400 	.word	0x40014400
 800ae40:	40014800 	.word	0x40014800
 800ae44:	40000400 	.word	0x40000400
 800ae48:	40000800 	.word	0x40000800
 800ae4c:	40000c00 	.word	0x40000c00
 800ae50:	40001800 	.word	0x40001800
 800ae54:	00010007 	.word	0x00010007

0800ae58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b086      	sub	sp, #24
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	60f8      	str	r0, [r7, #12]
 800ae60:	60b9      	str	r1, [r7, #8]
 800ae62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae64:	2300      	movs	r3, #0
 800ae66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	d101      	bne.n	800ae76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ae72:	2302      	movs	r3, #2
 800ae74:	e0ff      	b.n	800b076 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2201      	movs	r2, #1
 800ae7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2b14      	cmp	r3, #20
 800ae82:	f200 80f0 	bhi.w	800b066 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ae86:	a201      	add	r2, pc, #4	; (adr r2, 800ae8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ae88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae8c:	0800aee1 	.word	0x0800aee1
 800ae90:	0800b067 	.word	0x0800b067
 800ae94:	0800b067 	.word	0x0800b067
 800ae98:	0800b067 	.word	0x0800b067
 800ae9c:	0800af21 	.word	0x0800af21
 800aea0:	0800b067 	.word	0x0800b067
 800aea4:	0800b067 	.word	0x0800b067
 800aea8:	0800b067 	.word	0x0800b067
 800aeac:	0800af63 	.word	0x0800af63
 800aeb0:	0800b067 	.word	0x0800b067
 800aeb4:	0800b067 	.word	0x0800b067
 800aeb8:	0800b067 	.word	0x0800b067
 800aebc:	0800afa3 	.word	0x0800afa3
 800aec0:	0800b067 	.word	0x0800b067
 800aec4:	0800b067 	.word	0x0800b067
 800aec8:	0800b067 	.word	0x0800b067
 800aecc:	0800afe5 	.word	0x0800afe5
 800aed0:	0800b067 	.word	0x0800b067
 800aed4:	0800b067 	.word	0x0800b067
 800aed8:	0800b067 	.word	0x0800b067
 800aedc:	0800b025 	.word	0x0800b025
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	68b9      	ldr	r1, [r7, #8]
 800aee6:	4618      	mov	r0, r3
 800aee8:	f000 f964 	bl	800b1b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	699a      	ldr	r2, [r3, #24]
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f042 0208 	orr.w	r2, r2, #8
 800aefa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	699a      	ldr	r2, [r3, #24]
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f022 0204 	bic.w	r2, r2, #4
 800af0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	6999      	ldr	r1, [r3, #24]
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	691a      	ldr	r2, [r3, #16]
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	430a      	orrs	r2, r1
 800af1c:	619a      	str	r2, [r3, #24]
      break;
 800af1e:	e0a5      	b.n	800b06c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	68b9      	ldr	r1, [r7, #8]
 800af26:	4618      	mov	r0, r3
 800af28:	f000 f9d4 	bl	800b2d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	699a      	ldr	r2, [r3, #24]
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	699a      	ldr	r2, [r3, #24]
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	6999      	ldr	r1, [r3, #24]
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	691b      	ldr	r3, [r3, #16]
 800af56:	021a      	lsls	r2, r3, #8
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	430a      	orrs	r2, r1
 800af5e:	619a      	str	r2, [r3, #24]
      break;
 800af60:	e084      	b.n	800b06c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	68b9      	ldr	r1, [r7, #8]
 800af68:	4618      	mov	r0, r3
 800af6a:	f000 fa3d 	bl	800b3e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	69da      	ldr	r2, [r3, #28]
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f042 0208 	orr.w	r2, r2, #8
 800af7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	69da      	ldr	r2, [r3, #28]
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f022 0204 	bic.w	r2, r2, #4
 800af8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	69d9      	ldr	r1, [r3, #28]
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	691a      	ldr	r2, [r3, #16]
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	430a      	orrs	r2, r1
 800af9e:	61da      	str	r2, [r3, #28]
      break;
 800afa0:	e064      	b.n	800b06c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	68b9      	ldr	r1, [r7, #8]
 800afa8:	4618      	mov	r0, r3
 800afaa:	f000 faa5 	bl	800b4f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	69da      	ldr	r2, [r3, #28]
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800afbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	69da      	ldr	r2, [r3, #28]
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800afcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	69d9      	ldr	r1, [r3, #28]
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	691b      	ldr	r3, [r3, #16]
 800afd8:	021a      	lsls	r2, r3, #8
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	430a      	orrs	r2, r1
 800afe0:	61da      	str	r2, [r3, #28]
      break;
 800afe2:	e043      	b.n	800b06c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	68b9      	ldr	r1, [r7, #8]
 800afea:	4618      	mov	r0, r3
 800afec:	f000 faee 	bl	800b5cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f042 0208 	orr.w	r2, r2, #8
 800affe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f022 0204 	bic.w	r2, r2, #4
 800b00e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	691a      	ldr	r2, [r3, #16]
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	430a      	orrs	r2, r1
 800b020:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b022:	e023      	b.n	800b06c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	68b9      	ldr	r1, [r7, #8]
 800b02a:	4618      	mov	r0, r3
 800b02c:	f000 fb32 	bl	800b694 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b03e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b04e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	691b      	ldr	r3, [r3, #16]
 800b05a:	021a      	lsls	r2, r3, #8
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	430a      	orrs	r2, r1
 800b062:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b064:	e002      	b.n	800b06c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b066:	2301      	movs	r3, #1
 800b068:	75fb      	strb	r3, [r7, #23]
      break;
 800b06a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	2200      	movs	r2, #0
 800b070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b074:	7dfb      	ldrb	r3, [r7, #23]
}
 800b076:	4618      	mov	r0, r3
 800b078:	3718      	adds	r7, #24
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop

0800b080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b080:	b480      	push	{r7}
 800b082:	b085      	sub	sp, #20
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	4a40      	ldr	r2, [pc, #256]	; (800b194 <TIM_Base_SetConfig+0x114>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d013      	beq.n	800b0c0 <TIM_Base_SetConfig+0x40>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b09e:	d00f      	beq.n	800b0c0 <TIM_Base_SetConfig+0x40>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	4a3d      	ldr	r2, [pc, #244]	; (800b198 <TIM_Base_SetConfig+0x118>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d00b      	beq.n	800b0c0 <TIM_Base_SetConfig+0x40>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	4a3c      	ldr	r2, [pc, #240]	; (800b19c <TIM_Base_SetConfig+0x11c>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d007      	beq.n	800b0c0 <TIM_Base_SetConfig+0x40>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	4a3b      	ldr	r2, [pc, #236]	; (800b1a0 <TIM_Base_SetConfig+0x120>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d003      	beq.n	800b0c0 <TIM_Base_SetConfig+0x40>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	4a3a      	ldr	r2, [pc, #232]	; (800b1a4 <TIM_Base_SetConfig+0x124>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d108      	bne.n	800b0d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	68fa      	ldr	r2, [r7, #12]
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	4a2f      	ldr	r2, [pc, #188]	; (800b194 <TIM_Base_SetConfig+0x114>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d01f      	beq.n	800b11a <TIM_Base_SetConfig+0x9a>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0e0:	d01b      	beq.n	800b11a <TIM_Base_SetConfig+0x9a>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	4a2c      	ldr	r2, [pc, #176]	; (800b198 <TIM_Base_SetConfig+0x118>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d017      	beq.n	800b11a <TIM_Base_SetConfig+0x9a>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	4a2b      	ldr	r2, [pc, #172]	; (800b19c <TIM_Base_SetConfig+0x11c>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d013      	beq.n	800b11a <TIM_Base_SetConfig+0x9a>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	4a2a      	ldr	r2, [pc, #168]	; (800b1a0 <TIM_Base_SetConfig+0x120>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d00f      	beq.n	800b11a <TIM_Base_SetConfig+0x9a>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	4a29      	ldr	r2, [pc, #164]	; (800b1a4 <TIM_Base_SetConfig+0x124>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d00b      	beq.n	800b11a <TIM_Base_SetConfig+0x9a>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	4a28      	ldr	r2, [pc, #160]	; (800b1a8 <TIM_Base_SetConfig+0x128>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d007      	beq.n	800b11a <TIM_Base_SetConfig+0x9a>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	4a27      	ldr	r2, [pc, #156]	; (800b1ac <TIM_Base_SetConfig+0x12c>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d003      	beq.n	800b11a <TIM_Base_SetConfig+0x9a>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	4a26      	ldr	r2, [pc, #152]	; (800b1b0 <TIM_Base_SetConfig+0x130>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d108      	bne.n	800b12c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b120:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	68db      	ldr	r3, [r3, #12]
 800b126:	68fa      	ldr	r2, [r7, #12]
 800b128:	4313      	orrs	r3, r2
 800b12a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	695b      	ldr	r3, [r3, #20]
 800b136:	4313      	orrs	r3, r2
 800b138:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	68fa      	ldr	r2, [r7, #12]
 800b13e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	689a      	ldr	r2, [r3, #8]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	681a      	ldr	r2, [r3, #0]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	4a10      	ldr	r2, [pc, #64]	; (800b194 <TIM_Base_SetConfig+0x114>)
 800b154:	4293      	cmp	r3, r2
 800b156:	d00f      	beq.n	800b178 <TIM_Base_SetConfig+0xf8>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	4a12      	ldr	r2, [pc, #72]	; (800b1a4 <TIM_Base_SetConfig+0x124>)
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d00b      	beq.n	800b178 <TIM_Base_SetConfig+0xf8>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	4a11      	ldr	r2, [pc, #68]	; (800b1a8 <TIM_Base_SetConfig+0x128>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d007      	beq.n	800b178 <TIM_Base_SetConfig+0xf8>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	4a10      	ldr	r2, [pc, #64]	; (800b1ac <TIM_Base_SetConfig+0x12c>)
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d003      	beq.n	800b178 <TIM_Base_SetConfig+0xf8>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	4a0f      	ldr	r2, [pc, #60]	; (800b1b0 <TIM_Base_SetConfig+0x130>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d103      	bne.n	800b180 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	691a      	ldr	r2, [r3, #16]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2201      	movs	r2, #1
 800b184:	615a      	str	r2, [r3, #20]
}
 800b186:	bf00      	nop
 800b188:	3714      	adds	r7, #20
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr
 800b192:	bf00      	nop
 800b194:	40010000 	.word	0x40010000
 800b198:	40000400 	.word	0x40000400
 800b19c:	40000800 	.word	0x40000800
 800b1a0:	40000c00 	.word	0x40000c00
 800b1a4:	40010400 	.word	0x40010400
 800b1a8:	40014000 	.word	0x40014000
 800b1ac:	40014400 	.word	0x40014400
 800b1b0:	40014800 	.word	0x40014800

0800b1b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b087      	sub	sp, #28
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6a1b      	ldr	r3, [r3, #32]
 800b1c2:	f023 0201 	bic.w	r2, r3, #1
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6a1b      	ldr	r3, [r3, #32]
 800b1ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	699b      	ldr	r3, [r3, #24]
 800b1da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b1dc:	68fa      	ldr	r2, [r7, #12]
 800b1de:	4b37      	ldr	r3, [pc, #220]	; (800b2bc <TIM_OC1_SetConfig+0x108>)
 800b1e0:	4013      	ands	r3, r2
 800b1e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f023 0303 	bic.w	r3, r3, #3
 800b1ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	68fa      	ldr	r2, [r7, #12]
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	f023 0302 	bic.w	r3, r3, #2
 800b1fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	689b      	ldr	r3, [r3, #8]
 800b202:	697a      	ldr	r2, [r7, #20]
 800b204:	4313      	orrs	r3, r2
 800b206:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	4a2d      	ldr	r2, [pc, #180]	; (800b2c0 <TIM_OC1_SetConfig+0x10c>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d00f      	beq.n	800b230 <TIM_OC1_SetConfig+0x7c>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	4a2c      	ldr	r2, [pc, #176]	; (800b2c4 <TIM_OC1_SetConfig+0x110>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d00b      	beq.n	800b230 <TIM_OC1_SetConfig+0x7c>
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	4a2b      	ldr	r2, [pc, #172]	; (800b2c8 <TIM_OC1_SetConfig+0x114>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d007      	beq.n	800b230 <TIM_OC1_SetConfig+0x7c>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	4a2a      	ldr	r2, [pc, #168]	; (800b2cc <TIM_OC1_SetConfig+0x118>)
 800b224:	4293      	cmp	r3, r2
 800b226:	d003      	beq.n	800b230 <TIM_OC1_SetConfig+0x7c>
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	4a29      	ldr	r2, [pc, #164]	; (800b2d0 <TIM_OC1_SetConfig+0x11c>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d10c      	bne.n	800b24a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	f023 0308 	bic.w	r3, r3, #8
 800b236:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	68db      	ldr	r3, [r3, #12]
 800b23c:	697a      	ldr	r2, [r7, #20]
 800b23e:	4313      	orrs	r3, r2
 800b240:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	f023 0304 	bic.w	r3, r3, #4
 800b248:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	4a1c      	ldr	r2, [pc, #112]	; (800b2c0 <TIM_OC1_SetConfig+0x10c>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d00f      	beq.n	800b272 <TIM_OC1_SetConfig+0xbe>
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	4a1b      	ldr	r2, [pc, #108]	; (800b2c4 <TIM_OC1_SetConfig+0x110>)
 800b256:	4293      	cmp	r3, r2
 800b258:	d00b      	beq.n	800b272 <TIM_OC1_SetConfig+0xbe>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	4a1a      	ldr	r2, [pc, #104]	; (800b2c8 <TIM_OC1_SetConfig+0x114>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d007      	beq.n	800b272 <TIM_OC1_SetConfig+0xbe>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	4a19      	ldr	r2, [pc, #100]	; (800b2cc <TIM_OC1_SetConfig+0x118>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d003      	beq.n	800b272 <TIM_OC1_SetConfig+0xbe>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	4a18      	ldr	r2, [pc, #96]	; (800b2d0 <TIM_OC1_SetConfig+0x11c>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	d111      	bne.n	800b296 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	695b      	ldr	r3, [r3, #20]
 800b286:	693a      	ldr	r2, [r7, #16]
 800b288:	4313      	orrs	r3, r2
 800b28a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	699b      	ldr	r3, [r3, #24]
 800b290:	693a      	ldr	r2, [r7, #16]
 800b292:	4313      	orrs	r3, r2
 800b294:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	693a      	ldr	r2, [r7, #16]
 800b29a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	68fa      	ldr	r2, [r7, #12]
 800b2a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	685a      	ldr	r2, [r3, #4]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	697a      	ldr	r2, [r7, #20]
 800b2ae:	621a      	str	r2, [r3, #32]
}
 800b2b0:	bf00      	nop
 800b2b2:	371c      	adds	r7, #28
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr
 800b2bc:	fffeff8f 	.word	0xfffeff8f
 800b2c0:	40010000 	.word	0x40010000
 800b2c4:	40010400 	.word	0x40010400
 800b2c8:	40014000 	.word	0x40014000
 800b2cc:	40014400 	.word	0x40014400
 800b2d0:	40014800 	.word	0x40014800

0800b2d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b087      	sub	sp, #28
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6a1b      	ldr	r3, [r3, #32]
 800b2e2:	f023 0210 	bic.w	r2, r3, #16
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6a1b      	ldr	r3, [r3, #32]
 800b2ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	685b      	ldr	r3, [r3, #4]
 800b2f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	699b      	ldr	r3, [r3, #24]
 800b2fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b2fc:	68fa      	ldr	r2, [r7, #12]
 800b2fe:	4b34      	ldr	r3, [pc, #208]	; (800b3d0 <TIM_OC2_SetConfig+0xfc>)
 800b300:	4013      	ands	r3, r2
 800b302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b30a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	021b      	lsls	r3, r3, #8
 800b312:	68fa      	ldr	r2, [r7, #12]
 800b314:	4313      	orrs	r3, r2
 800b316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	f023 0320 	bic.w	r3, r3, #32
 800b31e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	011b      	lsls	r3, r3, #4
 800b326:	697a      	ldr	r2, [r7, #20]
 800b328:	4313      	orrs	r3, r2
 800b32a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	4a29      	ldr	r2, [pc, #164]	; (800b3d4 <TIM_OC2_SetConfig+0x100>)
 800b330:	4293      	cmp	r3, r2
 800b332:	d003      	beq.n	800b33c <TIM_OC2_SetConfig+0x68>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	4a28      	ldr	r2, [pc, #160]	; (800b3d8 <TIM_OC2_SetConfig+0x104>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d10d      	bne.n	800b358 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	68db      	ldr	r3, [r3, #12]
 800b348:	011b      	lsls	r3, r3, #4
 800b34a:	697a      	ldr	r2, [r7, #20]
 800b34c:	4313      	orrs	r3, r2
 800b34e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b356:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	4a1e      	ldr	r2, [pc, #120]	; (800b3d4 <TIM_OC2_SetConfig+0x100>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d00f      	beq.n	800b380 <TIM_OC2_SetConfig+0xac>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	4a1d      	ldr	r2, [pc, #116]	; (800b3d8 <TIM_OC2_SetConfig+0x104>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d00b      	beq.n	800b380 <TIM_OC2_SetConfig+0xac>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	4a1c      	ldr	r2, [pc, #112]	; (800b3dc <TIM_OC2_SetConfig+0x108>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d007      	beq.n	800b380 <TIM_OC2_SetConfig+0xac>
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	4a1b      	ldr	r2, [pc, #108]	; (800b3e0 <TIM_OC2_SetConfig+0x10c>)
 800b374:	4293      	cmp	r3, r2
 800b376:	d003      	beq.n	800b380 <TIM_OC2_SetConfig+0xac>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	4a1a      	ldr	r2, [pc, #104]	; (800b3e4 <TIM_OC2_SetConfig+0x110>)
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d113      	bne.n	800b3a8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b386:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b38e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	695b      	ldr	r3, [r3, #20]
 800b394:	009b      	lsls	r3, r3, #2
 800b396:	693a      	ldr	r2, [r7, #16]
 800b398:	4313      	orrs	r3, r2
 800b39a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	699b      	ldr	r3, [r3, #24]
 800b3a0:	009b      	lsls	r3, r3, #2
 800b3a2:	693a      	ldr	r2, [r7, #16]
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	693a      	ldr	r2, [r7, #16]
 800b3ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	68fa      	ldr	r2, [r7, #12]
 800b3b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	685a      	ldr	r2, [r3, #4]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	697a      	ldr	r2, [r7, #20]
 800b3c0:	621a      	str	r2, [r3, #32]
}
 800b3c2:	bf00      	nop
 800b3c4:	371c      	adds	r7, #28
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr
 800b3ce:	bf00      	nop
 800b3d0:	feff8fff 	.word	0xfeff8fff
 800b3d4:	40010000 	.word	0x40010000
 800b3d8:	40010400 	.word	0x40010400
 800b3dc:	40014000 	.word	0x40014000
 800b3e0:	40014400 	.word	0x40014400
 800b3e4:	40014800 	.word	0x40014800

0800b3e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b087      	sub	sp, #28
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6a1b      	ldr	r3, [r3, #32]
 800b3f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6a1b      	ldr	r3, [r3, #32]
 800b402:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	685b      	ldr	r3, [r3, #4]
 800b408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	69db      	ldr	r3, [r3, #28]
 800b40e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b410:	68fa      	ldr	r2, [r7, #12]
 800b412:	4b33      	ldr	r3, [pc, #204]	; (800b4e0 <TIM_OC3_SetConfig+0xf8>)
 800b414:	4013      	ands	r3, r2
 800b416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	f023 0303 	bic.w	r3, r3, #3
 800b41e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	68fa      	ldr	r2, [r7, #12]
 800b426:	4313      	orrs	r3, r2
 800b428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b430:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	689b      	ldr	r3, [r3, #8]
 800b436:	021b      	lsls	r3, r3, #8
 800b438:	697a      	ldr	r2, [r7, #20]
 800b43a:	4313      	orrs	r3, r2
 800b43c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	4a28      	ldr	r2, [pc, #160]	; (800b4e4 <TIM_OC3_SetConfig+0xfc>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d003      	beq.n	800b44e <TIM_OC3_SetConfig+0x66>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	4a27      	ldr	r2, [pc, #156]	; (800b4e8 <TIM_OC3_SetConfig+0x100>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d10d      	bne.n	800b46a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b454:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	68db      	ldr	r3, [r3, #12]
 800b45a:	021b      	lsls	r3, r3, #8
 800b45c:	697a      	ldr	r2, [r7, #20]
 800b45e:	4313      	orrs	r3, r2
 800b460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	4a1d      	ldr	r2, [pc, #116]	; (800b4e4 <TIM_OC3_SetConfig+0xfc>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d00f      	beq.n	800b492 <TIM_OC3_SetConfig+0xaa>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	4a1c      	ldr	r2, [pc, #112]	; (800b4e8 <TIM_OC3_SetConfig+0x100>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d00b      	beq.n	800b492 <TIM_OC3_SetConfig+0xaa>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	4a1b      	ldr	r2, [pc, #108]	; (800b4ec <TIM_OC3_SetConfig+0x104>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d007      	beq.n	800b492 <TIM_OC3_SetConfig+0xaa>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	4a1a      	ldr	r2, [pc, #104]	; (800b4f0 <TIM_OC3_SetConfig+0x108>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d003      	beq.n	800b492 <TIM_OC3_SetConfig+0xaa>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	4a19      	ldr	r2, [pc, #100]	; (800b4f4 <TIM_OC3_SetConfig+0x10c>)
 800b48e:	4293      	cmp	r3, r2
 800b490:	d113      	bne.n	800b4ba <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b498:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b4a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	695b      	ldr	r3, [r3, #20]
 800b4a6:	011b      	lsls	r3, r3, #4
 800b4a8:	693a      	ldr	r2, [r7, #16]
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	699b      	ldr	r3, [r3, #24]
 800b4b2:	011b      	lsls	r3, r3, #4
 800b4b4:	693a      	ldr	r2, [r7, #16]
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	693a      	ldr	r2, [r7, #16]
 800b4be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	68fa      	ldr	r2, [r7, #12]
 800b4c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	685a      	ldr	r2, [r3, #4]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	697a      	ldr	r2, [r7, #20]
 800b4d2:	621a      	str	r2, [r3, #32]
}
 800b4d4:	bf00      	nop
 800b4d6:	371c      	adds	r7, #28
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr
 800b4e0:	fffeff8f 	.word	0xfffeff8f
 800b4e4:	40010000 	.word	0x40010000
 800b4e8:	40010400 	.word	0x40010400
 800b4ec:	40014000 	.word	0x40014000
 800b4f0:	40014400 	.word	0x40014400
 800b4f4:	40014800 	.word	0x40014800

0800b4f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b087      	sub	sp, #28
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6a1b      	ldr	r3, [r3, #32]
 800b506:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6a1b      	ldr	r3, [r3, #32]
 800b512:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	685b      	ldr	r3, [r3, #4]
 800b518:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	69db      	ldr	r3, [r3, #28]
 800b51e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b520:	68fa      	ldr	r2, [r7, #12]
 800b522:	4b24      	ldr	r3, [pc, #144]	; (800b5b4 <TIM_OC4_SetConfig+0xbc>)
 800b524:	4013      	ands	r3, r2
 800b526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b52e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	021b      	lsls	r3, r3, #8
 800b536:	68fa      	ldr	r2, [r7, #12]
 800b538:	4313      	orrs	r3, r2
 800b53a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b542:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	689b      	ldr	r3, [r3, #8]
 800b548:	031b      	lsls	r3, r3, #12
 800b54a:	693a      	ldr	r2, [r7, #16]
 800b54c:	4313      	orrs	r3, r2
 800b54e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	4a19      	ldr	r2, [pc, #100]	; (800b5b8 <TIM_OC4_SetConfig+0xc0>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d00f      	beq.n	800b578 <TIM_OC4_SetConfig+0x80>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	4a18      	ldr	r2, [pc, #96]	; (800b5bc <TIM_OC4_SetConfig+0xc4>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d00b      	beq.n	800b578 <TIM_OC4_SetConfig+0x80>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	4a17      	ldr	r2, [pc, #92]	; (800b5c0 <TIM_OC4_SetConfig+0xc8>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d007      	beq.n	800b578 <TIM_OC4_SetConfig+0x80>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	4a16      	ldr	r2, [pc, #88]	; (800b5c4 <TIM_OC4_SetConfig+0xcc>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d003      	beq.n	800b578 <TIM_OC4_SetConfig+0x80>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	4a15      	ldr	r2, [pc, #84]	; (800b5c8 <TIM_OC4_SetConfig+0xd0>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d109      	bne.n	800b58c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b57e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	695b      	ldr	r3, [r3, #20]
 800b584:	019b      	lsls	r3, r3, #6
 800b586:	697a      	ldr	r2, [r7, #20]
 800b588:	4313      	orrs	r3, r2
 800b58a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	697a      	ldr	r2, [r7, #20]
 800b590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	68fa      	ldr	r2, [r7, #12]
 800b596:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	685a      	ldr	r2, [r3, #4]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	693a      	ldr	r2, [r7, #16]
 800b5a4:	621a      	str	r2, [r3, #32]
}
 800b5a6:	bf00      	nop
 800b5a8:	371c      	adds	r7, #28
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b0:	4770      	bx	lr
 800b5b2:	bf00      	nop
 800b5b4:	feff8fff 	.word	0xfeff8fff
 800b5b8:	40010000 	.word	0x40010000
 800b5bc:	40010400 	.word	0x40010400
 800b5c0:	40014000 	.word	0x40014000
 800b5c4:	40014400 	.word	0x40014400
 800b5c8:	40014800 	.word	0x40014800

0800b5cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b087      	sub	sp, #28
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6a1b      	ldr	r3, [r3, #32]
 800b5da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6a1b      	ldr	r3, [r3, #32]
 800b5e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b5f4:	68fa      	ldr	r2, [r7, #12]
 800b5f6:	4b21      	ldr	r3, [pc, #132]	; (800b67c <TIM_OC5_SetConfig+0xb0>)
 800b5f8:	4013      	ands	r3, r2
 800b5fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	68fa      	ldr	r2, [r7, #12]
 800b602:	4313      	orrs	r3, r2
 800b604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b60c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	689b      	ldr	r3, [r3, #8]
 800b612:	041b      	lsls	r3, r3, #16
 800b614:	693a      	ldr	r2, [r7, #16]
 800b616:	4313      	orrs	r3, r2
 800b618:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	4a18      	ldr	r2, [pc, #96]	; (800b680 <TIM_OC5_SetConfig+0xb4>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d00f      	beq.n	800b642 <TIM_OC5_SetConfig+0x76>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	4a17      	ldr	r2, [pc, #92]	; (800b684 <TIM_OC5_SetConfig+0xb8>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d00b      	beq.n	800b642 <TIM_OC5_SetConfig+0x76>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	4a16      	ldr	r2, [pc, #88]	; (800b688 <TIM_OC5_SetConfig+0xbc>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d007      	beq.n	800b642 <TIM_OC5_SetConfig+0x76>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	4a15      	ldr	r2, [pc, #84]	; (800b68c <TIM_OC5_SetConfig+0xc0>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d003      	beq.n	800b642 <TIM_OC5_SetConfig+0x76>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	4a14      	ldr	r2, [pc, #80]	; (800b690 <TIM_OC5_SetConfig+0xc4>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d109      	bne.n	800b656 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b648:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	695b      	ldr	r3, [r3, #20]
 800b64e:	021b      	lsls	r3, r3, #8
 800b650:	697a      	ldr	r2, [r7, #20]
 800b652:	4313      	orrs	r3, r2
 800b654:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	697a      	ldr	r2, [r7, #20]
 800b65a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	68fa      	ldr	r2, [r7, #12]
 800b660:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	685a      	ldr	r2, [r3, #4]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	693a      	ldr	r2, [r7, #16]
 800b66e:	621a      	str	r2, [r3, #32]
}
 800b670:	bf00      	nop
 800b672:	371c      	adds	r7, #28
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr
 800b67c:	fffeff8f 	.word	0xfffeff8f
 800b680:	40010000 	.word	0x40010000
 800b684:	40010400 	.word	0x40010400
 800b688:	40014000 	.word	0x40014000
 800b68c:	40014400 	.word	0x40014400
 800b690:	40014800 	.word	0x40014800

0800b694 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b694:	b480      	push	{r7}
 800b696:	b087      	sub	sp, #28
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6a1b      	ldr	r3, [r3, #32]
 800b6a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6a1b      	ldr	r3, [r3, #32]
 800b6ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b6bc:	68fa      	ldr	r2, [r7, #12]
 800b6be:	4b22      	ldr	r3, [pc, #136]	; (800b748 <TIM_OC6_SetConfig+0xb4>)
 800b6c0:	4013      	ands	r3, r2
 800b6c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	021b      	lsls	r3, r3, #8
 800b6ca:	68fa      	ldr	r2, [r7, #12]
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b6d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	689b      	ldr	r3, [r3, #8]
 800b6dc:	051b      	lsls	r3, r3, #20
 800b6de:	693a      	ldr	r2, [r7, #16]
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	4a19      	ldr	r2, [pc, #100]	; (800b74c <TIM_OC6_SetConfig+0xb8>)
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d00f      	beq.n	800b70c <TIM_OC6_SetConfig+0x78>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	4a18      	ldr	r2, [pc, #96]	; (800b750 <TIM_OC6_SetConfig+0xbc>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d00b      	beq.n	800b70c <TIM_OC6_SetConfig+0x78>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	4a17      	ldr	r2, [pc, #92]	; (800b754 <TIM_OC6_SetConfig+0xc0>)
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d007      	beq.n	800b70c <TIM_OC6_SetConfig+0x78>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	4a16      	ldr	r2, [pc, #88]	; (800b758 <TIM_OC6_SetConfig+0xc4>)
 800b700:	4293      	cmp	r3, r2
 800b702:	d003      	beq.n	800b70c <TIM_OC6_SetConfig+0x78>
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	4a15      	ldr	r2, [pc, #84]	; (800b75c <TIM_OC6_SetConfig+0xc8>)
 800b708:	4293      	cmp	r3, r2
 800b70a:	d109      	bne.n	800b720 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b712:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	695b      	ldr	r3, [r3, #20]
 800b718:	029b      	lsls	r3, r3, #10
 800b71a:	697a      	ldr	r2, [r7, #20]
 800b71c:	4313      	orrs	r3, r2
 800b71e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	697a      	ldr	r2, [r7, #20]
 800b724:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	68fa      	ldr	r2, [r7, #12]
 800b72a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	685a      	ldr	r2, [r3, #4]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	693a      	ldr	r2, [r7, #16]
 800b738:	621a      	str	r2, [r3, #32]
}
 800b73a:	bf00      	nop
 800b73c:	371c      	adds	r7, #28
 800b73e:	46bd      	mov	sp, r7
 800b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b744:	4770      	bx	lr
 800b746:	bf00      	nop
 800b748:	feff8fff 	.word	0xfeff8fff
 800b74c:	40010000 	.word	0x40010000
 800b750:	40010400 	.word	0x40010400
 800b754:	40014000 	.word	0x40014000
 800b758:	40014400 	.word	0x40014400
 800b75c:	40014800 	.word	0x40014800

0800b760 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b760:	b480      	push	{r7}
 800b762:	b087      	sub	sp, #28
 800b764:	af00      	add	r7, sp, #0
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	60b9      	str	r1, [r7, #8]
 800b76a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	f003 031f 	and.w	r3, r3, #31
 800b772:	2201      	movs	r2, #1
 800b774:	fa02 f303 	lsl.w	r3, r2, r3
 800b778:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	6a1a      	ldr	r2, [r3, #32]
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	43db      	mvns	r3, r3
 800b782:	401a      	ands	r2, r3
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	6a1a      	ldr	r2, [r3, #32]
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	f003 031f 	and.w	r3, r3, #31
 800b792:	6879      	ldr	r1, [r7, #4]
 800b794:	fa01 f303 	lsl.w	r3, r1, r3
 800b798:	431a      	orrs	r2, r3
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	621a      	str	r2, [r3, #32]
}
 800b79e:	bf00      	nop
 800b7a0:	371c      	adds	r7, #28
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a8:	4770      	bx	lr
	...

0800b7ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b085      	sub	sp, #20
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d101      	bne.n	800b7c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b7c0:	2302      	movs	r3, #2
 800b7c2:	e06d      	b.n	800b8a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2202      	movs	r2, #2
 800b7d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	689b      	ldr	r3, [r3, #8]
 800b7e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	4a30      	ldr	r2, [pc, #192]	; (800b8ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d004      	beq.n	800b7f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	4a2f      	ldr	r2, [pc, #188]	; (800b8b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d108      	bne.n	800b80a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b7fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	68fa      	ldr	r2, [r7, #12]
 800b806:	4313      	orrs	r3, r2
 800b808:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b810:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	68fa      	ldr	r2, [r7, #12]
 800b818:	4313      	orrs	r3, r2
 800b81a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	68fa      	ldr	r2, [r7, #12]
 800b822:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	4a20      	ldr	r2, [pc, #128]	; (800b8ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d022      	beq.n	800b874 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b836:	d01d      	beq.n	800b874 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4a1d      	ldr	r2, [pc, #116]	; (800b8b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d018      	beq.n	800b874 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	4a1c      	ldr	r2, [pc, #112]	; (800b8b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d013      	beq.n	800b874 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4a1a      	ldr	r2, [pc, #104]	; (800b8bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d00e      	beq.n	800b874 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	4a15      	ldr	r2, [pc, #84]	; (800b8b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d009      	beq.n	800b874 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4a16      	ldr	r2, [pc, #88]	; (800b8c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d004      	beq.n	800b874 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4a15      	ldr	r2, [pc, #84]	; (800b8c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d10c      	bne.n	800b88e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b87a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	689b      	ldr	r3, [r3, #8]
 800b880:	68ba      	ldr	r2, [r7, #8]
 800b882:	4313      	orrs	r3, r2
 800b884:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	68ba      	ldr	r2, [r7, #8]
 800b88c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2201      	movs	r2, #1
 800b892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2200      	movs	r2, #0
 800b89a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b89e:	2300      	movs	r3, #0
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3714      	adds	r7, #20
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8aa:	4770      	bx	lr
 800b8ac:	40010000 	.word	0x40010000
 800b8b0:	40010400 	.word	0x40010400
 800b8b4:	40000400 	.word	0x40000400
 800b8b8:	40000800 	.word	0x40000800
 800b8bc:	40000c00 	.word	0x40000c00
 800b8c0:	40001800 	.word	0x40001800
 800b8c4:	40014000 	.word	0x40014000

0800b8c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b085      	sub	sp, #20
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8dc:	2b01      	cmp	r3, #1
 800b8de:	d101      	bne.n	800b8e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b8e0:	2302      	movs	r3, #2
 800b8e2:	e065      	b.n	800b9b0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2201      	movs	r2, #1
 800b8e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	68db      	ldr	r3, [r3, #12]
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	689b      	ldr	r3, [r3, #8]
 800b904:	4313      	orrs	r3, r2
 800b906:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	4313      	orrs	r3, r2
 800b914:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4313      	orrs	r3, r2
 800b922:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	691b      	ldr	r3, [r3, #16]
 800b92e:	4313      	orrs	r3, r2
 800b930:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	695b      	ldr	r3, [r3, #20]
 800b93c:	4313      	orrs	r3, r2
 800b93e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b94a:	4313      	orrs	r3, r2
 800b94c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	699b      	ldr	r3, [r3, #24]
 800b958:	041b      	lsls	r3, r3, #16
 800b95a:	4313      	orrs	r3, r2
 800b95c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	4a16      	ldr	r2, [pc, #88]	; (800b9bc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d004      	beq.n	800b972 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4a14      	ldr	r2, [pc, #80]	; (800b9c0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d115      	bne.n	800b99e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b97c:	051b      	lsls	r3, r3, #20
 800b97e:	4313      	orrs	r3, r2
 800b980:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	69db      	ldr	r3, [r3, #28]
 800b98c:	4313      	orrs	r3, r2
 800b98e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	6a1b      	ldr	r3, [r3, #32]
 800b99a:	4313      	orrs	r3, r2
 800b99c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	68fa      	ldr	r2, [r7, #12]
 800b9a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b9ae:	2300      	movs	r3, #0
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3714      	adds	r7, #20
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ba:	4770      	bx	lr
 800b9bc:	40010000 	.word	0x40010000
 800b9c0:	40010400 	.word	0x40010400

0800b9c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b082      	sub	sp, #8
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d101      	bne.n	800b9d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	e042      	b.n	800ba5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d106      	bne.n	800b9ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f7f5 fe2d 	bl	8001648 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2224      	movs	r2, #36	; 0x24
 800b9f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	681a      	ldr	r2, [r3, #0]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f022 0201 	bic.w	r2, r2, #1
 800ba04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f000 f82c 	bl	800ba64 <UART_SetConfig>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d101      	bne.n	800ba16 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ba12:	2301      	movs	r3, #1
 800ba14:	e022      	b.n	800ba5c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d002      	beq.n	800ba24 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f000 fd88 	bl	800c534 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	685a      	ldr	r2, [r3, #4]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ba32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	689a      	ldr	r2, [r3, #8]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ba42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	681a      	ldr	r2, [r3, #0]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f042 0201 	orr.w	r2, r2, #1
 800ba52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 fe0f 	bl	800c678 <UART_CheckIdleState>
 800ba5a:	4603      	mov	r3, r0
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	3708      	adds	r7, #8
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}

0800ba64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ba64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ba68:	b092      	sub	sp, #72	; 0x48
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	689a      	ldr	r2, [r3, #8]
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	691b      	ldr	r3, [r3, #16]
 800ba7c:	431a      	orrs	r2, r3
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	695b      	ldr	r3, [r3, #20]
 800ba82:	431a      	orrs	r2, r3
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	69db      	ldr	r3, [r3, #28]
 800ba88:	4313      	orrs	r3, r2
 800ba8a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	681a      	ldr	r2, [r3, #0]
 800ba92:	4bbe      	ldr	r3, [pc, #760]	; (800bd8c <UART_SetConfig+0x328>)
 800ba94:	4013      	ands	r3, r2
 800ba96:	697a      	ldr	r2, [r7, #20]
 800ba98:	6812      	ldr	r2, [r2, #0]
 800ba9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ba9c:	430b      	orrs	r3, r1
 800ba9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	68da      	ldr	r2, [r3, #12]
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	430a      	orrs	r2, r1
 800bab4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	699b      	ldr	r3, [r3, #24]
 800baba:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4ab3      	ldr	r2, [pc, #716]	; (800bd90 <UART_SetConfig+0x32c>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d004      	beq.n	800bad0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	6a1b      	ldr	r3, [r3, #32]
 800baca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bacc:	4313      	orrs	r3, r2
 800bace:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	689a      	ldr	r2, [r3, #8]
 800bad6:	4baf      	ldr	r3, [pc, #700]	; (800bd94 <UART_SetConfig+0x330>)
 800bad8:	4013      	ands	r3, r2
 800bada:	697a      	ldr	r2, [r7, #20]
 800badc:	6812      	ldr	r2, [r2, #0]
 800bade:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bae0:	430b      	orrs	r3, r1
 800bae2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baea:	f023 010f 	bic.w	r1, r3, #15
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	430a      	orrs	r2, r1
 800baf8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	4aa6      	ldr	r2, [pc, #664]	; (800bd98 <UART_SetConfig+0x334>)
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d177      	bne.n	800bbf4 <UART_SetConfig+0x190>
 800bb04:	4ba5      	ldr	r3, [pc, #660]	; (800bd9c <UART_SetConfig+0x338>)
 800bb06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bb0c:	2b28      	cmp	r3, #40	; 0x28
 800bb0e:	d86d      	bhi.n	800bbec <UART_SetConfig+0x188>
 800bb10:	a201      	add	r2, pc, #4	; (adr r2, 800bb18 <UART_SetConfig+0xb4>)
 800bb12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb16:	bf00      	nop
 800bb18:	0800bbbd 	.word	0x0800bbbd
 800bb1c:	0800bbed 	.word	0x0800bbed
 800bb20:	0800bbed 	.word	0x0800bbed
 800bb24:	0800bbed 	.word	0x0800bbed
 800bb28:	0800bbed 	.word	0x0800bbed
 800bb2c:	0800bbed 	.word	0x0800bbed
 800bb30:	0800bbed 	.word	0x0800bbed
 800bb34:	0800bbed 	.word	0x0800bbed
 800bb38:	0800bbc5 	.word	0x0800bbc5
 800bb3c:	0800bbed 	.word	0x0800bbed
 800bb40:	0800bbed 	.word	0x0800bbed
 800bb44:	0800bbed 	.word	0x0800bbed
 800bb48:	0800bbed 	.word	0x0800bbed
 800bb4c:	0800bbed 	.word	0x0800bbed
 800bb50:	0800bbed 	.word	0x0800bbed
 800bb54:	0800bbed 	.word	0x0800bbed
 800bb58:	0800bbcd 	.word	0x0800bbcd
 800bb5c:	0800bbed 	.word	0x0800bbed
 800bb60:	0800bbed 	.word	0x0800bbed
 800bb64:	0800bbed 	.word	0x0800bbed
 800bb68:	0800bbed 	.word	0x0800bbed
 800bb6c:	0800bbed 	.word	0x0800bbed
 800bb70:	0800bbed 	.word	0x0800bbed
 800bb74:	0800bbed 	.word	0x0800bbed
 800bb78:	0800bbd5 	.word	0x0800bbd5
 800bb7c:	0800bbed 	.word	0x0800bbed
 800bb80:	0800bbed 	.word	0x0800bbed
 800bb84:	0800bbed 	.word	0x0800bbed
 800bb88:	0800bbed 	.word	0x0800bbed
 800bb8c:	0800bbed 	.word	0x0800bbed
 800bb90:	0800bbed 	.word	0x0800bbed
 800bb94:	0800bbed 	.word	0x0800bbed
 800bb98:	0800bbdd 	.word	0x0800bbdd
 800bb9c:	0800bbed 	.word	0x0800bbed
 800bba0:	0800bbed 	.word	0x0800bbed
 800bba4:	0800bbed 	.word	0x0800bbed
 800bba8:	0800bbed 	.word	0x0800bbed
 800bbac:	0800bbed 	.word	0x0800bbed
 800bbb0:	0800bbed 	.word	0x0800bbed
 800bbb4:	0800bbed 	.word	0x0800bbed
 800bbb8:	0800bbe5 	.word	0x0800bbe5
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbc2:	e222      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bbc4:	2304      	movs	r3, #4
 800bbc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbca:	e21e      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bbcc:	2308      	movs	r3, #8
 800bbce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbd2:	e21a      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bbd4:	2310      	movs	r3, #16
 800bbd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbda:	e216      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bbdc:	2320      	movs	r3, #32
 800bbde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbe2:	e212      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bbe4:	2340      	movs	r3, #64	; 0x40
 800bbe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbea:	e20e      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bbec:	2380      	movs	r3, #128	; 0x80
 800bbee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbf2:	e20a      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	4a69      	ldr	r2, [pc, #420]	; (800bda0 <UART_SetConfig+0x33c>)
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	d130      	bne.n	800bc60 <UART_SetConfig+0x1fc>
 800bbfe:	4b67      	ldr	r3, [pc, #412]	; (800bd9c <UART_SetConfig+0x338>)
 800bc00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc02:	f003 0307 	and.w	r3, r3, #7
 800bc06:	2b05      	cmp	r3, #5
 800bc08:	d826      	bhi.n	800bc58 <UART_SetConfig+0x1f4>
 800bc0a:	a201      	add	r2, pc, #4	; (adr r2, 800bc10 <UART_SetConfig+0x1ac>)
 800bc0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc10:	0800bc29 	.word	0x0800bc29
 800bc14:	0800bc31 	.word	0x0800bc31
 800bc18:	0800bc39 	.word	0x0800bc39
 800bc1c:	0800bc41 	.word	0x0800bc41
 800bc20:	0800bc49 	.word	0x0800bc49
 800bc24:	0800bc51 	.word	0x0800bc51
 800bc28:	2300      	movs	r3, #0
 800bc2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc2e:	e1ec      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bc30:	2304      	movs	r3, #4
 800bc32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc36:	e1e8      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bc38:	2308      	movs	r3, #8
 800bc3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc3e:	e1e4      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bc40:	2310      	movs	r3, #16
 800bc42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc46:	e1e0      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bc48:	2320      	movs	r3, #32
 800bc4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc4e:	e1dc      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bc50:	2340      	movs	r3, #64	; 0x40
 800bc52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc56:	e1d8      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bc58:	2380      	movs	r3, #128	; 0x80
 800bc5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc5e:	e1d4      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	4a4f      	ldr	r2, [pc, #316]	; (800bda4 <UART_SetConfig+0x340>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d130      	bne.n	800bccc <UART_SetConfig+0x268>
 800bc6a:	4b4c      	ldr	r3, [pc, #304]	; (800bd9c <UART_SetConfig+0x338>)
 800bc6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc6e:	f003 0307 	and.w	r3, r3, #7
 800bc72:	2b05      	cmp	r3, #5
 800bc74:	d826      	bhi.n	800bcc4 <UART_SetConfig+0x260>
 800bc76:	a201      	add	r2, pc, #4	; (adr r2, 800bc7c <UART_SetConfig+0x218>)
 800bc78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc7c:	0800bc95 	.word	0x0800bc95
 800bc80:	0800bc9d 	.word	0x0800bc9d
 800bc84:	0800bca5 	.word	0x0800bca5
 800bc88:	0800bcad 	.word	0x0800bcad
 800bc8c:	0800bcb5 	.word	0x0800bcb5
 800bc90:	0800bcbd 	.word	0x0800bcbd
 800bc94:	2300      	movs	r3, #0
 800bc96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc9a:	e1b6      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bc9c:	2304      	movs	r3, #4
 800bc9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bca2:	e1b2      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bca4:	2308      	movs	r3, #8
 800bca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcaa:	e1ae      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bcac:	2310      	movs	r3, #16
 800bcae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcb2:	e1aa      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bcb4:	2320      	movs	r3, #32
 800bcb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcba:	e1a6      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bcbc:	2340      	movs	r3, #64	; 0x40
 800bcbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcc2:	e1a2      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bcc4:	2380      	movs	r3, #128	; 0x80
 800bcc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcca:	e19e      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	4a35      	ldr	r2, [pc, #212]	; (800bda8 <UART_SetConfig+0x344>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d130      	bne.n	800bd38 <UART_SetConfig+0x2d4>
 800bcd6:	4b31      	ldr	r3, [pc, #196]	; (800bd9c <UART_SetConfig+0x338>)
 800bcd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcda:	f003 0307 	and.w	r3, r3, #7
 800bcde:	2b05      	cmp	r3, #5
 800bce0:	d826      	bhi.n	800bd30 <UART_SetConfig+0x2cc>
 800bce2:	a201      	add	r2, pc, #4	; (adr r2, 800bce8 <UART_SetConfig+0x284>)
 800bce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bce8:	0800bd01 	.word	0x0800bd01
 800bcec:	0800bd09 	.word	0x0800bd09
 800bcf0:	0800bd11 	.word	0x0800bd11
 800bcf4:	0800bd19 	.word	0x0800bd19
 800bcf8:	0800bd21 	.word	0x0800bd21
 800bcfc:	0800bd29 	.word	0x0800bd29
 800bd00:	2300      	movs	r3, #0
 800bd02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd06:	e180      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bd08:	2304      	movs	r3, #4
 800bd0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd0e:	e17c      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bd10:	2308      	movs	r3, #8
 800bd12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd16:	e178      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bd18:	2310      	movs	r3, #16
 800bd1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd1e:	e174      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bd20:	2320      	movs	r3, #32
 800bd22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd26:	e170      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bd28:	2340      	movs	r3, #64	; 0x40
 800bd2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd2e:	e16c      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bd30:	2380      	movs	r3, #128	; 0x80
 800bd32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd36:	e168      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	4a1b      	ldr	r2, [pc, #108]	; (800bdac <UART_SetConfig+0x348>)
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d142      	bne.n	800bdc8 <UART_SetConfig+0x364>
 800bd42:	4b16      	ldr	r3, [pc, #88]	; (800bd9c <UART_SetConfig+0x338>)
 800bd44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd46:	f003 0307 	and.w	r3, r3, #7
 800bd4a:	2b05      	cmp	r3, #5
 800bd4c:	d838      	bhi.n	800bdc0 <UART_SetConfig+0x35c>
 800bd4e:	a201      	add	r2, pc, #4	; (adr r2, 800bd54 <UART_SetConfig+0x2f0>)
 800bd50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd54:	0800bd6d 	.word	0x0800bd6d
 800bd58:	0800bd75 	.word	0x0800bd75
 800bd5c:	0800bd7d 	.word	0x0800bd7d
 800bd60:	0800bd85 	.word	0x0800bd85
 800bd64:	0800bdb1 	.word	0x0800bdb1
 800bd68:	0800bdb9 	.word	0x0800bdb9
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd72:	e14a      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bd74:	2304      	movs	r3, #4
 800bd76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd7a:	e146      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bd7c:	2308      	movs	r3, #8
 800bd7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd82:	e142      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bd84:	2310      	movs	r3, #16
 800bd86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd8a:	e13e      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bd8c:	cfff69f3 	.word	0xcfff69f3
 800bd90:	58000c00 	.word	0x58000c00
 800bd94:	11fff4ff 	.word	0x11fff4ff
 800bd98:	40011000 	.word	0x40011000
 800bd9c:	58024400 	.word	0x58024400
 800bda0:	40004400 	.word	0x40004400
 800bda4:	40004800 	.word	0x40004800
 800bda8:	40004c00 	.word	0x40004c00
 800bdac:	40005000 	.word	0x40005000
 800bdb0:	2320      	movs	r3, #32
 800bdb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdb6:	e128      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bdb8:	2340      	movs	r3, #64	; 0x40
 800bdba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdbe:	e124      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bdc0:	2380      	movs	r3, #128	; 0x80
 800bdc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdc6:	e120      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	4acb      	ldr	r2, [pc, #812]	; (800c0fc <UART_SetConfig+0x698>)
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	d176      	bne.n	800bec0 <UART_SetConfig+0x45c>
 800bdd2:	4bcb      	ldr	r3, [pc, #812]	; (800c100 <UART_SetConfig+0x69c>)
 800bdd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bdda:	2b28      	cmp	r3, #40	; 0x28
 800bddc:	d86c      	bhi.n	800beb8 <UART_SetConfig+0x454>
 800bdde:	a201      	add	r2, pc, #4	; (adr r2, 800bde4 <UART_SetConfig+0x380>)
 800bde0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde4:	0800be89 	.word	0x0800be89
 800bde8:	0800beb9 	.word	0x0800beb9
 800bdec:	0800beb9 	.word	0x0800beb9
 800bdf0:	0800beb9 	.word	0x0800beb9
 800bdf4:	0800beb9 	.word	0x0800beb9
 800bdf8:	0800beb9 	.word	0x0800beb9
 800bdfc:	0800beb9 	.word	0x0800beb9
 800be00:	0800beb9 	.word	0x0800beb9
 800be04:	0800be91 	.word	0x0800be91
 800be08:	0800beb9 	.word	0x0800beb9
 800be0c:	0800beb9 	.word	0x0800beb9
 800be10:	0800beb9 	.word	0x0800beb9
 800be14:	0800beb9 	.word	0x0800beb9
 800be18:	0800beb9 	.word	0x0800beb9
 800be1c:	0800beb9 	.word	0x0800beb9
 800be20:	0800beb9 	.word	0x0800beb9
 800be24:	0800be99 	.word	0x0800be99
 800be28:	0800beb9 	.word	0x0800beb9
 800be2c:	0800beb9 	.word	0x0800beb9
 800be30:	0800beb9 	.word	0x0800beb9
 800be34:	0800beb9 	.word	0x0800beb9
 800be38:	0800beb9 	.word	0x0800beb9
 800be3c:	0800beb9 	.word	0x0800beb9
 800be40:	0800beb9 	.word	0x0800beb9
 800be44:	0800bea1 	.word	0x0800bea1
 800be48:	0800beb9 	.word	0x0800beb9
 800be4c:	0800beb9 	.word	0x0800beb9
 800be50:	0800beb9 	.word	0x0800beb9
 800be54:	0800beb9 	.word	0x0800beb9
 800be58:	0800beb9 	.word	0x0800beb9
 800be5c:	0800beb9 	.word	0x0800beb9
 800be60:	0800beb9 	.word	0x0800beb9
 800be64:	0800bea9 	.word	0x0800bea9
 800be68:	0800beb9 	.word	0x0800beb9
 800be6c:	0800beb9 	.word	0x0800beb9
 800be70:	0800beb9 	.word	0x0800beb9
 800be74:	0800beb9 	.word	0x0800beb9
 800be78:	0800beb9 	.word	0x0800beb9
 800be7c:	0800beb9 	.word	0x0800beb9
 800be80:	0800beb9 	.word	0x0800beb9
 800be84:	0800beb1 	.word	0x0800beb1
 800be88:	2301      	movs	r3, #1
 800be8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be8e:	e0bc      	b.n	800c00a <UART_SetConfig+0x5a6>
 800be90:	2304      	movs	r3, #4
 800be92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be96:	e0b8      	b.n	800c00a <UART_SetConfig+0x5a6>
 800be98:	2308      	movs	r3, #8
 800be9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be9e:	e0b4      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bea0:	2310      	movs	r3, #16
 800bea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bea6:	e0b0      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bea8:	2320      	movs	r3, #32
 800beaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beae:	e0ac      	b.n	800c00a <UART_SetConfig+0x5a6>
 800beb0:	2340      	movs	r3, #64	; 0x40
 800beb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beb6:	e0a8      	b.n	800c00a <UART_SetConfig+0x5a6>
 800beb8:	2380      	movs	r3, #128	; 0x80
 800beba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bebe:	e0a4      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bec0:	697b      	ldr	r3, [r7, #20]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	4a8f      	ldr	r2, [pc, #572]	; (800c104 <UART_SetConfig+0x6a0>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d130      	bne.n	800bf2c <UART_SetConfig+0x4c8>
 800beca:	4b8d      	ldr	r3, [pc, #564]	; (800c100 <UART_SetConfig+0x69c>)
 800becc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bece:	f003 0307 	and.w	r3, r3, #7
 800bed2:	2b05      	cmp	r3, #5
 800bed4:	d826      	bhi.n	800bf24 <UART_SetConfig+0x4c0>
 800bed6:	a201      	add	r2, pc, #4	; (adr r2, 800bedc <UART_SetConfig+0x478>)
 800bed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bedc:	0800bef5 	.word	0x0800bef5
 800bee0:	0800befd 	.word	0x0800befd
 800bee4:	0800bf05 	.word	0x0800bf05
 800bee8:	0800bf0d 	.word	0x0800bf0d
 800beec:	0800bf15 	.word	0x0800bf15
 800bef0:	0800bf1d 	.word	0x0800bf1d
 800bef4:	2300      	movs	r3, #0
 800bef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800befa:	e086      	b.n	800c00a <UART_SetConfig+0x5a6>
 800befc:	2304      	movs	r3, #4
 800befe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf02:	e082      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bf04:	2308      	movs	r3, #8
 800bf06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf0a:	e07e      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bf0c:	2310      	movs	r3, #16
 800bf0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf12:	e07a      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bf14:	2320      	movs	r3, #32
 800bf16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf1a:	e076      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bf1c:	2340      	movs	r3, #64	; 0x40
 800bf1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf22:	e072      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bf24:	2380      	movs	r3, #128	; 0x80
 800bf26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf2a:	e06e      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	4a75      	ldr	r2, [pc, #468]	; (800c108 <UART_SetConfig+0x6a4>)
 800bf32:	4293      	cmp	r3, r2
 800bf34:	d130      	bne.n	800bf98 <UART_SetConfig+0x534>
 800bf36:	4b72      	ldr	r3, [pc, #456]	; (800c100 <UART_SetConfig+0x69c>)
 800bf38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf3a:	f003 0307 	and.w	r3, r3, #7
 800bf3e:	2b05      	cmp	r3, #5
 800bf40:	d826      	bhi.n	800bf90 <UART_SetConfig+0x52c>
 800bf42:	a201      	add	r2, pc, #4	; (adr r2, 800bf48 <UART_SetConfig+0x4e4>)
 800bf44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf48:	0800bf61 	.word	0x0800bf61
 800bf4c:	0800bf69 	.word	0x0800bf69
 800bf50:	0800bf71 	.word	0x0800bf71
 800bf54:	0800bf79 	.word	0x0800bf79
 800bf58:	0800bf81 	.word	0x0800bf81
 800bf5c:	0800bf89 	.word	0x0800bf89
 800bf60:	2300      	movs	r3, #0
 800bf62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf66:	e050      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bf68:	2304      	movs	r3, #4
 800bf6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf6e:	e04c      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bf70:	2308      	movs	r3, #8
 800bf72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf76:	e048      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bf78:	2310      	movs	r3, #16
 800bf7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf7e:	e044      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bf80:	2320      	movs	r3, #32
 800bf82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf86:	e040      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bf88:	2340      	movs	r3, #64	; 0x40
 800bf8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf8e:	e03c      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bf90:	2380      	movs	r3, #128	; 0x80
 800bf92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf96:	e038      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	4a5b      	ldr	r2, [pc, #364]	; (800c10c <UART_SetConfig+0x6a8>)
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d130      	bne.n	800c004 <UART_SetConfig+0x5a0>
 800bfa2:	4b57      	ldr	r3, [pc, #348]	; (800c100 <UART_SetConfig+0x69c>)
 800bfa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfa6:	f003 0307 	and.w	r3, r3, #7
 800bfaa:	2b05      	cmp	r3, #5
 800bfac:	d826      	bhi.n	800bffc <UART_SetConfig+0x598>
 800bfae:	a201      	add	r2, pc, #4	; (adr r2, 800bfb4 <UART_SetConfig+0x550>)
 800bfb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfb4:	0800bfcd 	.word	0x0800bfcd
 800bfb8:	0800bfd5 	.word	0x0800bfd5
 800bfbc:	0800bfdd 	.word	0x0800bfdd
 800bfc0:	0800bfe5 	.word	0x0800bfe5
 800bfc4:	0800bfed 	.word	0x0800bfed
 800bfc8:	0800bff5 	.word	0x0800bff5
 800bfcc:	2302      	movs	r3, #2
 800bfce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfd2:	e01a      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bfd4:	2304      	movs	r3, #4
 800bfd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfda:	e016      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bfdc:	2308      	movs	r3, #8
 800bfde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfe2:	e012      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bfe4:	2310      	movs	r3, #16
 800bfe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfea:	e00e      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bfec:	2320      	movs	r3, #32
 800bfee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bff2:	e00a      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bff4:	2340      	movs	r3, #64	; 0x40
 800bff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bffa:	e006      	b.n	800c00a <UART_SetConfig+0x5a6>
 800bffc:	2380      	movs	r3, #128	; 0x80
 800bffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c002:	e002      	b.n	800c00a <UART_SetConfig+0x5a6>
 800c004:	2380      	movs	r3, #128	; 0x80
 800c006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	4a3f      	ldr	r2, [pc, #252]	; (800c10c <UART_SetConfig+0x6a8>)
 800c010:	4293      	cmp	r3, r2
 800c012:	f040 80f8 	bne.w	800c206 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c016:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c01a:	2b20      	cmp	r3, #32
 800c01c:	dc46      	bgt.n	800c0ac <UART_SetConfig+0x648>
 800c01e:	2b02      	cmp	r3, #2
 800c020:	f2c0 8082 	blt.w	800c128 <UART_SetConfig+0x6c4>
 800c024:	3b02      	subs	r3, #2
 800c026:	2b1e      	cmp	r3, #30
 800c028:	d87e      	bhi.n	800c128 <UART_SetConfig+0x6c4>
 800c02a:	a201      	add	r2, pc, #4	; (adr r2, 800c030 <UART_SetConfig+0x5cc>)
 800c02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c030:	0800c0b3 	.word	0x0800c0b3
 800c034:	0800c129 	.word	0x0800c129
 800c038:	0800c0bb 	.word	0x0800c0bb
 800c03c:	0800c129 	.word	0x0800c129
 800c040:	0800c129 	.word	0x0800c129
 800c044:	0800c129 	.word	0x0800c129
 800c048:	0800c0cb 	.word	0x0800c0cb
 800c04c:	0800c129 	.word	0x0800c129
 800c050:	0800c129 	.word	0x0800c129
 800c054:	0800c129 	.word	0x0800c129
 800c058:	0800c129 	.word	0x0800c129
 800c05c:	0800c129 	.word	0x0800c129
 800c060:	0800c129 	.word	0x0800c129
 800c064:	0800c129 	.word	0x0800c129
 800c068:	0800c0db 	.word	0x0800c0db
 800c06c:	0800c129 	.word	0x0800c129
 800c070:	0800c129 	.word	0x0800c129
 800c074:	0800c129 	.word	0x0800c129
 800c078:	0800c129 	.word	0x0800c129
 800c07c:	0800c129 	.word	0x0800c129
 800c080:	0800c129 	.word	0x0800c129
 800c084:	0800c129 	.word	0x0800c129
 800c088:	0800c129 	.word	0x0800c129
 800c08c:	0800c129 	.word	0x0800c129
 800c090:	0800c129 	.word	0x0800c129
 800c094:	0800c129 	.word	0x0800c129
 800c098:	0800c129 	.word	0x0800c129
 800c09c:	0800c129 	.word	0x0800c129
 800c0a0:	0800c129 	.word	0x0800c129
 800c0a4:	0800c129 	.word	0x0800c129
 800c0a8:	0800c11b 	.word	0x0800c11b
 800c0ac:	2b40      	cmp	r3, #64	; 0x40
 800c0ae:	d037      	beq.n	800c120 <UART_SetConfig+0x6bc>
 800c0b0:	e03a      	b.n	800c128 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c0b2:	f7fd ff15 	bl	8009ee0 <HAL_RCCEx_GetD3PCLK1Freq>
 800c0b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c0b8:	e03c      	b.n	800c134 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f7fd ff24 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0c8:	e034      	b.n	800c134 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0ca:	f107 0318 	add.w	r3, r7, #24
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f7fe f870 	bl	800a1b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c0d4:	69fb      	ldr	r3, [r7, #28]
 800c0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0d8:	e02c      	b.n	800c134 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0da:	4b09      	ldr	r3, [pc, #36]	; (800c100 <UART_SetConfig+0x69c>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f003 0320 	and.w	r3, r3, #32
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d016      	beq.n	800c114 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c0e6:	4b06      	ldr	r3, [pc, #24]	; (800c100 <UART_SetConfig+0x69c>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	08db      	lsrs	r3, r3, #3
 800c0ec:	f003 0303 	and.w	r3, r3, #3
 800c0f0:	4a07      	ldr	r2, [pc, #28]	; (800c110 <UART_SetConfig+0x6ac>)
 800c0f2:	fa22 f303 	lsr.w	r3, r2, r3
 800c0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c0f8:	e01c      	b.n	800c134 <UART_SetConfig+0x6d0>
 800c0fa:	bf00      	nop
 800c0fc:	40011400 	.word	0x40011400
 800c100:	58024400 	.word	0x58024400
 800c104:	40007800 	.word	0x40007800
 800c108:	40007c00 	.word	0x40007c00
 800c10c:	58000c00 	.word	0x58000c00
 800c110:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c114:	4b9d      	ldr	r3, [pc, #628]	; (800c38c <UART_SetConfig+0x928>)
 800c116:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c118:	e00c      	b.n	800c134 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c11a:	4b9d      	ldr	r3, [pc, #628]	; (800c390 <UART_SetConfig+0x92c>)
 800c11c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c11e:	e009      	b.n	800c134 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c120:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c124:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c126:	e005      	b.n	800c134 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c128:	2300      	movs	r3, #0
 800c12a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c12c:	2301      	movs	r3, #1
 800c12e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c132:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c136:	2b00      	cmp	r3, #0
 800c138:	f000 81de 	beq.w	800c4f8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c140:	4a94      	ldr	r2, [pc, #592]	; (800c394 <UART_SetConfig+0x930>)
 800c142:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c146:	461a      	mov	r2, r3
 800c148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c14a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c14e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	685a      	ldr	r2, [r3, #4]
 800c154:	4613      	mov	r3, r2
 800c156:	005b      	lsls	r3, r3, #1
 800c158:	4413      	add	r3, r2
 800c15a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d305      	bcc.n	800c16c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c168:	429a      	cmp	r2, r3
 800c16a:	d903      	bls.n	800c174 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c16c:	2301      	movs	r3, #1
 800c16e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c172:	e1c1      	b.n	800c4f8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c176:	2200      	movs	r2, #0
 800c178:	60bb      	str	r3, [r7, #8]
 800c17a:	60fa      	str	r2, [r7, #12]
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c180:	4a84      	ldr	r2, [pc, #528]	; (800c394 <UART_SetConfig+0x930>)
 800c182:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c186:	b29b      	uxth	r3, r3
 800c188:	2200      	movs	r2, #0
 800c18a:	603b      	str	r3, [r7, #0]
 800c18c:	607a      	str	r2, [r7, #4]
 800c18e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c192:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c196:	f7f4 f89f 	bl	80002d8 <__aeabi_uldivmod>
 800c19a:	4602      	mov	r2, r0
 800c19c:	460b      	mov	r3, r1
 800c19e:	4610      	mov	r0, r2
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	f04f 0200 	mov.w	r2, #0
 800c1a6:	f04f 0300 	mov.w	r3, #0
 800c1aa:	020b      	lsls	r3, r1, #8
 800c1ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c1b0:	0202      	lsls	r2, r0, #8
 800c1b2:	6979      	ldr	r1, [r7, #20]
 800c1b4:	6849      	ldr	r1, [r1, #4]
 800c1b6:	0849      	lsrs	r1, r1, #1
 800c1b8:	2000      	movs	r0, #0
 800c1ba:	460c      	mov	r4, r1
 800c1bc:	4605      	mov	r5, r0
 800c1be:	eb12 0804 	adds.w	r8, r2, r4
 800c1c2:	eb43 0905 	adc.w	r9, r3, r5
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	685b      	ldr	r3, [r3, #4]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	469a      	mov	sl, r3
 800c1ce:	4693      	mov	fp, r2
 800c1d0:	4652      	mov	r2, sl
 800c1d2:	465b      	mov	r3, fp
 800c1d4:	4640      	mov	r0, r8
 800c1d6:	4649      	mov	r1, r9
 800c1d8:	f7f4 f87e 	bl	80002d8 <__aeabi_uldivmod>
 800c1dc:	4602      	mov	r2, r0
 800c1de:	460b      	mov	r3, r1
 800c1e0:	4613      	mov	r3, r2
 800c1e2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c1ea:	d308      	bcc.n	800c1fe <UART_SetConfig+0x79a>
 800c1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1f2:	d204      	bcs.n	800c1fe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1fa:	60da      	str	r2, [r3, #12]
 800c1fc:	e17c      	b.n	800c4f8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c1fe:	2301      	movs	r3, #1
 800c200:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c204:	e178      	b.n	800c4f8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	69db      	ldr	r3, [r3, #28]
 800c20a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c20e:	f040 80c5 	bne.w	800c39c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c212:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c216:	2b20      	cmp	r3, #32
 800c218:	dc48      	bgt.n	800c2ac <UART_SetConfig+0x848>
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	db7b      	blt.n	800c316 <UART_SetConfig+0x8b2>
 800c21e:	2b20      	cmp	r3, #32
 800c220:	d879      	bhi.n	800c316 <UART_SetConfig+0x8b2>
 800c222:	a201      	add	r2, pc, #4	; (adr r2, 800c228 <UART_SetConfig+0x7c4>)
 800c224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c228:	0800c2b3 	.word	0x0800c2b3
 800c22c:	0800c2bb 	.word	0x0800c2bb
 800c230:	0800c317 	.word	0x0800c317
 800c234:	0800c317 	.word	0x0800c317
 800c238:	0800c2c3 	.word	0x0800c2c3
 800c23c:	0800c317 	.word	0x0800c317
 800c240:	0800c317 	.word	0x0800c317
 800c244:	0800c317 	.word	0x0800c317
 800c248:	0800c2d3 	.word	0x0800c2d3
 800c24c:	0800c317 	.word	0x0800c317
 800c250:	0800c317 	.word	0x0800c317
 800c254:	0800c317 	.word	0x0800c317
 800c258:	0800c317 	.word	0x0800c317
 800c25c:	0800c317 	.word	0x0800c317
 800c260:	0800c317 	.word	0x0800c317
 800c264:	0800c317 	.word	0x0800c317
 800c268:	0800c2e3 	.word	0x0800c2e3
 800c26c:	0800c317 	.word	0x0800c317
 800c270:	0800c317 	.word	0x0800c317
 800c274:	0800c317 	.word	0x0800c317
 800c278:	0800c317 	.word	0x0800c317
 800c27c:	0800c317 	.word	0x0800c317
 800c280:	0800c317 	.word	0x0800c317
 800c284:	0800c317 	.word	0x0800c317
 800c288:	0800c317 	.word	0x0800c317
 800c28c:	0800c317 	.word	0x0800c317
 800c290:	0800c317 	.word	0x0800c317
 800c294:	0800c317 	.word	0x0800c317
 800c298:	0800c317 	.word	0x0800c317
 800c29c:	0800c317 	.word	0x0800c317
 800c2a0:	0800c317 	.word	0x0800c317
 800c2a4:	0800c317 	.word	0x0800c317
 800c2a8:	0800c309 	.word	0x0800c309
 800c2ac:	2b40      	cmp	r3, #64	; 0x40
 800c2ae:	d02e      	beq.n	800c30e <UART_SetConfig+0x8aa>
 800c2b0:	e031      	b.n	800c316 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c2b2:	f7fc f9d1 	bl	8008658 <HAL_RCC_GetPCLK1Freq>
 800c2b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c2b8:	e033      	b.n	800c322 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c2ba:	f7fc f9e3 	bl	8008684 <HAL_RCC_GetPCLK2Freq>
 800c2be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c2c0:	e02f      	b.n	800c322 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f7fd fe20 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2d0:	e027      	b.n	800c322 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2d2:	f107 0318 	add.w	r3, r7, #24
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7fd ff6c 	bl	800a1b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c2dc:	69fb      	ldr	r3, [r7, #28]
 800c2de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2e0:	e01f      	b.n	800c322 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c2e2:	4b2d      	ldr	r3, [pc, #180]	; (800c398 <UART_SetConfig+0x934>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f003 0320 	and.w	r3, r3, #32
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d009      	beq.n	800c302 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c2ee:	4b2a      	ldr	r3, [pc, #168]	; (800c398 <UART_SetConfig+0x934>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	08db      	lsrs	r3, r3, #3
 800c2f4:	f003 0303 	and.w	r3, r3, #3
 800c2f8:	4a24      	ldr	r2, [pc, #144]	; (800c38c <UART_SetConfig+0x928>)
 800c2fa:	fa22 f303 	lsr.w	r3, r2, r3
 800c2fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c300:	e00f      	b.n	800c322 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c302:	4b22      	ldr	r3, [pc, #136]	; (800c38c <UART_SetConfig+0x928>)
 800c304:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c306:	e00c      	b.n	800c322 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c308:	4b21      	ldr	r3, [pc, #132]	; (800c390 <UART_SetConfig+0x92c>)
 800c30a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c30c:	e009      	b.n	800c322 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c30e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c312:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c314:	e005      	b.n	800c322 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c316:	2300      	movs	r3, #0
 800c318:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c31a:	2301      	movs	r3, #1
 800c31c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c320:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c324:	2b00      	cmp	r3, #0
 800c326:	f000 80e7 	beq.w	800c4f8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c32e:	4a19      	ldr	r2, [pc, #100]	; (800c394 <UART_SetConfig+0x930>)
 800c330:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c334:	461a      	mov	r2, r3
 800c336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c338:	fbb3 f3f2 	udiv	r3, r3, r2
 800c33c:	005a      	lsls	r2, r3, #1
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	685b      	ldr	r3, [r3, #4]
 800c342:	085b      	lsrs	r3, r3, #1
 800c344:	441a      	add	r2, r3
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	685b      	ldr	r3, [r3, #4]
 800c34a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c34e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c352:	2b0f      	cmp	r3, #15
 800c354:	d916      	bls.n	800c384 <UART_SetConfig+0x920>
 800c356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c35c:	d212      	bcs.n	800c384 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c360:	b29b      	uxth	r3, r3
 800c362:	f023 030f 	bic.w	r3, r3, #15
 800c366:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c36a:	085b      	lsrs	r3, r3, #1
 800c36c:	b29b      	uxth	r3, r3
 800c36e:	f003 0307 	and.w	r3, r3, #7
 800c372:	b29a      	uxth	r2, r3
 800c374:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c376:	4313      	orrs	r3, r2
 800c378:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c380:	60da      	str	r2, [r3, #12]
 800c382:	e0b9      	b.n	800c4f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c384:	2301      	movs	r3, #1
 800c386:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c38a:	e0b5      	b.n	800c4f8 <UART_SetConfig+0xa94>
 800c38c:	03d09000 	.word	0x03d09000
 800c390:	003d0900 	.word	0x003d0900
 800c394:	080110e4 	.word	0x080110e4
 800c398:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c39c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c3a0:	2b20      	cmp	r3, #32
 800c3a2:	dc49      	bgt.n	800c438 <UART_SetConfig+0x9d4>
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	db7c      	blt.n	800c4a2 <UART_SetConfig+0xa3e>
 800c3a8:	2b20      	cmp	r3, #32
 800c3aa:	d87a      	bhi.n	800c4a2 <UART_SetConfig+0xa3e>
 800c3ac:	a201      	add	r2, pc, #4	; (adr r2, 800c3b4 <UART_SetConfig+0x950>)
 800c3ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3b2:	bf00      	nop
 800c3b4:	0800c43f 	.word	0x0800c43f
 800c3b8:	0800c447 	.word	0x0800c447
 800c3bc:	0800c4a3 	.word	0x0800c4a3
 800c3c0:	0800c4a3 	.word	0x0800c4a3
 800c3c4:	0800c44f 	.word	0x0800c44f
 800c3c8:	0800c4a3 	.word	0x0800c4a3
 800c3cc:	0800c4a3 	.word	0x0800c4a3
 800c3d0:	0800c4a3 	.word	0x0800c4a3
 800c3d4:	0800c45f 	.word	0x0800c45f
 800c3d8:	0800c4a3 	.word	0x0800c4a3
 800c3dc:	0800c4a3 	.word	0x0800c4a3
 800c3e0:	0800c4a3 	.word	0x0800c4a3
 800c3e4:	0800c4a3 	.word	0x0800c4a3
 800c3e8:	0800c4a3 	.word	0x0800c4a3
 800c3ec:	0800c4a3 	.word	0x0800c4a3
 800c3f0:	0800c4a3 	.word	0x0800c4a3
 800c3f4:	0800c46f 	.word	0x0800c46f
 800c3f8:	0800c4a3 	.word	0x0800c4a3
 800c3fc:	0800c4a3 	.word	0x0800c4a3
 800c400:	0800c4a3 	.word	0x0800c4a3
 800c404:	0800c4a3 	.word	0x0800c4a3
 800c408:	0800c4a3 	.word	0x0800c4a3
 800c40c:	0800c4a3 	.word	0x0800c4a3
 800c410:	0800c4a3 	.word	0x0800c4a3
 800c414:	0800c4a3 	.word	0x0800c4a3
 800c418:	0800c4a3 	.word	0x0800c4a3
 800c41c:	0800c4a3 	.word	0x0800c4a3
 800c420:	0800c4a3 	.word	0x0800c4a3
 800c424:	0800c4a3 	.word	0x0800c4a3
 800c428:	0800c4a3 	.word	0x0800c4a3
 800c42c:	0800c4a3 	.word	0x0800c4a3
 800c430:	0800c4a3 	.word	0x0800c4a3
 800c434:	0800c495 	.word	0x0800c495
 800c438:	2b40      	cmp	r3, #64	; 0x40
 800c43a:	d02e      	beq.n	800c49a <UART_SetConfig+0xa36>
 800c43c:	e031      	b.n	800c4a2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c43e:	f7fc f90b 	bl	8008658 <HAL_RCC_GetPCLK1Freq>
 800c442:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c444:	e033      	b.n	800c4ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c446:	f7fc f91d 	bl	8008684 <HAL_RCC_GetPCLK2Freq>
 800c44a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c44c:	e02f      	b.n	800c4ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c44e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c452:	4618      	mov	r0, r3
 800c454:	f7fd fd5a 	bl	8009f0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c45a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c45c:	e027      	b.n	800c4ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c45e:	f107 0318 	add.w	r3, r7, #24
 800c462:	4618      	mov	r0, r3
 800c464:	f7fd fea6 	bl	800a1b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c468:	69fb      	ldr	r3, [r7, #28]
 800c46a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c46c:	e01f      	b.n	800c4ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c46e:	4b2d      	ldr	r3, [pc, #180]	; (800c524 <UART_SetConfig+0xac0>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f003 0320 	and.w	r3, r3, #32
 800c476:	2b00      	cmp	r3, #0
 800c478:	d009      	beq.n	800c48e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c47a:	4b2a      	ldr	r3, [pc, #168]	; (800c524 <UART_SetConfig+0xac0>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	08db      	lsrs	r3, r3, #3
 800c480:	f003 0303 	and.w	r3, r3, #3
 800c484:	4a28      	ldr	r2, [pc, #160]	; (800c528 <UART_SetConfig+0xac4>)
 800c486:	fa22 f303 	lsr.w	r3, r2, r3
 800c48a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c48c:	e00f      	b.n	800c4ae <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c48e:	4b26      	ldr	r3, [pc, #152]	; (800c528 <UART_SetConfig+0xac4>)
 800c490:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c492:	e00c      	b.n	800c4ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c494:	4b25      	ldr	r3, [pc, #148]	; (800c52c <UART_SetConfig+0xac8>)
 800c496:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c498:	e009      	b.n	800c4ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c49a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c49e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4a0:	e005      	b.n	800c4ae <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c4ac:	bf00      	nop
    }

    if (pclk != 0U)
 800c4ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d021      	beq.n	800c4f8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4b8:	4a1d      	ldr	r2, [pc, #116]	; (800c530 <UART_SetConfig+0xacc>)
 800c4ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c4be:	461a      	mov	r2, r3
 800c4c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4c2:	fbb3 f2f2 	udiv	r2, r3, r2
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	685b      	ldr	r3, [r3, #4]
 800c4ca:	085b      	lsrs	r3, r3, #1
 800c4cc:	441a      	add	r2, r3
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	685b      	ldr	r3, [r3, #4]
 800c4d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4d6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4da:	2b0f      	cmp	r3, #15
 800c4dc:	d909      	bls.n	800c4f2 <UART_SetConfig+0xa8e>
 800c4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4e4:	d205      	bcs.n	800c4f2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e8:	b29a      	uxth	r2, r3
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	60da      	str	r2, [r3, #12]
 800c4f0:	e002      	b.n	800c4f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c500:	697b      	ldr	r3, [r7, #20]
 800c502:	2201      	movs	r2, #1
 800c504:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	2200      	movs	r2, #0
 800c50c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	2200      	movs	r2, #0
 800c512:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c514:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3748      	adds	r7, #72	; 0x48
 800c51c:	46bd      	mov	sp, r7
 800c51e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c522:	bf00      	nop
 800c524:	58024400 	.word	0x58024400
 800c528:	03d09000 	.word	0x03d09000
 800c52c:	003d0900 	.word	0x003d0900
 800c530:	080110e4 	.word	0x080110e4

0800c534 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c534:	b480      	push	{r7}
 800c536:	b083      	sub	sp, #12
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c540:	f003 0301 	and.w	r3, r3, #1
 800c544:	2b00      	cmp	r3, #0
 800c546:	d00a      	beq.n	800c55e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	430a      	orrs	r2, r1
 800c55c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c562:	f003 0302 	and.w	r3, r3, #2
 800c566:	2b00      	cmp	r3, #0
 800c568:	d00a      	beq.n	800c580 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	685b      	ldr	r3, [r3, #4]
 800c570:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	430a      	orrs	r2, r1
 800c57e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c584:	f003 0304 	and.w	r3, r3, #4
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d00a      	beq.n	800c5a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	430a      	orrs	r2, r1
 800c5a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5a6:	f003 0308 	and.w	r3, r3, #8
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d00a      	beq.n	800c5c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	685b      	ldr	r3, [r3, #4]
 800c5b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	430a      	orrs	r2, r1
 800c5c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5c8:	f003 0310 	and.w	r3, r3, #16
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d00a      	beq.n	800c5e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	689b      	ldr	r3, [r3, #8]
 800c5d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	430a      	orrs	r2, r1
 800c5e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5ea:	f003 0320 	and.w	r3, r3, #32
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d00a      	beq.n	800c608 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	689b      	ldr	r3, [r3, #8]
 800c5f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	430a      	orrs	r2, r1
 800c606:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c60c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c610:	2b00      	cmp	r3, #0
 800c612:	d01a      	beq.n	800c64a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	685b      	ldr	r3, [r3, #4]
 800c61a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	430a      	orrs	r2, r1
 800c628:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c62e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c632:	d10a      	bne.n	800c64a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	685b      	ldr	r3, [r3, #4]
 800c63a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	430a      	orrs	r2, r1
 800c648:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c64e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c652:	2b00      	cmp	r3, #0
 800c654:	d00a      	beq.n	800c66c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	430a      	orrs	r2, r1
 800c66a:	605a      	str	r2, [r3, #4]
  }
}
 800c66c:	bf00      	nop
 800c66e:	370c      	adds	r7, #12
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr

0800c678 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b086      	sub	sp, #24
 800c67c:	af02      	add	r7, sp, #8
 800c67e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2200      	movs	r2, #0
 800c684:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c688:	f7f5 f99e 	bl	80019c8 <HAL_GetTick>
 800c68c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f003 0308 	and.w	r3, r3, #8
 800c698:	2b08      	cmp	r3, #8
 800c69a:	d10e      	bne.n	800c6ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c69c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c6a0:	9300      	str	r3, [sp, #0]
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f000 f82f 	bl	800c70e <UART_WaitOnFlagUntilTimeout>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d001      	beq.n	800c6ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c6b6:	2303      	movs	r3, #3
 800c6b8:	e025      	b.n	800c706 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f003 0304 	and.w	r3, r3, #4
 800c6c4:	2b04      	cmp	r3, #4
 800c6c6:	d10e      	bne.n	800c6e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c6c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c6cc:	9300      	str	r3, [sp, #0]
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f000 f819 	bl	800c70e <UART_WaitOnFlagUntilTimeout>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d001      	beq.n	800c6e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c6e2:	2303      	movs	r3, #3
 800c6e4:	e00f      	b.n	800c706 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2220      	movs	r2, #32
 800c6ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2220      	movs	r2, #32
 800c6f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2200      	movs	r2, #0
 800c700:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c704:	2300      	movs	r3, #0
}
 800c706:	4618      	mov	r0, r3
 800c708:	3710      	adds	r7, #16
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}

0800c70e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c70e:	b580      	push	{r7, lr}
 800c710:	b09c      	sub	sp, #112	; 0x70
 800c712:	af00      	add	r7, sp, #0
 800c714:	60f8      	str	r0, [r7, #12]
 800c716:	60b9      	str	r1, [r7, #8]
 800c718:	603b      	str	r3, [r7, #0]
 800c71a:	4613      	mov	r3, r2
 800c71c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c71e:	e0a9      	b.n	800c874 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c720:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c722:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c726:	f000 80a5 	beq.w	800c874 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c72a:	f7f5 f94d 	bl	80019c8 <HAL_GetTick>
 800c72e:	4602      	mov	r2, r0
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	1ad3      	subs	r3, r2, r3
 800c734:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c736:	429a      	cmp	r2, r3
 800c738:	d302      	bcc.n	800c740 <UART_WaitOnFlagUntilTimeout+0x32>
 800c73a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d140      	bne.n	800c7c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c748:	e853 3f00 	ldrex	r3, [r3]
 800c74c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c74e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c750:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c754:	667b      	str	r3, [r7, #100]	; 0x64
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	461a      	mov	r2, r3
 800c75c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c75e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c760:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c762:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c764:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c766:	e841 2300 	strex	r3, r2, [r1]
 800c76a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c76c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d1e6      	bne.n	800c740 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	3308      	adds	r3, #8
 800c778:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c77a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c77c:	e853 3f00 	ldrex	r3, [r3]
 800c780:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c784:	f023 0301 	bic.w	r3, r3, #1
 800c788:	663b      	str	r3, [r7, #96]	; 0x60
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	3308      	adds	r3, #8
 800c790:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c792:	64ba      	str	r2, [r7, #72]	; 0x48
 800c794:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c796:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c798:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c79a:	e841 2300 	strex	r3, r2, [r1]
 800c79e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c7a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d1e5      	bne.n	800c772 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	2220      	movs	r2, #32
 800c7aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	2220      	movs	r2, #32
 800c7b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c7be:	2303      	movs	r3, #3
 800c7c0:	e069      	b.n	800c896 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f003 0304 	and.w	r3, r3, #4
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d051      	beq.n	800c874 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	69db      	ldr	r3, [r3, #28]
 800c7d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c7da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c7de:	d149      	bne.n	800c874 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c7e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f2:	e853 3f00 	ldrex	r3, [r3]
 800c7f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c7fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	461a      	mov	r2, r3
 800c806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c808:	637b      	str	r3, [r7, #52]	; 0x34
 800c80a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c80c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c80e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c810:	e841 2300 	strex	r3, r2, [r1]
 800c814:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d1e6      	bne.n	800c7ea <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	3308      	adds	r3, #8
 800c822:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	e853 3f00 	ldrex	r3, [r3]
 800c82a:	613b      	str	r3, [r7, #16]
   return(result);
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	f023 0301 	bic.w	r3, r3, #1
 800c832:	66bb      	str	r3, [r7, #104]	; 0x68
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	3308      	adds	r3, #8
 800c83a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c83c:	623a      	str	r2, [r7, #32]
 800c83e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c840:	69f9      	ldr	r1, [r7, #28]
 800c842:	6a3a      	ldr	r2, [r7, #32]
 800c844:	e841 2300 	strex	r3, r2, [r1]
 800c848:	61bb      	str	r3, [r7, #24]
   return(result);
 800c84a:	69bb      	ldr	r3, [r7, #24]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d1e5      	bne.n	800c81c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	2220      	movs	r2, #32
 800c854:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	2220      	movs	r2, #32
 800c85c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	2220      	movs	r2, #32
 800c864:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	2200      	movs	r2, #0
 800c86c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c870:	2303      	movs	r3, #3
 800c872:	e010      	b.n	800c896 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	69da      	ldr	r2, [r3, #28]
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	4013      	ands	r3, r2
 800c87e:	68ba      	ldr	r2, [r7, #8]
 800c880:	429a      	cmp	r2, r3
 800c882:	bf0c      	ite	eq
 800c884:	2301      	moveq	r3, #1
 800c886:	2300      	movne	r3, #0
 800c888:	b2db      	uxtb	r3, r3
 800c88a:	461a      	mov	r2, r3
 800c88c:	79fb      	ldrb	r3, [r7, #7]
 800c88e:	429a      	cmp	r2, r3
 800c890:	f43f af46 	beq.w	800c720 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c894:	2300      	movs	r3, #0
}
 800c896:	4618      	mov	r0, r3
 800c898:	3770      	adds	r7, #112	; 0x70
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}

0800c89e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c89e:	b480      	push	{r7}
 800c8a0:	b085      	sub	sp, #20
 800c8a2:	af00      	add	r7, sp, #0
 800c8a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c8ac:	2b01      	cmp	r3, #1
 800c8ae:	d101      	bne.n	800c8b4 <HAL_UARTEx_DisableFifoMode+0x16>
 800c8b0:	2302      	movs	r3, #2
 800c8b2:	e027      	b.n	800c904 <HAL_UARTEx_DisableFifoMode+0x66>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2224      	movs	r2, #36	; 0x24
 800c8c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f022 0201 	bic.w	r2, r2, #1
 800c8da:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c8e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	68fa      	ldr	r2, [r7, #12]
 800c8f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2220      	movs	r2, #32
 800c8f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c902:	2300      	movs	r3, #0
}
 800c904:	4618      	mov	r0, r3
 800c906:	3714      	adds	r7, #20
 800c908:	46bd      	mov	sp, r7
 800c90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90e:	4770      	bx	lr

0800c910 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b084      	sub	sp, #16
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c920:	2b01      	cmp	r3, #1
 800c922:	d101      	bne.n	800c928 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c924:	2302      	movs	r3, #2
 800c926:	e02d      	b.n	800c984 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2201      	movs	r2, #1
 800c92c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2224      	movs	r2, #36	; 0x24
 800c934:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	681a      	ldr	r2, [r3, #0]
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	f022 0201 	bic.w	r2, r2, #1
 800c94e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	689b      	ldr	r3, [r3, #8]
 800c956:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	683a      	ldr	r2, [r7, #0]
 800c960:	430a      	orrs	r2, r1
 800c962:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f000 f84f 	bl	800ca08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	68fa      	ldr	r2, [r7, #12]
 800c970:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2220      	movs	r2, #32
 800c976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2200      	movs	r2, #0
 800c97e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c982:	2300      	movs	r3, #0
}
 800c984:	4618      	mov	r0, r3
 800c986:	3710      	adds	r7, #16
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}

0800c98c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b084      	sub	sp, #16
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d101      	bne.n	800c9a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c9a0:	2302      	movs	r3, #2
 800c9a2:	e02d      	b.n	800ca00 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2224      	movs	r2, #36	; 0x24
 800c9b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	681a      	ldr	r2, [r3, #0]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f022 0201 	bic.w	r2, r2, #1
 800c9ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	689b      	ldr	r3, [r3, #8]
 800c9d2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	683a      	ldr	r2, [r7, #0]
 800c9dc:	430a      	orrs	r2, r1
 800c9de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f000 f811 	bl	800ca08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	68fa      	ldr	r2, [r7, #12]
 800c9ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2220      	movs	r2, #32
 800c9f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c9fe:	2300      	movs	r3, #0
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3710      	adds	r7, #16
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}

0800ca08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b085      	sub	sp, #20
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d108      	bne.n	800ca2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2201      	movs	r2, #1
 800ca24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ca28:	e031      	b.n	800ca8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ca2a:	2310      	movs	r3, #16
 800ca2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ca2e:	2310      	movs	r3, #16
 800ca30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	689b      	ldr	r3, [r3, #8]
 800ca38:	0e5b      	lsrs	r3, r3, #25
 800ca3a:	b2db      	uxtb	r3, r3
 800ca3c:	f003 0307 	and.w	r3, r3, #7
 800ca40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	689b      	ldr	r3, [r3, #8]
 800ca48:	0f5b      	lsrs	r3, r3, #29
 800ca4a:	b2db      	uxtb	r3, r3
 800ca4c:	f003 0307 	and.w	r3, r3, #7
 800ca50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca52:	7bbb      	ldrb	r3, [r7, #14]
 800ca54:	7b3a      	ldrb	r2, [r7, #12]
 800ca56:	4911      	ldr	r1, [pc, #68]	; (800ca9c <UARTEx_SetNbDataToProcess+0x94>)
 800ca58:	5c8a      	ldrb	r2, [r1, r2]
 800ca5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ca5e:	7b3a      	ldrb	r2, [r7, #12]
 800ca60:	490f      	ldr	r1, [pc, #60]	; (800caa0 <UARTEx_SetNbDataToProcess+0x98>)
 800ca62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca64:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca68:	b29a      	uxth	r2, r3
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca70:	7bfb      	ldrb	r3, [r7, #15]
 800ca72:	7b7a      	ldrb	r2, [r7, #13]
 800ca74:	4909      	ldr	r1, [pc, #36]	; (800ca9c <UARTEx_SetNbDataToProcess+0x94>)
 800ca76:	5c8a      	ldrb	r2, [r1, r2]
 800ca78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ca7c:	7b7a      	ldrb	r2, [r7, #13]
 800ca7e:	4908      	ldr	r1, [pc, #32]	; (800caa0 <UARTEx_SetNbDataToProcess+0x98>)
 800ca80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca82:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca86:	b29a      	uxth	r2, r3
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ca8e:	bf00      	nop
 800ca90:	3714      	adds	r7, #20
 800ca92:	46bd      	mov	sp, r7
 800ca94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca98:	4770      	bx	lr
 800ca9a:	bf00      	nop
 800ca9c:	080110fc 	.word	0x080110fc
 800caa0:	08011104 	.word	0x08011104

0800caa4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800caa4:	b084      	sub	sp, #16
 800caa6:	b580      	push	{r7, lr}
 800caa8:	b084      	sub	sp, #16
 800caaa:	af00      	add	r7, sp, #0
 800caac:	6078      	str	r0, [r7, #4]
 800caae:	f107 001c 	add.w	r0, r7, #28
 800cab2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab8:	2b01      	cmp	r3, #1
 800caba:	d120      	bne.n	800cafe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cac0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	68da      	ldr	r2, [r3, #12]
 800cacc:	4b2a      	ldr	r3, [pc, #168]	; (800cb78 <USB_CoreInit+0xd4>)
 800cace:	4013      	ands	r3, r2
 800cad0:	687a      	ldr	r2, [r7, #4]
 800cad2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	68db      	ldr	r3, [r3, #12]
 800cad8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cae2:	2b01      	cmp	r3, #1
 800cae4:	d105      	bne.n	800caf2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	68db      	ldr	r3, [r3, #12]
 800caea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f001 fc04 	bl	800e300 <USB_CoreReset>
 800caf8:	4603      	mov	r3, r0
 800cafa:	73fb      	strb	r3, [r7, #15]
 800cafc:	e01a      	b.n	800cb34 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	68db      	ldr	r3, [r3, #12]
 800cb02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f001 fbf8 	bl	800e300 <USB_CoreReset>
 800cb10:	4603      	mov	r3, r0
 800cb12:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800cb14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d106      	bne.n	800cb28 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	639a      	str	r2, [r3, #56]	; 0x38
 800cb26:	e005      	b.n	800cb34 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800cb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb36:	2b01      	cmp	r3, #1
 800cb38:	d116      	bne.n	800cb68 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb3e:	b29a      	uxth	r2, r3
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cb48:	4b0c      	ldr	r3, [pc, #48]	; (800cb7c <USB_CoreInit+0xd8>)
 800cb4a:	4313      	orrs	r3, r2
 800cb4c:	687a      	ldr	r2, [r7, #4]
 800cb4e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	689b      	ldr	r3, [r3, #8]
 800cb54:	f043 0206 	orr.w	r2, r3, #6
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	689b      	ldr	r3, [r3, #8]
 800cb60:	f043 0220 	orr.w	r2, r3, #32
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cb68:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3710      	adds	r7, #16
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cb74:	b004      	add	sp, #16
 800cb76:	4770      	bx	lr
 800cb78:	ffbdffbf 	.word	0xffbdffbf
 800cb7c:	03ee0000 	.word	0x03ee0000

0800cb80 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800cb80:	b480      	push	{r7}
 800cb82:	b087      	sub	sp, #28
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	60f8      	str	r0, [r7, #12]
 800cb88:	60b9      	str	r1, [r7, #8]
 800cb8a:	4613      	mov	r3, r2
 800cb8c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800cb8e:	79fb      	ldrb	r3, [r7, #7]
 800cb90:	2b02      	cmp	r3, #2
 800cb92:	d165      	bne.n	800cc60 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	4a41      	ldr	r2, [pc, #260]	; (800cc9c <USB_SetTurnaroundTime+0x11c>)
 800cb98:	4293      	cmp	r3, r2
 800cb9a:	d906      	bls.n	800cbaa <USB_SetTurnaroundTime+0x2a>
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	4a40      	ldr	r2, [pc, #256]	; (800cca0 <USB_SetTurnaroundTime+0x120>)
 800cba0:	4293      	cmp	r3, r2
 800cba2:	d202      	bcs.n	800cbaa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800cba4:	230f      	movs	r3, #15
 800cba6:	617b      	str	r3, [r7, #20]
 800cba8:	e062      	b.n	800cc70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	4a3c      	ldr	r2, [pc, #240]	; (800cca0 <USB_SetTurnaroundTime+0x120>)
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d306      	bcc.n	800cbc0 <USB_SetTurnaroundTime+0x40>
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	4a3b      	ldr	r2, [pc, #236]	; (800cca4 <USB_SetTurnaroundTime+0x124>)
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d202      	bcs.n	800cbc0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800cbba:	230e      	movs	r3, #14
 800cbbc:	617b      	str	r3, [r7, #20]
 800cbbe:	e057      	b.n	800cc70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	4a38      	ldr	r2, [pc, #224]	; (800cca4 <USB_SetTurnaroundTime+0x124>)
 800cbc4:	4293      	cmp	r3, r2
 800cbc6:	d306      	bcc.n	800cbd6 <USB_SetTurnaroundTime+0x56>
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	4a37      	ldr	r2, [pc, #220]	; (800cca8 <USB_SetTurnaroundTime+0x128>)
 800cbcc:	4293      	cmp	r3, r2
 800cbce:	d202      	bcs.n	800cbd6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800cbd0:	230d      	movs	r3, #13
 800cbd2:	617b      	str	r3, [r7, #20]
 800cbd4:	e04c      	b.n	800cc70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	4a33      	ldr	r2, [pc, #204]	; (800cca8 <USB_SetTurnaroundTime+0x128>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d306      	bcc.n	800cbec <USB_SetTurnaroundTime+0x6c>
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	4a32      	ldr	r2, [pc, #200]	; (800ccac <USB_SetTurnaroundTime+0x12c>)
 800cbe2:	4293      	cmp	r3, r2
 800cbe4:	d802      	bhi.n	800cbec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800cbe6:	230c      	movs	r3, #12
 800cbe8:	617b      	str	r3, [r7, #20]
 800cbea:	e041      	b.n	800cc70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	4a2f      	ldr	r2, [pc, #188]	; (800ccac <USB_SetTurnaroundTime+0x12c>)
 800cbf0:	4293      	cmp	r3, r2
 800cbf2:	d906      	bls.n	800cc02 <USB_SetTurnaroundTime+0x82>
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	4a2e      	ldr	r2, [pc, #184]	; (800ccb0 <USB_SetTurnaroundTime+0x130>)
 800cbf8:	4293      	cmp	r3, r2
 800cbfa:	d802      	bhi.n	800cc02 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800cbfc:	230b      	movs	r3, #11
 800cbfe:	617b      	str	r3, [r7, #20]
 800cc00:	e036      	b.n	800cc70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	4a2a      	ldr	r2, [pc, #168]	; (800ccb0 <USB_SetTurnaroundTime+0x130>)
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d906      	bls.n	800cc18 <USB_SetTurnaroundTime+0x98>
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	4a29      	ldr	r2, [pc, #164]	; (800ccb4 <USB_SetTurnaroundTime+0x134>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d802      	bhi.n	800cc18 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800cc12:	230a      	movs	r3, #10
 800cc14:	617b      	str	r3, [r7, #20]
 800cc16:	e02b      	b.n	800cc70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	4a26      	ldr	r2, [pc, #152]	; (800ccb4 <USB_SetTurnaroundTime+0x134>)
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d906      	bls.n	800cc2e <USB_SetTurnaroundTime+0xae>
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	4a25      	ldr	r2, [pc, #148]	; (800ccb8 <USB_SetTurnaroundTime+0x138>)
 800cc24:	4293      	cmp	r3, r2
 800cc26:	d202      	bcs.n	800cc2e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800cc28:	2309      	movs	r3, #9
 800cc2a:	617b      	str	r3, [r7, #20]
 800cc2c:	e020      	b.n	800cc70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	4a21      	ldr	r2, [pc, #132]	; (800ccb8 <USB_SetTurnaroundTime+0x138>)
 800cc32:	4293      	cmp	r3, r2
 800cc34:	d306      	bcc.n	800cc44 <USB_SetTurnaroundTime+0xc4>
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	4a20      	ldr	r2, [pc, #128]	; (800ccbc <USB_SetTurnaroundTime+0x13c>)
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	d802      	bhi.n	800cc44 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800cc3e:	2308      	movs	r3, #8
 800cc40:	617b      	str	r3, [r7, #20]
 800cc42:	e015      	b.n	800cc70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	4a1d      	ldr	r2, [pc, #116]	; (800ccbc <USB_SetTurnaroundTime+0x13c>)
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	d906      	bls.n	800cc5a <USB_SetTurnaroundTime+0xda>
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	4a1c      	ldr	r2, [pc, #112]	; (800ccc0 <USB_SetTurnaroundTime+0x140>)
 800cc50:	4293      	cmp	r3, r2
 800cc52:	d202      	bcs.n	800cc5a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800cc54:	2307      	movs	r3, #7
 800cc56:	617b      	str	r3, [r7, #20]
 800cc58:	e00a      	b.n	800cc70 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800cc5a:	2306      	movs	r3, #6
 800cc5c:	617b      	str	r3, [r7, #20]
 800cc5e:	e007      	b.n	800cc70 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800cc60:	79fb      	ldrb	r3, [r7, #7]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d102      	bne.n	800cc6c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800cc66:	2309      	movs	r3, #9
 800cc68:	617b      	str	r3, [r7, #20]
 800cc6a:	e001      	b.n	800cc70 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800cc6c:	2309      	movs	r3, #9
 800cc6e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	68db      	ldr	r3, [r3, #12]
 800cc74:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	68da      	ldr	r2, [r3, #12]
 800cc80:	697b      	ldr	r3, [r7, #20]
 800cc82:	029b      	lsls	r3, r3, #10
 800cc84:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800cc88:	431a      	orrs	r2, r3
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cc8e:	2300      	movs	r3, #0
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	371c      	adds	r7, #28
 800cc94:	46bd      	mov	sp, r7
 800cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9a:	4770      	bx	lr
 800cc9c:	00d8acbf 	.word	0x00d8acbf
 800cca0:	00e4e1c0 	.word	0x00e4e1c0
 800cca4:	00f42400 	.word	0x00f42400
 800cca8:	01067380 	.word	0x01067380
 800ccac:	011a499f 	.word	0x011a499f
 800ccb0:	01312cff 	.word	0x01312cff
 800ccb4:	014ca43f 	.word	0x014ca43f
 800ccb8:	016e3600 	.word	0x016e3600
 800ccbc:	01a6ab1f 	.word	0x01a6ab1f
 800ccc0:	01e84800 	.word	0x01e84800

0800ccc4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b083      	sub	sp, #12
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	689b      	ldr	r3, [r3, #8]
 800ccd0:	f043 0201 	orr.w	r2, r3, #1
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ccd8:	2300      	movs	r3, #0
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	370c      	adds	r7, #12
 800ccde:	46bd      	mov	sp, r7
 800cce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce4:	4770      	bx	lr

0800cce6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cce6:	b480      	push	{r7}
 800cce8:	b083      	sub	sp, #12
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	689b      	ldr	r3, [r3, #8]
 800ccf2:	f023 0201 	bic.w	r2, r3, #1
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ccfa:	2300      	movs	r3, #0
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	370c      	adds	r7, #12
 800cd00:	46bd      	mov	sp, r7
 800cd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd06:	4770      	bx	lr

0800cd08 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b084      	sub	sp, #16
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
 800cd10:	460b      	mov	r3, r1
 800cd12:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800cd14:	2300      	movs	r3, #0
 800cd16:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	68db      	ldr	r3, [r3, #12]
 800cd1c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cd24:	78fb      	ldrb	r3, [r7, #3]
 800cd26:	2b01      	cmp	r3, #1
 800cd28:	d115      	bne.n	800cd56 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	68db      	ldr	r3, [r3, #12]
 800cd2e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cd36:	2001      	movs	r0, #1
 800cd38:	f7f4 fe52 	bl	80019e0 <HAL_Delay>
      ms++;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	3301      	adds	r3, #1
 800cd40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f001 fa4b 	bl	800e1de <USB_GetMode>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	2b01      	cmp	r3, #1
 800cd4c:	d01e      	beq.n	800cd8c <USB_SetCurrentMode+0x84>
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	2b31      	cmp	r3, #49	; 0x31
 800cd52:	d9f0      	bls.n	800cd36 <USB_SetCurrentMode+0x2e>
 800cd54:	e01a      	b.n	800cd8c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800cd56:	78fb      	ldrb	r3, [r7, #3]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d115      	bne.n	800cd88 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	68db      	ldr	r3, [r3, #12]
 800cd60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cd68:	2001      	movs	r0, #1
 800cd6a:	f7f4 fe39 	bl	80019e0 <HAL_Delay>
      ms++;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	3301      	adds	r3, #1
 800cd72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f001 fa32 	bl	800e1de <USB_GetMode>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d005      	beq.n	800cd8c <USB_SetCurrentMode+0x84>
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	2b31      	cmp	r3, #49	; 0x31
 800cd84:	d9f0      	bls.n	800cd68 <USB_SetCurrentMode+0x60>
 800cd86:	e001      	b.n	800cd8c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800cd88:	2301      	movs	r3, #1
 800cd8a:	e005      	b.n	800cd98 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2b32      	cmp	r3, #50	; 0x32
 800cd90:	d101      	bne.n	800cd96 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800cd92:	2301      	movs	r3, #1
 800cd94:	e000      	b.n	800cd98 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800cd96:	2300      	movs	r3, #0
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3710      	adds	r7, #16
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}

0800cda0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cda0:	b084      	sub	sp, #16
 800cda2:	b580      	push	{r7, lr}
 800cda4:	b086      	sub	sp, #24
 800cda6:	af00      	add	r7, sp, #0
 800cda8:	6078      	str	r0, [r7, #4]
 800cdaa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cdae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cdba:	2300      	movs	r3, #0
 800cdbc:	613b      	str	r3, [r7, #16]
 800cdbe:	e009      	b.n	800cdd4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800cdc0:	687a      	ldr	r2, [r7, #4]
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	3340      	adds	r3, #64	; 0x40
 800cdc6:	009b      	lsls	r3, r3, #2
 800cdc8:	4413      	add	r3, r2
 800cdca:	2200      	movs	r2, #0
 800cdcc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cdce:	693b      	ldr	r3, [r7, #16]
 800cdd0:	3301      	adds	r3, #1
 800cdd2:	613b      	str	r3, [r7, #16]
 800cdd4:	693b      	ldr	r3, [r7, #16]
 800cdd6:	2b0e      	cmp	r3, #14
 800cdd8:	d9f2      	bls.n	800cdc0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cdda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d11c      	bne.n	800ce1a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cde6:	685b      	ldr	r3, [r3, #4]
 800cde8:	68fa      	ldr	r2, [r7, #12]
 800cdea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cdee:	f043 0302 	orr.w	r3, r3, #2
 800cdf2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdf8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	601a      	str	r2, [r3, #0]
 800ce18:	e005      	b.n	800ce26 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ce2c:	461a      	mov	r2, r3
 800ce2e:	2300      	movs	r3, #0
 800ce30:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce38:	4619      	mov	r1, r3
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce40:	461a      	mov	r2, r3
 800ce42:	680b      	ldr	r3, [r1, #0]
 800ce44:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ce46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce48:	2b01      	cmp	r3, #1
 800ce4a:	d10c      	bne.n	800ce66 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ce4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d104      	bne.n	800ce5c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ce52:	2100      	movs	r1, #0
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f000 f965 	bl	800d124 <USB_SetDevSpeed>
 800ce5a:	e008      	b.n	800ce6e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ce5c:	2101      	movs	r1, #1
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f000 f960 	bl	800d124 <USB_SetDevSpeed>
 800ce64:	e003      	b.n	800ce6e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ce66:	2103      	movs	r1, #3
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f000 f95b 	bl	800d124 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ce6e:	2110      	movs	r1, #16
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f000 f8f3 	bl	800d05c <USB_FlushTxFifo>
 800ce76:	4603      	mov	r3, r0
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d001      	beq.n	800ce80 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f000 f91f 	bl	800d0c4 <USB_FlushRxFifo>
 800ce86:	4603      	mov	r3, r0
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d001      	beq.n	800ce90 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce96:	461a      	mov	r2, r3
 800ce98:	2300      	movs	r3, #0
 800ce9a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cea2:	461a      	mov	r2, r3
 800cea4:	2300      	movs	r3, #0
 800cea6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ceae:	461a      	mov	r2, r3
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	613b      	str	r3, [r7, #16]
 800ceb8:	e043      	b.n	800cf42 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	015a      	lsls	r2, r3, #5
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	4413      	add	r3, r2
 800cec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cecc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ced0:	d118      	bne.n	800cf04 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d10a      	bne.n	800ceee <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	015a      	lsls	r2, r3, #5
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	4413      	add	r3, r2
 800cee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cee4:	461a      	mov	r2, r3
 800cee6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ceea:	6013      	str	r3, [r2, #0]
 800ceec:	e013      	b.n	800cf16 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	015a      	lsls	r2, r3, #5
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	4413      	add	r3, r2
 800cef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cefa:	461a      	mov	r2, r3
 800cefc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cf00:	6013      	str	r3, [r2, #0]
 800cf02:	e008      	b.n	800cf16 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	015a      	lsls	r2, r3, #5
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	4413      	add	r3, r2
 800cf0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf10:	461a      	mov	r2, r3
 800cf12:	2300      	movs	r3, #0
 800cf14:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	015a      	lsls	r2, r3, #5
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	4413      	add	r3, r2
 800cf1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf22:	461a      	mov	r2, r3
 800cf24:	2300      	movs	r3, #0
 800cf26:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	015a      	lsls	r2, r3, #5
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	4413      	add	r3, r2
 800cf30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf34:	461a      	mov	r2, r3
 800cf36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cf3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cf3c:	693b      	ldr	r3, [r7, #16]
 800cf3e:	3301      	adds	r3, #1
 800cf40:	613b      	str	r3, [r7, #16]
 800cf42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf44:	693a      	ldr	r2, [r7, #16]
 800cf46:	429a      	cmp	r2, r3
 800cf48:	d3b7      	bcc.n	800ceba <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	613b      	str	r3, [r7, #16]
 800cf4e:	e043      	b.n	800cfd8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cf50:	693b      	ldr	r3, [r7, #16]
 800cf52:	015a      	lsls	r2, r3, #5
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	4413      	add	r3, r2
 800cf58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cf62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cf66:	d118      	bne.n	800cf9a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800cf68:	693b      	ldr	r3, [r7, #16]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d10a      	bne.n	800cf84 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	015a      	lsls	r2, r3, #5
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	4413      	add	r3, r2
 800cf76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cf80:	6013      	str	r3, [r2, #0]
 800cf82:	e013      	b.n	800cfac <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cf84:	693b      	ldr	r3, [r7, #16]
 800cf86:	015a      	lsls	r2, r3, #5
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	4413      	add	r3, r2
 800cf8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf90:	461a      	mov	r2, r3
 800cf92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cf96:	6013      	str	r3, [r2, #0]
 800cf98:	e008      	b.n	800cfac <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	015a      	lsls	r2, r3, #5
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	4413      	add	r3, r2
 800cfa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfa6:	461a      	mov	r2, r3
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cfac:	693b      	ldr	r3, [r7, #16]
 800cfae:	015a      	lsls	r2, r3, #5
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	4413      	add	r3, r2
 800cfb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfb8:	461a      	mov	r2, r3
 800cfba:	2300      	movs	r3, #0
 800cfbc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	015a      	lsls	r2, r3, #5
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	4413      	add	r3, r2
 800cfc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfca:	461a      	mov	r2, r3
 800cfcc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cfd0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cfd2:	693b      	ldr	r3, [r7, #16]
 800cfd4:	3301      	adds	r3, #1
 800cfd6:	613b      	str	r3, [r7, #16]
 800cfd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfda:	693a      	ldr	r2, [r7, #16]
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	d3b7      	bcc.n	800cf50 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfe6:	691b      	ldr	r3, [r3, #16]
 800cfe8:	68fa      	ldr	r2, [r7, #12]
 800cfea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cfee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cff2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2200      	movs	r2, #0
 800cff8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d000:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d004:	2b00      	cmp	r3, #0
 800d006:	d105      	bne.n	800d014 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	699b      	ldr	r3, [r3, #24]
 800d00c:	f043 0210 	orr.w	r2, r3, #16
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	699a      	ldr	r2, [r3, #24]
 800d018:	4b0e      	ldr	r3, [pc, #56]	; (800d054 <USB_DevInit+0x2b4>)
 800d01a:	4313      	orrs	r3, r2
 800d01c:	687a      	ldr	r2, [r7, #4]
 800d01e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d022:	2b00      	cmp	r3, #0
 800d024:	d005      	beq.n	800d032 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	699b      	ldr	r3, [r3, #24]
 800d02a:	f043 0208 	orr.w	r2, r3, #8
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d034:	2b01      	cmp	r3, #1
 800d036:	d105      	bne.n	800d044 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	699a      	ldr	r2, [r3, #24]
 800d03c:	4b06      	ldr	r3, [pc, #24]	; (800d058 <USB_DevInit+0x2b8>)
 800d03e:	4313      	orrs	r3, r2
 800d040:	687a      	ldr	r2, [r7, #4]
 800d042:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d044:	7dfb      	ldrb	r3, [r7, #23]
}
 800d046:	4618      	mov	r0, r3
 800d048:	3718      	adds	r7, #24
 800d04a:	46bd      	mov	sp, r7
 800d04c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d050:	b004      	add	sp, #16
 800d052:	4770      	bx	lr
 800d054:	803c3800 	.word	0x803c3800
 800d058:	40000004 	.word	0x40000004

0800d05c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d05c:	b480      	push	{r7}
 800d05e:	b085      	sub	sp, #20
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d066:	2300      	movs	r3, #0
 800d068:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	3301      	adds	r3, #1
 800d06e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	4a13      	ldr	r2, [pc, #76]	; (800d0c0 <USB_FlushTxFifo+0x64>)
 800d074:	4293      	cmp	r3, r2
 800d076:	d901      	bls.n	800d07c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d078:	2303      	movs	r3, #3
 800d07a:	e01b      	b.n	800d0b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	691b      	ldr	r3, [r3, #16]
 800d080:	2b00      	cmp	r3, #0
 800d082:	daf2      	bge.n	800d06a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d084:	2300      	movs	r3, #0
 800d086:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	019b      	lsls	r3, r3, #6
 800d08c:	f043 0220 	orr.w	r2, r3, #32
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	3301      	adds	r3, #1
 800d098:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	4a08      	ldr	r2, [pc, #32]	; (800d0c0 <USB_FlushTxFifo+0x64>)
 800d09e:	4293      	cmp	r3, r2
 800d0a0:	d901      	bls.n	800d0a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d0a2:	2303      	movs	r3, #3
 800d0a4:	e006      	b.n	800d0b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	691b      	ldr	r3, [r3, #16]
 800d0aa:	f003 0320 	and.w	r3, r3, #32
 800d0ae:	2b20      	cmp	r3, #32
 800d0b0:	d0f0      	beq.n	800d094 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d0b2:	2300      	movs	r3, #0
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3714      	adds	r7, #20
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0be:	4770      	bx	lr
 800d0c0:	00030d40 	.word	0x00030d40

0800d0c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d0c4:	b480      	push	{r7}
 800d0c6:	b085      	sub	sp, #20
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	4a11      	ldr	r2, [pc, #68]	; (800d120 <USB_FlushRxFifo+0x5c>)
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	d901      	bls.n	800d0e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d0de:	2303      	movs	r3, #3
 800d0e0:	e018      	b.n	800d114 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	691b      	ldr	r3, [r3, #16]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	daf2      	bge.n	800d0d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	2210      	movs	r2, #16
 800d0f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	3301      	adds	r3, #1
 800d0f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	4a08      	ldr	r2, [pc, #32]	; (800d120 <USB_FlushRxFifo+0x5c>)
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d901      	bls.n	800d106 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d102:	2303      	movs	r3, #3
 800d104:	e006      	b.n	800d114 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	691b      	ldr	r3, [r3, #16]
 800d10a:	f003 0310 	and.w	r3, r3, #16
 800d10e:	2b10      	cmp	r3, #16
 800d110:	d0f0      	beq.n	800d0f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d112:	2300      	movs	r3, #0
}
 800d114:	4618      	mov	r0, r3
 800d116:	3714      	adds	r7, #20
 800d118:	46bd      	mov	sp, r7
 800d11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11e:	4770      	bx	lr
 800d120:	00030d40 	.word	0x00030d40

0800d124 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d124:	b480      	push	{r7}
 800d126:	b085      	sub	sp, #20
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
 800d12c:	460b      	mov	r3, r1
 800d12e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d13a:	681a      	ldr	r2, [r3, #0]
 800d13c:	78fb      	ldrb	r3, [r7, #3]
 800d13e:	68f9      	ldr	r1, [r7, #12]
 800d140:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d144:	4313      	orrs	r3, r2
 800d146:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d148:	2300      	movs	r3, #0
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	3714      	adds	r7, #20
 800d14e:	46bd      	mov	sp, r7
 800d150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d154:	4770      	bx	lr

0800d156 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d156:	b480      	push	{r7}
 800d158:	b087      	sub	sp, #28
 800d15a:	af00      	add	r7, sp, #0
 800d15c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d168:	689b      	ldr	r3, [r3, #8]
 800d16a:	f003 0306 	and.w	r3, r3, #6
 800d16e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d102      	bne.n	800d17c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d176:	2300      	movs	r3, #0
 800d178:	75fb      	strb	r3, [r7, #23]
 800d17a:	e00a      	b.n	800d192 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	2b02      	cmp	r3, #2
 800d180:	d002      	beq.n	800d188 <USB_GetDevSpeed+0x32>
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	2b06      	cmp	r3, #6
 800d186:	d102      	bne.n	800d18e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d188:	2302      	movs	r3, #2
 800d18a:	75fb      	strb	r3, [r7, #23]
 800d18c:	e001      	b.n	800d192 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d18e:	230f      	movs	r3, #15
 800d190:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d192:	7dfb      	ldrb	r3, [r7, #23]
}
 800d194:	4618      	mov	r0, r3
 800d196:	371c      	adds	r7, #28
 800d198:	46bd      	mov	sp, r7
 800d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19e:	4770      	bx	lr

0800d1a0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	b085      	sub	sp, #20
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
 800d1a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	781b      	ldrb	r3, [r3, #0]
 800d1b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	785b      	ldrb	r3, [r3, #1]
 800d1b8:	2b01      	cmp	r3, #1
 800d1ba:	d139      	bne.n	800d230 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1c2:	69da      	ldr	r2, [r3, #28]
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	781b      	ldrb	r3, [r3, #0]
 800d1c8:	f003 030f 	and.w	r3, r3, #15
 800d1cc:	2101      	movs	r1, #1
 800d1ce:	fa01 f303 	lsl.w	r3, r1, r3
 800d1d2:	b29b      	uxth	r3, r3
 800d1d4:	68f9      	ldr	r1, [r7, #12]
 800d1d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d1da:	4313      	orrs	r3, r2
 800d1dc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d1de:	68bb      	ldr	r3, [r7, #8]
 800d1e0:	015a      	lsls	r2, r3, #5
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	4413      	add	r3, r2
 800d1e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d153      	bne.n	800d29c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	015a      	lsls	r2, r3, #5
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	4413      	add	r3, r2
 800d1fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d200:	681a      	ldr	r2, [r3, #0]
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	68db      	ldr	r3, [r3, #12]
 800d206:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	791b      	ldrb	r3, [r3, #4]
 800d20e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d210:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	059b      	lsls	r3, r3, #22
 800d216:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d218:	431a      	orrs	r2, r3
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	0159      	lsls	r1, r3, #5
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	440b      	add	r3, r1
 800d222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d226:	4619      	mov	r1, r3
 800d228:	4b20      	ldr	r3, [pc, #128]	; (800d2ac <USB_ActivateEndpoint+0x10c>)
 800d22a:	4313      	orrs	r3, r2
 800d22c:	600b      	str	r3, [r1, #0]
 800d22e:	e035      	b.n	800d29c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d236:	69da      	ldr	r2, [r3, #28]
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	781b      	ldrb	r3, [r3, #0]
 800d23c:	f003 030f 	and.w	r3, r3, #15
 800d240:	2101      	movs	r1, #1
 800d242:	fa01 f303 	lsl.w	r3, r1, r3
 800d246:	041b      	lsls	r3, r3, #16
 800d248:	68f9      	ldr	r1, [r7, #12]
 800d24a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d24e:	4313      	orrs	r3, r2
 800d250:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	015a      	lsls	r2, r3, #5
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	4413      	add	r3, r2
 800d25a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d264:	2b00      	cmp	r3, #0
 800d266:	d119      	bne.n	800d29c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	015a      	lsls	r2, r3, #5
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	4413      	add	r3, r2
 800d270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d274:	681a      	ldr	r2, [r3, #0]
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	68db      	ldr	r3, [r3, #12]
 800d27a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	791b      	ldrb	r3, [r3, #4]
 800d282:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d284:	430b      	orrs	r3, r1
 800d286:	431a      	orrs	r2, r3
 800d288:	68bb      	ldr	r3, [r7, #8]
 800d28a:	0159      	lsls	r1, r3, #5
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	440b      	add	r3, r1
 800d290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d294:	4619      	mov	r1, r3
 800d296:	4b05      	ldr	r3, [pc, #20]	; (800d2ac <USB_ActivateEndpoint+0x10c>)
 800d298:	4313      	orrs	r3, r2
 800d29a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d29c:	2300      	movs	r3, #0
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3714      	adds	r7, #20
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a8:	4770      	bx	lr
 800d2aa:	bf00      	nop
 800d2ac:	10008000 	.word	0x10008000

0800d2b0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	b085      	sub	sp, #20
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
 800d2b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	781b      	ldrb	r3, [r3, #0]
 800d2c2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	785b      	ldrb	r3, [r3, #1]
 800d2c8:	2b01      	cmp	r3, #1
 800d2ca:	d161      	bne.n	800d390 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	015a      	lsls	r2, r3, #5
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	4413      	add	r3, r2
 800d2d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d2de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d2e2:	d11f      	bne.n	800d324 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	015a      	lsls	r2, r3, #5
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	4413      	add	r3, r2
 800d2ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	68ba      	ldr	r2, [r7, #8]
 800d2f4:	0151      	lsls	r1, r2, #5
 800d2f6:	68fa      	ldr	r2, [r7, #12]
 800d2f8:	440a      	add	r2, r1
 800d2fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d302:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	015a      	lsls	r2, r3, #5
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	4413      	add	r3, r2
 800d30c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	68ba      	ldr	r2, [r7, #8]
 800d314:	0151      	lsls	r1, r2, #5
 800d316:	68fa      	ldr	r2, [r7, #12]
 800d318:	440a      	add	r2, r1
 800d31a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d31e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d322:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d32a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	781b      	ldrb	r3, [r3, #0]
 800d330:	f003 030f 	and.w	r3, r3, #15
 800d334:	2101      	movs	r1, #1
 800d336:	fa01 f303 	lsl.w	r3, r1, r3
 800d33a:	b29b      	uxth	r3, r3
 800d33c:	43db      	mvns	r3, r3
 800d33e:	68f9      	ldr	r1, [r7, #12]
 800d340:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d344:	4013      	ands	r3, r2
 800d346:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d34e:	69da      	ldr	r2, [r3, #28]
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	781b      	ldrb	r3, [r3, #0]
 800d354:	f003 030f 	and.w	r3, r3, #15
 800d358:	2101      	movs	r1, #1
 800d35a:	fa01 f303 	lsl.w	r3, r1, r3
 800d35e:	b29b      	uxth	r3, r3
 800d360:	43db      	mvns	r3, r3
 800d362:	68f9      	ldr	r1, [r7, #12]
 800d364:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d368:	4013      	ands	r3, r2
 800d36a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	015a      	lsls	r2, r3, #5
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	4413      	add	r3, r2
 800d374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d378:	681a      	ldr	r2, [r3, #0]
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	0159      	lsls	r1, r3, #5
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	440b      	add	r3, r1
 800d382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d386:	4619      	mov	r1, r3
 800d388:	4b35      	ldr	r3, [pc, #212]	; (800d460 <USB_DeactivateEndpoint+0x1b0>)
 800d38a:	4013      	ands	r3, r2
 800d38c:	600b      	str	r3, [r1, #0]
 800d38e:	e060      	b.n	800d452 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	015a      	lsls	r2, r3, #5
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	4413      	add	r3, r2
 800d398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d3a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d3a6:	d11f      	bne.n	800d3e8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	015a      	lsls	r2, r3, #5
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	4413      	add	r3, r2
 800d3b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	68ba      	ldr	r2, [r7, #8]
 800d3b8:	0151      	lsls	r1, r2, #5
 800d3ba:	68fa      	ldr	r2, [r7, #12]
 800d3bc:	440a      	add	r2, r1
 800d3be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d3c6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	015a      	lsls	r2, r3, #5
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	4413      	add	r3, r2
 800d3d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	68ba      	ldr	r2, [r7, #8]
 800d3d8:	0151      	lsls	r1, r2, #5
 800d3da:	68fa      	ldr	r2, [r7, #12]
 800d3dc:	440a      	add	r2, r1
 800d3de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d3e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	f003 030f 	and.w	r3, r3, #15
 800d3f8:	2101      	movs	r1, #1
 800d3fa:	fa01 f303 	lsl.w	r3, r1, r3
 800d3fe:	041b      	lsls	r3, r3, #16
 800d400:	43db      	mvns	r3, r3
 800d402:	68f9      	ldr	r1, [r7, #12]
 800d404:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d408:	4013      	ands	r3, r2
 800d40a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d412:	69da      	ldr	r2, [r3, #28]
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	781b      	ldrb	r3, [r3, #0]
 800d418:	f003 030f 	and.w	r3, r3, #15
 800d41c:	2101      	movs	r1, #1
 800d41e:	fa01 f303 	lsl.w	r3, r1, r3
 800d422:	041b      	lsls	r3, r3, #16
 800d424:	43db      	mvns	r3, r3
 800d426:	68f9      	ldr	r1, [r7, #12]
 800d428:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d42c:	4013      	ands	r3, r2
 800d42e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	015a      	lsls	r2, r3, #5
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	4413      	add	r3, r2
 800d438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d43c:	681a      	ldr	r2, [r3, #0]
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	0159      	lsls	r1, r3, #5
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	440b      	add	r3, r1
 800d446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d44a:	4619      	mov	r1, r3
 800d44c:	4b05      	ldr	r3, [pc, #20]	; (800d464 <USB_DeactivateEndpoint+0x1b4>)
 800d44e:	4013      	ands	r3, r2
 800d450:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d452:	2300      	movs	r3, #0
}
 800d454:	4618      	mov	r0, r3
 800d456:	3714      	adds	r7, #20
 800d458:	46bd      	mov	sp, r7
 800d45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45e:	4770      	bx	lr
 800d460:	ec337800 	.word	0xec337800
 800d464:	eff37800 	.word	0xeff37800

0800d468 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b08a      	sub	sp, #40	; 0x28
 800d46c:	af02      	add	r7, sp, #8
 800d46e:	60f8      	str	r0, [r7, #12]
 800d470:	60b9      	str	r1, [r7, #8]
 800d472:	4613      	mov	r3, r2
 800d474:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	781b      	ldrb	r3, [r3, #0]
 800d47e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	785b      	ldrb	r3, [r3, #1]
 800d484:	2b01      	cmp	r3, #1
 800d486:	f040 8163 	bne.w	800d750 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	699b      	ldr	r3, [r3, #24]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d132      	bne.n	800d4f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d492:	69bb      	ldr	r3, [r7, #24]
 800d494:	015a      	lsls	r2, r3, #5
 800d496:	69fb      	ldr	r3, [r7, #28]
 800d498:	4413      	add	r3, r2
 800d49a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d49e:	691a      	ldr	r2, [r3, #16]
 800d4a0:	69bb      	ldr	r3, [r7, #24]
 800d4a2:	0159      	lsls	r1, r3, #5
 800d4a4:	69fb      	ldr	r3, [r7, #28]
 800d4a6:	440b      	add	r3, r1
 800d4a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4ac:	4619      	mov	r1, r3
 800d4ae:	4ba5      	ldr	r3, [pc, #660]	; (800d744 <USB_EPStartXfer+0x2dc>)
 800d4b0:	4013      	ands	r3, r2
 800d4b2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d4b4:	69bb      	ldr	r3, [r7, #24]
 800d4b6:	015a      	lsls	r2, r3, #5
 800d4b8:	69fb      	ldr	r3, [r7, #28]
 800d4ba:	4413      	add	r3, r2
 800d4bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4c0:	691b      	ldr	r3, [r3, #16]
 800d4c2:	69ba      	ldr	r2, [r7, #24]
 800d4c4:	0151      	lsls	r1, r2, #5
 800d4c6:	69fa      	ldr	r2, [r7, #28]
 800d4c8:	440a      	add	r2, r1
 800d4ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d4d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d4d4:	69bb      	ldr	r3, [r7, #24]
 800d4d6:	015a      	lsls	r2, r3, #5
 800d4d8:	69fb      	ldr	r3, [r7, #28]
 800d4da:	4413      	add	r3, r2
 800d4dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4e0:	691a      	ldr	r2, [r3, #16]
 800d4e2:	69bb      	ldr	r3, [r7, #24]
 800d4e4:	0159      	lsls	r1, r3, #5
 800d4e6:	69fb      	ldr	r3, [r7, #28]
 800d4e8:	440b      	add	r3, r1
 800d4ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4ee:	4619      	mov	r1, r3
 800d4f0:	4b95      	ldr	r3, [pc, #596]	; (800d748 <USB_EPStartXfer+0x2e0>)
 800d4f2:	4013      	ands	r3, r2
 800d4f4:	610b      	str	r3, [r1, #16]
 800d4f6:	e074      	b.n	800d5e2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d4f8:	69bb      	ldr	r3, [r7, #24]
 800d4fa:	015a      	lsls	r2, r3, #5
 800d4fc:	69fb      	ldr	r3, [r7, #28]
 800d4fe:	4413      	add	r3, r2
 800d500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d504:	691a      	ldr	r2, [r3, #16]
 800d506:	69bb      	ldr	r3, [r7, #24]
 800d508:	0159      	lsls	r1, r3, #5
 800d50a:	69fb      	ldr	r3, [r7, #28]
 800d50c:	440b      	add	r3, r1
 800d50e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d512:	4619      	mov	r1, r3
 800d514:	4b8c      	ldr	r3, [pc, #560]	; (800d748 <USB_EPStartXfer+0x2e0>)
 800d516:	4013      	ands	r3, r2
 800d518:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d51a:	69bb      	ldr	r3, [r7, #24]
 800d51c:	015a      	lsls	r2, r3, #5
 800d51e:	69fb      	ldr	r3, [r7, #28]
 800d520:	4413      	add	r3, r2
 800d522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d526:	691a      	ldr	r2, [r3, #16]
 800d528:	69bb      	ldr	r3, [r7, #24]
 800d52a:	0159      	lsls	r1, r3, #5
 800d52c:	69fb      	ldr	r3, [r7, #28]
 800d52e:	440b      	add	r3, r1
 800d530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d534:	4619      	mov	r1, r3
 800d536:	4b83      	ldr	r3, [pc, #524]	; (800d744 <USB_EPStartXfer+0x2dc>)
 800d538:	4013      	ands	r3, r2
 800d53a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d53c:	69bb      	ldr	r3, [r7, #24]
 800d53e:	015a      	lsls	r2, r3, #5
 800d540:	69fb      	ldr	r3, [r7, #28]
 800d542:	4413      	add	r3, r2
 800d544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d548:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d54a:	68bb      	ldr	r3, [r7, #8]
 800d54c:	6999      	ldr	r1, [r3, #24]
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	68db      	ldr	r3, [r3, #12]
 800d552:	440b      	add	r3, r1
 800d554:	1e59      	subs	r1, r3, #1
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	68db      	ldr	r3, [r3, #12]
 800d55a:	fbb1 f3f3 	udiv	r3, r1, r3
 800d55e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d560:	4b7a      	ldr	r3, [pc, #488]	; (800d74c <USB_EPStartXfer+0x2e4>)
 800d562:	400b      	ands	r3, r1
 800d564:	69b9      	ldr	r1, [r7, #24]
 800d566:	0148      	lsls	r0, r1, #5
 800d568:	69f9      	ldr	r1, [r7, #28]
 800d56a:	4401      	add	r1, r0
 800d56c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d570:	4313      	orrs	r3, r2
 800d572:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d574:	69bb      	ldr	r3, [r7, #24]
 800d576:	015a      	lsls	r2, r3, #5
 800d578:	69fb      	ldr	r3, [r7, #28]
 800d57a:	4413      	add	r3, r2
 800d57c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d580:	691a      	ldr	r2, [r3, #16]
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	699b      	ldr	r3, [r3, #24]
 800d586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d58a:	69b9      	ldr	r1, [r7, #24]
 800d58c:	0148      	lsls	r0, r1, #5
 800d58e:	69f9      	ldr	r1, [r7, #28]
 800d590:	4401      	add	r1, r0
 800d592:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d596:	4313      	orrs	r3, r2
 800d598:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	791b      	ldrb	r3, [r3, #4]
 800d59e:	2b01      	cmp	r3, #1
 800d5a0:	d11f      	bne.n	800d5e2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d5a2:	69bb      	ldr	r3, [r7, #24]
 800d5a4:	015a      	lsls	r2, r3, #5
 800d5a6:	69fb      	ldr	r3, [r7, #28]
 800d5a8:	4413      	add	r3, r2
 800d5aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5ae:	691b      	ldr	r3, [r3, #16]
 800d5b0:	69ba      	ldr	r2, [r7, #24]
 800d5b2:	0151      	lsls	r1, r2, #5
 800d5b4:	69fa      	ldr	r2, [r7, #28]
 800d5b6:	440a      	add	r2, r1
 800d5b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5bc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d5c0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d5c2:	69bb      	ldr	r3, [r7, #24]
 800d5c4:	015a      	lsls	r2, r3, #5
 800d5c6:	69fb      	ldr	r3, [r7, #28]
 800d5c8:	4413      	add	r3, r2
 800d5ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5ce:	691b      	ldr	r3, [r3, #16]
 800d5d0:	69ba      	ldr	r2, [r7, #24]
 800d5d2:	0151      	lsls	r1, r2, #5
 800d5d4:	69fa      	ldr	r2, [r7, #28]
 800d5d6:	440a      	add	r2, r1
 800d5d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d5e0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d5e2:	79fb      	ldrb	r3, [r7, #7]
 800d5e4:	2b01      	cmp	r3, #1
 800d5e6:	d14b      	bne.n	800d680 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	695b      	ldr	r3, [r3, #20]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d009      	beq.n	800d604 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d5f0:	69bb      	ldr	r3, [r7, #24]
 800d5f2:	015a      	lsls	r2, r3, #5
 800d5f4:	69fb      	ldr	r3, [r7, #28]
 800d5f6:	4413      	add	r3, r2
 800d5f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	695b      	ldr	r3, [r3, #20]
 800d602:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	791b      	ldrb	r3, [r3, #4]
 800d608:	2b01      	cmp	r3, #1
 800d60a:	d128      	bne.n	800d65e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d60c:	69fb      	ldr	r3, [r7, #28]
 800d60e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d612:	689b      	ldr	r3, [r3, #8]
 800d614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d110      	bne.n	800d63e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d61c:	69bb      	ldr	r3, [r7, #24]
 800d61e:	015a      	lsls	r2, r3, #5
 800d620:	69fb      	ldr	r3, [r7, #28]
 800d622:	4413      	add	r3, r2
 800d624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	69ba      	ldr	r2, [r7, #24]
 800d62c:	0151      	lsls	r1, r2, #5
 800d62e:	69fa      	ldr	r2, [r7, #28]
 800d630:	440a      	add	r2, r1
 800d632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d636:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d63a:	6013      	str	r3, [r2, #0]
 800d63c:	e00f      	b.n	800d65e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d63e:	69bb      	ldr	r3, [r7, #24]
 800d640:	015a      	lsls	r2, r3, #5
 800d642:	69fb      	ldr	r3, [r7, #28]
 800d644:	4413      	add	r3, r2
 800d646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	69ba      	ldr	r2, [r7, #24]
 800d64e:	0151      	lsls	r1, r2, #5
 800d650:	69fa      	ldr	r2, [r7, #28]
 800d652:	440a      	add	r2, r1
 800d654:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d65c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d65e:	69bb      	ldr	r3, [r7, #24]
 800d660:	015a      	lsls	r2, r3, #5
 800d662:	69fb      	ldr	r3, [r7, #28]
 800d664:	4413      	add	r3, r2
 800d666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	69ba      	ldr	r2, [r7, #24]
 800d66e:	0151      	lsls	r1, r2, #5
 800d670:	69fa      	ldr	r2, [r7, #28]
 800d672:	440a      	add	r2, r1
 800d674:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d678:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d67c:	6013      	str	r3, [r2, #0]
 800d67e:	e137      	b.n	800d8f0 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d680:	69bb      	ldr	r3, [r7, #24]
 800d682:	015a      	lsls	r2, r3, #5
 800d684:	69fb      	ldr	r3, [r7, #28]
 800d686:	4413      	add	r3, r2
 800d688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	69ba      	ldr	r2, [r7, #24]
 800d690:	0151      	lsls	r1, r2, #5
 800d692:	69fa      	ldr	r2, [r7, #28]
 800d694:	440a      	add	r2, r1
 800d696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d69a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d69e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	791b      	ldrb	r3, [r3, #4]
 800d6a4:	2b01      	cmp	r3, #1
 800d6a6:	d015      	beq.n	800d6d4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	699b      	ldr	r3, [r3, #24]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	f000 811f 	beq.w	800d8f0 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d6b2:	69fb      	ldr	r3, [r7, #28]
 800d6b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	f003 030f 	and.w	r3, r3, #15
 800d6c2:	2101      	movs	r1, #1
 800d6c4:	fa01 f303 	lsl.w	r3, r1, r3
 800d6c8:	69f9      	ldr	r1, [r7, #28]
 800d6ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d6ce:	4313      	orrs	r3, r2
 800d6d0:	634b      	str	r3, [r1, #52]	; 0x34
 800d6d2:	e10d      	b.n	800d8f0 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d6d4:	69fb      	ldr	r3, [r7, #28]
 800d6d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6da:	689b      	ldr	r3, [r3, #8]
 800d6dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d110      	bne.n	800d706 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d6e4:	69bb      	ldr	r3, [r7, #24]
 800d6e6:	015a      	lsls	r2, r3, #5
 800d6e8:	69fb      	ldr	r3, [r7, #28]
 800d6ea:	4413      	add	r3, r2
 800d6ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	69ba      	ldr	r2, [r7, #24]
 800d6f4:	0151      	lsls	r1, r2, #5
 800d6f6:	69fa      	ldr	r2, [r7, #28]
 800d6f8:	440a      	add	r2, r1
 800d6fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d702:	6013      	str	r3, [r2, #0]
 800d704:	e00f      	b.n	800d726 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d706:	69bb      	ldr	r3, [r7, #24]
 800d708:	015a      	lsls	r2, r3, #5
 800d70a:	69fb      	ldr	r3, [r7, #28]
 800d70c:	4413      	add	r3, r2
 800d70e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	69ba      	ldr	r2, [r7, #24]
 800d716:	0151      	lsls	r1, r2, #5
 800d718:	69fa      	ldr	r2, [r7, #28]
 800d71a:	440a      	add	r2, r1
 800d71c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d724:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	6919      	ldr	r1, [r3, #16]
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	781a      	ldrb	r2, [r3, #0]
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	699b      	ldr	r3, [r3, #24]
 800d732:	b298      	uxth	r0, r3
 800d734:	79fb      	ldrb	r3, [r7, #7]
 800d736:	9300      	str	r3, [sp, #0]
 800d738:	4603      	mov	r3, r0
 800d73a:	68f8      	ldr	r0, [r7, #12]
 800d73c:	f000 faea 	bl	800dd14 <USB_WritePacket>
 800d740:	e0d6      	b.n	800d8f0 <USB_EPStartXfer+0x488>
 800d742:	bf00      	nop
 800d744:	e007ffff 	.word	0xe007ffff
 800d748:	fff80000 	.word	0xfff80000
 800d74c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d750:	69bb      	ldr	r3, [r7, #24]
 800d752:	015a      	lsls	r2, r3, #5
 800d754:	69fb      	ldr	r3, [r7, #28]
 800d756:	4413      	add	r3, r2
 800d758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d75c:	691a      	ldr	r2, [r3, #16]
 800d75e:	69bb      	ldr	r3, [r7, #24]
 800d760:	0159      	lsls	r1, r3, #5
 800d762:	69fb      	ldr	r3, [r7, #28]
 800d764:	440b      	add	r3, r1
 800d766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d76a:	4619      	mov	r1, r3
 800d76c:	4b63      	ldr	r3, [pc, #396]	; (800d8fc <USB_EPStartXfer+0x494>)
 800d76e:	4013      	ands	r3, r2
 800d770:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d772:	69bb      	ldr	r3, [r7, #24]
 800d774:	015a      	lsls	r2, r3, #5
 800d776:	69fb      	ldr	r3, [r7, #28]
 800d778:	4413      	add	r3, r2
 800d77a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d77e:	691a      	ldr	r2, [r3, #16]
 800d780:	69bb      	ldr	r3, [r7, #24]
 800d782:	0159      	lsls	r1, r3, #5
 800d784:	69fb      	ldr	r3, [r7, #28]
 800d786:	440b      	add	r3, r1
 800d788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d78c:	4619      	mov	r1, r3
 800d78e:	4b5c      	ldr	r3, [pc, #368]	; (800d900 <USB_EPStartXfer+0x498>)
 800d790:	4013      	ands	r3, r2
 800d792:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	699b      	ldr	r3, [r3, #24]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d123      	bne.n	800d7e4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d79c:	69bb      	ldr	r3, [r7, #24]
 800d79e:	015a      	lsls	r2, r3, #5
 800d7a0:	69fb      	ldr	r3, [r7, #28]
 800d7a2:	4413      	add	r3, r2
 800d7a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7a8:	691a      	ldr	r2, [r3, #16]
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	68db      	ldr	r3, [r3, #12]
 800d7ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d7b2:	69b9      	ldr	r1, [r7, #24]
 800d7b4:	0148      	lsls	r0, r1, #5
 800d7b6:	69f9      	ldr	r1, [r7, #28]
 800d7b8:	4401      	add	r1, r0
 800d7ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d7be:	4313      	orrs	r3, r2
 800d7c0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d7c2:	69bb      	ldr	r3, [r7, #24]
 800d7c4:	015a      	lsls	r2, r3, #5
 800d7c6:	69fb      	ldr	r3, [r7, #28]
 800d7c8:	4413      	add	r3, r2
 800d7ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7ce:	691b      	ldr	r3, [r3, #16]
 800d7d0:	69ba      	ldr	r2, [r7, #24]
 800d7d2:	0151      	lsls	r1, r2, #5
 800d7d4:	69fa      	ldr	r2, [r7, #28]
 800d7d6:	440a      	add	r2, r1
 800d7d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d7dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d7e0:	6113      	str	r3, [r2, #16]
 800d7e2:	e037      	b.n	800d854 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	699a      	ldr	r2, [r3, #24]
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	68db      	ldr	r3, [r3, #12]
 800d7ec:	4413      	add	r3, r2
 800d7ee:	1e5a      	subs	r2, r3, #1
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	68db      	ldr	r3, [r3, #12]
 800d7f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7f8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800d7fa:	68bb      	ldr	r3, [r7, #8]
 800d7fc:	68db      	ldr	r3, [r3, #12]
 800d7fe:	8afa      	ldrh	r2, [r7, #22]
 800d800:	fb03 f202 	mul.w	r2, r3, r2
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d808:	69bb      	ldr	r3, [r7, #24]
 800d80a:	015a      	lsls	r2, r3, #5
 800d80c:	69fb      	ldr	r3, [r7, #28]
 800d80e:	4413      	add	r3, r2
 800d810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d814:	691a      	ldr	r2, [r3, #16]
 800d816:	8afb      	ldrh	r3, [r7, #22]
 800d818:	04d9      	lsls	r1, r3, #19
 800d81a:	4b3a      	ldr	r3, [pc, #232]	; (800d904 <USB_EPStartXfer+0x49c>)
 800d81c:	400b      	ands	r3, r1
 800d81e:	69b9      	ldr	r1, [r7, #24]
 800d820:	0148      	lsls	r0, r1, #5
 800d822:	69f9      	ldr	r1, [r7, #28]
 800d824:	4401      	add	r1, r0
 800d826:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d82a:	4313      	orrs	r3, r2
 800d82c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800d82e:	69bb      	ldr	r3, [r7, #24]
 800d830:	015a      	lsls	r2, r3, #5
 800d832:	69fb      	ldr	r3, [r7, #28]
 800d834:	4413      	add	r3, r2
 800d836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d83a:	691a      	ldr	r2, [r3, #16]
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	69db      	ldr	r3, [r3, #28]
 800d840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d844:	69b9      	ldr	r1, [r7, #24]
 800d846:	0148      	lsls	r0, r1, #5
 800d848:	69f9      	ldr	r1, [r7, #28]
 800d84a:	4401      	add	r1, r0
 800d84c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d850:	4313      	orrs	r3, r2
 800d852:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d854:	79fb      	ldrb	r3, [r7, #7]
 800d856:	2b01      	cmp	r3, #1
 800d858:	d10d      	bne.n	800d876 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	691b      	ldr	r3, [r3, #16]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d009      	beq.n	800d876 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	6919      	ldr	r1, [r3, #16]
 800d866:	69bb      	ldr	r3, [r7, #24]
 800d868:	015a      	lsls	r2, r3, #5
 800d86a:	69fb      	ldr	r3, [r7, #28]
 800d86c:	4413      	add	r3, r2
 800d86e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d872:	460a      	mov	r2, r1
 800d874:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	791b      	ldrb	r3, [r3, #4]
 800d87a:	2b01      	cmp	r3, #1
 800d87c:	d128      	bne.n	800d8d0 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d87e:	69fb      	ldr	r3, [r7, #28]
 800d880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d884:	689b      	ldr	r3, [r3, #8]
 800d886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d110      	bne.n	800d8b0 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d88e:	69bb      	ldr	r3, [r7, #24]
 800d890:	015a      	lsls	r2, r3, #5
 800d892:	69fb      	ldr	r3, [r7, #28]
 800d894:	4413      	add	r3, r2
 800d896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	69ba      	ldr	r2, [r7, #24]
 800d89e:	0151      	lsls	r1, r2, #5
 800d8a0:	69fa      	ldr	r2, [r7, #28]
 800d8a2:	440a      	add	r2, r1
 800d8a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d8a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d8ac:	6013      	str	r3, [r2, #0]
 800d8ae:	e00f      	b.n	800d8d0 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d8b0:	69bb      	ldr	r3, [r7, #24]
 800d8b2:	015a      	lsls	r2, r3, #5
 800d8b4:	69fb      	ldr	r3, [r7, #28]
 800d8b6:	4413      	add	r3, r2
 800d8b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	69ba      	ldr	r2, [r7, #24]
 800d8c0:	0151      	lsls	r1, r2, #5
 800d8c2:	69fa      	ldr	r2, [r7, #28]
 800d8c4:	440a      	add	r2, r1
 800d8c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d8ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d8ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d8d0:	69bb      	ldr	r3, [r7, #24]
 800d8d2:	015a      	lsls	r2, r3, #5
 800d8d4:	69fb      	ldr	r3, [r7, #28]
 800d8d6:	4413      	add	r3, r2
 800d8d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	69ba      	ldr	r2, [r7, #24]
 800d8e0:	0151      	lsls	r1, r2, #5
 800d8e2:	69fa      	ldr	r2, [r7, #28]
 800d8e4:	440a      	add	r2, r1
 800d8e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d8ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d8ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d8f0:	2300      	movs	r3, #0
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3720      	adds	r7, #32
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
 800d8fa:	bf00      	nop
 800d8fc:	fff80000 	.word	0xfff80000
 800d900:	e007ffff 	.word	0xe007ffff
 800d904:	1ff80000 	.word	0x1ff80000

0800d908 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d908:	b480      	push	{r7}
 800d90a:	b087      	sub	sp, #28
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	60f8      	str	r0, [r7, #12]
 800d910:	60b9      	str	r1, [r7, #8]
 800d912:	4613      	mov	r3, r2
 800d914:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	781b      	ldrb	r3, [r3, #0]
 800d91e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	785b      	ldrb	r3, [r3, #1]
 800d924:	2b01      	cmp	r3, #1
 800d926:	f040 80ce 	bne.w	800dac6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	699b      	ldr	r3, [r3, #24]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d132      	bne.n	800d998 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	015a      	lsls	r2, r3, #5
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	4413      	add	r3, r2
 800d93a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d93e:	691a      	ldr	r2, [r3, #16]
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	0159      	lsls	r1, r3, #5
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	440b      	add	r3, r1
 800d948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d94c:	4619      	mov	r1, r3
 800d94e:	4b9a      	ldr	r3, [pc, #616]	; (800dbb8 <USB_EP0StartXfer+0x2b0>)
 800d950:	4013      	ands	r3, r2
 800d952:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d954:	693b      	ldr	r3, [r7, #16]
 800d956:	015a      	lsls	r2, r3, #5
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	4413      	add	r3, r2
 800d95c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d960:	691b      	ldr	r3, [r3, #16]
 800d962:	693a      	ldr	r2, [r7, #16]
 800d964:	0151      	lsls	r1, r2, #5
 800d966:	697a      	ldr	r2, [r7, #20]
 800d968:	440a      	add	r2, r1
 800d96a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d96e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d972:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	015a      	lsls	r2, r3, #5
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	4413      	add	r3, r2
 800d97c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d980:	691a      	ldr	r2, [r3, #16]
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	0159      	lsls	r1, r3, #5
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	440b      	add	r3, r1
 800d98a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d98e:	4619      	mov	r1, r3
 800d990:	4b8a      	ldr	r3, [pc, #552]	; (800dbbc <USB_EP0StartXfer+0x2b4>)
 800d992:	4013      	ands	r3, r2
 800d994:	610b      	str	r3, [r1, #16]
 800d996:	e04e      	b.n	800da36 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	015a      	lsls	r2, r3, #5
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	4413      	add	r3, r2
 800d9a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9a4:	691a      	ldr	r2, [r3, #16]
 800d9a6:	693b      	ldr	r3, [r7, #16]
 800d9a8:	0159      	lsls	r1, r3, #5
 800d9aa:	697b      	ldr	r3, [r7, #20]
 800d9ac:	440b      	add	r3, r1
 800d9ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9b2:	4619      	mov	r1, r3
 800d9b4:	4b81      	ldr	r3, [pc, #516]	; (800dbbc <USB_EP0StartXfer+0x2b4>)
 800d9b6:	4013      	ands	r3, r2
 800d9b8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	015a      	lsls	r2, r3, #5
 800d9be:	697b      	ldr	r3, [r7, #20]
 800d9c0:	4413      	add	r3, r2
 800d9c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9c6:	691a      	ldr	r2, [r3, #16]
 800d9c8:	693b      	ldr	r3, [r7, #16]
 800d9ca:	0159      	lsls	r1, r3, #5
 800d9cc:	697b      	ldr	r3, [r7, #20]
 800d9ce:	440b      	add	r3, r1
 800d9d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9d4:	4619      	mov	r1, r3
 800d9d6:	4b78      	ldr	r3, [pc, #480]	; (800dbb8 <USB_EP0StartXfer+0x2b0>)
 800d9d8:	4013      	ands	r3, r2
 800d9da:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	699a      	ldr	r2, [r3, #24]
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	68db      	ldr	r3, [r3, #12]
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	d903      	bls.n	800d9f0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	68da      	ldr	r2, [r3, #12]
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d9f0:	693b      	ldr	r3, [r7, #16]
 800d9f2:	015a      	lsls	r2, r3, #5
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	4413      	add	r3, r2
 800d9f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9fc:	691b      	ldr	r3, [r3, #16]
 800d9fe:	693a      	ldr	r2, [r7, #16]
 800da00:	0151      	lsls	r1, r2, #5
 800da02:	697a      	ldr	r2, [r7, #20]
 800da04:	440a      	add	r2, r1
 800da06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800da0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800da10:	693b      	ldr	r3, [r7, #16]
 800da12:	015a      	lsls	r2, r3, #5
 800da14:	697b      	ldr	r3, [r7, #20]
 800da16:	4413      	add	r3, r2
 800da18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da1c:	691a      	ldr	r2, [r3, #16]
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	699b      	ldr	r3, [r3, #24]
 800da22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800da26:	6939      	ldr	r1, [r7, #16]
 800da28:	0148      	lsls	r0, r1, #5
 800da2a:	6979      	ldr	r1, [r7, #20]
 800da2c:	4401      	add	r1, r0
 800da2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800da32:	4313      	orrs	r3, r2
 800da34:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800da36:	79fb      	ldrb	r3, [r7, #7]
 800da38:	2b01      	cmp	r3, #1
 800da3a:	d11e      	bne.n	800da7a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	695b      	ldr	r3, [r3, #20]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d009      	beq.n	800da58 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800da44:	693b      	ldr	r3, [r7, #16]
 800da46:	015a      	lsls	r2, r3, #5
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	4413      	add	r3, r2
 800da4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da50:	461a      	mov	r2, r3
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	695b      	ldr	r3, [r3, #20]
 800da56:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800da58:	693b      	ldr	r3, [r7, #16]
 800da5a:	015a      	lsls	r2, r3, #5
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	4413      	add	r3, r2
 800da60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	693a      	ldr	r2, [r7, #16]
 800da68:	0151      	lsls	r1, r2, #5
 800da6a:	697a      	ldr	r2, [r7, #20]
 800da6c:	440a      	add	r2, r1
 800da6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800da76:	6013      	str	r3, [r2, #0]
 800da78:	e097      	b.n	800dbaa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800da7a:	693b      	ldr	r3, [r7, #16]
 800da7c:	015a      	lsls	r2, r3, #5
 800da7e:	697b      	ldr	r3, [r7, #20]
 800da80:	4413      	add	r3, r2
 800da82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	693a      	ldr	r2, [r7, #16]
 800da8a:	0151      	lsls	r1, r2, #5
 800da8c:	697a      	ldr	r2, [r7, #20]
 800da8e:	440a      	add	r2, r1
 800da90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800da98:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	699b      	ldr	r3, [r3, #24]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	f000 8083 	beq.w	800dbaa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800daaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	781b      	ldrb	r3, [r3, #0]
 800dab0:	f003 030f 	and.w	r3, r3, #15
 800dab4:	2101      	movs	r1, #1
 800dab6:	fa01 f303 	lsl.w	r3, r1, r3
 800daba:	6979      	ldr	r1, [r7, #20]
 800dabc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dac0:	4313      	orrs	r3, r2
 800dac2:	634b      	str	r3, [r1, #52]	; 0x34
 800dac4:	e071      	b.n	800dbaa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	015a      	lsls	r2, r3, #5
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	4413      	add	r3, r2
 800dace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dad2:	691a      	ldr	r2, [r3, #16]
 800dad4:	693b      	ldr	r3, [r7, #16]
 800dad6:	0159      	lsls	r1, r3, #5
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	440b      	add	r3, r1
 800dadc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dae0:	4619      	mov	r1, r3
 800dae2:	4b36      	ldr	r3, [pc, #216]	; (800dbbc <USB_EP0StartXfer+0x2b4>)
 800dae4:	4013      	ands	r3, r2
 800dae6:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800dae8:	693b      	ldr	r3, [r7, #16]
 800daea:	015a      	lsls	r2, r3, #5
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	4413      	add	r3, r2
 800daf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daf4:	691a      	ldr	r2, [r3, #16]
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	0159      	lsls	r1, r3, #5
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	440b      	add	r3, r1
 800dafe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db02:	4619      	mov	r1, r3
 800db04:	4b2c      	ldr	r3, [pc, #176]	; (800dbb8 <USB_EP0StartXfer+0x2b0>)
 800db06:	4013      	ands	r3, r2
 800db08:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	699b      	ldr	r3, [r3, #24]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d003      	beq.n	800db1a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	68da      	ldr	r2, [r3, #12]
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	68da      	ldr	r2, [r3, #12]
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800db22:	693b      	ldr	r3, [r7, #16]
 800db24:	015a      	lsls	r2, r3, #5
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	4413      	add	r3, r2
 800db2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db2e:	691b      	ldr	r3, [r3, #16]
 800db30:	693a      	ldr	r2, [r7, #16]
 800db32:	0151      	lsls	r1, r2, #5
 800db34:	697a      	ldr	r2, [r7, #20]
 800db36:	440a      	add	r2, r1
 800db38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800db40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800db42:	693b      	ldr	r3, [r7, #16]
 800db44:	015a      	lsls	r2, r3, #5
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	4413      	add	r3, r2
 800db4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db4e:	691a      	ldr	r2, [r3, #16]
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	69db      	ldr	r3, [r3, #28]
 800db54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800db58:	6939      	ldr	r1, [r7, #16]
 800db5a:	0148      	lsls	r0, r1, #5
 800db5c:	6979      	ldr	r1, [r7, #20]
 800db5e:	4401      	add	r1, r0
 800db60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800db64:	4313      	orrs	r3, r2
 800db66:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800db68:	79fb      	ldrb	r3, [r7, #7]
 800db6a:	2b01      	cmp	r3, #1
 800db6c:	d10d      	bne.n	800db8a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	691b      	ldr	r3, [r3, #16]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d009      	beq.n	800db8a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	6919      	ldr	r1, [r3, #16]
 800db7a:	693b      	ldr	r3, [r7, #16]
 800db7c:	015a      	lsls	r2, r3, #5
 800db7e:	697b      	ldr	r3, [r7, #20]
 800db80:	4413      	add	r3, r2
 800db82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db86:	460a      	mov	r2, r1
 800db88:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800db8a:	693b      	ldr	r3, [r7, #16]
 800db8c:	015a      	lsls	r2, r3, #5
 800db8e:	697b      	ldr	r3, [r7, #20]
 800db90:	4413      	add	r3, r2
 800db92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	693a      	ldr	r2, [r7, #16]
 800db9a:	0151      	lsls	r1, r2, #5
 800db9c:	697a      	ldr	r2, [r7, #20]
 800db9e:	440a      	add	r2, r1
 800dba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dba4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dba8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dbaa:	2300      	movs	r3, #0
}
 800dbac:	4618      	mov	r0, r3
 800dbae:	371c      	adds	r7, #28
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb6:	4770      	bx	lr
 800dbb8:	e007ffff 	.word	0xe007ffff
 800dbbc:	fff80000 	.word	0xfff80000

0800dbc0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dbc0:	b480      	push	{r7}
 800dbc2:	b087      	sub	sp, #28
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
 800dbc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	785b      	ldrb	r3, [r3, #1]
 800dbda:	2b01      	cmp	r3, #1
 800dbdc:	d14a      	bne.n	800dc74 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	781b      	ldrb	r3, [r3, #0]
 800dbe2:	015a      	lsls	r2, r3, #5
 800dbe4:	693b      	ldr	r3, [r7, #16]
 800dbe6:	4413      	add	r3, r2
 800dbe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dbf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dbf6:	f040 8086 	bne.w	800dd06 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	781b      	ldrb	r3, [r3, #0]
 800dbfe:	015a      	lsls	r2, r3, #5
 800dc00:	693b      	ldr	r3, [r7, #16]
 800dc02:	4413      	add	r3, r2
 800dc04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	683a      	ldr	r2, [r7, #0]
 800dc0c:	7812      	ldrb	r2, [r2, #0]
 800dc0e:	0151      	lsls	r1, r2, #5
 800dc10:	693a      	ldr	r2, [r7, #16]
 800dc12:	440a      	add	r2, r1
 800dc14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc18:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dc1c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	781b      	ldrb	r3, [r3, #0]
 800dc22:	015a      	lsls	r2, r3, #5
 800dc24:	693b      	ldr	r3, [r7, #16]
 800dc26:	4413      	add	r3, r2
 800dc28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	683a      	ldr	r2, [r7, #0]
 800dc30:	7812      	ldrb	r2, [r2, #0]
 800dc32:	0151      	lsls	r1, r2, #5
 800dc34:	693a      	ldr	r2, [r7, #16]
 800dc36:	440a      	add	r2, r1
 800dc38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dc40:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	3301      	adds	r3, #1
 800dc46:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	f242 7210 	movw	r2, #10000	; 0x2710
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	d902      	bls.n	800dc58 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800dc52:	2301      	movs	r3, #1
 800dc54:	75fb      	strb	r3, [r7, #23]
          break;
 800dc56:	e056      	b.n	800dd06 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	781b      	ldrb	r3, [r3, #0]
 800dc5c:	015a      	lsls	r2, r3, #5
 800dc5e:	693b      	ldr	r3, [r7, #16]
 800dc60:	4413      	add	r3, r2
 800dc62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dc6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dc70:	d0e7      	beq.n	800dc42 <USB_EPStopXfer+0x82>
 800dc72:	e048      	b.n	800dd06 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	781b      	ldrb	r3, [r3, #0]
 800dc78:	015a      	lsls	r2, r3, #5
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	4413      	add	r3, r2
 800dc7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dc88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dc8c:	d13b      	bne.n	800dd06 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	781b      	ldrb	r3, [r3, #0]
 800dc92:	015a      	lsls	r2, r3, #5
 800dc94:	693b      	ldr	r3, [r7, #16]
 800dc96:	4413      	add	r3, r2
 800dc98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	683a      	ldr	r2, [r7, #0]
 800dca0:	7812      	ldrb	r2, [r2, #0]
 800dca2:	0151      	lsls	r1, r2, #5
 800dca4:	693a      	ldr	r2, [r7, #16]
 800dca6:	440a      	add	r2, r1
 800dca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dcac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dcb0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	781b      	ldrb	r3, [r3, #0]
 800dcb6:	015a      	lsls	r2, r3, #5
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	4413      	add	r3, r2
 800dcbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	683a      	ldr	r2, [r7, #0]
 800dcc4:	7812      	ldrb	r2, [r2, #0]
 800dcc6:	0151      	lsls	r1, r2, #5
 800dcc8:	693a      	ldr	r2, [r7, #16]
 800dcca:	440a      	add	r2, r1
 800dccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dcd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dcd4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	3301      	adds	r3, #1
 800dcda:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	f242 7210 	movw	r2, #10000	; 0x2710
 800dce2:	4293      	cmp	r3, r2
 800dce4:	d902      	bls.n	800dcec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800dce6:	2301      	movs	r3, #1
 800dce8:	75fb      	strb	r3, [r7, #23]
          break;
 800dcea:	e00c      	b.n	800dd06 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	781b      	ldrb	r3, [r3, #0]
 800dcf0:	015a      	lsls	r2, r3, #5
 800dcf2:	693b      	ldr	r3, [r7, #16]
 800dcf4:	4413      	add	r3, r2
 800dcf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dd00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dd04:	d0e7      	beq.n	800dcd6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800dd06:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	371c      	adds	r7, #28
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd12:	4770      	bx	lr

0800dd14 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800dd14:	b480      	push	{r7}
 800dd16:	b089      	sub	sp, #36	; 0x24
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	60f8      	str	r0, [r7, #12]
 800dd1c:	60b9      	str	r1, [r7, #8]
 800dd1e:	4611      	mov	r1, r2
 800dd20:	461a      	mov	r2, r3
 800dd22:	460b      	mov	r3, r1
 800dd24:	71fb      	strb	r3, [r7, #7]
 800dd26:	4613      	mov	r3, r2
 800dd28:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800dd2e:	68bb      	ldr	r3, [r7, #8]
 800dd30:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800dd32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d123      	bne.n	800dd82 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800dd3a:	88bb      	ldrh	r3, [r7, #4]
 800dd3c:	3303      	adds	r3, #3
 800dd3e:	089b      	lsrs	r3, r3, #2
 800dd40:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800dd42:	2300      	movs	r3, #0
 800dd44:	61bb      	str	r3, [r7, #24]
 800dd46:	e018      	b.n	800dd7a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800dd48:	79fb      	ldrb	r3, [r7, #7]
 800dd4a:	031a      	lsls	r2, r3, #12
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	4413      	add	r3, r2
 800dd50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd54:	461a      	mov	r2, r3
 800dd56:	69fb      	ldr	r3, [r7, #28]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800dd5c:	69fb      	ldr	r3, [r7, #28]
 800dd5e:	3301      	adds	r3, #1
 800dd60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800dd62:	69fb      	ldr	r3, [r7, #28]
 800dd64:	3301      	adds	r3, #1
 800dd66:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800dd68:	69fb      	ldr	r3, [r7, #28]
 800dd6a:	3301      	adds	r3, #1
 800dd6c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800dd6e:	69fb      	ldr	r3, [r7, #28]
 800dd70:	3301      	adds	r3, #1
 800dd72:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800dd74:	69bb      	ldr	r3, [r7, #24]
 800dd76:	3301      	adds	r3, #1
 800dd78:	61bb      	str	r3, [r7, #24]
 800dd7a:	69ba      	ldr	r2, [r7, #24]
 800dd7c:	693b      	ldr	r3, [r7, #16]
 800dd7e:	429a      	cmp	r2, r3
 800dd80:	d3e2      	bcc.n	800dd48 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800dd82:	2300      	movs	r3, #0
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	3724      	adds	r7, #36	; 0x24
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8e:	4770      	bx	lr

0800dd90 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800dd90:	b480      	push	{r7}
 800dd92:	b08b      	sub	sp, #44	; 0x2c
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	60f8      	str	r0, [r7, #12]
 800dd98:	60b9      	str	r1, [r7, #8]
 800dd9a:	4613      	mov	r3, r2
 800dd9c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800dda6:	88fb      	ldrh	r3, [r7, #6]
 800dda8:	089b      	lsrs	r3, r3, #2
 800ddaa:	b29b      	uxth	r3, r3
 800ddac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ddae:	88fb      	ldrh	r3, [r7, #6]
 800ddb0:	f003 0303 	and.w	r3, r3, #3
 800ddb4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	623b      	str	r3, [r7, #32]
 800ddba:	e014      	b.n	800dde6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ddbc:	69bb      	ldr	r3, [r7, #24]
 800ddbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddc2:	681a      	ldr	r2, [r3, #0]
 800ddc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddc6:	601a      	str	r2, [r3, #0]
    pDest++;
 800ddc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddca:	3301      	adds	r3, #1
 800ddcc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ddce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd0:	3301      	adds	r3, #1
 800ddd2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ddd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd6:	3301      	adds	r3, #1
 800ddd8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ddda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dddc:	3301      	adds	r3, #1
 800ddde:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800dde0:	6a3b      	ldr	r3, [r7, #32]
 800dde2:	3301      	adds	r3, #1
 800dde4:	623b      	str	r3, [r7, #32]
 800dde6:	6a3a      	ldr	r2, [r7, #32]
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	429a      	cmp	r2, r3
 800ddec:	d3e6      	bcc.n	800ddbc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ddee:	8bfb      	ldrh	r3, [r7, #30]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d01e      	beq.n	800de32 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ddf8:	69bb      	ldr	r3, [r7, #24]
 800ddfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddfe:	461a      	mov	r2, r3
 800de00:	f107 0310 	add.w	r3, r7, #16
 800de04:	6812      	ldr	r2, [r2, #0]
 800de06:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800de08:	693a      	ldr	r2, [r7, #16]
 800de0a:	6a3b      	ldr	r3, [r7, #32]
 800de0c:	b2db      	uxtb	r3, r3
 800de0e:	00db      	lsls	r3, r3, #3
 800de10:	fa22 f303 	lsr.w	r3, r2, r3
 800de14:	b2da      	uxtb	r2, r3
 800de16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de18:	701a      	strb	r2, [r3, #0]
      i++;
 800de1a:	6a3b      	ldr	r3, [r7, #32]
 800de1c:	3301      	adds	r3, #1
 800de1e:	623b      	str	r3, [r7, #32]
      pDest++;
 800de20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de22:	3301      	adds	r3, #1
 800de24:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800de26:	8bfb      	ldrh	r3, [r7, #30]
 800de28:	3b01      	subs	r3, #1
 800de2a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800de2c:	8bfb      	ldrh	r3, [r7, #30]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d1ea      	bne.n	800de08 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800de32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800de34:	4618      	mov	r0, r3
 800de36:	372c      	adds	r7, #44	; 0x2c
 800de38:	46bd      	mov	sp, r7
 800de3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3e:	4770      	bx	lr

0800de40 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800de40:	b480      	push	{r7}
 800de42:	b085      	sub	sp, #20
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
 800de48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	781b      	ldrb	r3, [r3, #0]
 800de52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	785b      	ldrb	r3, [r3, #1]
 800de58:	2b01      	cmp	r3, #1
 800de5a:	d12c      	bne.n	800deb6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	015a      	lsls	r2, r3, #5
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	4413      	add	r3, r2
 800de64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	db12      	blt.n	800de94 <USB_EPSetStall+0x54>
 800de6e:	68bb      	ldr	r3, [r7, #8]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d00f      	beq.n	800de94 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	015a      	lsls	r2, r3, #5
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	4413      	add	r3, r2
 800de7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	68ba      	ldr	r2, [r7, #8]
 800de84:	0151      	lsls	r1, r2, #5
 800de86:	68fa      	ldr	r2, [r7, #12]
 800de88:	440a      	add	r2, r1
 800de8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800de92:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	015a      	lsls	r2, r3, #5
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	4413      	add	r3, r2
 800de9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	68ba      	ldr	r2, [r7, #8]
 800dea4:	0151      	lsls	r1, r2, #5
 800dea6:	68fa      	ldr	r2, [r7, #12]
 800dea8:	440a      	add	r2, r1
 800deaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800deae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800deb2:	6013      	str	r3, [r2, #0]
 800deb4:	e02b      	b.n	800df0e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	015a      	lsls	r2, r3, #5
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	4413      	add	r3, r2
 800debe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	db12      	blt.n	800deee <USB_EPSetStall+0xae>
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d00f      	beq.n	800deee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	015a      	lsls	r2, r3, #5
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	4413      	add	r3, r2
 800ded6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	68ba      	ldr	r2, [r7, #8]
 800dede:	0151      	lsls	r1, r2, #5
 800dee0:	68fa      	ldr	r2, [r7, #12]
 800dee2:	440a      	add	r2, r1
 800dee4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dee8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800deec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800deee:	68bb      	ldr	r3, [r7, #8]
 800def0:	015a      	lsls	r2, r3, #5
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	4413      	add	r3, r2
 800def6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	68ba      	ldr	r2, [r7, #8]
 800defe:	0151      	lsls	r1, r2, #5
 800df00:	68fa      	ldr	r2, [r7, #12]
 800df02:	440a      	add	r2, r1
 800df04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800df08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800df0c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800df0e:	2300      	movs	r3, #0
}
 800df10:	4618      	mov	r0, r3
 800df12:	3714      	adds	r7, #20
 800df14:	46bd      	mov	sp, r7
 800df16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1a:	4770      	bx	lr

0800df1c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800df1c:	b480      	push	{r7}
 800df1e:	b085      	sub	sp, #20
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
 800df24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	781b      	ldrb	r3, [r3, #0]
 800df2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	785b      	ldrb	r3, [r3, #1]
 800df34:	2b01      	cmp	r3, #1
 800df36:	d128      	bne.n	800df8a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	015a      	lsls	r2, r3, #5
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	4413      	add	r3, r2
 800df40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	68ba      	ldr	r2, [r7, #8]
 800df48:	0151      	lsls	r1, r2, #5
 800df4a:	68fa      	ldr	r2, [r7, #12]
 800df4c:	440a      	add	r2, r1
 800df4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800df56:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	791b      	ldrb	r3, [r3, #4]
 800df5c:	2b03      	cmp	r3, #3
 800df5e:	d003      	beq.n	800df68 <USB_EPClearStall+0x4c>
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	791b      	ldrb	r3, [r3, #4]
 800df64:	2b02      	cmp	r3, #2
 800df66:	d138      	bne.n	800dfda <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	015a      	lsls	r2, r3, #5
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	4413      	add	r3, r2
 800df70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	68ba      	ldr	r2, [r7, #8]
 800df78:	0151      	lsls	r1, r2, #5
 800df7a:	68fa      	ldr	r2, [r7, #12]
 800df7c:	440a      	add	r2, r1
 800df7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800df86:	6013      	str	r3, [r2, #0]
 800df88:	e027      	b.n	800dfda <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800df8a:	68bb      	ldr	r3, [r7, #8]
 800df8c:	015a      	lsls	r2, r3, #5
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	4413      	add	r3, r2
 800df92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	68ba      	ldr	r2, [r7, #8]
 800df9a:	0151      	lsls	r1, r2, #5
 800df9c:	68fa      	ldr	r2, [r7, #12]
 800df9e:	440a      	add	r2, r1
 800dfa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dfa4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dfa8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	791b      	ldrb	r3, [r3, #4]
 800dfae:	2b03      	cmp	r3, #3
 800dfb0:	d003      	beq.n	800dfba <USB_EPClearStall+0x9e>
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	791b      	ldrb	r3, [r3, #4]
 800dfb6:	2b02      	cmp	r3, #2
 800dfb8:	d10f      	bne.n	800dfda <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	015a      	lsls	r2, r3, #5
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	4413      	add	r3, r2
 800dfc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	68ba      	ldr	r2, [r7, #8]
 800dfca:	0151      	lsls	r1, r2, #5
 800dfcc:	68fa      	ldr	r2, [r7, #12]
 800dfce:	440a      	add	r2, r1
 800dfd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dfd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dfd8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800dfda:	2300      	movs	r3, #0
}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	3714      	adds	r7, #20
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe6:	4770      	bx	lr

0800dfe8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800dfe8:	b480      	push	{r7}
 800dfea:	b085      	sub	sp, #20
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
 800dff0:	460b      	mov	r3, r1
 800dff2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	68fa      	ldr	r2, [r7, #12]
 800e002:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e006:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e00a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e012:	681a      	ldr	r2, [r3, #0]
 800e014:	78fb      	ldrb	r3, [r7, #3]
 800e016:	011b      	lsls	r3, r3, #4
 800e018:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e01c:	68f9      	ldr	r1, [r7, #12]
 800e01e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e022:	4313      	orrs	r3, r2
 800e024:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e026:	2300      	movs	r3, #0
}
 800e028:	4618      	mov	r0, r3
 800e02a:	3714      	adds	r7, #20
 800e02c:	46bd      	mov	sp, r7
 800e02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e032:	4770      	bx	lr

0800e034 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e034:	b480      	push	{r7}
 800e036:	b085      	sub	sp, #20
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	68fa      	ldr	r2, [r7, #12]
 800e04a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e04e:	f023 0303 	bic.w	r3, r3, #3
 800e052:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e05a:	685b      	ldr	r3, [r3, #4]
 800e05c:	68fa      	ldr	r2, [r7, #12]
 800e05e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e062:	f023 0302 	bic.w	r3, r3, #2
 800e066:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e068:	2300      	movs	r3, #0
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3714      	adds	r7, #20
 800e06e:	46bd      	mov	sp, r7
 800e070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e074:	4770      	bx	lr

0800e076 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e076:	b480      	push	{r7}
 800e078:	b085      	sub	sp, #20
 800e07a:	af00      	add	r7, sp, #0
 800e07c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	68fa      	ldr	r2, [r7, #12]
 800e08c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e090:	f023 0303 	bic.w	r3, r3, #3
 800e094:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e09c:	685b      	ldr	r3, [r3, #4]
 800e09e:	68fa      	ldr	r2, [r7, #12]
 800e0a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e0a4:	f043 0302 	orr.w	r3, r3, #2
 800e0a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e0aa:	2300      	movs	r3, #0
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	3714      	adds	r7, #20
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b6:	4770      	bx	lr

0800e0b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e0b8:	b480      	push	{r7}
 800e0ba:	b085      	sub	sp, #20
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	695b      	ldr	r3, [r3, #20]
 800e0c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	699b      	ldr	r3, [r3, #24]
 800e0ca:	68fa      	ldr	r2, [r7, #12]
 800e0cc:	4013      	ands	r3, r2
 800e0ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e0d0:	68fb      	ldr	r3, [r7, #12]
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3714      	adds	r7, #20
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0dc:	4770      	bx	lr

0800e0de <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e0de:	b480      	push	{r7}
 800e0e0:	b085      	sub	sp, #20
 800e0e2:	af00      	add	r7, sp, #0
 800e0e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0f0:	699b      	ldr	r3, [r3, #24]
 800e0f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0fa:	69db      	ldr	r3, [r3, #28]
 800e0fc:	68ba      	ldr	r2, [r7, #8]
 800e0fe:	4013      	ands	r3, r2
 800e100:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	0c1b      	lsrs	r3, r3, #16
}
 800e106:	4618      	mov	r0, r3
 800e108:	3714      	adds	r7, #20
 800e10a:	46bd      	mov	sp, r7
 800e10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e110:	4770      	bx	lr

0800e112 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e112:	b480      	push	{r7}
 800e114:	b085      	sub	sp, #20
 800e116:	af00      	add	r7, sp, #0
 800e118:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e124:	699b      	ldr	r3, [r3, #24]
 800e126:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e12e:	69db      	ldr	r3, [r3, #28]
 800e130:	68ba      	ldr	r2, [r7, #8]
 800e132:	4013      	ands	r3, r2
 800e134:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	b29b      	uxth	r3, r3
}
 800e13a:	4618      	mov	r0, r3
 800e13c:	3714      	adds	r7, #20
 800e13e:	46bd      	mov	sp, r7
 800e140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e144:	4770      	bx	lr

0800e146 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e146:	b480      	push	{r7}
 800e148:	b085      	sub	sp, #20
 800e14a:	af00      	add	r7, sp, #0
 800e14c:	6078      	str	r0, [r7, #4]
 800e14e:	460b      	mov	r3, r1
 800e150:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e156:	78fb      	ldrb	r3, [r7, #3]
 800e158:	015a      	lsls	r2, r3, #5
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	4413      	add	r3, r2
 800e15e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e162:	689b      	ldr	r3, [r3, #8]
 800e164:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e16c:	695b      	ldr	r3, [r3, #20]
 800e16e:	68ba      	ldr	r2, [r7, #8]
 800e170:	4013      	ands	r3, r2
 800e172:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e174:	68bb      	ldr	r3, [r7, #8]
}
 800e176:	4618      	mov	r0, r3
 800e178:	3714      	adds	r7, #20
 800e17a:	46bd      	mov	sp, r7
 800e17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e180:	4770      	bx	lr

0800e182 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e182:	b480      	push	{r7}
 800e184:	b087      	sub	sp, #28
 800e186:	af00      	add	r7, sp, #0
 800e188:	6078      	str	r0, [r7, #4]
 800e18a:	460b      	mov	r3, r1
 800e18c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e192:	697b      	ldr	r3, [r7, #20]
 800e194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e198:	691b      	ldr	r3, [r3, #16]
 800e19a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e19c:	697b      	ldr	r3, [r7, #20]
 800e19e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1a4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e1a6:	78fb      	ldrb	r3, [r7, #3]
 800e1a8:	f003 030f 	and.w	r3, r3, #15
 800e1ac:	68fa      	ldr	r2, [r7, #12]
 800e1ae:	fa22 f303 	lsr.w	r3, r2, r3
 800e1b2:	01db      	lsls	r3, r3, #7
 800e1b4:	b2db      	uxtb	r3, r3
 800e1b6:	693a      	ldr	r2, [r7, #16]
 800e1b8:	4313      	orrs	r3, r2
 800e1ba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e1bc:	78fb      	ldrb	r3, [r7, #3]
 800e1be:	015a      	lsls	r2, r3, #5
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	4413      	add	r3, r2
 800e1c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1c8:	689b      	ldr	r3, [r3, #8]
 800e1ca:	693a      	ldr	r2, [r7, #16]
 800e1cc:	4013      	ands	r3, r2
 800e1ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e1d0:	68bb      	ldr	r3, [r7, #8]
}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	371c      	adds	r7, #28
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1dc:	4770      	bx	lr

0800e1de <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e1de:	b480      	push	{r7}
 800e1e0:	b083      	sub	sp, #12
 800e1e2:	af00      	add	r7, sp, #0
 800e1e4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	695b      	ldr	r3, [r3, #20]
 800e1ea:	f003 0301 	and.w	r3, r3, #1
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	370c      	adds	r7, #12
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f8:	4770      	bx	lr
	...

0800e1fc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e1fc:	b480      	push	{r7}
 800e1fe:	b085      	sub	sp, #20
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e20e:	681a      	ldr	r2, [r3, #0]
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e216:	4619      	mov	r1, r3
 800e218:	4b09      	ldr	r3, [pc, #36]	; (800e240 <USB_ActivateSetup+0x44>)
 800e21a:	4013      	ands	r3, r2
 800e21c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e224:	685b      	ldr	r3, [r3, #4]
 800e226:	68fa      	ldr	r2, [r7, #12]
 800e228:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e22c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e230:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e232:	2300      	movs	r3, #0
}
 800e234:	4618      	mov	r0, r3
 800e236:	3714      	adds	r7, #20
 800e238:	46bd      	mov	sp, r7
 800e23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23e:	4770      	bx	lr
 800e240:	fffff800 	.word	0xfffff800

0800e244 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800e244:	b480      	push	{r7}
 800e246:	b087      	sub	sp, #28
 800e248:	af00      	add	r7, sp, #0
 800e24a:	60f8      	str	r0, [r7, #12]
 800e24c:	460b      	mov	r3, r1
 800e24e:	607a      	str	r2, [r7, #4]
 800e250:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	333c      	adds	r3, #60	; 0x3c
 800e25a:	3304      	adds	r3, #4
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	4a26      	ldr	r2, [pc, #152]	; (800e2fc <USB_EP0_OutStart+0xb8>)
 800e264:	4293      	cmp	r3, r2
 800e266:	d90a      	bls.n	800e27e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e268:	697b      	ldr	r3, [r7, #20]
 800e26a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e274:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e278:	d101      	bne.n	800e27e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e27a:	2300      	movs	r3, #0
 800e27c:	e037      	b.n	800e2ee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e284:	461a      	mov	r2, r3
 800e286:	2300      	movs	r3, #0
 800e288:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e290:	691b      	ldr	r3, [r3, #16]
 800e292:	697a      	ldr	r2, [r7, #20]
 800e294:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e298:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e29c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e29e:	697b      	ldr	r3, [r7, #20]
 800e2a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2a4:	691b      	ldr	r3, [r3, #16]
 800e2a6:	697a      	ldr	r2, [r7, #20]
 800e2a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e2ac:	f043 0318 	orr.w	r3, r3, #24
 800e2b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e2b2:	697b      	ldr	r3, [r7, #20]
 800e2b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2b8:	691b      	ldr	r3, [r3, #16]
 800e2ba:	697a      	ldr	r2, [r7, #20]
 800e2bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e2c0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e2c4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e2c6:	7afb      	ldrb	r3, [r7, #11]
 800e2c8:	2b01      	cmp	r3, #1
 800e2ca:	d10f      	bne.n	800e2ec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e2cc:	697b      	ldr	r3, [r7, #20]
 800e2ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2d2:	461a      	mov	r2, r3
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e2d8:	697b      	ldr	r3, [r7, #20]
 800e2da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	697a      	ldr	r2, [r7, #20]
 800e2e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e2e6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800e2ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e2ec:	2300      	movs	r3, #0
}
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	371c      	adds	r7, #28
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f8:	4770      	bx	lr
 800e2fa:	bf00      	nop
 800e2fc:	4f54300a 	.word	0x4f54300a

0800e300 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e300:	b480      	push	{r7}
 800e302:	b085      	sub	sp, #20
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e308:	2300      	movs	r3, #0
 800e30a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	3301      	adds	r3, #1
 800e310:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	4a13      	ldr	r2, [pc, #76]	; (800e364 <USB_CoreReset+0x64>)
 800e316:	4293      	cmp	r3, r2
 800e318:	d901      	bls.n	800e31e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e31a:	2303      	movs	r3, #3
 800e31c:	e01b      	b.n	800e356 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	691b      	ldr	r3, [r3, #16]
 800e322:	2b00      	cmp	r3, #0
 800e324:	daf2      	bge.n	800e30c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e326:	2300      	movs	r3, #0
 800e328:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	691b      	ldr	r3, [r3, #16]
 800e32e:	f043 0201 	orr.w	r2, r3, #1
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	3301      	adds	r3, #1
 800e33a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	4a09      	ldr	r2, [pc, #36]	; (800e364 <USB_CoreReset+0x64>)
 800e340:	4293      	cmp	r3, r2
 800e342:	d901      	bls.n	800e348 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e344:	2303      	movs	r3, #3
 800e346:	e006      	b.n	800e356 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	691b      	ldr	r3, [r3, #16]
 800e34c:	f003 0301 	and.w	r3, r3, #1
 800e350:	2b01      	cmp	r3, #1
 800e352:	d0f0      	beq.n	800e336 <USB_CoreReset+0x36>

  return HAL_OK;
 800e354:	2300      	movs	r3, #0
}
 800e356:	4618      	mov	r0, r3
 800e358:	3714      	adds	r7, #20
 800e35a:	46bd      	mov	sp, r7
 800e35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e360:	4770      	bx	lr
 800e362:	bf00      	nop
 800e364:	00030d40 	.word	0x00030d40

0800e368 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b084      	sub	sp, #16
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
 800e370:	460b      	mov	r3, r1
 800e372:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e374:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e378:	f002 fd3a 	bl	8010df0 <USBD_static_malloc>
 800e37c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d109      	bne.n	800e398 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	32b0      	adds	r2, #176	; 0xb0
 800e38e:	2100      	movs	r1, #0
 800e390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800e394:	2302      	movs	r3, #2
 800e396:	e0d4      	b.n	800e542 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800e398:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800e39c:	2100      	movs	r1, #0
 800e39e:	68f8      	ldr	r0, [r7, #12]
 800e3a0:	f002 fdaa 	bl	8010ef8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	32b0      	adds	r2, #176	; 0xb0
 800e3ae:	68f9      	ldr	r1, [r7, #12]
 800e3b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	32b0      	adds	r2, #176	; 0xb0
 800e3be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	7c1b      	ldrb	r3, [r3, #16]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d138      	bne.n	800e442 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e3d0:	4b5e      	ldr	r3, [pc, #376]	; (800e54c <USBD_CDC_Init+0x1e4>)
 800e3d2:	7819      	ldrb	r1, [r3, #0]
 800e3d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e3d8:	2202      	movs	r2, #2
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f002 fbe5 	bl	8010baa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e3e0:	4b5a      	ldr	r3, [pc, #360]	; (800e54c <USBD_CDC_Init+0x1e4>)
 800e3e2:	781b      	ldrb	r3, [r3, #0]
 800e3e4:	f003 020f 	and.w	r2, r3, #15
 800e3e8:	6879      	ldr	r1, [r7, #4]
 800e3ea:	4613      	mov	r3, r2
 800e3ec:	009b      	lsls	r3, r3, #2
 800e3ee:	4413      	add	r3, r2
 800e3f0:	009b      	lsls	r3, r3, #2
 800e3f2:	440b      	add	r3, r1
 800e3f4:	3324      	adds	r3, #36	; 0x24
 800e3f6:	2201      	movs	r2, #1
 800e3f8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e3fa:	4b55      	ldr	r3, [pc, #340]	; (800e550 <USBD_CDC_Init+0x1e8>)
 800e3fc:	7819      	ldrb	r1, [r3, #0]
 800e3fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e402:	2202      	movs	r2, #2
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f002 fbd0 	bl	8010baa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e40a:	4b51      	ldr	r3, [pc, #324]	; (800e550 <USBD_CDC_Init+0x1e8>)
 800e40c:	781b      	ldrb	r3, [r3, #0]
 800e40e:	f003 020f 	and.w	r2, r3, #15
 800e412:	6879      	ldr	r1, [r7, #4]
 800e414:	4613      	mov	r3, r2
 800e416:	009b      	lsls	r3, r3, #2
 800e418:	4413      	add	r3, r2
 800e41a:	009b      	lsls	r3, r3, #2
 800e41c:	440b      	add	r3, r1
 800e41e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e422:	2201      	movs	r2, #1
 800e424:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e426:	4b4b      	ldr	r3, [pc, #300]	; (800e554 <USBD_CDC_Init+0x1ec>)
 800e428:	781b      	ldrb	r3, [r3, #0]
 800e42a:	f003 020f 	and.w	r2, r3, #15
 800e42e:	6879      	ldr	r1, [r7, #4]
 800e430:	4613      	mov	r3, r2
 800e432:	009b      	lsls	r3, r3, #2
 800e434:	4413      	add	r3, r2
 800e436:	009b      	lsls	r3, r3, #2
 800e438:	440b      	add	r3, r1
 800e43a:	3326      	adds	r3, #38	; 0x26
 800e43c:	2210      	movs	r2, #16
 800e43e:	801a      	strh	r2, [r3, #0]
 800e440:	e035      	b.n	800e4ae <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e442:	4b42      	ldr	r3, [pc, #264]	; (800e54c <USBD_CDC_Init+0x1e4>)
 800e444:	7819      	ldrb	r1, [r3, #0]
 800e446:	2340      	movs	r3, #64	; 0x40
 800e448:	2202      	movs	r2, #2
 800e44a:	6878      	ldr	r0, [r7, #4]
 800e44c:	f002 fbad 	bl	8010baa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e450:	4b3e      	ldr	r3, [pc, #248]	; (800e54c <USBD_CDC_Init+0x1e4>)
 800e452:	781b      	ldrb	r3, [r3, #0]
 800e454:	f003 020f 	and.w	r2, r3, #15
 800e458:	6879      	ldr	r1, [r7, #4]
 800e45a:	4613      	mov	r3, r2
 800e45c:	009b      	lsls	r3, r3, #2
 800e45e:	4413      	add	r3, r2
 800e460:	009b      	lsls	r3, r3, #2
 800e462:	440b      	add	r3, r1
 800e464:	3324      	adds	r3, #36	; 0x24
 800e466:	2201      	movs	r2, #1
 800e468:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e46a:	4b39      	ldr	r3, [pc, #228]	; (800e550 <USBD_CDC_Init+0x1e8>)
 800e46c:	7819      	ldrb	r1, [r3, #0]
 800e46e:	2340      	movs	r3, #64	; 0x40
 800e470:	2202      	movs	r2, #2
 800e472:	6878      	ldr	r0, [r7, #4]
 800e474:	f002 fb99 	bl	8010baa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e478:	4b35      	ldr	r3, [pc, #212]	; (800e550 <USBD_CDC_Init+0x1e8>)
 800e47a:	781b      	ldrb	r3, [r3, #0]
 800e47c:	f003 020f 	and.w	r2, r3, #15
 800e480:	6879      	ldr	r1, [r7, #4]
 800e482:	4613      	mov	r3, r2
 800e484:	009b      	lsls	r3, r3, #2
 800e486:	4413      	add	r3, r2
 800e488:	009b      	lsls	r3, r3, #2
 800e48a:	440b      	add	r3, r1
 800e48c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e490:	2201      	movs	r2, #1
 800e492:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e494:	4b2f      	ldr	r3, [pc, #188]	; (800e554 <USBD_CDC_Init+0x1ec>)
 800e496:	781b      	ldrb	r3, [r3, #0]
 800e498:	f003 020f 	and.w	r2, r3, #15
 800e49c:	6879      	ldr	r1, [r7, #4]
 800e49e:	4613      	mov	r3, r2
 800e4a0:	009b      	lsls	r3, r3, #2
 800e4a2:	4413      	add	r3, r2
 800e4a4:	009b      	lsls	r3, r3, #2
 800e4a6:	440b      	add	r3, r1
 800e4a8:	3326      	adds	r3, #38	; 0x26
 800e4aa:	2210      	movs	r2, #16
 800e4ac:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e4ae:	4b29      	ldr	r3, [pc, #164]	; (800e554 <USBD_CDC_Init+0x1ec>)
 800e4b0:	7819      	ldrb	r1, [r3, #0]
 800e4b2:	2308      	movs	r3, #8
 800e4b4:	2203      	movs	r2, #3
 800e4b6:	6878      	ldr	r0, [r7, #4]
 800e4b8:	f002 fb77 	bl	8010baa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800e4bc:	4b25      	ldr	r3, [pc, #148]	; (800e554 <USBD_CDC_Init+0x1ec>)
 800e4be:	781b      	ldrb	r3, [r3, #0]
 800e4c0:	f003 020f 	and.w	r2, r3, #15
 800e4c4:	6879      	ldr	r1, [r7, #4]
 800e4c6:	4613      	mov	r3, r2
 800e4c8:	009b      	lsls	r3, r3, #2
 800e4ca:	4413      	add	r3, r2
 800e4cc:	009b      	lsls	r3, r3, #2
 800e4ce:	440b      	add	r3, r1
 800e4d0:	3324      	adds	r3, #36	; 0x24
 800e4d2:	2201      	movs	r2, #1
 800e4d4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	2200      	movs	r2, #0
 800e4da:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e4e4:	687a      	ldr	r2, [r7, #4]
 800e4e6:	33b0      	adds	r3, #176	; 0xb0
 800e4e8:	009b      	lsls	r3, r3, #2
 800e4ea:	4413      	add	r3, r2
 800e4ec:	685b      	ldr	r3, [r3, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d101      	bne.n	800e510 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800e50c:	2302      	movs	r3, #2
 800e50e:	e018      	b.n	800e542 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	7c1b      	ldrb	r3, [r3, #16]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d10a      	bne.n	800e52e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e518:	4b0d      	ldr	r3, [pc, #52]	; (800e550 <USBD_CDC_Init+0x1e8>)
 800e51a:	7819      	ldrb	r1, [r3, #0]
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e522:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e526:	6878      	ldr	r0, [r7, #4]
 800e528:	f002 fc2e 	bl	8010d88 <USBD_LL_PrepareReceive>
 800e52c:	e008      	b.n	800e540 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e52e:	4b08      	ldr	r3, [pc, #32]	; (800e550 <USBD_CDC_Init+0x1e8>)
 800e530:	7819      	ldrb	r1, [r3, #0]
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e538:	2340      	movs	r3, #64	; 0x40
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f002 fc24 	bl	8010d88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e540:	2300      	movs	r3, #0
}
 800e542:	4618      	mov	r0, r3
 800e544:	3710      	adds	r7, #16
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}
 800e54a:	bf00      	nop
 800e54c:	24000097 	.word	0x24000097
 800e550:	24000098 	.word	0x24000098
 800e554:	24000099 	.word	0x24000099

0800e558 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b082      	sub	sp, #8
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
 800e560:	460b      	mov	r3, r1
 800e562:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e564:	4b3a      	ldr	r3, [pc, #232]	; (800e650 <USBD_CDC_DeInit+0xf8>)
 800e566:	781b      	ldrb	r3, [r3, #0]
 800e568:	4619      	mov	r1, r3
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f002 fb43 	bl	8010bf6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e570:	4b37      	ldr	r3, [pc, #220]	; (800e650 <USBD_CDC_DeInit+0xf8>)
 800e572:	781b      	ldrb	r3, [r3, #0]
 800e574:	f003 020f 	and.w	r2, r3, #15
 800e578:	6879      	ldr	r1, [r7, #4]
 800e57a:	4613      	mov	r3, r2
 800e57c:	009b      	lsls	r3, r3, #2
 800e57e:	4413      	add	r3, r2
 800e580:	009b      	lsls	r3, r3, #2
 800e582:	440b      	add	r3, r1
 800e584:	3324      	adds	r3, #36	; 0x24
 800e586:	2200      	movs	r2, #0
 800e588:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e58a:	4b32      	ldr	r3, [pc, #200]	; (800e654 <USBD_CDC_DeInit+0xfc>)
 800e58c:	781b      	ldrb	r3, [r3, #0]
 800e58e:	4619      	mov	r1, r3
 800e590:	6878      	ldr	r0, [r7, #4]
 800e592:	f002 fb30 	bl	8010bf6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e596:	4b2f      	ldr	r3, [pc, #188]	; (800e654 <USBD_CDC_DeInit+0xfc>)
 800e598:	781b      	ldrb	r3, [r3, #0]
 800e59a:	f003 020f 	and.w	r2, r3, #15
 800e59e:	6879      	ldr	r1, [r7, #4]
 800e5a0:	4613      	mov	r3, r2
 800e5a2:	009b      	lsls	r3, r3, #2
 800e5a4:	4413      	add	r3, r2
 800e5a6:	009b      	lsls	r3, r3, #2
 800e5a8:	440b      	add	r3, r1
 800e5aa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e5b2:	4b29      	ldr	r3, [pc, #164]	; (800e658 <USBD_CDC_DeInit+0x100>)
 800e5b4:	781b      	ldrb	r3, [r3, #0]
 800e5b6:	4619      	mov	r1, r3
 800e5b8:	6878      	ldr	r0, [r7, #4]
 800e5ba:	f002 fb1c 	bl	8010bf6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e5be:	4b26      	ldr	r3, [pc, #152]	; (800e658 <USBD_CDC_DeInit+0x100>)
 800e5c0:	781b      	ldrb	r3, [r3, #0]
 800e5c2:	f003 020f 	and.w	r2, r3, #15
 800e5c6:	6879      	ldr	r1, [r7, #4]
 800e5c8:	4613      	mov	r3, r2
 800e5ca:	009b      	lsls	r3, r3, #2
 800e5cc:	4413      	add	r3, r2
 800e5ce:	009b      	lsls	r3, r3, #2
 800e5d0:	440b      	add	r3, r1
 800e5d2:	3324      	adds	r3, #36	; 0x24
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e5d8:	4b1f      	ldr	r3, [pc, #124]	; (800e658 <USBD_CDC_DeInit+0x100>)
 800e5da:	781b      	ldrb	r3, [r3, #0]
 800e5dc:	f003 020f 	and.w	r2, r3, #15
 800e5e0:	6879      	ldr	r1, [r7, #4]
 800e5e2:	4613      	mov	r3, r2
 800e5e4:	009b      	lsls	r3, r3, #2
 800e5e6:	4413      	add	r3, r2
 800e5e8:	009b      	lsls	r3, r3, #2
 800e5ea:	440b      	add	r3, r1
 800e5ec:	3326      	adds	r3, #38	; 0x26
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	32b0      	adds	r2, #176	; 0xb0
 800e5fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d01f      	beq.n	800e644 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e60a:	687a      	ldr	r2, [r7, #4]
 800e60c:	33b0      	adds	r3, #176	; 0xb0
 800e60e:	009b      	lsls	r3, r3, #2
 800e610:	4413      	add	r3, r2
 800e612:	685b      	ldr	r3, [r3, #4]
 800e614:	685b      	ldr	r3, [r3, #4]
 800e616:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	32b0      	adds	r2, #176	; 0xb0
 800e622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e626:	4618      	mov	r0, r3
 800e628:	f002 fbf0 	bl	8010e0c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	32b0      	adds	r2, #176	; 0xb0
 800e636:	2100      	movs	r1, #0
 800e638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2200      	movs	r2, #0
 800e640:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e644:	2300      	movs	r3, #0
}
 800e646:	4618      	mov	r0, r3
 800e648:	3708      	adds	r7, #8
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}
 800e64e:	bf00      	nop
 800e650:	24000097 	.word	0x24000097
 800e654:	24000098 	.word	0x24000098
 800e658:	24000099 	.word	0x24000099

0800e65c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b086      	sub	sp, #24
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	32b0      	adds	r2, #176	; 0xb0
 800e670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e674:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e676:	2300      	movs	r3, #0
 800e678:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e67a:	2300      	movs	r3, #0
 800e67c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e67e:	2300      	movs	r3, #0
 800e680:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e682:	693b      	ldr	r3, [r7, #16]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d101      	bne.n	800e68c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e688:	2303      	movs	r3, #3
 800e68a:	e0bf      	b.n	800e80c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	781b      	ldrb	r3, [r3, #0]
 800e690:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e694:	2b00      	cmp	r3, #0
 800e696:	d050      	beq.n	800e73a <USBD_CDC_Setup+0xde>
 800e698:	2b20      	cmp	r3, #32
 800e69a:	f040 80af 	bne.w	800e7fc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	88db      	ldrh	r3, [r3, #6]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d03a      	beq.n	800e71c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	781b      	ldrb	r3, [r3, #0]
 800e6aa:	b25b      	sxtb	r3, r3
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	da1b      	bge.n	800e6e8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e6b6:	687a      	ldr	r2, [r7, #4]
 800e6b8:	33b0      	adds	r3, #176	; 0xb0
 800e6ba:	009b      	lsls	r3, r3, #2
 800e6bc:	4413      	add	r3, r2
 800e6be:	685b      	ldr	r3, [r3, #4]
 800e6c0:	689b      	ldr	r3, [r3, #8]
 800e6c2:	683a      	ldr	r2, [r7, #0]
 800e6c4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e6c6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e6c8:	683a      	ldr	r2, [r7, #0]
 800e6ca:	88d2      	ldrh	r2, [r2, #6]
 800e6cc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	88db      	ldrh	r3, [r3, #6]
 800e6d2:	2b07      	cmp	r3, #7
 800e6d4:	bf28      	it	cs
 800e6d6:	2307      	movcs	r3, #7
 800e6d8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e6da:	693b      	ldr	r3, [r7, #16]
 800e6dc:	89fa      	ldrh	r2, [r7, #14]
 800e6de:	4619      	mov	r1, r3
 800e6e0:	6878      	ldr	r0, [r7, #4]
 800e6e2:	f001 fd89 	bl	80101f8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e6e6:	e090      	b.n	800e80a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	785a      	ldrb	r2, [r3, #1]
 800e6ec:	693b      	ldr	r3, [r7, #16]
 800e6ee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	88db      	ldrh	r3, [r3, #6]
 800e6f6:	2b3f      	cmp	r3, #63	; 0x3f
 800e6f8:	d803      	bhi.n	800e702 <USBD_CDC_Setup+0xa6>
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	88db      	ldrh	r3, [r3, #6]
 800e6fe:	b2da      	uxtb	r2, r3
 800e700:	e000      	b.n	800e704 <USBD_CDC_Setup+0xa8>
 800e702:	2240      	movs	r2, #64	; 0x40
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e70a:	6939      	ldr	r1, [r7, #16]
 800e70c:	693b      	ldr	r3, [r7, #16]
 800e70e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800e712:	461a      	mov	r2, r3
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f001 fd9b 	bl	8010250 <USBD_CtlPrepareRx>
      break;
 800e71a:	e076      	b.n	800e80a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e722:	687a      	ldr	r2, [r7, #4]
 800e724:	33b0      	adds	r3, #176	; 0xb0
 800e726:	009b      	lsls	r3, r3, #2
 800e728:	4413      	add	r3, r2
 800e72a:	685b      	ldr	r3, [r3, #4]
 800e72c:	689b      	ldr	r3, [r3, #8]
 800e72e:	683a      	ldr	r2, [r7, #0]
 800e730:	7850      	ldrb	r0, [r2, #1]
 800e732:	2200      	movs	r2, #0
 800e734:	6839      	ldr	r1, [r7, #0]
 800e736:	4798      	blx	r3
      break;
 800e738:	e067      	b.n	800e80a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	785b      	ldrb	r3, [r3, #1]
 800e73e:	2b0b      	cmp	r3, #11
 800e740:	d851      	bhi.n	800e7e6 <USBD_CDC_Setup+0x18a>
 800e742:	a201      	add	r2, pc, #4	; (adr r2, 800e748 <USBD_CDC_Setup+0xec>)
 800e744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e748:	0800e779 	.word	0x0800e779
 800e74c:	0800e7f5 	.word	0x0800e7f5
 800e750:	0800e7e7 	.word	0x0800e7e7
 800e754:	0800e7e7 	.word	0x0800e7e7
 800e758:	0800e7e7 	.word	0x0800e7e7
 800e75c:	0800e7e7 	.word	0x0800e7e7
 800e760:	0800e7e7 	.word	0x0800e7e7
 800e764:	0800e7e7 	.word	0x0800e7e7
 800e768:	0800e7e7 	.word	0x0800e7e7
 800e76c:	0800e7e7 	.word	0x0800e7e7
 800e770:	0800e7a3 	.word	0x0800e7a3
 800e774:	0800e7cd 	.word	0x0800e7cd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e77e:	b2db      	uxtb	r3, r3
 800e780:	2b03      	cmp	r3, #3
 800e782:	d107      	bne.n	800e794 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e784:	f107 030a 	add.w	r3, r7, #10
 800e788:	2202      	movs	r2, #2
 800e78a:	4619      	mov	r1, r3
 800e78c:	6878      	ldr	r0, [r7, #4]
 800e78e:	f001 fd33 	bl	80101f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e792:	e032      	b.n	800e7fa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e794:	6839      	ldr	r1, [r7, #0]
 800e796:	6878      	ldr	r0, [r7, #4]
 800e798:	f001 fcbd 	bl	8010116 <USBD_CtlError>
            ret = USBD_FAIL;
 800e79c:	2303      	movs	r3, #3
 800e79e:	75fb      	strb	r3, [r7, #23]
          break;
 800e7a0:	e02b      	b.n	800e7fa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7a8:	b2db      	uxtb	r3, r3
 800e7aa:	2b03      	cmp	r3, #3
 800e7ac:	d107      	bne.n	800e7be <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e7ae:	f107 030d 	add.w	r3, r7, #13
 800e7b2:	2201      	movs	r2, #1
 800e7b4:	4619      	mov	r1, r3
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f001 fd1e 	bl	80101f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e7bc:	e01d      	b.n	800e7fa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e7be:	6839      	ldr	r1, [r7, #0]
 800e7c0:	6878      	ldr	r0, [r7, #4]
 800e7c2:	f001 fca8 	bl	8010116 <USBD_CtlError>
            ret = USBD_FAIL;
 800e7c6:	2303      	movs	r3, #3
 800e7c8:	75fb      	strb	r3, [r7, #23]
          break;
 800e7ca:	e016      	b.n	800e7fa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7d2:	b2db      	uxtb	r3, r3
 800e7d4:	2b03      	cmp	r3, #3
 800e7d6:	d00f      	beq.n	800e7f8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e7d8:	6839      	ldr	r1, [r7, #0]
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f001 fc9b 	bl	8010116 <USBD_CtlError>
            ret = USBD_FAIL;
 800e7e0:	2303      	movs	r3, #3
 800e7e2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e7e4:	e008      	b.n	800e7f8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e7e6:	6839      	ldr	r1, [r7, #0]
 800e7e8:	6878      	ldr	r0, [r7, #4]
 800e7ea:	f001 fc94 	bl	8010116 <USBD_CtlError>
          ret = USBD_FAIL;
 800e7ee:	2303      	movs	r3, #3
 800e7f0:	75fb      	strb	r3, [r7, #23]
          break;
 800e7f2:	e002      	b.n	800e7fa <USBD_CDC_Setup+0x19e>
          break;
 800e7f4:	bf00      	nop
 800e7f6:	e008      	b.n	800e80a <USBD_CDC_Setup+0x1ae>
          break;
 800e7f8:	bf00      	nop
      }
      break;
 800e7fa:	e006      	b.n	800e80a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e7fc:	6839      	ldr	r1, [r7, #0]
 800e7fe:	6878      	ldr	r0, [r7, #4]
 800e800:	f001 fc89 	bl	8010116 <USBD_CtlError>
      ret = USBD_FAIL;
 800e804:	2303      	movs	r3, #3
 800e806:	75fb      	strb	r3, [r7, #23]
      break;
 800e808:	bf00      	nop
  }

  return (uint8_t)ret;
 800e80a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e80c:	4618      	mov	r0, r3
 800e80e:	3718      	adds	r7, #24
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}

0800e814 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b084      	sub	sp, #16
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
 800e81c:	460b      	mov	r3, r1
 800e81e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e826:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	32b0      	adds	r2, #176	; 0xb0
 800e832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d101      	bne.n	800e83e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e83a:	2303      	movs	r3, #3
 800e83c:	e065      	b.n	800e90a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	32b0      	adds	r2, #176	; 0xb0
 800e848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e84c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e84e:	78fb      	ldrb	r3, [r7, #3]
 800e850:	f003 020f 	and.w	r2, r3, #15
 800e854:	6879      	ldr	r1, [r7, #4]
 800e856:	4613      	mov	r3, r2
 800e858:	009b      	lsls	r3, r3, #2
 800e85a:	4413      	add	r3, r2
 800e85c:	009b      	lsls	r3, r3, #2
 800e85e:	440b      	add	r3, r1
 800e860:	3318      	adds	r3, #24
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d02f      	beq.n	800e8c8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e868:	78fb      	ldrb	r3, [r7, #3]
 800e86a:	f003 020f 	and.w	r2, r3, #15
 800e86e:	6879      	ldr	r1, [r7, #4]
 800e870:	4613      	mov	r3, r2
 800e872:	009b      	lsls	r3, r3, #2
 800e874:	4413      	add	r3, r2
 800e876:	009b      	lsls	r3, r3, #2
 800e878:	440b      	add	r3, r1
 800e87a:	3318      	adds	r3, #24
 800e87c:	681a      	ldr	r2, [r3, #0]
 800e87e:	78fb      	ldrb	r3, [r7, #3]
 800e880:	f003 010f 	and.w	r1, r3, #15
 800e884:	68f8      	ldr	r0, [r7, #12]
 800e886:	460b      	mov	r3, r1
 800e888:	00db      	lsls	r3, r3, #3
 800e88a:	440b      	add	r3, r1
 800e88c:	009b      	lsls	r3, r3, #2
 800e88e:	4403      	add	r3, r0
 800e890:	3348      	adds	r3, #72	; 0x48
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	fbb2 f1f3 	udiv	r1, r2, r3
 800e898:	fb01 f303 	mul.w	r3, r1, r3
 800e89c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d112      	bne.n	800e8c8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e8a2:	78fb      	ldrb	r3, [r7, #3]
 800e8a4:	f003 020f 	and.w	r2, r3, #15
 800e8a8:	6879      	ldr	r1, [r7, #4]
 800e8aa:	4613      	mov	r3, r2
 800e8ac:	009b      	lsls	r3, r3, #2
 800e8ae:	4413      	add	r3, r2
 800e8b0:	009b      	lsls	r3, r3, #2
 800e8b2:	440b      	add	r3, r1
 800e8b4:	3318      	adds	r3, #24
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e8ba:	78f9      	ldrb	r1, [r7, #3]
 800e8bc:	2300      	movs	r3, #0
 800e8be:	2200      	movs	r2, #0
 800e8c0:	6878      	ldr	r0, [r7, #4]
 800e8c2:	f002 fa40 	bl	8010d46 <USBD_LL_Transmit>
 800e8c6:	e01f      	b.n	800e908 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e8c8:	68bb      	ldr	r3, [r7, #8]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e8d6:	687a      	ldr	r2, [r7, #4]
 800e8d8:	33b0      	adds	r3, #176	; 0xb0
 800e8da:	009b      	lsls	r3, r3, #2
 800e8dc:	4413      	add	r3, r2
 800e8de:	685b      	ldr	r3, [r3, #4]
 800e8e0:	691b      	ldr	r3, [r3, #16]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d010      	beq.n	800e908 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e8ec:	687a      	ldr	r2, [r7, #4]
 800e8ee:	33b0      	adds	r3, #176	; 0xb0
 800e8f0:	009b      	lsls	r3, r3, #2
 800e8f2:	4413      	add	r3, r2
 800e8f4:	685b      	ldr	r3, [r3, #4]
 800e8f6:	691b      	ldr	r3, [r3, #16]
 800e8f8:	68ba      	ldr	r2, [r7, #8]
 800e8fa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e8fe:	68ba      	ldr	r2, [r7, #8]
 800e900:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e904:	78fa      	ldrb	r2, [r7, #3]
 800e906:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e908:	2300      	movs	r3, #0
}
 800e90a:	4618      	mov	r0, r3
 800e90c:	3710      	adds	r7, #16
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}

0800e912 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e912:	b580      	push	{r7, lr}
 800e914:	b084      	sub	sp, #16
 800e916:	af00      	add	r7, sp, #0
 800e918:	6078      	str	r0, [r7, #4]
 800e91a:	460b      	mov	r3, r1
 800e91c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	32b0      	adds	r2, #176	; 0xb0
 800e928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e92c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	32b0      	adds	r2, #176	; 0xb0
 800e938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d101      	bne.n	800e944 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e940:	2303      	movs	r3, #3
 800e942:	e01a      	b.n	800e97a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e944:	78fb      	ldrb	r3, [r7, #3]
 800e946:	4619      	mov	r1, r3
 800e948:	6878      	ldr	r0, [r7, #4]
 800e94a:	f002 fa3e 	bl	8010dca <USBD_LL_GetRxDataSize>
 800e94e:	4602      	mov	r2, r0
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e95c:	687a      	ldr	r2, [r7, #4]
 800e95e:	33b0      	adds	r3, #176	; 0xb0
 800e960:	009b      	lsls	r3, r3, #2
 800e962:	4413      	add	r3, r2
 800e964:	685b      	ldr	r3, [r3, #4]
 800e966:	68db      	ldr	r3, [r3, #12]
 800e968:	68fa      	ldr	r2, [r7, #12]
 800e96a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e96e:	68fa      	ldr	r2, [r7, #12]
 800e970:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e974:	4611      	mov	r1, r2
 800e976:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e978:	2300      	movs	r3, #0
}
 800e97a:	4618      	mov	r0, r3
 800e97c:	3710      	adds	r7, #16
 800e97e:	46bd      	mov	sp, r7
 800e980:	bd80      	pop	{r7, pc}

0800e982 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e982:	b580      	push	{r7, lr}
 800e984:	b084      	sub	sp, #16
 800e986:	af00      	add	r7, sp, #0
 800e988:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	32b0      	adds	r2, #176	; 0xb0
 800e994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e998:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d101      	bne.n	800e9a4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e9a0:	2303      	movs	r3, #3
 800e9a2:	e025      	b.n	800e9f0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e9aa:	687a      	ldr	r2, [r7, #4]
 800e9ac:	33b0      	adds	r3, #176	; 0xb0
 800e9ae:	009b      	lsls	r3, r3, #2
 800e9b0:	4413      	add	r3, r2
 800e9b2:	685b      	ldr	r3, [r3, #4]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d01a      	beq.n	800e9ee <USBD_CDC_EP0_RxReady+0x6c>
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e9be:	2bff      	cmp	r3, #255	; 0xff
 800e9c0:	d015      	beq.n	800e9ee <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e9c8:	687a      	ldr	r2, [r7, #4]
 800e9ca:	33b0      	adds	r3, #176	; 0xb0
 800e9cc:	009b      	lsls	r3, r3, #2
 800e9ce:	4413      	add	r3, r2
 800e9d0:	685b      	ldr	r3, [r3, #4]
 800e9d2:	689b      	ldr	r3, [r3, #8]
 800e9d4:	68fa      	ldr	r2, [r7, #12]
 800e9d6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800e9da:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e9dc:	68fa      	ldr	r2, [r7, #12]
 800e9de:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e9e2:	b292      	uxth	r2, r2
 800e9e4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	22ff      	movs	r2, #255	; 0xff
 800e9ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e9ee:	2300      	movs	r3, #0
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3710      	adds	r7, #16
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}

0800e9f8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b086      	sub	sp, #24
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ea00:	2182      	movs	r1, #130	; 0x82
 800ea02:	4818      	ldr	r0, [pc, #96]	; (800ea64 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ea04:	f000 fd4f 	bl	800f4a6 <USBD_GetEpDesc>
 800ea08:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ea0a:	2101      	movs	r1, #1
 800ea0c:	4815      	ldr	r0, [pc, #84]	; (800ea64 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ea0e:	f000 fd4a 	bl	800f4a6 <USBD_GetEpDesc>
 800ea12:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ea14:	2181      	movs	r1, #129	; 0x81
 800ea16:	4813      	ldr	r0, [pc, #76]	; (800ea64 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ea18:	f000 fd45 	bl	800f4a6 <USBD_GetEpDesc>
 800ea1c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d002      	beq.n	800ea2a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ea24:	697b      	ldr	r3, [r7, #20]
 800ea26:	2210      	movs	r2, #16
 800ea28:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ea2a:	693b      	ldr	r3, [r7, #16]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d006      	beq.n	800ea3e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ea30:	693b      	ldr	r3, [r7, #16]
 800ea32:	2200      	movs	r2, #0
 800ea34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ea38:	711a      	strb	r2, [r3, #4]
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d006      	beq.n	800ea52 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	2200      	movs	r2, #0
 800ea48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ea4c:	711a      	strb	r2, [r3, #4]
 800ea4e:	2200      	movs	r2, #0
 800ea50:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	2243      	movs	r2, #67	; 0x43
 800ea56:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ea58:	4b02      	ldr	r3, [pc, #8]	; (800ea64 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	3718      	adds	r7, #24
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}
 800ea62:	bf00      	nop
 800ea64:	24000054 	.word	0x24000054

0800ea68 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b086      	sub	sp, #24
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ea70:	2182      	movs	r1, #130	; 0x82
 800ea72:	4818      	ldr	r0, [pc, #96]	; (800ead4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ea74:	f000 fd17 	bl	800f4a6 <USBD_GetEpDesc>
 800ea78:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ea7a:	2101      	movs	r1, #1
 800ea7c:	4815      	ldr	r0, [pc, #84]	; (800ead4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ea7e:	f000 fd12 	bl	800f4a6 <USBD_GetEpDesc>
 800ea82:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ea84:	2181      	movs	r1, #129	; 0x81
 800ea86:	4813      	ldr	r0, [pc, #76]	; (800ead4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ea88:	f000 fd0d 	bl	800f4a6 <USBD_GetEpDesc>
 800ea8c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d002      	beq.n	800ea9a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	2210      	movs	r2, #16
 800ea98:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ea9a:	693b      	ldr	r3, [r7, #16]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d006      	beq.n	800eaae <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800eaa0:	693b      	ldr	r3, [r7, #16]
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	711a      	strb	r2, [r3, #4]
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	f042 0202 	orr.w	r2, r2, #2
 800eaac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d006      	beq.n	800eac2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	2200      	movs	r2, #0
 800eab8:	711a      	strb	r2, [r3, #4]
 800eaba:	2200      	movs	r2, #0
 800eabc:	f042 0202 	orr.w	r2, r2, #2
 800eac0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2243      	movs	r2, #67	; 0x43
 800eac6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800eac8:	4b02      	ldr	r3, [pc, #8]	; (800ead4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800eaca:	4618      	mov	r0, r3
 800eacc:	3718      	adds	r7, #24
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}
 800ead2:	bf00      	nop
 800ead4:	24000054 	.word	0x24000054

0800ead8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b086      	sub	sp, #24
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800eae0:	2182      	movs	r1, #130	; 0x82
 800eae2:	4818      	ldr	r0, [pc, #96]	; (800eb44 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800eae4:	f000 fcdf 	bl	800f4a6 <USBD_GetEpDesc>
 800eae8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800eaea:	2101      	movs	r1, #1
 800eaec:	4815      	ldr	r0, [pc, #84]	; (800eb44 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800eaee:	f000 fcda 	bl	800f4a6 <USBD_GetEpDesc>
 800eaf2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800eaf4:	2181      	movs	r1, #129	; 0x81
 800eaf6:	4813      	ldr	r0, [pc, #76]	; (800eb44 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800eaf8:	f000 fcd5 	bl	800f4a6 <USBD_GetEpDesc>
 800eafc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800eafe:	697b      	ldr	r3, [r7, #20]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d002      	beq.n	800eb0a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800eb04:	697b      	ldr	r3, [r7, #20]
 800eb06:	2210      	movs	r2, #16
 800eb08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800eb0a:	693b      	ldr	r3, [r7, #16]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d006      	beq.n	800eb1e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800eb10:	693b      	ldr	r3, [r7, #16]
 800eb12:	2200      	movs	r2, #0
 800eb14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eb18:	711a      	strb	r2, [r3, #4]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d006      	beq.n	800eb32 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	2200      	movs	r2, #0
 800eb28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eb2c:	711a      	strb	r2, [r3, #4]
 800eb2e:	2200      	movs	r2, #0
 800eb30:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2243      	movs	r2, #67	; 0x43
 800eb36:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800eb38:	4b02      	ldr	r3, [pc, #8]	; (800eb44 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	3718      	adds	r7, #24
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	bd80      	pop	{r7, pc}
 800eb42:	bf00      	nop
 800eb44:	24000054 	.word	0x24000054

0800eb48 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800eb48:	b480      	push	{r7}
 800eb4a:	b083      	sub	sp, #12
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	220a      	movs	r2, #10
 800eb54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800eb56:	4b03      	ldr	r3, [pc, #12]	; (800eb64 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	370c      	adds	r7, #12
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb62:	4770      	bx	lr
 800eb64:	24000010 	.word	0x24000010

0800eb68 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800eb68:	b480      	push	{r7}
 800eb6a:	b083      	sub	sp, #12
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
 800eb70:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800eb72:	683b      	ldr	r3, [r7, #0]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d101      	bne.n	800eb7c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800eb78:	2303      	movs	r3, #3
 800eb7a:	e009      	b.n	800eb90 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800eb82:	687a      	ldr	r2, [r7, #4]
 800eb84:	33b0      	adds	r3, #176	; 0xb0
 800eb86:	009b      	lsls	r3, r3, #2
 800eb88:	4413      	add	r3, r2
 800eb8a:	683a      	ldr	r2, [r7, #0]
 800eb8c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800eb8e:	2300      	movs	r3, #0
}
 800eb90:	4618      	mov	r0, r3
 800eb92:	370c      	adds	r7, #12
 800eb94:	46bd      	mov	sp, r7
 800eb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9a:	4770      	bx	lr

0800eb9c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	b087      	sub	sp, #28
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	60f8      	str	r0, [r7, #12]
 800eba4:	60b9      	str	r1, [r7, #8]
 800eba6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	32b0      	adds	r2, #176	; 0xb0
 800ebb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebb6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d101      	bne.n	800ebc2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ebbe:	2303      	movs	r3, #3
 800ebc0:	e008      	b.n	800ebd4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	68ba      	ldr	r2, [r7, #8]
 800ebc6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ebca:	697b      	ldr	r3, [r7, #20]
 800ebcc:	687a      	ldr	r2, [r7, #4]
 800ebce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ebd2:	2300      	movs	r3, #0
}
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	371c      	adds	r7, #28
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebde:	4770      	bx	lr

0800ebe0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ebe0:	b480      	push	{r7}
 800ebe2:	b085      	sub	sp, #20
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
 800ebe8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	32b0      	adds	r2, #176	; 0xb0
 800ebf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebf8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d101      	bne.n	800ec04 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ec00:	2303      	movs	r3, #3
 800ec02:	e004      	b.n	800ec0e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	683a      	ldr	r2, [r7, #0]
 800ec08:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ec0c:	2300      	movs	r3, #0
}
 800ec0e:	4618      	mov	r0, r3
 800ec10:	3714      	adds	r7, #20
 800ec12:	46bd      	mov	sp, r7
 800ec14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec18:	4770      	bx	lr
	...

0800ec1c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b084      	sub	sp, #16
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	32b0      	adds	r2, #176	; 0xb0
 800ec2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec32:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ec34:	2301      	movs	r3, #1
 800ec36:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	32b0      	adds	r2, #176	; 0xb0
 800ec42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d101      	bne.n	800ec4e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ec4a:	2303      	movs	r3, #3
 800ec4c:	e025      	b.n	800ec9a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d11f      	bne.n	800ec98 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ec58:	68bb      	ldr	r3, [r7, #8]
 800ec5a:	2201      	movs	r2, #1
 800ec5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800ec60:	4b10      	ldr	r3, [pc, #64]	; (800eca4 <USBD_CDC_TransmitPacket+0x88>)
 800ec62:	781b      	ldrb	r3, [r3, #0]
 800ec64:	f003 020f 	and.w	r2, r3, #15
 800ec68:	68bb      	ldr	r3, [r7, #8]
 800ec6a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800ec6e:	6878      	ldr	r0, [r7, #4]
 800ec70:	4613      	mov	r3, r2
 800ec72:	009b      	lsls	r3, r3, #2
 800ec74:	4413      	add	r3, r2
 800ec76:	009b      	lsls	r3, r3, #2
 800ec78:	4403      	add	r3, r0
 800ec7a:	3318      	adds	r3, #24
 800ec7c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800ec7e:	4b09      	ldr	r3, [pc, #36]	; (800eca4 <USBD_CDC_TransmitPacket+0x88>)
 800ec80:	7819      	ldrb	r1, [r3, #0]
 800ec82:	68bb      	ldr	r3, [r7, #8]
 800ec84:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ec88:	68bb      	ldr	r3, [r7, #8]
 800ec8a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ec8e:	6878      	ldr	r0, [r7, #4]
 800ec90:	f002 f859 	bl	8010d46 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ec94:	2300      	movs	r3, #0
 800ec96:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ec98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3710      	adds	r7, #16
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	24000097 	.word	0x24000097

0800eca8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b084      	sub	sp, #16
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	32b0      	adds	r2, #176	; 0xb0
 800ecba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecbe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	32b0      	adds	r2, #176	; 0xb0
 800ecca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d101      	bne.n	800ecd6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ecd2:	2303      	movs	r3, #3
 800ecd4:	e018      	b.n	800ed08 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	7c1b      	ldrb	r3, [r3, #16]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d10a      	bne.n	800ecf4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ecde:	4b0c      	ldr	r3, [pc, #48]	; (800ed10 <USBD_CDC_ReceivePacket+0x68>)
 800ece0:	7819      	ldrb	r1, [r3, #0]
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ece8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f002 f84b 	bl	8010d88 <USBD_LL_PrepareReceive>
 800ecf2:	e008      	b.n	800ed06 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ecf4:	4b06      	ldr	r3, [pc, #24]	; (800ed10 <USBD_CDC_ReceivePacket+0x68>)
 800ecf6:	7819      	ldrb	r1, [r3, #0]
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ecfe:	2340      	movs	r3, #64	; 0x40
 800ed00:	6878      	ldr	r0, [r7, #4]
 800ed02:	f002 f841 	bl	8010d88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ed06:	2300      	movs	r3, #0
}
 800ed08:	4618      	mov	r0, r3
 800ed0a:	3710      	adds	r7, #16
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bd80      	pop	{r7, pc}
 800ed10:	24000098 	.word	0x24000098

0800ed14 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b086      	sub	sp, #24
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	60f8      	str	r0, [r7, #12]
 800ed1c:	60b9      	str	r1, [r7, #8]
 800ed1e:	4613      	mov	r3, r2
 800ed20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d101      	bne.n	800ed2c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ed28:	2303      	movs	r3, #3
 800ed2a:	e01f      	b.n	800ed6c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	2200      	movs	r2, #0
 800ed30:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	2200      	movs	r2, #0
 800ed38:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	2200      	movs	r2, #0
 800ed40:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d003      	beq.n	800ed52 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	68ba      	ldr	r2, [r7, #8]
 800ed4e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	2201      	movs	r2, #1
 800ed56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	79fa      	ldrb	r2, [r7, #7]
 800ed5e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ed60:	68f8      	ldr	r0, [r7, #12]
 800ed62:	f001 feb7 	bl	8010ad4 <USBD_LL_Init>
 800ed66:	4603      	mov	r3, r0
 800ed68:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ed6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	3718      	adds	r7, #24
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd80      	pop	{r7, pc}

0800ed74 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b084      	sub	sp, #16
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
 800ed7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d101      	bne.n	800ed8c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ed88:	2303      	movs	r3, #3
 800ed8a:	e025      	b.n	800edd8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	683a      	ldr	r2, [r7, #0]
 800ed90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	32ae      	adds	r2, #174	; 0xae
 800ed9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eda2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d00f      	beq.n	800edc8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	32ae      	adds	r2, #174	; 0xae
 800edb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edb8:	f107 020e 	add.w	r2, r7, #14
 800edbc:	4610      	mov	r0, r2
 800edbe:	4798      	blx	r3
 800edc0:	4602      	mov	r2, r0
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800edce:	1c5a      	adds	r2, r3, #1
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800edd6:	2300      	movs	r3, #0
}
 800edd8:	4618      	mov	r0, r3
 800edda:	3710      	adds	r7, #16
 800eddc:	46bd      	mov	sp, r7
 800edde:	bd80      	pop	{r7, pc}

0800ede0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b082      	sub	sp, #8
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ede8:	6878      	ldr	r0, [r7, #4]
 800edea:	f001 fec3 	bl	8010b74 <USBD_LL_Start>
 800edee:	4603      	mov	r3, r0
}
 800edf0:	4618      	mov	r0, r3
 800edf2:	3708      	adds	r7, #8
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}

0800edf8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800edf8:	b480      	push	{r7}
 800edfa:	b083      	sub	sp, #12
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ee00:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ee02:	4618      	mov	r0, r3
 800ee04:	370c      	adds	r7, #12
 800ee06:	46bd      	mov	sp, r7
 800ee08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0c:	4770      	bx	lr

0800ee0e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ee0e:	b580      	push	{r7, lr}
 800ee10:	b084      	sub	sp, #16
 800ee12:	af00      	add	r7, sp, #0
 800ee14:	6078      	str	r0, [r7, #4]
 800ee16:	460b      	mov	r3, r1
 800ee18:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d009      	beq.n	800ee3c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	78fa      	ldrb	r2, [r7, #3]
 800ee32:	4611      	mov	r1, r2
 800ee34:	6878      	ldr	r0, [r7, #4]
 800ee36:	4798      	blx	r3
 800ee38:	4603      	mov	r3, r0
 800ee3a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ee3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3710      	adds	r7, #16
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}

0800ee46 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ee46:	b580      	push	{r7, lr}
 800ee48:	b084      	sub	sp, #16
 800ee4a:	af00      	add	r7, sp, #0
 800ee4c:	6078      	str	r0, [r7, #4]
 800ee4e:	460b      	mov	r3, r1
 800ee50:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ee52:	2300      	movs	r3, #0
 800ee54:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee5c:	685b      	ldr	r3, [r3, #4]
 800ee5e:	78fa      	ldrb	r2, [r7, #3]
 800ee60:	4611      	mov	r1, r2
 800ee62:	6878      	ldr	r0, [r7, #4]
 800ee64:	4798      	blx	r3
 800ee66:	4603      	mov	r3, r0
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d001      	beq.n	800ee70 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ee6c:	2303      	movs	r3, #3
 800ee6e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ee70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee72:	4618      	mov	r0, r3
 800ee74:	3710      	adds	r7, #16
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}

0800ee7a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ee7a:	b580      	push	{r7, lr}
 800ee7c:	b084      	sub	sp, #16
 800ee7e:	af00      	add	r7, sp, #0
 800ee80:	6078      	str	r0, [r7, #4]
 800ee82:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ee8a:	6839      	ldr	r1, [r7, #0]
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f001 f908 	bl	80100a2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	2201      	movs	r2, #1
 800ee96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800eea0:	461a      	mov	r2, r3
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800eeae:	f003 031f 	and.w	r3, r3, #31
 800eeb2:	2b02      	cmp	r3, #2
 800eeb4:	d01a      	beq.n	800eeec <USBD_LL_SetupStage+0x72>
 800eeb6:	2b02      	cmp	r3, #2
 800eeb8:	d822      	bhi.n	800ef00 <USBD_LL_SetupStage+0x86>
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d002      	beq.n	800eec4 <USBD_LL_SetupStage+0x4a>
 800eebe:	2b01      	cmp	r3, #1
 800eec0:	d00a      	beq.n	800eed8 <USBD_LL_SetupStage+0x5e>
 800eec2:	e01d      	b.n	800ef00 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eeca:	4619      	mov	r1, r3
 800eecc:	6878      	ldr	r0, [r7, #4]
 800eece:	f000 fb5f 	bl	800f590 <USBD_StdDevReq>
 800eed2:	4603      	mov	r3, r0
 800eed4:	73fb      	strb	r3, [r7, #15]
      break;
 800eed6:	e020      	b.n	800ef1a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eede:	4619      	mov	r1, r3
 800eee0:	6878      	ldr	r0, [r7, #4]
 800eee2:	f000 fbc7 	bl	800f674 <USBD_StdItfReq>
 800eee6:	4603      	mov	r3, r0
 800eee8:	73fb      	strb	r3, [r7, #15]
      break;
 800eeea:	e016      	b.n	800ef1a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eef2:	4619      	mov	r1, r3
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	f000 fc29 	bl	800f74c <USBD_StdEPReq>
 800eefa:	4603      	mov	r3, r0
 800eefc:	73fb      	strb	r3, [r7, #15]
      break;
 800eefe:	e00c      	b.n	800ef1a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ef06:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ef0a:	b2db      	uxtb	r3, r3
 800ef0c:	4619      	mov	r1, r3
 800ef0e:	6878      	ldr	r0, [r7, #4]
 800ef10:	f001 fe90 	bl	8010c34 <USBD_LL_StallEP>
 800ef14:	4603      	mov	r3, r0
 800ef16:	73fb      	strb	r3, [r7, #15]
      break;
 800ef18:	bf00      	nop
  }

  return ret;
 800ef1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	3710      	adds	r7, #16
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}

0800ef24 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b086      	sub	sp, #24
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	60f8      	str	r0, [r7, #12]
 800ef2c:	460b      	mov	r3, r1
 800ef2e:	607a      	str	r2, [r7, #4]
 800ef30:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ef32:	2300      	movs	r3, #0
 800ef34:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ef36:	7afb      	ldrb	r3, [r7, #11]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d16e      	bne.n	800f01a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ef42:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ef4a:	2b03      	cmp	r3, #3
 800ef4c:	f040 8098 	bne.w	800f080 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ef50:	693b      	ldr	r3, [r7, #16]
 800ef52:	689a      	ldr	r2, [r3, #8]
 800ef54:	693b      	ldr	r3, [r7, #16]
 800ef56:	68db      	ldr	r3, [r3, #12]
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	d913      	bls.n	800ef84 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ef5c:	693b      	ldr	r3, [r7, #16]
 800ef5e:	689a      	ldr	r2, [r3, #8]
 800ef60:	693b      	ldr	r3, [r7, #16]
 800ef62:	68db      	ldr	r3, [r3, #12]
 800ef64:	1ad2      	subs	r2, r2, r3
 800ef66:	693b      	ldr	r3, [r7, #16]
 800ef68:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ef6a:	693b      	ldr	r3, [r7, #16]
 800ef6c:	68da      	ldr	r2, [r3, #12]
 800ef6e:	693b      	ldr	r3, [r7, #16]
 800ef70:	689b      	ldr	r3, [r3, #8]
 800ef72:	4293      	cmp	r3, r2
 800ef74:	bf28      	it	cs
 800ef76:	4613      	movcs	r3, r2
 800ef78:	461a      	mov	r2, r3
 800ef7a:	6879      	ldr	r1, [r7, #4]
 800ef7c:	68f8      	ldr	r0, [r7, #12]
 800ef7e:	f001 f984 	bl	801028a <USBD_CtlContinueRx>
 800ef82:	e07d      	b.n	800f080 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ef8a:	f003 031f 	and.w	r3, r3, #31
 800ef8e:	2b02      	cmp	r3, #2
 800ef90:	d014      	beq.n	800efbc <USBD_LL_DataOutStage+0x98>
 800ef92:	2b02      	cmp	r3, #2
 800ef94:	d81d      	bhi.n	800efd2 <USBD_LL_DataOutStage+0xae>
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d002      	beq.n	800efa0 <USBD_LL_DataOutStage+0x7c>
 800ef9a:	2b01      	cmp	r3, #1
 800ef9c:	d003      	beq.n	800efa6 <USBD_LL_DataOutStage+0x82>
 800ef9e:	e018      	b.n	800efd2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800efa0:	2300      	movs	r3, #0
 800efa2:	75bb      	strb	r3, [r7, #22]
            break;
 800efa4:	e018      	b.n	800efd8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800efac:	b2db      	uxtb	r3, r3
 800efae:	4619      	mov	r1, r3
 800efb0:	68f8      	ldr	r0, [r7, #12]
 800efb2:	f000 fa5e 	bl	800f472 <USBD_CoreFindIF>
 800efb6:	4603      	mov	r3, r0
 800efb8:	75bb      	strb	r3, [r7, #22]
            break;
 800efba:	e00d      	b.n	800efd8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800efc2:	b2db      	uxtb	r3, r3
 800efc4:	4619      	mov	r1, r3
 800efc6:	68f8      	ldr	r0, [r7, #12]
 800efc8:	f000 fa60 	bl	800f48c <USBD_CoreFindEP>
 800efcc:	4603      	mov	r3, r0
 800efce:	75bb      	strb	r3, [r7, #22]
            break;
 800efd0:	e002      	b.n	800efd8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800efd2:	2300      	movs	r3, #0
 800efd4:	75bb      	strb	r3, [r7, #22]
            break;
 800efd6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800efd8:	7dbb      	ldrb	r3, [r7, #22]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d119      	bne.n	800f012 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800efe4:	b2db      	uxtb	r3, r3
 800efe6:	2b03      	cmp	r3, #3
 800efe8:	d113      	bne.n	800f012 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800efea:	7dba      	ldrb	r2, [r7, #22]
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	32ae      	adds	r2, #174	; 0xae
 800eff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eff4:	691b      	ldr	r3, [r3, #16]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d00b      	beq.n	800f012 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800effa:	7dba      	ldrb	r2, [r7, #22]
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800f002:	7dba      	ldrb	r2, [r7, #22]
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	32ae      	adds	r2, #174	; 0xae
 800f008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f00c:	691b      	ldr	r3, [r3, #16]
 800f00e:	68f8      	ldr	r0, [r7, #12]
 800f010:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f012:	68f8      	ldr	r0, [r7, #12]
 800f014:	f001 f94a 	bl	80102ac <USBD_CtlSendStatus>
 800f018:	e032      	b.n	800f080 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800f01a:	7afb      	ldrb	r3, [r7, #11]
 800f01c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f020:	b2db      	uxtb	r3, r3
 800f022:	4619      	mov	r1, r3
 800f024:	68f8      	ldr	r0, [r7, #12]
 800f026:	f000 fa31 	bl	800f48c <USBD_CoreFindEP>
 800f02a:	4603      	mov	r3, r0
 800f02c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f02e:	7dbb      	ldrb	r3, [r7, #22]
 800f030:	2bff      	cmp	r3, #255	; 0xff
 800f032:	d025      	beq.n	800f080 <USBD_LL_DataOutStage+0x15c>
 800f034:	7dbb      	ldrb	r3, [r7, #22]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d122      	bne.n	800f080 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f040:	b2db      	uxtb	r3, r3
 800f042:	2b03      	cmp	r3, #3
 800f044:	d117      	bne.n	800f076 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800f046:	7dba      	ldrb	r2, [r7, #22]
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	32ae      	adds	r2, #174	; 0xae
 800f04c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f050:	699b      	ldr	r3, [r3, #24]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d00f      	beq.n	800f076 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800f056:	7dba      	ldrb	r2, [r7, #22]
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800f05e:	7dba      	ldrb	r2, [r7, #22]
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	32ae      	adds	r2, #174	; 0xae
 800f064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f068:	699b      	ldr	r3, [r3, #24]
 800f06a:	7afa      	ldrb	r2, [r7, #11]
 800f06c:	4611      	mov	r1, r2
 800f06e:	68f8      	ldr	r0, [r7, #12]
 800f070:	4798      	blx	r3
 800f072:	4603      	mov	r3, r0
 800f074:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800f076:	7dfb      	ldrb	r3, [r7, #23]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d001      	beq.n	800f080 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800f07c:	7dfb      	ldrb	r3, [r7, #23]
 800f07e:	e000      	b.n	800f082 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800f080:	2300      	movs	r3, #0
}
 800f082:	4618      	mov	r0, r3
 800f084:	3718      	adds	r7, #24
 800f086:	46bd      	mov	sp, r7
 800f088:	bd80      	pop	{r7, pc}

0800f08a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f08a:	b580      	push	{r7, lr}
 800f08c:	b086      	sub	sp, #24
 800f08e:	af00      	add	r7, sp, #0
 800f090:	60f8      	str	r0, [r7, #12]
 800f092:	460b      	mov	r3, r1
 800f094:	607a      	str	r2, [r7, #4]
 800f096:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800f098:	7afb      	ldrb	r3, [r7, #11]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d16f      	bne.n	800f17e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	3314      	adds	r3, #20
 800f0a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f0aa:	2b02      	cmp	r3, #2
 800f0ac:	d15a      	bne.n	800f164 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800f0ae:	693b      	ldr	r3, [r7, #16]
 800f0b0:	689a      	ldr	r2, [r3, #8]
 800f0b2:	693b      	ldr	r3, [r7, #16]
 800f0b4:	68db      	ldr	r3, [r3, #12]
 800f0b6:	429a      	cmp	r2, r3
 800f0b8:	d914      	bls.n	800f0e4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f0ba:	693b      	ldr	r3, [r7, #16]
 800f0bc:	689a      	ldr	r2, [r3, #8]
 800f0be:	693b      	ldr	r3, [r7, #16]
 800f0c0:	68db      	ldr	r3, [r3, #12]
 800f0c2:	1ad2      	subs	r2, r2, r3
 800f0c4:	693b      	ldr	r3, [r7, #16]
 800f0c6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f0c8:	693b      	ldr	r3, [r7, #16]
 800f0ca:	689b      	ldr	r3, [r3, #8]
 800f0cc:	461a      	mov	r2, r3
 800f0ce:	6879      	ldr	r1, [r7, #4]
 800f0d0:	68f8      	ldr	r0, [r7, #12]
 800f0d2:	f001 f8ac 	bl	801022e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	2200      	movs	r2, #0
 800f0da:	2100      	movs	r1, #0
 800f0dc:	68f8      	ldr	r0, [r7, #12]
 800f0de:	f001 fe53 	bl	8010d88 <USBD_LL_PrepareReceive>
 800f0e2:	e03f      	b.n	800f164 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f0e4:	693b      	ldr	r3, [r7, #16]
 800f0e6:	68da      	ldr	r2, [r3, #12]
 800f0e8:	693b      	ldr	r3, [r7, #16]
 800f0ea:	689b      	ldr	r3, [r3, #8]
 800f0ec:	429a      	cmp	r2, r3
 800f0ee:	d11c      	bne.n	800f12a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f0f0:	693b      	ldr	r3, [r7, #16]
 800f0f2:	685a      	ldr	r2, [r3, #4]
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d316      	bcc.n	800f12a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f0fc:	693b      	ldr	r3, [r7, #16]
 800f0fe:	685a      	ldr	r2, [r3, #4]
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f106:	429a      	cmp	r2, r3
 800f108:	d20f      	bcs.n	800f12a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f10a:	2200      	movs	r2, #0
 800f10c:	2100      	movs	r1, #0
 800f10e:	68f8      	ldr	r0, [r7, #12]
 800f110:	f001 f88d 	bl	801022e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	2200      	movs	r2, #0
 800f118:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f11c:	2300      	movs	r3, #0
 800f11e:	2200      	movs	r2, #0
 800f120:	2100      	movs	r1, #0
 800f122:	68f8      	ldr	r0, [r7, #12]
 800f124:	f001 fe30 	bl	8010d88 <USBD_LL_PrepareReceive>
 800f128:	e01c      	b.n	800f164 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f130:	b2db      	uxtb	r3, r3
 800f132:	2b03      	cmp	r3, #3
 800f134:	d10f      	bne.n	800f156 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f13c:	68db      	ldr	r3, [r3, #12]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d009      	beq.n	800f156 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	2200      	movs	r2, #0
 800f146:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f150:	68db      	ldr	r3, [r3, #12]
 800f152:	68f8      	ldr	r0, [r7, #12]
 800f154:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f156:	2180      	movs	r1, #128	; 0x80
 800f158:	68f8      	ldr	r0, [r7, #12]
 800f15a:	f001 fd6b 	bl	8010c34 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f15e:	68f8      	ldr	r0, [r7, #12]
 800f160:	f001 f8b7 	bl	80102d2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d03a      	beq.n	800f1e4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800f16e:	68f8      	ldr	r0, [r7, #12]
 800f170:	f7ff fe42 	bl	800edf8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	2200      	movs	r2, #0
 800f178:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f17c:	e032      	b.n	800f1e4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800f17e:	7afb      	ldrb	r3, [r7, #11]
 800f180:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f184:	b2db      	uxtb	r3, r3
 800f186:	4619      	mov	r1, r3
 800f188:	68f8      	ldr	r0, [r7, #12]
 800f18a:	f000 f97f 	bl	800f48c <USBD_CoreFindEP>
 800f18e:	4603      	mov	r3, r0
 800f190:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f192:	7dfb      	ldrb	r3, [r7, #23]
 800f194:	2bff      	cmp	r3, #255	; 0xff
 800f196:	d025      	beq.n	800f1e4 <USBD_LL_DataInStage+0x15a>
 800f198:	7dfb      	ldrb	r3, [r7, #23]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d122      	bne.n	800f1e4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1a4:	b2db      	uxtb	r3, r3
 800f1a6:	2b03      	cmp	r3, #3
 800f1a8:	d11c      	bne.n	800f1e4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800f1aa:	7dfa      	ldrb	r2, [r7, #23]
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	32ae      	adds	r2, #174	; 0xae
 800f1b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1b4:	695b      	ldr	r3, [r3, #20]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d014      	beq.n	800f1e4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f1ba:	7dfa      	ldrb	r2, [r7, #23]
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f1c2:	7dfa      	ldrb	r2, [r7, #23]
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	32ae      	adds	r2, #174	; 0xae
 800f1c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1cc:	695b      	ldr	r3, [r3, #20]
 800f1ce:	7afa      	ldrb	r2, [r7, #11]
 800f1d0:	4611      	mov	r1, r2
 800f1d2:	68f8      	ldr	r0, [r7, #12]
 800f1d4:	4798      	blx	r3
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f1da:	7dbb      	ldrb	r3, [r7, #22]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d001      	beq.n	800f1e4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f1e0:	7dbb      	ldrb	r3, [r7, #22]
 800f1e2:	e000      	b.n	800f1e6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f1e4:	2300      	movs	r3, #0
}
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	3718      	adds	r7, #24
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bd80      	pop	{r7, pc}

0800f1ee <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f1ee:	b580      	push	{r7, lr}
 800f1f0:	b084      	sub	sp, #16
 800f1f2:	af00      	add	r7, sp, #0
 800f1f4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2201      	movs	r2, #1
 800f1fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	2200      	movs	r2, #0
 800f206:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	2200      	movs	r2, #0
 800f20e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2200      	movs	r2, #0
 800f214:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2200      	movs	r2, #0
 800f21c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f226:	2b00      	cmp	r3, #0
 800f228:	d014      	beq.n	800f254 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f230:	685b      	ldr	r3, [r3, #4]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d00e      	beq.n	800f254 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f23c:	685b      	ldr	r3, [r3, #4]
 800f23e:	687a      	ldr	r2, [r7, #4]
 800f240:	6852      	ldr	r2, [r2, #4]
 800f242:	b2d2      	uxtb	r2, r2
 800f244:	4611      	mov	r1, r2
 800f246:	6878      	ldr	r0, [r7, #4]
 800f248:	4798      	blx	r3
 800f24a:	4603      	mov	r3, r0
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d001      	beq.n	800f254 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800f250:	2303      	movs	r3, #3
 800f252:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f254:	2340      	movs	r3, #64	; 0x40
 800f256:	2200      	movs	r2, #0
 800f258:	2100      	movs	r1, #0
 800f25a:	6878      	ldr	r0, [r7, #4]
 800f25c:	f001 fca5 	bl	8010baa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	2201      	movs	r2, #1
 800f264:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2240      	movs	r2, #64	; 0x40
 800f26c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f270:	2340      	movs	r3, #64	; 0x40
 800f272:	2200      	movs	r2, #0
 800f274:	2180      	movs	r1, #128	; 0x80
 800f276:	6878      	ldr	r0, [r7, #4]
 800f278:	f001 fc97 	bl	8010baa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	2201      	movs	r2, #1
 800f280:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	2240      	movs	r2, #64	; 0x40
 800f286:	621a      	str	r2, [r3, #32]

  return ret;
 800f288:	7bfb      	ldrb	r3, [r7, #15]
}
 800f28a:	4618      	mov	r0, r3
 800f28c:	3710      	adds	r7, #16
 800f28e:	46bd      	mov	sp, r7
 800f290:	bd80      	pop	{r7, pc}

0800f292 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f292:	b480      	push	{r7}
 800f294:	b083      	sub	sp, #12
 800f296:	af00      	add	r7, sp, #0
 800f298:	6078      	str	r0, [r7, #4]
 800f29a:	460b      	mov	r3, r1
 800f29c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	78fa      	ldrb	r2, [r7, #3]
 800f2a2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f2a4:	2300      	movs	r3, #0
}
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	370c      	adds	r7, #12
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b0:	4770      	bx	lr

0800f2b2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f2b2:	b480      	push	{r7}
 800f2b4:	b083      	sub	sp, #12
 800f2b6:	af00      	add	r7, sp, #0
 800f2b8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2c0:	b2da      	uxtb	r2, r3
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2204      	movs	r2, #4
 800f2cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f2d0:	2300      	movs	r3, #0
}
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	370c      	adds	r7, #12
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2dc:	4770      	bx	lr

0800f2de <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f2de:	b480      	push	{r7}
 800f2e0:	b083      	sub	sp, #12
 800f2e2:	af00      	add	r7, sp, #0
 800f2e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2ec:	b2db      	uxtb	r3, r3
 800f2ee:	2b04      	cmp	r3, #4
 800f2f0:	d106      	bne.n	800f300 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800f2f8:	b2da      	uxtb	r2, r3
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f300:	2300      	movs	r3, #0
}
 800f302:	4618      	mov	r0, r3
 800f304:	370c      	adds	r7, #12
 800f306:	46bd      	mov	sp, r7
 800f308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30c:	4770      	bx	lr

0800f30e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f30e:	b580      	push	{r7, lr}
 800f310:	b082      	sub	sp, #8
 800f312:	af00      	add	r7, sp, #0
 800f314:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f31c:	b2db      	uxtb	r3, r3
 800f31e:	2b03      	cmp	r3, #3
 800f320:	d110      	bne.n	800f344 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d00b      	beq.n	800f344 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f332:	69db      	ldr	r3, [r3, #28]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d005      	beq.n	800f344 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f33e:	69db      	ldr	r3, [r3, #28]
 800f340:	6878      	ldr	r0, [r7, #4]
 800f342:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f344:	2300      	movs	r3, #0
}
 800f346:	4618      	mov	r0, r3
 800f348:	3708      	adds	r7, #8
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd80      	pop	{r7, pc}

0800f34e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f34e:	b580      	push	{r7, lr}
 800f350:	b082      	sub	sp, #8
 800f352:	af00      	add	r7, sp, #0
 800f354:	6078      	str	r0, [r7, #4]
 800f356:	460b      	mov	r3, r1
 800f358:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	32ae      	adds	r2, #174	; 0xae
 800f364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d101      	bne.n	800f370 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800f36c:	2303      	movs	r3, #3
 800f36e:	e01c      	b.n	800f3aa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f376:	b2db      	uxtb	r3, r3
 800f378:	2b03      	cmp	r3, #3
 800f37a:	d115      	bne.n	800f3a8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	32ae      	adds	r2, #174	; 0xae
 800f386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f38a:	6a1b      	ldr	r3, [r3, #32]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d00b      	beq.n	800f3a8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	32ae      	adds	r2, #174	; 0xae
 800f39a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f39e:	6a1b      	ldr	r3, [r3, #32]
 800f3a0:	78fa      	ldrb	r2, [r7, #3]
 800f3a2:	4611      	mov	r1, r2
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f3a8:	2300      	movs	r3, #0
}
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	3708      	adds	r7, #8
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	bd80      	pop	{r7, pc}

0800f3b2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f3b2:	b580      	push	{r7, lr}
 800f3b4:	b082      	sub	sp, #8
 800f3b6:	af00      	add	r7, sp, #0
 800f3b8:	6078      	str	r0, [r7, #4]
 800f3ba:	460b      	mov	r3, r1
 800f3bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	32ae      	adds	r2, #174	; 0xae
 800f3c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d101      	bne.n	800f3d4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800f3d0:	2303      	movs	r3, #3
 800f3d2:	e01c      	b.n	800f40e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3da:	b2db      	uxtb	r3, r3
 800f3dc:	2b03      	cmp	r3, #3
 800f3de:	d115      	bne.n	800f40c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	32ae      	adds	r2, #174	; 0xae
 800f3ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d00b      	beq.n	800f40c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	32ae      	adds	r2, #174	; 0xae
 800f3fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f404:	78fa      	ldrb	r2, [r7, #3]
 800f406:	4611      	mov	r1, r2
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f40c:	2300      	movs	r3, #0
}
 800f40e:	4618      	mov	r0, r3
 800f410:	3708      	adds	r7, #8
 800f412:	46bd      	mov	sp, r7
 800f414:	bd80      	pop	{r7, pc}

0800f416 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f416:	b480      	push	{r7}
 800f418:	b083      	sub	sp, #12
 800f41a:	af00      	add	r7, sp, #0
 800f41c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f41e:	2300      	movs	r3, #0
}
 800f420:	4618      	mov	r0, r3
 800f422:	370c      	adds	r7, #12
 800f424:	46bd      	mov	sp, r7
 800f426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42a:	4770      	bx	lr

0800f42c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b084      	sub	sp, #16
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800f434:	2300      	movs	r3, #0
 800f436:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2201      	movs	r2, #1
 800f43c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f446:	2b00      	cmp	r3, #0
 800f448:	d00e      	beq.n	800f468 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f450:	685b      	ldr	r3, [r3, #4]
 800f452:	687a      	ldr	r2, [r7, #4]
 800f454:	6852      	ldr	r2, [r2, #4]
 800f456:	b2d2      	uxtb	r2, r2
 800f458:	4611      	mov	r1, r2
 800f45a:	6878      	ldr	r0, [r7, #4]
 800f45c:	4798      	blx	r3
 800f45e:	4603      	mov	r3, r0
 800f460:	2b00      	cmp	r3, #0
 800f462:	d001      	beq.n	800f468 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800f464:	2303      	movs	r3, #3
 800f466:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f468:	7bfb      	ldrb	r3, [r7, #15]
}
 800f46a:	4618      	mov	r0, r3
 800f46c:	3710      	adds	r7, #16
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}

0800f472 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f472:	b480      	push	{r7}
 800f474:	b083      	sub	sp, #12
 800f476:	af00      	add	r7, sp, #0
 800f478:	6078      	str	r0, [r7, #4]
 800f47a:	460b      	mov	r3, r1
 800f47c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f47e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f480:	4618      	mov	r0, r3
 800f482:	370c      	adds	r7, #12
 800f484:	46bd      	mov	sp, r7
 800f486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48a:	4770      	bx	lr

0800f48c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f48c:	b480      	push	{r7}
 800f48e:	b083      	sub	sp, #12
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
 800f494:	460b      	mov	r3, r1
 800f496:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f498:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	370c      	adds	r7, #12
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a4:	4770      	bx	lr

0800f4a6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f4a6:	b580      	push	{r7, lr}
 800f4a8:	b086      	sub	sp, #24
 800f4aa:	af00      	add	r7, sp, #0
 800f4ac:	6078      	str	r0, [r7, #4]
 800f4ae:	460b      	mov	r3, r1
 800f4b0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	885b      	ldrh	r3, [r3, #2]
 800f4c2:	b29a      	uxth	r2, r3
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	781b      	ldrb	r3, [r3, #0]
 800f4c8:	b29b      	uxth	r3, r3
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	d920      	bls.n	800f510 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	781b      	ldrb	r3, [r3, #0]
 800f4d2:	b29b      	uxth	r3, r3
 800f4d4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f4d6:	e013      	b.n	800f500 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f4d8:	f107 030a 	add.w	r3, r7, #10
 800f4dc:	4619      	mov	r1, r3
 800f4de:	6978      	ldr	r0, [r7, #20]
 800f4e0:	f000 f81b 	bl	800f51a <USBD_GetNextDesc>
 800f4e4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	785b      	ldrb	r3, [r3, #1]
 800f4ea:	2b05      	cmp	r3, #5
 800f4ec:	d108      	bne.n	800f500 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f4ee:	697b      	ldr	r3, [r7, #20]
 800f4f0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f4f2:	693b      	ldr	r3, [r7, #16]
 800f4f4:	789b      	ldrb	r3, [r3, #2]
 800f4f6:	78fa      	ldrb	r2, [r7, #3]
 800f4f8:	429a      	cmp	r2, r3
 800f4fa:	d008      	beq.n	800f50e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	885b      	ldrh	r3, [r3, #2]
 800f504:	b29a      	uxth	r2, r3
 800f506:	897b      	ldrh	r3, [r7, #10]
 800f508:	429a      	cmp	r2, r3
 800f50a:	d8e5      	bhi.n	800f4d8 <USBD_GetEpDesc+0x32>
 800f50c:	e000      	b.n	800f510 <USBD_GetEpDesc+0x6a>
          break;
 800f50e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f510:	693b      	ldr	r3, [r7, #16]
}
 800f512:	4618      	mov	r0, r3
 800f514:	3718      	adds	r7, #24
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}

0800f51a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f51a:	b480      	push	{r7}
 800f51c:	b085      	sub	sp, #20
 800f51e:	af00      	add	r7, sp, #0
 800f520:	6078      	str	r0, [r7, #4]
 800f522:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f528:	683b      	ldr	r3, [r7, #0]
 800f52a:	881a      	ldrh	r2, [r3, #0]
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	781b      	ldrb	r3, [r3, #0]
 800f530:	b29b      	uxth	r3, r3
 800f532:	4413      	add	r3, r2
 800f534:	b29a      	uxth	r2, r3
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	781b      	ldrb	r3, [r3, #0]
 800f53e:	461a      	mov	r2, r3
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	4413      	add	r3, r2
 800f544:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f546:	68fb      	ldr	r3, [r7, #12]
}
 800f548:	4618      	mov	r0, r3
 800f54a:	3714      	adds	r7, #20
 800f54c:	46bd      	mov	sp, r7
 800f54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f552:	4770      	bx	lr

0800f554 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f554:	b480      	push	{r7}
 800f556:	b087      	sub	sp, #28
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f560:	697b      	ldr	r3, [r7, #20]
 800f562:	781b      	ldrb	r3, [r3, #0]
 800f564:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f566:	697b      	ldr	r3, [r7, #20]
 800f568:	3301      	adds	r3, #1
 800f56a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f56c:	697b      	ldr	r3, [r7, #20]
 800f56e:	781b      	ldrb	r3, [r3, #0]
 800f570:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f572:	8a3b      	ldrh	r3, [r7, #16]
 800f574:	021b      	lsls	r3, r3, #8
 800f576:	b21a      	sxth	r2, r3
 800f578:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f57c:	4313      	orrs	r3, r2
 800f57e:	b21b      	sxth	r3, r3
 800f580:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f582:	89fb      	ldrh	r3, [r7, #14]
}
 800f584:	4618      	mov	r0, r3
 800f586:	371c      	adds	r7, #28
 800f588:	46bd      	mov	sp, r7
 800f58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58e:	4770      	bx	lr

0800f590 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b084      	sub	sp, #16
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
 800f598:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f59a:	2300      	movs	r3, #0
 800f59c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	781b      	ldrb	r3, [r3, #0]
 800f5a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f5a6:	2b40      	cmp	r3, #64	; 0x40
 800f5a8:	d005      	beq.n	800f5b6 <USBD_StdDevReq+0x26>
 800f5aa:	2b40      	cmp	r3, #64	; 0x40
 800f5ac:	d857      	bhi.n	800f65e <USBD_StdDevReq+0xce>
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d00f      	beq.n	800f5d2 <USBD_StdDevReq+0x42>
 800f5b2:	2b20      	cmp	r3, #32
 800f5b4:	d153      	bne.n	800f65e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	32ae      	adds	r2, #174	; 0xae
 800f5c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5c4:	689b      	ldr	r3, [r3, #8]
 800f5c6:	6839      	ldr	r1, [r7, #0]
 800f5c8:	6878      	ldr	r0, [r7, #4]
 800f5ca:	4798      	blx	r3
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	73fb      	strb	r3, [r7, #15]
      break;
 800f5d0:	e04a      	b.n	800f668 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	785b      	ldrb	r3, [r3, #1]
 800f5d6:	2b09      	cmp	r3, #9
 800f5d8:	d83b      	bhi.n	800f652 <USBD_StdDevReq+0xc2>
 800f5da:	a201      	add	r2, pc, #4	; (adr r2, 800f5e0 <USBD_StdDevReq+0x50>)
 800f5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5e0:	0800f635 	.word	0x0800f635
 800f5e4:	0800f649 	.word	0x0800f649
 800f5e8:	0800f653 	.word	0x0800f653
 800f5ec:	0800f63f 	.word	0x0800f63f
 800f5f0:	0800f653 	.word	0x0800f653
 800f5f4:	0800f613 	.word	0x0800f613
 800f5f8:	0800f609 	.word	0x0800f609
 800f5fc:	0800f653 	.word	0x0800f653
 800f600:	0800f62b 	.word	0x0800f62b
 800f604:	0800f61d 	.word	0x0800f61d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f608:	6839      	ldr	r1, [r7, #0]
 800f60a:	6878      	ldr	r0, [r7, #4]
 800f60c:	f000 fa3c 	bl	800fa88 <USBD_GetDescriptor>
          break;
 800f610:	e024      	b.n	800f65c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f612:	6839      	ldr	r1, [r7, #0]
 800f614:	6878      	ldr	r0, [r7, #4]
 800f616:	f000 fba1 	bl	800fd5c <USBD_SetAddress>
          break;
 800f61a:	e01f      	b.n	800f65c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f61c:	6839      	ldr	r1, [r7, #0]
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	f000 fbe0 	bl	800fde4 <USBD_SetConfig>
 800f624:	4603      	mov	r3, r0
 800f626:	73fb      	strb	r3, [r7, #15]
          break;
 800f628:	e018      	b.n	800f65c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f62a:	6839      	ldr	r1, [r7, #0]
 800f62c:	6878      	ldr	r0, [r7, #4]
 800f62e:	f000 fc83 	bl	800ff38 <USBD_GetConfig>
          break;
 800f632:	e013      	b.n	800f65c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f634:	6839      	ldr	r1, [r7, #0]
 800f636:	6878      	ldr	r0, [r7, #4]
 800f638:	f000 fcb4 	bl	800ffa4 <USBD_GetStatus>
          break;
 800f63c:	e00e      	b.n	800f65c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f63e:	6839      	ldr	r1, [r7, #0]
 800f640:	6878      	ldr	r0, [r7, #4]
 800f642:	f000 fce3 	bl	801000c <USBD_SetFeature>
          break;
 800f646:	e009      	b.n	800f65c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f648:	6839      	ldr	r1, [r7, #0]
 800f64a:	6878      	ldr	r0, [r7, #4]
 800f64c:	f000 fd07 	bl	801005e <USBD_ClrFeature>
          break;
 800f650:	e004      	b.n	800f65c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f652:	6839      	ldr	r1, [r7, #0]
 800f654:	6878      	ldr	r0, [r7, #4]
 800f656:	f000 fd5e 	bl	8010116 <USBD_CtlError>
          break;
 800f65a:	bf00      	nop
      }
      break;
 800f65c:	e004      	b.n	800f668 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f65e:	6839      	ldr	r1, [r7, #0]
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f000 fd58 	bl	8010116 <USBD_CtlError>
      break;
 800f666:	bf00      	nop
  }

  return ret;
 800f668:	7bfb      	ldrb	r3, [r7, #15]
}
 800f66a:	4618      	mov	r0, r3
 800f66c:	3710      	adds	r7, #16
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}
 800f672:	bf00      	nop

0800f674 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b084      	sub	sp, #16
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
 800f67c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f67e:	2300      	movs	r3, #0
 800f680:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f682:	683b      	ldr	r3, [r7, #0]
 800f684:	781b      	ldrb	r3, [r3, #0]
 800f686:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f68a:	2b40      	cmp	r3, #64	; 0x40
 800f68c:	d005      	beq.n	800f69a <USBD_StdItfReq+0x26>
 800f68e:	2b40      	cmp	r3, #64	; 0x40
 800f690:	d852      	bhi.n	800f738 <USBD_StdItfReq+0xc4>
 800f692:	2b00      	cmp	r3, #0
 800f694:	d001      	beq.n	800f69a <USBD_StdItfReq+0x26>
 800f696:	2b20      	cmp	r3, #32
 800f698:	d14e      	bne.n	800f738 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f6a0:	b2db      	uxtb	r3, r3
 800f6a2:	3b01      	subs	r3, #1
 800f6a4:	2b02      	cmp	r3, #2
 800f6a6:	d840      	bhi.n	800f72a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	889b      	ldrh	r3, [r3, #4]
 800f6ac:	b2db      	uxtb	r3, r3
 800f6ae:	2b01      	cmp	r3, #1
 800f6b0:	d836      	bhi.n	800f720 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f6b2:	683b      	ldr	r3, [r7, #0]
 800f6b4:	889b      	ldrh	r3, [r3, #4]
 800f6b6:	b2db      	uxtb	r3, r3
 800f6b8:	4619      	mov	r1, r3
 800f6ba:	6878      	ldr	r0, [r7, #4]
 800f6bc:	f7ff fed9 	bl	800f472 <USBD_CoreFindIF>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f6c4:	7bbb      	ldrb	r3, [r7, #14]
 800f6c6:	2bff      	cmp	r3, #255	; 0xff
 800f6c8:	d01d      	beq.n	800f706 <USBD_StdItfReq+0x92>
 800f6ca:	7bbb      	ldrb	r3, [r7, #14]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d11a      	bne.n	800f706 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f6d0:	7bba      	ldrb	r2, [r7, #14]
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	32ae      	adds	r2, #174	; 0xae
 800f6d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6da:	689b      	ldr	r3, [r3, #8]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d00f      	beq.n	800f700 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f6e0:	7bba      	ldrb	r2, [r7, #14]
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f6e8:	7bba      	ldrb	r2, [r7, #14]
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	32ae      	adds	r2, #174	; 0xae
 800f6ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6f2:	689b      	ldr	r3, [r3, #8]
 800f6f4:	6839      	ldr	r1, [r7, #0]
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	4798      	blx	r3
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f6fe:	e004      	b.n	800f70a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f700:	2303      	movs	r3, #3
 800f702:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f704:	e001      	b.n	800f70a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f706:	2303      	movs	r3, #3
 800f708:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f70a:	683b      	ldr	r3, [r7, #0]
 800f70c:	88db      	ldrh	r3, [r3, #6]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d110      	bne.n	800f734 <USBD_StdItfReq+0xc0>
 800f712:	7bfb      	ldrb	r3, [r7, #15]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d10d      	bne.n	800f734 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f718:	6878      	ldr	r0, [r7, #4]
 800f71a:	f000 fdc7 	bl	80102ac <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f71e:	e009      	b.n	800f734 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f720:	6839      	ldr	r1, [r7, #0]
 800f722:	6878      	ldr	r0, [r7, #4]
 800f724:	f000 fcf7 	bl	8010116 <USBD_CtlError>
          break;
 800f728:	e004      	b.n	800f734 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f72a:	6839      	ldr	r1, [r7, #0]
 800f72c:	6878      	ldr	r0, [r7, #4]
 800f72e:	f000 fcf2 	bl	8010116 <USBD_CtlError>
          break;
 800f732:	e000      	b.n	800f736 <USBD_StdItfReq+0xc2>
          break;
 800f734:	bf00      	nop
      }
      break;
 800f736:	e004      	b.n	800f742 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f738:	6839      	ldr	r1, [r7, #0]
 800f73a:	6878      	ldr	r0, [r7, #4]
 800f73c:	f000 fceb 	bl	8010116 <USBD_CtlError>
      break;
 800f740:	bf00      	nop
  }

  return ret;
 800f742:	7bfb      	ldrb	r3, [r7, #15]
}
 800f744:	4618      	mov	r0, r3
 800f746:	3710      	adds	r7, #16
 800f748:	46bd      	mov	sp, r7
 800f74a:	bd80      	pop	{r7, pc}

0800f74c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b084      	sub	sp, #16
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
 800f754:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f756:	2300      	movs	r3, #0
 800f758:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f75a:	683b      	ldr	r3, [r7, #0]
 800f75c:	889b      	ldrh	r3, [r3, #4]
 800f75e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f760:	683b      	ldr	r3, [r7, #0]
 800f762:	781b      	ldrb	r3, [r3, #0]
 800f764:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f768:	2b40      	cmp	r3, #64	; 0x40
 800f76a:	d007      	beq.n	800f77c <USBD_StdEPReq+0x30>
 800f76c:	2b40      	cmp	r3, #64	; 0x40
 800f76e:	f200 817f 	bhi.w	800fa70 <USBD_StdEPReq+0x324>
 800f772:	2b00      	cmp	r3, #0
 800f774:	d02a      	beq.n	800f7cc <USBD_StdEPReq+0x80>
 800f776:	2b20      	cmp	r3, #32
 800f778:	f040 817a 	bne.w	800fa70 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f77c:	7bbb      	ldrb	r3, [r7, #14]
 800f77e:	4619      	mov	r1, r3
 800f780:	6878      	ldr	r0, [r7, #4]
 800f782:	f7ff fe83 	bl	800f48c <USBD_CoreFindEP>
 800f786:	4603      	mov	r3, r0
 800f788:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f78a:	7b7b      	ldrb	r3, [r7, #13]
 800f78c:	2bff      	cmp	r3, #255	; 0xff
 800f78e:	f000 8174 	beq.w	800fa7a <USBD_StdEPReq+0x32e>
 800f792:	7b7b      	ldrb	r3, [r7, #13]
 800f794:	2b00      	cmp	r3, #0
 800f796:	f040 8170 	bne.w	800fa7a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f79a:	7b7a      	ldrb	r2, [r7, #13]
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f7a2:	7b7a      	ldrb	r2, [r7, #13]
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	32ae      	adds	r2, #174	; 0xae
 800f7a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7ac:	689b      	ldr	r3, [r3, #8]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	f000 8163 	beq.w	800fa7a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f7b4:	7b7a      	ldrb	r2, [r7, #13]
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	32ae      	adds	r2, #174	; 0xae
 800f7ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7be:	689b      	ldr	r3, [r3, #8]
 800f7c0:	6839      	ldr	r1, [r7, #0]
 800f7c2:	6878      	ldr	r0, [r7, #4]
 800f7c4:	4798      	blx	r3
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f7ca:	e156      	b.n	800fa7a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	785b      	ldrb	r3, [r3, #1]
 800f7d0:	2b03      	cmp	r3, #3
 800f7d2:	d008      	beq.n	800f7e6 <USBD_StdEPReq+0x9a>
 800f7d4:	2b03      	cmp	r3, #3
 800f7d6:	f300 8145 	bgt.w	800fa64 <USBD_StdEPReq+0x318>
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	f000 809b 	beq.w	800f916 <USBD_StdEPReq+0x1ca>
 800f7e0:	2b01      	cmp	r3, #1
 800f7e2:	d03c      	beq.n	800f85e <USBD_StdEPReq+0x112>
 800f7e4:	e13e      	b.n	800fa64 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f7ec:	b2db      	uxtb	r3, r3
 800f7ee:	2b02      	cmp	r3, #2
 800f7f0:	d002      	beq.n	800f7f8 <USBD_StdEPReq+0xac>
 800f7f2:	2b03      	cmp	r3, #3
 800f7f4:	d016      	beq.n	800f824 <USBD_StdEPReq+0xd8>
 800f7f6:	e02c      	b.n	800f852 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f7f8:	7bbb      	ldrb	r3, [r7, #14]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d00d      	beq.n	800f81a <USBD_StdEPReq+0xce>
 800f7fe:	7bbb      	ldrb	r3, [r7, #14]
 800f800:	2b80      	cmp	r3, #128	; 0x80
 800f802:	d00a      	beq.n	800f81a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f804:	7bbb      	ldrb	r3, [r7, #14]
 800f806:	4619      	mov	r1, r3
 800f808:	6878      	ldr	r0, [r7, #4]
 800f80a:	f001 fa13 	bl	8010c34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f80e:	2180      	movs	r1, #128	; 0x80
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f001 fa0f 	bl	8010c34 <USBD_LL_StallEP>
 800f816:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f818:	e020      	b.n	800f85c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f81a:	6839      	ldr	r1, [r7, #0]
 800f81c:	6878      	ldr	r0, [r7, #4]
 800f81e:	f000 fc7a 	bl	8010116 <USBD_CtlError>
              break;
 800f822:	e01b      	b.n	800f85c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f824:	683b      	ldr	r3, [r7, #0]
 800f826:	885b      	ldrh	r3, [r3, #2]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d10e      	bne.n	800f84a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f82c:	7bbb      	ldrb	r3, [r7, #14]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d00b      	beq.n	800f84a <USBD_StdEPReq+0xfe>
 800f832:	7bbb      	ldrb	r3, [r7, #14]
 800f834:	2b80      	cmp	r3, #128	; 0x80
 800f836:	d008      	beq.n	800f84a <USBD_StdEPReq+0xfe>
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	88db      	ldrh	r3, [r3, #6]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d104      	bne.n	800f84a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f840:	7bbb      	ldrb	r3, [r7, #14]
 800f842:	4619      	mov	r1, r3
 800f844:	6878      	ldr	r0, [r7, #4]
 800f846:	f001 f9f5 	bl	8010c34 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f84a:	6878      	ldr	r0, [r7, #4]
 800f84c:	f000 fd2e 	bl	80102ac <USBD_CtlSendStatus>

              break;
 800f850:	e004      	b.n	800f85c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f852:	6839      	ldr	r1, [r7, #0]
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f000 fc5e 	bl	8010116 <USBD_CtlError>
              break;
 800f85a:	bf00      	nop
          }
          break;
 800f85c:	e107      	b.n	800fa6e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f864:	b2db      	uxtb	r3, r3
 800f866:	2b02      	cmp	r3, #2
 800f868:	d002      	beq.n	800f870 <USBD_StdEPReq+0x124>
 800f86a:	2b03      	cmp	r3, #3
 800f86c:	d016      	beq.n	800f89c <USBD_StdEPReq+0x150>
 800f86e:	e04b      	b.n	800f908 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f870:	7bbb      	ldrb	r3, [r7, #14]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d00d      	beq.n	800f892 <USBD_StdEPReq+0x146>
 800f876:	7bbb      	ldrb	r3, [r7, #14]
 800f878:	2b80      	cmp	r3, #128	; 0x80
 800f87a:	d00a      	beq.n	800f892 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f87c:	7bbb      	ldrb	r3, [r7, #14]
 800f87e:	4619      	mov	r1, r3
 800f880:	6878      	ldr	r0, [r7, #4]
 800f882:	f001 f9d7 	bl	8010c34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f886:	2180      	movs	r1, #128	; 0x80
 800f888:	6878      	ldr	r0, [r7, #4]
 800f88a:	f001 f9d3 	bl	8010c34 <USBD_LL_StallEP>
 800f88e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f890:	e040      	b.n	800f914 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f892:	6839      	ldr	r1, [r7, #0]
 800f894:	6878      	ldr	r0, [r7, #4]
 800f896:	f000 fc3e 	bl	8010116 <USBD_CtlError>
              break;
 800f89a:	e03b      	b.n	800f914 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f89c:	683b      	ldr	r3, [r7, #0]
 800f89e:	885b      	ldrh	r3, [r3, #2]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d136      	bne.n	800f912 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f8a4:	7bbb      	ldrb	r3, [r7, #14]
 800f8a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d004      	beq.n	800f8b8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f8ae:	7bbb      	ldrb	r3, [r7, #14]
 800f8b0:	4619      	mov	r1, r3
 800f8b2:	6878      	ldr	r0, [r7, #4]
 800f8b4:	f001 f9dd 	bl	8010c72 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f8b8:	6878      	ldr	r0, [r7, #4]
 800f8ba:	f000 fcf7 	bl	80102ac <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f8be:	7bbb      	ldrb	r3, [r7, #14]
 800f8c0:	4619      	mov	r1, r3
 800f8c2:	6878      	ldr	r0, [r7, #4]
 800f8c4:	f7ff fde2 	bl	800f48c <USBD_CoreFindEP>
 800f8c8:	4603      	mov	r3, r0
 800f8ca:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f8cc:	7b7b      	ldrb	r3, [r7, #13]
 800f8ce:	2bff      	cmp	r3, #255	; 0xff
 800f8d0:	d01f      	beq.n	800f912 <USBD_StdEPReq+0x1c6>
 800f8d2:	7b7b      	ldrb	r3, [r7, #13]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d11c      	bne.n	800f912 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f8d8:	7b7a      	ldrb	r2, [r7, #13]
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f8e0:	7b7a      	ldrb	r2, [r7, #13]
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	32ae      	adds	r2, #174	; 0xae
 800f8e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8ea:	689b      	ldr	r3, [r3, #8]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d010      	beq.n	800f912 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f8f0:	7b7a      	ldrb	r2, [r7, #13]
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	32ae      	adds	r2, #174	; 0xae
 800f8f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8fa:	689b      	ldr	r3, [r3, #8]
 800f8fc:	6839      	ldr	r1, [r7, #0]
 800f8fe:	6878      	ldr	r0, [r7, #4]
 800f900:	4798      	blx	r3
 800f902:	4603      	mov	r3, r0
 800f904:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f906:	e004      	b.n	800f912 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f908:	6839      	ldr	r1, [r7, #0]
 800f90a:	6878      	ldr	r0, [r7, #4]
 800f90c:	f000 fc03 	bl	8010116 <USBD_CtlError>
              break;
 800f910:	e000      	b.n	800f914 <USBD_StdEPReq+0x1c8>
              break;
 800f912:	bf00      	nop
          }
          break;
 800f914:	e0ab      	b.n	800fa6e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f91c:	b2db      	uxtb	r3, r3
 800f91e:	2b02      	cmp	r3, #2
 800f920:	d002      	beq.n	800f928 <USBD_StdEPReq+0x1dc>
 800f922:	2b03      	cmp	r3, #3
 800f924:	d032      	beq.n	800f98c <USBD_StdEPReq+0x240>
 800f926:	e097      	b.n	800fa58 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f928:	7bbb      	ldrb	r3, [r7, #14]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d007      	beq.n	800f93e <USBD_StdEPReq+0x1f2>
 800f92e:	7bbb      	ldrb	r3, [r7, #14]
 800f930:	2b80      	cmp	r3, #128	; 0x80
 800f932:	d004      	beq.n	800f93e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f934:	6839      	ldr	r1, [r7, #0]
 800f936:	6878      	ldr	r0, [r7, #4]
 800f938:	f000 fbed 	bl	8010116 <USBD_CtlError>
                break;
 800f93c:	e091      	b.n	800fa62 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f93e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f942:	2b00      	cmp	r3, #0
 800f944:	da0b      	bge.n	800f95e <USBD_StdEPReq+0x212>
 800f946:	7bbb      	ldrb	r3, [r7, #14]
 800f948:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f94c:	4613      	mov	r3, r2
 800f94e:	009b      	lsls	r3, r3, #2
 800f950:	4413      	add	r3, r2
 800f952:	009b      	lsls	r3, r3, #2
 800f954:	3310      	adds	r3, #16
 800f956:	687a      	ldr	r2, [r7, #4]
 800f958:	4413      	add	r3, r2
 800f95a:	3304      	adds	r3, #4
 800f95c:	e00b      	b.n	800f976 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f95e:	7bbb      	ldrb	r3, [r7, #14]
 800f960:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f964:	4613      	mov	r3, r2
 800f966:	009b      	lsls	r3, r3, #2
 800f968:	4413      	add	r3, r2
 800f96a:	009b      	lsls	r3, r3, #2
 800f96c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f970:	687a      	ldr	r2, [r7, #4]
 800f972:	4413      	add	r3, r2
 800f974:	3304      	adds	r3, #4
 800f976:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f978:	68bb      	ldr	r3, [r7, #8]
 800f97a:	2200      	movs	r2, #0
 800f97c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f97e:	68bb      	ldr	r3, [r7, #8]
 800f980:	2202      	movs	r2, #2
 800f982:	4619      	mov	r1, r3
 800f984:	6878      	ldr	r0, [r7, #4]
 800f986:	f000 fc37 	bl	80101f8 <USBD_CtlSendData>
              break;
 800f98a:	e06a      	b.n	800fa62 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f98c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f990:	2b00      	cmp	r3, #0
 800f992:	da11      	bge.n	800f9b8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f994:	7bbb      	ldrb	r3, [r7, #14]
 800f996:	f003 020f 	and.w	r2, r3, #15
 800f99a:	6879      	ldr	r1, [r7, #4]
 800f99c:	4613      	mov	r3, r2
 800f99e:	009b      	lsls	r3, r3, #2
 800f9a0:	4413      	add	r3, r2
 800f9a2:	009b      	lsls	r3, r3, #2
 800f9a4:	440b      	add	r3, r1
 800f9a6:	3324      	adds	r3, #36	; 0x24
 800f9a8:	881b      	ldrh	r3, [r3, #0]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d117      	bne.n	800f9de <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f9ae:	6839      	ldr	r1, [r7, #0]
 800f9b0:	6878      	ldr	r0, [r7, #4]
 800f9b2:	f000 fbb0 	bl	8010116 <USBD_CtlError>
                  break;
 800f9b6:	e054      	b.n	800fa62 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f9b8:	7bbb      	ldrb	r3, [r7, #14]
 800f9ba:	f003 020f 	and.w	r2, r3, #15
 800f9be:	6879      	ldr	r1, [r7, #4]
 800f9c0:	4613      	mov	r3, r2
 800f9c2:	009b      	lsls	r3, r3, #2
 800f9c4:	4413      	add	r3, r2
 800f9c6:	009b      	lsls	r3, r3, #2
 800f9c8:	440b      	add	r3, r1
 800f9ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f9ce:	881b      	ldrh	r3, [r3, #0]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d104      	bne.n	800f9de <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f9d4:	6839      	ldr	r1, [r7, #0]
 800f9d6:	6878      	ldr	r0, [r7, #4]
 800f9d8:	f000 fb9d 	bl	8010116 <USBD_CtlError>
                  break;
 800f9dc:	e041      	b.n	800fa62 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f9de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	da0b      	bge.n	800f9fe <USBD_StdEPReq+0x2b2>
 800f9e6:	7bbb      	ldrb	r3, [r7, #14]
 800f9e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f9ec:	4613      	mov	r3, r2
 800f9ee:	009b      	lsls	r3, r3, #2
 800f9f0:	4413      	add	r3, r2
 800f9f2:	009b      	lsls	r3, r3, #2
 800f9f4:	3310      	adds	r3, #16
 800f9f6:	687a      	ldr	r2, [r7, #4]
 800f9f8:	4413      	add	r3, r2
 800f9fa:	3304      	adds	r3, #4
 800f9fc:	e00b      	b.n	800fa16 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f9fe:	7bbb      	ldrb	r3, [r7, #14]
 800fa00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fa04:	4613      	mov	r3, r2
 800fa06:	009b      	lsls	r3, r3, #2
 800fa08:	4413      	add	r3, r2
 800fa0a:	009b      	lsls	r3, r3, #2
 800fa0c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fa10:	687a      	ldr	r2, [r7, #4]
 800fa12:	4413      	add	r3, r2
 800fa14:	3304      	adds	r3, #4
 800fa16:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fa18:	7bbb      	ldrb	r3, [r7, #14]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d002      	beq.n	800fa24 <USBD_StdEPReq+0x2d8>
 800fa1e:	7bbb      	ldrb	r3, [r7, #14]
 800fa20:	2b80      	cmp	r3, #128	; 0x80
 800fa22:	d103      	bne.n	800fa2c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800fa24:	68bb      	ldr	r3, [r7, #8]
 800fa26:	2200      	movs	r2, #0
 800fa28:	601a      	str	r2, [r3, #0]
 800fa2a:	e00e      	b.n	800fa4a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fa2c:	7bbb      	ldrb	r3, [r7, #14]
 800fa2e:	4619      	mov	r1, r3
 800fa30:	6878      	ldr	r0, [r7, #4]
 800fa32:	f001 f93d 	bl	8010cb0 <USBD_LL_IsStallEP>
 800fa36:	4603      	mov	r3, r0
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d003      	beq.n	800fa44 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800fa3c:	68bb      	ldr	r3, [r7, #8]
 800fa3e:	2201      	movs	r2, #1
 800fa40:	601a      	str	r2, [r3, #0]
 800fa42:	e002      	b.n	800fa4a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800fa44:	68bb      	ldr	r3, [r7, #8]
 800fa46:	2200      	movs	r2, #0
 800fa48:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fa4a:	68bb      	ldr	r3, [r7, #8]
 800fa4c:	2202      	movs	r2, #2
 800fa4e:	4619      	mov	r1, r3
 800fa50:	6878      	ldr	r0, [r7, #4]
 800fa52:	f000 fbd1 	bl	80101f8 <USBD_CtlSendData>
              break;
 800fa56:	e004      	b.n	800fa62 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800fa58:	6839      	ldr	r1, [r7, #0]
 800fa5a:	6878      	ldr	r0, [r7, #4]
 800fa5c:	f000 fb5b 	bl	8010116 <USBD_CtlError>
              break;
 800fa60:	bf00      	nop
          }
          break;
 800fa62:	e004      	b.n	800fa6e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800fa64:	6839      	ldr	r1, [r7, #0]
 800fa66:	6878      	ldr	r0, [r7, #4]
 800fa68:	f000 fb55 	bl	8010116 <USBD_CtlError>
          break;
 800fa6c:	bf00      	nop
      }
      break;
 800fa6e:	e005      	b.n	800fa7c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800fa70:	6839      	ldr	r1, [r7, #0]
 800fa72:	6878      	ldr	r0, [r7, #4]
 800fa74:	f000 fb4f 	bl	8010116 <USBD_CtlError>
      break;
 800fa78:	e000      	b.n	800fa7c <USBD_StdEPReq+0x330>
      break;
 800fa7a:	bf00      	nop
  }

  return ret;
 800fa7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa7e:	4618      	mov	r0, r3
 800fa80:	3710      	adds	r7, #16
 800fa82:	46bd      	mov	sp, r7
 800fa84:	bd80      	pop	{r7, pc}
	...

0800fa88 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b084      	sub	sp, #16
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
 800fa90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fa92:	2300      	movs	r3, #0
 800fa94:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fa96:	2300      	movs	r3, #0
 800fa98:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fa9e:	683b      	ldr	r3, [r7, #0]
 800faa0:	885b      	ldrh	r3, [r3, #2]
 800faa2:	0a1b      	lsrs	r3, r3, #8
 800faa4:	b29b      	uxth	r3, r3
 800faa6:	3b01      	subs	r3, #1
 800faa8:	2b06      	cmp	r3, #6
 800faaa:	f200 8128 	bhi.w	800fcfe <USBD_GetDescriptor+0x276>
 800faae:	a201      	add	r2, pc, #4	; (adr r2, 800fab4 <USBD_GetDescriptor+0x2c>)
 800fab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fab4:	0800fad1 	.word	0x0800fad1
 800fab8:	0800fae9 	.word	0x0800fae9
 800fabc:	0800fb29 	.word	0x0800fb29
 800fac0:	0800fcff 	.word	0x0800fcff
 800fac4:	0800fcff 	.word	0x0800fcff
 800fac8:	0800fc9f 	.word	0x0800fc9f
 800facc:	0800fccb 	.word	0x0800fccb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	687a      	ldr	r2, [r7, #4]
 800fada:	7c12      	ldrb	r2, [r2, #16]
 800fadc:	f107 0108 	add.w	r1, r7, #8
 800fae0:	4610      	mov	r0, r2
 800fae2:	4798      	blx	r3
 800fae4:	60f8      	str	r0, [r7, #12]
      break;
 800fae6:	e112      	b.n	800fd0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	7c1b      	ldrb	r3, [r3, #16]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d10d      	bne.n	800fb0c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800faf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800faf8:	f107 0208 	add.w	r2, r7, #8
 800fafc:	4610      	mov	r0, r2
 800fafe:	4798      	blx	r3
 800fb00:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	3301      	adds	r3, #1
 800fb06:	2202      	movs	r2, #2
 800fb08:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fb0a:	e100      	b.n	800fd0e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb14:	f107 0208 	add.w	r2, r7, #8
 800fb18:	4610      	mov	r0, r2
 800fb1a:	4798      	blx	r3
 800fb1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	3301      	adds	r3, #1
 800fb22:	2202      	movs	r2, #2
 800fb24:	701a      	strb	r2, [r3, #0]
      break;
 800fb26:	e0f2      	b.n	800fd0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	885b      	ldrh	r3, [r3, #2]
 800fb2c:	b2db      	uxtb	r3, r3
 800fb2e:	2b05      	cmp	r3, #5
 800fb30:	f200 80ac 	bhi.w	800fc8c <USBD_GetDescriptor+0x204>
 800fb34:	a201      	add	r2, pc, #4	; (adr r2, 800fb3c <USBD_GetDescriptor+0xb4>)
 800fb36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb3a:	bf00      	nop
 800fb3c:	0800fb55 	.word	0x0800fb55
 800fb40:	0800fb89 	.word	0x0800fb89
 800fb44:	0800fbbd 	.word	0x0800fbbd
 800fb48:	0800fbf1 	.word	0x0800fbf1
 800fb4c:	0800fc25 	.word	0x0800fc25
 800fb50:	0800fc59 	.word	0x0800fc59
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb5a:	685b      	ldr	r3, [r3, #4]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d00b      	beq.n	800fb78 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb66:	685b      	ldr	r3, [r3, #4]
 800fb68:	687a      	ldr	r2, [r7, #4]
 800fb6a:	7c12      	ldrb	r2, [r2, #16]
 800fb6c:	f107 0108 	add.w	r1, r7, #8
 800fb70:	4610      	mov	r0, r2
 800fb72:	4798      	blx	r3
 800fb74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fb76:	e091      	b.n	800fc9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fb78:	6839      	ldr	r1, [r7, #0]
 800fb7a:	6878      	ldr	r0, [r7, #4]
 800fb7c:	f000 facb 	bl	8010116 <USBD_CtlError>
            err++;
 800fb80:	7afb      	ldrb	r3, [r7, #11]
 800fb82:	3301      	adds	r3, #1
 800fb84:	72fb      	strb	r3, [r7, #11]
          break;
 800fb86:	e089      	b.n	800fc9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb8e:	689b      	ldr	r3, [r3, #8]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d00b      	beq.n	800fbac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb9a:	689b      	ldr	r3, [r3, #8]
 800fb9c:	687a      	ldr	r2, [r7, #4]
 800fb9e:	7c12      	ldrb	r2, [r2, #16]
 800fba0:	f107 0108 	add.w	r1, r7, #8
 800fba4:	4610      	mov	r0, r2
 800fba6:	4798      	blx	r3
 800fba8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fbaa:	e077      	b.n	800fc9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fbac:	6839      	ldr	r1, [r7, #0]
 800fbae:	6878      	ldr	r0, [r7, #4]
 800fbb0:	f000 fab1 	bl	8010116 <USBD_CtlError>
            err++;
 800fbb4:	7afb      	ldrb	r3, [r7, #11]
 800fbb6:	3301      	adds	r3, #1
 800fbb8:	72fb      	strb	r3, [r7, #11]
          break;
 800fbba:	e06f      	b.n	800fc9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fbc2:	68db      	ldr	r3, [r3, #12]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d00b      	beq.n	800fbe0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fbce:	68db      	ldr	r3, [r3, #12]
 800fbd0:	687a      	ldr	r2, [r7, #4]
 800fbd2:	7c12      	ldrb	r2, [r2, #16]
 800fbd4:	f107 0108 	add.w	r1, r7, #8
 800fbd8:	4610      	mov	r0, r2
 800fbda:	4798      	blx	r3
 800fbdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fbde:	e05d      	b.n	800fc9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fbe0:	6839      	ldr	r1, [r7, #0]
 800fbe2:	6878      	ldr	r0, [r7, #4]
 800fbe4:	f000 fa97 	bl	8010116 <USBD_CtlError>
            err++;
 800fbe8:	7afb      	ldrb	r3, [r7, #11]
 800fbea:	3301      	adds	r3, #1
 800fbec:	72fb      	strb	r3, [r7, #11]
          break;
 800fbee:	e055      	b.n	800fc9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fbf6:	691b      	ldr	r3, [r3, #16]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d00b      	beq.n	800fc14 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc02:	691b      	ldr	r3, [r3, #16]
 800fc04:	687a      	ldr	r2, [r7, #4]
 800fc06:	7c12      	ldrb	r2, [r2, #16]
 800fc08:	f107 0108 	add.w	r1, r7, #8
 800fc0c:	4610      	mov	r0, r2
 800fc0e:	4798      	blx	r3
 800fc10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fc12:	e043      	b.n	800fc9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fc14:	6839      	ldr	r1, [r7, #0]
 800fc16:	6878      	ldr	r0, [r7, #4]
 800fc18:	f000 fa7d 	bl	8010116 <USBD_CtlError>
            err++;
 800fc1c:	7afb      	ldrb	r3, [r7, #11]
 800fc1e:	3301      	adds	r3, #1
 800fc20:	72fb      	strb	r3, [r7, #11]
          break;
 800fc22:	e03b      	b.n	800fc9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc2a:	695b      	ldr	r3, [r3, #20]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d00b      	beq.n	800fc48 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc36:	695b      	ldr	r3, [r3, #20]
 800fc38:	687a      	ldr	r2, [r7, #4]
 800fc3a:	7c12      	ldrb	r2, [r2, #16]
 800fc3c:	f107 0108 	add.w	r1, r7, #8
 800fc40:	4610      	mov	r0, r2
 800fc42:	4798      	blx	r3
 800fc44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fc46:	e029      	b.n	800fc9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fc48:	6839      	ldr	r1, [r7, #0]
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	f000 fa63 	bl	8010116 <USBD_CtlError>
            err++;
 800fc50:	7afb      	ldrb	r3, [r7, #11]
 800fc52:	3301      	adds	r3, #1
 800fc54:	72fb      	strb	r3, [r7, #11]
          break;
 800fc56:	e021      	b.n	800fc9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc5e:	699b      	ldr	r3, [r3, #24]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d00b      	beq.n	800fc7c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc6a:	699b      	ldr	r3, [r3, #24]
 800fc6c:	687a      	ldr	r2, [r7, #4]
 800fc6e:	7c12      	ldrb	r2, [r2, #16]
 800fc70:	f107 0108 	add.w	r1, r7, #8
 800fc74:	4610      	mov	r0, r2
 800fc76:	4798      	blx	r3
 800fc78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fc7a:	e00f      	b.n	800fc9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fc7c:	6839      	ldr	r1, [r7, #0]
 800fc7e:	6878      	ldr	r0, [r7, #4]
 800fc80:	f000 fa49 	bl	8010116 <USBD_CtlError>
            err++;
 800fc84:	7afb      	ldrb	r3, [r7, #11]
 800fc86:	3301      	adds	r3, #1
 800fc88:	72fb      	strb	r3, [r7, #11]
          break;
 800fc8a:	e007      	b.n	800fc9c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800fc8c:	6839      	ldr	r1, [r7, #0]
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f000 fa41 	bl	8010116 <USBD_CtlError>
          err++;
 800fc94:	7afb      	ldrb	r3, [r7, #11]
 800fc96:	3301      	adds	r3, #1
 800fc98:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800fc9a:	bf00      	nop
      }
      break;
 800fc9c:	e037      	b.n	800fd0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	7c1b      	ldrb	r3, [r3, #16]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d109      	bne.n	800fcba <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fcac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fcae:	f107 0208 	add.w	r2, r7, #8
 800fcb2:	4610      	mov	r0, r2
 800fcb4:	4798      	blx	r3
 800fcb6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fcb8:	e029      	b.n	800fd0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800fcba:	6839      	ldr	r1, [r7, #0]
 800fcbc:	6878      	ldr	r0, [r7, #4]
 800fcbe:	f000 fa2a 	bl	8010116 <USBD_CtlError>
        err++;
 800fcc2:	7afb      	ldrb	r3, [r7, #11]
 800fcc4:	3301      	adds	r3, #1
 800fcc6:	72fb      	strb	r3, [r7, #11]
      break;
 800fcc8:	e021      	b.n	800fd0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	7c1b      	ldrb	r3, [r3, #16]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d10d      	bne.n	800fcee <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fcd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcda:	f107 0208 	add.w	r2, r7, #8
 800fcde:	4610      	mov	r0, r2
 800fce0:	4798      	blx	r3
 800fce2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	3301      	adds	r3, #1
 800fce8:	2207      	movs	r2, #7
 800fcea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fcec:	e00f      	b.n	800fd0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800fcee:	6839      	ldr	r1, [r7, #0]
 800fcf0:	6878      	ldr	r0, [r7, #4]
 800fcf2:	f000 fa10 	bl	8010116 <USBD_CtlError>
        err++;
 800fcf6:	7afb      	ldrb	r3, [r7, #11]
 800fcf8:	3301      	adds	r3, #1
 800fcfa:	72fb      	strb	r3, [r7, #11]
      break;
 800fcfc:	e007      	b.n	800fd0e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800fcfe:	6839      	ldr	r1, [r7, #0]
 800fd00:	6878      	ldr	r0, [r7, #4]
 800fd02:	f000 fa08 	bl	8010116 <USBD_CtlError>
      err++;
 800fd06:	7afb      	ldrb	r3, [r7, #11]
 800fd08:	3301      	adds	r3, #1
 800fd0a:	72fb      	strb	r3, [r7, #11]
      break;
 800fd0c:	bf00      	nop
  }

  if (err != 0U)
 800fd0e:	7afb      	ldrb	r3, [r7, #11]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d11e      	bne.n	800fd52 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800fd14:	683b      	ldr	r3, [r7, #0]
 800fd16:	88db      	ldrh	r3, [r3, #6]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d016      	beq.n	800fd4a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800fd1c:	893b      	ldrh	r3, [r7, #8]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d00e      	beq.n	800fd40 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800fd22:	683b      	ldr	r3, [r7, #0]
 800fd24:	88da      	ldrh	r2, [r3, #6]
 800fd26:	893b      	ldrh	r3, [r7, #8]
 800fd28:	4293      	cmp	r3, r2
 800fd2a:	bf28      	it	cs
 800fd2c:	4613      	movcs	r3, r2
 800fd2e:	b29b      	uxth	r3, r3
 800fd30:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fd32:	893b      	ldrh	r3, [r7, #8]
 800fd34:	461a      	mov	r2, r3
 800fd36:	68f9      	ldr	r1, [r7, #12]
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f000 fa5d 	bl	80101f8 <USBD_CtlSendData>
 800fd3e:	e009      	b.n	800fd54 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fd40:	6839      	ldr	r1, [r7, #0]
 800fd42:	6878      	ldr	r0, [r7, #4]
 800fd44:	f000 f9e7 	bl	8010116 <USBD_CtlError>
 800fd48:	e004      	b.n	800fd54 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	f000 faae 	bl	80102ac <USBD_CtlSendStatus>
 800fd50:	e000      	b.n	800fd54 <USBD_GetDescriptor+0x2cc>
    return;
 800fd52:	bf00      	nop
  }
}
 800fd54:	3710      	adds	r7, #16
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd80      	pop	{r7, pc}
 800fd5a:	bf00      	nop

0800fd5c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b084      	sub	sp, #16
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
 800fd64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fd66:	683b      	ldr	r3, [r7, #0]
 800fd68:	889b      	ldrh	r3, [r3, #4]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d131      	bne.n	800fdd2 <USBD_SetAddress+0x76>
 800fd6e:	683b      	ldr	r3, [r7, #0]
 800fd70:	88db      	ldrh	r3, [r3, #6]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d12d      	bne.n	800fdd2 <USBD_SetAddress+0x76>
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	885b      	ldrh	r3, [r3, #2]
 800fd7a:	2b7f      	cmp	r3, #127	; 0x7f
 800fd7c:	d829      	bhi.n	800fdd2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fd7e:	683b      	ldr	r3, [r7, #0]
 800fd80:	885b      	ldrh	r3, [r3, #2]
 800fd82:	b2db      	uxtb	r3, r3
 800fd84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd90:	b2db      	uxtb	r3, r3
 800fd92:	2b03      	cmp	r3, #3
 800fd94:	d104      	bne.n	800fda0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fd96:	6839      	ldr	r1, [r7, #0]
 800fd98:	6878      	ldr	r0, [r7, #4]
 800fd9a:	f000 f9bc 	bl	8010116 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd9e:	e01d      	b.n	800fddc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	7bfa      	ldrb	r2, [r7, #15]
 800fda4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fda8:	7bfb      	ldrb	r3, [r7, #15]
 800fdaa:	4619      	mov	r1, r3
 800fdac:	6878      	ldr	r0, [r7, #4]
 800fdae:	f000 ffab 	bl	8010d08 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fdb2:	6878      	ldr	r0, [r7, #4]
 800fdb4:	f000 fa7a 	bl	80102ac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fdb8:	7bfb      	ldrb	r3, [r7, #15]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d004      	beq.n	800fdc8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	2202      	movs	r2, #2
 800fdc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fdc6:	e009      	b.n	800fddc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2201      	movs	r2, #1
 800fdcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fdd0:	e004      	b.n	800fddc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fdd2:	6839      	ldr	r1, [r7, #0]
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f000 f99e 	bl	8010116 <USBD_CtlError>
  }
}
 800fdda:	bf00      	nop
 800fddc:	bf00      	nop
 800fdde:	3710      	adds	r7, #16
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd80      	pop	{r7, pc}

0800fde4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b084      	sub	sp, #16
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
 800fdec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fdee:	2300      	movs	r3, #0
 800fdf0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fdf2:	683b      	ldr	r3, [r7, #0]
 800fdf4:	885b      	ldrh	r3, [r3, #2]
 800fdf6:	b2da      	uxtb	r2, r3
 800fdf8:	4b4e      	ldr	r3, [pc, #312]	; (800ff34 <USBD_SetConfig+0x150>)
 800fdfa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fdfc:	4b4d      	ldr	r3, [pc, #308]	; (800ff34 <USBD_SetConfig+0x150>)
 800fdfe:	781b      	ldrb	r3, [r3, #0]
 800fe00:	2b01      	cmp	r3, #1
 800fe02:	d905      	bls.n	800fe10 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fe04:	6839      	ldr	r1, [r7, #0]
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	f000 f985 	bl	8010116 <USBD_CtlError>
    return USBD_FAIL;
 800fe0c:	2303      	movs	r3, #3
 800fe0e:	e08c      	b.n	800ff2a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe16:	b2db      	uxtb	r3, r3
 800fe18:	2b02      	cmp	r3, #2
 800fe1a:	d002      	beq.n	800fe22 <USBD_SetConfig+0x3e>
 800fe1c:	2b03      	cmp	r3, #3
 800fe1e:	d029      	beq.n	800fe74 <USBD_SetConfig+0x90>
 800fe20:	e075      	b.n	800ff0e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800fe22:	4b44      	ldr	r3, [pc, #272]	; (800ff34 <USBD_SetConfig+0x150>)
 800fe24:	781b      	ldrb	r3, [r3, #0]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d020      	beq.n	800fe6c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800fe2a:	4b42      	ldr	r3, [pc, #264]	; (800ff34 <USBD_SetConfig+0x150>)
 800fe2c:	781b      	ldrb	r3, [r3, #0]
 800fe2e:	461a      	mov	r2, r3
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fe34:	4b3f      	ldr	r3, [pc, #252]	; (800ff34 <USBD_SetConfig+0x150>)
 800fe36:	781b      	ldrb	r3, [r3, #0]
 800fe38:	4619      	mov	r1, r3
 800fe3a:	6878      	ldr	r0, [r7, #4]
 800fe3c:	f7fe ffe7 	bl	800ee0e <USBD_SetClassConfig>
 800fe40:	4603      	mov	r3, r0
 800fe42:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fe44:	7bfb      	ldrb	r3, [r7, #15]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d008      	beq.n	800fe5c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800fe4a:	6839      	ldr	r1, [r7, #0]
 800fe4c:	6878      	ldr	r0, [r7, #4]
 800fe4e:	f000 f962 	bl	8010116 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	2202      	movs	r2, #2
 800fe56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fe5a:	e065      	b.n	800ff28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f000 fa25 	bl	80102ac <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	2203      	movs	r2, #3
 800fe66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fe6a:	e05d      	b.n	800ff28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fe6c:	6878      	ldr	r0, [r7, #4]
 800fe6e:	f000 fa1d 	bl	80102ac <USBD_CtlSendStatus>
      break;
 800fe72:	e059      	b.n	800ff28 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fe74:	4b2f      	ldr	r3, [pc, #188]	; (800ff34 <USBD_SetConfig+0x150>)
 800fe76:	781b      	ldrb	r3, [r3, #0]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d112      	bne.n	800fea2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2202      	movs	r2, #2
 800fe80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800fe84:	4b2b      	ldr	r3, [pc, #172]	; (800ff34 <USBD_SetConfig+0x150>)
 800fe86:	781b      	ldrb	r3, [r3, #0]
 800fe88:	461a      	mov	r2, r3
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fe8e:	4b29      	ldr	r3, [pc, #164]	; (800ff34 <USBD_SetConfig+0x150>)
 800fe90:	781b      	ldrb	r3, [r3, #0]
 800fe92:	4619      	mov	r1, r3
 800fe94:	6878      	ldr	r0, [r7, #4]
 800fe96:	f7fe ffd6 	bl	800ee46 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fe9a:	6878      	ldr	r0, [r7, #4]
 800fe9c:	f000 fa06 	bl	80102ac <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fea0:	e042      	b.n	800ff28 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800fea2:	4b24      	ldr	r3, [pc, #144]	; (800ff34 <USBD_SetConfig+0x150>)
 800fea4:	781b      	ldrb	r3, [r3, #0]
 800fea6:	461a      	mov	r2, r3
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	685b      	ldr	r3, [r3, #4]
 800feac:	429a      	cmp	r2, r3
 800feae:	d02a      	beq.n	800ff06 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	685b      	ldr	r3, [r3, #4]
 800feb4:	b2db      	uxtb	r3, r3
 800feb6:	4619      	mov	r1, r3
 800feb8:	6878      	ldr	r0, [r7, #4]
 800feba:	f7fe ffc4 	bl	800ee46 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800febe:	4b1d      	ldr	r3, [pc, #116]	; (800ff34 <USBD_SetConfig+0x150>)
 800fec0:	781b      	ldrb	r3, [r3, #0]
 800fec2:	461a      	mov	r2, r3
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fec8:	4b1a      	ldr	r3, [pc, #104]	; (800ff34 <USBD_SetConfig+0x150>)
 800feca:	781b      	ldrb	r3, [r3, #0]
 800fecc:	4619      	mov	r1, r3
 800fece:	6878      	ldr	r0, [r7, #4]
 800fed0:	f7fe ff9d 	bl	800ee0e <USBD_SetClassConfig>
 800fed4:	4603      	mov	r3, r0
 800fed6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fed8:	7bfb      	ldrb	r3, [r7, #15]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d00f      	beq.n	800fefe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800fede:	6839      	ldr	r1, [r7, #0]
 800fee0:	6878      	ldr	r0, [r7, #4]
 800fee2:	f000 f918 	bl	8010116 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	685b      	ldr	r3, [r3, #4]
 800feea:	b2db      	uxtb	r3, r3
 800feec:	4619      	mov	r1, r3
 800feee:	6878      	ldr	r0, [r7, #4]
 800fef0:	f7fe ffa9 	bl	800ee46 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2202      	movs	r2, #2
 800fef8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fefc:	e014      	b.n	800ff28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fefe:	6878      	ldr	r0, [r7, #4]
 800ff00:	f000 f9d4 	bl	80102ac <USBD_CtlSendStatus>
      break;
 800ff04:	e010      	b.n	800ff28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ff06:	6878      	ldr	r0, [r7, #4]
 800ff08:	f000 f9d0 	bl	80102ac <USBD_CtlSendStatus>
      break;
 800ff0c:	e00c      	b.n	800ff28 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ff0e:	6839      	ldr	r1, [r7, #0]
 800ff10:	6878      	ldr	r0, [r7, #4]
 800ff12:	f000 f900 	bl	8010116 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ff16:	4b07      	ldr	r3, [pc, #28]	; (800ff34 <USBD_SetConfig+0x150>)
 800ff18:	781b      	ldrb	r3, [r3, #0]
 800ff1a:	4619      	mov	r1, r3
 800ff1c:	6878      	ldr	r0, [r7, #4]
 800ff1e:	f7fe ff92 	bl	800ee46 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ff22:	2303      	movs	r3, #3
 800ff24:	73fb      	strb	r3, [r7, #15]
      break;
 800ff26:	bf00      	nop
  }

  return ret;
 800ff28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	3710      	adds	r7, #16
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	bd80      	pop	{r7, pc}
 800ff32:	bf00      	nop
 800ff34:	24003d70 	.word	0x24003d70

0800ff38 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b082      	sub	sp, #8
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
 800ff40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	88db      	ldrh	r3, [r3, #6]
 800ff46:	2b01      	cmp	r3, #1
 800ff48:	d004      	beq.n	800ff54 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ff4a:	6839      	ldr	r1, [r7, #0]
 800ff4c:	6878      	ldr	r0, [r7, #4]
 800ff4e:	f000 f8e2 	bl	8010116 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ff52:	e023      	b.n	800ff9c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff5a:	b2db      	uxtb	r3, r3
 800ff5c:	2b02      	cmp	r3, #2
 800ff5e:	dc02      	bgt.n	800ff66 <USBD_GetConfig+0x2e>
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	dc03      	bgt.n	800ff6c <USBD_GetConfig+0x34>
 800ff64:	e015      	b.n	800ff92 <USBD_GetConfig+0x5a>
 800ff66:	2b03      	cmp	r3, #3
 800ff68:	d00b      	beq.n	800ff82 <USBD_GetConfig+0x4a>
 800ff6a:	e012      	b.n	800ff92 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2200      	movs	r2, #0
 800ff70:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	3308      	adds	r3, #8
 800ff76:	2201      	movs	r2, #1
 800ff78:	4619      	mov	r1, r3
 800ff7a:	6878      	ldr	r0, [r7, #4]
 800ff7c:	f000 f93c 	bl	80101f8 <USBD_CtlSendData>
        break;
 800ff80:	e00c      	b.n	800ff9c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	3304      	adds	r3, #4
 800ff86:	2201      	movs	r2, #1
 800ff88:	4619      	mov	r1, r3
 800ff8a:	6878      	ldr	r0, [r7, #4]
 800ff8c:	f000 f934 	bl	80101f8 <USBD_CtlSendData>
        break;
 800ff90:	e004      	b.n	800ff9c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ff92:	6839      	ldr	r1, [r7, #0]
 800ff94:	6878      	ldr	r0, [r7, #4]
 800ff96:	f000 f8be 	bl	8010116 <USBD_CtlError>
        break;
 800ff9a:	bf00      	nop
}
 800ff9c:	bf00      	nop
 800ff9e:	3708      	adds	r7, #8
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	bd80      	pop	{r7, pc}

0800ffa4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b082      	sub	sp, #8
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
 800ffac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ffb4:	b2db      	uxtb	r3, r3
 800ffb6:	3b01      	subs	r3, #1
 800ffb8:	2b02      	cmp	r3, #2
 800ffba:	d81e      	bhi.n	800fffa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ffbc:	683b      	ldr	r3, [r7, #0]
 800ffbe:	88db      	ldrh	r3, [r3, #6]
 800ffc0:	2b02      	cmp	r3, #2
 800ffc2:	d004      	beq.n	800ffce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ffc4:	6839      	ldr	r1, [r7, #0]
 800ffc6:	6878      	ldr	r0, [r7, #4]
 800ffc8:	f000 f8a5 	bl	8010116 <USBD_CtlError>
        break;
 800ffcc:	e01a      	b.n	8010004 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	2201      	movs	r2, #1
 800ffd2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d005      	beq.n	800ffea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	68db      	ldr	r3, [r3, #12]
 800ffe2:	f043 0202 	orr.w	r2, r3, #2
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	330c      	adds	r3, #12
 800ffee:	2202      	movs	r2, #2
 800fff0:	4619      	mov	r1, r3
 800fff2:	6878      	ldr	r0, [r7, #4]
 800fff4:	f000 f900 	bl	80101f8 <USBD_CtlSendData>
      break;
 800fff8:	e004      	b.n	8010004 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fffa:	6839      	ldr	r1, [r7, #0]
 800fffc:	6878      	ldr	r0, [r7, #4]
 800fffe:	f000 f88a 	bl	8010116 <USBD_CtlError>
      break;
 8010002:	bf00      	nop
  }
}
 8010004:	bf00      	nop
 8010006:	3708      	adds	r7, #8
 8010008:	46bd      	mov	sp, r7
 801000a:	bd80      	pop	{r7, pc}

0801000c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b082      	sub	sp, #8
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
 8010014:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010016:	683b      	ldr	r3, [r7, #0]
 8010018:	885b      	ldrh	r3, [r3, #2]
 801001a:	2b01      	cmp	r3, #1
 801001c:	d107      	bne.n	801002e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	2201      	movs	r2, #1
 8010022:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010026:	6878      	ldr	r0, [r7, #4]
 8010028:	f000 f940 	bl	80102ac <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801002c:	e013      	b.n	8010056 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801002e:	683b      	ldr	r3, [r7, #0]
 8010030:	885b      	ldrh	r3, [r3, #2]
 8010032:	2b02      	cmp	r3, #2
 8010034:	d10b      	bne.n	801004e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8010036:	683b      	ldr	r3, [r7, #0]
 8010038:	889b      	ldrh	r3, [r3, #4]
 801003a:	0a1b      	lsrs	r3, r3, #8
 801003c:	b29b      	uxth	r3, r3
 801003e:	b2da      	uxtb	r2, r3
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8010046:	6878      	ldr	r0, [r7, #4]
 8010048:	f000 f930 	bl	80102ac <USBD_CtlSendStatus>
}
 801004c:	e003      	b.n	8010056 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801004e:	6839      	ldr	r1, [r7, #0]
 8010050:	6878      	ldr	r0, [r7, #4]
 8010052:	f000 f860 	bl	8010116 <USBD_CtlError>
}
 8010056:	bf00      	nop
 8010058:	3708      	adds	r7, #8
 801005a:	46bd      	mov	sp, r7
 801005c:	bd80      	pop	{r7, pc}

0801005e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801005e:	b580      	push	{r7, lr}
 8010060:	b082      	sub	sp, #8
 8010062:	af00      	add	r7, sp, #0
 8010064:	6078      	str	r0, [r7, #4]
 8010066:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801006e:	b2db      	uxtb	r3, r3
 8010070:	3b01      	subs	r3, #1
 8010072:	2b02      	cmp	r3, #2
 8010074:	d80b      	bhi.n	801008e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010076:	683b      	ldr	r3, [r7, #0]
 8010078:	885b      	ldrh	r3, [r3, #2]
 801007a:	2b01      	cmp	r3, #1
 801007c:	d10c      	bne.n	8010098 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	2200      	movs	r2, #0
 8010082:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010086:	6878      	ldr	r0, [r7, #4]
 8010088:	f000 f910 	bl	80102ac <USBD_CtlSendStatus>
      }
      break;
 801008c:	e004      	b.n	8010098 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801008e:	6839      	ldr	r1, [r7, #0]
 8010090:	6878      	ldr	r0, [r7, #4]
 8010092:	f000 f840 	bl	8010116 <USBD_CtlError>
      break;
 8010096:	e000      	b.n	801009a <USBD_ClrFeature+0x3c>
      break;
 8010098:	bf00      	nop
  }
}
 801009a:	bf00      	nop
 801009c:	3708      	adds	r7, #8
 801009e:	46bd      	mov	sp, r7
 80100a0:	bd80      	pop	{r7, pc}

080100a2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80100a2:	b580      	push	{r7, lr}
 80100a4:	b084      	sub	sp, #16
 80100a6:	af00      	add	r7, sp, #0
 80100a8:	6078      	str	r0, [r7, #4]
 80100aa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	781a      	ldrb	r2, [r3, #0]
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	3301      	adds	r3, #1
 80100bc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	781a      	ldrb	r2, [r3, #0]
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	3301      	adds	r3, #1
 80100ca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80100cc:	68f8      	ldr	r0, [r7, #12]
 80100ce:	f7ff fa41 	bl	800f554 <SWAPBYTE>
 80100d2:	4603      	mov	r3, r0
 80100d4:	461a      	mov	r2, r3
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	3301      	adds	r3, #1
 80100de:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	3301      	adds	r3, #1
 80100e4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80100e6:	68f8      	ldr	r0, [r7, #12]
 80100e8:	f7ff fa34 	bl	800f554 <SWAPBYTE>
 80100ec:	4603      	mov	r3, r0
 80100ee:	461a      	mov	r2, r3
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	3301      	adds	r3, #1
 80100f8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	3301      	adds	r3, #1
 80100fe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010100:	68f8      	ldr	r0, [r7, #12]
 8010102:	f7ff fa27 	bl	800f554 <SWAPBYTE>
 8010106:	4603      	mov	r3, r0
 8010108:	461a      	mov	r2, r3
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	80da      	strh	r2, [r3, #6]
}
 801010e:	bf00      	nop
 8010110:	3710      	adds	r7, #16
 8010112:	46bd      	mov	sp, r7
 8010114:	bd80      	pop	{r7, pc}

08010116 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010116:	b580      	push	{r7, lr}
 8010118:	b082      	sub	sp, #8
 801011a:	af00      	add	r7, sp, #0
 801011c:	6078      	str	r0, [r7, #4]
 801011e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010120:	2180      	movs	r1, #128	; 0x80
 8010122:	6878      	ldr	r0, [r7, #4]
 8010124:	f000 fd86 	bl	8010c34 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010128:	2100      	movs	r1, #0
 801012a:	6878      	ldr	r0, [r7, #4]
 801012c:	f000 fd82 	bl	8010c34 <USBD_LL_StallEP>
}
 8010130:	bf00      	nop
 8010132:	3708      	adds	r7, #8
 8010134:	46bd      	mov	sp, r7
 8010136:	bd80      	pop	{r7, pc}

08010138 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b086      	sub	sp, #24
 801013c:	af00      	add	r7, sp, #0
 801013e:	60f8      	str	r0, [r7, #12]
 8010140:	60b9      	str	r1, [r7, #8]
 8010142:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010144:	2300      	movs	r3, #0
 8010146:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d036      	beq.n	80101bc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010152:	6938      	ldr	r0, [r7, #16]
 8010154:	f000 f836 	bl	80101c4 <USBD_GetLen>
 8010158:	4603      	mov	r3, r0
 801015a:	3301      	adds	r3, #1
 801015c:	b29b      	uxth	r3, r3
 801015e:	005b      	lsls	r3, r3, #1
 8010160:	b29a      	uxth	r2, r3
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010166:	7dfb      	ldrb	r3, [r7, #23]
 8010168:	68ba      	ldr	r2, [r7, #8]
 801016a:	4413      	add	r3, r2
 801016c:	687a      	ldr	r2, [r7, #4]
 801016e:	7812      	ldrb	r2, [r2, #0]
 8010170:	701a      	strb	r2, [r3, #0]
  idx++;
 8010172:	7dfb      	ldrb	r3, [r7, #23]
 8010174:	3301      	adds	r3, #1
 8010176:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010178:	7dfb      	ldrb	r3, [r7, #23]
 801017a:	68ba      	ldr	r2, [r7, #8]
 801017c:	4413      	add	r3, r2
 801017e:	2203      	movs	r2, #3
 8010180:	701a      	strb	r2, [r3, #0]
  idx++;
 8010182:	7dfb      	ldrb	r3, [r7, #23]
 8010184:	3301      	adds	r3, #1
 8010186:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010188:	e013      	b.n	80101b2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801018a:	7dfb      	ldrb	r3, [r7, #23]
 801018c:	68ba      	ldr	r2, [r7, #8]
 801018e:	4413      	add	r3, r2
 8010190:	693a      	ldr	r2, [r7, #16]
 8010192:	7812      	ldrb	r2, [r2, #0]
 8010194:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010196:	693b      	ldr	r3, [r7, #16]
 8010198:	3301      	adds	r3, #1
 801019a:	613b      	str	r3, [r7, #16]
    idx++;
 801019c:	7dfb      	ldrb	r3, [r7, #23]
 801019e:	3301      	adds	r3, #1
 80101a0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80101a2:	7dfb      	ldrb	r3, [r7, #23]
 80101a4:	68ba      	ldr	r2, [r7, #8]
 80101a6:	4413      	add	r3, r2
 80101a8:	2200      	movs	r2, #0
 80101aa:	701a      	strb	r2, [r3, #0]
    idx++;
 80101ac:	7dfb      	ldrb	r3, [r7, #23]
 80101ae:	3301      	adds	r3, #1
 80101b0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80101b2:	693b      	ldr	r3, [r7, #16]
 80101b4:	781b      	ldrb	r3, [r3, #0]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d1e7      	bne.n	801018a <USBD_GetString+0x52>
 80101ba:	e000      	b.n	80101be <USBD_GetString+0x86>
    return;
 80101bc:	bf00      	nop
  }
}
 80101be:	3718      	adds	r7, #24
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bd80      	pop	{r7, pc}

080101c4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80101c4:	b480      	push	{r7}
 80101c6:	b085      	sub	sp, #20
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80101cc:	2300      	movs	r3, #0
 80101ce:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80101d4:	e005      	b.n	80101e2 <USBD_GetLen+0x1e>
  {
    len++;
 80101d6:	7bfb      	ldrb	r3, [r7, #15]
 80101d8:	3301      	adds	r3, #1
 80101da:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80101dc:	68bb      	ldr	r3, [r7, #8]
 80101de:	3301      	adds	r3, #1
 80101e0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80101e2:	68bb      	ldr	r3, [r7, #8]
 80101e4:	781b      	ldrb	r3, [r3, #0]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d1f5      	bne.n	80101d6 <USBD_GetLen+0x12>
  }

  return len;
 80101ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80101ec:	4618      	mov	r0, r3
 80101ee:	3714      	adds	r7, #20
 80101f0:	46bd      	mov	sp, r7
 80101f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f6:	4770      	bx	lr

080101f8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b084      	sub	sp, #16
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	60f8      	str	r0, [r7, #12]
 8010200:	60b9      	str	r1, [r7, #8]
 8010202:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	2202      	movs	r2, #2
 8010208:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	687a      	ldr	r2, [r7, #4]
 8010210:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	687a      	ldr	r2, [r7, #4]
 8010216:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	68ba      	ldr	r2, [r7, #8]
 801021c:	2100      	movs	r1, #0
 801021e:	68f8      	ldr	r0, [r7, #12]
 8010220:	f000 fd91 	bl	8010d46 <USBD_LL_Transmit>

  return USBD_OK;
 8010224:	2300      	movs	r3, #0
}
 8010226:	4618      	mov	r0, r3
 8010228:	3710      	adds	r7, #16
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}

0801022e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801022e:	b580      	push	{r7, lr}
 8010230:	b084      	sub	sp, #16
 8010232:	af00      	add	r7, sp, #0
 8010234:	60f8      	str	r0, [r7, #12]
 8010236:	60b9      	str	r1, [r7, #8]
 8010238:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	68ba      	ldr	r2, [r7, #8]
 801023e:	2100      	movs	r1, #0
 8010240:	68f8      	ldr	r0, [r7, #12]
 8010242:	f000 fd80 	bl	8010d46 <USBD_LL_Transmit>

  return USBD_OK;
 8010246:	2300      	movs	r3, #0
}
 8010248:	4618      	mov	r0, r3
 801024a:	3710      	adds	r7, #16
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}

08010250 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b084      	sub	sp, #16
 8010254:	af00      	add	r7, sp, #0
 8010256:	60f8      	str	r0, [r7, #12]
 8010258:	60b9      	str	r1, [r7, #8]
 801025a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	2203      	movs	r2, #3
 8010260:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	687a      	ldr	r2, [r7, #4]
 8010268:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	687a      	ldr	r2, [r7, #4]
 8010270:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	68ba      	ldr	r2, [r7, #8]
 8010278:	2100      	movs	r1, #0
 801027a:	68f8      	ldr	r0, [r7, #12]
 801027c:	f000 fd84 	bl	8010d88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010280:	2300      	movs	r3, #0
}
 8010282:	4618      	mov	r0, r3
 8010284:	3710      	adds	r7, #16
 8010286:	46bd      	mov	sp, r7
 8010288:	bd80      	pop	{r7, pc}

0801028a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801028a:	b580      	push	{r7, lr}
 801028c:	b084      	sub	sp, #16
 801028e:	af00      	add	r7, sp, #0
 8010290:	60f8      	str	r0, [r7, #12]
 8010292:	60b9      	str	r1, [r7, #8]
 8010294:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	68ba      	ldr	r2, [r7, #8]
 801029a:	2100      	movs	r1, #0
 801029c:	68f8      	ldr	r0, [r7, #12]
 801029e:	f000 fd73 	bl	8010d88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80102a2:	2300      	movs	r3, #0
}
 80102a4:	4618      	mov	r0, r3
 80102a6:	3710      	adds	r7, #16
 80102a8:	46bd      	mov	sp, r7
 80102aa:	bd80      	pop	{r7, pc}

080102ac <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b082      	sub	sp, #8
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	2204      	movs	r2, #4
 80102b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80102bc:	2300      	movs	r3, #0
 80102be:	2200      	movs	r2, #0
 80102c0:	2100      	movs	r1, #0
 80102c2:	6878      	ldr	r0, [r7, #4]
 80102c4:	f000 fd3f 	bl	8010d46 <USBD_LL_Transmit>

  return USBD_OK;
 80102c8:	2300      	movs	r3, #0
}
 80102ca:	4618      	mov	r0, r3
 80102cc:	3708      	adds	r7, #8
 80102ce:	46bd      	mov	sp, r7
 80102d0:	bd80      	pop	{r7, pc}

080102d2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80102d2:	b580      	push	{r7, lr}
 80102d4:	b082      	sub	sp, #8
 80102d6:	af00      	add	r7, sp, #0
 80102d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	2205      	movs	r2, #5
 80102de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80102e2:	2300      	movs	r3, #0
 80102e4:	2200      	movs	r2, #0
 80102e6:	2100      	movs	r1, #0
 80102e8:	6878      	ldr	r0, [r7, #4]
 80102ea:	f000 fd4d 	bl	8010d88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80102ee:	2300      	movs	r3, #0
}
 80102f0:	4618      	mov	r0, r3
 80102f2:	3708      	adds	r7, #8
 80102f4:	46bd      	mov	sp, r7
 80102f6:	bd80      	pop	{r7, pc}

080102f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80102fc:	2200      	movs	r2, #0
 80102fe:	4913      	ldr	r1, [pc, #76]	; (801034c <MX_USB_DEVICE_Init+0x54>)
 8010300:	4813      	ldr	r0, [pc, #76]	; (8010350 <MX_USB_DEVICE_Init+0x58>)
 8010302:	f7fe fd07 	bl	800ed14 <USBD_Init>
 8010306:	4603      	mov	r3, r0
 8010308:	2b00      	cmp	r3, #0
 801030a:	d001      	beq.n	8010310 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801030c:	f7f0 ffe2 	bl	80012d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010310:	4910      	ldr	r1, [pc, #64]	; (8010354 <MX_USB_DEVICE_Init+0x5c>)
 8010312:	480f      	ldr	r0, [pc, #60]	; (8010350 <MX_USB_DEVICE_Init+0x58>)
 8010314:	f7fe fd2e 	bl	800ed74 <USBD_RegisterClass>
 8010318:	4603      	mov	r3, r0
 801031a:	2b00      	cmp	r3, #0
 801031c:	d001      	beq.n	8010322 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801031e:	f7f0 ffd9 	bl	80012d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010322:	490d      	ldr	r1, [pc, #52]	; (8010358 <MX_USB_DEVICE_Init+0x60>)
 8010324:	480a      	ldr	r0, [pc, #40]	; (8010350 <MX_USB_DEVICE_Init+0x58>)
 8010326:	f7fe fc1f 	bl	800eb68 <USBD_CDC_RegisterInterface>
 801032a:	4603      	mov	r3, r0
 801032c:	2b00      	cmp	r3, #0
 801032e:	d001      	beq.n	8010334 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010330:	f7f0 ffd0 	bl	80012d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010334:	4806      	ldr	r0, [pc, #24]	; (8010350 <MX_USB_DEVICE_Init+0x58>)
 8010336:	f7fe fd53 	bl	800ede0 <USBD_Start>
 801033a:	4603      	mov	r3, r0
 801033c:	2b00      	cmp	r3, #0
 801033e:	d001      	beq.n	8010344 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010340:	f7f0 ffc8 	bl	80012d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8010344:	f7f7 f980 	bl	8007648 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010348:	bf00      	nop
 801034a:	bd80      	pop	{r7, pc}
 801034c:	240000b0 	.word	0x240000b0
 8010350:	24003d74 	.word	0x24003d74
 8010354:	2400001c 	.word	0x2400001c
 8010358:	2400009c 	.word	0x2400009c

0801035c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801035c:	b580      	push	{r7, lr}
 801035e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010360:	2200      	movs	r2, #0
 8010362:	4905      	ldr	r1, [pc, #20]	; (8010378 <CDC_Init_FS+0x1c>)
 8010364:	4805      	ldr	r0, [pc, #20]	; (801037c <CDC_Init_FS+0x20>)
 8010366:	f7fe fc19 	bl	800eb9c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801036a:	4905      	ldr	r1, [pc, #20]	; (8010380 <CDC_Init_FS+0x24>)
 801036c:	4803      	ldr	r0, [pc, #12]	; (801037c <CDC_Init_FS+0x20>)
 801036e:	f7fe fc37 	bl	800ebe0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010372:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010374:	4618      	mov	r0, r3
 8010376:	bd80      	pop	{r7, pc}
 8010378:	24004858 	.word	0x24004858
 801037c:	24003d74 	.word	0x24003d74
 8010380:	24004058 	.word	0x24004058

08010384 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010384:	b480      	push	{r7}
 8010386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010388:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801038a:	4618      	mov	r0, r3
 801038c:	46bd      	mov	sp, r7
 801038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010392:	4770      	bx	lr

08010394 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010394:	b480      	push	{r7}
 8010396:	b083      	sub	sp, #12
 8010398:	af00      	add	r7, sp, #0
 801039a:	4603      	mov	r3, r0
 801039c:	6039      	str	r1, [r7, #0]
 801039e:	71fb      	strb	r3, [r7, #7]
 80103a0:	4613      	mov	r3, r2
 80103a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80103a4:	79fb      	ldrb	r3, [r7, #7]
 80103a6:	2b23      	cmp	r3, #35	; 0x23
 80103a8:	f200 808c 	bhi.w	80104c4 <CDC_Control_FS+0x130>
 80103ac:	a201      	add	r2, pc, #4	; (adr r2, 80103b4 <CDC_Control_FS+0x20>)
 80103ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103b2:	bf00      	nop
 80103b4:	080104c5 	.word	0x080104c5
 80103b8:	080104c5 	.word	0x080104c5
 80103bc:	080104c5 	.word	0x080104c5
 80103c0:	080104c5 	.word	0x080104c5
 80103c4:	080104c5 	.word	0x080104c5
 80103c8:	080104c5 	.word	0x080104c5
 80103cc:	080104c5 	.word	0x080104c5
 80103d0:	080104c5 	.word	0x080104c5
 80103d4:	080104c5 	.word	0x080104c5
 80103d8:	080104c5 	.word	0x080104c5
 80103dc:	080104c5 	.word	0x080104c5
 80103e0:	080104c5 	.word	0x080104c5
 80103e4:	080104c5 	.word	0x080104c5
 80103e8:	080104c5 	.word	0x080104c5
 80103ec:	080104c5 	.word	0x080104c5
 80103f0:	080104c5 	.word	0x080104c5
 80103f4:	080104c5 	.word	0x080104c5
 80103f8:	080104c5 	.word	0x080104c5
 80103fc:	080104c5 	.word	0x080104c5
 8010400:	080104c5 	.word	0x080104c5
 8010404:	080104c5 	.word	0x080104c5
 8010408:	080104c5 	.word	0x080104c5
 801040c:	080104c5 	.word	0x080104c5
 8010410:	080104c5 	.word	0x080104c5
 8010414:	080104c5 	.word	0x080104c5
 8010418:	080104c5 	.word	0x080104c5
 801041c:	080104c5 	.word	0x080104c5
 8010420:	080104c5 	.word	0x080104c5
 8010424:	080104c5 	.word	0x080104c5
 8010428:	080104c5 	.word	0x080104c5
 801042c:	080104c5 	.word	0x080104c5
 8010430:	080104c5 	.word	0x080104c5
 8010434:	08010445 	.word	0x08010445
 8010438:	0801047f 	.word	0x0801047f
 801043c:	080104c5 	.word	0x080104c5
 8010440:	080104c5 	.word	0x080104c5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	buf[0] = pbuf[0];
 8010444:	683b      	ldr	r3, [r7, #0]
 8010446:	781a      	ldrb	r2, [r3, #0]
 8010448:	4b22      	ldr	r3, [pc, #136]	; (80104d4 <CDC_Control_FS+0x140>)
 801044a:	701a      	strb	r2, [r3, #0]
    	buf[1] = pbuf[1];
 801044c:	683b      	ldr	r3, [r7, #0]
 801044e:	785a      	ldrb	r2, [r3, #1]
 8010450:	4b20      	ldr	r3, [pc, #128]	; (80104d4 <CDC_Control_FS+0x140>)
 8010452:	705a      	strb	r2, [r3, #1]
    	buf[2] = pbuf[2];
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	789a      	ldrb	r2, [r3, #2]
 8010458:	4b1e      	ldr	r3, [pc, #120]	; (80104d4 <CDC_Control_FS+0x140>)
 801045a:	709a      	strb	r2, [r3, #2]
    	buf[3] = pbuf[3];
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	78da      	ldrb	r2, [r3, #3]
 8010460:	4b1c      	ldr	r3, [pc, #112]	; (80104d4 <CDC_Control_FS+0x140>)
 8010462:	70da      	strb	r2, [r3, #3]
    	buf[4] = pbuf[4];
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	791a      	ldrb	r2, [r3, #4]
 8010468:	4b1a      	ldr	r3, [pc, #104]	; (80104d4 <CDC_Control_FS+0x140>)
 801046a:	711a      	strb	r2, [r3, #4]
    	buf[5] = pbuf[5];
 801046c:	683b      	ldr	r3, [r7, #0]
 801046e:	795a      	ldrb	r2, [r3, #5]
 8010470:	4b18      	ldr	r3, [pc, #96]	; (80104d4 <CDC_Control_FS+0x140>)
 8010472:	715a      	strb	r2, [r3, #5]
    	buf[6] = pbuf[6];
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	799a      	ldrb	r2, [r3, #6]
 8010478:	4b16      	ldr	r3, [pc, #88]	; (80104d4 <CDC_Control_FS+0x140>)
 801047a:	719a      	strb	r2, [r3, #6]


    break;
 801047c:	e023      	b.n	80104c6 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = buf[0];
 801047e:	4b15      	ldr	r3, [pc, #84]	; (80104d4 <CDC_Control_FS+0x140>)
 8010480:	781a      	ldrb	r2, [r3, #0]
 8010482:	683b      	ldr	r3, [r7, #0]
 8010484:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = buf[1];
 8010486:	683b      	ldr	r3, [r7, #0]
 8010488:	3301      	adds	r3, #1
 801048a:	4a12      	ldr	r2, [pc, #72]	; (80104d4 <CDC_Control_FS+0x140>)
 801048c:	7852      	ldrb	r2, [r2, #1]
 801048e:	701a      	strb	r2, [r3, #0]
     	pbuf[2] = buf[2];
 8010490:	683b      	ldr	r3, [r7, #0]
 8010492:	3302      	adds	r3, #2
 8010494:	4a0f      	ldr	r2, [pc, #60]	; (80104d4 <CDC_Control_FS+0x140>)
 8010496:	7892      	ldrb	r2, [r2, #2]
 8010498:	701a      	strb	r2, [r3, #0]
      	pbuf[3] = buf[3];
 801049a:	683b      	ldr	r3, [r7, #0]
 801049c:	3303      	adds	r3, #3
 801049e:	4a0d      	ldr	r2, [pc, #52]	; (80104d4 <CDC_Control_FS+0x140>)
 80104a0:	78d2      	ldrb	r2, [r2, #3]
 80104a2:	701a      	strb	r2, [r3, #0]
      	pbuf[4] = buf[4];
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	3304      	adds	r3, #4
 80104a8:	4a0a      	ldr	r2, [pc, #40]	; (80104d4 <CDC_Control_FS+0x140>)
 80104aa:	7912      	ldrb	r2, [r2, #4]
 80104ac:	701a      	strb	r2, [r3, #0]
       	pbuf[5] = buf[5];
 80104ae:	683b      	ldr	r3, [r7, #0]
 80104b0:	3305      	adds	r3, #5
 80104b2:	4a08      	ldr	r2, [pc, #32]	; (80104d4 <CDC_Control_FS+0x140>)
 80104b4:	7952      	ldrb	r2, [r2, #5]
 80104b6:	701a      	strb	r2, [r3, #0]
       	pbuf[6] = buf[6];
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	3306      	adds	r3, #6
 80104bc:	4a05      	ldr	r2, [pc, #20]	; (80104d4 <CDC_Control_FS+0x140>)
 80104be:	7992      	ldrb	r2, [r2, #6]
 80104c0:	701a      	strb	r2, [r3, #0]
    break;
 80104c2:	e000      	b.n	80104c6 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80104c4:	bf00      	nop
  }

  return (USBD_OK);
 80104c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80104c8:	4618      	mov	r0, r3
 80104ca:	370c      	adds	r7, #12
 80104cc:	46bd      	mov	sp, r7
 80104ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d2:	4770      	bx	lr
 80104d4:	24004050 	.word	0x24004050

080104d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b082      	sub	sp, #8
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
 80104e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80104e2:	6879      	ldr	r1, [r7, #4]
 80104e4:	4810      	ldr	r0, [pc, #64]	; (8010528 <CDC_Receive_FS+0x50>)
 80104e6:	f7fe fb7b 	bl	800ebe0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80104ea:	480f      	ldr	r0, [pc, #60]	; (8010528 <CDC_Receive_FS+0x50>)
 80104ec:	f7fe fbdc 	bl	800eca8 <USBD_CDC_ReceivePacket>

  memset(input_buffer, 0, APP_RX_DATA_SIZE);
 80104f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80104f4:	2100      	movs	r1, #0
 80104f6:	480d      	ldr	r0, [pc, #52]	; (801052c <CDC_Receive_FS+0x54>)
 80104f8:	f000 fcfe 	bl	8010ef8 <memset>
  memcpy(input_buffer, Buf, *Len);
 80104fc:	683b      	ldr	r3, [r7, #0]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	461a      	mov	r2, r3
 8010502:	6879      	ldr	r1, [r7, #4]
 8010504:	4809      	ldr	r0, [pc, #36]	; (801052c <CDC_Receive_FS+0x54>)
 8010506:	f000 fce9 	bl	8010edc <memcpy>
  memset(Buf, 0, *Len);
 801050a:	683b      	ldr	r3, [r7, #0]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	461a      	mov	r2, r3
 8010510:	2100      	movs	r1, #0
 8010512:	6878      	ldr	r0, [r7, #4]
 8010514:	f000 fcf0 	bl	8010ef8 <memset>

  data_received();
 8010518:	f7f0 fe12 	bl	8001140 <data_received>

  return (USBD_OK);
 801051c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801051e:	4618      	mov	r0, r3
 8010520:	3708      	adds	r7, #8
 8010522:	46bd      	mov	sp, r7
 8010524:	bd80      	pop	{r7, pc}
 8010526:	bf00      	nop
 8010528:	24003d74 	.word	0x24003d74
 801052c:	24003564 	.word	0x24003564

08010530 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b084      	sub	sp, #16
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
 8010538:	460b      	mov	r3, r1
 801053a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801053c:	2300      	movs	r3, #0
 801053e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010540:	4b0d      	ldr	r3, [pc, #52]	; (8010578 <CDC_Transmit_FS+0x48>)
 8010542:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010546:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010548:	68bb      	ldr	r3, [r7, #8]
 801054a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801054e:	2b00      	cmp	r3, #0
 8010550:	d001      	beq.n	8010556 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8010552:	2301      	movs	r3, #1
 8010554:	e00b      	b.n	801056e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010556:	887b      	ldrh	r3, [r7, #2]
 8010558:	461a      	mov	r2, r3
 801055a:	6879      	ldr	r1, [r7, #4]
 801055c:	4806      	ldr	r0, [pc, #24]	; (8010578 <CDC_Transmit_FS+0x48>)
 801055e:	f7fe fb1d 	bl	800eb9c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010562:	4805      	ldr	r0, [pc, #20]	; (8010578 <CDC_Transmit_FS+0x48>)
 8010564:	f7fe fb5a 	bl	800ec1c <USBD_CDC_TransmitPacket>
 8010568:	4603      	mov	r3, r0
 801056a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801056c:	7bfb      	ldrb	r3, [r7, #15]
}
 801056e:	4618      	mov	r0, r3
 8010570:	3710      	adds	r7, #16
 8010572:	46bd      	mov	sp, r7
 8010574:	bd80      	pop	{r7, pc}
 8010576:	bf00      	nop
 8010578:	24003d74 	.word	0x24003d74

0801057c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801057c:	b580      	push	{r7, lr}
 801057e:	b086      	sub	sp, #24
 8010580:	af00      	add	r7, sp, #0
 8010582:	60f8      	str	r0, [r7, #12]
 8010584:	60b9      	str	r1, [r7, #8]
 8010586:	4613      	mov	r3, r2
 8010588:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801058a:	2300      	movs	r3, #0
 801058c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  HAL_GPIO_TogglePin(Sendeng_done_GPIO_Port,Sendeng_done_Pin);
 801058e:	2140      	movs	r1, #64	; 0x40
 8010590:	4806      	ldr	r0, [pc, #24]	; (80105ac <CDC_TransmitCplt_FS+0x30>)
 8010592:	f7f5 fce0 	bl	8005f56 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(Sending2_GPIO_Port, Sending2_Pin);
 8010596:	2120      	movs	r1, #32
 8010598:	4804      	ldr	r0, [pc, #16]	; (80105ac <CDC_TransmitCplt_FS+0x30>)
 801059a:	f7f5 fcdc 	bl	8005f56 <HAL_GPIO_TogglePin>
  /* USER CODE END 13 */
  return result;
 801059e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80105a2:	4618      	mov	r0, r3
 80105a4:	3718      	adds	r7, #24
 80105a6:	46bd      	mov	sp, r7
 80105a8:	bd80      	pop	{r7, pc}
 80105aa:	bf00      	nop
 80105ac:	58020c00 	.word	0x58020c00

080105b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80105b0:	b480      	push	{r7}
 80105b2:	b083      	sub	sp, #12
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	4603      	mov	r3, r0
 80105b8:	6039      	str	r1, [r7, #0]
 80105ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	2212      	movs	r2, #18
 80105c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80105c2:	4b03      	ldr	r3, [pc, #12]	; (80105d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80105c4:	4618      	mov	r0, r3
 80105c6:	370c      	adds	r7, #12
 80105c8:	46bd      	mov	sp, r7
 80105ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ce:	4770      	bx	lr
 80105d0:	240000cc 	.word	0x240000cc

080105d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80105d4:	b480      	push	{r7}
 80105d6:	b083      	sub	sp, #12
 80105d8:	af00      	add	r7, sp, #0
 80105da:	4603      	mov	r3, r0
 80105dc:	6039      	str	r1, [r7, #0]
 80105de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80105e0:	683b      	ldr	r3, [r7, #0]
 80105e2:	2204      	movs	r2, #4
 80105e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80105e6:	4b03      	ldr	r3, [pc, #12]	; (80105f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80105e8:	4618      	mov	r0, r3
 80105ea:	370c      	adds	r7, #12
 80105ec:	46bd      	mov	sp, r7
 80105ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f2:	4770      	bx	lr
 80105f4:	240000e0 	.word	0x240000e0

080105f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b082      	sub	sp, #8
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	4603      	mov	r3, r0
 8010600:	6039      	str	r1, [r7, #0]
 8010602:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010604:	79fb      	ldrb	r3, [r7, #7]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d105      	bne.n	8010616 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801060a:	683a      	ldr	r2, [r7, #0]
 801060c:	4907      	ldr	r1, [pc, #28]	; (801062c <USBD_FS_ProductStrDescriptor+0x34>)
 801060e:	4808      	ldr	r0, [pc, #32]	; (8010630 <USBD_FS_ProductStrDescriptor+0x38>)
 8010610:	f7ff fd92 	bl	8010138 <USBD_GetString>
 8010614:	e004      	b.n	8010620 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010616:	683a      	ldr	r2, [r7, #0]
 8010618:	4904      	ldr	r1, [pc, #16]	; (801062c <USBD_FS_ProductStrDescriptor+0x34>)
 801061a:	4805      	ldr	r0, [pc, #20]	; (8010630 <USBD_FS_ProductStrDescriptor+0x38>)
 801061c:	f7ff fd8c 	bl	8010138 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010620:	4b02      	ldr	r3, [pc, #8]	; (801062c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010622:	4618      	mov	r0, r3
 8010624:	3708      	adds	r7, #8
 8010626:	46bd      	mov	sp, r7
 8010628:	bd80      	pop	{r7, pc}
 801062a:	bf00      	nop
 801062c:	24005058 	.word	0x24005058
 8010630:	08011084 	.word	0x08011084

08010634 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010634:	b580      	push	{r7, lr}
 8010636:	b082      	sub	sp, #8
 8010638:	af00      	add	r7, sp, #0
 801063a:	4603      	mov	r3, r0
 801063c:	6039      	str	r1, [r7, #0]
 801063e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010640:	683a      	ldr	r2, [r7, #0]
 8010642:	4904      	ldr	r1, [pc, #16]	; (8010654 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010644:	4804      	ldr	r0, [pc, #16]	; (8010658 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010646:	f7ff fd77 	bl	8010138 <USBD_GetString>
  return USBD_StrDesc;
 801064a:	4b02      	ldr	r3, [pc, #8]	; (8010654 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801064c:	4618      	mov	r0, r3
 801064e:	3708      	adds	r7, #8
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}
 8010654:	24005058 	.word	0x24005058
 8010658:	0801109c 	.word	0x0801109c

0801065c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801065c:	b580      	push	{r7, lr}
 801065e:	b082      	sub	sp, #8
 8010660:	af00      	add	r7, sp, #0
 8010662:	4603      	mov	r3, r0
 8010664:	6039      	str	r1, [r7, #0]
 8010666:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010668:	683b      	ldr	r3, [r7, #0]
 801066a:	221a      	movs	r2, #26
 801066c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801066e:	f000 f843 	bl	80106f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010672:	4b02      	ldr	r3, [pc, #8]	; (801067c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010674:	4618      	mov	r0, r3
 8010676:	3708      	adds	r7, #8
 8010678:	46bd      	mov	sp, r7
 801067a:	bd80      	pop	{r7, pc}
 801067c:	240000e4 	.word	0x240000e4

08010680 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010680:	b580      	push	{r7, lr}
 8010682:	b082      	sub	sp, #8
 8010684:	af00      	add	r7, sp, #0
 8010686:	4603      	mov	r3, r0
 8010688:	6039      	str	r1, [r7, #0]
 801068a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801068c:	79fb      	ldrb	r3, [r7, #7]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d105      	bne.n	801069e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010692:	683a      	ldr	r2, [r7, #0]
 8010694:	4907      	ldr	r1, [pc, #28]	; (80106b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010696:	4808      	ldr	r0, [pc, #32]	; (80106b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010698:	f7ff fd4e 	bl	8010138 <USBD_GetString>
 801069c:	e004      	b.n	80106a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801069e:	683a      	ldr	r2, [r7, #0]
 80106a0:	4904      	ldr	r1, [pc, #16]	; (80106b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80106a2:	4805      	ldr	r0, [pc, #20]	; (80106b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80106a4:	f7ff fd48 	bl	8010138 <USBD_GetString>
  }
  return USBD_StrDesc;
 80106a8:	4b02      	ldr	r3, [pc, #8]	; (80106b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80106aa:	4618      	mov	r0, r3
 80106ac:	3708      	adds	r7, #8
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bd80      	pop	{r7, pc}
 80106b2:	bf00      	nop
 80106b4:	24005058 	.word	0x24005058
 80106b8:	080110b0 	.word	0x080110b0

080106bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	b082      	sub	sp, #8
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	4603      	mov	r3, r0
 80106c4:	6039      	str	r1, [r7, #0]
 80106c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80106c8:	79fb      	ldrb	r3, [r7, #7]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d105      	bne.n	80106da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80106ce:	683a      	ldr	r2, [r7, #0]
 80106d0:	4907      	ldr	r1, [pc, #28]	; (80106f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80106d2:	4808      	ldr	r0, [pc, #32]	; (80106f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80106d4:	f7ff fd30 	bl	8010138 <USBD_GetString>
 80106d8:	e004      	b.n	80106e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80106da:	683a      	ldr	r2, [r7, #0]
 80106dc:	4904      	ldr	r1, [pc, #16]	; (80106f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80106de:	4805      	ldr	r0, [pc, #20]	; (80106f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80106e0:	f7ff fd2a 	bl	8010138 <USBD_GetString>
  }
  return USBD_StrDesc;
 80106e4:	4b02      	ldr	r3, [pc, #8]	; (80106f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80106e6:	4618      	mov	r0, r3
 80106e8:	3708      	adds	r7, #8
 80106ea:	46bd      	mov	sp, r7
 80106ec:	bd80      	pop	{r7, pc}
 80106ee:	bf00      	nop
 80106f0:	24005058 	.word	0x24005058
 80106f4:	080110bc 	.word	0x080110bc

080106f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b084      	sub	sp, #16
 80106fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80106fe:	4b0f      	ldr	r3, [pc, #60]	; (801073c <Get_SerialNum+0x44>)
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010704:	4b0e      	ldr	r3, [pc, #56]	; (8010740 <Get_SerialNum+0x48>)
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801070a:	4b0e      	ldr	r3, [pc, #56]	; (8010744 <Get_SerialNum+0x4c>)
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010710:	68fa      	ldr	r2, [r7, #12]
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	4413      	add	r3, r2
 8010716:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d009      	beq.n	8010732 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801071e:	2208      	movs	r2, #8
 8010720:	4909      	ldr	r1, [pc, #36]	; (8010748 <Get_SerialNum+0x50>)
 8010722:	68f8      	ldr	r0, [r7, #12]
 8010724:	f000 f814 	bl	8010750 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010728:	2204      	movs	r2, #4
 801072a:	4908      	ldr	r1, [pc, #32]	; (801074c <Get_SerialNum+0x54>)
 801072c:	68b8      	ldr	r0, [r7, #8]
 801072e:	f000 f80f 	bl	8010750 <IntToUnicode>
  }
}
 8010732:	bf00      	nop
 8010734:	3710      	adds	r7, #16
 8010736:	46bd      	mov	sp, r7
 8010738:	bd80      	pop	{r7, pc}
 801073a:	bf00      	nop
 801073c:	1ff1e800 	.word	0x1ff1e800
 8010740:	1ff1e804 	.word	0x1ff1e804
 8010744:	1ff1e808 	.word	0x1ff1e808
 8010748:	240000e6 	.word	0x240000e6
 801074c:	240000f6 	.word	0x240000f6

08010750 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010750:	b480      	push	{r7}
 8010752:	b087      	sub	sp, #28
 8010754:	af00      	add	r7, sp, #0
 8010756:	60f8      	str	r0, [r7, #12]
 8010758:	60b9      	str	r1, [r7, #8]
 801075a:	4613      	mov	r3, r2
 801075c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801075e:	2300      	movs	r3, #0
 8010760:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010762:	2300      	movs	r3, #0
 8010764:	75fb      	strb	r3, [r7, #23]
 8010766:	e027      	b.n	80107b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	0f1b      	lsrs	r3, r3, #28
 801076c:	2b09      	cmp	r3, #9
 801076e:	d80b      	bhi.n	8010788 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	0f1b      	lsrs	r3, r3, #28
 8010774:	b2da      	uxtb	r2, r3
 8010776:	7dfb      	ldrb	r3, [r7, #23]
 8010778:	005b      	lsls	r3, r3, #1
 801077a:	4619      	mov	r1, r3
 801077c:	68bb      	ldr	r3, [r7, #8]
 801077e:	440b      	add	r3, r1
 8010780:	3230      	adds	r2, #48	; 0x30
 8010782:	b2d2      	uxtb	r2, r2
 8010784:	701a      	strb	r2, [r3, #0]
 8010786:	e00a      	b.n	801079e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	0f1b      	lsrs	r3, r3, #28
 801078c:	b2da      	uxtb	r2, r3
 801078e:	7dfb      	ldrb	r3, [r7, #23]
 8010790:	005b      	lsls	r3, r3, #1
 8010792:	4619      	mov	r1, r3
 8010794:	68bb      	ldr	r3, [r7, #8]
 8010796:	440b      	add	r3, r1
 8010798:	3237      	adds	r2, #55	; 0x37
 801079a:	b2d2      	uxtb	r2, r2
 801079c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	011b      	lsls	r3, r3, #4
 80107a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80107a4:	7dfb      	ldrb	r3, [r7, #23]
 80107a6:	005b      	lsls	r3, r3, #1
 80107a8:	3301      	adds	r3, #1
 80107aa:	68ba      	ldr	r2, [r7, #8]
 80107ac:	4413      	add	r3, r2
 80107ae:	2200      	movs	r2, #0
 80107b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80107b2:	7dfb      	ldrb	r3, [r7, #23]
 80107b4:	3301      	adds	r3, #1
 80107b6:	75fb      	strb	r3, [r7, #23]
 80107b8:	7dfa      	ldrb	r2, [r7, #23]
 80107ba:	79fb      	ldrb	r3, [r7, #7]
 80107bc:	429a      	cmp	r2, r3
 80107be:	d3d3      	bcc.n	8010768 <IntToUnicode+0x18>
  }
}
 80107c0:	bf00      	nop
 80107c2:	bf00      	nop
 80107c4:	371c      	adds	r7, #28
 80107c6:	46bd      	mov	sp, r7
 80107c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107cc:	4770      	bx	lr
	...

080107d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b0b8      	sub	sp, #224	; 0xe0
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80107d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80107dc:	2200      	movs	r2, #0
 80107de:	601a      	str	r2, [r3, #0]
 80107e0:	605a      	str	r2, [r3, #4]
 80107e2:	609a      	str	r2, [r3, #8]
 80107e4:	60da      	str	r2, [r3, #12]
 80107e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80107e8:	f107 0310 	add.w	r3, r7, #16
 80107ec:	22bc      	movs	r2, #188	; 0xbc
 80107ee:	2100      	movs	r1, #0
 80107f0:	4618      	mov	r0, r3
 80107f2:	f000 fb81 	bl	8010ef8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	4a3a      	ldr	r2, [pc, #232]	; (80108e4 <HAL_PCD_MspInit+0x114>)
 80107fc:	4293      	cmp	r3, r2
 80107fe:	d16d      	bne.n	80108dc <HAL_PCD_MspInit+0x10c>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010800:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010804:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8010806:	2301      	movs	r3, #1
 8010808:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 60;
 801080a:	233c      	movs	r3, #60	; 0x3c
 801080c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 801080e:	2302      	movs	r3, #2
 8010810:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 10;
 8010812:	230a      	movs	r3, #10
 8010814:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8010816:	2302      	movs	r3, #2
 8010818:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 801081a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 801081e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8010820:	2300      	movs	r3, #0
 8010822:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8010824:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010828:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801082c:	f107 0310 	add.w	r3, r7, #16
 8010830:	4618      	mov	r0, r3
 8010832:	f7f7 ff3d 	bl	80086b0 <HAL_RCCEx_PeriphCLKConfig>
 8010836:	4603      	mov	r3, r0
 8010838:	2b00      	cmp	r3, #0
 801083a:	d001      	beq.n	8010840 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 801083c:	f7f0 fd4a 	bl	80012d4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8010840:	f7f6 ff02 	bl	8007648 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010844:	4b28      	ldr	r3, [pc, #160]	; (80108e8 <HAL_PCD_MspInit+0x118>)
 8010846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801084a:	4a27      	ldr	r2, [pc, #156]	; (80108e8 <HAL_PCD_MspInit+0x118>)
 801084c:	f043 0301 	orr.w	r3, r3, #1
 8010850:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010854:	4b24      	ldr	r3, [pc, #144]	; (80108e8 <HAL_PCD_MspInit+0x118>)
 8010856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801085a:	f003 0301 	and.w	r3, r3, #1
 801085e:	60fb      	str	r3, [r7, #12]
 8010860:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA8     ------> USB_OTG_FS_SOF
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8010862:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8010866:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801086a:	2302      	movs	r3, #2
 801086c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010870:	2300      	movs	r3, #0
 8010872:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010876:	2300      	movs	r3, #0
 8010878:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801087c:	230a      	movs	r3, #10
 801087e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010882:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8010886:	4619      	mov	r1, r3
 8010888:	4818      	ldr	r0, [pc, #96]	; (80108ec <HAL_PCD_MspInit+0x11c>)
 801088a:	f7f5 f983 	bl	8005b94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801088e:	4b16      	ldr	r3, [pc, #88]	; (80108e8 <HAL_PCD_MspInit+0x118>)
 8010890:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010894:	4a14      	ldr	r2, [pc, #80]	; (80108e8 <HAL_PCD_MspInit+0x118>)
 8010896:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801089a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801089e:	4b12      	ldr	r3, [pc, #72]	; (80108e8 <HAL_PCD_MspInit+0x118>)
 80108a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80108a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80108a8:	60bb      	str	r3, [r7, #8]
 80108aa:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 80108ac:	2200      	movs	r2, #0
 80108ae:	2100      	movs	r1, #0
 80108b0:	2062      	movs	r0, #98	; 0x62
 80108b2:	f7f3 f862 	bl	800397a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 80108b6:	2062      	movs	r0, #98	; 0x62
 80108b8:	f7f3 f879 	bl	80039ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_EP1_IN_IRQn, 0, 0);
 80108bc:	2200      	movs	r2, #0
 80108be:	2100      	movs	r1, #0
 80108c0:	2063      	movs	r0, #99	; 0x63
 80108c2:	f7f3 f85a 	bl	800397a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_IN_IRQn);
 80108c6:	2063      	movs	r0, #99	; 0x63
 80108c8:	f7f3 f871 	bl	80039ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80108cc:	2200      	movs	r2, #0
 80108ce:	2100      	movs	r1, #0
 80108d0:	2065      	movs	r0, #101	; 0x65
 80108d2:	f7f3 f852 	bl	800397a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80108d6:	2065      	movs	r0, #101	; 0x65
 80108d8:	f7f3 f869 	bl	80039ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80108dc:	bf00      	nop
 80108de:	37e0      	adds	r7, #224	; 0xe0
 80108e0:	46bd      	mov	sp, r7
 80108e2:	bd80      	pop	{r7, pc}
 80108e4:	40080000 	.word	0x40080000
 80108e8:	58024400 	.word	0x58024400
 80108ec:	58020000 	.word	0x58020000

080108f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108f0:	b580      	push	{r7, lr}
 80108f2:	b082      	sub	sp, #8
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010904:	4619      	mov	r1, r3
 8010906:	4610      	mov	r0, r2
 8010908:	f7fe fab7 	bl	800ee7a <USBD_LL_SetupStage>
}
 801090c:	bf00      	nop
 801090e:	3708      	adds	r7, #8
 8010910:	46bd      	mov	sp, r7
 8010912:	bd80      	pop	{r7, pc}

08010914 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b082      	sub	sp, #8
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
 801091c:	460b      	mov	r3, r1
 801091e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010926:	78fa      	ldrb	r2, [r7, #3]
 8010928:	6879      	ldr	r1, [r7, #4]
 801092a:	4613      	mov	r3, r2
 801092c:	00db      	lsls	r3, r3, #3
 801092e:	4413      	add	r3, r2
 8010930:	009b      	lsls	r3, r3, #2
 8010932:	440b      	add	r3, r1
 8010934:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010938:	681a      	ldr	r2, [r3, #0]
 801093a:	78fb      	ldrb	r3, [r7, #3]
 801093c:	4619      	mov	r1, r3
 801093e:	f7fe faf1 	bl	800ef24 <USBD_LL_DataOutStage>
}
 8010942:	bf00      	nop
 8010944:	3708      	adds	r7, #8
 8010946:	46bd      	mov	sp, r7
 8010948:	bd80      	pop	{r7, pc}

0801094a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801094a:	b580      	push	{r7, lr}
 801094c:	b082      	sub	sp, #8
 801094e:	af00      	add	r7, sp, #0
 8010950:	6078      	str	r0, [r7, #4]
 8010952:	460b      	mov	r3, r1
 8010954:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801095c:	78fa      	ldrb	r2, [r7, #3]
 801095e:	6879      	ldr	r1, [r7, #4]
 8010960:	4613      	mov	r3, r2
 8010962:	00db      	lsls	r3, r3, #3
 8010964:	4413      	add	r3, r2
 8010966:	009b      	lsls	r3, r3, #2
 8010968:	440b      	add	r3, r1
 801096a:	334c      	adds	r3, #76	; 0x4c
 801096c:	681a      	ldr	r2, [r3, #0]
 801096e:	78fb      	ldrb	r3, [r7, #3]
 8010970:	4619      	mov	r1, r3
 8010972:	f7fe fb8a 	bl	800f08a <USBD_LL_DataInStage>
}
 8010976:	bf00      	nop
 8010978:	3708      	adds	r7, #8
 801097a:	46bd      	mov	sp, r7
 801097c:	bd80      	pop	{r7, pc}

0801097e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801097e:	b580      	push	{r7, lr}
 8010980:	b082      	sub	sp, #8
 8010982:	af00      	add	r7, sp, #0
 8010984:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801098c:	4618      	mov	r0, r3
 801098e:	f7fe fcbe 	bl	800f30e <USBD_LL_SOF>
}
 8010992:	bf00      	nop
 8010994:	3708      	adds	r7, #8
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}

0801099a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801099a:	b580      	push	{r7, lr}
 801099c:	b084      	sub	sp, #16
 801099e:	af00      	add	r7, sp, #0
 80109a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80109a2:	2301      	movs	r3, #1
 80109a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	68db      	ldr	r3, [r3, #12]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d102      	bne.n	80109b4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80109ae:	2300      	movs	r3, #0
 80109b0:	73fb      	strb	r3, [r7, #15]
 80109b2:	e008      	b.n	80109c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	68db      	ldr	r3, [r3, #12]
 80109b8:	2b02      	cmp	r3, #2
 80109ba:	d102      	bne.n	80109c2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80109bc:	2301      	movs	r3, #1
 80109be:	73fb      	strb	r3, [r7, #15]
 80109c0:	e001      	b.n	80109c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80109c2:	f7f0 fc87 	bl	80012d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80109cc:	7bfa      	ldrb	r2, [r7, #15]
 80109ce:	4611      	mov	r1, r2
 80109d0:	4618      	mov	r0, r3
 80109d2:	f7fe fc5e 	bl	800f292 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80109dc:	4618      	mov	r0, r3
 80109de:	f7fe fc06 	bl	800f1ee <USBD_LL_Reset>
}
 80109e2:	bf00      	nop
 80109e4:	3710      	adds	r7, #16
 80109e6:	46bd      	mov	sp, r7
 80109e8:	bd80      	pop	{r7, pc}
	...

080109ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b082      	sub	sp, #8
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80109fa:	4618      	mov	r0, r3
 80109fc:	f7fe fc59 	bl	800f2b2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	687a      	ldr	r2, [r7, #4]
 8010a0c:	6812      	ldr	r2, [r2, #0]
 8010a0e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010a12:	f043 0301 	orr.w	r3, r3, #1
 8010a16:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	6a1b      	ldr	r3, [r3, #32]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d005      	beq.n	8010a2c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010a20:	4b04      	ldr	r3, [pc, #16]	; (8010a34 <HAL_PCD_SuspendCallback+0x48>)
 8010a22:	691b      	ldr	r3, [r3, #16]
 8010a24:	4a03      	ldr	r2, [pc, #12]	; (8010a34 <HAL_PCD_SuspendCallback+0x48>)
 8010a26:	f043 0306 	orr.w	r3, r3, #6
 8010a2a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010a2c:	bf00      	nop
 8010a2e:	3708      	adds	r7, #8
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bd80      	pop	{r7, pc}
 8010a34:	e000ed00 	.word	0xe000ed00

08010a38 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b082      	sub	sp, #8
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010a46:	4618      	mov	r0, r3
 8010a48:	f7fe fc49 	bl	800f2de <USBD_LL_Resume>
}
 8010a4c:	bf00      	nop
 8010a4e:	3708      	adds	r7, #8
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bd80      	pop	{r7, pc}

08010a54 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b082      	sub	sp, #8
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
 8010a5c:	460b      	mov	r3, r1
 8010a5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010a66:	78fa      	ldrb	r2, [r7, #3]
 8010a68:	4611      	mov	r1, r2
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	f7fe fca1 	bl	800f3b2 <USBD_LL_IsoOUTIncomplete>
}
 8010a70:	bf00      	nop
 8010a72:	3708      	adds	r7, #8
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bd80      	pop	{r7, pc}

08010a78 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b082      	sub	sp, #8
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
 8010a80:	460b      	mov	r3, r1
 8010a82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010a8a:	78fa      	ldrb	r2, [r7, #3]
 8010a8c:	4611      	mov	r1, r2
 8010a8e:	4618      	mov	r0, r3
 8010a90:	f7fe fc5d 	bl	800f34e <USBD_LL_IsoINIncomplete>
}
 8010a94:	bf00      	nop
 8010a96:	3708      	adds	r7, #8
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd80      	pop	{r7, pc}

08010a9c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b082      	sub	sp, #8
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010aaa:	4618      	mov	r0, r3
 8010aac:	f7fe fcb3 	bl	800f416 <USBD_LL_DevConnected>
}
 8010ab0:	bf00      	nop
 8010ab2:	3708      	adds	r7, #8
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bd80      	pop	{r7, pc}

08010ab8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b082      	sub	sp, #8
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	f7fe fcb0 	bl	800f42c <USBD_LL_DevDisconnected>
}
 8010acc:	bf00      	nop
 8010ace:	3708      	adds	r7, #8
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	bd80      	pop	{r7, pc}

08010ad4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b082      	sub	sp, #8
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	781b      	ldrb	r3, [r3, #0]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d13e      	bne.n	8010b62 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010ae4:	4a21      	ldr	r2, [pc, #132]	; (8010b6c <USBD_LL_Init+0x98>)
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	4a1f      	ldr	r2, [pc, #124]	; (8010b6c <USBD_LL_Init+0x98>)
 8010af0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010af4:	4b1d      	ldr	r3, [pc, #116]	; (8010b6c <USBD_LL_Init+0x98>)
 8010af6:	4a1e      	ldr	r2, [pc, #120]	; (8010b70 <USBD_LL_Init+0x9c>)
 8010af8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8010afa:	4b1c      	ldr	r3, [pc, #112]	; (8010b6c <USBD_LL_Init+0x98>)
 8010afc:	2209      	movs	r2, #9
 8010afe:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010b00:	4b1a      	ldr	r3, [pc, #104]	; (8010b6c <USBD_LL_Init+0x98>)
 8010b02:	2202      	movs	r2, #2
 8010b04:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010b06:	4b19      	ldr	r3, [pc, #100]	; (8010b6c <USBD_LL_Init+0x98>)
 8010b08:	2200      	movs	r2, #0
 8010b0a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010b0c:	4b17      	ldr	r3, [pc, #92]	; (8010b6c <USBD_LL_Init+0x98>)
 8010b0e:	2202      	movs	r2, #2
 8010b10:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010b12:	4b16      	ldr	r3, [pc, #88]	; (8010b6c <USBD_LL_Init+0x98>)
 8010b14:	2200      	movs	r2, #0
 8010b16:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010b18:	4b14      	ldr	r3, [pc, #80]	; (8010b6c <USBD_LL_Init+0x98>)
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010b1e:	4b13      	ldr	r3, [pc, #76]	; (8010b6c <USBD_LL_Init+0x98>)
 8010b20:	2200      	movs	r2, #0
 8010b22:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8010b24:	4b11      	ldr	r3, [pc, #68]	; (8010b6c <USBD_LL_Init+0x98>)
 8010b26:	2200      	movs	r2, #0
 8010b28:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010b2a:	4b10      	ldr	r3, [pc, #64]	; (8010b6c <USBD_LL_Init+0x98>)
 8010b2c:	2200      	movs	r2, #0
 8010b2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010b30:	4b0e      	ldr	r3, [pc, #56]	; (8010b6c <USBD_LL_Init+0x98>)
 8010b32:	2200      	movs	r2, #0
 8010b34:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010b36:	480d      	ldr	r0, [pc, #52]	; (8010b6c <USBD_LL_Init+0x98>)
 8010b38:	f7f5 fa56 	bl	8005fe8 <HAL_PCD_Init>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d001      	beq.n	8010b46 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8010b42:	f7f0 fbc7 	bl	80012d4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010b46:	2180      	movs	r1, #128	; 0x80
 8010b48:	4808      	ldr	r0, [pc, #32]	; (8010b6c <USBD_LL_Init+0x98>)
 8010b4a:	f7f6 fce2 	bl	8007512 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010b4e:	2240      	movs	r2, #64	; 0x40
 8010b50:	2100      	movs	r1, #0
 8010b52:	4806      	ldr	r0, [pc, #24]	; (8010b6c <USBD_LL_Init+0x98>)
 8010b54:	f7f6 fc96 	bl	8007484 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010b58:	2280      	movs	r2, #128	; 0x80
 8010b5a:	2101      	movs	r1, #1
 8010b5c:	4803      	ldr	r0, [pc, #12]	; (8010b6c <USBD_LL_Init+0x98>)
 8010b5e:	f7f6 fc91 	bl	8007484 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8010b62:	2300      	movs	r3, #0
}
 8010b64:	4618      	mov	r0, r3
 8010b66:	3708      	adds	r7, #8
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	bd80      	pop	{r7, pc}
 8010b6c:	24005258 	.word	0x24005258
 8010b70:	40080000 	.word	0x40080000

08010b74 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b084      	sub	sp, #16
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b80:	2300      	movs	r3, #0
 8010b82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	f7f5 fb50 	bl	8006230 <HAL_PCD_Start>
 8010b90:	4603      	mov	r3, r0
 8010b92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b94:	7bfb      	ldrb	r3, [r7, #15]
 8010b96:	4618      	mov	r0, r3
 8010b98:	f000 f942 	bl	8010e20 <USBD_Get_USB_Status>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ba0:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	3710      	adds	r7, #16
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd80      	pop	{r7, pc}

08010baa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010baa:	b580      	push	{r7, lr}
 8010bac:	b084      	sub	sp, #16
 8010bae:	af00      	add	r7, sp, #0
 8010bb0:	6078      	str	r0, [r7, #4]
 8010bb2:	4608      	mov	r0, r1
 8010bb4:	4611      	mov	r1, r2
 8010bb6:	461a      	mov	r2, r3
 8010bb8:	4603      	mov	r3, r0
 8010bba:	70fb      	strb	r3, [r7, #3]
 8010bbc:	460b      	mov	r3, r1
 8010bbe:	70bb      	strb	r3, [r7, #2]
 8010bc0:	4613      	mov	r3, r2
 8010bc2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010bc8:	2300      	movs	r3, #0
 8010bca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010bd2:	78bb      	ldrb	r3, [r7, #2]
 8010bd4:	883a      	ldrh	r2, [r7, #0]
 8010bd6:	78f9      	ldrb	r1, [r7, #3]
 8010bd8:	f7f6 f84e 	bl	8006c78 <HAL_PCD_EP_Open>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010be0:	7bfb      	ldrb	r3, [r7, #15]
 8010be2:	4618      	mov	r0, r3
 8010be4:	f000 f91c 	bl	8010e20 <USBD_Get_USB_Status>
 8010be8:	4603      	mov	r3, r0
 8010bea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010bec:	7bbb      	ldrb	r3, [r7, #14]
}
 8010bee:	4618      	mov	r0, r3
 8010bf0:	3710      	adds	r7, #16
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	bd80      	pop	{r7, pc}

08010bf6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010bf6:	b580      	push	{r7, lr}
 8010bf8:	b084      	sub	sp, #16
 8010bfa:	af00      	add	r7, sp, #0
 8010bfc:	6078      	str	r0, [r7, #4]
 8010bfe:	460b      	mov	r3, r1
 8010c00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c02:	2300      	movs	r3, #0
 8010c04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c06:	2300      	movs	r3, #0
 8010c08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010c10:	78fa      	ldrb	r2, [r7, #3]
 8010c12:	4611      	mov	r1, r2
 8010c14:	4618      	mov	r0, r3
 8010c16:	f7f6 f897 	bl	8006d48 <HAL_PCD_EP_Close>
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c1e:	7bfb      	ldrb	r3, [r7, #15]
 8010c20:	4618      	mov	r0, r3
 8010c22:	f000 f8fd 	bl	8010e20 <USBD_Get_USB_Status>
 8010c26:	4603      	mov	r3, r0
 8010c28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	3710      	adds	r7, #16
 8010c30:	46bd      	mov	sp, r7
 8010c32:	bd80      	pop	{r7, pc}

08010c34 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b084      	sub	sp, #16
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
 8010c3c:	460b      	mov	r3, r1
 8010c3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c40:	2300      	movs	r3, #0
 8010c42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c44:	2300      	movs	r3, #0
 8010c46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010c4e:	78fa      	ldrb	r2, [r7, #3]
 8010c50:	4611      	mov	r1, r2
 8010c52:	4618      	mov	r0, r3
 8010c54:	f7f6 f96f 	bl	8006f36 <HAL_PCD_EP_SetStall>
 8010c58:	4603      	mov	r3, r0
 8010c5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c5c:	7bfb      	ldrb	r3, [r7, #15]
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f000 f8de 	bl	8010e20 <USBD_Get_USB_Status>
 8010c64:	4603      	mov	r3, r0
 8010c66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c68:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	3710      	adds	r7, #16
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	bd80      	pop	{r7, pc}

08010c72 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c72:	b580      	push	{r7, lr}
 8010c74:	b084      	sub	sp, #16
 8010c76:	af00      	add	r7, sp, #0
 8010c78:	6078      	str	r0, [r7, #4]
 8010c7a:	460b      	mov	r3, r1
 8010c7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c7e:	2300      	movs	r3, #0
 8010c80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c82:	2300      	movs	r3, #0
 8010c84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010c8c:	78fa      	ldrb	r2, [r7, #3]
 8010c8e:	4611      	mov	r1, r2
 8010c90:	4618      	mov	r0, r3
 8010c92:	f7f6 f9b4 	bl	8006ffe <HAL_PCD_EP_ClrStall>
 8010c96:	4603      	mov	r3, r0
 8010c98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c9a:	7bfb      	ldrb	r3, [r7, #15]
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	f000 f8bf 	bl	8010e20 <USBD_Get_USB_Status>
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ca6:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ca8:	4618      	mov	r0, r3
 8010caa:	3710      	adds	r7, #16
 8010cac:	46bd      	mov	sp, r7
 8010cae:	bd80      	pop	{r7, pc}

08010cb0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010cb0:	b480      	push	{r7}
 8010cb2:	b085      	sub	sp, #20
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
 8010cb8:	460b      	mov	r3, r1
 8010cba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010cc2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010cc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	da0b      	bge.n	8010ce4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010ccc:	78fb      	ldrb	r3, [r7, #3]
 8010cce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010cd2:	68f9      	ldr	r1, [r7, #12]
 8010cd4:	4613      	mov	r3, r2
 8010cd6:	00db      	lsls	r3, r3, #3
 8010cd8:	4413      	add	r3, r2
 8010cda:	009b      	lsls	r3, r3, #2
 8010cdc:	440b      	add	r3, r1
 8010cde:	333e      	adds	r3, #62	; 0x3e
 8010ce0:	781b      	ldrb	r3, [r3, #0]
 8010ce2:	e00b      	b.n	8010cfc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010ce4:	78fb      	ldrb	r3, [r7, #3]
 8010ce6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010cea:	68f9      	ldr	r1, [r7, #12]
 8010cec:	4613      	mov	r3, r2
 8010cee:	00db      	lsls	r3, r3, #3
 8010cf0:	4413      	add	r3, r2
 8010cf2:	009b      	lsls	r3, r3, #2
 8010cf4:	440b      	add	r3, r1
 8010cf6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8010cfa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	3714      	adds	r7, #20
 8010d00:	46bd      	mov	sp, r7
 8010d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d06:	4770      	bx	lr

08010d08 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b084      	sub	sp, #16
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	6078      	str	r0, [r7, #4]
 8010d10:	460b      	mov	r3, r1
 8010d12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d14:	2300      	movs	r3, #0
 8010d16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d18:	2300      	movs	r3, #0
 8010d1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010d22:	78fa      	ldrb	r2, [r7, #3]
 8010d24:	4611      	mov	r1, r2
 8010d26:	4618      	mov	r0, r3
 8010d28:	f7f5 ff81 	bl	8006c2e <HAL_PCD_SetAddress>
 8010d2c:	4603      	mov	r3, r0
 8010d2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010d30:	7bfb      	ldrb	r3, [r7, #15]
 8010d32:	4618      	mov	r0, r3
 8010d34:	f000 f874 	bl	8010e20 <USBD_Get_USB_Status>
 8010d38:	4603      	mov	r3, r0
 8010d3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010d3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010d3e:	4618      	mov	r0, r3
 8010d40:	3710      	adds	r7, #16
 8010d42:	46bd      	mov	sp, r7
 8010d44:	bd80      	pop	{r7, pc}

08010d46 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010d46:	b580      	push	{r7, lr}
 8010d48:	b086      	sub	sp, #24
 8010d4a:	af00      	add	r7, sp, #0
 8010d4c:	60f8      	str	r0, [r7, #12]
 8010d4e:	607a      	str	r2, [r7, #4]
 8010d50:	603b      	str	r3, [r7, #0]
 8010d52:	460b      	mov	r3, r1
 8010d54:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d56:	2300      	movs	r3, #0
 8010d58:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010d64:	7af9      	ldrb	r1, [r7, #11]
 8010d66:	683b      	ldr	r3, [r7, #0]
 8010d68:	687a      	ldr	r2, [r7, #4]
 8010d6a:	f7f6 f89a 	bl	8006ea2 <HAL_PCD_EP_Transmit>
 8010d6e:	4603      	mov	r3, r0
 8010d70:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010d72:	7dfb      	ldrb	r3, [r7, #23]
 8010d74:	4618      	mov	r0, r3
 8010d76:	f000 f853 	bl	8010e20 <USBD_Get_USB_Status>
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010d7e:	7dbb      	ldrb	r3, [r7, #22]
}
 8010d80:	4618      	mov	r0, r3
 8010d82:	3718      	adds	r7, #24
 8010d84:	46bd      	mov	sp, r7
 8010d86:	bd80      	pop	{r7, pc}

08010d88 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b086      	sub	sp, #24
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	60f8      	str	r0, [r7, #12]
 8010d90:	607a      	str	r2, [r7, #4]
 8010d92:	603b      	str	r3, [r7, #0]
 8010d94:	460b      	mov	r3, r1
 8010d96:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d98:	2300      	movs	r3, #0
 8010d9a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010da6:	7af9      	ldrb	r1, [r7, #11]
 8010da8:	683b      	ldr	r3, [r7, #0]
 8010daa:	687a      	ldr	r2, [r7, #4]
 8010dac:	f7f6 f816 	bl	8006ddc <HAL_PCD_EP_Receive>
 8010db0:	4603      	mov	r3, r0
 8010db2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010db4:	7dfb      	ldrb	r3, [r7, #23]
 8010db6:	4618      	mov	r0, r3
 8010db8:	f000 f832 	bl	8010e20 <USBD_Get_USB_Status>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010dc0:	7dbb      	ldrb	r3, [r7, #22]
}
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	3718      	adds	r7, #24
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	bd80      	pop	{r7, pc}

08010dca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010dca:	b580      	push	{r7, lr}
 8010dcc:	b082      	sub	sp, #8
 8010dce:	af00      	add	r7, sp, #0
 8010dd0:	6078      	str	r0, [r7, #4]
 8010dd2:	460b      	mov	r3, r1
 8010dd4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010ddc:	78fa      	ldrb	r2, [r7, #3]
 8010dde:	4611      	mov	r1, r2
 8010de0:	4618      	mov	r0, r3
 8010de2:	f7f6 f846 	bl	8006e72 <HAL_PCD_EP_GetRxCount>
 8010de6:	4603      	mov	r3, r0
}
 8010de8:	4618      	mov	r0, r3
 8010dea:	3708      	adds	r7, #8
 8010dec:	46bd      	mov	sp, r7
 8010dee:	bd80      	pop	{r7, pc}

08010df0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010df0:	b480      	push	{r7}
 8010df2:	b083      	sub	sp, #12
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010df8:	4b03      	ldr	r3, [pc, #12]	; (8010e08 <USBD_static_malloc+0x18>)
}
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	370c      	adds	r7, #12
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e04:	4770      	bx	lr
 8010e06:	bf00      	nop
 8010e08:	24005764 	.word	0x24005764

08010e0c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010e0c:	b480      	push	{r7}
 8010e0e:	b083      	sub	sp, #12
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]

}
 8010e14:	bf00      	nop
 8010e16:	370c      	adds	r7, #12
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1e:	4770      	bx	lr

08010e20 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010e20:	b480      	push	{r7}
 8010e22:	b085      	sub	sp, #20
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	4603      	mov	r3, r0
 8010e28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010e2e:	79fb      	ldrb	r3, [r7, #7]
 8010e30:	2b03      	cmp	r3, #3
 8010e32:	d817      	bhi.n	8010e64 <USBD_Get_USB_Status+0x44>
 8010e34:	a201      	add	r2, pc, #4	; (adr r2, 8010e3c <USBD_Get_USB_Status+0x1c>)
 8010e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e3a:	bf00      	nop
 8010e3c:	08010e4d 	.word	0x08010e4d
 8010e40:	08010e53 	.word	0x08010e53
 8010e44:	08010e59 	.word	0x08010e59
 8010e48:	08010e5f 	.word	0x08010e5f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	73fb      	strb	r3, [r7, #15]
    break;
 8010e50:	e00b      	b.n	8010e6a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010e52:	2303      	movs	r3, #3
 8010e54:	73fb      	strb	r3, [r7, #15]
    break;
 8010e56:	e008      	b.n	8010e6a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010e58:	2301      	movs	r3, #1
 8010e5a:	73fb      	strb	r3, [r7, #15]
    break;
 8010e5c:	e005      	b.n	8010e6a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010e5e:	2303      	movs	r3, #3
 8010e60:	73fb      	strb	r3, [r7, #15]
    break;
 8010e62:	e002      	b.n	8010e6a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010e64:	2303      	movs	r3, #3
 8010e66:	73fb      	strb	r3, [r7, #15]
    break;
 8010e68:	bf00      	nop
  }
  return usb_status;
 8010e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	3714      	adds	r7, #20
 8010e70:	46bd      	mov	sp, r7
 8010e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e76:	4770      	bx	lr

08010e78 <__errno>:
 8010e78:	4b01      	ldr	r3, [pc, #4]	; (8010e80 <__errno+0x8>)
 8010e7a:	6818      	ldr	r0, [r3, #0]
 8010e7c:	4770      	bx	lr
 8010e7e:	bf00      	nop
 8010e80:	24000100 	.word	0x24000100

08010e84 <__libc_init_array>:
 8010e84:	b570      	push	{r4, r5, r6, lr}
 8010e86:	4d0d      	ldr	r5, [pc, #52]	; (8010ebc <__libc_init_array+0x38>)
 8010e88:	4c0d      	ldr	r4, [pc, #52]	; (8010ec0 <__libc_init_array+0x3c>)
 8010e8a:	1b64      	subs	r4, r4, r5
 8010e8c:	10a4      	asrs	r4, r4, #2
 8010e8e:	2600      	movs	r6, #0
 8010e90:	42a6      	cmp	r6, r4
 8010e92:	d109      	bne.n	8010ea8 <__libc_init_array+0x24>
 8010e94:	4d0b      	ldr	r5, [pc, #44]	; (8010ec4 <__libc_init_array+0x40>)
 8010e96:	4c0c      	ldr	r4, [pc, #48]	; (8010ec8 <__libc_init_array+0x44>)
 8010e98:	f000 f8e8 	bl	801106c <_init>
 8010e9c:	1b64      	subs	r4, r4, r5
 8010e9e:	10a4      	asrs	r4, r4, #2
 8010ea0:	2600      	movs	r6, #0
 8010ea2:	42a6      	cmp	r6, r4
 8010ea4:	d105      	bne.n	8010eb2 <__libc_init_array+0x2e>
 8010ea6:	bd70      	pop	{r4, r5, r6, pc}
 8010ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8010eac:	4798      	blx	r3
 8010eae:	3601      	adds	r6, #1
 8010eb0:	e7ee      	b.n	8010e90 <__libc_init_array+0xc>
 8010eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8010eb6:	4798      	blx	r3
 8010eb8:	3601      	adds	r6, #1
 8010eba:	e7f2      	b.n	8010ea2 <__libc_init_array+0x1e>
 8010ebc:	08011114 	.word	0x08011114
 8010ec0:	08011114 	.word	0x08011114
 8010ec4:	08011114 	.word	0x08011114
 8010ec8:	08011118 	.word	0x08011118

08010ecc <malloc>:
 8010ecc:	4b02      	ldr	r3, [pc, #8]	; (8010ed8 <malloc+0xc>)
 8010ece:	4601      	mov	r1, r0
 8010ed0:	6818      	ldr	r0, [r3, #0]
 8010ed2:	f000 b839 	b.w	8010f48 <_malloc_r>
 8010ed6:	bf00      	nop
 8010ed8:	24000100 	.word	0x24000100

08010edc <memcpy>:
 8010edc:	440a      	add	r2, r1
 8010ede:	4291      	cmp	r1, r2
 8010ee0:	f100 33ff 	add.w	r3, r0, #4294967295
 8010ee4:	d100      	bne.n	8010ee8 <memcpy+0xc>
 8010ee6:	4770      	bx	lr
 8010ee8:	b510      	push	{r4, lr}
 8010eea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010eee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010ef2:	4291      	cmp	r1, r2
 8010ef4:	d1f9      	bne.n	8010eea <memcpy+0xe>
 8010ef6:	bd10      	pop	{r4, pc}

08010ef8 <memset>:
 8010ef8:	4402      	add	r2, r0
 8010efa:	4603      	mov	r3, r0
 8010efc:	4293      	cmp	r3, r2
 8010efe:	d100      	bne.n	8010f02 <memset+0xa>
 8010f00:	4770      	bx	lr
 8010f02:	f803 1b01 	strb.w	r1, [r3], #1
 8010f06:	e7f9      	b.n	8010efc <memset+0x4>

08010f08 <sbrk_aligned>:
 8010f08:	b570      	push	{r4, r5, r6, lr}
 8010f0a:	4e0e      	ldr	r6, [pc, #56]	; (8010f44 <sbrk_aligned+0x3c>)
 8010f0c:	460c      	mov	r4, r1
 8010f0e:	6831      	ldr	r1, [r6, #0]
 8010f10:	4605      	mov	r5, r0
 8010f12:	b911      	cbnz	r1, 8010f1a <sbrk_aligned+0x12>
 8010f14:	f000 f88c 	bl	8011030 <_sbrk_r>
 8010f18:	6030      	str	r0, [r6, #0]
 8010f1a:	4621      	mov	r1, r4
 8010f1c:	4628      	mov	r0, r5
 8010f1e:	f000 f887 	bl	8011030 <_sbrk_r>
 8010f22:	1c43      	adds	r3, r0, #1
 8010f24:	d00a      	beq.n	8010f3c <sbrk_aligned+0x34>
 8010f26:	1cc4      	adds	r4, r0, #3
 8010f28:	f024 0403 	bic.w	r4, r4, #3
 8010f2c:	42a0      	cmp	r0, r4
 8010f2e:	d007      	beq.n	8010f40 <sbrk_aligned+0x38>
 8010f30:	1a21      	subs	r1, r4, r0
 8010f32:	4628      	mov	r0, r5
 8010f34:	f000 f87c 	bl	8011030 <_sbrk_r>
 8010f38:	3001      	adds	r0, #1
 8010f3a:	d101      	bne.n	8010f40 <sbrk_aligned+0x38>
 8010f3c:	f04f 34ff 	mov.w	r4, #4294967295
 8010f40:	4620      	mov	r0, r4
 8010f42:	bd70      	pop	{r4, r5, r6, pc}
 8010f44:	24005988 	.word	0x24005988

08010f48 <_malloc_r>:
 8010f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f4c:	1ccd      	adds	r5, r1, #3
 8010f4e:	f025 0503 	bic.w	r5, r5, #3
 8010f52:	3508      	adds	r5, #8
 8010f54:	2d0c      	cmp	r5, #12
 8010f56:	bf38      	it	cc
 8010f58:	250c      	movcc	r5, #12
 8010f5a:	2d00      	cmp	r5, #0
 8010f5c:	4607      	mov	r7, r0
 8010f5e:	db01      	blt.n	8010f64 <_malloc_r+0x1c>
 8010f60:	42a9      	cmp	r1, r5
 8010f62:	d905      	bls.n	8010f70 <_malloc_r+0x28>
 8010f64:	230c      	movs	r3, #12
 8010f66:	603b      	str	r3, [r7, #0]
 8010f68:	2600      	movs	r6, #0
 8010f6a:	4630      	mov	r0, r6
 8010f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f70:	4e2e      	ldr	r6, [pc, #184]	; (801102c <_malloc_r+0xe4>)
 8010f72:	f000 f86d 	bl	8011050 <__malloc_lock>
 8010f76:	6833      	ldr	r3, [r6, #0]
 8010f78:	461c      	mov	r4, r3
 8010f7a:	bb34      	cbnz	r4, 8010fca <_malloc_r+0x82>
 8010f7c:	4629      	mov	r1, r5
 8010f7e:	4638      	mov	r0, r7
 8010f80:	f7ff ffc2 	bl	8010f08 <sbrk_aligned>
 8010f84:	1c43      	adds	r3, r0, #1
 8010f86:	4604      	mov	r4, r0
 8010f88:	d14d      	bne.n	8011026 <_malloc_r+0xde>
 8010f8a:	6834      	ldr	r4, [r6, #0]
 8010f8c:	4626      	mov	r6, r4
 8010f8e:	2e00      	cmp	r6, #0
 8010f90:	d140      	bne.n	8011014 <_malloc_r+0xcc>
 8010f92:	6823      	ldr	r3, [r4, #0]
 8010f94:	4631      	mov	r1, r6
 8010f96:	4638      	mov	r0, r7
 8010f98:	eb04 0803 	add.w	r8, r4, r3
 8010f9c:	f000 f848 	bl	8011030 <_sbrk_r>
 8010fa0:	4580      	cmp	r8, r0
 8010fa2:	d13a      	bne.n	801101a <_malloc_r+0xd2>
 8010fa4:	6821      	ldr	r1, [r4, #0]
 8010fa6:	3503      	adds	r5, #3
 8010fa8:	1a6d      	subs	r5, r5, r1
 8010faa:	f025 0503 	bic.w	r5, r5, #3
 8010fae:	3508      	adds	r5, #8
 8010fb0:	2d0c      	cmp	r5, #12
 8010fb2:	bf38      	it	cc
 8010fb4:	250c      	movcc	r5, #12
 8010fb6:	4629      	mov	r1, r5
 8010fb8:	4638      	mov	r0, r7
 8010fba:	f7ff ffa5 	bl	8010f08 <sbrk_aligned>
 8010fbe:	3001      	adds	r0, #1
 8010fc0:	d02b      	beq.n	801101a <_malloc_r+0xd2>
 8010fc2:	6823      	ldr	r3, [r4, #0]
 8010fc4:	442b      	add	r3, r5
 8010fc6:	6023      	str	r3, [r4, #0]
 8010fc8:	e00e      	b.n	8010fe8 <_malloc_r+0xa0>
 8010fca:	6822      	ldr	r2, [r4, #0]
 8010fcc:	1b52      	subs	r2, r2, r5
 8010fce:	d41e      	bmi.n	801100e <_malloc_r+0xc6>
 8010fd0:	2a0b      	cmp	r2, #11
 8010fd2:	d916      	bls.n	8011002 <_malloc_r+0xba>
 8010fd4:	1961      	adds	r1, r4, r5
 8010fd6:	42a3      	cmp	r3, r4
 8010fd8:	6025      	str	r5, [r4, #0]
 8010fda:	bf18      	it	ne
 8010fdc:	6059      	strne	r1, [r3, #4]
 8010fde:	6863      	ldr	r3, [r4, #4]
 8010fe0:	bf08      	it	eq
 8010fe2:	6031      	streq	r1, [r6, #0]
 8010fe4:	5162      	str	r2, [r4, r5]
 8010fe6:	604b      	str	r3, [r1, #4]
 8010fe8:	4638      	mov	r0, r7
 8010fea:	f104 060b 	add.w	r6, r4, #11
 8010fee:	f000 f835 	bl	801105c <__malloc_unlock>
 8010ff2:	f026 0607 	bic.w	r6, r6, #7
 8010ff6:	1d23      	adds	r3, r4, #4
 8010ff8:	1af2      	subs	r2, r6, r3
 8010ffa:	d0b6      	beq.n	8010f6a <_malloc_r+0x22>
 8010ffc:	1b9b      	subs	r3, r3, r6
 8010ffe:	50a3      	str	r3, [r4, r2]
 8011000:	e7b3      	b.n	8010f6a <_malloc_r+0x22>
 8011002:	6862      	ldr	r2, [r4, #4]
 8011004:	42a3      	cmp	r3, r4
 8011006:	bf0c      	ite	eq
 8011008:	6032      	streq	r2, [r6, #0]
 801100a:	605a      	strne	r2, [r3, #4]
 801100c:	e7ec      	b.n	8010fe8 <_malloc_r+0xa0>
 801100e:	4623      	mov	r3, r4
 8011010:	6864      	ldr	r4, [r4, #4]
 8011012:	e7b2      	b.n	8010f7a <_malloc_r+0x32>
 8011014:	4634      	mov	r4, r6
 8011016:	6876      	ldr	r6, [r6, #4]
 8011018:	e7b9      	b.n	8010f8e <_malloc_r+0x46>
 801101a:	230c      	movs	r3, #12
 801101c:	603b      	str	r3, [r7, #0]
 801101e:	4638      	mov	r0, r7
 8011020:	f000 f81c 	bl	801105c <__malloc_unlock>
 8011024:	e7a1      	b.n	8010f6a <_malloc_r+0x22>
 8011026:	6025      	str	r5, [r4, #0]
 8011028:	e7de      	b.n	8010fe8 <_malloc_r+0xa0>
 801102a:	bf00      	nop
 801102c:	24005984 	.word	0x24005984

08011030 <_sbrk_r>:
 8011030:	b538      	push	{r3, r4, r5, lr}
 8011032:	4d06      	ldr	r5, [pc, #24]	; (801104c <_sbrk_r+0x1c>)
 8011034:	2300      	movs	r3, #0
 8011036:	4604      	mov	r4, r0
 8011038:	4608      	mov	r0, r1
 801103a:	602b      	str	r3, [r5, #0]
 801103c:	f7f0 fbde 	bl	80017fc <_sbrk>
 8011040:	1c43      	adds	r3, r0, #1
 8011042:	d102      	bne.n	801104a <_sbrk_r+0x1a>
 8011044:	682b      	ldr	r3, [r5, #0]
 8011046:	b103      	cbz	r3, 801104a <_sbrk_r+0x1a>
 8011048:	6023      	str	r3, [r4, #0]
 801104a:	bd38      	pop	{r3, r4, r5, pc}
 801104c:	2400598c 	.word	0x2400598c

08011050 <__malloc_lock>:
 8011050:	4801      	ldr	r0, [pc, #4]	; (8011058 <__malloc_lock+0x8>)
 8011052:	f000 b809 	b.w	8011068 <__retarget_lock_acquire_recursive>
 8011056:	bf00      	nop
 8011058:	24005990 	.word	0x24005990

0801105c <__malloc_unlock>:
 801105c:	4801      	ldr	r0, [pc, #4]	; (8011064 <__malloc_unlock+0x8>)
 801105e:	f000 b804 	b.w	801106a <__retarget_lock_release_recursive>
 8011062:	bf00      	nop
 8011064:	24005990 	.word	0x24005990

08011068 <__retarget_lock_acquire_recursive>:
 8011068:	4770      	bx	lr

0801106a <__retarget_lock_release_recursive>:
 801106a:	4770      	bx	lr

0801106c <_init>:
 801106c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801106e:	bf00      	nop
 8011070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011072:	bc08      	pop	{r3}
 8011074:	469e      	mov	lr, r3
 8011076:	4770      	bx	lr

08011078 <_fini>:
 8011078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801107a:	bf00      	nop
 801107c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801107e:	bc08      	pop	{r3}
 8011080:	469e      	mov	lr, r3
 8011082:	4770      	bx	lr
