
testing_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012ed8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08013170  08013170  00023170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080131f8  080131f8  00030100  2**0
                  CONTENTS
  4 .ARM          00000008  080131f8  080131f8  000231f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013200  08013200  00030100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013200  08013200  00023200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013204  08013204  00023204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  24000000  08013208  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003574c  24000100  08013308  00030100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2403584c  08013308  0003584c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a057  00000000  00000000  0003012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004aea  00000000  00000000  0005a185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001eb8  00000000  00000000  0005ec70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cf0  00000000  00000000  00060b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00041575  00000000  00000000  00062818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029ad8  00000000  00000000  000a3d8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a4e01  00000000  00000000  000cd865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00272666  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000083ec  00000000  00000000  002726b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000100 	.word	0x24000100
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08013158 	.word	0x08013158

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000104 	.word	0x24000104
 80002d4:	08013158 	.word	0x08013158

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 800070e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000712:	60fb      	str	r3, [r7, #12]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000714:	bf00      	nop
 8000716:	4b3e      	ldr	r3, [pc, #248]	; (8000810 <main+0x108>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x24>
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	60fa      	str	r2, [r7, #12]
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf4      	bgt.n	8000716 <main+0xe>
	if (timeout < 0)
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	2b00      	cmp	r3, #0
 8000730:	da01      	bge.n	8000736 <main+0x2e>
	{
		Error_Handler();
 8000732:	f001 fb87 	bl	8001e44 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f001 ff89 	bl	800264c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f9fb 	bl	8000b34 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800073e:	f000 fa87 	bl	8000c50 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000742:	4b33      	ldr	r3, [pc, #204]	; (8000810 <main+0x108>)
 8000744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000748:	4a31      	ldr	r2, [pc, #196]	; (8000810 <main+0x108>)
 800074a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000752:	4b2f      	ldr	r3, [pc, #188]	; (8000810 <main+0x108>)
 8000754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000760:	2000      	movs	r0, #0
 8000762:	f007 fb65 	bl	8007e30 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8000766:	2100      	movs	r1, #0
 8000768:	2000      	movs	r0, #0
 800076a:	f007 fb7b 	bl	8007e64 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800076e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000772:	60fb      	str	r3, [r7, #12]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000774:	bf00      	nop
 8000776:	4b26      	ldr	r3, [pc, #152]	; (8000810 <main+0x108>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077e:	2b00      	cmp	r3, #0
 8000780:	d104      	bne.n	800078c <main+0x84>
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	1e5a      	subs	r2, r3, #1
 8000786:	60fa      	str	r2, [r7, #12]
 8000788:	2b00      	cmp	r3, #0
 800078a:	dcf4      	bgt.n	8000776 <main+0x6e>
	if (timeout < 0)
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	2b00      	cmp	r3, #0
 8000790:	da01      	bge.n	8000796 <main+0x8e>
	{
		Error_Handler();
 8000792:	f001 fb57 	bl	8001e44 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000796:	f000 fddf 	bl	8001358 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800079a:	f000 fd1d 	bl	80011d8 <MX_USART3_UART_Init>
  MX_DMA_Init();
 800079e:	f000 fd67 	bl	8001270 <MX_DMA_Init>
  MX_ADC1_Init();
 80007a2:	f000 fa81 	bl	8000ca8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80007a6:	f000 fc63 	bl	8001070 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 80007aa:	f011 fee1 	bl	8012570 <MX_USB_DEVICE_Init>
  MX_ADC3_Init();
 80007ae:	f000 fb5f 	bl	8000e70 <MX_ADC3_Init>
  MX_ADC2_Init();
 80007b2:	f000 faf5 	bl	8000da0 <MX_ADC2_Init>
  MX_TIM16_Init();
 80007b6:	f000 fce7 	bl	8001188 <MX_TIM16_Init>
  MX_COMP1_Init();
 80007ba:	f000 fbbf 	bl	8000f3c <MX_COMP1_Init>
  MX_COMP2_Init();
 80007be:	f000 fbeb 	bl	8000f98 <MX_COMP2_Init>
  MX_DAC1_Init();
 80007c2:	f000 fc17 	bl	8000ff4 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007c6:	2102      	movs	r1, #2
 80007c8:	4812      	ldr	r0, [pc, #72]	; (8000814 <main+0x10c>)
 80007ca:	f007 fb16 	bl	8007dfa <HAL_GPIO_TogglePin>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
 80007ce:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80007d6:	4810      	ldr	r0, [pc, #64]	; (8000818 <main+0x110>)
 80007d8:	f003 fe90 	bl	80044fc <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
 80007dc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80007e4:	480d      	ldr	r0, [pc, #52]	; (800081c <main+0x114>)
 80007e6:	f003 fe89 	bl	80044fc <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
 80007ea:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80007f2:	480b      	ldr	r0, [pc, #44]	; (8000820 <main+0x118>)
 80007f4:	f003 fe82 	bl	80044fc <HAL_ADCEx_Calibration_Start>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007f8:	2102      	movs	r1, #2
 80007fa:	4806      	ldr	r0, [pc, #24]	; (8000814 <main+0x10c>)
 80007fc:	f007 fafd 	bl	8007dfa <HAL_GPIO_TogglePin>

	HAL_TIM_Base_Start_IT(&htim16);
 8000800:	4808      	ldr	r0, [pc, #32]	; (8000824 <main+0x11c>)
 8000802:	f00c f88b 	bl	800c91c <HAL_TIM_Base_Start_IT>

	uint16_t i = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < DATA_TO_SEND_LEN * 3; i++)
 800080a:	2300      	movs	r3, #0
 800080c:	817b      	strh	r3, [r7, #10]
 800080e:	e013      	b.n	8000838 <main+0x130>
 8000810:	58024400 	.word	0x58024400
 8000814:	58021000 	.word	0x58021000
 8000818:	2400011c 	.word	0x2400011c
 800081c:	24000180 	.word	0x24000180
 8000820:	240001e4 	.word	0x240001e4
 8000824:	24000468 	.word	0x24000468
	{
		dummy_data_to_send[i] = i & 0xFF;
 8000828:	897b      	ldrh	r3, [r7, #10]
 800082a:	897a      	ldrh	r2, [r7, #10]
 800082c:	b2d1      	uxtb	r1, r2
 800082e:	4aa4      	ldr	r2, [pc, #656]	; (8000ac0 <main+0x3b8>)
 8000830:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < DATA_TO_SEND_LEN * 3; i++)
 8000832:	897b      	ldrh	r3, [r7, #10]
 8000834:	3301      	adds	r3, #1
 8000836:	817b      	strh	r3, [r7, #10]
 8000838:	897b      	ldrh	r3, [r7, #10]
 800083a:	f240 52db 	movw	r2, #1499	; 0x5db
 800083e:	4293      	cmp	r3, r2
 8000840:	d9f2      	bls.n	8000828 <main+0x120>
	}
	options->changed = 0;
 8000842:	4ba0      	ldr	r3, [pc, #640]	; (8000ac4 <main+0x3bc>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2200      	movs	r2, #0
 8000848:	721a      	strb	r2, [r3, #8]

	while (!start_flag)
 800084a:	bf00      	nop
 800084c:	4b9e      	ldr	r3, [pc, #632]	; (8000ac8 <main+0x3c0>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b2db      	uxtb	r3, r3
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0fa      	beq.n	800084c <main+0x144>
	{
		//waiting for usb connection
	}

	HAL_ADC_Stop_DMA(&hadc1);
 8000856:	489d      	ldr	r0, [pc, #628]	; (8000acc <main+0x3c4>)
 8000858:	f002 fcb2 	bl	80031c0 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 800085c:	489c      	ldr	r0, [pc, #624]	; (8000ad0 <main+0x3c8>)
 800085e:	f002 fcaf 	bl	80031c0 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc3);
 8000862:	489c      	ldr	r0, [pc, #624]	; (8000ad4 <main+0x3cc>)
 8000864:	f002 fcac 	bl	80031c0 <HAL_ADC_Stop_DMA>

	HAL_COMP_Stop(&hcomp1);
 8000868:	489b      	ldr	r0, [pc, #620]	; (8000ad8 <main+0x3d0>)
 800086a:	f004 f92f 	bl	8004acc <HAL_COMP_Stop>
	HAL_COMP_Stop(&hcomp2);
 800086e:	489b      	ldr	r0, [pc, #620]	; (8000adc <main+0x3d4>)
 8000870:	f004 f92c 	bl	8004acc <HAL_COMP_Stop>

	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000874:	2100      	movs	r1, #0
 8000876:	489a      	ldr	r0, [pc, #616]	; (8000ae0 <main+0x3d8>)
 8000878:	f004 fb58 	bl	8004f2c <HAL_DAC_Start>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800087c:	2100      	movs	r1, #0
 800087e:	4899      	ldr	r0, [pc, #612]	; (8000ae4 <main+0x3dc>)
 8000880:	f00c fa2a 	bl	800ccd8 <HAL_TIM_PWM_Stop>

	HAL_Delay(500);
 8000884:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000888:	f001 ff72 	bl	8002770 <HAL_Delay>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_Buf_A_1, ADC_HALF_BUF_LEN * 2);
 800088c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000890:	4995      	ldr	r1, [pc, #596]	; (8000ae8 <main+0x3e0>)
 8000892:	488e      	ldr	r0, [pc, #568]	; (8000acc <main+0x3c4>)
 8000894:	f002 fbd0 	bl	8003038 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) ADC_Buf_B_1, ADC_HALF_BUF_LEN * 2);
 8000898:	f644 6220 	movw	r2, #20000	; 0x4e20
 800089c:	4993      	ldr	r1, [pc, #588]	; (8000aec <main+0x3e4>)
 800089e:	488c      	ldr	r0, [pc, #560]	; (8000ad0 <main+0x3c8>)
 80008a0:	f002 fbca 	bl	8003038 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC_Buf_C_1, ADC_HALF_BUF_LEN * 2);
 80008a4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80008a8:	4991      	ldr	r1, [pc, #580]	; (8000af0 <main+0x3e8>)
 80008aa:	488a      	ldr	r0, [pc, #552]	; (8000ad4 <main+0x3cc>)
 80008ac:	f002 fbc4 	bl	8003038 <HAL_ADC_Start_DMA>

//			HAL_COMP_Start_IT(&hcomp1);
//			HAL_COMP_Start_IT(&hcomp2);

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80008b0:	2100      	movs	r1, #0
 80008b2:	488c      	ldr	r0, [pc, #560]	; (8000ae4 <main+0x3dc>)
 80008b4:	f00c f902 	bl	800cabc <HAL_TIM_PWM_Start>

	trigger_A_pos = 0;
 80008b8:	4b8e      	ldr	r3, [pc, #568]	; (8000af4 <main+0x3ec>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	801a      	strh	r2, [r3, #0]
	trigger_B_pos = 0;
 80008be:	4b8e      	ldr	r3, [pc, #568]	; (8000af8 <main+0x3f0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	801a      	strh	r2, [r3, #0]

	buf_A_pos = 0;
 80008c4:	4b8d      	ldr	r3, [pc, #564]	; (8000afc <main+0x3f4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	801a      	strh	r2, [r3, #0]
	buf_B_pos = 0;
 80008ca:	4b8d      	ldr	r3, [pc, #564]	; (8000b00 <main+0x3f8>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	801a      	strh	r2, [r3, #0]
	buf_C_pos = 0;
 80008d0:	4b8c      	ldr	r3, [pc, #560]	; (8000b04 <main+0x3fc>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	801a      	strh	r2, [r3, #0]

	start_flag = RESET;
 80008d6:	4b7c      	ldr	r3, [pc, #496]	; (8000ac8 <main+0x3c0>)
 80008d8:	2200      	movs	r2, #0
 80008da:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80008dc:	2101      	movs	r1, #1
 80008de:	488a      	ldr	r0, [pc, #552]	; (8000b08 <main+0x400>)
 80008e0:	f007 fa8b 	bl	8007dfa <HAL_GPIO_TogglePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		if (trigger_flag)
 80008e4:	4b89      	ldr	r3, [pc, #548]	; (8000b0c <main+0x404>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d03d      	beq.n	800096a <main+0x262>
		{
			if (options->trigger_channel == 1)
 80008ee:	4b75      	ldr	r3, [pc, #468]	; (8000ac4 <main+0x3bc>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	799b      	ldrb	r3, [r3, #6]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d119      	bne.n	800092c <main+0x224>
			{
				if (buf_A_quadrant == ((trigger_quadrant + 1) & 3))
 80008f8:	4b85      	ldr	r3, [pc, #532]	; (8000b10 <main+0x408>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	461a      	mov	r2, r3
 8000900:	4b84      	ldr	r3, [pc, #528]	; (8000b14 <main+0x40c>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	3301      	adds	r3, #1
 8000908:	f003 0303 	and.w	r3, r3, #3
 800090c:	429a      	cmp	r2, r3
 800090e:	d10d      	bne.n	800092c <main+0x224>
				{
					copy_to_tmp_array();
 8000910:	f001 f898 	bl	8001a44 <copy_to_tmp_array>
					prepare_data_to_send(trigger_A_pos);
 8000914:	4b77      	ldr	r3, [pc, #476]	; (8000af4 <main+0x3ec>)
 8000916:	881b      	ldrh	r3, [r3, #0]
 8000918:	b29b      	uxth	r3, r3
 800091a:	4618      	mov	r0, r3
 800091c:	f001 f9cc 	bl	8001cb8 <prepare_data_to_send>
					ready_to_send_flag = 1;
 8000920:	4b7d      	ldr	r3, [pc, #500]	; (8000b18 <main+0x410>)
 8000922:	2201      	movs	r2, #1
 8000924:	701a      	strb	r2, [r3, #0]
					trigger_flag = 0;
 8000926:	4b79      	ldr	r3, [pc, #484]	; (8000b0c <main+0x404>)
 8000928:	2200      	movs	r2, #0
 800092a:	701a      	strb	r2, [r3, #0]
				}
			}
			if (options->trigger_channel == 2)
 800092c:	4b65      	ldr	r3, [pc, #404]	; (8000ac4 <main+0x3bc>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	799b      	ldrb	r3, [r3, #6]
 8000932:	2b02      	cmp	r3, #2
 8000934:	d119      	bne.n	800096a <main+0x262>
			{
				if (buf_B_quadrant == ((trigger_quadrant + 1) & 3))
 8000936:	4b79      	ldr	r3, [pc, #484]	; (8000b1c <main+0x414>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	b2db      	uxtb	r3, r3
 800093c:	461a      	mov	r2, r3
 800093e:	4b75      	ldr	r3, [pc, #468]	; (8000b14 <main+0x40c>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	3301      	adds	r3, #1
 8000946:	f003 0303 	and.w	r3, r3, #3
 800094a:	429a      	cmp	r2, r3
 800094c:	d10d      	bne.n	800096a <main+0x262>
				{
					copy_to_tmp_array();
 800094e:	f001 f879 	bl	8001a44 <copy_to_tmp_array>
					prepare_data_to_send(trigger_B_pos);
 8000952:	4b69      	ldr	r3, [pc, #420]	; (8000af8 <main+0x3f0>)
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	b29b      	uxth	r3, r3
 8000958:	4618      	mov	r0, r3
 800095a:	f001 f9ad 	bl	8001cb8 <prepare_data_to_send>
					ready_to_send_flag = 1;
 800095e:	4b6e      	ldr	r3, [pc, #440]	; (8000b18 <main+0x410>)
 8000960:	2201      	movs	r2, #1
 8000962:	701a      	strb	r2, [r3, #0]
					trigger_flag = 0;
 8000964:	4b69      	ldr	r3, [pc, #420]	; (8000b0c <main+0x404>)
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		if (options->changed)
 800096a:	4b56      	ldr	r3, [pc, #344]	; (8000ac4 <main+0x3bc>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	7a1b      	ldrb	r3, [r3, #8]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d0b7      	beq.n	80008e4 <main+0x1dc>
		{
			first_triggering = 0;
 8000974:	4b6a      	ldr	r3, [pc, #424]	; (8000b20 <main+0x418>)
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]
			//TODO(Attila): Set everything

			//MUX 1
			HAL_GPIO_WritePin(MUX_1_A_GPIO_Port, MUX_1_A_Pin, !(options->channelA & 1));
 800097a:	4b52      	ldr	r3, [pc, #328]	; (8000ac4 <main+0x3bc>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	2b00      	cmp	r3, #0
 8000986:	bf0c      	ite	eq
 8000988:	2301      	moveq	r3, #1
 800098a:	2300      	movne	r3, #0
 800098c:	b2db      	uxtb	r3, r3
 800098e:	461a      	mov	r2, r3
 8000990:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000994:	4863      	ldr	r0, [pc, #396]	; (8000b24 <main+0x41c>)
 8000996:	f007 fa17 	bl	8007dc8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_1_B_GPIO_Port, MUX_1_B_Pin, !(options->channelA & 2));
 800099a:	4b4a      	ldr	r3, [pc, #296]	; (8000ac4 <main+0x3bc>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	f003 0302 	and.w	r3, r3, #2
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	bf0c      	ite	eq
 80009a8:	2301      	moveq	r3, #1
 80009aa:	2300      	movne	r3, #0
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	461a      	mov	r2, r3
 80009b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009b4:	485b      	ldr	r0, [pc, #364]	; (8000b24 <main+0x41c>)
 80009b6:	f007 fa07 	bl	8007dc8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_1_C_GPIO_Port, MUX_1_C_Pin, !(options->channelA & 4));
 80009ba:	4b42      	ldr	r3, [pc, #264]	; (8000ac4 <main+0x3bc>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	f003 0304 	and.w	r3, r3, #4
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	bf0c      	ite	eq
 80009c8:	2301      	moveq	r3, #1
 80009ca:	2300      	movne	r3, #0
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	461a      	mov	r2, r3
 80009d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009d4:	4853      	ldr	r0, [pc, #332]	; (8000b24 <main+0x41c>)
 80009d6:	f007 f9f7 	bl	8007dc8 <HAL_GPIO_WritePin>

			//MUX 2
			HAL_GPIO_WritePin(MUX_2_A_GPIO_Port, MUX_2_A_Pin, !(options->channelB & 1));
 80009da:	4b3a      	ldr	r3, [pc, #232]	; (8000ac4 <main+0x3bc>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	785b      	ldrb	r3, [r3, #1]
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	bf0c      	ite	eq
 80009e8:	2301      	moveq	r3, #1
 80009ea:	2300      	movne	r3, #0
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	461a      	mov	r2, r3
 80009f0:	2104      	movs	r1, #4
 80009f2:	484d      	ldr	r0, [pc, #308]	; (8000b28 <main+0x420>)
 80009f4:	f007 f9e8 	bl	8007dc8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_2_B_GPIO_Port, MUX_2_B_Pin, !(options->channelB & 2));
 80009f8:	4b32      	ldr	r3, [pc, #200]	; (8000ac4 <main+0x3bc>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	785b      	ldrb	r3, [r3, #1]
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	bf0c      	ite	eq
 8000a06:	2301      	moveq	r3, #1
 8000a08:	2300      	movne	r3, #0
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a12:	4846      	ldr	r0, [pc, #280]	; (8000b2c <main+0x424>)
 8000a14:	f007 f9d8 	bl	8007dc8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX_2_C_GPIO_Port, MUX_2_C_Pin, !(options->channelB & 4));
 8000a18:	4b2a      	ldr	r3, [pc, #168]	; (8000ac4 <main+0x3bc>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	785b      	ldrb	r3, [r3, #1]
 8000a1e:	f003 0304 	and.w	r3, r3, #4
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	bf0c      	ite	eq
 8000a26:	2301      	moveq	r3, #1
 8000a28:	2300      	movne	r3, #0
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a32:	483e      	ldr	r0, [pc, #248]	; (8000b2c <main+0x424>)
 8000a34:	f007 f9c8 	bl	8007dc8 <HAL_GPIO_WritePin>

			//DAC setting
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, options->trigger_value);
 8000a38:	4b22      	ldr	r3, [pc, #136]	; (8000ac4 <main+0x3bc>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	889b      	ldrh	r3, [r3, #4]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2100      	movs	r1, #0
 8000a42:	4827      	ldr	r0, [pc, #156]	; (8000ae0 <main+0x3d8>)
 8000a44:	f004 fac4 	bl	8004fd0 <HAL_DAC_SetValue>
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, options->trigger_value);
 8000a48:	4b1e      	ldr	r3, [pc, #120]	; (8000ac4 <main+0x3bc>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	889b      	ldrh	r3, [r3, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2110      	movs	r1, #16
 8000a52:	4823      	ldr	r0, [pc, #140]	; (8000ae0 <main+0x3d8>)
 8000a54:	f004 fabc 	bl	8004fd0 <HAL_DAC_SetValue>

			//Trigger Mode
			switch (options->trigger_option)
 8000a58:	4b1a      	ldr	r3, [pc, #104]	; (8000ac4 <main+0x3bc>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	78db      	ldrb	r3, [r3, #3]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d002      	beq.n	8000a68 <main+0x360>
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d013      	beq.n	8000a8e <main+0x386>
 8000a66:	e01f      	b.n	8000aa8 <main+0x3a0>
			{
			case 0:
//				hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
//				hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
				expected_comp_output = COMP_OUTPUT_LEVEL_HIGH;
 8000a68:	4b31      	ldr	r3, [pc, #196]	; (8000b30 <main+0x428>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	701a      	strb	r2, [r3, #0]

				HAL_COMP_Stop(&hcomp1);
 8000a6e:	481a      	ldr	r0, [pc, #104]	; (8000ad8 <main+0x3d0>)
 8000a70:	f004 f82c 	bl	8004acc <HAL_COMP_Stop>
				HAL_COMP_Stop(&hcomp2);
 8000a74:	4819      	ldr	r0, [pc, #100]	; (8000adc <main+0x3d4>)
 8000a76:	f004 f829 	bl	8004acc <HAL_COMP_Stop>

//				HAL_COMP_Init(&hcomp1);
//				HAL_COMP_Init(&hcomp2);

				trigger_flag = 0;
 8000a7a:	4b24      	ldr	r3, [pc, #144]	; (8000b0c <main+0x404>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
				HAL_COMP_Start(&hcomp1);
 8000a80:	4815      	ldr	r0, [pc, #84]	; (8000ad8 <main+0x3d0>)
 8000a82:	f003 ffd9 	bl	8004a38 <HAL_COMP_Start>
				HAL_COMP_Start(&hcomp2);
 8000a86:	4815      	ldr	r0, [pc, #84]	; (8000adc <main+0x3d4>)
 8000a88:	f003 ffd6 	bl	8004a38 <HAL_COMP_Start>
				break;
 8000a8c:	e013      	b.n	8000ab6 <main+0x3ae>

			case 1:
//				hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_FALLING;
//				hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_FALLING;
				expected_comp_output = COMP_OUTPUT_LEVEL_LOW;
 8000a8e:	4b28      	ldr	r3, [pc, #160]	; (8000b30 <main+0x428>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	701a      	strb	r2, [r3, #0]

//				HAL_COMP_Init(&hcomp1);
//				HAL_COMP_Init(&hcomp2);

				trigger_flag = 0;
 8000a94:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <main+0x404>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	701a      	strb	r2, [r3, #0]
				HAL_COMP_Start(&hcomp1);
 8000a9a:	480f      	ldr	r0, [pc, #60]	; (8000ad8 <main+0x3d0>)
 8000a9c:	f003 ffcc 	bl	8004a38 <HAL_COMP_Start>
				HAL_COMP_Start(&hcomp2);
 8000aa0:	480e      	ldr	r0, [pc, #56]	; (8000adc <main+0x3d4>)
 8000aa2:	f003 ffc9 	bl	8004a38 <HAL_COMP_Start>
				break;
 8000aa6:	e006      	b.n	8000ab6 <main+0x3ae>

			default:
				HAL_COMP_Stop(&hcomp1);
 8000aa8:	480b      	ldr	r0, [pc, #44]	; (8000ad8 <main+0x3d0>)
 8000aaa:	f004 f80f 	bl	8004acc <HAL_COMP_Stop>
				HAL_COMP_Stop(&hcomp2);
 8000aae:	480b      	ldr	r0, [pc, #44]	; (8000adc <main+0x3d4>)
 8000ab0:	f004 f80c 	bl	8004acc <HAL_COMP_Stop>

				break;
 8000ab4:	bf00      	nop
			}

			options->changed = 0;
 8000ab6:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <main+0x3bc>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2200      	movs	r2, #0
 8000abc:	721a      	strb	r2, [r3, #8]
		if (trigger_flag)
 8000abe:	e711      	b.n	80008e4 <main+0x1dc>
 8000ac0:	24034000 	.word	0x24034000
 8000ac4:	240345dc 	.word	0x240345dc
 8000ac8:	24033a13 	.word	0x24033a13
 8000acc:	2400011c 	.word	0x2400011c
 8000ad0:	24000180 	.word	0x24000180
 8000ad4:	240001e4 	.word	0x240001e4
 8000ad8:	240003b0 	.word	0x240003b0
 8000adc:	240003dc 	.word	0x240003dc
 8000ae0:	24000408 	.word	0x24000408
 8000ae4:	2400041c 	.word	0x2400041c
 8000ae8:	240005bc 	.word	0x240005bc
 8000aec:	240053dc 	.word	0x240053dc
 8000af0:	2400a1fc 	.word	0x2400a1fc
 8000af4:	24033a0e 	.word	0x24033a0e
 8000af8:	24033a10 	.word	0x24033a10
 8000afc:	24033a16 	.word	0x24033a16
 8000b00:	24033a18 	.word	0x24033a18
 8000b04:	24033a1a 	.word	0x24033a1a
 8000b08:	58020400 	.word	0x58020400
 8000b0c:	24033a0c 	.word	0x24033a0c
 8000b10:	24033a1c 	.word	0x24033a1c
 8000b14:	24033a12 	.word	0x24033a12
 8000b18:	24033a14 	.word	0x24033a14
 8000b1c:	24033a1d 	.word	0x24033a1d
 8000b20:	24033a1f 	.word	0x24033a1f
 8000b24:	58020800 	.word	0x58020800
 8000b28:	58020c00 	.word	0x58020c00
 8000b2c:	58021800 	.word	0x58021800
 8000b30:	24033a20 	.word	0x24033a20

08000b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b09c      	sub	sp, #112	; 0x70
 8000b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3e:	224c      	movs	r2, #76	; 0x4c
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f012 fb00 	bl	8013148 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	2220      	movs	r2, #32
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f012 fafa 	bl	8013148 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b54:	2004      	movs	r0, #4
 8000b56:	f008 fc6f 	bl	8009438 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	4b39      	ldr	r3, [pc, #228]	; (8000c44 <SystemClock_Config+0x110>)
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	4a38      	ldr	r2, [pc, #224]	; (8000c44 <SystemClock_Config+0x110>)
 8000b64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b68:	6193      	str	r3, [r2, #24]
 8000b6a:	4b36      	ldr	r3, [pc, #216]	; (8000c44 <SystemClock_Config+0x110>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	4b34      	ldr	r3, [pc, #208]	; (8000c48 <SystemClock_Config+0x114>)
 8000b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b78:	4a33      	ldr	r2, [pc, #204]	; (8000c48 <SystemClock_Config+0x114>)
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b80:	4b31      	ldr	r3, [pc, #196]	; (8000c48 <SystemClock_Config+0x114>)
 8000b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b8c:	bf00      	nop
 8000b8e:	4b2d      	ldr	r3, [pc, #180]	; (8000c44 <SystemClock_Config+0x110>)
 8000b90:	699b      	ldr	r3, [r3, #24]
 8000b92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b9a:	d1f8      	bne.n	8000b8e <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000b9c:	4b2b      	ldr	r3, [pc, #172]	; (8000c4c <SystemClock_Config+0x118>)
 8000b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba0:	f023 0303 	bic.w	r3, r3, #3
 8000ba4:	4a29      	ldr	r2, [pc, #164]	; (8000c4c <SystemClock_Config+0x118>)
 8000ba6:	f043 0302 	orr.w	r3, r3, #2
 8000baa:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000bac:	2303      	movs	r3, #3
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bb0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bba:	2340      	movs	r3, #64	; 0x40
 8000bbc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000bca:	2378      	movs	r3, #120	; 0x78
 8000bcc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bd2:	2304      	movs	r3, #4
 8000bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bda:	230c      	movs	r3, #12
 8000bdc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bea:	4618      	mov	r0, r3
 8000bec:	f008 fc8e 	bl	800950c <HAL_RCC_OscConfig>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000bf6:	f001 f925 	bl	8001e44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfa:	233f      	movs	r3, #63	; 0x3f
 8000bfc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c06:	2308      	movs	r3, #8
 8000c08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c0a:	2340      	movs	r3, #64	; 0x40
 8000c0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c0e:	2340      	movs	r3, #64	; 0x40
 8000c10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c16:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c18:	2340      	movs	r3, #64	; 0x40
 8000c1a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	2104      	movs	r1, #4
 8000c20:	4618      	mov	r0, r3
 8000c22:	f009 f8a1 	bl	8009d68 <HAL_RCC_ClockConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000c2c:	f001 f90a 	bl	8001e44 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_1);
 8000c30:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000c34:	2100      	movs	r1, #0
 8000c36:	2001      	movs	r0, #1
 8000c38:	f009 fa4c 	bl	800a0d4 <HAL_RCC_MCOConfig>
}
 8000c3c:	bf00      	nop
 8000c3e:	3770      	adds	r7, #112	; 0x70
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	58024800 	.word	0x58024800
 8000c48:	58000400 	.word	0x58000400
 8000c4c:	58024400 	.word	0x58024400

08000c50 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b0b0      	sub	sp, #192	; 0xc0
 8000c54:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	22bc      	movs	r2, #188	; 0xbc
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f012 fa73 	bl	8013148 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c62:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000c66:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 50;
 8000c6c:	2332      	movs	r3, #50	; 0x32
 8000c6e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8000c70:	2308      	movs	r3, #8
 8000c72:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8000c74:	2301      	movs	r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000c7c:	23c0      	movs	r3, #192	; 0xc0
 8000c7e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	4618      	mov	r0, r3
 8000c92:	f009 fc5f 	bl	800a554 <HAL_RCCEx_PeriphCLKConfig>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 8000c9c:	f001 f8d2 	bl	8001e44 <Error_Handler>
  }
}
 8000ca0:	bf00      	nop
 8000ca2:	37c0      	adds	r7, #192	; 0xc0
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cba:	463b      	mov	r3, r7
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
 8000cc8:	615a      	str	r2, [r3, #20]
 8000cca:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ccc:	4b31      	ldr	r3, [pc, #196]	; (8000d94 <MX_ADC1_Init+0xec>)
 8000cce:	4a32      	ldr	r2, [pc, #200]	; (8000d98 <MX_ADC1_Init+0xf0>)
 8000cd0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cd2:	4b30      	ldr	r3, [pc, #192]	; (8000d94 <MX_ADC1_Init+0xec>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000cd8:	4b2e      	ldr	r3, [pc, #184]	; (8000d94 <MX_ADC1_Init+0xec>)
 8000cda:	2210      	movs	r2, #16
 8000cdc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cde:	4b2d      	ldr	r3, [pc, #180]	; (8000d94 <MX_ADC1_Init+0xec>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ce4:	4b2b      	ldr	r3, [pc, #172]	; (8000d94 <MX_ADC1_Init+0xec>)
 8000ce6:	2204      	movs	r2, #4
 8000ce8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cea:	4b2a      	ldr	r3, [pc, #168]	; (8000d94 <MX_ADC1_Init+0xec>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cf0:	4b28      	ldr	r3, [pc, #160]	; (8000d94 <MX_ADC1_Init+0xec>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000cf6:	4b27      	ldr	r3, [pc, #156]	; (8000d94 <MX_ADC1_Init+0xec>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cfc:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <MX_ADC1_Init+0xec>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000d02:	4b24      	ldr	r3, [pc, #144]	; (8000d94 <MX_ADC1_Init+0xec>)
 8000d04:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000d08:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d0a:	4b22      	ldr	r3, [pc, #136]	; (8000d94 <MX_ADC1_Init+0xec>)
 8000d0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 8000d12:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <MX_ADC1_Init+0xec>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d18:	4b1e      	ldr	r3, [pc, #120]	; (8000d94 <MX_ADC1_Init+0xec>)
 8000d1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d1e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d20:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <MX_ADC1_Init+0xec>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d26:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <MX_ADC1_Init+0xec>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d2e:	4819      	ldr	r0, [pc, #100]	; (8000d94 <MX_ADC1_Init+0xec>)
 8000d30:	f001 ffe0 	bl	8002cf4 <HAL_ADC_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000d3a:	f001 f883 	bl	8001e44 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d42:	f107 031c 	add.w	r3, r7, #28
 8000d46:	4619      	mov	r1, r3
 8000d48:	4812      	ldr	r0, [pc, #72]	; (8000d94 <MX_ADC1_Init+0xec>)
 8000d4a:	f003 fc6d 	bl	8004628 <HAL_ADCEx_MultiModeConfigChannel>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000d54:	f001 f876 	bl	8001e44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d58:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <MX_ADC1_Init+0xf4>)
 8000d5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d5c:	2306      	movs	r3, #6
 8000d5e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d60:	2301      	movs	r3, #1
 8000d62:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d64:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d68:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d6a:	2304      	movs	r3, #4
 8000d6c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d76:	463b      	mov	r3, r7
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4806      	ldr	r0, [pc, #24]	; (8000d94 <MX_ADC1_Init+0xec>)
 8000d7c:	f002 fcd0 	bl	8003720 <HAL_ADC_ConfigChannel>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000d86:	f001 f85d 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	3728      	adds	r7, #40	; 0x28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	2400011c 	.word	0x2400011c
 8000d98:	40022000 	.word	0x40022000
 8000d9c:	08600004 	.word	0x08600004

08000da0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
 8000db4:	615a      	str	r2, [r3, #20]
 8000db6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000db8:	4b2a      	ldr	r3, [pc, #168]	; (8000e64 <MX_ADC2_Init+0xc4>)
 8000dba:	4a2b      	ldr	r2, [pc, #172]	; (8000e68 <MX_ADC2_Init+0xc8>)
 8000dbc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000dbe:	4b29      	ldr	r3, [pc, #164]	; (8000e64 <MX_ADC2_Init+0xc4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8000dc4:	4b27      	ldr	r3, [pc, #156]	; (8000e64 <MX_ADC2_Init+0xc4>)
 8000dc6:	2210      	movs	r2, #16
 8000dc8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dca:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <MX_ADC2_Init+0xc4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dd0:	4b24      	ldr	r3, [pc, #144]	; (8000e64 <MX_ADC2_Init+0xc4>)
 8000dd2:	2204      	movs	r2, #4
 8000dd4:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000dd6:	4b23      	ldr	r3, [pc, #140]	; (8000e64 <MX_ADC2_Init+0xc4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ddc:	4b21      	ldr	r3, [pc, #132]	; (8000e64 <MX_ADC2_Init+0xc4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000de2:	4b20      	ldr	r3, [pc, #128]	; (8000e64 <MX_ADC2_Init+0xc4>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000de8:	4b1e      	ldr	r3, [pc, #120]	; (8000e64 <MX_ADC2_Init+0xc4>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000dee:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <MX_ADC2_Init+0xc4>)
 8000df0:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000df4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000df6:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <MX_ADC2_Init+0xc4>)
 8000df8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dfc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 8000dfe:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <MX_ADC2_Init+0xc4>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e04:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <MX_ADC2_Init+0xc4>)
 8000e06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e0a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e0c:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <MX_ADC2_Init+0xc4>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000e12:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <MX_ADC2_Init+0xc4>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e1a:	4812      	ldr	r0, [pc, #72]	; (8000e64 <MX_ADC2_Init+0xc4>)
 8000e1c:	f001 ff6a 	bl	8002cf4 <HAL_ADC_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000e26:	f001 f80d 	bl	8001e44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e2a:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <MX_ADC2_Init+0xcc>)
 8000e2c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e2e:	2306      	movs	r3, #6
 8000e30:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e32:	2301      	movs	r3, #1
 8000e34:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e36:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e3a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4805      	ldr	r0, [pc, #20]	; (8000e64 <MX_ADC2_Init+0xc4>)
 8000e4e:	f002 fc67 	bl	8003720 <HAL_ADC_ConfigChannel>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8000e58:	f000 fff4 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e5c:	bf00      	nop
 8000e5e:	3720      	adds	r7, #32
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	24000180 	.word	0x24000180
 8000e68:	40022100 	.word	0x40022100
 8000e6c:	19200040 	.word	0x19200040

08000e70 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b088      	sub	sp, #32
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
 8000e84:	615a      	str	r2, [r3, #20]
 8000e86:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000e88:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <MX_ADC3_Init+0xc4>)
 8000e8a:	4a2b      	ldr	r2, [pc, #172]	; (8000f38 <MX_ADC3_Init+0xc8>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e8e:	4b29      	ldr	r3, [pc, #164]	; (8000f34 <MX_ADC3_Init+0xc4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_8B;
 8000e94:	4b27      	ldr	r3, [pc, #156]	; (8000f34 <MX_ADC3_Init+0xc4>)
 8000e96:	2210      	movs	r2, #16
 8000e98:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e9a:	4b26      	ldr	r3, [pc, #152]	; (8000f34 <MX_ADC3_Init+0xc4>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ea0:	4b24      	ldr	r3, [pc, #144]	; (8000f34 <MX_ADC3_Init+0xc4>)
 8000ea2:	2204      	movs	r2, #4
 8000ea4:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000ea6:	4b23      	ldr	r3, [pc, #140]	; (8000f34 <MX_ADC3_Init+0xc4>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000eac:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <MX_ADC3_Init+0xc4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000eb2:	4b20      	ldr	r3, [pc, #128]	; (8000f34 <MX_ADC3_Init+0xc4>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <MX_ADC3_Init+0xc4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000ebe:	4b1d      	ldr	r3, [pc, #116]	; (8000f34 <MX_ADC3_Init+0xc4>)
 8000ec0:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000ec4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ec6:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <MX_ADC3_Init+0xc4>)
 8000ec8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ecc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <MX_ADC3_Init+0xc4>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ed4:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <MX_ADC3_Init+0xc4>)
 8000ed6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eda:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000edc:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <MX_ADC3_Init+0xc4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000ee2:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <MX_ADC3_Init+0xc4>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000eea:	4812      	ldr	r0, [pc, #72]	; (8000f34 <MX_ADC3_Init+0xc4>)
 8000eec:	f001 ff02 	bl	8002cf4 <HAL_ADC_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8000ef6:	f000 ffa5 	bl	8001e44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000efa:	2301      	movs	r3, #1
 8000efc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000efe:	2306      	movs	r3, #6
 8000f00:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f02:	2301      	movs	r3, #1
 8000f04:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f06:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f0a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f0c:	2304      	movs	r3, #4
 8000f0e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4805      	ldr	r0, [pc, #20]	; (8000f34 <MX_ADC3_Init+0xc4>)
 8000f1e:	f002 fbff 	bl	8003720 <HAL_ADC_ConfigChannel>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_ADC3_Init+0xbc>
  {
    Error_Handler();
 8000f28:	f000 ff8c 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	3720      	adds	r7, #32
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	240001e4 	.word	0x240001e4
 8000f38:	58026000 	.word	0x58026000

08000f3c <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000f40:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <MX_COMP1_Init+0x54>)
 8000f42:	4a14      	ldr	r2, [pc, #80]	; (8000f94 <MX_COMP1_Init+0x58>)
 8000f44:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 8000f46:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <MX_COMP1_Init+0x54>)
 8000f48:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f4c:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <MX_COMP1_Init+0x54>)
 8000f50:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000f54:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <MX_COMP1_Init+0x54>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_LOW;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <MX_COMP1_Init+0x54>)
 8000f5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f62:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000f64:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <MX_COMP1_Init+0x54>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <MX_COMP1_Init+0x54>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000f70:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <MX_COMP1_Init+0x54>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <MX_COMP1_Init+0x54>)
 8000f78:	2231      	movs	r2, #49	; 0x31
 8000f7a:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000f7c:	4804      	ldr	r0, [pc, #16]	; (8000f90 <MX_COMP1_Init+0x54>)
 8000f7e:	f003 fc31 	bl	80047e4 <HAL_COMP_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_COMP1_Init+0x50>
  {
    Error_Handler();
 8000f88:	f000 ff5c 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	240003b0 	.word	0x240003b0
 8000f94:	5800380c 	.word	0x5800380c

08000f98 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000f9c:	4b13      	ldr	r3, [pc, #76]	; (8000fec <MX_COMP2_Init+0x54>)
 8000f9e:	4a14      	ldr	r2, [pc, #80]	; (8000ff0 <MX_COMP2_Init+0x58>)
 8000fa0:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH2;
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <MX_COMP2_Init+0x54>)
 8000fa4:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000fa8:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <MX_COMP2_Init+0x54>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_COMP2_Init+0x54>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_LOW;
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <MX_COMP2_Init+0x54>)
 8000fb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fbc:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <MX_COMP2_Init+0x54>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_COMP2_Init+0x54>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <MX_COMP2_Init+0x54>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_COMP2_Init+0x54>)
 8000fd2:	2231      	movs	r2, #49	; 0x31
 8000fd4:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_COMP2_Init+0x54>)
 8000fd8:	f003 fc04 	bl	80047e4 <HAL_COMP_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_COMP2_Init+0x4e>
  {
    Error_Handler();
 8000fe2:	f000 ff2f 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	240003dc 	.word	0x240003dc
 8000ff0:	58003810 	.word	0x58003810

08000ff4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	2224      	movs	r2, #36	; 0x24
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f012 f8a1 	bl	8013148 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001006:	4b18      	ldr	r3, [pc, #96]	; (8001068 <MX_DAC1_Init+0x74>)
 8001008:	4a18      	ldr	r2, [pc, #96]	; (800106c <MX_DAC1_Init+0x78>)
 800100a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800100c:	4816      	ldr	r0, [pc, #88]	; (8001068 <MX_DAC1_Init+0x74>)
 800100e:	f003 ff6b 	bl	8004ee8 <HAL_DAC_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001018:	f000 ff14 	bl	8001e44 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800101c:	2300      	movs	r3, #0
 800101e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001020:	2300      	movs	r3, #0
 8001022:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8001028:	2302      	movs	r3, #2
 800102a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	2200      	movs	r2, #0
 8001034:	4619      	mov	r1, r3
 8001036:	480c      	ldr	r0, [pc, #48]	; (8001068 <MX_DAC1_Init+0x74>)
 8001038:	f003 fff0 	bl	800501c <HAL_DAC_ConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001042:	f000 feff 	bl	8001e44 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001046:	2302      	movs	r3, #2
 8001048:	60fb      	str	r3, [r7, #12]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2210      	movs	r2, #16
 800104e:	4619      	mov	r1, r3
 8001050:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_DAC1_Init+0x74>)
 8001052:	f003 ffe3 	bl	800501c <HAL_DAC_ConfigChannel>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 800105c:	f000 fef2 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001060:	bf00      	nop
 8001062:	3728      	adds	r7, #40	; 0x28
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	24000408 	.word	0x24000408
 800106c:	40007400 	.word	0x40007400

08001070 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b096      	sub	sp, #88	; 0x58
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001076:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001082:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
 8001090:	611a      	str	r2, [r3, #16]
 8001092:	615a      	str	r2, [r3, #20]
 8001094:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	222c      	movs	r2, #44	; 0x2c
 800109a:	2100      	movs	r1, #0
 800109c:	4618      	mov	r0, r3
 800109e:	f012 f853 	bl	8013148 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010a2:	4b37      	ldr	r3, [pc, #220]	; (8001180 <MX_TIM1_Init+0x110>)
 80010a4:	4a37      	ldr	r2, [pc, #220]	; (8001184 <MX_TIM1_Init+0x114>)
 80010a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010a8:	4b35      	ldr	r3, [pc, #212]	; (8001180 <MX_TIM1_Init+0x110>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ae:	4b34      	ldr	r3, [pc, #208]	; (8001180 <MX_TIM1_Init+0x110>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 48 - 1;
 80010b4:	4b32      	ldr	r3, [pc, #200]	; (8001180 <MX_TIM1_Init+0x110>)
 80010b6:	222f      	movs	r2, #47	; 0x2f
 80010b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ba:	4b31      	ldr	r3, [pc, #196]	; (8001180 <MX_TIM1_Init+0x110>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010c0:	4b2f      	ldr	r3, [pc, #188]	; (8001180 <MX_TIM1_Init+0x110>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c6:	4b2e      	ldr	r3, [pc, #184]	; (8001180 <MX_TIM1_Init+0x110>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010cc:	482c      	ldr	r0, [pc, #176]	; (8001180 <MX_TIM1_Init+0x110>)
 80010ce:	f00b fc9d 	bl	800ca0c <HAL_TIM_PWM_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80010d8:	f000 feb4 	bl	8001e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010dc:	2320      	movs	r3, #32
 80010de:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010e0:	2300      	movs	r3, #0
 80010e2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010ec:	4619      	mov	r1, r3
 80010ee:	4824      	ldr	r0, [pc, #144]	; (8001180 <MX_TIM1_Init+0x110>)
 80010f0:	f00c fc7a 	bl	800d9e8 <HAL_TIMEx_MasterConfigSynchronization>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80010fa:	f000 fea3 	bl	8001e44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010fe:	2360      	movs	r3, #96	; 0x60
 8001100:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001106:	2300      	movs	r3, #0
 8001108:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800110a:	2300      	movs	r3, #0
 800110c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800110e:	2300      	movs	r3, #0
 8001110:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001112:	2300      	movs	r3, #0
 8001114:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001116:	2300      	movs	r3, #0
 8001118:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800111a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800111e:	2200      	movs	r2, #0
 8001120:	4619      	mov	r1, r3
 8001122:	4817      	ldr	r0, [pc, #92]	; (8001180 <MX_TIM1_Init+0x110>)
 8001124:	f00b ff8e 	bl	800d044 <HAL_TIM_PWM_ConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800112e:	f000 fe89 	bl	8001e44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001132:	2300      	movs	r3, #0
 8001134:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001146:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800114a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001150:	2300      	movs	r3, #0
 8001152:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001154:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800115e:	2300      	movs	r3, #0
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	4619      	mov	r1, r3
 8001166:	4806      	ldr	r0, [pc, #24]	; (8001180 <MX_TIM1_Init+0x110>)
 8001168:	f00c fccc 	bl	800db04 <HAL_TIMEx_ConfigBreakDeadTime>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001172:	f000 fe67 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	3758      	adds	r7, #88	; 0x58
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	2400041c 	.word	0x2400041c
 8001184:	40010000 	.word	0x40010000

08001188 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800118c:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <MX_TIM16_Init+0x48>)
 800118e:	4a11      	ldr	r2, [pc, #68]	; (80011d4 <MX_TIM16_Init+0x4c>)
 8001190:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2000 - 1;
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <MX_TIM16_Init+0x48>)
 8001194:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001198:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <MX_TIM16_Init+0x48>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 12000 - 1;
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <MX_TIM16_Init+0x48>)
 80011a2:	f642 62df 	movw	r2, #11999	; 0x2edf
 80011a6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a8:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <MX_TIM16_Init+0x48>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <MX_TIM16_Init+0x48>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <MX_TIM16_Init+0x48>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <MX_TIM16_Init+0x48>)
 80011bc:	f00b fb56 	bl	800c86c <HAL_TIM_Base_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80011c6:	f000 fe3d 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	24000468 	.word	0x24000468
 80011d4:	40014400 	.word	0x40014400

080011d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011dc:	4b22      	ldr	r3, [pc, #136]	; (8001268 <MX_USART3_UART_Init+0x90>)
 80011de:	4a23      	ldr	r2, [pc, #140]	; (800126c <MX_USART3_UART_Init+0x94>)
 80011e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011e2:	4b21      	ldr	r3, [pc, #132]	; (8001268 <MX_USART3_UART_Init+0x90>)
 80011e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011ea:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <MX_USART3_UART_Init+0x90>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011f0:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <MX_USART3_UART_Init+0x90>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011f6:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <MX_USART3_UART_Init+0x90>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 80011fc:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <MX_USART3_UART_Init+0x90>)
 80011fe:	2208      	movs	r2, #8
 8001200:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <MX_USART3_UART_Init+0x90>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001208:	4b17      	ldr	r3, [pc, #92]	; (8001268 <MX_USART3_UART_Init+0x90>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800120e:	4b16      	ldr	r3, [pc, #88]	; (8001268 <MX_USART3_UART_Init+0x90>)
 8001210:	2200      	movs	r2, #0
 8001212:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <MX_USART3_UART_Init+0x90>)
 8001216:	2200      	movs	r2, #0
 8001218:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <MX_USART3_UART_Init+0x90>)
 800121c:	2200      	movs	r2, #0
 800121e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001220:	4811      	ldr	r0, [pc, #68]	; (8001268 <MX_USART3_UART_Init+0x90>)
 8001222:	f00c fd0b 	bl	800dc3c <HAL_UART_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800122c:	f000 fe0a 	bl	8001e44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001230:	2100      	movs	r1, #0
 8001232:	480d      	ldr	r0, [pc, #52]	; (8001268 <MX_USART3_UART_Init+0x90>)
 8001234:	f00d fca8 	bl	800eb88 <HAL_UARTEx_SetTxFifoThreshold>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800123e:	f000 fe01 	bl	8001e44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001242:	2100      	movs	r1, #0
 8001244:	4808      	ldr	r0, [pc, #32]	; (8001268 <MX_USART3_UART_Init+0x90>)
 8001246:	f00d fcdd 	bl	800ec04 <HAL_UARTEx_SetRxFifoThreshold>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001250:	f000 fdf8 	bl	8001e44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001254:	4804      	ldr	r0, [pc, #16]	; (8001268 <MX_USART3_UART_Init+0x90>)
 8001256:	f00d fc5e 	bl	800eb16 <HAL_UARTEx_DisableFifoMode>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001260:	f000 fdf0 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}
 8001268:	240004b4 	.word	0x240004b4
 800126c:	40004800 	.word	0x40004800

08001270 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001276:	4b35      	ldr	r3, [pc, #212]	; (800134c <MX_DMA_Init+0xdc>)
 8001278:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800127c:	4a33      	ldr	r2, [pc, #204]	; (800134c <MX_DMA_Init+0xdc>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001286:	4b31      	ldr	r3, [pc, #196]	; (800134c <MX_DMA_Init+0xdc>)
 8001288:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001294:	4b2d      	ldr	r3, [pc, #180]	; (800134c <MX_DMA_Init+0xdc>)
 8001296:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800129a:	4a2c      	ldr	r2, [pc, #176]	; (800134c <MX_DMA_Init+0xdc>)
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012a4:	4b29      	ldr	r3, [pc, #164]	; (800134c <MX_DMA_Init+0xdc>)
 80012a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 80012b2:	4b27      	ldr	r3, [pc, #156]	; (8001350 <MX_DMA_Init+0xe0>)
 80012b4:	4a27      	ldr	r2, [pc, #156]	; (8001354 <MX_DMA_Init+0xe4>)
 80012b6:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Request = DMA_REQUEST_MEM2MEM;
 80012b8:	4b25      	ldr	r3, [pc, #148]	; (8001350 <MX_DMA_Init+0xe0>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80012be:	4b24      	ldr	r3, [pc, #144]	; (8001350 <MX_DMA_Init+0xe0>)
 80012c0:	2280      	movs	r2, #128	; 0x80
 80012c2:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 80012c4:	4b22      	ldr	r3, [pc, #136]	; (8001350 <MX_DMA_Init+0xe0>)
 80012c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ca:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 80012cc:	4b20      	ldr	r3, [pc, #128]	; (8001350 <MX_DMA_Init+0xe0>)
 80012ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012d2:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012d4:	4b1e      	ldr	r3, [pc, #120]	; (8001350 <MX_DMA_Init+0xe0>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012da:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <MX_DMA_Init+0xe0>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 80012e0:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <MX_DMA_Init+0xe0>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 80012e6:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <MX_DMA_Init+0xe0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80012ec:	4b18      	ldr	r3, [pc, #96]	; (8001350 <MX_DMA_Init+0xe0>)
 80012ee:	2204      	movs	r2, #4
 80012f0:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80012f2:	4b17      	ldr	r3, [pc, #92]	; (8001350 <MX_DMA_Init+0xe0>)
 80012f4:	2203      	movs	r2, #3
 80012f6:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 80012f8:	4b15      	ldr	r3, [pc, #84]	; (8001350 <MX_DMA_Init+0xe0>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80012fe:	4b14      	ldr	r3, [pc, #80]	; (8001350 <MX_DMA_Init+0xe0>)
 8001300:	2200      	movs	r2, #0
 8001302:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8001304:	4812      	ldr	r0, [pc, #72]	; (8001350 <MX_DMA_Init+0xe0>)
 8001306:	f003 ffb9 	bl	800527c <HAL_DMA_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_DMA_Init+0xa4>
  {
    Error_Handler( );
 8001310:	f000 fd98 	bl	8001e44 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001314:	2200      	movs	r2, #0
 8001316:	2100      	movs	r1, #0
 8001318:	200b      	movs	r0, #11
 800131a:	f003 fd9c 	bl	8004e56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800131e:	200b      	movs	r0, #11
 8001320:	f003 fdb3 	bl	8004e8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001324:	2200      	movs	r2, #0
 8001326:	2100      	movs	r1, #0
 8001328:	200c      	movs	r0, #12
 800132a:	f003 fd94 	bl	8004e56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800132e:	200c      	movs	r0, #12
 8001330:	f003 fdab 	bl	8004e8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001334:	2200      	movs	r2, #0
 8001336:	2100      	movs	r1, #0
 8001338:	200d      	movs	r0, #13
 800133a:	f003 fd8c 	bl	8004e56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800133e:	200d      	movs	r0, #13
 8001340:	f003 fda3 	bl	8004e8a <HAL_NVIC_EnableIRQ>

}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	58024400 	.word	0x58024400
 8001350:	24000544 	.word	0x24000544
 8001354:	40020410 	.word	0x40020410

08001358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08e      	sub	sp, #56	; 0x38
 800135c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800136e:	4b87      	ldr	r3, [pc, #540]	; (800158c <MX_GPIO_Init+0x234>)
 8001370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001374:	4a85      	ldr	r2, [pc, #532]	; (800158c <MX_GPIO_Init+0x234>)
 8001376:	f043 0304 	orr.w	r3, r3, #4
 800137a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800137e:	4b83      	ldr	r3, [pc, #524]	; (800158c <MX_GPIO_Init+0x234>)
 8001380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	623b      	str	r3, [r7, #32]
 800138a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800138c:	4b7f      	ldr	r3, [pc, #508]	; (800158c <MX_GPIO_Init+0x234>)
 800138e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001392:	4a7e      	ldr	r2, [pc, #504]	; (800158c <MX_GPIO_Init+0x234>)
 8001394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001398:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800139c:	4b7b      	ldr	r3, [pc, #492]	; (800158c <MX_GPIO_Init+0x234>)
 800139e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a6:	61fb      	str	r3, [r7, #28]
 80013a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	4b78      	ldr	r3, [pc, #480]	; (800158c <MX_GPIO_Init+0x234>)
 80013ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b0:	4a76      	ldr	r2, [pc, #472]	; (800158c <MX_GPIO_Init+0x234>)
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ba:	4b74      	ldr	r3, [pc, #464]	; (800158c <MX_GPIO_Init+0x234>)
 80013bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	61bb      	str	r3, [r7, #24]
 80013c6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c8:	4b70      	ldr	r3, [pc, #448]	; (800158c <MX_GPIO_Init+0x234>)
 80013ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ce:	4a6f      	ldr	r2, [pc, #444]	; (800158c <MX_GPIO_Init+0x234>)
 80013d0:	f043 0302 	orr.w	r3, r3, #2
 80013d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013d8:	4b6c      	ldr	r3, [pc, #432]	; (800158c <MX_GPIO_Init+0x234>)
 80013da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013e6:	4b69      	ldr	r3, [pc, #420]	; (800158c <MX_GPIO_Init+0x234>)
 80013e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ec:	4a67      	ldr	r2, [pc, #412]	; (800158c <MX_GPIO_Init+0x234>)
 80013ee:	f043 0320 	orr.w	r3, r3, #32
 80013f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013f6:	4b65      	ldr	r3, [pc, #404]	; (800158c <MX_GPIO_Init+0x234>)
 80013f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013fc:	f003 0320 	and.w	r3, r3, #32
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001404:	4b61      	ldr	r3, [pc, #388]	; (800158c <MX_GPIO_Init+0x234>)
 8001406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140a:	4a60      	ldr	r2, [pc, #384]	; (800158c <MX_GPIO_Init+0x234>)
 800140c:	f043 0310 	orr.w	r3, r3, #16
 8001410:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001414:	4b5d      	ldr	r3, [pc, #372]	; (800158c <MX_GPIO_Init+0x234>)
 8001416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800141a:	f003 0310 	and.w	r3, r3, #16
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001422:	4b5a      	ldr	r3, [pc, #360]	; (800158c <MX_GPIO_Init+0x234>)
 8001424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001428:	4a58      	ldr	r2, [pc, #352]	; (800158c <MX_GPIO_Init+0x234>)
 800142a:	f043 0308 	orr.w	r3, r3, #8
 800142e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001432:	4b56      	ldr	r3, [pc, #344]	; (800158c <MX_GPIO_Init+0x234>)
 8001434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001438:	f003 0308 	and.w	r3, r3, #8
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001440:	4b52      	ldr	r3, [pc, #328]	; (800158c <MX_GPIO_Init+0x234>)
 8001442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001446:	4a51      	ldr	r2, [pc, #324]	; (800158c <MX_GPIO_Init+0x234>)
 8001448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800144c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001450:	4b4e      	ldr	r3, [pc, #312]	; (800158c <MX_GPIO_Init+0x234>)
 8001452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|TIM16_OUT_Pin|LD3_Pin, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	f644 0101 	movw	r1, #18433	; 0x4801
 8001464:	484a      	ldr	r0, [pc, #296]	; (8001590 <MX_GPIO_Init+0x238>)
 8001466:	f006 fcaf 	bl	8007dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|MUX_2_A_Pin, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	f240 4104 	movw	r1, #1028	; 0x404
 8001470:	4848      	ldr	r0, [pc, #288]	; (8001594 <MX_GPIO_Init+0x23c>)
 8001472:	f006 fca9 	bl	8007dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MUX_2_C_Pin|MUX_2_B_Pin, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800147c:	4846      	ldr	r0, [pc, #280]	; (8001598 <MX_GPIO_Init+0x240>)
 800147e:	f006 fca3 	bl	8007dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MUX_1_A_Pin|MUX_1_B_Pin|MUX_1_C_Pin, GPIO_PIN_RESET);
 8001482:	2200      	movs	r2, #0
 8001484:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001488:	4844      	ldr	r0, [pc, #272]	; (800159c <MX_GPIO_Init+0x244>)
 800148a:	f006 fc9d 	bl	8007dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	2102      	movs	r1, #2
 8001492:	4843      	ldr	r0, [pc, #268]	; (80015a0 <MX_GPIO_Init+0x248>)
 8001494:	f006 fc98 	bl	8007dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001498:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800149e:	2300      	movs	r3, #0
 80014a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014aa:	4619      	mov	r1, r3
 80014ac:	483b      	ldr	r0, [pc, #236]	; (800159c <MX_GPIO_Init+0x244>)
 80014ae:	f006 fadb 	bl	8007a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin TIM16_OUT_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|TIM16_OUT_Pin|LD3_Pin;
 80014b2:	f644 0301 	movw	r3, #18433	; 0x4801
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c8:	4619      	mov	r1, r3
 80014ca:	4831      	ldr	r0, [pc, #196]	; (8001590 <MX_GPIO_Init+0x238>)
 80014cc:	f006 facc 	bl	8007a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin MUX_2_A_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|MUX_2_A_Pin;
 80014d0:	f240 4304 	movw	r3, #1028	; 0x404
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d6:	2301      	movs	r3, #1
 80014d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e6:	4619      	mov	r1, r3
 80014e8:	482a      	ldr	r0, [pc, #168]	; (8001594 <MX_GPIO_Init+0x23c>)
 80014ea:	f006 fabd 	bl	8007a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80014fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001500:	4619      	mov	r1, r3
 8001502:	4825      	ldr	r0, [pc, #148]	; (8001598 <MX_GPIO_Init+0x240>)
 8001504:	f006 fab0 	bl	8007a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX_2_C_Pin MUX_2_B_Pin */
  GPIO_InitStruct.Pin = MUX_2_C_Pin|MUX_2_B_Pin;
 8001508:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150e:	2301      	movs	r3, #1
 8001510:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800151a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151e:	4619      	mov	r1, r3
 8001520:	481d      	ldr	r0, [pc, #116]	; (8001598 <MX_GPIO_Init+0x240>)
 8001522:	f006 faa1 	bl	8007a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001526:	f44f 7300 	mov.w	r3, #512	; 0x200
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001534:	2300      	movs	r3, #0
 8001536:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001538:	2300      	movs	r3, #0
 800153a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800153c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001540:	4619      	mov	r1, r3
 8001542:	4816      	ldr	r0, [pc, #88]	; (800159c <MX_GPIO_Init+0x244>)
 8001544:	f006 fa90 	bl	8007a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX_1_A_Pin MUX_1_B_Pin MUX_1_C_Pin */
  GPIO_InitStruct.Pin = MUX_1_A_Pin|MUX_1_B_Pin|MUX_1_C_Pin;
 8001548:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154e:	2301      	movs	r3, #1
 8001550:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	2300      	movs	r3, #0
 8001558:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800155a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155e:	4619      	mov	r1, r3
 8001560:	480e      	ldr	r0, [pc, #56]	; (800159c <MX_GPIO_Init+0x244>)
 8001562:	f006 fa81 	bl	8007a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001566:	2302      	movs	r3, #2
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156a:	2301      	movs	r3, #1
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157a:	4619      	mov	r1, r3
 800157c:	4808      	ldr	r0, [pc, #32]	; (80015a0 <MX_GPIO_Init+0x248>)
 800157e:	f006 fa73 	bl	8007a68 <HAL_GPIO_Init>

}
 8001582:	bf00      	nop
 8001584:	3738      	adds	r7, #56	; 0x38
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	58024400 	.word	0x58024400
 8001590:	58020400 	.word	0x58020400
 8001594:	58020c00 	.word	0x58020c00
 8001598:	58021800 	.word	0x58021800
 800159c:	58020800 	.word	0x58020800
 80015a0:	58021000 	.word	0x58021000

080015a4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over (60Hz)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim16)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a11      	ldr	r2, [pc, #68]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d11a      	bne.n	80015ea <HAL_TIM_PeriodElapsedCallback+0x46>
	{
		HAL_GPIO_TogglePin(TIM16_OUT_GPIO_Port, TIM16_OUT_Pin);
 80015b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015b8:	480f      	ldr	r0, [pc, #60]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80015ba:	f006 fc1e 	bl	8007dfa <HAL_GPIO_TogglePin>

		if (ready_to_send_flag)
 80015be:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0x58>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d010      	beq.n	80015ea <HAL_TIM_PeriodElapsedCallback+0x46>
		{
			//CDC_Transmit_FS((uint8_t*) dummy_data_to_send, DATA_TO_SEND_LEN * 3);
			trigger_flag = 0;
 80015c8:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
			CDC_Transmit_FS((uint8_t*) data_to_send, DATA_TO_SEND_LEN * 3);
 80015ce:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80015d2:	480c      	ldr	r0, [pc, #48]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80015d4:	f011 f8ea 	bl	80127ac <CDC_Transmit_FS>
			ready_to_send_flag = 0;
 80015d8:	4b08      	ldr	r3, [pc, #32]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0x58>)
 80015da:	2200      	movs	r2, #0
 80015dc:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Start(&hcomp1);
 80015de:	480a      	ldr	r0, [pc, #40]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80015e0:	f003 fa2a 	bl	8004a38 <HAL_COMP_Start>
			HAL_COMP_Start(&hcomp2);
 80015e4:	4809      	ldr	r0, [pc, #36]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80015e6:	f003 fa27 	bl	8004a38 <HAL_COMP_Start>

		}
		//trigger_flag = RESET;

	}
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	24000468 	.word	0x24000468
 80015f8:	58020400 	.word	0x58020400
 80015fc:	24033a14 	.word	0x24033a14
 8001600:	24033a0c 	.word	0x24033a0c
 8001604:	24033a24 	.word	0x24033a24
 8001608:	240003b0 	.word	0x240003b0
 800160c:	240003dc 	.word	0x240003dc

08001610 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]

	if (hadc == &hadc1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a17      	ldr	r2, [pc, #92]	; (8001678 <HAL_ADC_ConvHalfCpltCallback+0x68>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d109      	bne.n	8001634 <HAL_ADC_ConvHalfCpltCallback+0x24>
	{
		buf_A_quadrant = (buf_A_quadrant + 1) & 3;
 8001620:	4b16      	ldr	r3, [pc, #88]	; (800167c <HAL_ADC_ConvHalfCpltCallback+0x6c>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	3301      	adds	r3, #1
 8001628:	b2db      	uxtb	r3, r3
 800162a:	f003 0303 	and.w	r3, r3, #3
 800162e:	b2da      	uxtb	r2, r3
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_ADC_ConvHalfCpltCallback+0x6c>)
 8001632:	701a      	strb	r2, [r3, #0]
	}
	if (hadc == &hadc2)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a12      	ldr	r2, [pc, #72]	; (8001680 <HAL_ADC_ConvHalfCpltCallback+0x70>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d109      	bne.n	8001650 <HAL_ADC_ConvHalfCpltCallback+0x40>
	{
		buf_B_quadrant = (buf_B_quadrant + 1) & 3;
 800163c:	4b11      	ldr	r3, [pc, #68]	; (8001684 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	3301      	adds	r3, #1
 8001644:	b2db      	uxtb	r3, r3
 8001646:	f003 0303 	and.w	r3, r3, #3
 800164a:	b2da      	uxtb	r2, r3
 800164c:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 800164e:	701a      	strb	r2, [r3, #0]
	}
	if (hadc == &hadc3)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a0d      	ldr	r2, [pc, #52]	; (8001688 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d109      	bne.n	800166c <HAL_ADC_ConvHalfCpltCallback+0x5c>
	{
		buf_C_quadrant = (buf_C_quadrant + 1) & 3;
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <HAL_ADC_ConvHalfCpltCallback+0x7c>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	b2db      	uxtb	r3, r3
 800165e:	3301      	adds	r3, #1
 8001660:	b2db      	uxtb	r3, r3
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	b2da      	uxtb	r2, r3
 8001668:	4b08      	ldr	r3, [pc, #32]	; (800168c <HAL_ADC_ConvHalfCpltCallback+0x7c>)
 800166a:	701a      	strb	r2, [r3, #0]
	}
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	2400011c 	.word	0x2400011c
 800167c:	24033a1c 	.word	0x24033a1c
 8001680:	24000180 	.word	0x24000180
 8001684:	24033a1d 	.word	0x24033a1d
 8001688:	240001e4 	.word	0x240001e4
 800168c:	24033a1e 	.word	0x24033a1e

08001690 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

	if (hadc == &hadc1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a37      	ldr	r2, [pc, #220]	; (8001778 <HAL_ADC_ConvCpltCallback+0xe8>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d11f      	bne.n	80016e0 <HAL_ADC_ConvCpltCallback+0x50>
	{
		buf_A_quadrant++;
 80016a0:	4b36      	ldr	r3, [pc, #216]	; (800177c <HAL_ADC_ConvCpltCallback+0xec>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	3301      	adds	r3, #1
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4b34      	ldr	r3, [pc, #208]	; (800177c <HAL_ADC_ConvCpltCallback+0xec>)
 80016ac:	701a      	strb	r2, [r3, #0]
		if (buf_A_quadrant >= 4)
 80016ae:	4b33      	ldr	r3, [pc, #204]	; (800177c <HAL_ADC_ConvCpltCallback+0xec>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2b03      	cmp	r3, #3
 80016b6:	d908      	bls.n	80016ca <HAL_ADC_ConvCpltCallback+0x3a>
		{
			//HAL_ADC_Stop_DMA(&hadc1);
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_Buf_A_1, ADC_HALF_BUF_LEN * 2);
 80016b8:	f644 6220 	movw	r2, #20000	; 0x4e20
 80016bc:	4930      	ldr	r1, [pc, #192]	; (8001780 <HAL_ADC_ConvCpltCallback+0xf0>)
 80016be:	482e      	ldr	r0, [pc, #184]	; (8001778 <HAL_ADC_ConvCpltCallback+0xe8>)
 80016c0:	f001 fcba 	bl	8003038 <HAL_ADC_Start_DMA>
			buf_A_quadrant = 0;
 80016c4:	4b2d      	ldr	r3, [pc, #180]	; (800177c <HAL_ADC_ConvCpltCallback+0xec>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	701a      	strb	r2, [r3, #0]
		}
		if (buf_A_quadrant == 2)
 80016ca:	4b2c      	ldr	r3, [pc, #176]	; (800177c <HAL_ADC_ConvCpltCallback+0xec>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d105      	bne.n	80016e0 <HAL_ADC_ConvCpltCallback+0x50>
		{
			//HAL_ADC_Stop_DMA(&hadc1);
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_Buf_A_2, ADC_HALF_BUF_LEN * 2);
 80016d4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80016d8:	492a      	ldr	r1, [pc, #168]	; (8001784 <HAL_ADC_ConvCpltCallback+0xf4>)
 80016da:	4827      	ldr	r0, [pc, #156]	; (8001778 <HAL_ADC_ConvCpltCallback+0xe8>)
 80016dc:	f001 fcac 	bl	8003038 <HAL_ADC_Start_DMA>
		}
	}
	if (hadc == &hadc2)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a29      	ldr	r2, [pc, #164]	; (8001788 <HAL_ADC_ConvCpltCallback+0xf8>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d11f      	bne.n	8001728 <HAL_ADC_ConvCpltCallback+0x98>
	{
		buf_B_quadrant++;
 80016e8:	4b28      	ldr	r3, [pc, #160]	; (800178c <HAL_ADC_ConvCpltCallback+0xfc>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	3301      	adds	r3, #1
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	4b26      	ldr	r3, [pc, #152]	; (800178c <HAL_ADC_ConvCpltCallback+0xfc>)
 80016f4:	701a      	strb	r2, [r3, #0]
		if (buf_B_quadrant >= 4)
 80016f6:	4b25      	ldr	r3, [pc, #148]	; (800178c <HAL_ADC_ConvCpltCallback+0xfc>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	d908      	bls.n	8001712 <HAL_ADC_ConvCpltCallback+0x82>
		{
			//HAL_ADC_Stop_DMA(&hadc2);
			HAL_ADC_Start_DMA(&hadc2, (uint32_t*) ADC_Buf_B_1, ADC_HALF_BUF_LEN * 2);
 8001700:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001704:	4922      	ldr	r1, [pc, #136]	; (8001790 <HAL_ADC_ConvCpltCallback+0x100>)
 8001706:	4820      	ldr	r0, [pc, #128]	; (8001788 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001708:	f001 fc96 	bl	8003038 <HAL_ADC_Start_DMA>
			buf_B_quadrant = 0;
 800170c:	4b1f      	ldr	r3, [pc, #124]	; (800178c <HAL_ADC_ConvCpltCallback+0xfc>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
		}
		if (buf_B_quadrant == 2)
 8001712:	4b1e      	ldr	r3, [pc, #120]	; (800178c <HAL_ADC_ConvCpltCallback+0xfc>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d105      	bne.n	8001728 <HAL_ADC_ConvCpltCallback+0x98>
		{
			//HAL_ADC_Stop_DMA(&hadc2);
			HAL_ADC_Start_DMA(&hadc2, (uint32_t*) ADC_Buf_B_2, ADC_HALF_BUF_LEN * 2);
 800171c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001720:	491c      	ldr	r1, [pc, #112]	; (8001794 <HAL_ADC_ConvCpltCallback+0x104>)
 8001722:	4819      	ldr	r0, [pc, #100]	; (8001788 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001724:	f001 fc88 	bl	8003038 <HAL_ADC_Start_DMA>
		}
	}
	if (hadc == &hadc3)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a1b      	ldr	r2, [pc, #108]	; (8001798 <HAL_ADC_ConvCpltCallback+0x108>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d11f      	bne.n	8001770 <HAL_ADC_ConvCpltCallback+0xe0>
	{
		buf_C_quadrant++;
 8001730:	4b1a      	ldr	r3, [pc, #104]	; (800179c <HAL_ADC_ConvCpltCallback+0x10c>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	b2db      	uxtb	r3, r3
 8001736:	3301      	adds	r3, #1
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4b18      	ldr	r3, [pc, #96]	; (800179c <HAL_ADC_ConvCpltCallback+0x10c>)
 800173c:	701a      	strb	r2, [r3, #0]
		if (buf_C_quadrant >= 4)
 800173e:	4b17      	ldr	r3, [pc, #92]	; (800179c <HAL_ADC_ConvCpltCallback+0x10c>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b03      	cmp	r3, #3
 8001746:	d908      	bls.n	800175a <HAL_ADC_ConvCpltCallback+0xca>
		{
			//HAL_ADC_Stop_DMA(&hadc3);
			HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC_Buf_C_1, ADC_HALF_BUF_LEN * 2);
 8001748:	f644 6220 	movw	r2, #20000	; 0x4e20
 800174c:	4914      	ldr	r1, [pc, #80]	; (80017a0 <HAL_ADC_ConvCpltCallback+0x110>)
 800174e:	4812      	ldr	r0, [pc, #72]	; (8001798 <HAL_ADC_ConvCpltCallback+0x108>)
 8001750:	f001 fc72 	bl	8003038 <HAL_ADC_Start_DMA>
			buf_C_quadrant = 0;
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <HAL_ADC_ConvCpltCallback+0x10c>)
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]
		}
		if (buf_C_quadrant == 2)
 800175a:	4b10      	ldr	r3, [pc, #64]	; (800179c <HAL_ADC_ConvCpltCallback+0x10c>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d105      	bne.n	8001770 <HAL_ADC_ConvCpltCallback+0xe0>
		{
			//HAL_ADC_Stop_DMA(&hadc3);
			HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC_Buf_C_2, ADC_HALF_BUF_LEN * 2);
 8001764:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001768:	490e      	ldr	r1, [pc, #56]	; (80017a4 <HAL_ADC_ConvCpltCallback+0x114>)
 800176a:	480b      	ldr	r0, [pc, #44]	; (8001798 <HAL_ADC_ConvCpltCallback+0x108>)
 800176c:	f001 fc64 	bl	8003038 <HAL_ADC_Start_DMA>
		}
	}

}
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	2400011c 	.word	0x2400011c
 800177c:	24033a1c 	.word	0x24033a1c
 8001780:	240005bc 	.word	0x240005bc
 8001784:	2400f01c 	.word	0x2400f01c
 8001788:	24000180 	.word	0x24000180
 800178c:	24033a1d 	.word	0x24033a1d
 8001790:	240053dc 	.word	0x240053dc
 8001794:	24013e3c 	.word	0x24013e3c
 8001798:	240001e4 	.word	0x240001e4
 800179c:	24033a1e 	.word	0x24033a1e
 80017a0:	2400a1fc 	.word	0x2400a1fc
 80017a4:	24018c5c 	.word	0x24018c5c

080017a8 <HAL_COMP_TriggerCallback>:

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	if (!first_triggering)
 80017b0:	4b87      	ldr	r3, [pc, #540]	; (80019d0 <HAL_COMP_TriggerCallback+0x228>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d103      	bne.n	80017c2 <HAL_COMP_TriggerCallback+0x1a>
	{
		first_triggering = 1;
 80017ba:	4b85      	ldr	r3, [pc, #532]	; (80019d0 <HAL_COMP_TriggerCallback+0x228>)
 80017bc:	2201      	movs	r2, #1
 80017be:	701a      	strb	r2, [r3, #0]
		return;
 80017c0:	e102      	b.n	80019c8 <HAL_COMP_TriggerCallback+0x220>
	}
	uint8_t output_level = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	73fb      	strb	r3, [r7, #15]

	//TODO(Attila): event handling
	if (hcomp == &hcomp1 && trigger_flag == 0)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a82      	ldr	r2, [pc, #520]	; (80019d4 <HAL_COMP_TriggerCallback+0x22c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d17a      	bne.n	80018c4 <HAL_COMP_TriggerCallback+0x11c>
 80017ce:	4b82      	ldr	r3, [pc, #520]	; (80019d8 <HAL_COMP_TriggerCallback+0x230>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d175      	bne.n	80018c4 <HAL_COMP_TriggerCallback+0x11c>
	{
		output_level = HAL_COMP_GetOutputLevel( &hcomp1);
 80017d8:	487e      	ldr	r0, [pc, #504]	; (80019d4 <HAL_COMP_TriggerCallback+0x22c>)
 80017da:	f003 fa43 	bl	8004c64 <HAL_COMP_GetOutputLevel>
 80017de:	4603      	mov	r3, r0
 80017e0:	73fb      	strb	r3, [r7, #15]
		trigger_A_pos = __HAL_DMA_GET_COUNTER(&hdma_adc1);
 80017e2:	4b7e      	ldr	r3, [pc, #504]	; (80019dc <HAL_COMP_TriggerCallback+0x234>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a7e      	ldr	r2, [pc, #504]	; (80019e0 <HAL_COMP_TriggerCallback+0x238>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d04a      	beq.n	8001882 <HAL_COMP_TriggerCallback+0xda>
 80017ec:	4b7b      	ldr	r3, [pc, #492]	; (80019dc <HAL_COMP_TriggerCallback+0x234>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a7c      	ldr	r2, [pc, #496]	; (80019e4 <HAL_COMP_TriggerCallback+0x23c>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d045      	beq.n	8001882 <HAL_COMP_TriggerCallback+0xda>
 80017f6:	4b79      	ldr	r3, [pc, #484]	; (80019dc <HAL_COMP_TriggerCallback+0x234>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a7b      	ldr	r2, [pc, #492]	; (80019e8 <HAL_COMP_TriggerCallback+0x240>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d040      	beq.n	8001882 <HAL_COMP_TriggerCallback+0xda>
 8001800:	4b76      	ldr	r3, [pc, #472]	; (80019dc <HAL_COMP_TriggerCallback+0x234>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a79      	ldr	r2, [pc, #484]	; (80019ec <HAL_COMP_TriggerCallback+0x244>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d03b      	beq.n	8001882 <HAL_COMP_TriggerCallback+0xda>
 800180a:	4b74      	ldr	r3, [pc, #464]	; (80019dc <HAL_COMP_TriggerCallback+0x234>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a78      	ldr	r2, [pc, #480]	; (80019f0 <HAL_COMP_TriggerCallback+0x248>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d036      	beq.n	8001882 <HAL_COMP_TriggerCallback+0xda>
 8001814:	4b71      	ldr	r3, [pc, #452]	; (80019dc <HAL_COMP_TriggerCallback+0x234>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a76      	ldr	r2, [pc, #472]	; (80019f4 <HAL_COMP_TriggerCallback+0x24c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d031      	beq.n	8001882 <HAL_COMP_TriggerCallback+0xda>
 800181e:	4b6f      	ldr	r3, [pc, #444]	; (80019dc <HAL_COMP_TriggerCallback+0x234>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a75      	ldr	r2, [pc, #468]	; (80019f8 <HAL_COMP_TriggerCallback+0x250>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d02c      	beq.n	8001882 <HAL_COMP_TriggerCallback+0xda>
 8001828:	4b6c      	ldr	r3, [pc, #432]	; (80019dc <HAL_COMP_TriggerCallback+0x234>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a73      	ldr	r2, [pc, #460]	; (80019fc <HAL_COMP_TriggerCallback+0x254>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d027      	beq.n	8001882 <HAL_COMP_TriggerCallback+0xda>
 8001832:	4b6a      	ldr	r3, [pc, #424]	; (80019dc <HAL_COMP_TriggerCallback+0x234>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a72      	ldr	r2, [pc, #456]	; (8001a00 <HAL_COMP_TriggerCallback+0x258>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d022      	beq.n	8001882 <HAL_COMP_TriggerCallback+0xda>
 800183c:	4b67      	ldr	r3, [pc, #412]	; (80019dc <HAL_COMP_TriggerCallback+0x234>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a70      	ldr	r2, [pc, #448]	; (8001a04 <HAL_COMP_TriggerCallback+0x25c>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d01d      	beq.n	8001882 <HAL_COMP_TriggerCallback+0xda>
 8001846:	4b65      	ldr	r3, [pc, #404]	; (80019dc <HAL_COMP_TriggerCallback+0x234>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a6f      	ldr	r2, [pc, #444]	; (8001a08 <HAL_COMP_TriggerCallback+0x260>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d018      	beq.n	8001882 <HAL_COMP_TriggerCallback+0xda>
 8001850:	4b62      	ldr	r3, [pc, #392]	; (80019dc <HAL_COMP_TriggerCallback+0x234>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a6d      	ldr	r2, [pc, #436]	; (8001a0c <HAL_COMP_TriggerCallback+0x264>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d013      	beq.n	8001882 <HAL_COMP_TriggerCallback+0xda>
 800185a:	4b60      	ldr	r3, [pc, #384]	; (80019dc <HAL_COMP_TriggerCallback+0x234>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a6c      	ldr	r2, [pc, #432]	; (8001a10 <HAL_COMP_TriggerCallback+0x268>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d00e      	beq.n	8001882 <HAL_COMP_TriggerCallback+0xda>
 8001864:	4b5d      	ldr	r3, [pc, #372]	; (80019dc <HAL_COMP_TriggerCallback+0x234>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a6a      	ldr	r2, [pc, #424]	; (8001a14 <HAL_COMP_TriggerCallback+0x26c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d009      	beq.n	8001882 <HAL_COMP_TriggerCallback+0xda>
 800186e:	4b5b      	ldr	r3, [pc, #364]	; (80019dc <HAL_COMP_TriggerCallback+0x234>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a69      	ldr	r2, [pc, #420]	; (8001a18 <HAL_COMP_TriggerCallback+0x270>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d004      	beq.n	8001882 <HAL_COMP_TriggerCallback+0xda>
 8001878:	4b58      	ldr	r3, [pc, #352]	; (80019dc <HAL_COMP_TriggerCallback+0x234>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a67      	ldr	r2, [pc, #412]	; (8001a1c <HAL_COMP_TriggerCallback+0x274>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d104      	bne.n	800188c <HAL_COMP_TriggerCallback+0xe4>
 8001882:	4b56      	ldr	r3, [pc, #344]	; (80019dc <HAL_COMP_TriggerCallback+0x234>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	b29b      	uxth	r3, r3
 800188a:	e003      	b.n	8001894 <HAL_COMP_TriggerCallback+0xec>
 800188c:	4b53      	ldr	r3, [pc, #332]	; (80019dc <HAL_COMP_TriggerCallback+0x234>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	b29b      	uxth	r3, r3
 8001894:	4a62      	ldr	r2, [pc, #392]	; (8001a20 <HAL_COMP_TriggerCallback+0x278>)
 8001896:	8013      	strh	r3, [r2, #0]
		if (options->trigger_channel == 1)
 8001898:	4b62      	ldr	r3, [pc, #392]	; (8001a24 <HAL_COMP_TriggerCallback+0x27c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	799b      	ldrb	r3, [r3, #6]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d110      	bne.n	80018c4 <HAL_COMP_TriggerCallback+0x11c>
		{
			if(output_level != expected_comp_output){
 80018a2:	4b61      	ldr	r3, [pc, #388]	; (8001a28 <HAL_COMP_TriggerCallback+0x280>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	7bfa      	ldrb	r2, [r7, #15]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	f040 808a 	bne.w	80019c2 <HAL_COMP_TriggerCallback+0x21a>
				return;
			}
			trigger_flag = 1;
 80018ae:	4b4a      	ldr	r3, [pc, #296]	; (80019d8 <HAL_COMP_TriggerCallback+0x230>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	701a      	strb	r2, [r3, #0]
			trigger_quadrant = buf_A_quadrant;
 80018b4:	4b5d      	ldr	r3, [pc, #372]	; (8001a2c <HAL_COMP_TriggerCallback+0x284>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4b5d      	ldr	r3, [pc, #372]	; (8001a30 <HAL_COMP_TriggerCallback+0x288>)
 80018bc:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Stop(&hcomp1);
 80018be:	4845      	ldr	r0, [pc, #276]	; (80019d4 <HAL_COMP_TriggerCallback+0x22c>)
 80018c0:	f003 f904 	bl	8004acc <HAL_COMP_Stop>
		}

	}
	if (hcomp == &hcomp2 && trigger_flag == 0)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a5b      	ldr	r2, [pc, #364]	; (8001a34 <HAL_COMP_TriggerCallback+0x28c>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d17d      	bne.n	80019c8 <HAL_COMP_TriggerCallback+0x220>
 80018cc:	4b42      	ldr	r3, [pc, #264]	; (80019d8 <HAL_COMP_TriggerCallback+0x230>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d178      	bne.n	80019c8 <HAL_COMP_TriggerCallback+0x220>
	{
		output_level = HAL_COMP_GetOutputLevel( &hcomp2);
 80018d6:	4857      	ldr	r0, [pc, #348]	; (8001a34 <HAL_COMP_TriggerCallback+0x28c>)
 80018d8:	f003 f9c4 	bl	8004c64 <HAL_COMP_GetOutputLevel>
 80018dc:	4603      	mov	r3, r0
 80018de:	73fb      	strb	r3, [r7, #15]
		trigger_B_pos = __HAL_DMA_GET_COUNTER(&hdma_adc2);
 80018e0:	4b55      	ldr	r3, [pc, #340]	; (8001a38 <HAL_COMP_TriggerCallback+0x290>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a3e      	ldr	r2, [pc, #248]	; (80019e0 <HAL_COMP_TriggerCallback+0x238>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d04a      	beq.n	8001980 <HAL_COMP_TriggerCallback+0x1d8>
 80018ea:	4b53      	ldr	r3, [pc, #332]	; (8001a38 <HAL_COMP_TriggerCallback+0x290>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a3d      	ldr	r2, [pc, #244]	; (80019e4 <HAL_COMP_TriggerCallback+0x23c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d045      	beq.n	8001980 <HAL_COMP_TriggerCallback+0x1d8>
 80018f4:	4b50      	ldr	r3, [pc, #320]	; (8001a38 <HAL_COMP_TriggerCallback+0x290>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a3b      	ldr	r2, [pc, #236]	; (80019e8 <HAL_COMP_TriggerCallback+0x240>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d040      	beq.n	8001980 <HAL_COMP_TriggerCallback+0x1d8>
 80018fe:	4b4e      	ldr	r3, [pc, #312]	; (8001a38 <HAL_COMP_TriggerCallback+0x290>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a3a      	ldr	r2, [pc, #232]	; (80019ec <HAL_COMP_TriggerCallback+0x244>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d03b      	beq.n	8001980 <HAL_COMP_TriggerCallback+0x1d8>
 8001908:	4b4b      	ldr	r3, [pc, #300]	; (8001a38 <HAL_COMP_TriggerCallback+0x290>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a38      	ldr	r2, [pc, #224]	; (80019f0 <HAL_COMP_TriggerCallback+0x248>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d036      	beq.n	8001980 <HAL_COMP_TriggerCallback+0x1d8>
 8001912:	4b49      	ldr	r3, [pc, #292]	; (8001a38 <HAL_COMP_TriggerCallback+0x290>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a37      	ldr	r2, [pc, #220]	; (80019f4 <HAL_COMP_TriggerCallback+0x24c>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d031      	beq.n	8001980 <HAL_COMP_TriggerCallback+0x1d8>
 800191c:	4b46      	ldr	r3, [pc, #280]	; (8001a38 <HAL_COMP_TriggerCallback+0x290>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a35      	ldr	r2, [pc, #212]	; (80019f8 <HAL_COMP_TriggerCallback+0x250>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d02c      	beq.n	8001980 <HAL_COMP_TriggerCallback+0x1d8>
 8001926:	4b44      	ldr	r3, [pc, #272]	; (8001a38 <HAL_COMP_TriggerCallback+0x290>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a34      	ldr	r2, [pc, #208]	; (80019fc <HAL_COMP_TriggerCallback+0x254>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d027      	beq.n	8001980 <HAL_COMP_TriggerCallback+0x1d8>
 8001930:	4b41      	ldr	r3, [pc, #260]	; (8001a38 <HAL_COMP_TriggerCallback+0x290>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a32      	ldr	r2, [pc, #200]	; (8001a00 <HAL_COMP_TriggerCallback+0x258>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d022      	beq.n	8001980 <HAL_COMP_TriggerCallback+0x1d8>
 800193a:	4b3f      	ldr	r3, [pc, #252]	; (8001a38 <HAL_COMP_TriggerCallback+0x290>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a31      	ldr	r2, [pc, #196]	; (8001a04 <HAL_COMP_TriggerCallback+0x25c>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d01d      	beq.n	8001980 <HAL_COMP_TriggerCallback+0x1d8>
 8001944:	4b3c      	ldr	r3, [pc, #240]	; (8001a38 <HAL_COMP_TriggerCallback+0x290>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a2f      	ldr	r2, [pc, #188]	; (8001a08 <HAL_COMP_TriggerCallback+0x260>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d018      	beq.n	8001980 <HAL_COMP_TriggerCallback+0x1d8>
 800194e:	4b3a      	ldr	r3, [pc, #232]	; (8001a38 <HAL_COMP_TriggerCallback+0x290>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a2e      	ldr	r2, [pc, #184]	; (8001a0c <HAL_COMP_TriggerCallback+0x264>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d013      	beq.n	8001980 <HAL_COMP_TriggerCallback+0x1d8>
 8001958:	4b37      	ldr	r3, [pc, #220]	; (8001a38 <HAL_COMP_TriggerCallback+0x290>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a2c      	ldr	r2, [pc, #176]	; (8001a10 <HAL_COMP_TriggerCallback+0x268>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d00e      	beq.n	8001980 <HAL_COMP_TriggerCallback+0x1d8>
 8001962:	4b35      	ldr	r3, [pc, #212]	; (8001a38 <HAL_COMP_TriggerCallback+0x290>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a2b      	ldr	r2, [pc, #172]	; (8001a14 <HAL_COMP_TriggerCallback+0x26c>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d009      	beq.n	8001980 <HAL_COMP_TriggerCallback+0x1d8>
 800196c:	4b32      	ldr	r3, [pc, #200]	; (8001a38 <HAL_COMP_TriggerCallback+0x290>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a29      	ldr	r2, [pc, #164]	; (8001a18 <HAL_COMP_TriggerCallback+0x270>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d004      	beq.n	8001980 <HAL_COMP_TriggerCallback+0x1d8>
 8001976:	4b30      	ldr	r3, [pc, #192]	; (8001a38 <HAL_COMP_TriggerCallback+0x290>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a28      	ldr	r2, [pc, #160]	; (8001a1c <HAL_COMP_TriggerCallback+0x274>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d104      	bne.n	800198a <HAL_COMP_TriggerCallback+0x1e2>
 8001980:	4b2d      	ldr	r3, [pc, #180]	; (8001a38 <HAL_COMP_TriggerCallback+0x290>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	b29b      	uxth	r3, r3
 8001988:	e003      	b.n	8001992 <HAL_COMP_TriggerCallback+0x1ea>
 800198a:	4b2b      	ldr	r3, [pc, #172]	; (8001a38 <HAL_COMP_TriggerCallback+0x290>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	b29b      	uxth	r3, r3
 8001992:	4a2a      	ldr	r2, [pc, #168]	; (8001a3c <HAL_COMP_TriggerCallback+0x294>)
 8001994:	8013      	strh	r3, [r2, #0]
		if (options->trigger_channel == 2)
 8001996:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <HAL_COMP_TriggerCallback+0x27c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	799b      	ldrb	r3, [r3, #6]
 800199c:	2b02      	cmp	r3, #2
 800199e:	d113      	bne.n	80019c8 <HAL_COMP_TriggerCallback+0x220>
		{
			if(output_level != expected_comp_output){
 80019a0:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <HAL_COMP_TriggerCallback+0x280>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	7bfa      	ldrb	r2, [r7, #15]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d10d      	bne.n	80019c6 <HAL_COMP_TriggerCallback+0x21e>
				return;
			}
			trigger_flag = 1;
 80019aa:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <HAL_COMP_TriggerCallback+0x230>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	701a      	strb	r2, [r3, #0]
			trigger_quadrant = buf_B_quadrant;
 80019b0:	4b23      	ldr	r3, [pc, #140]	; (8001a40 <HAL_COMP_TriggerCallback+0x298>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <HAL_COMP_TriggerCallback+0x288>)
 80019b8:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Stop(&hcomp2);
 80019ba:	481e      	ldr	r0, [pc, #120]	; (8001a34 <HAL_COMP_TriggerCallback+0x28c>)
 80019bc:	f003 f886 	bl	8004acc <HAL_COMP_Stop>
 80019c0:	e002      	b.n	80019c8 <HAL_COMP_TriggerCallback+0x220>
				return;
 80019c2:	bf00      	nop
 80019c4:	e000      	b.n	80019c8 <HAL_COMP_TriggerCallback+0x220>
				return;
 80019c6:	bf00      	nop
		}

	}

}
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	24033a1f 	.word	0x24033a1f
 80019d4:	240003b0 	.word	0x240003b0
 80019d8:	24033a0c 	.word	0x24033a0c
 80019dc:	24000248 	.word	0x24000248
 80019e0:	40020010 	.word	0x40020010
 80019e4:	40020028 	.word	0x40020028
 80019e8:	40020040 	.word	0x40020040
 80019ec:	40020058 	.word	0x40020058
 80019f0:	40020070 	.word	0x40020070
 80019f4:	40020088 	.word	0x40020088
 80019f8:	400200a0 	.word	0x400200a0
 80019fc:	400200b8 	.word	0x400200b8
 8001a00:	40020410 	.word	0x40020410
 8001a04:	40020428 	.word	0x40020428
 8001a08:	40020440 	.word	0x40020440
 8001a0c:	40020458 	.word	0x40020458
 8001a10:	40020470 	.word	0x40020470
 8001a14:	40020488 	.word	0x40020488
 8001a18:	400204a0 	.word	0x400204a0
 8001a1c:	400204b8 	.word	0x400204b8
 8001a20:	24033a0e 	.word	0x24033a0e
 8001a24:	240345dc 	.word	0x240345dc
 8001a28:	24033a20 	.word	0x24033a20
 8001a2c:	24033a1c 	.word	0x24033a1c
 8001a30:	24033a12 	.word	0x24033a12
 8001a34:	240003dc 	.word	0x240003dc
 8001a38:	240002c0 	.word	0x240002c0
 8001a3c:	24033a10 	.word	0x24033a10
 8001a40:	24033a1d 	.word	0x24033a1d

08001a44 <copy_to_tmp_array>:

void copy_to_tmp_array()
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
//		ADC_Buf_B_2[k] = k + adc_buf_len;
//
//		ADC_Buf_C_1[k] = k;
//		ADC_Buf_C_2[k] = k + adc_buf_len;
//	}
	if (trigger_quadrant == 0)
 8001a48:	4b85      	ldr	r3, [pc, #532]	; (8001c60 <copy_to_tmp_array+0x21c>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d13e      	bne.n	8001ad0 <copy_to_tmp_array+0x8c>
	{
		memcpy(ADC_Tmp_Buf_A, ADC_Buf_A_2 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001a52:	4b84      	ldr	r3, [pc, #528]	; (8001c64 <copy_to_tmp_array+0x220>)
 8001a54:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4883      	ldr	r0, [pc, #524]	; (8001c68 <copy_to_tmp_array+0x224>)
 8001a5c:	f011 fb66 	bl	801312c <memcpy>
		memcpy(ADC_Tmp_Buf_A + ADC_HALF_BUF_LEN, ADC_Buf_A_1, ADC_HALF_BUF_LEN);
 8001a60:	4b82      	ldr	r3, [pc, #520]	; (8001c6c <copy_to_tmp_array+0x228>)
 8001a62:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a66:	4982      	ldr	r1, [pc, #520]	; (8001c70 <copy_to_tmp_array+0x22c>)
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f011 fb5f 	bl	801312c <memcpy>
		memcpy(ADC_Tmp_Buf_A + 2 * ADC_HALF_BUF_LEN, ADC_Buf_A_1 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001a6e:	4b81      	ldr	r3, [pc, #516]	; (8001c74 <copy_to_tmp_array+0x230>)
 8001a70:	4981      	ldr	r1, [pc, #516]	; (8001c78 <copy_to_tmp_array+0x234>)
 8001a72:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a76:	4618      	mov	r0, r3
 8001a78:	f011 fb58 	bl	801312c <memcpy>

		memcpy(ADC_Tmp_Buf_B, ADC_Buf_B_2 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001a7c:	4b7f      	ldr	r3, [pc, #508]	; (8001c7c <copy_to_tmp_array+0x238>)
 8001a7e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a82:	4619      	mov	r1, r3
 8001a84:	487e      	ldr	r0, [pc, #504]	; (8001c80 <copy_to_tmp_array+0x23c>)
 8001a86:	f011 fb51 	bl	801312c <memcpy>
		memcpy(ADC_Tmp_Buf_B + ADC_HALF_BUF_LEN, ADC_Buf_B_1, ADC_HALF_BUF_LEN);
 8001a8a:	4b7e      	ldr	r3, [pc, #504]	; (8001c84 <copy_to_tmp_array+0x240>)
 8001a8c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a90:	497d      	ldr	r1, [pc, #500]	; (8001c88 <copy_to_tmp_array+0x244>)
 8001a92:	4618      	mov	r0, r3
 8001a94:	f011 fb4a 	bl	801312c <memcpy>
		memcpy(ADC_Tmp_Buf_B + 2 * ADC_HALF_BUF_LEN, ADC_Buf_B_1 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001a98:	4b7c      	ldr	r3, [pc, #496]	; (8001c8c <copy_to_tmp_array+0x248>)
 8001a9a:	497d      	ldr	r1, [pc, #500]	; (8001c90 <copy_to_tmp_array+0x24c>)
 8001a9c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f011 fb43 	bl	801312c <memcpy>

		memcpy(ADC_Tmp_Buf_C, ADC_Buf_C_2 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001aa6:	4b7b      	ldr	r3, [pc, #492]	; (8001c94 <copy_to_tmp_array+0x250>)
 8001aa8:	f242 7210 	movw	r2, #10000	; 0x2710
 8001aac:	4619      	mov	r1, r3
 8001aae:	487a      	ldr	r0, [pc, #488]	; (8001c98 <copy_to_tmp_array+0x254>)
 8001ab0:	f011 fb3c 	bl	801312c <memcpy>
		memcpy(ADC_Tmp_Buf_C + ADC_HALF_BUF_LEN, ADC_Buf_C_1, ADC_HALF_BUF_LEN);
 8001ab4:	4b79      	ldr	r3, [pc, #484]	; (8001c9c <copy_to_tmp_array+0x258>)
 8001ab6:	f242 7210 	movw	r2, #10000	; 0x2710
 8001aba:	4979      	ldr	r1, [pc, #484]	; (8001ca0 <copy_to_tmp_array+0x25c>)
 8001abc:	4618      	mov	r0, r3
 8001abe:	f011 fb35 	bl	801312c <memcpy>
		memcpy(ADC_Tmp_Buf_C + 2 * ADC_HALF_BUF_LEN, ADC_Buf_C_1 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001ac2:	4b78      	ldr	r3, [pc, #480]	; (8001ca4 <copy_to_tmp_array+0x260>)
 8001ac4:	4978      	ldr	r1, [pc, #480]	; (8001ca8 <copy_to_tmp_array+0x264>)
 8001ac6:	f242 7210 	movw	r2, #10000	; 0x2710
 8001aca:	4618      	mov	r0, r3
 8001acc:	f011 fb2e 	bl	801312c <memcpy>

	}

	if (trigger_quadrant == 1)
 8001ad0:	4b63      	ldr	r3, [pc, #396]	; (8001c60 <copy_to_tmp_array+0x21c>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d13b      	bne.n	8001b52 <copy_to_tmp_array+0x10e>
	{
		memcpy(ADC_Tmp_Buf_A, ADC_Buf_A_1, ADC_HALF_BUF_LEN);
 8001ada:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ade:	4964      	ldr	r1, [pc, #400]	; (8001c70 <copy_to_tmp_array+0x22c>)
 8001ae0:	4861      	ldr	r0, [pc, #388]	; (8001c68 <copy_to_tmp_array+0x224>)
 8001ae2:	f011 fb23 	bl	801312c <memcpy>
		memcpy(ADC_Tmp_Buf_A + ADC_HALF_BUF_LEN, ADC_Buf_A_1 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001ae6:	4b61      	ldr	r3, [pc, #388]	; (8001c6c <copy_to_tmp_array+0x228>)
 8001ae8:	4963      	ldr	r1, [pc, #396]	; (8001c78 <copy_to_tmp_array+0x234>)
 8001aea:	f242 7210 	movw	r2, #10000	; 0x2710
 8001aee:	4618      	mov	r0, r3
 8001af0:	f011 fb1c 	bl	801312c <memcpy>
		memcpy(ADC_Tmp_Buf_A + 2 * ADC_HALF_BUF_LEN, ADC_Buf_A_2, ADC_HALF_BUF_LEN);
 8001af4:	4b5f      	ldr	r3, [pc, #380]	; (8001c74 <copy_to_tmp_array+0x230>)
 8001af6:	f242 7210 	movw	r2, #10000	; 0x2710
 8001afa:	496c      	ldr	r1, [pc, #432]	; (8001cac <copy_to_tmp_array+0x268>)
 8001afc:	4618      	mov	r0, r3
 8001afe:	f011 fb15 	bl	801312c <memcpy>

		memcpy(ADC_Tmp_Buf_B, ADC_Buf_B_1, ADC_HALF_BUF_LEN);
 8001b02:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b06:	4960      	ldr	r1, [pc, #384]	; (8001c88 <copy_to_tmp_array+0x244>)
 8001b08:	485d      	ldr	r0, [pc, #372]	; (8001c80 <copy_to_tmp_array+0x23c>)
 8001b0a:	f011 fb0f 	bl	801312c <memcpy>
		memcpy(ADC_Tmp_Buf_B + ADC_HALF_BUF_LEN, ADC_Buf_B_1 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001b0e:	4b5d      	ldr	r3, [pc, #372]	; (8001c84 <copy_to_tmp_array+0x240>)
 8001b10:	495f      	ldr	r1, [pc, #380]	; (8001c90 <copy_to_tmp_array+0x24c>)
 8001b12:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b16:	4618      	mov	r0, r3
 8001b18:	f011 fb08 	bl	801312c <memcpy>
		memcpy(ADC_Tmp_Buf_B + 2 * ADC_HALF_BUF_LEN, ADC_Buf_B_2, ADC_HALF_BUF_LEN);
 8001b1c:	4b5b      	ldr	r3, [pc, #364]	; (8001c8c <copy_to_tmp_array+0x248>)
 8001b1e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b22:	4963      	ldr	r1, [pc, #396]	; (8001cb0 <copy_to_tmp_array+0x26c>)
 8001b24:	4618      	mov	r0, r3
 8001b26:	f011 fb01 	bl	801312c <memcpy>

		memcpy(ADC_Tmp_Buf_C, ADC_Buf_C_1, ADC_HALF_BUF_LEN);
 8001b2a:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b2e:	495c      	ldr	r1, [pc, #368]	; (8001ca0 <copy_to_tmp_array+0x25c>)
 8001b30:	4859      	ldr	r0, [pc, #356]	; (8001c98 <copy_to_tmp_array+0x254>)
 8001b32:	f011 fafb 	bl	801312c <memcpy>
		memcpy(ADC_Tmp_Buf_C + ADC_HALF_BUF_LEN, ADC_Buf_C_1 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001b36:	4b59      	ldr	r3, [pc, #356]	; (8001c9c <copy_to_tmp_array+0x258>)
 8001b38:	495b      	ldr	r1, [pc, #364]	; (8001ca8 <copy_to_tmp_array+0x264>)
 8001b3a:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f011 faf4 	bl	801312c <memcpy>
		memcpy(ADC_Tmp_Buf_C + 2 * ADC_HALF_BUF_LEN, ADC_Buf_C_2, ADC_HALF_BUF_LEN);
 8001b44:	4b57      	ldr	r3, [pc, #348]	; (8001ca4 <copy_to_tmp_array+0x260>)
 8001b46:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b4a:	495a      	ldr	r1, [pc, #360]	; (8001cb4 <copy_to_tmp_array+0x270>)
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f011 faed 	bl	801312c <memcpy>

	}

	if (trigger_quadrant == 2)
 8001b52:	4b43      	ldr	r3, [pc, #268]	; (8001c60 <copy_to_tmp_array+0x21c>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d13e      	bne.n	8001bda <copy_to_tmp_array+0x196>
	{
		memcpy(ADC_Tmp_Buf_A, ADC_Buf_A_1 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001b5c:	4b46      	ldr	r3, [pc, #280]	; (8001c78 <copy_to_tmp_array+0x234>)
 8001b5e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b62:	4619      	mov	r1, r3
 8001b64:	4840      	ldr	r0, [pc, #256]	; (8001c68 <copy_to_tmp_array+0x224>)
 8001b66:	f011 fae1 	bl	801312c <memcpy>
		memcpy(ADC_Tmp_Buf_A + ADC_HALF_BUF_LEN, ADC_Buf_A_2, ADC_HALF_BUF_LEN);
 8001b6a:	4b40      	ldr	r3, [pc, #256]	; (8001c6c <copy_to_tmp_array+0x228>)
 8001b6c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b70:	494e      	ldr	r1, [pc, #312]	; (8001cac <copy_to_tmp_array+0x268>)
 8001b72:	4618      	mov	r0, r3
 8001b74:	f011 fada 	bl	801312c <memcpy>
		memcpy(ADC_Tmp_Buf_A + 2 * ADC_HALF_BUF_LEN, ADC_Buf_A_2 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001b78:	4b3e      	ldr	r3, [pc, #248]	; (8001c74 <copy_to_tmp_array+0x230>)
 8001b7a:	493a      	ldr	r1, [pc, #232]	; (8001c64 <copy_to_tmp_array+0x220>)
 8001b7c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b80:	4618      	mov	r0, r3
 8001b82:	f011 fad3 	bl	801312c <memcpy>

		memcpy(ADC_Tmp_Buf_B, ADC_Buf_B_1 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001b86:	4b42      	ldr	r3, [pc, #264]	; (8001c90 <copy_to_tmp_array+0x24c>)
 8001b88:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	483c      	ldr	r0, [pc, #240]	; (8001c80 <copy_to_tmp_array+0x23c>)
 8001b90:	f011 facc 	bl	801312c <memcpy>
		memcpy(ADC_Tmp_Buf_B + ADC_HALF_BUF_LEN, ADC_Buf_B_2, ADC_HALF_BUF_LEN);
 8001b94:	4b3b      	ldr	r3, [pc, #236]	; (8001c84 <copy_to_tmp_array+0x240>)
 8001b96:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b9a:	4945      	ldr	r1, [pc, #276]	; (8001cb0 <copy_to_tmp_array+0x26c>)
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f011 fac5 	bl	801312c <memcpy>
		memcpy(ADC_Tmp_Buf_B + 2 * ADC_HALF_BUF_LEN, ADC_Buf_B_2 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001ba2:	4b3a      	ldr	r3, [pc, #232]	; (8001c8c <copy_to_tmp_array+0x248>)
 8001ba4:	4935      	ldr	r1, [pc, #212]	; (8001c7c <copy_to_tmp_array+0x238>)
 8001ba6:	f242 7210 	movw	r2, #10000	; 0x2710
 8001baa:	4618      	mov	r0, r3
 8001bac:	f011 fabe 	bl	801312c <memcpy>

		memcpy(ADC_Tmp_Buf_C, ADC_Buf_C_1 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001bb0:	4b3d      	ldr	r3, [pc, #244]	; (8001ca8 <copy_to_tmp_array+0x264>)
 8001bb2:	f242 7210 	movw	r2, #10000	; 0x2710
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4837      	ldr	r0, [pc, #220]	; (8001c98 <copy_to_tmp_array+0x254>)
 8001bba:	f011 fab7 	bl	801312c <memcpy>
		memcpy(ADC_Tmp_Buf_C + ADC_HALF_BUF_LEN, ADC_Buf_C_2, ADC_HALF_BUF_LEN);
 8001bbe:	4b37      	ldr	r3, [pc, #220]	; (8001c9c <copy_to_tmp_array+0x258>)
 8001bc0:	f242 7210 	movw	r2, #10000	; 0x2710
 8001bc4:	493b      	ldr	r1, [pc, #236]	; (8001cb4 <copy_to_tmp_array+0x270>)
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f011 fab0 	bl	801312c <memcpy>
		memcpy(ADC_Tmp_Buf_C + 2 * ADC_HALF_BUF_LEN, ADC_Buf_C_2 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001bcc:	4b35      	ldr	r3, [pc, #212]	; (8001ca4 <copy_to_tmp_array+0x260>)
 8001bce:	4931      	ldr	r1, [pc, #196]	; (8001c94 <copy_to_tmp_array+0x250>)
 8001bd0:	f242 7210 	movw	r2, #10000	; 0x2710
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f011 faa9 	bl	801312c <memcpy>

	}

	if (trigger_quadrant == 3)
 8001bda:	4b21      	ldr	r3, [pc, #132]	; (8001c60 <copy_to_tmp_array+0x21c>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d13b      	bne.n	8001c5c <copy_to_tmp_array+0x218>
	{
		memcpy(ADC_Tmp_Buf_A, ADC_Buf_A_2, ADC_HALF_BUF_LEN);
 8001be4:	f242 7210 	movw	r2, #10000	; 0x2710
 8001be8:	4930      	ldr	r1, [pc, #192]	; (8001cac <copy_to_tmp_array+0x268>)
 8001bea:	481f      	ldr	r0, [pc, #124]	; (8001c68 <copy_to_tmp_array+0x224>)
 8001bec:	f011 fa9e 	bl	801312c <memcpy>
		memcpy(ADC_Tmp_Buf_A + ADC_HALF_BUF_LEN, ADC_Buf_A_2 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001bf0:	4b1e      	ldr	r3, [pc, #120]	; (8001c6c <copy_to_tmp_array+0x228>)
 8001bf2:	491c      	ldr	r1, [pc, #112]	; (8001c64 <copy_to_tmp_array+0x220>)
 8001bf4:	f242 7210 	movw	r2, #10000	; 0x2710
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f011 fa97 	bl	801312c <memcpy>
		memcpy(ADC_Tmp_Buf_A + 2 * ADC_HALF_BUF_LEN, ADC_Buf_A_1, ADC_HALF_BUF_LEN);
 8001bfe:	4b1d      	ldr	r3, [pc, #116]	; (8001c74 <copy_to_tmp_array+0x230>)
 8001c00:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c04:	491a      	ldr	r1, [pc, #104]	; (8001c70 <copy_to_tmp_array+0x22c>)
 8001c06:	4618      	mov	r0, r3
 8001c08:	f011 fa90 	bl	801312c <memcpy>

		memcpy(ADC_Tmp_Buf_B, ADC_Buf_B_2, ADC_HALF_BUF_LEN);
 8001c0c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c10:	4927      	ldr	r1, [pc, #156]	; (8001cb0 <copy_to_tmp_array+0x26c>)
 8001c12:	481b      	ldr	r0, [pc, #108]	; (8001c80 <copy_to_tmp_array+0x23c>)
 8001c14:	f011 fa8a 	bl	801312c <memcpy>
		memcpy(ADC_Tmp_Buf_B + ADC_HALF_BUF_LEN, ADC_Buf_B_2 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001c18:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <copy_to_tmp_array+0x240>)
 8001c1a:	4918      	ldr	r1, [pc, #96]	; (8001c7c <copy_to_tmp_array+0x238>)
 8001c1c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c20:	4618      	mov	r0, r3
 8001c22:	f011 fa83 	bl	801312c <memcpy>
		memcpy(ADC_Tmp_Buf_B + 2 * ADC_HALF_BUF_LEN, ADC_Buf_B_1, ADC_HALF_BUF_LEN);
 8001c26:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <copy_to_tmp_array+0x248>)
 8001c28:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c2c:	4916      	ldr	r1, [pc, #88]	; (8001c88 <copy_to_tmp_array+0x244>)
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f011 fa7c 	bl	801312c <memcpy>

		memcpy(ADC_Tmp_Buf_C, ADC_Buf_C_2, ADC_HALF_BUF_LEN);
 8001c34:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c38:	491e      	ldr	r1, [pc, #120]	; (8001cb4 <copy_to_tmp_array+0x270>)
 8001c3a:	4817      	ldr	r0, [pc, #92]	; (8001c98 <copy_to_tmp_array+0x254>)
 8001c3c:	f011 fa76 	bl	801312c <memcpy>
		memcpy(ADC_Tmp_Buf_C + ADC_HALF_BUF_LEN, ADC_Buf_C_2 + ADC_HALF_BUF_LEN, ADC_HALF_BUF_LEN);
 8001c40:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <copy_to_tmp_array+0x258>)
 8001c42:	4914      	ldr	r1, [pc, #80]	; (8001c94 <copy_to_tmp_array+0x250>)
 8001c44:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f011 fa6f 	bl	801312c <memcpy>
		memcpy(ADC_Tmp_Buf_C + 2 * ADC_HALF_BUF_LEN, ADC_Buf_C_1, ADC_HALF_BUF_LEN);
 8001c4e:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <copy_to_tmp_array+0x260>)
 8001c50:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c54:	4912      	ldr	r1, [pc, #72]	; (8001ca0 <copy_to_tmp_array+0x25c>)
 8001c56:	4618      	mov	r0, r3
 8001c58:	f011 fa68 	bl	801312c <memcpy>
	}
}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	24033a12 	.word	0x24033a12
 8001c64:	2401172c 	.word	0x2401172c
 8001c68:	2401da7c 	.word	0x2401da7c
 8001c6c:	2402018c 	.word	0x2402018c
 8001c70:	240005bc 	.word	0x240005bc
 8001c74:	2402289c 	.word	0x2402289c
 8001c78:	24002ccc 	.word	0x24002ccc
 8001c7c:	2401654c 	.word	0x2401654c
 8001c80:	24024fac 	.word	0x24024fac
 8001c84:	240276bc 	.word	0x240276bc
 8001c88:	240053dc 	.word	0x240053dc
 8001c8c:	24029dcc 	.word	0x24029dcc
 8001c90:	24007aec 	.word	0x24007aec
 8001c94:	2401b36c 	.word	0x2401b36c
 8001c98:	2402c4dc 	.word	0x2402c4dc
 8001c9c:	2402ebec 	.word	0x2402ebec
 8001ca0:	2400a1fc 	.word	0x2400a1fc
 8001ca4:	240312fc 	.word	0x240312fc
 8001ca8:	2400c90c 	.word	0x2400c90c
 8001cac:	2400f01c 	.word	0x2400f01c
 8001cb0:	24013e3c 	.word	0x24013e3c
 8001cb4:	24018c5c 	.word	0x24018c5c

08001cb8 <prepare_data_to_send>:

void prepare_data_to_send(uint16_t trigger_pos)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b087      	sub	sp, #28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	80fb      	strh	r3, [r7, #6]
	if (trigger_quadrant == 1 || trigger_quadrant == 3)
 8001cc2:	4b58      	ldr	r3, [pc, #352]	; (8001e24 <prepare_data_to_send+0x16c>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d004      	beq.n	8001cd6 <prepare_data_to_send+0x1e>
 8001ccc:	4b55      	ldr	r3, [pc, #340]	; (8001e24 <prepare_data_to_send+0x16c>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b03      	cmp	r3, #3
 8001cd4:	d104      	bne.n	8001ce0 <prepare_data_to_send+0x28>
	{
		trigger_pos += ADC_HALF_BUF_LEN;
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001cdc:	3310      	adds	r3, #16
 8001cde:	80fb      	strh	r3, [r7, #6]
	}
	uint32_t i = trigger_pos;
 8001ce0:	88fb      	ldrh	r3, [r7, #6]
 8001ce2:	617b      	str	r3, [r7, #20]
	uint8_t step = options->time_scale + 1;
 8001ce4:	4b50      	ldr	r3, [pc, #320]	; (8001e28 <prepare_data_to_send+0x170>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	79db      	ldrb	r3, [r3, #7]
 8001cea:	3301      	adds	r3, #1
 8001cec:	74fb      	strb	r3, [r7, #19]
	uint16_t interval = DATA_TO_SEND_LEN * step - 1;
 8001cee:	7cfb      	ldrb	r3, [r7, #19]
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	0152      	lsls	r2, r2, #5
 8001cf6:	1ad2      	subs	r2, r2, r3
 8001cf8:	0092      	lsls	r2, r2, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	3b01      	subs	r3, #1
 8001d02:	823b      	strh	r3, [r7, #16]
	uint16_t half_interval = interval / 2;
 8001d04:	8a3b      	ldrh	r3, [r7, #16]
 8001d06:	085b      	lsrs	r3, r3, #1
 8001d08:	81fb      	strh	r3, [r7, #14]
	uint16_t half_data_to_send_len = DATA_TO_SEND_LEN / 2;
 8001d0a:	23fa      	movs	r3, #250	; 0xfa
 8001d0c:	81bb      	strh	r3, [r7, #12]
	data_to_send[0] = 0;
 8001d0e:	4b47      	ldr	r3, [pc, #284]	; (8001e2c <prepare_data_to_send+0x174>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]
	data_to_send[DATA_TO_SEND_LEN] = 1;
 8001d14:	4b45      	ldr	r3, [pc, #276]	; (8001e2c <prepare_data_to_send+0x174>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
	data_to_send[DATA_TO_SEND_LEN * 2] = 2;
 8001d1c:	4b43      	ldr	r3, [pc, #268]	; (8001e2c <prepare_data_to_send+0x174>)
 8001d1e:	2202      	movs	r2, #2
 8001d20:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
	data_to_send[250] = ADC_Tmp_Buf_A[trigger_pos];
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	4a42      	ldr	r2, [pc, #264]	; (8001e30 <prepare_data_to_send+0x178>)
 8001d28:	5cd2      	ldrb	r2, [r2, r3]
 8001d2a:	4b40      	ldr	r3, [pc, #256]	; (8001e2c <prepare_data_to_send+0x174>)
 8001d2c:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
	data_to_send[DATA_TO_SEND_LEN + 250] = ADC_Tmp_Buf_B[trigger_pos];
 8001d30:	88fb      	ldrh	r3, [r7, #6]
 8001d32:	4a40      	ldr	r2, [pc, #256]	; (8001e34 <prepare_data_to_send+0x17c>)
 8001d34:	5cd2      	ldrb	r2, [r2, r3]
 8001d36:	4b3d      	ldr	r3, [pc, #244]	; (8001e2c <prepare_data_to_send+0x174>)
 8001d38:	f883 22ee 	strb.w	r2, [r3, #750]	; 0x2ee
	data_to_send[DATA_TO_SEND_LEN * 2 + 250] = ADC_Tmp_Buf_C[trigger_pos];
 8001d3c:	88fb      	ldrh	r3, [r7, #6]
 8001d3e:	4a3e      	ldr	r2, [pc, #248]	; (8001e38 <prepare_data_to_send+0x180>)
 8001d40:	5cd2      	ldrb	r2, [r2, r3]
 8001d42:	4b3a      	ldr	r3, [pc, #232]	; (8001e2c <prepare_data_to_send+0x174>)
 8001d44:	f883 24e2 	strb.w	r2, [r3, #1250]	; 0x4e2
//		ADC_Tmp_Buf_A[k] = k;
//		ADC_Tmp_Buf_B[k] = k;
//		ADC_Tmp_Buf_C[k] = k;
//	}

	for (i = 1; i < half_data_to_send_len; i++ )
 8001d48:	2301      	movs	r3, #1
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	e029      	b.n	8001da2 <prepare_data_to_send+0xea>
	{
		data_to_send[i] = ADC_Tmp_Buf_A[trigger_pos + i * step];
 8001d4e:	88fa      	ldrh	r2, [r7, #6]
 8001d50:	7cfb      	ldrb	r3, [r7, #19]
 8001d52:	6979      	ldr	r1, [r7, #20]
 8001d54:	fb01 f303 	mul.w	r3, r1, r3
 8001d58:	4413      	add	r3, r2
 8001d5a:	4a35      	ldr	r2, [pc, #212]	; (8001e30 <prepare_data_to_send+0x178>)
 8001d5c:	5cd1      	ldrb	r1, [r2, r3]
 8001d5e:	4a33      	ldr	r2, [pc, #204]	; (8001e2c <prepare_data_to_send+0x174>)
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	4413      	add	r3, r2
 8001d64:	460a      	mov	r2, r1
 8001d66:	701a      	strb	r2, [r3, #0]
		data_to_send[DATA_TO_SEND_LEN + i] = ADC_Tmp_Buf_B[trigger_pos + i * step];
 8001d68:	88fa      	ldrh	r2, [r7, #6]
 8001d6a:	7cfb      	ldrb	r3, [r7, #19]
 8001d6c:	6979      	ldr	r1, [r7, #20]
 8001d6e:	fb01 f303 	mul.w	r3, r1, r3
 8001d72:	441a      	add	r2, r3
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001d7a:	492e      	ldr	r1, [pc, #184]	; (8001e34 <prepare_data_to_send+0x17c>)
 8001d7c:	5c89      	ldrb	r1, [r1, r2]
 8001d7e:	4a2b      	ldr	r2, [pc, #172]	; (8001e2c <prepare_data_to_send+0x174>)
 8001d80:	54d1      	strb	r1, [r2, r3]
		data_to_send[DATA_TO_SEND_LEN + DATA_TO_SEND_LEN + i] = ADC_Tmp_Buf_C[trigger_pos + i * step];
 8001d82:	88fa      	ldrh	r2, [r7, #6]
 8001d84:	7cfb      	ldrb	r3, [r7, #19]
 8001d86:	6979      	ldr	r1, [r7, #20]
 8001d88:	fb01 f303 	mul.w	r3, r1, r3
 8001d8c:	441a      	add	r2, r3
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001d94:	4928      	ldr	r1, [pc, #160]	; (8001e38 <prepare_data_to_send+0x180>)
 8001d96:	5c89      	ldrb	r1, [r1, r2]
 8001d98:	4a24      	ldr	r2, [pc, #144]	; (8001e2c <prepare_data_to_send+0x174>)
 8001d9a:	54d1      	strb	r1, [r2, r3]
	for (i = 1; i < half_data_to_send_len; i++ )
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	617b      	str	r3, [r7, #20]
 8001da2:	89bb      	ldrh	r3, [r7, #12]
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d3d1      	bcc.n	8001d4e <prepare_data_to_send+0x96>

	}

	for (i = half_data_to_send_len; i < DATA_TO_SEND_LEN; i++)
 8001daa:	89bb      	ldrh	r3, [r7, #12]
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	e029      	b.n	8001e04 <prepare_data_to_send+0x14c>
	{
		data_to_send[i] = ADC_Tmp_Buf_A[trigger_pos + i * step];
 8001db0:	88fa      	ldrh	r2, [r7, #6]
 8001db2:	7cfb      	ldrb	r3, [r7, #19]
 8001db4:	6979      	ldr	r1, [r7, #20]
 8001db6:	fb01 f303 	mul.w	r3, r1, r3
 8001dba:	4413      	add	r3, r2
 8001dbc:	4a1c      	ldr	r2, [pc, #112]	; (8001e30 <prepare_data_to_send+0x178>)
 8001dbe:	5cd1      	ldrb	r1, [r2, r3]
 8001dc0:	4a1a      	ldr	r2, [pc, #104]	; (8001e2c <prepare_data_to_send+0x174>)
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	460a      	mov	r2, r1
 8001dc8:	701a      	strb	r2, [r3, #0]
		data_to_send[i + DATA_TO_SEND_LEN] = ADC_Tmp_Buf_B[trigger_pos + i * step];
 8001dca:	88fa      	ldrh	r2, [r7, #6]
 8001dcc:	7cfb      	ldrb	r3, [r7, #19]
 8001dce:	6979      	ldr	r1, [r7, #20]
 8001dd0:	fb01 f303 	mul.w	r3, r1, r3
 8001dd4:	441a      	add	r2, r3
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001ddc:	4915      	ldr	r1, [pc, #84]	; (8001e34 <prepare_data_to_send+0x17c>)
 8001dde:	5c89      	ldrb	r1, [r1, r2]
 8001de0:	4a12      	ldr	r2, [pc, #72]	; (8001e2c <prepare_data_to_send+0x174>)
 8001de2:	54d1      	strb	r1, [r2, r3]
		data_to_send[i + DATA_TO_SEND_LEN + DATA_TO_SEND_LEN] = ADC_Tmp_Buf_C[trigger_pos + i * step];
 8001de4:	88fa      	ldrh	r2, [r7, #6]
 8001de6:	7cfb      	ldrb	r3, [r7, #19]
 8001de8:	6979      	ldr	r1, [r7, #20]
 8001dea:	fb01 f303 	mul.w	r3, r1, r3
 8001dee:	441a      	add	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001df6:	4910      	ldr	r1, [pc, #64]	; (8001e38 <prepare_data_to_send+0x180>)
 8001df8:	5c89      	ldrb	r1, [r1, r2]
 8001dfa:	4a0c      	ldr	r2, [pc, #48]	; (8001e2c <prepare_data_to_send+0x174>)
 8001dfc:	54d1      	strb	r1, [r2, r3]
	for (i = half_data_to_send_len; i < DATA_TO_SEND_LEN; i++)
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	3301      	adds	r3, #1
 8001e02:	617b      	str	r3, [r7, #20]
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e0a:	d3d1      	bcc.n	8001db0 <prepare_data_to_send+0xf8>

	}

	trigger_flag = 0;
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <prepare_data_to_send+0x184>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	701a      	strb	r2, [r3, #0]
	ready_to_send_flag = 1;
 8001e12:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <prepare_data_to_send+0x188>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	701a      	strb	r2, [r3, #0]
}
 8001e18:	bf00      	nop
 8001e1a:	371c      	adds	r7, #28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	24033a12 	.word	0x24033a12
 8001e28:	240345dc 	.word	0x240345dc
 8001e2c:	24033a24 	.word	0x24033a24
 8001e30:	2401da7c 	.word	0x2401da7c
 8001e34:	24024fac 	.word	0x24024fac
 8001e38:	2402c4dc 	.word	0x2402c4dc
 8001e3c:	24033a0c 	.word	0x24033a0c
 8001e40:	24033a14 	.word	0x24033a14

08001e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001e48:	2101      	movs	r1, #1
 8001e4a:	4806      	ldr	r0, [pc, #24]	; (8001e64 <Error_Handler+0x20>)
 8001e4c:	f005 ffd5 	bl	8007dfa <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001e50:	2201      	movs	r2, #1
 8001e52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e56:	4803      	ldr	r0, [pc, #12]	; (8001e64 <Error_Handler+0x20>)
 8001e58:	f005 ffb6 	bl	8007dc8 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e5c:	b672      	cpsid	i
}
 8001e5e:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001e60:	e7fe      	b.n	8001e60 <Error_Handler+0x1c>
 8001e62:	bf00      	nop
 8001e64:	58020400 	.word	0x58020400

08001e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6e:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <HAL_MspInit+0x54>)
 8001e70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e74:	4a11      	ldr	r2, [pc, #68]	; (8001ebc <HAL_MspInit+0x54>)
 8001e76:	f043 0302 	orr.w	r3, r3, #2
 8001e7a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e7e:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <HAL_MspInit+0x54>)
 8001e80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	607b      	str	r3, [r7, #4]
 8001e8a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <HAL_MspInit+0x54>)
 8001e8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e92:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <HAL_MspInit+0x54>)
 8001e94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e98:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e9c:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <HAL_MspInit+0x54>)
 8001e9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ea2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ea6:	603b      	str	r3, [r7, #0]
 8001ea8:	683b      	ldr	r3, [r7, #0]

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8001eaa:	f000 fca5 	bl	80027f8 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8001eae:	2002      	movs	r0, #2
 8001eb0:	f000 fc8e 	bl	80027d0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	58024400 	.word	0x58024400

08001ec0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08e      	sub	sp, #56	; 0x38
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4aa0      	ldr	r2, [pc, #640]	; (8002160 <HAL_ADC_MspInit+0x2a0>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d16a      	bne.n	8001fb8 <HAL_ADC_MspInit+0xf8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001ee2:	4ba0      	ldr	r3, [pc, #640]	; (8002164 <HAL_ADC_MspInit+0x2a4>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	4a9e      	ldr	r2, [pc, #632]	; (8002164 <HAL_ADC_MspInit+0x2a4>)
 8001eea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001eec:	4b9d      	ldr	r3, [pc, #628]	; (8002164 <HAL_ADC_MspInit+0x2a4>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d10e      	bne.n	8001f12 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001ef4:	4b9c      	ldr	r3, [pc, #624]	; (8002168 <HAL_ADC_MspInit+0x2a8>)
 8001ef6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001efa:	4a9b      	ldr	r2, [pc, #620]	; (8002168 <HAL_ADC_MspInit+0x2a8>)
 8001efc:	f043 0320 	orr.w	r3, r3, #32
 8001f00:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001f04:	4b98      	ldr	r3, [pc, #608]	; (8002168 <HAL_ADC_MspInit+0x2a8>)
 8001f06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f0a:	f003 0320 	and.w	r3, r3, #32
 8001f0e:	623b      	str	r3, [r7, #32]
 8001f10:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f12:	4b95      	ldr	r3, [pc, #596]	; (8002168 <HAL_ADC_MspInit+0x2a8>)
 8001f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f18:	4a93      	ldr	r2, [pc, #588]	; (8002168 <HAL_ADC_MspInit+0x2a8>)
 8001f1a:	f043 0320 	orr.w	r3, r3, #32
 8001f1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f22:	4b91      	ldr	r3, [pc, #580]	; (8002168 <HAL_ADC_MspInit+0x2a8>)
 8001f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f28:	f003 0320 	and.w	r3, r3, #32
 8001f2c:	61fb      	str	r3, [r7, #28]
 8001f2e:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f36:	2303      	movs	r3, #3
 8001f38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f42:	4619      	mov	r1, r3
 8001f44:	4889      	ldr	r0, [pc, #548]	; (800216c <HAL_ADC_MspInit+0x2ac>)
 8001f46:	f005 fd8f 	bl	8007a68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001f4a:	4b89      	ldr	r3, [pc, #548]	; (8002170 <HAL_ADC_MspInit+0x2b0>)
 8001f4c:	4a89      	ldr	r2, [pc, #548]	; (8002174 <HAL_ADC_MspInit+0x2b4>)
 8001f4e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001f50:	4b87      	ldr	r3, [pc, #540]	; (8002170 <HAL_ADC_MspInit+0x2b0>)
 8001f52:	2209      	movs	r2, #9
 8001f54:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f56:	4b86      	ldr	r3, [pc, #536]	; (8002170 <HAL_ADC_MspInit+0x2b0>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f5c:	4b84      	ldr	r3, [pc, #528]	; (8002170 <HAL_ADC_MspInit+0x2b0>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f62:	4b83      	ldr	r3, [pc, #524]	; (8002170 <HAL_ADC_MspInit+0x2b0>)
 8001f64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f68:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f6a:	4b81      	ldr	r3, [pc, #516]	; (8002170 <HAL_ADC_MspInit+0x2b0>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f70:	4b7f      	ldr	r3, [pc, #508]	; (8002170 <HAL_ADC_MspInit+0x2b0>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001f76:	4b7e      	ldr	r3, [pc, #504]	; (8002170 <HAL_ADC_MspInit+0x2b0>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001f7c:	4b7c      	ldr	r3, [pc, #496]	; (8002170 <HAL_ADC_MspInit+0x2b0>)
 8001f7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f82:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f84:	4b7a      	ldr	r3, [pc, #488]	; (8002170 <HAL_ADC_MspInit+0x2b0>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f8a:	4879      	ldr	r0, [pc, #484]	; (8002170 <HAL_ADC_MspInit+0x2b0>)
 8001f8c:	f003 f976 	bl	800527c <HAL_DMA_Init>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_ADC_MspInit+0xda>
    {
      Error_Handler();
 8001f96:	f7ff ff55 	bl	8001e44 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a74      	ldr	r2, [pc, #464]	; (8002170 <HAL_ADC_MspInit+0x2b0>)
 8001f9e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001fa0:	4a73      	ldr	r2, [pc, #460]	; (8002170 <HAL_ADC_MspInit+0x2b0>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2100      	movs	r1, #0
 8001faa:	2012      	movs	r0, #18
 8001fac:	f002 ff53 	bl	8004e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001fb0:	2012      	movs	r0, #18
 8001fb2:	f002 ff6a 	bl	8004e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001fb6:	e0ce      	b.n	8002156 <HAL_ADC_MspInit+0x296>
  else if(hadc->Instance==ADC2)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a6e      	ldr	r2, [pc, #440]	; (8002178 <HAL_ADC_MspInit+0x2b8>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d16a      	bne.n	8002098 <HAL_ADC_MspInit+0x1d8>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001fc2:	4b68      	ldr	r3, [pc, #416]	; (8002164 <HAL_ADC_MspInit+0x2a4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	4a66      	ldr	r2, [pc, #408]	; (8002164 <HAL_ADC_MspInit+0x2a4>)
 8001fca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001fcc:	4b65      	ldr	r3, [pc, #404]	; (8002164 <HAL_ADC_MspInit+0x2a4>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d10e      	bne.n	8001ff2 <HAL_ADC_MspInit+0x132>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001fd4:	4b64      	ldr	r3, [pc, #400]	; (8002168 <HAL_ADC_MspInit+0x2a8>)
 8001fd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001fda:	4a63      	ldr	r2, [pc, #396]	; (8002168 <HAL_ADC_MspInit+0x2a8>)
 8001fdc:	f043 0320 	orr.w	r3, r3, #32
 8001fe0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001fe4:	4b60      	ldr	r3, [pc, #384]	; (8002168 <HAL_ADC_MspInit+0x2a8>)
 8001fe6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001fea:	f003 0320 	and.w	r3, r3, #32
 8001fee:	61bb      	str	r3, [r7, #24]
 8001ff0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ff2:	4b5d      	ldr	r3, [pc, #372]	; (8002168 <HAL_ADC_MspInit+0x2a8>)
 8001ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ff8:	4a5b      	ldr	r2, [pc, #364]	; (8002168 <HAL_ADC_MspInit+0x2a8>)
 8001ffa:	f043 0320 	orr.w	r3, r3, #32
 8001ffe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002002:	4b59      	ldr	r3, [pc, #356]	; (8002168 <HAL_ADC_MspInit+0x2a8>)
 8002004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002008:	f003 0320 	and.w	r3, r3, #32
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002010:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002016:	2303      	movs	r3, #3
 8002018:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800201e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002022:	4619      	mov	r1, r3
 8002024:	4851      	ldr	r0, [pc, #324]	; (800216c <HAL_ADC_MspInit+0x2ac>)
 8002026:	f005 fd1f 	bl	8007a68 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 800202a:	4b54      	ldr	r3, [pc, #336]	; (800217c <HAL_ADC_MspInit+0x2bc>)
 800202c:	4a54      	ldr	r2, [pc, #336]	; (8002180 <HAL_ADC_MspInit+0x2c0>)
 800202e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8002030:	4b52      	ldr	r3, [pc, #328]	; (800217c <HAL_ADC_MspInit+0x2bc>)
 8002032:	220a      	movs	r2, #10
 8002034:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002036:	4b51      	ldr	r3, [pc, #324]	; (800217c <HAL_ADC_MspInit+0x2bc>)
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800203c:	4b4f      	ldr	r3, [pc, #316]	; (800217c <HAL_ADC_MspInit+0x2bc>)
 800203e:	2200      	movs	r2, #0
 8002040:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002042:	4b4e      	ldr	r3, [pc, #312]	; (800217c <HAL_ADC_MspInit+0x2bc>)
 8002044:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002048:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800204a:	4b4c      	ldr	r3, [pc, #304]	; (800217c <HAL_ADC_MspInit+0x2bc>)
 800204c:	2200      	movs	r2, #0
 800204e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002050:	4b4a      	ldr	r3, [pc, #296]	; (800217c <HAL_ADC_MspInit+0x2bc>)
 8002052:	2200      	movs	r2, #0
 8002054:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8002056:	4b49      	ldr	r3, [pc, #292]	; (800217c <HAL_ADC_MspInit+0x2bc>)
 8002058:	2200      	movs	r2, #0
 800205a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 800205c:	4b47      	ldr	r3, [pc, #284]	; (800217c <HAL_ADC_MspInit+0x2bc>)
 800205e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002062:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002064:	4b45      	ldr	r3, [pc, #276]	; (800217c <HAL_ADC_MspInit+0x2bc>)
 8002066:	2200      	movs	r2, #0
 8002068:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800206a:	4844      	ldr	r0, [pc, #272]	; (800217c <HAL_ADC_MspInit+0x2bc>)
 800206c:	f003 f906 	bl	800527c <HAL_DMA_Init>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_ADC_MspInit+0x1ba>
      Error_Handler();
 8002076:	f7ff fee5 	bl	8001e44 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a3f      	ldr	r2, [pc, #252]	; (800217c <HAL_ADC_MspInit+0x2bc>)
 800207e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002080:	4a3e      	ldr	r2, [pc, #248]	; (800217c <HAL_ADC_MspInit+0x2bc>)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002086:	2200      	movs	r2, #0
 8002088:	2100      	movs	r1, #0
 800208a:	2012      	movs	r0, #18
 800208c:	f002 fee3 	bl	8004e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002090:	2012      	movs	r0, #18
 8002092:	f002 fefa 	bl	8004e8a <HAL_NVIC_EnableIRQ>
}
 8002096:	e05e      	b.n	8002156 <HAL_ADC_MspInit+0x296>
  else if(hadc->Instance==ADC3)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a39      	ldr	r2, [pc, #228]	; (8002184 <HAL_ADC_MspInit+0x2c4>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d159      	bne.n	8002156 <HAL_ADC_MspInit+0x296>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80020a2:	4b31      	ldr	r3, [pc, #196]	; (8002168 <HAL_ADC_MspInit+0x2a8>)
 80020a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020a8:	4a2f      	ldr	r2, [pc, #188]	; (8002168 <HAL_ADC_MspInit+0x2a8>)
 80020aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020b2:	4b2d      	ldr	r3, [pc, #180]	; (8002168 <HAL_ADC_MspInit+0x2a8>)
 80020b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020c0:	4b29      	ldr	r3, [pc, #164]	; (8002168 <HAL_ADC_MspInit+0x2a8>)
 80020c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020c6:	4a28      	ldr	r2, [pc, #160]	; (8002168 <HAL_ADC_MspInit+0x2a8>)
 80020c8:	f043 0304 	orr.w	r3, r3, #4
 80020cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020d0:	4b25      	ldr	r3, [pc, #148]	; (8002168 <HAL_ADC_MspInit+0x2a8>)
 80020d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020d6:	f003 0304 	and.w	r3, r3, #4
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80020de:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80020e2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80020e6:	f000 fb97 	bl	8002818 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream2;
 80020ea:	4b27      	ldr	r3, [pc, #156]	; (8002188 <HAL_ADC_MspInit+0x2c8>)
 80020ec:	4a27      	ldr	r2, [pc, #156]	; (800218c <HAL_ADC_MspInit+0x2cc>)
 80020ee:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80020f0:	4b25      	ldr	r3, [pc, #148]	; (8002188 <HAL_ADC_MspInit+0x2c8>)
 80020f2:	2273      	movs	r2, #115	; 0x73
 80020f4:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020f6:	4b24      	ldr	r3, [pc, #144]	; (8002188 <HAL_ADC_MspInit+0x2c8>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80020fc:	4b22      	ldr	r3, [pc, #136]	; (8002188 <HAL_ADC_MspInit+0x2c8>)
 80020fe:	2200      	movs	r2, #0
 8002100:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002102:	4b21      	ldr	r3, [pc, #132]	; (8002188 <HAL_ADC_MspInit+0x2c8>)
 8002104:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002108:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800210a:	4b1f      	ldr	r3, [pc, #124]	; (8002188 <HAL_ADC_MspInit+0x2c8>)
 800210c:	2200      	movs	r2, #0
 800210e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002110:	4b1d      	ldr	r3, [pc, #116]	; (8002188 <HAL_ADC_MspInit+0x2c8>)
 8002112:	2200      	movs	r2, #0
 8002114:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8002116:	4b1c      	ldr	r3, [pc, #112]	; (8002188 <HAL_ADC_MspInit+0x2c8>)
 8002118:	2200      	movs	r2, #0
 800211a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 800211c:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <HAL_ADC_MspInit+0x2c8>)
 800211e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002122:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002124:	4b18      	ldr	r3, [pc, #96]	; (8002188 <HAL_ADC_MspInit+0x2c8>)
 8002126:	2200      	movs	r2, #0
 8002128:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800212a:	4817      	ldr	r0, [pc, #92]	; (8002188 <HAL_ADC_MspInit+0x2c8>)
 800212c:	f003 f8a6 	bl	800527c <HAL_DMA_Init>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_ADC_MspInit+0x27a>
      Error_Handler();
 8002136:	f7ff fe85 	bl	8001e44 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a12      	ldr	r2, [pc, #72]	; (8002188 <HAL_ADC_MspInit+0x2c8>)
 800213e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002140:	4a11      	ldr	r2, [pc, #68]	; (8002188 <HAL_ADC_MspInit+0x2c8>)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8002146:	2200      	movs	r2, #0
 8002148:	2100      	movs	r1, #0
 800214a:	207f      	movs	r0, #127	; 0x7f
 800214c:	f002 fe83 	bl	8004e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8002150:	207f      	movs	r0, #127	; 0x7f
 8002152:	f002 fe9a 	bl	8004e8a <HAL_NVIC_EnableIRQ>
}
 8002156:	bf00      	nop
 8002158:	3738      	adds	r7, #56	; 0x38
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40022000 	.word	0x40022000
 8002164:	240345e0 	.word	0x240345e0
 8002168:	58024400 	.word	0x58024400
 800216c:	58021400 	.word	0x58021400
 8002170:	24000248 	.word	0x24000248
 8002174:	40020010 	.word	0x40020010
 8002178:	40022100 	.word	0x40022100
 800217c:	240002c0 	.word	0x240002c0
 8002180:	40020028 	.word	0x40020028
 8002184:	58026000 	.word	0x58026000
 8002188:	24000338 	.word	0x24000338
 800218c:	40020040 	.word	0x40020040

08002190 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08c      	sub	sp, #48	; 0x30
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	f107 031c 	add.w	r3, r7, #28
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a41      	ldr	r2, [pc, #260]	; (80022b4 <HAL_COMP_MspInit+0x124>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d13b      	bne.n	800222a <HAL_COMP_MspInit+0x9a>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_COMP12_CLK_ENABLED++;
 80021b2:	4b41      	ldr	r3, [pc, #260]	; (80022b8 <HAL_COMP_MspInit+0x128>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	3301      	adds	r3, #1
 80021b8:	4a3f      	ldr	r2, [pc, #252]	; (80022b8 <HAL_COMP_MspInit+0x128>)
 80021ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_COMP12_CLK_ENABLED==1){
 80021bc:	4b3e      	ldr	r3, [pc, #248]	; (80022b8 <HAL_COMP_MspInit+0x128>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d10e      	bne.n	80021e2 <HAL_COMP_MspInit+0x52>
      __HAL_RCC_COMP12_CLK_ENABLE();
 80021c4:	4b3d      	ldr	r3, [pc, #244]	; (80022bc <HAL_COMP_MspInit+0x12c>)
 80021c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021ca:	4a3c      	ldr	r2, [pc, #240]	; (80022bc <HAL_COMP_MspInit+0x12c>)
 80021cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021d0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80021d4:	4b39      	ldr	r3, [pc, #228]	; (80022bc <HAL_COMP_MspInit+0x12c>)
 80021d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021de:	61bb      	str	r3, [r7, #24]
 80021e0:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e2:	4b36      	ldr	r3, [pc, #216]	; (80022bc <HAL_COMP_MspInit+0x12c>)
 80021e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e8:	4a34      	ldr	r2, [pc, #208]	; (80022bc <HAL_COMP_MspInit+0x12c>)
 80021ea:	f043 0302 	orr.w	r3, r3, #2
 80021ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021f2:	4b32      	ldr	r3, [pc, #200]	; (80022bc <HAL_COMP_MspInit+0x12c>)
 80021f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	697b      	ldr	r3, [r7, #20]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002200:	2304      	movs	r3, #4
 8002202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002204:	2303      	movs	r3, #3
 8002206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800220c:	f107 031c 	add.w	r3, r7, #28
 8002210:	4619      	mov	r1, r3
 8002212:	482b      	ldr	r0, [pc, #172]	; (80022c0 <HAL_COMP_MspInit+0x130>)
 8002214:	f005 fc28 	bl	8007a68 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 0, 0);
 8002218:	2200      	movs	r2, #0
 800221a:	2100      	movs	r1, #0
 800221c:	2089      	movs	r0, #137	; 0x89
 800221e:	f002 fe1a 	bl	8004e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 8002222:	2089      	movs	r0, #137	; 0x89
 8002224:	f002 fe31 	bl	8004e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8002228:	e040      	b.n	80022ac <HAL_COMP_MspInit+0x11c>
  else if(hcomp->Instance==COMP2)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a25      	ldr	r2, [pc, #148]	; (80022c4 <HAL_COMP_MspInit+0x134>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d13b      	bne.n	80022ac <HAL_COMP_MspInit+0x11c>
    HAL_RCC_COMP12_CLK_ENABLED++;
 8002234:	4b20      	ldr	r3, [pc, #128]	; (80022b8 <HAL_COMP_MspInit+0x128>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	3301      	adds	r3, #1
 800223a:	4a1f      	ldr	r2, [pc, #124]	; (80022b8 <HAL_COMP_MspInit+0x128>)
 800223c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_COMP12_CLK_ENABLED==1){
 800223e:	4b1e      	ldr	r3, [pc, #120]	; (80022b8 <HAL_COMP_MspInit+0x128>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d10e      	bne.n	8002264 <HAL_COMP_MspInit+0xd4>
      __HAL_RCC_COMP12_CLK_ENABLE();
 8002246:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <HAL_COMP_MspInit+0x12c>)
 8002248:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800224c:	4a1b      	ldr	r2, [pc, #108]	; (80022bc <HAL_COMP_MspInit+0x12c>)
 800224e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002252:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002256:	4b19      	ldr	r3, [pc, #100]	; (80022bc <HAL_COMP_MspInit+0x12c>)
 8002258:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800225c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002264:	4b15      	ldr	r3, [pc, #84]	; (80022bc <HAL_COMP_MspInit+0x12c>)
 8002266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800226a:	4a14      	ldr	r2, [pc, #80]	; (80022bc <HAL_COMP_MspInit+0x12c>)
 800226c:	f043 0310 	orr.w	r3, r3, #16
 8002270:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <HAL_COMP_MspInit+0x12c>)
 8002276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800227a:	f003 0310 	and.w	r3, r3, #16
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002282:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002286:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002288:	2303      	movs	r3, #3
 800228a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002290:	f107 031c 	add.w	r3, r7, #28
 8002294:	4619      	mov	r1, r3
 8002296:	480c      	ldr	r0, [pc, #48]	; (80022c8 <HAL_COMP_MspInit+0x138>)
 8002298:	f005 fbe6 	bl	8007a68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(COMP_IRQn, 0, 0);
 800229c:	2200      	movs	r2, #0
 800229e:	2100      	movs	r1, #0
 80022a0:	2089      	movs	r0, #137	; 0x89
 80022a2:	f002 fdd8 	bl	8004e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 80022a6:	2089      	movs	r0, #137	; 0x89
 80022a8:	f002 fdef 	bl	8004e8a <HAL_NVIC_EnableIRQ>
}
 80022ac:	bf00      	nop
 80022ae:	3730      	adds	r7, #48	; 0x30
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	5800380c 	.word	0x5800380c
 80022b8:	240345e4 	.word	0x240345e4
 80022bc:	58024400 	.word	0x58024400
 80022c0:	58020400 	.word	0x58020400
 80022c4:	58003810 	.word	0x58003810
 80022c8:	58021000 	.word	0x58021000

080022cc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08a      	sub	sp, #40	; 0x28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d4:	f107 0314 	add.w	r3, r7, #20
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a18      	ldr	r2, [pc, #96]	; (800234c <HAL_DAC_MspInit+0x80>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d129      	bne.n	8002342 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80022ee:	4b18      	ldr	r3, [pc, #96]	; (8002350 <HAL_DAC_MspInit+0x84>)
 80022f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022f4:	4a16      	ldr	r2, [pc, #88]	; (8002350 <HAL_DAC_MspInit+0x84>)
 80022f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80022fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022fe:	4b14      	ldr	r3, [pc, #80]	; (8002350 <HAL_DAC_MspInit+0x84>)
 8002300:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002304:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230c:	4b10      	ldr	r3, [pc, #64]	; (8002350 <HAL_DAC_MspInit+0x84>)
 800230e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002312:	4a0f      	ldr	r2, [pc, #60]	; (8002350 <HAL_DAC_MspInit+0x84>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800231c:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <HAL_DAC_MspInit+0x84>)
 800231e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800232a:	2310      	movs	r3, #16
 800232c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800232e:	2303      	movs	r3, #3
 8002330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002336:	f107 0314 	add.w	r3, r7, #20
 800233a:	4619      	mov	r1, r3
 800233c:	4805      	ldr	r0, [pc, #20]	; (8002354 <HAL_DAC_MspInit+0x88>)
 800233e:	f005 fb93 	bl	8007a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002342:	bf00      	nop
 8002344:	3728      	adds	r7, #40	; 0x28
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40007400 	.word	0x40007400
 8002350:	58024400 	.word	0x58024400
 8002354:	58020000 	.word	0x58020000

08002358 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a0b      	ldr	r2, [pc, #44]	; (8002394 <HAL_TIM_PWM_MspInit+0x3c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d10e      	bne.n	8002388 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800236a:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <HAL_TIM_PWM_MspInit+0x40>)
 800236c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002370:	4a09      	ldr	r2, [pc, #36]	; (8002398 <HAL_TIM_PWM_MspInit+0x40>)
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800237a:	4b07      	ldr	r3, [pc, #28]	; (8002398 <HAL_TIM_PWM_MspInit+0x40>)
 800237c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002388:	bf00      	nop
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	40010000 	.word	0x40010000
 8002398:	58024400 	.word	0x58024400

0800239c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a0e      	ldr	r2, [pc, #56]	; (80023e4 <HAL_TIM_Base_MspInit+0x48>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d116      	bne.n	80023dc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80023ae:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <HAL_TIM_Base_MspInit+0x4c>)
 80023b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023b4:	4a0c      	ldr	r2, [pc, #48]	; (80023e8 <HAL_TIM_Base_MspInit+0x4c>)
 80023b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023be:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <HAL_TIM_Base_MspInit+0x4c>)
 80023c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80023cc:	2200      	movs	r2, #0
 80023ce:	2100      	movs	r1, #0
 80023d0:	2075      	movs	r0, #117	; 0x75
 80023d2:	f002 fd40 	bl	8004e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80023d6:	2075      	movs	r0, #117	; 0x75
 80023d8:	f002 fd57 	bl	8004e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80023dc:	bf00      	nop
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40014400 	.word	0x40014400
 80023e8:	58024400 	.word	0x58024400

080023ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b0b8      	sub	sp, #224	; 0xe0
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002404:	f107 0310 	add.w	r3, r7, #16
 8002408:	22bc      	movs	r2, #188	; 0xbc
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f010 fe9b 	bl	8013148 <memset>
  if(huart->Instance==USART3)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a25      	ldr	r2, [pc, #148]	; (80024ac <HAL_UART_MspInit+0xc0>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d142      	bne.n	80024a2 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800241c:	2302      	movs	r3, #2
 800241e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8002420:	2303      	movs	r3, #3
 8002422:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002426:	f107 0310 	add.w	r3, r7, #16
 800242a:	4618      	mov	r0, r3
 800242c:	f008 f892 	bl	800a554 <HAL_RCCEx_PeriphCLKConfig>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002436:	f7ff fd05 	bl	8001e44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800243a:	4b1d      	ldr	r3, [pc, #116]	; (80024b0 <HAL_UART_MspInit+0xc4>)
 800243c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002440:	4a1b      	ldr	r2, [pc, #108]	; (80024b0 <HAL_UART_MspInit+0xc4>)
 8002442:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002446:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800244a:	4b19      	ldr	r3, [pc, #100]	; (80024b0 <HAL_UART_MspInit+0xc4>)
 800244c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002450:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002458:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <HAL_UART_MspInit+0xc4>)
 800245a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800245e:	4a14      	ldr	r2, [pc, #80]	; (80024b0 <HAL_UART_MspInit+0xc4>)
 8002460:	f043 0308 	orr.w	r3, r3, #8
 8002464:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002468:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <HAL_UART_MspInit+0xc4>)
 800246a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002476:	f44f 7340 	mov.w	r3, #768	; 0x300
 800247a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247e:	2302      	movs	r3, #2
 8002480:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248a:	2300      	movs	r3, #0
 800248c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002490:	2307      	movs	r3, #7
 8002492:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002496:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800249a:	4619      	mov	r1, r3
 800249c:	4805      	ldr	r0, [pc, #20]	; (80024b4 <HAL_UART_MspInit+0xc8>)
 800249e:	f005 fae3 	bl	8007a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80024a2:	bf00      	nop
 80024a4:	37e0      	adds	r7, #224	; 0xe0
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40004800 	.word	0x40004800
 80024b0:	58024400 	.word	0x58024400
 80024b4:	58020c00 	.word	0x58020c00

080024b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024bc:	e7fe      	b.n	80024bc <NMI_Handler+0x4>
	...

080024c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80024c4:	2201      	movs	r2, #1
 80024c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024ca:	4802      	ldr	r0, [pc, #8]	; (80024d4 <HardFault_Handler+0x14>)
 80024cc:	f005 fc7c 	bl	8007dc8 <HAL_GPIO_WritePin>
 80024d0:	e7f8      	b.n	80024c4 <HardFault_Handler+0x4>
 80024d2:	bf00      	nop
 80024d4:	58020400 	.word	0x58020400

080024d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024dc:	e7fe      	b.n	80024dc <MemManage_Handler+0x4>

080024de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024de:	b480      	push	{r7}
 80024e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024e2:	e7fe      	b.n	80024e2 <BusFault_Handler+0x4>

080024e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024e8:	e7fe      	b.n	80024e8 <UsageFault_Handler+0x4>

080024ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024ea:	b480      	push	{r7}
 80024ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002506:	b480      	push	{r7}
 8002508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002518:	f000 f90a 	bl	8002730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800251c:	bf00      	nop
 800251e:	bd80      	pop	{r7, pc}

08002520 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002524:	4802      	ldr	r0, [pc, #8]	; (8002530 <DMA1_Stream0_IRQHandler+0x10>)
 8002526:	f003 ff8d 	bl	8006444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	24000248 	.word	0x24000248

08002534 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002538:	4802      	ldr	r0, [pc, #8]	; (8002544 <DMA1_Stream1_IRQHandler+0x10>)
 800253a:	f003 ff83 	bl	8006444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	240002c0 	.word	0x240002c0

08002548 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800254c:	4802      	ldr	r0, [pc, #8]	; (8002558 <DMA1_Stream2_IRQHandler+0x10>)
 800254e:	f003 ff79 	bl	8006444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	24000338 	.word	0x24000338

0800255c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002560:	4803      	ldr	r0, [pc, #12]	; (8002570 <ADC_IRQHandler+0x14>)
 8002562:	f000 fe8f 	bl	8003284 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002566:	4803      	ldr	r0, [pc, #12]	; (8002574 <ADC_IRQHandler+0x18>)
 8002568:	f000 fe8c 	bl	8003284 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800256c:	bf00      	nop
 800256e:	bd80      	pop	{r7, pc}
 8002570:	2400011c 	.word	0x2400011c
 8002574:	24000180 	.word	0x24000180

08002578 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800257c:	4802      	ldr	r0, [pc, #8]	; (8002588 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 800257e:	f005 fddc 	bl	800813a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	24035120 	.word	0x24035120

0800258c <OTG_FS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 In global interrupt.
  */
void OTG_FS_EP1_IN_IRQHandler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002590:	4802      	ldr	r0, [pc, #8]	; (800259c <OTG_FS_EP1_IN_IRQHandler+0x10>)
 8002592:	f005 fdd2 	bl	800813a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	24035120 	.word	0x24035120

080025a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80025a4:	4802      	ldr	r0, [pc, #8]	; (80025b0 <OTG_FS_IRQHandler+0x10>)
 80025a6:	f005 fdc8 	bl	800813a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	24035120 	.word	0x24035120

080025b4 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80025b8:	4802      	ldr	r0, [pc, #8]	; (80025c4 <TIM16_IRQHandler+0x10>)
 80025ba:	f00a fc23 	bl	800ce04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	24000468 	.word	0x24000468

080025c8 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80025cc:	4802      	ldr	r0, [pc, #8]	; (80025d8 <ADC3_IRQHandler+0x10>)
 80025ce:	f000 fe59 	bl	8003284 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	240001e4 	.word	0x240001e4

080025dc <COMP1_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 80025e0:	4803      	ldr	r0, [pc, #12]	; (80025f0 <COMP1_IRQHandler+0x14>)
 80025e2:	f002 faa7 	bl	8004b34 <HAL_COMP_IRQHandler>
  HAL_COMP_IRQHandler(&hcomp2);
 80025e6:	4803      	ldr	r0, [pc, #12]	; (80025f4 <COMP1_IRQHandler+0x18>)
 80025e8:	f002 faa4 	bl	8004b34 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 80025ec:	bf00      	nop
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	240003b0 	.word	0x240003b0
 80025f4:	240003dc 	.word	0x240003dc

080025f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80025f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002630 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80025fc:	f7fd ffee 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002600:	480c      	ldr	r0, [pc, #48]	; (8002634 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002602:	490d      	ldr	r1, [pc, #52]	; (8002638 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002604:	4a0d      	ldr	r2, [pc, #52]	; (800263c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002608:	e002      	b.n	8002610 <LoopCopyDataInit>

0800260a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800260a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800260c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800260e:	3304      	adds	r3, #4

08002610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002614:	d3f9      	bcc.n	800260a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002616:	4a0a      	ldr	r2, [pc, #40]	; (8002640 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002618:	4c0a      	ldr	r4, [pc, #40]	; (8002644 <LoopFillZerobss+0x22>)
  movs r3, #0
 800261a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800261c:	e001      	b.n	8002622 <LoopFillZerobss>

0800261e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800261e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002620:	3204      	adds	r2, #4

08002622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002624:	d3fb      	bcc.n	800261e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002626:	f010 fd5d 	bl	80130e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800262a:	f7fe f86d 	bl	8000708 <main>
  bx  lr
 800262e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002630:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002634:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002638:	24000100 	.word	0x24000100
  ldr r2, =_sidata
 800263c:	08013208 	.word	0x08013208
  ldr r2, =_sbss
 8002640:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 8002644:	2403584c 	.word	0x2403584c

08002648 <BDMA_Channel0_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002648:	e7fe      	b.n	8002648 <BDMA_Channel0_IRQHandler>
	...

0800264c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002652:	2003      	movs	r0, #3
 8002654:	f002 fbf4 	bl	8004e40 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002658:	f007 fda6 	bl	800a1a8 <HAL_RCC_GetSysClockFreq>
 800265c:	4602      	mov	r2, r0
 800265e:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <HAL_Init+0x68>)
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	0a1b      	lsrs	r3, r3, #8
 8002664:	f003 030f 	and.w	r3, r3, #15
 8002668:	4913      	ldr	r1, [pc, #76]	; (80026b8 <HAL_Init+0x6c>)
 800266a:	5ccb      	ldrb	r3, [r1, r3]
 800266c:	f003 031f 	and.w	r3, r3, #31
 8002670:	fa22 f303 	lsr.w	r3, r2, r3
 8002674:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002676:	4b0f      	ldr	r3, [pc, #60]	; (80026b4 <HAL_Init+0x68>)
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	4a0e      	ldr	r2, [pc, #56]	; (80026b8 <HAL_Init+0x6c>)
 8002680:	5cd3      	ldrb	r3, [r2, r3]
 8002682:	f003 031f 	and.w	r3, r3, #31
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	fa22 f303 	lsr.w	r3, r2, r3
 800268c:	4a0b      	ldr	r2, [pc, #44]	; (80026bc <HAL_Init+0x70>)
 800268e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002690:	4a0b      	ldr	r2, [pc, #44]	; (80026c0 <HAL_Init+0x74>)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002696:	2000      	movs	r0, #0
 8002698:	f000 f814 	bl	80026c4 <HAL_InitTick>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e002      	b.n	80026ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80026a6:	f7ff fbdf 	bl	8001e68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	58024400 	.word	0x58024400
 80026b8:	080131b8 	.word	0x080131b8
 80026bc:	24000004 	.word	0x24000004
 80026c0:	24000000 	.word	0x24000000

080026c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80026cc:	4b15      	ldr	r3, [pc, #84]	; (8002724 <HAL_InitTick+0x60>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e021      	b.n	800271c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80026d8:	4b13      	ldr	r3, [pc, #76]	; (8002728 <HAL_InitTick+0x64>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	4b11      	ldr	r3, [pc, #68]	; (8002724 <HAL_InitTick+0x60>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	4619      	mov	r1, r3
 80026e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ee:	4618      	mov	r0, r3
 80026f0:	f002 fbd9 	bl	8004ea6 <HAL_SYSTICK_Config>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e00e      	b.n	800271c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b0f      	cmp	r3, #15
 8002702:	d80a      	bhi.n	800271a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002704:	2200      	movs	r2, #0
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	f04f 30ff 	mov.w	r0, #4294967295
 800270c:	f002 fba3 	bl	8004e56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002710:	4a06      	ldr	r2, [pc, #24]	; (800272c <HAL_InitTick+0x68>)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	e000      	b.n	800271c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
}
 800271c:	4618      	mov	r0, r3
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	2400000c 	.word	0x2400000c
 8002728:	24000000 	.word	0x24000000
 800272c:	24000008 	.word	0x24000008

08002730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002734:	4b06      	ldr	r3, [pc, #24]	; (8002750 <HAL_IncTick+0x20>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	461a      	mov	r2, r3
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_IncTick+0x24>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4413      	add	r3, r2
 8002740:	4a04      	ldr	r2, [pc, #16]	; (8002754 <HAL_IncTick+0x24>)
 8002742:	6013      	str	r3, [r2, #0]
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	2400000c 	.word	0x2400000c
 8002754:	240345e8 	.word	0x240345e8

08002758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return uwTick;
 800275c:	4b03      	ldr	r3, [pc, #12]	; (800276c <HAL_GetTick+0x14>)
 800275e:	681b      	ldr	r3, [r3, #0]
}
 8002760:	4618      	mov	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	240345e8 	.word	0x240345e8

08002770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002778:	f7ff ffee 	bl	8002758 <HAL_GetTick>
 800277c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002788:	d005      	beq.n	8002796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800278a:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <HAL_Delay+0x44>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	461a      	mov	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4413      	add	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002796:	bf00      	nop
 8002798:	f7ff ffde 	bl	8002758 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d8f7      	bhi.n	8002798 <HAL_Delay+0x28>
  {
  }
}
 80027a8:	bf00      	nop
 80027aa:	bf00      	nop
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	2400000c 	.word	0x2400000c

080027b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80027bc:	4b03      	ldr	r3, [pc, #12]	; (80027cc <HAL_GetREVID+0x14>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	0c1b      	lsrs	r3, r3, #16
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	5c001000 	.word	0x5c001000

080027d0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80027d8:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f023 0202 	bic.w	r2, r3, #2
 80027e0:	4904      	ldr	r1, [pc, #16]	; (80027f4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	600b      	str	r3, [r1, #0]
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	58003c00 	.word	0x58003c00

080027f8 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80027fc:	4b05      	ldr	r3, [pc, #20]	; (8002814 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a04      	ldr	r2, [pc, #16]	; (8002814 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8002802:	f023 0301 	bic.w	r3, r3, #1
 8002806:	6013      	str	r3, [r2, #0]
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	58003c00 	.word	0x58003c00

08002818 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002822:	4b07      	ldr	r3, [pc, #28]	; (8002840 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	43db      	mvns	r3, r3
 800282a:	401a      	ands	r2, r3
 800282c:	4904      	ldr	r1, [pc, #16]	; (8002840 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	4313      	orrs	r3, r2
 8002832:	604b      	str	r3, [r1, #4]
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	58000400 	.word	0x58000400

08002844 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	431a      	orrs	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	609a      	str	r2, [r3, #8]
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	609a      	str	r2, [r3, #8]
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b087      	sub	sp, #28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
 80028b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	3360      	adds	r3, #96	; 0x60
 80028be:	461a      	mov	r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	430b      	orrs	r3, r1
 80028da:	431a      	orrs	r2, r3
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80028e0:	bf00      	nop
 80028e2:	371c      	adds	r7, #28
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f003 031f 	and.w	r3, r3, #31
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	fa01 f303 	lsl.w	r3, r1, r3
 800290c:	431a      	orrs	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	611a      	str	r2, [r3, #16]
}
 8002912:	bf00      	nop
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800291e:	b480      	push	{r7}
 8002920:	b087      	sub	sp, #28
 8002922:	af00      	add	r7, sp, #0
 8002924:	60f8      	str	r0, [r7, #12]
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	3360      	adds	r3, #96	; 0x60
 800292e:	461a      	mov	r2, r3
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	431a      	orrs	r2, r3
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	601a      	str	r2, [r3, #0]
  }
}
 8002948:	bf00      	nop
 800294a:	371c      	adds	r7, #28
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002968:	2301      	movs	r3, #1
 800296a:	e000      	b.n	800296e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800297a:	b480      	push	{r7}
 800297c:	b087      	sub	sp, #28
 800297e:	af00      	add	r7, sp, #0
 8002980:	60f8      	str	r0, [r7, #12]
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	3330      	adds	r3, #48	; 0x30
 800298a:	461a      	mov	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	0a1b      	lsrs	r3, r3, #8
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	f003 030c 	and.w	r3, r3, #12
 8002996:	4413      	add	r3, r2
 8002998:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f003 031f 	and.w	r3, r3, #31
 80029a4:	211f      	movs	r1, #31
 80029a6:	fa01 f303 	lsl.w	r3, r1, r3
 80029aa:	43db      	mvns	r3, r3
 80029ac:	401a      	ands	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	0e9b      	lsrs	r3, r3, #26
 80029b2:	f003 011f 	and.w	r1, r3, #31
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f003 031f 	and.w	r3, r3, #31
 80029bc:	fa01 f303 	lsl.w	r3, r1, r3
 80029c0:	431a      	orrs	r2, r3
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029c6:	bf00      	nop
 80029c8:	371c      	adds	r7, #28
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
 80029da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	f023 0203 	bic.w	r2, r3, #3
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	60da      	str	r2, [r3, #12]
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a04:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e000      	b.n	8002a12 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b087      	sub	sp, #28
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	60f8      	str	r0, [r7, #12]
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	3314      	adds	r3, #20
 8002a2e:	461a      	mov	r2, r3
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	0e5b      	lsrs	r3, r3, #25
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	4413      	add	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	0d1b      	lsrs	r3, r3, #20
 8002a46:	f003 031f 	and.w	r3, r3, #31
 8002a4a:	2107      	movs	r1, #7
 8002a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	401a      	ands	r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	0d1b      	lsrs	r3, r3, #20
 8002a58:	f003 031f 	and.w	r3, r3, #31
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a62:	431a      	orrs	r2, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a68:	bf00      	nop
 8002a6a:	371c      	adds	r7, #28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	401a      	ands	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f003 0318 	and.w	r3, r3, #24
 8002a96:	4908      	ldr	r1, [pc, #32]	; (8002ab8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a98:	40d9      	lsrs	r1, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	400b      	ands	r3, r1
 8002a9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002aaa:	bf00      	nop
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	000fffff 	.word	0x000fffff

08002abc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 031f 	and.w	r3, r3, #31
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	4b04      	ldr	r3, [pc, #16]	; (8002b14 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002b02:	4013      	ands	r3, r2
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6093      	str	r3, [r2, #8]
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	5fffffc0 	.word	0x5fffffc0

08002b18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b2c:	d101      	bne.n	8002b32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <LL_ADC_EnableInternalRegulator+0x24>)
 8002b4e:	4013      	ands	r3, r2
 8002b50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	6fffffc0 	.word	0x6fffffc0

08002b68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b7c:	d101      	bne.n	8002b82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <LL_ADC_Enable+0x24>)
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	f043 0201 	orr.w	r2, r3, #1
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	7fffffc0 	.word	0x7fffffc0

08002bb8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <LL_ADC_Disable+0x24>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	f043 0202 	orr.w	r2, r3, #2
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	7fffffc0 	.word	0x7fffffc0

08002be0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <LL_ADC_IsEnabled+0x18>
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e000      	b.n	8002bfa <LL_ADC_IsEnabled+0x1a>
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d101      	bne.n	8002c1e <LL_ADC_IsDisableOngoing+0x18>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <LL_ADC_IsDisableOngoing+0x1a>
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <LL_ADC_REG_StartConversion+0x24>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	f043 0204 	orr.w	r2, r3, #4
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	7fffffc0 	.word	0x7fffffc0

08002c54 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <LL_ADC_REG_StopConversion+0x24>)
 8002c62:	4013      	ands	r3, r2
 8002c64:	f043 0210 	orr.w	r2, r3, #16
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	7fffffc0 	.word	0x7fffffc0

08002c7c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d101      	bne.n	8002c94 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c90:	2301      	movs	r3, #1
 8002c92:	e000      	b.n	8002c96 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
	...

08002ca4 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <LL_ADC_INJ_StopConversion+0x24>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	f043 0220 	orr.w	r2, r3, #32
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	7fffffc0 	.word	0x7fffffc0

08002ccc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d101      	bne.n	8002ce4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e000      	b.n	8002ce6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
	...

08002cf4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cf4:	b590      	push	{r4, r7, lr}
 8002cf6:	b089      	sub	sp, #36	; 0x24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e18f      	b.n	800302e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d109      	bne.n	8002d30 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7ff f8cf 	bl	8001ec0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff feef 	bl	8002b18 <LL_ADC_IsDeepPowerDownEnabled>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d004      	beq.n	8002d4a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff fed5 	bl	8002af4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff ff0a 	bl	8002b68 <LL_ADC_IsInternalRegulatorEnabled>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d114      	bne.n	8002d84 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff feee 	bl	8002b40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d64:	4b87      	ldr	r3, [pc, #540]	; (8002f84 <HAL_ADC_Init+0x290>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	099b      	lsrs	r3, r3, #6
 8002d6a:	4a87      	ldr	r2, [pc, #540]	; (8002f88 <HAL_ADC_Init+0x294>)
 8002d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d70:	099b      	lsrs	r3, r3, #6
 8002d72:	3301      	adds	r3, #1
 8002d74:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d76:	e002      	b.n	8002d7e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1f9      	bne.n	8002d78 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff feed 	bl	8002b68 <LL_ADC_IsInternalRegulatorEnabled>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10d      	bne.n	8002db0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d98:	f043 0210 	orr.w	r2, r3, #16
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da4:	f043 0201 	orr.w	r2, r3, #1
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff ff61 	bl	8002c7c <LL_ADC_REG_IsConversionOngoing>
 8002dba:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc0:	f003 0310 	and.w	r3, r3, #16
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f040 8129 	bne.w	800301c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f040 8125 	bne.w	800301c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002dda:	f043 0202 	orr.w	r2, r3, #2
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff fefa 	bl	8002be0 <LL_ADC_IsEnabled>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d136      	bne.n	8002e60 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a65      	ldr	r2, [pc, #404]	; (8002f8c <HAL_ADC_Init+0x298>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d004      	beq.n	8002e06 <HAL_ADC_Init+0x112>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a63      	ldr	r2, [pc, #396]	; (8002f90 <HAL_ADC_Init+0x29c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d10e      	bne.n	8002e24 <HAL_ADC_Init+0x130>
 8002e06:	4861      	ldr	r0, [pc, #388]	; (8002f8c <HAL_ADC_Init+0x298>)
 8002e08:	f7ff feea 	bl	8002be0 <LL_ADC_IsEnabled>
 8002e0c:	4604      	mov	r4, r0
 8002e0e:	4860      	ldr	r0, [pc, #384]	; (8002f90 <HAL_ADC_Init+0x29c>)
 8002e10:	f7ff fee6 	bl	8002be0 <LL_ADC_IsEnabled>
 8002e14:	4603      	mov	r3, r0
 8002e16:	4323      	orrs	r3, r4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	bf0c      	ite	eq
 8002e1c:	2301      	moveq	r3, #1
 8002e1e:	2300      	movne	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	e008      	b.n	8002e36 <HAL_ADC_Init+0x142>
 8002e24:	485b      	ldr	r0, [pc, #364]	; (8002f94 <HAL_ADC_Init+0x2a0>)
 8002e26:	f7ff fedb 	bl	8002be0 <LL_ADC_IsEnabled>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	bf0c      	ite	eq
 8002e30:	2301      	moveq	r3, #1
 8002e32:	2300      	movne	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d012      	beq.n	8002e60 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a53      	ldr	r2, [pc, #332]	; (8002f8c <HAL_ADC_Init+0x298>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d004      	beq.n	8002e4e <HAL_ADC_Init+0x15a>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a51      	ldr	r2, [pc, #324]	; (8002f90 <HAL_ADC_Init+0x29c>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d101      	bne.n	8002e52 <HAL_ADC_Init+0x15e>
 8002e4e:	4a52      	ldr	r2, [pc, #328]	; (8002f98 <HAL_ADC_Init+0x2a4>)
 8002e50:	e000      	b.n	8002e54 <HAL_ADC_Init+0x160>
 8002e52:	4a52      	ldr	r2, [pc, #328]	; (8002f9c <HAL_ADC_Init+0x2a8>)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	f7ff fcf2 	bl	8002844 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002e60:	f7ff fcaa 	bl	80027b8 <HAL_GetREVID>
 8002e64:	4603      	mov	r3, r0
 8002e66:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d914      	bls.n	8002e98 <HAL_ADC_Init+0x1a4>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2b10      	cmp	r3, #16
 8002e74:	d110      	bne.n	8002e98 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	7d5b      	ldrb	r3, [r3, #21]
 8002e7a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e80:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e86:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	7f1b      	ldrb	r3, [r3, #28]
 8002e8c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002e8e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e90:	f043 030c 	orr.w	r3, r3, #12
 8002e94:	61bb      	str	r3, [r7, #24]
 8002e96:	e00d      	b.n	8002eb4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	7d5b      	ldrb	r3, [r3, #21]
 8002e9c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ea2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002ea8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	7f1b      	ldrb	r3, [r3, #28]
 8002eae:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	7f1b      	ldrb	r3, [r3, #28]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d106      	bne.n	8002eca <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	045b      	lsls	r3, r3, #17
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d009      	beq.n	8002ee6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ede:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	4b2c      	ldr	r3, [pc, #176]	; (8002fa0 <HAL_ADC_Init+0x2ac>)
 8002eee:	4013      	ands	r3, r2
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6812      	ldr	r2, [r2, #0]
 8002ef4:	69b9      	ldr	r1, [r7, #24]
 8002ef6:	430b      	orrs	r3, r1
 8002ef8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff febc 	bl	8002c7c <LL_ADC_REG_IsConversionOngoing>
 8002f04:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff fede 	bl	8002ccc <LL_ADC_INJ_IsConversionOngoing>
 8002f10:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d15f      	bne.n	8002fd8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d15c      	bne.n	8002fd8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	7d1b      	ldrb	r3, [r3, #20]
 8002f22:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	4b1c      	ldr	r3, [pc, #112]	; (8002fa4 <HAL_ADC_Init+0x2b0>)
 8002f34:	4013      	ands	r3, r2
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6812      	ldr	r2, [r2, #0]
 8002f3a:	69b9      	ldr	r1, [r7, #24]
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d130      	bne.n	8002fac <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691a      	ldr	r2, [r3, #16]
 8002f56:	4b14      	ldr	r3, [pc, #80]	; (8002fa8 <HAL_ADC_Init+0x2b4>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f5e:	3a01      	subs	r2, #1
 8002f60:	0411      	lsls	r1, r2, #16
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f66:	4311      	orrs	r1, r2
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002f6c:	4311      	orrs	r1, r2
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f72:	430a      	orrs	r2, r1
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0201 	orr.w	r2, r2, #1
 8002f7e:	611a      	str	r2, [r3, #16]
 8002f80:	e01c      	b.n	8002fbc <HAL_ADC_Init+0x2c8>
 8002f82:	bf00      	nop
 8002f84:	24000000 	.word	0x24000000
 8002f88:	053e2d63 	.word	0x053e2d63
 8002f8c:	40022000 	.word	0x40022000
 8002f90:	40022100 	.word	0x40022100
 8002f94:	58026000 	.word	0x58026000
 8002f98:	40022300 	.word	0x40022300
 8002f9c:	58026300 	.word	0x58026300
 8002fa0:	fff0c003 	.word	0xfff0c003
 8002fa4:	ffffbffc 	.word	0xffffbffc
 8002fa8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691a      	ldr	r2, [r3, #16]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0201 	bic.w	r2, r2, #1
 8002fba:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f001 f92e 	bl	8004234 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d10c      	bne.n	8002ffa <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	f023 010f 	bic.w	r1, r3, #15
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	1e5a      	subs	r2, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ff8:	e007      	b.n	800300a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 020f 	bic.w	r2, r2, #15
 8003008:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300e:	f023 0303 	bic.w	r3, r3, #3
 8003012:	f043 0201 	orr.w	r2, r3, #1
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	655a      	str	r2, [r3, #84]	; 0x54
 800301a:	e007      	b.n	800302c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003020:	f043 0210 	orr.w	r2, r3, #16
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800302c:	7ffb      	ldrb	r3, [r7, #31]
}
 800302e:	4618      	mov	r0, r3
 8003030:	3724      	adds	r7, #36	; 0x24
 8003032:	46bd      	mov	sp, r7
 8003034:	bd90      	pop	{r4, r7, pc}
 8003036:	bf00      	nop

08003038 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a55      	ldr	r2, [pc, #340]	; (80031a0 <HAL_ADC_Start_DMA+0x168>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d004      	beq.n	8003058 <HAL_ADC_Start_DMA+0x20>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a54      	ldr	r2, [pc, #336]	; (80031a4 <HAL_ADC_Start_DMA+0x16c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d101      	bne.n	800305c <HAL_ADC_Start_DMA+0x24>
 8003058:	4b53      	ldr	r3, [pc, #332]	; (80031a8 <HAL_ADC_Start_DMA+0x170>)
 800305a:	e000      	b.n	800305e <HAL_ADC_Start_DMA+0x26>
 800305c:	4b53      	ldr	r3, [pc, #332]	; (80031ac <HAL_ADC_Start_DMA+0x174>)
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff fd2c 	bl	8002abc <LL_ADC_GetMultimode>
 8003064:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff fe06 	bl	8002c7c <LL_ADC_REG_IsConversionOngoing>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	f040 808c 	bne.w	8003190 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800307e:	2b01      	cmp	r3, #1
 8003080:	d101      	bne.n	8003086 <HAL_ADC_Start_DMA+0x4e>
 8003082:	2302      	movs	r3, #2
 8003084:	e087      	b.n	8003196 <HAL_ADC_Start_DMA+0x15e>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	2b05      	cmp	r3, #5
 8003098:	d002      	beq.n	80030a0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	2b09      	cmp	r3, #9
 800309e:	d170      	bne.n	8003182 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 ff49 	bl	8003f38 <ADC_Enable>
 80030a6:	4603      	mov	r3, r0
 80030a8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80030aa:	7dfb      	ldrb	r3, [r7, #23]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d163      	bne.n	8003178 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030b4:	4b3e      	ldr	r3, [pc, #248]	; (80031b0 <HAL_ADC_Start_DMA+0x178>)
 80030b6:	4013      	ands	r3, r2
 80030b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a37      	ldr	r2, [pc, #220]	; (80031a4 <HAL_ADC_Start_DMA+0x16c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d002      	beq.n	80030d0 <HAL_ADC_Start_DMA+0x98>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	e000      	b.n	80030d2 <HAL_ADC_Start_DMA+0x9a>
 80030d0:	4b33      	ldr	r3, [pc, #204]	; (80031a0 <HAL_ADC_Start_DMA+0x168>)
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	6812      	ldr	r2, [r2, #0]
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d002      	beq.n	80030e0 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d105      	bne.n	80030ec <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d006      	beq.n	8003106 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fc:	f023 0206 	bic.w	r2, r3, #6
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	659a      	str	r2, [r3, #88]	; 0x58
 8003104:	e002      	b.n	800310c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003110:	4a28      	ldr	r2, [pc, #160]	; (80031b4 <HAL_ADC_Start_DMA+0x17c>)
 8003112:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003118:	4a27      	ldr	r2, [pc, #156]	; (80031b8 <HAL_ADC_Start_DMA+0x180>)
 800311a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003120:	4a26      	ldr	r2, [pc, #152]	; (80031bc <HAL_ADC_Start_DMA+0x184>)
 8003122:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	221c      	movs	r2, #28
 800312a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0210 	orr.w	r2, r2, #16
 8003142:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	4619      	mov	r1, r3
 800314e:	4610      	mov	r0, r2
 8003150:	f7ff fc3f 	bl	80029d2 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	3340      	adds	r3, #64	; 0x40
 800315e:	4619      	mov	r1, r3
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f002 fbe6 	bl	8005934 <HAL_DMA_Start_IT>
 8003168:	4603      	mov	r3, r0
 800316a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff fd5b 	bl	8002c2c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003176:	e00d      	b.n	8003194 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003180:	e008      	b.n	8003194 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800318e:	e001      	b.n	8003194 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003190:	2302      	movs	r3, #2
 8003192:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003194:	7dfb      	ldrb	r3, [r7, #23]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40022000 	.word	0x40022000
 80031a4:	40022100 	.word	0x40022100
 80031a8:	40022300 	.word	0x40022300
 80031ac:	58026300 	.word	0x58026300
 80031b0:	fffff0fe 	.word	0xfffff0fe
 80031b4:	0800410b 	.word	0x0800410b
 80031b8:	080041e3 	.word	0x080041e3
 80031bc:	080041ff 	.word	0x080041ff

080031c0 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_ADC_Stop_DMA+0x16>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e04f      	b.n	8003276 <HAL_ADC_Stop_DMA+0xb6>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80031de:	2103      	movs	r1, #3
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 fded 	bl	8003dc0 <ADC_ConversionStop>
 80031e6:	4603      	mov	r3, r0
 80031e8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80031ea:	7bfb      	ldrb	r3, [r7, #15]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d13d      	bne.n	800326c <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68da      	ldr	r2, [r3, #12]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0203 	bic.w	r2, r2, #3
 80031fe:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003204:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d10f      	bne.n	800322e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003212:	4618      	mov	r0, r3
 8003214:	f002 fdf8 	bl	8005e08 <HAL_DMA_Abort>
 8003218:	4603      	mov	r3, r0
 800321a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800321c:	7bfb      	ldrb	r3, [r7, #15]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d005      	beq.n	800322e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003226:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0210 	bic.w	r2, r2, #16
 800323c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d105      	bne.n	8003250 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 ff01 	bl	800404c <ADC_Disable>
 800324a:	4603      	mov	r3, r0
 800324c:	73fb      	strb	r3, [r7, #15]
 800324e:	e002      	b.n	8003256 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 fefb 	bl	800404c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003256:	7bfb      	ldrb	r3, [r7, #15]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d107      	bne.n	800326c <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003260:	4b07      	ldr	r3, [pc, #28]	; (8003280 <HAL_ADC_Stop_DMA+0xc0>)
 8003262:	4013      	ands	r3, r2
 8003264:	f043 0201 	orr.w	r2, r3, #1
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003274:	7bfb      	ldrb	r3, [r7, #15]
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	ffffeefe 	.word	0xffffeefe

08003284 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08a      	sub	sp, #40	; 0x28
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800328c:	2300      	movs	r3, #0
 800328e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a87      	ldr	r2, [pc, #540]	; (80034c4 <HAL_ADC_IRQHandler+0x240>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d004      	beq.n	80032b4 <HAL_ADC_IRQHandler+0x30>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a86      	ldr	r2, [pc, #536]	; (80034c8 <HAL_ADC_IRQHandler+0x244>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d101      	bne.n	80032b8 <HAL_ADC_IRQHandler+0x34>
 80032b4:	4b85      	ldr	r3, [pc, #532]	; (80034cc <HAL_ADC_IRQHandler+0x248>)
 80032b6:	e000      	b.n	80032ba <HAL_ADC_IRQHandler+0x36>
 80032b8:	4b85      	ldr	r3, [pc, #532]	; (80034d0 <HAL_ADC_IRQHandler+0x24c>)
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff fbfe 	bl	8002abc <LL_ADC_GetMultimode>
 80032c0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d017      	beq.n	80032fc <HAL_ADC_IRQHandler+0x78>
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d012      	beq.n	80032fc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032da:	f003 0310 	and.w	r3, r3, #16
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d105      	bne.n	80032ee <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f001 f990 	bl	8004614 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2202      	movs	r2, #2
 80032fa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f003 0304 	and.w	r3, r3, #4
 8003302:	2b00      	cmp	r3, #0
 8003304:	d004      	beq.n	8003310 <HAL_ADC_IRQHandler+0x8c>
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10a      	bne.n	8003326 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 8083 	beq.w	8003422 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b00      	cmp	r3, #0
 8003324:	d07d      	beq.n	8003422 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332a:	f003 0310 	and.w	r3, r3, #16
 800332e:	2b00      	cmp	r3, #0
 8003330:	d105      	bne.n	800333e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003336:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff fb06 	bl	8002954 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d062      	beq.n	8003414 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a5d      	ldr	r2, [pc, #372]	; (80034c8 <HAL_ADC_IRQHandler+0x244>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d002      	beq.n	800335e <HAL_ADC_IRQHandler+0xda>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	e000      	b.n	8003360 <HAL_ADC_IRQHandler+0xdc>
 800335e:	4b59      	ldr	r3, [pc, #356]	; (80034c4 <HAL_ADC_IRQHandler+0x240>)
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6812      	ldr	r2, [r2, #0]
 8003364:	4293      	cmp	r3, r2
 8003366:	d008      	beq.n	800337a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d005      	beq.n	800337a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	2b05      	cmp	r3, #5
 8003372:	d002      	beq.n	800337a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	2b09      	cmp	r3, #9
 8003378:	d104      	bne.n	8003384 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	623b      	str	r3, [r7, #32]
 8003382:	e00c      	b.n	800339e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a4f      	ldr	r2, [pc, #316]	; (80034c8 <HAL_ADC_IRQHandler+0x244>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d002      	beq.n	8003394 <HAL_ADC_IRQHandler+0x110>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	e000      	b.n	8003396 <HAL_ADC_IRQHandler+0x112>
 8003394:	4b4b      	ldr	r3, [pc, #300]	; (80034c4 <HAL_ADC_IRQHandler+0x240>)
 8003396:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d135      	bne.n	8003414 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0308 	and.w	r3, r3, #8
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	d12e      	bne.n	8003414 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff fc5e 	bl	8002c7c <LL_ADC_REG_IsConversionOngoing>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d11a      	bne.n	80033fc <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 020c 	bic.w	r2, r2, #12
 80033d4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d112      	bne.n	8003414 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f2:	f043 0201 	orr.w	r2, r3, #1
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	655a      	str	r2, [r3, #84]	; 0x54
 80033fa:	e00b      	b.n	8003414 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003400:	f043 0210 	orr.w	r2, r3, #16
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340c:	f043 0201 	orr.w	r2, r3, #1
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7fe f93b 	bl	8001690 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	220c      	movs	r2, #12
 8003420:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	f003 0320 	and.w	r3, r3, #32
 8003428:	2b00      	cmp	r3, #0
 800342a:	d004      	beq.n	8003436 <HAL_ADC_IRQHandler+0x1b2>
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	f003 0320 	and.w	r3, r3, #32
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10b      	bne.n	800344e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 80a0 	beq.w	8003582 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 809a 	beq.w	8003582 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003452:	f003 0310 	and.w	r3, r3, #16
 8003456:	2b00      	cmp	r3, #0
 8003458:	d105      	bne.n	8003466 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff fac4 	bl	80029f8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003470:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff fa6c 	bl	8002954 <LL_ADC_REG_IsTriggerSourceSWStart>
 800347c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a11      	ldr	r2, [pc, #68]	; (80034c8 <HAL_ADC_IRQHandler+0x244>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d002      	beq.n	800348e <HAL_ADC_IRQHandler+0x20a>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	e000      	b.n	8003490 <HAL_ADC_IRQHandler+0x20c>
 800348e:	4b0d      	ldr	r3, [pc, #52]	; (80034c4 <HAL_ADC_IRQHandler+0x240>)
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6812      	ldr	r2, [r2, #0]
 8003494:	4293      	cmp	r3, r2
 8003496:	d008      	beq.n	80034aa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d005      	beq.n	80034aa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b06      	cmp	r3, #6
 80034a2:	d002      	beq.n	80034aa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	2b07      	cmp	r3, #7
 80034a8:	d104      	bne.n	80034b4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	623b      	str	r3, [r7, #32]
 80034b2:	e014      	b.n	80034de <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a03      	ldr	r2, [pc, #12]	; (80034c8 <HAL_ADC_IRQHandler+0x244>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d00a      	beq.n	80034d4 <HAL_ADC_IRQHandler+0x250>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	e008      	b.n	80034d6 <HAL_ADC_IRQHandler+0x252>
 80034c4:	40022000 	.word	0x40022000
 80034c8:	40022100 	.word	0x40022100
 80034cc:	40022300 	.word	0x40022300
 80034d0:	58026300 	.word	0x58026300
 80034d4:	4b84      	ldr	r3, [pc, #528]	; (80036e8 <HAL_ADC_IRQHandler+0x464>)
 80034d6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d047      	beq.n	8003574 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d007      	beq.n	80034fe <HAL_ADC_IRQHandler+0x27a>
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d03f      	beq.n	8003574 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d13a      	bne.n	8003574 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003508:	2b40      	cmp	r3, #64	; 0x40
 800350a:	d133      	bne.n	8003574 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d12e      	bne.n	8003574 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff fbd6 	bl	8002ccc <LL_ADC_INJ_IsConversionOngoing>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d11a      	bne.n	800355c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003534:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354a:	2b00      	cmp	r3, #0
 800354c:	d112      	bne.n	8003574 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003552:	f043 0201 	orr.w	r2, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	655a      	str	r2, [r3, #84]	; 0x54
 800355a:	e00b      	b.n	8003574 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003560:	f043 0210 	orr.w	r2, r3, #16
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356c:	f043 0201 	orr.w	r2, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f001 f825 	bl	80045c4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2260      	movs	r2, #96	; 0x60
 8003580:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003588:	2b00      	cmp	r3, #0
 800358a:	d011      	beq.n	80035b0 <HAL_ADC_IRQHandler+0x32c>
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00c      	beq.n	80035b0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f8a8 	bl	80036f8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2280      	movs	r2, #128	; 0x80
 80035ae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d012      	beq.n	80035e0 <HAL_ADC_IRQHandler+0x35c>
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00d      	beq.n	80035e0 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f001 f80b 	bl	80045ec <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035de:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d012      	beq.n	8003610 <HAL_ADC_IRQHandler+0x38c>
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00d      	beq.n	8003610 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 fffd 	bl	8004600 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800360e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f003 0310 	and.w	r3, r3, #16
 8003616:	2b00      	cmp	r3, #0
 8003618:	d043      	beq.n	80036a2 <HAL_ADC_IRQHandler+0x41e>
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	f003 0310 	and.w	r3, r3, #16
 8003620:	2b00      	cmp	r3, #0
 8003622:	d03e      	beq.n	80036a2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003628:	2b00      	cmp	r3, #0
 800362a:	d102      	bne.n	8003632 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800362c:	2301      	movs	r3, #1
 800362e:	627b      	str	r3, [r7, #36]	; 0x24
 8003630:	e021      	b.n	8003676 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d015      	beq.n	8003664 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a2a      	ldr	r2, [pc, #168]	; (80036e8 <HAL_ADC_IRQHandler+0x464>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d004      	beq.n	800364c <HAL_ADC_IRQHandler+0x3c8>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a29      	ldr	r2, [pc, #164]	; (80036ec <HAL_ADC_IRQHandler+0x468>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d101      	bne.n	8003650 <HAL_ADC_IRQHandler+0x3cc>
 800364c:	4b28      	ldr	r3, [pc, #160]	; (80036f0 <HAL_ADC_IRQHandler+0x46c>)
 800364e:	e000      	b.n	8003652 <HAL_ADC_IRQHandler+0x3ce>
 8003650:	4b28      	ldr	r3, [pc, #160]	; (80036f4 <HAL_ADC_IRQHandler+0x470>)
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff fa40 	bl	8002ad8 <LL_ADC_GetMultiDMATransfer>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00b      	beq.n	8003676 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800365e:	2301      	movs	r3, #1
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
 8003662:	e008      	b.n	8003676 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003672:	2301      	movs	r3, #1
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	2b01      	cmp	r3, #1
 800367a:	d10e      	bne.n	800369a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003680:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368c:	f043 0202 	orr.w	r2, r3, #2
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f839 	bl	800370c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2210      	movs	r2, #16
 80036a0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d018      	beq.n	80036de <HAL_ADC_IRQHandler+0x45a>
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d013      	beq.n	80036de <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ba:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c6:	f043 0208 	orr.w	r2, r3, #8
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036d6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 ff7d 	bl	80045d8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80036de:	bf00      	nop
 80036e0:	3728      	adds	r7, #40	; 0x28
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40022000 	.word	0x40022000
 80036ec:	40022100 	.word	0x40022100
 80036f0:	40022300 	.word	0x40022300
 80036f4:	58026300 	.word	0x58026300

080036f8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003720:	b590      	push	{r4, r7, lr}
 8003722:	b0a1      	sub	sp, #132	; 0x84
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003730:	2300      	movs	r3, #0
 8003732:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	4a9d      	ldr	r2, [pc, #628]	; (80039b0 <HAL_ADC_ConfigChannel+0x290>)
 800373a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_ADC_ConfigChannel+0x2a>
 8003746:	2302      	movs	r3, #2
 8003748:	e321      	b.n	8003d8e <HAL_ADC_ConfigChannel+0x66e>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff fa90 	bl	8002c7c <LL_ADC_REG_IsConversionOngoing>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	f040 8306 	bne.w	8003d70 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800376c:	2b00      	cmp	r3, #0
 800376e:	d108      	bne.n	8003782 <HAL_ADC_ConfigChannel+0x62>
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	0e9b      	lsrs	r3, r3, #26
 8003776:	f003 031f 	and.w	r3, r3, #31
 800377a:	2201      	movs	r2, #1
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	e016      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x90>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003788:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800378a:	fa93 f3a3 	rbit	r3, r3
 800378e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003790:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003792:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003794:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800379a:	2320      	movs	r3, #32
 800379c:	e003      	b.n	80037a6 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800379e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037a0:	fab3 f383 	clz	r3, r3
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	f003 031f 	and.w	r3, r3, #31
 80037aa:	2201      	movs	r2, #1
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	6812      	ldr	r2, [r2, #0]
 80037b4:	69d1      	ldr	r1, [r2, #28]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6812      	ldr	r2, [r2, #0]
 80037ba:	430b      	orrs	r3, r1
 80037bc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6818      	ldr	r0, [r3, #0]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	6859      	ldr	r1, [r3, #4]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	461a      	mov	r2, r3
 80037cc:	f7ff f8d5 	bl	800297a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff fa51 	bl	8002c7c <LL_ADC_REG_IsConversionOngoing>
 80037da:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7ff fa73 	bl	8002ccc <LL_ADC_INJ_IsConversionOngoing>
 80037e6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80037e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f040 80b3 	bne.w	8003956 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f040 80af 	bne.w	8003956 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6818      	ldr	r0, [r3, #0]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	6819      	ldr	r1, [r3, #0]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	461a      	mov	r2, r3
 8003806:	f7ff f90a 	bl	8002a1e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800380a:	4b6a      	ldr	r3, [pc, #424]	; (80039b4 <HAL_ADC_ConfigChannel+0x294>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003812:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003816:	d10b      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x110>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	695a      	ldr	r2, [r3, #20]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	089b      	lsrs	r3, r3, #2
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	e01d      	b.n	800386c <HAL_ADC_ConfigChannel+0x14c>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f003 0310 	and.w	r3, r3, #16
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10b      	bne.n	8003856 <HAL_ADC_ConfigChannel+0x136>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	695a      	ldr	r2, [r3, #20]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	089b      	lsrs	r3, r3, #2
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	e00a      	b.n	800386c <HAL_ADC_ConfigChannel+0x14c>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	695a      	ldr	r2, [r3, #20]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	089b      	lsrs	r3, r3, #2
 8003862:	f003 0304 	and.w	r3, r3, #4
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	2b04      	cmp	r3, #4
 8003874:	d027      	beq.n	80038c6 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6818      	ldr	r0, [r3, #0]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	6919      	ldr	r1, [r3, #16]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003884:	f7ff f812 	bl	80028ac <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6818      	ldr	r0, [r3, #0]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	6919      	ldr	r1, [r3, #16]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	7e5b      	ldrb	r3, [r3, #25]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d102      	bne.n	800389e <HAL_ADC_ConfigChannel+0x17e>
 8003898:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800389c:	e000      	b.n	80038a0 <HAL_ADC_ConfigChannel+0x180>
 800389e:	2300      	movs	r3, #0
 80038a0:	461a      	mov	r2, r3
 80038a2:	f7ff f83c 	bl	800291e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6818      	ldr	r0, [r3, #0]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	6919      	ldr	r1, [r3, #16]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	7e1b      	ldrb	r3, [r3, #24]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d102      	bne.n	80038bc <HAL_ADC_ConfigChannel+0x19c>
 80038b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038ba:	e000      	b.n	80038be <HAL_ADC_ConfigChannel+0x19e>
 80038bc:	2300      	movs	r3, #0
 80038be:	461a      	mov	r2, r3
 80038c0:	f7ff f814 	bl	80028ec <LL_ADC_SetDataRightShift>
 80038c4:	e047      	b.n	8003956 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	069b      	lsls	r3, r3, #26
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d107      	bne.n	80038ea <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80038e8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	069b      	lsls	r3, r3, #26
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d107      	bne.n	800390e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800390c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003914:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	069b      	lsls	r3, r3, #26
 800391e:	429a      	cmp	r2, r3
 8003920:	d107      	bne.n	8003932 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003930:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003938:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	069b      	lsls	r3, r3, #26
 8003942:	429a      	cmp	r2, r3
 8003944:	d107      	bne.n	8003956 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003954:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff f940 	bl	8002be0 <LL_ADC_IsEnabled>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	f040 820d 	bne.w	8003d82 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6818      	ldr	r0, [r3, #0]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	6819      	ldr	r1, [r3, #0]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	461a      	mov	r2, r3
 8003976:	f7ff f87d 	bl	8002a74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	4a0c      	ldr	r2, [pc, #48]	; (80039b0 <HAL_ADC_ConfigChannel+0x290>)
 8003980:	4293      	cmp	r3, r2
 8003982:	f040 8133 	bne.w	8003bec <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003992:	2b00      	cmp	r3, #0
 8003994:	d110      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x298>
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	0e9b      	lsrs	r3, r3, #26
 800399c:	3301      	adds	r3, #1
 800399e:	f003 031f 	and.w	r3, r3, #31
 80039a2:	2b09      	cmp	r3, #9
 80039a4:	bf94      	ite	ls
 80039a6:	2301      	movls	r3, #1
 80039a8:	2300      	movhi	r3, #0
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	e01e      	b.n	80039ec <HAL_ADC_ConfigChannel+0x2cc>
 80039ae:	bf00      	nop
 80039b0:	47ff0000 	.word	0x47ff0000
 80039b4:	5c001000 	.word	0x5c001000
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039c0:	fa93 f3a3 	rbit	r3, r3
 80039c4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80039c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80039ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d101      	bne.n	80039d4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80039d0:	2320      	movs	r3, #32
 80039d2:	e003      	b.n	80039dc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80039d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039d6:	fab3 f383 	clz	r3, r3
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	3301      	adds	r3, #1
 80039de:	f003 031f 	and.w	r3, r3, #31
 80039e2:	2b09      	cmp	r3, #9
 80039e4:	bf94      	ite	ls
 80039e6:	2301      	movls	r3, #1
 80039e8:	2300      	movhi	r3, #0
 80039ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d079      	beq.n	8003ae4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d107      	bne.n	8003a0c <HAL_ADC_ConfigChannel+0x2ec>
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	0e9b      	lsrs	r3, r3, #26
 8003a02:	3301      	adds	r3, #1
 8003a04:	069b      	lsls	r3, r3, #26
 8003a06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a0a:	e015      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x318>
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a14:	fa93 f3a3 	rbit	r3, r3
 8003a18:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003a1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a1c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003a1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003a24:	2320      	movs	r3, #32
 8003a26:	e003      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003a28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a2a:	fab3 f383 	clz	r3, r3
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	3301      	adds	r3, #1
 8003a32:	069b      	lsls	r3, r3, #26
 8003a34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d109      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0x338>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	0e9b      	lsrs	r3, r3, #26
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	f003 031f 	and.w	r3, r3, #31
 8003a50:	2101      	movs	r1, #1
 8003a52:	fa01 f303 	lsl.w	r3, r1, r3
 8003a56:	e017      	b.n	8003a88 <HAL_ADC_ConfigChannel+0x368>
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a60:	fa93 f3a3 	rbit	r3, r3
 8003a64:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a68:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003a6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003a70:	2320      	movs	r3, #32
 8003a72:	e003      	b.n	8003a7c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a76:	fab3 f383 	clz	r3, r3
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	f003 031f 	and.w	r3, r3, #31
 8003a82:	2101      	movs	r1, #1
 8003a84:	fa01 f303 	lsl.w	r3, r1, r3
 8003a88:	ea42 0103 	orr.w	r1, r2, r3
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10a      	bne.n	8003aae <HAL_ADC_ConfigChannel+0x38e>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	0e9b      	lsrs	r3, r3, #26
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	f003 021f 	and.w	r2, r3, #31
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	4413      	add	r3, r2
 8003aaa:	051b      	lsls	r3, r3, #20
 8003aac:	e018      	b.n	8003ae0 <HAL_ADC_ConfigChannel+0x3c0>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab6:	fa93 f3a3 	rbit	r3, r3
 8003aba:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003ac6:	2320      	movs	r3, #32
 8003ac8:	e003      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003acc:	fab3 f383 	clz	r3, r3
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	f003 021f 	and.w	r2, r3, #31
 8003ad8:	4613      	mov	r3, r2
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	4413      	add	r3, r2
 8003ade:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	e07e      	b.n	8003be2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d107      	bne.n	8003b00 <HAL_ADC_ConfigChannel+0x3e0>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	0e9b      	lsrs	r3, r3, #26
 8003af6:	3301      	adds	r3, #1
 8003af8:	069b      	lsls	r3, r3, #26
 8003afa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003afe:	e015      	b.n	8003b2c <HAL_ADC_ConfigChannel+0x40c>
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b08:	fa93 f3a3 	rbit	r3, r3
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003b18:	2320      	movs	r3, #32
 8003b1a:	e003      	b.n	8003b24 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1e:	fab3 f383 	clz	r3, r3
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	3301      	adds	r3, #1
 8003b26:	069b      	lsls	r3, r3, #26
 8003b28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d109      	bne.n	8003b4c <HAL_ADC_ConfigChannel+0x42c>
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	0e9b      	lsrs	r3, r3, #26
 8003b3e:	3301      	adds	r3, #1
 8003b40:	f003 031f 	and.w	r3, r3, #31
 8003b44:	2101      	movs	r1, #1
 8003b46:	fa01 f303 	lsl.w	r3, r1, r3
 8003b4a:	e017      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x45c>
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	fa93 f3a3 	rbit	r3, r3
 8003b58:	61bb      	str	r3, [r7, #24]
  return result;
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003b64:	2320      	movs	r3, #32
 8003b66:	e003      	b.n	8003b70 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	fab3 f383 	clz	r3, r3
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	3301      	adds	r3, #1
 8003b72:	f003 031f 	and.w	r3, r3, #31
 8003b76:	2101      	movs	r1, #1
 8003b78:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7c:	ea42 0103 	orr.w	r1, r2, r3
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10d      	bne.n	8003ba8 <HAL_ADC_ConfigChannel+0x488>
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	0e9b      	lsrs	r3, r3, #26
 8003b92:	3301      	adds	r3, #1
 8003b94:	f003 021f 	and.w	r2, r3, #31
 8003b98:	4613      	mov	r3, r2
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	4413      	add	r3, r2
 8003b9e:	3b1e      	subs	r3, #30
 8003ba0:	051b      	lsls	r3, r3, #20
 8003ba2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ba6:	e01b      	b.n	8003be0 <HAL_ADC_ConfigChannel+0x4c0>
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	fa93 f3a3 	rbit	r3, r3
 8003bb4:	60fb      	str	r3, [r7, #12]
  return result;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003bc0:	2320      	movs	r3, #32
 8003bc2:	e003      	b.n	8003bcc <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	fab3 f383 	clz	r3, r3
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	3301      	adds	r3, #1
 8003bce:	f003 021f 	and.w	r2, r3, #31
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3b1e      	subs	r3, #30
 8003bda:	051b      	lsls	r3, r3, #20
 8003bdc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003be0:	430b      	orrs	r3, r1
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	6892      	ldr	r2, [r2, #8]
 8003be6:	4619      	mov	r1, r3
 8003be8:	f7fe ff19 	bl	8002a1e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f280 80c6 	bge.w	8003d82 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a67      	ldr	r2, [pc, #412]	; (8003d98 <HAL_ADC_ConfigChannel+0x678>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d004      	beq.n	8003c0a <HAL_ADC_ConfigChannel+0x4ea>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a65      	ldr	r2, [pc, #404]	; (8003d9c <HAL_ADC_ConfigChannel+0x67c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d101      	bne.n	8003c0e <HAL_ADC_ConfigChannel+0x4ee>
 8003c0a:	4b65      	ldr	r3, [pc, #404]	; (8003da0 <HAL_ADC_ConfigChannel+0x680>)
 8003c0c:	e000      	b.n	8003c10 <HAL_ADC_ConfigChannel+0x4f0>
 8003c0e:	4b65      	ldr	r3, [pc, #404]	; (8003da4 <HAL_ADC_ConfigChannel+0x684>)
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7fe fe3d 	bl	8002890 <LL_ADC_GetCommonPathInternalCh>
 8003c16:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a5e      	ldr	r2, [pc, #376]	; (8003d98 <HAL_ADC_ConfigChannel+0x678>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d004      	beq.n	8003c2c <HAL_ADC_ConfigChannel+0x50c>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a5d      	ldr	r2, [pc, #372]	; (8003d9c <HAL_ADC_ConfigChannel+0x67c>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d10e      	bne.n	8003c4a <HAL_ADC_ConfigChannel+0x52a>
 8003c2c:	485a      	ldr	r0, [pc, #360]	; (8003d98 <HAL_ADC_ConfigChannel+0x678>)
 8003c2e:	f7fe ffd7 	bl	8002be0 <LL_ADC_IsEnabled>
 8003c32:	4604      	mov	r4, r0
 8003c34:	4859      	ldr	r0, [pc, #356]	; (8003d9c <HAL_ADC_ConfigChannel+0x67c>)
 8003c36:	f7fe ffd3 	bl	8002be0 <LL_ADC_IsEnabled>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	4323      	orrs	r3, r4
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	bf0c      	ite	eq
 8003c42:	2301      	moveq	r3, #1
 8003c44:	2300      	movne	r3, #0
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	e008      	b.n	8003c5c <HAL_ADC_ConfigChannel+0x53c>
 8003c4a:	4857      	ldr	r0, [pc, #348]	; (8003da8 <HAL_ADC_ConfigChannel+0x688>)
 8003c4c:	f7fe ffc8 	bl	8002be0 <LL_ADC_IsEnabled>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	bf0c      	ite	eq
 8003c56:	2301      	moveq	r3, #1
 8003c58:	2300      	movne	r3, #0
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d07d      	beq.n	8003d5c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a51      	ldr	r2, [pc, #324]	; (8003dac <HAL_ADC_ConfigChannel+0x68c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d130      	bne.n	8003ccc <HAL_ADC_ConfigChannel+0x5ac>
 8003c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d12b      	bne.n	8003ccc <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a4b      	ldr	r2, [pc, #300]	; (8003da8 <HAL_ADC_ConfigChannel+0x688>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	f040 8081 	bne.w	8003d82 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a44      	ldr	r2, [pc, #272]	; (8003d98 <HAL_ADC_ConfigChannel+0x678>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d004      	beq.n	8003c94 <HAL_ADC_ConfigChannel+0x574>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a43      	ldr	r2, [pc, #268]	; (8003d9c <HAL_ADC_ConfigChannel+0x67c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d101      	bne.n	8003c98 <HAL_ADC_ConfigChannel+0x578>
 8003c94:	4a42      	ldr	r2, [pc, #264]	; (8003da0 <HAL_ADC_ConfigChannel+0x680>)
 8003c96:	e000      	b.n	8003c9a <HAL_ADC_ConfigChannel+0x57a>
 8003c98:	4a42      	ldr	r2, [pc, #264]	; (8003da4 <HAL_ADC_ConfigChannel+0x684>)
 8003c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	4610      	mov	r0, r2
 8003ca4:	f7fe fde1 	bl	800286a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ca8:	4b41      	ldr	r3, [pc, #260]	; (8003db0 <HAL_ADC_ConfigChannel+0x690>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	099b      	lsrs	r3, r3, #6
 8003cae:	4a41      	ldr	r2, [pc, #260]	; (8003db4 <HAL_ADC_ConfigChannel+0x694>)
 8003cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb4:	099b      	lsrs	r3, r3, #6
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003cbc:	e002      	b.n	8003cc4 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f9      	bne.n	8003cbe <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cca:	e05a      	b.n	8003d82 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a39      	ldr	r2, [pc, #228]	; (8003db8 <HAL_ADC_ConfigChannel+0x698>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d11e      	bne.n	8003d14 <HAL_ADC_ConfigChannel+0x5f4>
 8003cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d119      	bne.n	8003d14 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a30      	ldr	r2, [pc, #192]	; (8003da8 <HAL_ADC_ConfigChannel+0x688>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d14b      	bne.n	8003d82 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a2a      	ldr	r2, [pc, #168]	; (8003d98 <HAL_ADC_ConfigChannel+0x678>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d004      	beq.n	8003cfe <HAL_ADC_ConfigChannel+0x5de>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a28      	ldr	r2, [pc, #160]	; (8003d9c <HAL_ADC_ConfigChannel+0x67c>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d101      	bne.n	8003d02 <HAL_ADC_ConfigChannel+0x5e2>
 8003cfe:	4a28      	ldr	r2, [pc, #160]	; (8003da0 <HAL_ADC_ConfigChannel+0x680>)
 8003d00:	e000      	b.n	8003d04 <HAL_ADC_ConfigChannel+0x5e4>
 8003d02:	4a28      	ldr	r2, [pc, #160]	; (8003da4 <HAL_ADC_ConfigChannel+0x684>)
 8003d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	f7fe fdac 	bl	800286a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d12:	e036      	b.n	8003d82 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a28      	ldr	r2, [pc, #160]	; (8003dbc <HAL_ADC_ConfigChannel+0x69c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d131      	bne.n	8003d82 <HAL_ADC_ConfigChannel+0x662>
 8003d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d12c      	bne.n	8003d82 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a1e      	ldr	r2, [pc, #120]	; (8003da8 <HAL_ADC_ConfigChannel+0x688>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d127      	bne.n	8003d82 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a18      	ldr	r2, [pc, #96]	; (8003d98 <HAL_ADC_ConfigChannel+0x678>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d004      	beq.n	8003d46 <HAL_ADC_ConfigChannel+0x626>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a16      	ldr	r2, [pc, #88]	; (8003d9c <HAL_ADC_ConfigChannel+0x67c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d101      	bne.n	8003d4a <HAL_ADC_ConfigChannel+0x62a>
 8003d46:	4a16      	ldr	r2, [pc, #88]	; (8003da0 <HAL_ADC_ConfigChannel+0x680>)
 8003d48:	e000      	b.n	8003d4c <HAL_ADC_ConfigChannel+0x62c>
 8003d4a:	4a16      	ldr	r2, [pc, #88]	; (8003da4 <HAL_ADC_ConfigChannel+0x684>)
 8003d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d52:	4619      	mov	r1, r3
 8003d54:	4610      	mov	r0, r2
 8003d56:	f7fe fd88 	bl	800286a <LL_ADC_SetCommonPathInternalCh>
 8003d5a:	e012      	b.n	8003d82 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d60:	f043 0220 	orr.w	r2, r3, #32
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003d6e:	e008      	b.n	8003d82 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d74:	f043 0220 	orr.w	r2, r3, #32
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003d8a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3784      	adds	r7, #132	; 0x84
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd90      	pop	{r4, r7, pc}
 8003d96:	bf00      	nop
 8003d98:	40022000 	.word	0x40022000
 8003d9c:	40022100 	.word	0x40022100
 8003da0:	40022300 	.word	0x40022300
 8003da4:	58026300 	.word	0x58026300
 8003da8:	58026000 	.word	0x58026000
 8003dac:	cb840000 	.word	0xcb840000
 8003db0:	24000000 	.word	0x24000000
 8003db4:	053e2d63 	.word	0x053e2d63
 8003db8:	c7520000 	.word	0xc7520000
 8003dbc:	cfb80000 	.word	0xcfb80000

08003dc0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b088      	sub	sp, #32
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7fe ff50 	bl	8002c7c <LL_ADC_REG_IsConversionOngoing>
 8003ddc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fe ff72 	bl	8002ccc <LL_ADC_INJ_IsConversionOngoing>
 8003de8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d103      	bne.n	8003df8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 8098 	beq.w	8003f28 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d02a      	beq.n	8003e5c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	7d5b      	ldrb	r3, [r3, #21]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d126      	bne.n	8003e5c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	7d1b      	ldrb	r3, [r3, #20]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d122      	bne.n	8003e5c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003e16:	2301      	movs	r3, #1
 8003e18:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003e1a:	e014      	b.n	8003e46 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	4a45      	ldr	r2, [pc, #276]	; (8003f34 <ADC_ConversionStop+0x174>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d90d      	bls.n	8003e40 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e28:	f043 0210 	orr.w	r2, r3, #16
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e34:	f043 0201 	orr.w	r2, r3, #1
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e074      	b.n	8003f2a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	3301      	adds	r3, #1
 8003e44:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e50:	2b40      	cmp	r3, #64	; 0x40
 8003e52:	d1e3      	bne.n	8003e1c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2240      	movs	r2, #64	; 0x40
 8003e5a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d014      	beq.n	8003e8c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fe ff08 	bl	8002c7c <LL_ADC_REG_IsConversionOngoing>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00c      	beq.n	8003e8c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fe fec5 	bl	8002c06 <LL_ADC_IsDisableOngoing>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d104      	bne.n	8003e8c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fe fee4 	bl	8002c54 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d014      	beq.n	8003ebc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fe ff18 	bl	8002ccc <LL_ADC_INJ_IsConversionOngoing>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00c      	beq.n	8003ebc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fe fead 	bl	8002c06 <LL_ADC_IsDisableOngoing>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d104      	bne.n	8003ebc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fe fef4 	bl	8002ca4 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d005      	beq.n	8003ece <ADC_ConversionStop+0x10e>
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	2b03      	cmp	r3, #3
 8003ec6:	d105      	bne.n	8003ed4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003ec8:	230c      	movs	r3, #12
 8003eca:	617b      	str	r3, [r7, #20]
        break;
 8003ecc:	e005      	b.n	8003eda <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003ece:	2308      	movs	r3, #8
 8003ed0:	617b      	str	r3, [r7, #20]
        break;
 8003ed2:	e002      	b.n	8003eda <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003ed4:	2304      	movs	r3, #4
 8003ed6:	617b      	str	r3, [r7, #20]
        break;
 8003ed8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003eda:	f7fe fc3d 	bl	8002758 <HAL_GetTick>
 8003ede:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003ee0:	e01b      	b.n	8003f1a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003ee2:	f7fe fc39 	bl	8002758 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b05      	cmp	r3, #5
 8003eee:	d914      	bls.n	8003f1a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00d      	beq.n	8003f1a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f02:	f043 0210 	orr.w	r2, r3, #16
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0e:	f043 0201 	orr.w	r2, r3, #1
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e007      	b.n	8003f2a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	4013      	ands	r3, r2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1dc      	bne.n	8003ee2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3720      	adds	r7, #32
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	000cdbff 	.word	0x000cdbff

08003f38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7fe fe4b 	bl	8002be0 <LL_ADC_IsEnabled>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d16e      	bne.n	800402e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689a      	ldr	r2, [r3, #8]
 8003f56:	4b38      	ldr	r3, [pc, #224]	; (8004038 <ADC_Enable+0x100>)
 8003f58:	4013      	ands	r3, r2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00d      	beq.n	8003f7a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f62:	f043 0210 	orr.w	r2, r3, #16
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6e:	f043 0201 	orr.w	r2, r3, #1
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e05a      	b.n	8004030 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fe fe06 	bl	8002b90 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003f84:	f7fe fbe8 	bl	8002758 <HAL_GetTick>
 8003f88:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a2b      	ldr	r2, [pc, #172]	; (800403c <ADC_Enable+0x104>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d004      	beq.n	8003f9e <ADC_Enable+0x66>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a29      	ldr	r2, [pc, #164]	; (8004040 <ADC_Enable+0x108>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d101      	bne.n	8003fa2 <ADC_Enable+0x6a>
 8003f9e:	4b29      	ldr	r3, [pc, #164]	; (8004044 <ADC_Enable+0x10c>)
 8003fa0:	e000      	b.n	8003fa4 <ADC_Enable+0x6c>
 8003fa2:	4b29      	ldr	r3, [pc, #164]	; (8004048 <ADC_Enable+0x110>)
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fe fd89 	bl	8002abc <LL_ADC_GetMultimode>
 8003faa:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a23      	ldr	r2, [pc, #140]	; (8004040 <ADC_Enable+0x108>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d002      	beq.n	8003fbc <ADC_Enable+0x84>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	e000      	b.n	8003fbe <ADC_Enable+0x86>
 8003fbc:	4b1f      	ldr	r3, [pc, #124]	; (800403c <ADC_Enable+0x104>)
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6812      	ldr	r2, [r2, #0]
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d02c      	beq.n	8004020 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d130      	bne.n	800402e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fcc:	e028      	b.n	8004020 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fe fe04 	bl	8002be0 <LL_ADC_IsEnabled>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d104      	bne.n	8003fe8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fe fdd4 	bl	8002b90 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003fe8:	f7fe fbb6 	bl	8002758 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d914      	bls.n	8004020 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b01      	cmp	r3, #1
 8004002:	d00d      	beq.n	8004020 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004008:	f043 0210 	orr.w	r2, r3, #16
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004014:	f043 0201 	orr.w	r2, r3, #1
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e007      	b.n	8004030 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b01      	cmp	r3, #1
 800402c:	d1cf      	bne.n	8003fce <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	8000003f 	.word	0x8000003f
 800403c:	40022000 	.word	0x40022000
 8004040:	40022100 	.word	0x40022100
 8004044:	40022300 	.word	0x40022300
 8004048:	58026300 	.word	0x58026300

0800404c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f7fe fdd4 	bl	8002c06 <LL_ADC_IsDisableOngoing>
 800405e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4618      	mov	r0, r3
 8004066:	f7fe fdbb 	bl	8002be0 <LL_ADC_IsEnabled>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d047      	beq.n	8004100 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d144      	bne.n	8004100 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 030d 	and.w	r3, r3, #13
 8004080:	2b01      	cmp	r3, #1
 8004082:	d10c      	bne.n	800409e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4618      	mov	r0, r3
 800408a:	f7fe fd95 	bl	8002bb8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2203      	movs	r2, #3
 8004094:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004096:	f7fe fb5f 	bl	8002758 <HAL_GetTick>
 800409a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800409c:	e029      	b.n	80040f2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a2:	f043 0210 	orr.w	r2, r3, #16
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ae:	f043 0201 	orr.w	r2, r3, #1
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e023      	b.n	8004102 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80040ba:	f7fe fb4d 	bl	8002758 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d914      	bls.n	80040f2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00d      	beq.n	80040f2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040da:	f043 0210 	orr.w	r2, r3, #16
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e6:	f043 0201 	orr.w	r2, r3, #1
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e007      	b.n	8004102 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1dc      	bne.n	80040ba <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b084      	sub	sp, #16
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004116:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004120:	2b00      	cmp	r3, #0
 8004122:	d14b      	bne.n	80041bc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004128:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d021      	beq.n	8004182 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f7fe fc06 	bl	8002954 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d032      	beq.n	80041b4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d12b      	bne.n	80041b4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004160:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d11f      	bne.n	80041b4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004178:	f043 0201 	orr.w	r2, r3, #1
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	655a      	str	r2, [r3, #84]	; 0x54
 8004180:	e018      	b.n	80041b4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f003 0303 	and.w	r3, r3, #3
 800418c:	2b00      	cmp	r3, #0
 800418e:	d111      	bne.n	80041b4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004194:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d105      	bne.n	80041b4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ac:	f043 0201 	orr.w	r2, r3, #1
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f7fd fa6b 	bl	8001690 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80041ba:	e00e      	b.n	80041da <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c0:	f003 0310 	and.w	r3, r3, #16
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f7ff fa9f 	bl	800370c <HAL_ADC_ErrorCallback>
}
 80041ce:	e004      	b.n	80041da <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	4798      	blx	r3
}
 80041da:	bf00      	nop
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b084      	sub	sp, #16
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f7fd fa0d 	bl	8001610 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041f6:	bf00      	nop
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b084      	sub	sp, #16
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004210:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421c:	f043 0204 	orr.w	r2, r3, #4
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f7ff fa71 	bl	800370c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800422a:	bf00      	nop
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
	...

08004234 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a79      	ldr	r2, [pc, #484]	; (8004428 <ADC_ConfigureBoostMode+0x1f4>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d004      	beq.n	8004250 <ADC_ConfigureBoostMode+0x1c>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a78      	ldr	r2, [pc, #480]	; (800442c <ADC_ConfigureBoostMode+0x1f8>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d109      	bne.n	8004264 <ADC_ConfigureBoostMode+0x30>
 8004250:	4b77      	ldr	r3, [pc, #476]	; (8004430 <ADC_ConfigureBoostMode+0x1fc>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004258:	2b00      	cmp	r3, #0
 800425a:	bf14      	ite	ne
 800425c:	2301      	movne	r3, #1
 800425e:	2300      	moveq	r3, #0
 8004260:	b2db      	uxtb	r3, r3
 8004262:	e008      	b.n	8004276 <ADC_ConfigureBoostMode+0x42>
 8004264:	4b73      	ldr	r3, [pc, #460]	; (8004434 <ADC_ConfigureBoostMode+0x200>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800426c:	2b00      	cmp	r3, #0
 800426e:	bf14      	ite	ne
 8004270:	2301      	movne	r3, #1
 8004272:	2300      	moveq	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d01c      	beq.n	80042b4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800427a:	f006 f90f 	bl	800a49c <HAL_RCC_GetHCLKFreq>
 800427e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004288:	d010      	beq.n	80042ac <ADC_ConfigureBoostMode+0x78>
 800428a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800428e:	d871      	bhi.n	8004374 <ADC_ConfigureBoostMode+0x140>
 8004290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004294:	d002      	beq.n	800429c <ADC_ConfigureBoostMode+0x68>
 8004296:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800429a:	d16b      	bne.n	8004374 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	0c1b      	lsrs	r3, r3, #16
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a8:	60fb      	str	r3, [r7, #12]
        break;
 80042aa:	e066      	b.n	800437a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	089b      	lsrs	r3, r3, #2
 80042b0:	60fb      	str	r3, [r7, #12]
        break;
 80042b2:	e062      	b.n	800437a <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80042b4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80042b8:	f007 f892 	bl	800b3e0 <HAL_RCCEx_GetPeriphCLKFreq>
 80042bc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80042c6:	d051      	beq.n	800436c <ADC_ConfigureBoostMode+0x138>
 80042c8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80042cc:	d854      	bhi.n	8004378 <ADC_ConfigureBoostMode+0x144>
 80042ce:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80042d2:	d047      	beq.n	8004364 <ADC_ConfigureBoostMode+0x130>
 80042d4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80042d8:	d84e      	bhi.n	8004378 <ADC_ConfigureBoostMode+0x144>
 80042da:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80042de:	d03d      	beq.n	800435c <ADC_ConfigureBoostMode+0x128>
 80042e0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80042e4:	d848      	bhi.n	8004378 <ADC_ConfigureBoostMode+0x144>
 80042e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042ea:	d033      	beq.n	8004354 <ADC_ConfigureBoostMode+0x120>
 80042ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042f0:	d842      	bhi.n	8004378 <ADC_ConfigureBoostMode+0x144>
 80042f2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80042f6:	d029      	beq.n	800434c <ADC_ConfigureBoostMode+0x118>
 80042f8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80042fc:	d83c      	bhi.n	8004378 <ADC_ConfigureBoostMode+0x144>
 80042fe:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004302:	d01a      	beq.n	800433a <ADC_ConfigureBoostMode+0x106>
 8004304:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004308:	d836      	bhi.n	8004378 <ADC_ConfigureBoostMode+0x144>
 800430a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800430e:	d014      	beq.n	800433a <ADC_ConfigureBoostMode+0x106>
 8004310:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004314:	d830      	bhi.n	8004378 <ADC_ConfigureBoostMode+0x144>
 8004316:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800431a:	d00e      	beq.n	800433a <ADC_ConfigureBoostMode+0x106>
 800431c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004320:	d82a      	bhi.n	8004378 <ADC_ConfigureBoostMode+0x144>
 8004322:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004326:	d008      	beq.n	800433a <ADC_ConfigureBoostMode+0x106>
 8004328:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800432c:	d824      	bhi.n	8004378 <ADC_ConfigureBoostMode+0x144>
 800432e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004332:	d002      	beq.n	800433a <ADC_ConfigureBoostMode+0x106>
 8004334:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004338:	d11e      	bne.n	8004378 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	0c9b      	lsrs	r3, r3, #18
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	fbb2 f3f3 	udiv	r3, r2, r3
 8004348:	60fb      	str	r3, [r7, #12]
        break;
 800434a:	e016      	b.n	800437a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	091b      	lsrs	r3, r3, #4
 8004350:	60fb      	str	r3, [r7, #12]
        break;
 8004352:	e012      	b.n	800437a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	095b      	lsrs	r3, r3, #5
 8004358:	60fb      	str	r3, [r7, #12]
        break;
 800435a:	e00e      	b.n	800437a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	099b      	lsrs	r3, r3, #6
 8004360:	60fb      	str	r3, [r7, #12]
        break;
 8004362:	e00a      	b.n	800437a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	09db      	lsrs	r3, r3, #7
 8004368:	60fb      	str	r3, [r7, #12]
        break;
 800436a:	e006      	b.n	800437a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	0a1b      	lsrs	r3, r3, #8
 8004370:	60fb      	str	r3, [r7, #12]
        break;
 8004372:	e002      	b.n	800437a <ADC_ConfigureBoostMode+0x146>
        break;
 8004374:	bf00      	nop
 8004376:	e000      	b.n	800437a <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004378:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800437a:	f7fe fa1d 	bl	80027b8 <HAL_GetREVID>
 800437e:	4603      	mov	r3, r0
 8004380:	f241 0203 	movw	r2, #4099	; 0x1003
 8004384:	4293      	cmp	r3, r2
 8004386:	d815      	bhi.n	80043b4 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4a2b      	ldr	r2, [pc, #172]	; (8004438 <ADC_ConfigureBoostMode+0x204>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d908      	bls.n	80043a2 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689a      	ldr	r2, [r3, #8]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800439e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80043a0:	e03e      	b.n	8004420 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043b0:	609a      	str	r2, [r3, #8]
}
 80043b2:	e035      	b.n	8004420 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	085b      	lsrs	r3, r3, #1
 80043b8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	4a1f      	ldr	r2, [pc, #124]	; (800443c <ADC_ConfigureBoostMode+0x208>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d808      	bhi.n	80043d4 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80043d0:	609a      	str	r2, [r3, #8]
}
 80043d2:	e025      	b.n	8004420 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4a1a      	ldr	r2, [pc, #104]	; (8004440 <ADC_ConfigureBoostMode+0x20c>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d80a      	bhi.n	80043f2 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043ee:	609a      	str	r2, [r3, #8]
}
 80043f0:	e016      	b.n	8004420 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	4a13      	ldr	r2, [pc, #76]	; (8004444 <ADC_ConfigureBoostMode+0x210>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d80a      	bhi.n	8004410 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800440c:	609a      	str	r2, [r3, #8]
}
 800440e:	e007      	b.n	8004420 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689a      	ldr	r2, [r3, #8]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800441e:	609a      	str	r2, [r3, #8]
}
 8004420:	bf00      	nop
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40022000 	.word	0x40022000
 800442c:	40022100 	.word	0x40022100
 8004430:	40022300 	.word	0x40022300
 8004434:	58026300 	.word	0x58026300
 8004438:	01312d00 	.word	0x01312d00
 800443c:	005f5e10 	.word	0x005f5e10
 8004440:	00bebc20 	.word	0x00bebc20
 8004444:	017d7840 	.word	0x017d7840

08004448 <LL_ADC_IsEnabled>:
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <LL_ADC_IsEnabled+0x18>
 800445c:	2301      	movs	r3, #1
 800445e:	e000      	b.n	8004462 <LL_ADC_IsEnabled+0x1a>
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
	...

08004470 <LL_ADC_StartCalibration>:
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <LL_ADC_StartCalibration+0x38>)
 8004482:	4013      	ands	r3, r2
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004490:	430a      	orrs	r2, r1
 8004492:	4313      	orrs	r3, r2
 8004494:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	609a      	str	r2, [r3, #8]
}
 800449c:	bf00      	nop
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	3ffeffc0 	.word	0x3ffeffc0

080044ac <LL_ADC_IsCalibrationOnGoing>:
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044c0:	d101      	bne.n	80044c6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <LL_ADC_REG_IsConversionOngoing>:
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b04      	cmp	r3, #4
 80044e6:	d101      	bne.n	80044ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80044e8:	2301      	movs	r3, #1
 80044ea:	e000      	b.n	80044ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
	...

080044fc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004508:	2300      	movs	r3, #0
 800450a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004512:	2b01      	cmp	r3, #1
 8004514:	d101      	bne.n	800451a <HAL_ADCEx_Calibration_Start+0x1e>
 8004516:	2302      	movs	r3, #2
 8004518:	e04c      	b.n	80045b4 <HAL_ADCEx_Calibration_Start+0xb8>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f7ff fd92 	bl	800404c <ADC_Disable>
 8004528:	4603      	mov	r3, r0
 800452a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800452c:	7dfb      	ldrb	r3, [r7, #23]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d135      	bne.n	800459e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004536:	4b21      	ldr	r3, [pc, #132]	; (80045bc <HAL_ADCEx_Calibration_Start+0xc0>)
 8004538:	4013      	ands	r3, r2
 800453a:	f043 0202 	orr.w	r2, r3, #2
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	68b9      	ldr	r1, [r7, #8]
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff ff90 	bl	8004470 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004550:	e014      	b.n	800457c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	3301      	adds	r3, #1
 8004556:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	4a19      	ldr	r2, [pc, #100]	; (80045c0 <HAL_ADCEx_Calibration_Start+0xc4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d30d      	bcc.n	800457c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004564:	f023 0312 	bic.w	r3, r3, #18
 8004568:	f043 0210 	orr.w	r2, r3, #16
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e01b      	b.n	80045b4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4618      	mov	r0, r3
 8004582:	f7ff ff93 	bl	80044ac <LL_ADC_IsCalibrationOnGoing>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1e2      	bne.n	8004552 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004590:	f023 0303 	bic.w	r3, r3, #3
 8004594:	f043 0201 	orr.w	r2, r3, #1
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	655a      	str	r2, [r3, #84]	; 0x54
 800459c:	e005      	b.n	80045aa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a2:	f043 0210 	orr.w	r2, r3, #16
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80045b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3718      	adds	r7, #24
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	ffffeefd 	.word	0xffffeefd
 80045c0:	25c3f800 	.word	0x25c3f800

080045c4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004628:	b590      	push	{r4, r7, lr}
 800462a:	b09f      	sub	sp, #124	; 0x7c
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800463e:	2b01      	cmp	r3, #1
 8004640:	d101      	bne.n	8004646 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004642:	2302      	movs	r3, #2
 8004644:	e0be      	b.n	80047c4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800464e:	2300      	movs	r3, #0
 8004650:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004652:	2300      	movs	r3, #0
 8004654:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a5c      	ldr	r2, [pc, #368]	; (80047cc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d102      	bne.n	8004666 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004660:	4b5b      	ldr	r3, [pc, #364]	; (80047d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004662:	60bb      	str	r3, [r7, #8]
 8004664:	e001      	b.n	800466a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004666:	2300      	movs	r3, #0
 8004668:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10b      	bne.n	8004688 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004674:	f043 0220 	orr.w	r2, r3, #32
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e09d      	b.n	80047c4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	4618      	mov	r0, r3
 800468c:	f7ff ff22 	bl	80044d4 <LL_ADC_REG_IsConversionOngoing>
 8004690:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4618      	mov	r0, r3
 8004698:	f7ff ff1c 	bl	80044d4 <LL_ADC_REG_IsConversionOngoing>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d17f      	bne.n	80047a2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80046a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d17c      	bne.n	80047a2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a47      	ldr	r2, [pc, #284]	; (80047cc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d004      	beq.n	80046bc <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a46      	ldr	r2, [pc, #280]	; (80047d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d101      	bne.n	80046c0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80046bc:	4b45      	ldr	r3, [pc, #276]	; (80047d4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80046be:	e000      	b.n	80046c2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80046c0:	4b45      	ldr	r3, [pc, #276]	; (80047d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80046c2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d039      	beq.n	8004740 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80046cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	431a      	orrs	r2, r3
 80046da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046dc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a3a      	ldr	r2, [pc, #232]	; (80047cc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d004      	beq.n	80046f2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a38      	ldr	r2, [pc, #224]	; (80047d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d10e      	bne.n	8004710 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80046f2:	4836      	ldr	r0, [pc, #216]	; (80047cc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80046f4:	f7ff fea8 	bl	8004448 <LL_ADC_IsEnabled>
 80046f8:	4604      	mov	r4, r0
 80046fa:	4835      	ldr	r0, [pc, #212]	; (80047d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80046fc:	f7ff fea4 	bl	8004448 <LL_ADC_IsEnabled>
 8004700:	4603      	mov	r3, r0
 8004702:	4323      	orrs	r3, r4
 8004704:	2b00      	cmp	r3, #0
 8004706:	bf0c      	ite	eq
 8004708:	2301      	moveq	r3, #1
 800470a:	2300      	movne	r3, #0
 800470c:	b2db      	uxtb	r3, r3
 800470e:	e008      	b.n	8004722 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004710:	4832      	ldr	r0, [pc, #200]	; (80047dc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004712:	f7ff fe99 	bl	8004448 <LL_ADC_IsEnabled>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	bf0c      	ite	eq
 800471c:	2301      	moveq	r3, #1
 800471e:	2300      	movne	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d047      	beq.n	80047b6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004728:	689a      	ldr	r2, [r3, #8]
 800472a:	4b2d      	ldr	r3, [pc, #180]	; (80047e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800472c:	4013      	ands	r3, r2
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	6811      	ldr	r1, [r2, #0]
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	6892      	ldr	r2, [r2, #8]
 8004736:	430a      	orrs	r2, r1
 8004738:	431a      	orrs	r2, r3
 800473a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800473c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800473e:	e03a      	b.n	80047b6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800474a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a1e      	ldr	r2, [pc, #120]	; (80047cc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d004      	beq.n	8004760 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a1d      	ldr	r2, [pc, #116]	; (80047d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d10e      	bne.n	800477e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004760:	481a      	ldr	r0, [pc, #104]	; (80047cc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004762:	f7ff fe71 	bl	8004448 <LL_ADC_IsEnabled>
 8004766:	4604      	mov	r4, r0
 8004768:	4819      	ldr	r0, [pc, #100]	; (80047d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800476a:	f7ff fe6d 	bl	8004448 <LL_ADC_IsEnabled>
 800476e:	4603      	mov	r3, r0
 8004770:	4323      	orrs	r3, r4
 8004772:	2b00      	cmp	r3, #0
 8004774:	bf0c      	ite	eq
 8004776:	2301      	moveq	r3, #1
 8004778:	2300      	movne	r3, #0
 800477a:	b2db      	uxtb	r3, r3
 800477c:	e008      	b.n	8004790 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800477e:	4817      	ldr	r0, [pc, #92]	; (80047dc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004780:	f7ff fe62 	bl	8004448 <LL_ADC_IsEnabled>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	bf0c      	ite	eq
 800478a:	2301      	moveq	r3, #1
 800478c:	2300      	movne	r3, #0
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	d010      	beq.n	80047b6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	4b11      	ldr	r3, [pc, #68]	; (80047e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800479a:	4013      	ands	r3, r2
 800479c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800479e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80047a0:	e009      	b.n	80047b6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a6:	f043 0220 	orr.w	r2, r3, #32
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80047b4:	e000      	b.n	80047b8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80047b6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80047c0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	377c      	adds	r7, #124	; 0x7c
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd90      	pop	{r4, r7, pc}
 80047cc:	40022000 	.word	0x40022000
 80047d0:	40022100 	.word	0x40022100
 80047d4:	40022300 	.word	0x40022300
 80047d8:	58026300 	.word	0x58026300
 80047dc:	58026000 	.word	0x58026000
 80047e0:	fffff0e0 	.word	0xfffff0e0

080047e4 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b088      	sub	sp, #32
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80047ec:	2300      	movs	r3, #0
 80047ee:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 80047f0:	2300      	movs	r3, #0
 80047f2:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d102      	bne.n	8004800 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	77fb      	strb	r3, [r7, #31]
 80047fe:	e10e      	b.n	8004a1e <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800480a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800480e:	d102      	bne.n	8004816 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	77fb      	strb	r3, [r7, #31]
 8004814:	e103      	b.n	8004a1e <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d109      	bne.n	8004836 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7fd fcad 	bl	8002190 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800484a:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 8004850:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 8004856:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 800485c:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8004862:	4313      	orrs	r3, r2
 8004864:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	4b6e      	ldr	r3, [pc, #440]	; (8004a28 <HAL_COMP_Init+0x244>)
 800486e:	4013      	ands	r3, r2
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6812      	ldr	r2, [r2, #0]
 8004874:	6979      	ldr	r1, [r7, #20]
 8004876:	430b      	orrs	r3, r1
 8004878:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	2b10      	cmp	r3, #16
 8004880:	d108      	bne.n	8004894 <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f042 0210 	orr.w	r2, r2, #16
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	e007      	b.n	80048a4 <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 0210 	bic.w	r2, r2, #16
 80048a2:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d016      	beq.n	80048e0 <HAL_COMP_Init+0xfc>
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d013      	beq.n	80048e0 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80048b8:	4b5c      	ldr	r3, [pc, #368]	; (8004a2c <HAL_COMP_Init+0x248>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	099b      	lsrs	r3, r3, #6
 80048be:	4a5c      	ldr	r2, [pc, #368]	; (8004a30 <HAL_COMP_Init+0x24c>)
 80048c0:	fba2 2303 	umull	r2, r3, r2, r3
 80048c4:	099b      	lsrs	r3, r3, #6
 80048c6:	1c5a      	adds	r2, r3, #1
 80048c8:	4613      	mov	r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	4413      	add	r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 80048d2:	e002      	b.n	80048da <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	3b01      	subs	r3, #1
 80048d8:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1f9      	bne.n	80048d4 <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a53      	ldr	r2, [pc, #332]	; (8004a34 <HAL_COMP_Init+0x250>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d102      	bne.n	80048f0 <HAL_COMP_Init+0x10c>
 80048ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80048ee:	e001      	b.n	80048f4 <HAL_COMP_Init+0x110>
 80048f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80048f4:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d06d      	beq.n	80049de <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	f003 0310 	and.w	r3, r3, #16
 800490a:	2b00      	cmp	r3, #0
 800490c:	d008      	beq.n	8004920 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 800490e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	4313      	orrs	r3, r2
 800491c:	600b      	str	r3, [r1, #0]
 800491e:	e008      	b.n	8004932 <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 8004920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	43db      	mvns	r3, r3
 800492a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800492e:	4013      	ands	r3, r2
 8004930:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	f003 0320 	and.w	r3, r3, #32
 800493a:	2b00      	cmp	r3, #0
 800493c:	d008      	beq.n	8004950 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 800493e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	4313      	orrs	r3, r2
 800494c:	604b      	str	r3, [r1, #4]
 800494e:	e008      	b.n	8004962 <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 8004950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	43db      	mvns	r3, r3
 800495a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800495e:	4013      	ands	r3, r2
 8004960:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 8004962:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00a      	beq.n	800498e <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 8004978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800497c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004980:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	4313      	orrs	r3, r2
 8004988:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800498c:	e00a      	b.n	80049a4 <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 800498e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004992:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	43db      	mvns	r3, r3
 800499a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800499e:	4013      	ands	r3, r2
 80049a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00a      	beq.n	80049c6 <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 80049b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80049b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	4313      	orrs	r3, r2
 80049c0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 80049c4:	e021      	b.n	8004a0a <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 80049c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ca:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	43db      	mvns	r3, r3
 80049d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049d6:	4013      	ands	r3, r2
 80049d8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 80049dc:	e015      	b.n	8004a0a <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 80049de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	43db      	mvns	r3, r3
 80049ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049ee:	4013      	ands	r3, r2
 80049f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 80049f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049f8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	43db      	mvns	r3, r3
 8004a00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a04:	4013      	ands	r3, r2
 8004a06:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d103      	bne.n	8004a1e <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
   
  }
  
  return status;
 8004a1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3720      	adds	r7, #32
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	f0e8cce1 	.word	0xf0e8cce1
 8004a2c:	24000000 	.word	0x24000000
 8004a30:	053e2d63 	.word	0x053e2d63
 8004a34:	5800380c 	.word	0x5800380c

08004a38 <HAL_COMP_Start>:
  * @brief  Start the comparator. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{ 
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8004a40:	2300      	movs	r3, #0
 8004a42:	60bb      	str	r3, [r7, #8]

  HAL_StatusTypeDef status = HAL_OK;
 8004a44:	2300      	movs	r3, #0
 8004a46:	73fb      	strb	r3, [r7, #15]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d102      	bne.n	8004a54 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	73fb      	strb	r3, [r7, #15]
 8004a52:	e030      	b.n	8004ab6 <HAL_COMP_Start+0x7e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a62:	d102      	bne.n	8004a6a <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	73fb      	strb	r3, [r7, #15]
 8004a68:	e025      	b.n	8004ab6 <HAL_COMP_Start+0x7e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d11d      	bne.n	8004ab2 <HAL_COMP_Start+0x7a>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_EN);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f042 0201 	orr.w	r2, r2, #1
 8004a84:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2202      	movs	r2, #2
 8004a8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
     /* Delay for COMP startup time */
     /* Wait loop initialization and execution */
     /* Note: Variable divided by 2 to compensate partially    */
     /*       CPU processing cycles.                           */
    
     wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a8e:	4b0d      	ldr	r3, [pc, #52]	; (8004ac4 <HAL_COMP_Start+0x8c>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	099b      	lsrs	r3, r3, #6
 8004a94:	4a0c      	ldr	r2, [pc, #48]	; (8004ac8 <HAL_COMP_Start+0x90>)
 8004a96:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9a:	099b      	lsrs	r3, r3, #6
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	00db      	lsls	r3, r3, #3
 8004aa0:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 8004aa2:	e002      	b.n	8004aaa <HAL_COMP_Start+0x72>
     {
       wait_loop_index--;
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1f9      	bne.n	8004aa4 <HAL_COMP_Start+0x6c>
 8004ab0:	e001      	b.n	8004ab6 <HAL_COMP_Start+0x7e>
     }      
    }
    else
    {
      status = HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	24000000 	.word	0x24000000
 8004ac8:	053e2d63 	.word	0x053e2d63

08004acc <HAL_COMP_Stop>:
  * @brief  Stop the comparator. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{ 
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d102      	bne.n	8004ae4 <HAL_COMP_Stop+0x18>
  {
    status = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	73fb      	strb	r3, [r7, #15]
 8004ae2:	e01f      	b.n	8004b24 <HAL_COMP_Stop+0x58>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004af2:	d102      	bne.n	8004afa <HAL_COMP_Stop+0x2e>
  {
    status = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	73fb      	strb	r3, [r7, #15]
 8004af8:	e014      	b.n	8004b24 <HAL_COMP_Stop+0x58>
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Check compliant states: HAL_COMP_STATE_READY or HAL_COMP_STATE_BUSY    */
    /* (all states except HAL_COMP_STATE_RESET and except locked status.      */
    if(hcomp->State != HAL_COMP_STATE_RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00c      	beq.n	8004b20 <HAL_COMP_Stop+0x54>
    {

      /* Disable the selected comparator */
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_EN);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 0201 	bic.w	r2, r2, #1
 8004b14:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8004b1e:	e001      	b.n	8004b24 <HAL_COMP_Stop+0x58>
    }
    else
    {
      status = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  return status;
 8004b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
	...

08004b34 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a45      	ldr	r2, [pc, #276]	; (8004c58 <HAL_COMP_IRQHandler+0x124>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d102      	bne.n	8004b4c <HAL_COMP_IRQHandler+0x18>
 8004b46:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004b4a:	e001      	b.n	8004b50 <HAL_COMP_IRQHandler+0x1c>
 8004b4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004b50:	60fb      	str	r3, [r7, #12]
  

#if defined(DUAL_CORE)
  /* EXTI line interrupt detected */
 if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8004b52:	f000 f9b5 	bl	8004ec0 <HAL_GetCurrentCPUID>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d11d      	bne.n	8004b98 <HAL_COMP_IRQHandler+0x64>
 {
    /* Check COMP EXTI flag */
    if(READ_BIT(EXTI->PR1, exti_line) != 0UL)
 8004b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b60:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4013      	ands	r3, r2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d032      	beq.n	8004bd2 <HAL_COMP_IRQHandler+0x9e>
    {    
       /* Check whether comparator is in independent or window mode */
        if(READ_BIT(COMP12_COMMON->CFGR, COMP_CFGRx_WINMODE) != 0UL)
 8004b6c:	4b3b      	ldr	r3, [pc, #236]	; (8004c5c <HAL_COMP_IRQHandler+0x128>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0310 	and.w	r3, r3, #16
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d006      	beq.n	8004b86 <HAL_COMP_IRQHandler+0x52>
          /* Note: Pair of comparators in window mode can both trig IRQ when      */
          /*       input voltage is changing from "out of window" area            */
          /*       (low or high ) to the other "out of window" area (high or low).*/
          /*       Both flags must be cleared to call comparator trigger          */
          /*       callback is called once.                                       */
          WRITE_REG(EXTI->PR1, (COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 8004b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b7c:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8004b80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8004b84:	e004      	b.n	8004b90 <HAL_COMP_IRQHandler+0x5c>
        }
        else
        {
          /* Clear COMP EXTI line pending bit */
          WRITE_REG(EXTI->PR1, exti_line);
 8004b86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7fc fe09 	bl	80017a8 <HAL_COMP_TriggerCallback>
 8004b96:	e01c      	b.n	8004bd2 <HAL_COMP_IRQHandler+0x9e>

 }
 else
 {
    /* Check COMP EXTI flag */
    if(READ_BIT(EXTI->C2PR1, exti_line) != 0UL)
 8004b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b9c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d014      	beq.n	8004bd2 <HAL_COMP_IRQHandler+0x9e>
    {    
       /* Check whether comparator is in independent or window mode */
        if(READ_BIT(COMP12_COMMON->CFGR, COMP_CFGRx_WINMODE) != 0UL)
 8004ba8:	4b2c      	ldr	r3, [pc, #176]	; (8004c5c <HAL_COMP_IRQHandler+0x128>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0310 	and.w	r3, r3, #16
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d006      	beq.n	8004bc2 <HAL_COMP_IRQHandler+0x8e>
          /* Note: Pair of comparators in window mode can both trig IRQ when      */
          /*       input voltage is changing from "out of window" area            */
          /*       (low or high ) to the other "out of window" area (high or low).*/
          /*       Both flags must be cleared to call comparator trigger          */
          /*       callback is called once.                                       */
          WRITE_REG(EXTI->C2PR1, (COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 8004bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb8:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8004bbc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8004bc0:	e004      	b.n	8004bcc <HAL_COMP_IRQHandler+0x98>
        }
        else
        {
          /* Clear COMP EXTI line pending bit */
          WRITE_REG(EXTI->C2PR1, exti_line);
 8004bc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7fc fdeb 	bl	80017a8 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
#endif /*DUAL_CORE*/

   /* Get COMP interrupt source */
  if (__HAL_COMP_GET_IT_SOURCE(hcomp, COMP_IT_EN) != RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bdc:	2b40      	cmp	r3, #64	; 0x40
 8004bde:	d136      	bne.n	8004c4e <HAL_COMP_IRQHandler+0x11a>
  {

    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C1I)) != 0UL)
 8004be0:	4b1f      	ldr	r3, [pc, #124]	; (8004c60 <HAL_COMP_IRQHandler+0x12c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bec:	d101      	bne.n	8004bf2 <HAL_COMP_IRQHandler+0xbe>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e000      	b.n	8004bf4 <HAL_COMP_IRQHandler+0xc0>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00b      	beq.n	8004c10 <HAL_COMP_IRQHandler+0xdc>
    {
      /* Clear the COMP channel 1 interrupt flag */
         __HAL_COMP_CLEAR_C1IFLAG();
 8004bf8:	4b19      	ldr	r3, [pc, #100]	; (8004c60 <HAL_COMP_IRQHandler+0x12c>)
 8004bfa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004bfe:	605a      	str	r2, [r3, #4]
   
      /* Disable COMP interrupt */
       __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c0e:	601a      	str	r2, [r3, #0]
   
    }
    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C2I)) != 0UL)
 8004c10:	4b13      	ldr	r3, [pc, #76]	; (8004c60 <HAL_COMP_IRQHandler+0x12c>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c1c:	d101      	bne.n	8004c22 <HAL_COMP_IRQHandler+0xee>
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e000      	b.n	8004c24 <HAL_COMP_IRQHandler+0xf0>
 8004c22:	2300      	movs	r3, #0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00b      	beq.n	8004c40 <HAL_COMP_IRQHandler+0x10c>
    {
     /* Clear the COMP channel 2 interrupt flag */
       __HAL_COMP_CLEAR_C2IFLAG();
 8004c28:	4b0d      	ldr	r3, [pc, #52]	; (8004c60 <HAL_COMP_IRQHandler+0x12c>)
 8004c2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c2e:	605a      	str	r2, [r3, #4]
   
     /* Disable COMP interrupt */
     __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c3e:	601a      	str	r2, [r3, #0]
       
    }

    /* Change COMP state */
    hcomp->State = HAL_COMP_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7fc fdad 	bl	80017a8 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }    
 

}
 8004c4e:	bf00      	nop
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	5800380c 	.word	0x5800380c
 8004c5c:	58003810 	.word	0x58003810
 8004c60:	58003800 	.word	0x58003800

08004c64 <HAL_COMP_GetOutputLevel>:
  *         @arg @ref COMP_OUTPUT_LEVEL_LOW
  *         @arg @ref COMP_OUTPUT_LEVEL_HIGH
  *       
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));
 
  if (hcomp->Instance == COMP1)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a09      	ldr	r2, [pc, #36]	; (8004c98 <HAL_COMP_GetOutputLevel+0x34>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d104      	bne.n	8004c80 <HAL_COMP_GetOutputLevel+0x1c>
  {
    return (uint32_t)(READ_BIT(COMP12->SR, COMP_SR_C1VAL));                 
 8004c76:	4b09      	ldr	r3, [pc, #36]	; (8004c9c <HAL_COMP_GetOutputLevel+0x38>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	e004      	b.n	8004c8a <HAL_COMP_GetOutputLevel+0x26>
  }
  else
  {
    return (uint32_t)((READ_BIT(COMP12->SR, COMP_SR_C2VAL))>> 1UL);
 8004c80:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <HAL_COMP_GetOutputLevel+0x38>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	085b      	lsrs	r3, r3, #1
 8004c86:	f003 0301 	and.w	r3, r3, #1
  }
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	5800380c 	.word	0x5800380c
 8004c9c:	58003800 	.word	0x58003800

08004ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f003 0307 	and.w	r3, r3, #7
 8004cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004cb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ce0 <__NVIC_SetPriorityGrouping+0x40>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004cc8:	4b06      	ldr	r3, [pc, #24]	; (8004ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cce:	4a04      	ldr	r2, [pc, #16]	; (8004ce0 <__NVIC_SetPriorityGrouping+0x40>)
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	60d3      	str	r3, [r2, #12]
}
 8004cd4:	bf00      	nop
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr
 8004ce0:	e000ed00 	.word	0xe000ed00
 8004ce4:	05fa0000 	.word	0x05fa0000

08004ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004cec:	4b04      	ldr	r3, [pc, #16]	; (8004d00 <__NVIC_GetPriorityGrouping+0x18>)
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	0a1b      	lsrs	r3, r3, #8
 8004cf2:	f003 0307 	and.w	r3, r3, #7
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	e000ed00 	.word	0xe000ed00

08004d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004d0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	db0b      	blt.n	8004d2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d16:	88fb      	ldrh	r3, [r7, #6]
 8004d18:	f003 021f 	and.w	r2, r3, #31
 8004d1c:	4907      	ldr	r1, [pc, #28]	; (8004d3c <__NVIC_EnableIRQ+0x38>)
 8004d1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d22:	095b      	lsrs	r3, r3, #5
 8004d24:	2001      	movs	r0, #1
 8004d26:	fa00 f202 	lsl.w	r2, r0, r2
 8004d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	e000e100 	.word	0xe000e100

08004d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	4603      	mov	r3, r0
 8004d48:	6039      	str	r1, [r7, #0]
 8004d4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004d4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	db0a      	blt.n	8004d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	b2da      	uxtb	r2, r3
 8004d58:	490c      	ldr	r1, [pc, #48]	; (8004d8c <__NVIC_SetPriority+0x4c>)
 8004d5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d5e:	0112      	lsls	r2, r2, #4
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	440b      	add	r3, r1
 8004d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d68:	e00a      	b.n	8004d80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	4908      	ldr	r1, [pc, #32]	; (8004d90 <__NVIC_SetPriority+0x50>)
 8004d70:	88fb      	ldrh	r3, [r7, #6]
 8004d72:	f003 030f 	and.w	r3, r3, #15
 8004d76:	3b04      	subs	r3, #4
 8004d78:	0112      	lsls	r2, r2, #4
 8004d7a:	b2d2      	uxtb	r2, r2
 8004d7c:	440b      	add	r3, r1
 8004d7e:	761a      	strb	r2, [r3, #24]
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	e000e100 	.word	0xe000e100
 8004d90:	e000ed00 	.word	0xe000ed00

08004d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b089      	sub	sp, #36	; 0x24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	f1c3 0307 	rsb	r3, r3, #7
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	bf28      	it	cs
 8004db2:	2304      	movcs	r3, #4
 8004db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	3304      	adds	r3, #4
 8004dba:	2b06      	cmp	r3, #6
 8004dbc:	d902      	bls.n	8004dc4 <NVIC_EncodePriority+0x30>
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	3b03      	subs	r3, #3
 8004dc2:	e000      	b.n	8004dc6 <NVIC_EncodePriority+0x32>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd2:	43da      	mvns	r2, r3
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	401a      	ands	r2, r3
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	fa01 f303 	lsl.w	r3, r1, r3
 8004de6:	43d9      	mvns	r1, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dec:	4313      	orrs	r3, r2
         );
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3724      	adds	r7, #36	; 0x24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
	...

08004dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e0c:	d301      	bcc.n	8004e12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e00f      	b.n	8004e32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e12:	4a0a      	ldr	r2, [pc, #40]	; (8004e3c <SysTick_Config+0x40>)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	3b01      	subs	r3, #1
 8004e18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e1a:	210f      	movs	r1, #15
 8004e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e20:	f7ff ff8e 	bl	8004d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e24:	4b05      	ldr	r3, [pc, #20]	; (8004e3c <SysTick_Config+0x40>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e2a:	4b04      	ldr	r3, [pc, #16]	; (8004e3c <SysTick_Config+0x40>)
 8004e2c:	2207      	movs	r2, #7
 8004e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	e000e010 	.word	0xe000e010

08004e40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f7ff ff29 	bl	8004ca0 <__NVIC_SetPriorityGrouping>
}
 8004e4e:	bf00      	nop
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b086      	sub	sp, #24
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	60b9      	str	r1, [r7, #8]
 8004e60:	607a      	str	r2, [r7, #4]
 8004e62:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004e64:	f7ff ff40 	bl	8004ce8 <__NVIC_GetPriorityGrouping>
 8004e68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	68b9      	ldr	r1, [r7, #8]
 8004e6e:	6978      	ldr	r0, [r7, #20]
 8004e70:	f7ff ff90 	bl	8004d94 <NVIC_EncodePriority>
 8004e74:	4602      	mov	r2, r0
 8004e76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004e7a:	4611      	mov	r1, r2
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7ff ff5f 	bl	8004d40 <__NVIC_SetPriority>
}
 8004e82:	bf00      	nop
 8004e84:	3718      	adds	r7, #24
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b082      	sub	sp, #8
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	4603      	mov	r3, r0
 8004e92:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7ff ff33 	bl	8004d04 <__NVIC_EnableIRQ>
}
 8004e9e:	bf00      	nop
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b082      	sub	sp, #8
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7ff ffa4 	bl	8004dfc <SysTick_Config>
 8004eb4:	4603      	mov	r3, r0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
	...

08004ec0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8004ec4:	4b07      	ldr	r3, [pc, #28]	; (8004ee4 <HAL_GetCurrentCPUID+0x24>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	091b      	lsrs	r3, r3, #4
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	2b07      	cmp	r3, #7
 8004ed0:	d101      	bne.n	8004ed6 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e000      	b.n	8004ed8 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8004ed6:	2301      	movs	r3, #1
  }
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	e000ed00 	.word	0xe000ed00

08004ee8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e014      	b.n	8004f24 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	791b      	ldrb	r3, [r3, #4]
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d105      	bne.n	8004f10 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7fd f9de 	bl	80022cc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3708      	adds	r7, #8
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	795b      	ldrb	r3, [r3, #5]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d101      	bne.n	8004f42 <HAL_DAC_Start+0x16>
 8004f3e:	2302      	movs	r3, #2
 8004f40:	e040      	b.n	8004fc4 <HAL_DAC_Start+0x98>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	6819      	ldr	r1, [r3, #0]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	f003 0310 	and.w	r3, r3, #16
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	409a      	lsls	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10f      	bne.n	8004f8c <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d11d      	bne.n	8004fb6 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f042 0201 	orr.w	r2, r2, #1
 8004f88:	605a      	str	r2, [r3, #4]
 8004f8a:	e014      	b.n	8004fb6 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	f003 0310 	and.w	r3, r3, #16
 8004f9c:	2102      	movs	r1, #2
 8004f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d107      	bne.n	8004fb6 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 0202 	orr.w	r2, r2, #2
 8004fb4:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b087      	sub	sp, #28
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
 8004fdc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d105      	bne.n	8004ffa <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	3308      	adds	r3, #8
 8004ff6:	617b      	str	r3, [r7, #20]
 8004ff8:	e004      	b.n	8005004 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4413      	add	r3, r2
 8005000:	3314      	adds	r3, #20
 8005002:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	461a      	mov	r2, r3
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	371c      	adds	r7, #28
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
	...

0800501c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b088      	sub	sp, #32
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	795b      	ldrb	r3, [r3, #5]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d101      	bne.n	8005034 <HAL_DAC_ConfigChannel+0x18>
 8005030:	2302      	movs	r3, #2
 8005032:	e11d      	b.n	8005270 <HAL_DAC_ConfigChannel+0x254>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2201      	movs	r2, #1
 8005038:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2202      	movs	r2, #2
 800503e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2b04      	cmp	r3, #4
 8005046:	d174      	bne.n	8005132 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005048:	f7fd fb86 	bl	8002758 <HAL_GetTick>
 800504c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d134      	bne.n	80050be <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005054:	e011      	b.n	800507a <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005056:	f7fd fb7f 	bl	8002758 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	2b01      	cmp	r3, #1
 8005062:	d90a      	bls.n	800507a <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	f043 0208 	orr.w	r2, r3, #8
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2203      	movs	r2, #3
 8005074:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e0fa      	b.n	8005270 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005080:	4b7d      	ldr	r3, [pc, #500]	; (8005278 <HAL_DAC_ConfigChannel+0x25c>)
 8005082:	4013      	ands	r3, r2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1e6      	bne.n	8005056 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8005088:	2001      	movs	r0, #1
 800508a:	f7fd fb71 	bl	8002770 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	6992      	ldr	r2, [r2, #24]
 8005096:	641a      	str	r2, [r3, #64]	; 0x40
 8005098:	e01e      	b.n	80050d8 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800509a:	f7fd fb5d 	bl	8002758 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d90a      	bls.n	80050be <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	f043 0208 	orr.w	r2, r3, #8
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2203      	movs	r2, #3
 80050b8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e0d8      	b.n	8005270 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	dbe8      	blt.n	800509a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80050c8:	2001      	movs	r0, #1
 80050ca:	f7fd fb51 	bl	8002770 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	6992      	ldr	r2, [r2, #24]
 80050d6:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f003 0310 	and.w	r3, r3, #16
 80050e4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80050e8:	fa01 f303 	lsl.w	r3, r1, r3
 80050ec:	43db      	mvns	r3, r3
 80050ee:	ea02 0103 	and.w	r1, r2, r3
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	69da      	ldr	r2, [r3, #28]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f003 0310 	and.w	r3, r3, #16
 80050fc:	409a      	lsls	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f003 0310 	and.w	r3, r3, #16
 8005112:	21ff      	movs	r1, #255	; 0xff
 8005114:	fa01 f303 	lsl.w	r3, r1, r3
 8005118:	43db      	mvns	r3, r3
 800511a:	ea02 0103 	and.w	r1, r2, r3
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	6a1a      	ldr	r2, [r3, #32]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f003 0310 	and.w	r3, r3, #16
 8005128:	409a      	lsls	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d11d      	bne.n	8005176 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005140:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f003 0310 	and.w	r3, r3, #16
 8005148:	221f      	movs	r2, #31
 800514a:	fa02 f303 	lsl.w	r3, r2, r3
 800514e:	43db      	mvns	r3, r3
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	4013      	ands	r3, r2
 8005154:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f003 0310 	and.w	r3, r3, #16
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	fa02 f303 	lsl.w	r3, r2, r3
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	4313      	orrs	r3, r2
 800516c:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800517c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f003 0310 	and.w	r3, r3, #16
 8005184:	2207      	movs	r2, #7
 8005186:	fa02 f303 	lsl.w	r3, r2, r3
 800518a:	43db      	mvns	r3, r3
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	4013      	ands	r3, r2
 8005190:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	2b01      	cmp	r3, #1
 8005198:	d102      	bne.n	80051a0 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800519a:	2300      	movs	r3, #0
 800519c:	61fb      	str	r3, [r7, #28]
 800519e:	e00f      	b.n	80051c0 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d102      	bne.n	80051ae <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80051a8:	2301      	movs	r3, #1
 80051aa:	61fb      	str	r3, [r7, #28]
 80051ac:	e008      	b.n	80051c0 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d102      	bne.n	80051bc <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80051b6:	2301      	movs	r3, #1
 80051b8:	61fb      	str	r3, [r7, #28]
 80051ba:	e001      	b.n	80051c0 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80051bc:	2300      	movs	r3, #0
 80051be:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	69fa      	ldr	r2, [r7, #28]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f003 0310 	and.w	r3, r3, #16
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	fa02 f303 	lsl.w	r3, r2, r3
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	4313      	orrs	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6819      	ldr	r1, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f003 0310 	and.w	r3, r3, #16
 80051f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80051fa:	fa02 f303 	lsl.w	r3, r2, r3
 80051fe:	43da      	mvns	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	400a      	ands	r2, r1
 8005206:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f003 0310 	and.w	r3, r3, #16
 8005216:	f640 72fe 	movw	r2, #4094	; 0xffe
 800521a:	fa02 f303 	lsl.w	r3, r2, r3
 800521e:	43db      	mvns	r3, r3
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	4013      	ands	r3, r2
 8005224:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f003 0310 	and.w	r3, r3, #16
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	fa02 f303 	lsl.w	r3, r2, r3
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	4313      	orrs	r3, r2
 800523c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6819      	ldr	r1, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f003 0310 	and.w	r3, r3, #16
 8005252:	22c0      	movs	r2, #192	; 0xc0
 8005254:	fa02 f303 	lsl.w	r3, r2, r3
 8005258:	43da      	mvns	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	400a      	ands	r2, r1
 8005260:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2201      	movs	r2, #1
 8005266:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3720      	adds	r7, #32
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	20008000 	.word	0x20008000

0800527c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005284:	f7fd fa68 	bl	8002758 <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d101      	bne.n	8005294 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e316      	b.n	80058c2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a66      	ldr	r2, [pc, #408]	; (8005434 <HAL_DMA_Init+0x1b8>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d04a      	beq.n	8005334 <HAL_DMA_Init+0xb8>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a65      	ldr	r2, [pc, #404]	; (8005438 <HAL_DMA_Init+0x1bc>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d045      	beq.n	8005334 <HAL_DMA_Init+0xb8>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a63      	ldr	r2, [pc, #396]	; (800543c <HAL_DMA_Init+0x1c0>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d040      	beq.n	8005334 <HAL_DMA_Init+0xb8>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a62      	ldr	r2, [pc, #392]	; (8005440 <HAL_DMA_Init+0x1c4>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d03b      	beq.n	8005334 <HAL_DMA_Init+0xb8>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a60      	ldr	r2, [pc, #384]	; (8005444 <HAL_DMA_Init+0x1c8>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d036      	beq.n	8005334 <HAL_DMA_Init+0xb8>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a5f      	ldr	r2, [pc, #380]	; (8005448 <HAL_DMA_Init+0x1cc>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d031      	beq.n	8005334 <HAL_DMA_Init+0xb8>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a5d      	ldr	r2, [pc, #372]	; (800544c <HAL_DMA_Init+0x1d0>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d02c      	beq.n	8005334 <HAL_DMA_Init+0xb8>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a5c      	ldr	r2, [pc, #368]	; (8005450 <HAL_DMA_Init+0x1d4>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d027      	beq.n	8005334 <HAL_DMA_Init+0xb8>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a5a      	ldr	r2, [pc, #360]	; (8005454 <HAL_DMA_Init+0x1d8>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d022      	beq.n	8005334 <HAL_DMA_Init+0xb8>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a59      	ldr	r2, [pc, #356]	; (8005458 <HAL_DMA_Init+0x1dc>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d01d      	beq.n	8005334 <HAL_DMA_Init+0xb8>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a57      	ldr	r2, [pc, #348]	; (800545c <HAL_DMA_Init+0x1e0>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d018      	beq.n	8005334 <HAL_DMA_Init+0xb8>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a56      	ldr	r2, [pc, #344]	; (8005460 <HAL_DMA_Init+0x1e4>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d013      	beq.n	8005334 <HAL_DMA_Init+0xb8>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a54      	ldr	r2, [pc, #336]	; (8005464 <HAL_DMA_Init+0x1e8>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d00e      	beq.n	8005334 <HAL_DMA_Init+0xb8>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a53      	ldr	r2, [pc, #332]	; (8005468 <HAL_DMA_Init+0x1ec>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d009      	beq.n	8005334 <HAL_DMA_Init+0xb8>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a51      	ldr	r2, [pc, #324]	; (800546c <HAL_DMA_Init+0x1f0>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d004      	beq.n	8005334 <HAL_DMA_Init+0xb8>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a50      	ldr	r2, [pc, #320]	; (8005470 <HAL_DMA_Init+0x1f4>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d101      	bne.n	8005338 <HAL_DMA_Init+0xbc>
 8005334:	2301      	movs	r3, #1
 8005336:	e000      	b.n	800533a <HAL_DMA_Init+0xbe>
 8005338:	2300      	movs	r3, #0
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 813b 	beq.w	80055b6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a37      	ldr	r2, [pc, #220]	; (8005434 <HAL_DMA_Init+0x1b8>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d04a      	beq.n	80053f0 <HAL_DMA_Init+0x174>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a36      	ldr	r2, [pc, #216]	; (8005438 <HAL_DMA_Init+0x1bc>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d045      	beq.n	80053f0 <HAL_DMA_Init+0x174>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a34      	ldr	r2, [pc, #208]	; (800543c <HAL_DMA_Init+0x1c0>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d040      	beq.n	80053f0 <HAL_DMA_Init+0x174>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a33      	ldr	r2, [pc, #204]	; (8005440 <HAL_DMA_Init+0x1c4>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d03b      	beq.n	80053f0 <HAL_DMA_Init+0x174>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a31      	ldr	r2, [pc, #196]	; (8005444 <HAL_DMA_Init+0x1c8>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d036      	beq.n	80053f0 <HAL_DMA_Init+0x174>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a30      	ldr	r2, [pc, #192]	; (8005448 <HAL_DMA_Init+0x1cc>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d031      	beq.n	80053f0 <HAL_DMA_Init+0x174>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a2e      	ldr	r2, [pc, #184]	; (800544c <HAL_DMA_Init+0x1d0>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d02c      	beq.n	80053f0 <HAL_DMA_Init+0x174>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a2d      	ldr	r2, [pc, #180]	; (8005450 <HAL_DMA_Init+0x1d4>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d027      	beq.n	80053f0 <HAL_DMA_Init+0x174>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a2b      	ldr	r2, [pc, #172]	; (8005454 <HAL_DMA_Init+0x1d8>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d022      	beq.n	80053f0 <HAL_DMA_Init+0x174>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a2a      	ldr	r2, [pc, #168]	; (8005458 <HAL_DMA_Init+0x1dc>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d01d      	beq.n	80053f0 <HAL_DMA_Init+0x174>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a28      	ldr	r2, [pc, #160]	; (800545c <HAL_DMA_Init+0x1e0>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d018      	beq.n	80053f0 <HAL_DMA_Init+0x174>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a27      	ldr	r2, [pc, #156]	; (8005460 <HAL_DMA_Init+0x1e4>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d013      	beq.n	80053f0 <HAL_DMA_Init+0x174>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a25      	ldr	r2, [pc, #148]	; (8005464 <HAL_DMA_Init+0x1e8>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d00e      	beq.n	80053f0 <HAL_DMA_Init+0x174>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a24      	ldr	r2, [pc, #144]	; (8005468 <HAL_DMA_Init+0x1ec>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d009      	beq.n	80053f0 <HAL_DMA_Init+0x174>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a22      	ldr	r2, [pc, #136]	; (800546c <HAL_DMA_Init+0x1f0>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d004      	beq.n	80053f0 <HAL_DMA_Init+0x174>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a21      	ldr	r2, [pc, #132]	; (8005470 <HAL_DMA_Init+0x1f4>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d108      	bne.n	8005402 <HAL_DMA_Init+0x186>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 0201 	bic.w	r2, r2, #1
 80053fe:	601a      	str	r2, [r3, #0]
 8005400:	e007      	b.n	8005412 <HAL_DMA_Init+0x196>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0201 	bic.w	r2, r2, #1
 8005410:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005412:	e02f      	b.n	8005474 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005414:	f7fd f9a0 	bl	8002758 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b05      	cmp	r3, #5
 8005420:	d928      	bls.n	8005474 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2220      	movs	r2, #32
 8005426:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2203      	movs	r2, #3
 800542c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e246      	b.n	80058c2 <HAL_DMA_Init+0x646>
 8005434:	40020010 	.word	0x40020010
 8005438:	40020028 	.word	0x40020028
 800543c:	40020040 	.word	0x40020040
 8005440:	40020058 	.word	0x40020058
 8005444:	40020070 	.word	0x40020070
 8005448:	40020088 	.word	0x40020088
 800544c:	400200a0 	.word	0x400200a0
 8005450:	400200b8 	.word	0x400200b8
 8005454:	40020410 	.word	0x40020410
 8005458:	40020428 	.word	0x40020428
 800545c:	40020440 	.word	0x40020440
 8005460:	40020458 	.word	0x40020458
 8005464:	40020470 	.word	0x40020470
 8005468:	40020488 	.word	0x40020488
 800546c:	400204a0 	.word	0x400204a0
 8005470:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1c8      	bne.n	8005414 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	4b83      	ldr	r3, [pc, #524]	; (800569c <HAL_DMA_Init+0x420>)
 800548e:	4013      	ands	r3, r2
 8005490:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800549a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054b2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	4313      	orrs	r3, r2
 80054be:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	d107      	bne.n	80054d8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d0:	4313      	orrs	r3, r2
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80054d8:	4b71      	ldr	r3, [pc, #452]	; (80056a0 <HAL_DMA_Init+0x424>)
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	4b71      	ldr	r3, [pc, #452]	; (80056a4 <HAL_DMA_Init+0x428>)
 80054de:	4013      	ands	r3, r2
 80054e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054e4:	d328      	bcc.n	8005538 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	2b28      	cmp	r3, #40	; 0x28
 80054ec:	d903      	bls.n	80054f6 <HAL_DMA_Init+0x27a>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	2b2e      	cmp	r3, #46	; 0x2e
 80054f4:	d917      	bls.n	8005526 <HAL_DMA_Init+0x2aa>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	2b3e      	cmp	r3, #62	; 0x3e
 80054fc:	d903      	bls.n	8005506 <HAL_DMA_Init+0x28a>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b42      	cmp	r3, #66	; 0x42
 8005504:	d90f      	bls.n	8005526 <HAL_DMA_Init+0x2aa>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	2b46      	cmp	r3, #70	; 0x46
 800550c:	d903      	bls.n	8005516 <HAL_DMA_Init+0x29a>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	2b48      	cmp	r3, #72	; 0x48
 8005514:	d907      	bls.n	8005526 <HAL_DMA_Init+0x2aa>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	2b4e      	cmp	r3, #78	; 0x4e
 800551c:	d905      	bls.n	800552a <HAL_DMA_Init+0x2ae>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	2b52      	cmp	r3, #82	; 0x52
 8005524:	d801      	bhi.n	800552a <HAL_DMA_Init+0x2ae>
 8005526:	2301      	movs	r3, #1
 8005528:	e000      	b.n	800552c <HAL_DMA_Init+0x2b0>
 800552a:	2300      	movs	r3, #0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d003      	beq.n	8005538 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005536:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	f023 0307 	bic.w	r3, r3, #7
 800554e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	4313      	orrs	r3, r2
 8005558:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	2b04      	cmp	r3, #4
 8005560:	d117      	bne.n	8005592 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	4313      	orrs	r3, r2
 800556a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00e      	beq.n	8005592 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f002 f8ed 	bl	8007754 <DMA_CheckFifoParam>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d008      	beq.n	8005592 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2240      	movs	r2, #64	; 0x40
 8005584:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e197      	b.n	80058c2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f002 f828 	bl	80075f0 <DMA_CalcBaseAndBitshift>
 80055a0:	4603      	mov	r3, r0
 80055a2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a8:	f003 031f 	and.w	r3, r3, #31
 80055ac:	223f      	movs	r2, #63	; 0x3f
 80055ae:	409a      	lsls	r2, r3
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	609a      	str	r2, [r3, #8]
 80055b4:	e0cd      	b.n	8005752 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a3b      	ldr	r2, [pc, #236]	; (80056a8 <HAL_DMA_Init+0x42c>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d022      	beq.n	8005606 <HAL_DMA_Init+0x38a>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a39      	ldr	r2, [pc, #228]	; (80056ac <HAL_DMA_Init+0x430>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d01d      	beq.n	8005606 <HAL_DMA_Init+0x38a>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a38      	ldr	r2, [pc, #224]	; (80056b0 <HAL_DMA_Init+0x434>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d018      	beq.n	8005606 <HAL_DMA_Init+0x38a>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a36      	ldr	r2, [pc, #216]	; (80056b4 <HAL_DMA_Init+0x438>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d013      	beq.n	8005606 <HAL_DMA_Init+0x38a>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a35      	ldr	r2, [pc, #212]	; (80056b8 <HAL_DMA_Init+0x43c>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d00e      	beq.n	8005606 <HAL_DMA_Init+0x38a>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a33      	ldr	r2, [pc, #204]	; (80056bc <HAL_DMA_Init+0x440>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d009      	beq.n	8005606 <HAL_DMA_Init+0x38a>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a32      	ldr	r2, [pc, #200]	; (80056c0 <HAL_DMA_Init+0x444>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d004      	beq.n	8005606 <HAL_DMA_Init+0x38a>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a30      	ldr	r2, [pc, #192]	; (80056c4 <HAL_DMA_Init+0x448>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d101      	bne.n	800560a <HAL_DMA_Init+0x38e>
 8005606:	2301      	movs	r3, #1
 8005608:	e000      	b.n	800560c <HAL_DMA_Init+0x390>
 800560a:	2300      	movs	r3, #0
 800560c:	2b00      	cmp	r3, #0
 800560e:	f000 8097 	beq.w	8005740 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a24      	ldr	r2, [pc, #144]	; (80056a8 <HAL_DMA_Init+0x42c>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d021      	beq.n	8005660 <HAL_DMA_Init+0x3e4>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a22      	ldr	r2, [pc, #136]	; (80056ac <HAL_DMA_Init+0x430>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d01c      	beq.n	8005660 <HAL_DMA_Init+0x3e4>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a21      	ldr	r2, [pc, #132]	; (80056b0 <HAL_DMA_Init+0x434>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d017      	beq.n	8005660 <HAL_DMA_Init+0x3e4>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a1f      	ldr	r2, [pc, #124]	; (80056b4 <HAL_DMA_Init+0x438>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d012      	beq.n	8005660 <HAL_DMA_Init+0x3e4>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a1e      	ldr	r2, [pc, #120]	; (80056b8 <HAL_DMA_Init+0x43c>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d00d      	beq.n	8005660 <HAL_DMA_Init+0x3e4>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a1c      	ldr	r2, [pc, #112]	; (80056bc <HAL_DMA_Init+0x440>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d008      	beq.n	8005660 <HAL_DMA_Init+0x3e4>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a1b      	ldr	r2, [pc, #108]	; (80056c0 <HAL_DMA_Init+0x444>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d003      	beq.n	8005660 <HAL_DMA_Init+0x3e4>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a19      	ldr	r2, [pc, #100]	; (80056c4 <HAL_DMA_Init+0x448>)
 800565e:	4293      	cmp	r3, r2
 8005660:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2202      	movs	r2, #2
 8005666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	4b12      	ldr	r3, [pc, #72]	; (80056c8 <HAL_DMA_Init+0x44c>)
 800567e:	4013      	ands	r3, r2
 8005680:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	2b40      	cmp	r3, #64	; 0x40
 8005688:	d020      	beq.n	80056cc <HAL_DMA_Init+0x450>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	2b80      	cmp	r3, #128	; 0x80
 8005690:	d102      	bne.n	8005698 <HAL_DMA_Init+0x41c>
 8005692:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005696:	e01a      	b.n	80056ce <HAL_DMA_Init+0x452>
 8005698:	2300      	movs	r3, #0
 800569a:	e018      	b.n	80056ce <HAL_DMA_Init+0x452>
 800569c:	fe10803f 	.word	0xfe10803f
 80056a0:	5c001000 	.word	0x5c001000
 80056a4:	ffff0000 	.word	0xffff0000
 80056a8:	58025408 	.word	0x58025408
 80056ac:	5802541c 	.word	0x5802541c
 80056b0:	58025430 	.word	0x58025430
 80056b4:	58025444 	.word	0x58025444
 80056b8:	58025458 	.word	0x58025458
 80056bc:	5802546c 	.word	0x5802546c
 80056c0:	58025480 	.word	0x58025480
 80056c4:	58025494 	.word	0x58025494
 80056c8:	fffe000f 	.word	0xfffe000f
 80056cc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	68d2      	ldr	r2, [r2, #12]
 80056d2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80056d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80056dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80056e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80056ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80056f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80056fc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	4313      	orrs	r3, r2
 8005702:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	461a      	mov	r2, r3
 8005712:	4b6e      	ldr	r3, [pc, #440]	; (80058cc <HAL_DMA_Init+0x650>)
 8005714:	4413      	add	r3, r2
 8005716:	4a6e      	ldr	r2, [pc, #440]	; (80058d0 <HAL_DMA_Init+0x654>)
 8005718:	fba2 2303 	umull	r2, r3, r2, r3
 800571c:	091b      	lsrs	r3, r3, #4
 800571e:	009a      	lsls	r2, r3, #2
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f001 ff63 	bl	80075f0 <DMA_CalcBaseAndBitshift>
 800572a:	4603      	mov	r3, r0
 800572c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005732:	f003 031f 	and.w	r3, r3, #31
 8005736:	2201      	movs	r2, #1
 8005738:	409a      	lsls	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	605a      	str	r2, [r3, #4]
 800573e:	e008      	b.n	8005752 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2240      	movs	r2, #64	; 0x40
 8005744:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2203      	movs	r2, #3
 800574a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e0b7      	b.n	80058c2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a5f      	ldr	r2, [pc, #380]	; (80058d4 <HAL_DMA_Init+0x658>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d072      	beq.n	8005842 <HAL_DMA_Init+0x5c6>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a5d      	ldr	r2, [pc, #372]	; (80058d8 <HAL_DMA_Init+0x65c>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d06d      	beq.n	8005842 <HAL_DMA_Init+0x5c6>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a5c      	ldr	r2, [pc, #368]	; (80058dc <HAL_DMA_Init+0x660>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d068      	beq.n	8005842 <HAL_DMA_Init+0x5c6>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a5a      	ldr	r2, [pc, #360]	; (80058e0 <HAL_DMA_Init+0x664>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d063      	beq.n	8005842 <HAL_DMA_Init+0x5c6>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a59      	ldr	r2, [pc, #356]	; (80058e4 <HAL_DMA_Init+0x668>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d05e      	beq.n	8005842 <HAL_DMA_Init+0x5c6>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a57      	ldr	r2, [pc, #348]	; (80058e8 <HAL_DMA_Init+0x66c>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d059      	beq.n	8005842 <HAL_DMA_Init+0x5c6>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a56      	ldr	r2, [pc, #344]	; (80058ec <HAL_DMA_Init+0x670>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d054      	beq.n	8005842 <HAL_DMA_Init+0x5c6>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a54      	ldr	r2, [pc, #336]	; (80058f0 <HAL_DMA_Init+0x674>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d04f      	beq.n	8005842 <HAL_DMA_Init+0x5c6>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a53      	ldr	r2, [pc, #332]	; (80058f4 <HAL_DMA_Init+0x678>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d04a      	beq.n	8005842 <HAL_DMA_Init+0x5c6>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a51      	ldr	r2, [pc, #324]	; (80058f8 <HAL_DMA_Init+0x67c>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d045      	beq.n	8005842 <HAL_DMA_Init+0x5c6>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a50      	ldr	r2, [pc, #320]	; (80058fc <HAL_DMA_Init+0x680>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d040      	beq.n	8005842 <HAL_DMA_Init+0x5c6>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a4e      	ldr	r2, [pc, #312]	; (8005900 <HAL_DMA_Init+0x684>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d03b      	beq.n	8005842 <HAL_DMA_Init+0x5c6>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a4d      	ldr	r2, [pc, #308]	; (8005904 <HAL_DMA_Init+0x688>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d036      	beq.n	8005842 <HAL_DMA_Init+0x5c6>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a4b      	ldr	r2, [pc, #300]	; (8005908 <HAL_DMA_Init+0x68c>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d031      	beq.n	8005842 <HAL_DMA_Init+0x5c6>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a4a      	ldr	r2, [pc, #296]	; (800590c <HAL_DMA_Init+0x690>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d02c      	beq.n	8005842 <HAL_DMA_Init+0x5c6>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a48      	ldr	r2, [pc, #288]	; (8005910 <HAL_DMA_Init+0x694>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d027      	beq.n	8005842 <HAL_DMA_Init+0x5c6>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a47      	ldr	r2, [pc, #284]	; (8005914 <HAL_DMA_Init+0x698>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d022      	beq.n	8005842 <HAL_DMA_Init+0x5c6>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a45      	ldr	r2, [pc, #276]	; (8005918 <HAL_DMA_Init+0x69c>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d01d      	beq.n	8005842 <HAL_DMA_Init+0x5c6>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a44      	ldr	r2, [pc, #272]	; (800591c <HAL_DMA_Init+0x6a0>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d018      	beq.n	8005842 <HAL_DMA_Init+0x5c6>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a42      	ldr	r2, [pc, #264]	; (8005920 <HAL_DMA_Init+0x6a4>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d013      	beq.n	8005842 <HAL_DMA_Init+0x5c6>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a41      	ldr	r2, [pc, #260]	; (8005924 <HAL_DMA_Init+0x6a8>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d00e      	beq.n	8005842 <HAL_DMA_Init+0x5c6>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a3f      	ldr	r2, [pc, #252]	; (8005928 <HAL_DMA_Init+0x6ac>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d009      	beq.n	8005842 <HAL_DMA_Init+0x5c6>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a3e      	ldr	r2, [pc, #248]	; (800592c <HAL_DMA_Init+0x6b0>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d004      	beq.n	8005842 <HAL_DMA_Init+0x5c6>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a3c      	ldr	r2, [pc, #240]	; (8005930 <HAL_DMA_Init+0x6b4>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d101      	bne.n	8005846 <HAL_DMA_Init+0x5ca>
 8005842:	2301      	movs	r3, #1
 8005844:	e000      	b.n	8005848 <HAL_DMA_Init+0x5cc>
 8005846:	2300      	movs	r3, #0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d032      	beq.n	80058b2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f001 fffd 	bl	800784c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	2b80      	cmp	r3, #128	; 0x80
 8005858:	d102      	bne.n	8005860 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005868:	b2d2      	uxtb	r2, r2
 800586a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005874:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d010      	beq.n	80058a0 <HAL_DMA_Init+0x624>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	2b08      	cmp	r3, #8
 8005884:	d80c      	bhi.n	80058a0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f002 f87a 	bl	8007980 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005890:	2200      	movs	r2, #0
 8005892:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800589c:	605a      	str	r2, [r3, #4]
 800589e:	e008      	b.n	80058b2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3718      	adds	r7, #24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	a7fdabf8 	.word	0xa7fdabf8
 80058d0:	cccccccd 	.word	0xcccccccd
 80058d4:	40020010 	.word	0x40020010
 80058d8:	40020028 	.word	0x40020028
 80058dc:	40020040 	.word	0x40020040
 80058e0:	40020058 	.word	0x40020058
 80058e4:	40020070 	.word	0x40020070
 80058e8:	40020088 	.word	0x40020088
 80058ec:	400200a0 	.word	0x400200a0
 80058f0:	400200b8 	.word	0x400200b8
 80058f4:	40020410 	.word	0x40020410
 80058f8:	40020428 	.word	0x40020428
 80058fc:	40020440 	.word	0x40020440
 8005900:	40020458 	.word	0x40020458
 8005904:	40020470 	.word	0x40020470
 8005908:	40020488 	.word	0x40020488
 800590c:	400204a0 	.word	0x400204a0
 8005910:	400204b8 	.word	0x400204b8
 8005914:	58025408 	.word	0x58025408
 8005918:	5802541c 	.word	0x5802541c
 800591c:	58025430 	.word	0x58025430
 8005920:	58025444 	.word	0x58025444
 8005924:	58025458 	.word	0x58025458
 8005928:	5802546c 	.word	0x5802546c
 800592c:	58025480 	.word	0x58025480
 8005930:	58025494 	.word	0x58025494

08005934 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
 8005940:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005942:	2300      	movs	r3, #0
 8005944:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d101      	bne.n	8005950 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e226      	b.n	8005d9e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005956:	2b01      	cmp	r3, #1
 8005958:	d101      	bne.n	800595e <HAL_DMA_Start_IT+0x2a>
 800595a:	2302      	movs	r3, #2
 800595c:	e21f      	b.n	8005d9e <HAL_DMA_Start_IT+0x46a>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b01      	cmp	r3, #1
 8005970:	f040 820a 	bne.w	8005d88 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2202      	movs	r2, #2
 8005978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a68      	ldr	r2, [pc, #416]	; (8005b28 <HAL_DMA_Start_IT+0x1f4>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d04a      	beq.n	8005a22 <HAL_DMA_Start_IT+0xee>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a66      	ldr	r2, [pc, #408]	; (8005b2c <HAL_DMA_Start_IT+0x1f8>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d045      	beq.n	8005a22 <HAL_DMA_Start_IT+0xee>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a65      	ldr	r2, [pc, #404]	; (8005b30 <HAL_DMA_Start_IT+0x1fc>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d040      	beq.n	8005a22 <HAL_DMA_Start_IT+0xee>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a63      	ldr	r2, [pc, #396]	; (8005b34 <HAL_DMA_Start_IT+0x200>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d03b      	beq.n	8005a22 <HAL_DMA_Start_IT+0xee>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a62      	ldr	r2, [pc, #392]	; (8005b38 <HAL_DMA_Start_IT+0x204>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d036      	beq.n	8005a22 <HAL_DMA_Start_IT+0xee>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a60      	ldr	r2, [pc, #384]	; (8005b3c <HAL_DMA_Start_IT+0x208>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d031      	beq.n	8005a22 <HAL_DMA_Start_IT+0xee>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a5f      	ldr	r2, [pc, #380]	; (8005b40 <HAL_DMA_Start_IT+0x20c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d02c      	beq.n	8005a22 <HAL_DMA_Start_IT+0xee>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a5d      	ldr	r2, [pc, #372]	; (8005b44 <HAL_DMA_Start_IT+0x210>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d027      	beq.n	8005a22 <HAL_DMA_Start_IT+0xee>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a5c      	ldr	r2, [pc, #368]	; (8005b48 <HAL_DMA_Start_IT+0x214>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d022      	beq.n	8005a22 <HAL_DMA_Start_IT+0xee>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a5a      	ldr	r2, [pc, #360]	; (8005b4c <HAL_DMA_Start_IT+0x218>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d01d      	beq.n	8005a22 <HAL_DMA_Start_IT+0xee>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a59      	ldr	r2, [pc, #356]	; (8005b50 <HAL_DMA_Start_IT+0x21c>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d018      	beq.n	8005a22 <HAL_DMA_Start_IT+0xee>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a57      	ldr	r2, [pc, #348]	; (8005b54 <HAL_DMA_Start_IT+0x220>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d013      	beq.n	8005a22 <HAL_DMA_Start_IT+0xee>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a56      	ldr	r2, [pc, #344]	; (8005b58 <HAL_DMA_Start_IT+0x224>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d00e      	beq.n	8005a22 <HAL_DMA_Start_IT+0xee>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a54      	ldr	r2, [pc, #336]	; (8005b5c <HAL_DMA_Start_IT+0x228>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d009      	beq.n	8005a22 <HAL_DMA_Start_IT+0xee>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a53      	ldr	r2, [pc, #332]	; (8005b60 <HAL_DMA_Start_IT+0x22c>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d004      	beq.n	8005a22 <HAL_DMA_Start_IT+0xee>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a51      	ldr	r2, [pc, #324]	; (8005b64 <HAL_DMA_Start_IT+0x230>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d108      	bne.n	8005a34 <HAL_DMA_Start_IT+0x100>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f022 0201 	bic.w	r2, r2, #1
 8005a30:	601a      	str	r2, [r3, #0]
 8005a32:	e007      	b.n	8005a44 <HAL_DMA_Start_IT+0x110>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f022 0201 	bic.w	r2, r2, #1
 8005a42:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	68b9      	ldr	r1, [r7, #8]
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f001 fc24 	bl	8007298 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a34      	ldr	r2, [pc, #208]	; (8005b28 <HAL_DMA_Start_IT+0x1f4>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d04a      	beq.n	8005af0 <HAL_DMA_Start_IT+0x1bc>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a33      	ldr	r2, [pc, #204]	; (8005b2c <HAL_DMA_Start_IT+0x1f8>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d045      	beq.n	8005af0 <HAL_DMA_Start_IT+0x1bc>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a31      	ldr	r2, [pc, #196]	; (8005b30 <HAL_DMA_Start_IT+0x1fc>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d040      	beq.n	8005af0 <HAL_DMA_Start_IT+0x1bc>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a30      	ldr	r2, [pc, #192]	; (8005b34 <HAL_DMA_Start_IT+0x200>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d03b      	beq.n	8005af0 <HAL_DMA_Start_IT+0x1bc>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a2e      	ldr	r2, [pc, #184]	; (8005b38 <HAL_DMA_Start_IT+0x204>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d036      	beq.n	8005af0 <HAL_DMA_Start_IT+0x1bc>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a2d      	ldr	r2, [pc, #180]	; (8005b3c <HAL_DMA_Start_IT+0x208>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d031      	beq.n	8005af0 <HAL_DMA_Start_IT+0x1bc>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a2b      	ldr	r2, [pc, #172]	; (8005b40 <HAL_DMA_Start_IT+0x20c>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d02c      	beq.n	8005af0 <HAL_DMA_Start_IT+0x1bc>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a2a      	ldr	r2, [pc, #168]	; (8005b44 <HAL_DMA_Start_IT+0x210>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d027      	beq.n	8005af0 <HAL_DMA_Start_IT+0x1bc>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a28      	ldr	r2, [pc, #160]	; (8005b48 <HAL_DMA_Start_IT+0x214>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d022      	beq.n	8005af0 <HAL_DMA_Start_IT+0x1bc>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a27      	ldr	r2, [pc, #156]	; (8005b4c <HAL_DMA_Start_IT+0x218>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d01d      	beq.n	8005af0 <HAL_DMA_Start_IT+0x1bc>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a25      	ldr	r2, [pc, #148]	; (8005b50 <HAL_DMA_Start_IT+0x21c>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d018      	beq.n	8005af0 <HAL_DMA_Start_IT+0x1bc>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a24      	ldr	r2, [pc, #144]	; (8005b54 <HAL_DMA_Start_IT+0x220>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d013      	beq.n	8005af0 <HAL_DMA_Start_IT+0x1bc>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a22      	ldr	r2, [pc, #136]	; (8005b58 <HAL_DMA_Start_IT+0x224>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d00e      	beq.n	8005af0 <HAL_DMA_Start_IT+0x1bc>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a21      	ldr	r2, [pc, #132]	; (8005b5c <HAL_DMA_Start_IT+0x228>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d009      	beq.n	8005af0 <HAL_DMA_Start_IT+0x1bc>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a1f      	ldr	r2, [pc, #124]	; (8005b60 <HAL_DMA_Start_IT+0x22c>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d004      	beq.n	8005af0 <HAL_DMA_Start_IT+0x1bc>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a1e      	ldr	r2, [pc, #120]	; (8005b64 <HAL_DMA_Start_IT+0x230>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d101      	bne.n	8005af4 <HAL_DMA_Start_IT+0x1c0>
 8005af0:	2301      	movs	r3, #1
 8005af2:	e000      	b.n	8005af6 <HAL_DMA_Start_IT+0x1c2>
 8005af4:	2300      	movs	r3, #0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d036      	beq.n	8005b68 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f023 021e 	bic.w	r2, r3, #30
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f042 0216 	orr.w	r2, r2, #22
 8005b0c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d03e      	beq.n	8005b94 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f042 0208 	orr.w	r2, r2, #8
 8005b24:	601a      	str	r2, [r3, #0]
 8005b26:	e035      	b.n	8005b94 <HAL_DMA_Start_IT+0x260>
 8005b28:	40020010 	.word	0x40020010
 8005b2c:	40020028 	.word	0x40020028
 8005b30:	40020040 	.word	0x40020040
 8005b34:	40020058 	.word	0x40020058
 8005b38:	40020070 	.word	0x40020070
 8005b3c:	40020088 	.word	0x40020088
 8005b40:	400200a0 	.word	0x400200a0
 8005b44:	400200b8 	.word	0x400200b8
 8005b48:	40020410 	.word	0x40020410
 8005b4c:	40020428 	.word	0x40020428
 8005b50:	40020440 	.word	0x40020440
 8005b54:	40020458 	.word	0x40020458
 8005b58:	40020470 	.word	0x40020470
 8005b5c:	40020488 	.word	0x40020488
 8005b60:	400204a0 	.word	0x400204a0
 8005b64:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f023 020e 	bic.w	r2, r3, #14
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 020a 	orr.w	r2, r2, #10
 8005b7a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d007      	beq.n	8005b94 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0204 	orr.w	r2, r2, #4
 8005b92:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a83      	ldr	r2, [pc, #524]	; (8005da8 <HAL_DMA_Start_IT+0x474>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d072      	beq.n	8005c84 <HAL_DMA_Start_IT+0x350>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a82      	ldr	r2, [pc, #520]	; (8005dac <HAL_DMA_Start_IT+0x478>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d06d      	beq.n	8005c84 <HAL_DMA_Start_IT+0x350>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a80      	ldr	r2, [pc, #512]	; (8005db0 <HAL_DMA_Start_IT+0x47c>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d068      	beq.n	8005c84 <HAL_DMA_Start_IT+0x350>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a7f      	ldr	r2, [pc, #508]	; (8005db4 <HAL_DMA_Start_IT+0x480>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d063      	beq.n	8005c84 <HAL_DMA_Start_IT+0x350>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a7d      	ldr	r2, [pc, #500]	; (8005db8 <HAL_DMA_Start_IT+0x484>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d05e      	beq.n	8005c84 <HAL_DMA_Start_IT+0x350>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a7c      	ldr	r2, [pc, #496]	; (8005dbc <HAL_DMA_Start_IT+0x488>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d059      	beq.n	8005c84 <HAL_DMA_Start_IT+0x350>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a7a      	ldr	r2, [pc, #488]	; (8005dc0 <HAL_DMA_Start_IT+0x48c>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d054      	beq.n	8005c84 <HAL_DMA_Start_IT+0x350>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a79      	ldr	r2, [pc, #484]	; (8005dc4 <HAL_DMA_Start_IT+0x490>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d04f      	beq.n	8005c84 <HAL_DMA_Start_IT+0x350>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a77      	ldr	r2, [pc, #476]	; (8005dc8 <HAL_DMA_Start_IT+0x494>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d04a      	beq.n	8005c84 <HAL_DMA_Start_IT+0x350>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a76      	ldr	r2, [pc, #472]	; (8005dcc <HAL_DMA_Start_IT+0x498>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d045      	beq.n	8005c84 <HAL_DMA_Start_IT+0x350>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a74      	ldr	r2, [pc, #464]	; (8005dd0 <HAL_DMA_Start_IT+0x49c>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d040      	beq.n	8005c84 <HAL_DMA_Start_IT+0x350>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a73      	ldr	r2, [pc, #460]	; (8005dd4 <HAL_DMA_Start_IT+0x4a0>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d03b      	beq.n	8005c84 <HAL_DMA_Start_IT+0x350>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a71      	ldr	r2, [pc, #452]	; (8005dd8 <HAL_DMA_Start_IT+0x4a4>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d036      	beq.n	8005c84 <HAL_DMA_Start_IT+0x350>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a70      	ldr	r2, [pc, #448]	; (8005ddc <HAL_DMA_Start_IT+0x4a8>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d031      	beq.n	8005c84 <HAL_DMA_Start_IT+0x350>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a6e      	ldr	r2, [pc, #440]	; (8005de0 <HAL_DMA_Start_IT+0x4ac>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d02c      	beq.n	8005c84 <HAL_DMA_Start_IT+0x350>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a6d      	ldr	r2, [pc, #436]	; (8005de4 <HAL_DMA_Start_IT+0x4b0>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d027      	beq.n	8005c84 <HAL_DMA_Start_IT+0x350>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a6b      	ldr	r2, [pc, #428]	; (8005de8 <HAL_DMA_Start_IT+0x4b4>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d022      	beq.n	8005c84 <HAL_DMA_Start_IT+0x350>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a6a      	ldr	r2, [pc, #424]	; (8005dec <HAL_DMA_Start_IT+0x4b8>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d01d      	beq.n	8005c84 <HAL_DMA_Start_IT+0x350>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a68      	ldr	r2, [pc, #416]	; (8005df0 <HAL_DMA_Start_IT+0x4bc>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d018      	beq.n	8005c84 <HAL_DMA_Start_IT+0x350>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a67      	ldr	r2, [pc, #412]	; (8005df4 <HAL_DMA_Start_IT+0x4c0>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d013      	beq.n	8005c84 <HAL_DMA_Start_IT+0x350>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a65      	ldr	r2, [pc, #404]	; (8005df8 <HAL_DMA_Start_IT+0x4c4>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d00e      	beq.n	8005c84 <HAL_DMA_Start_IT+0x350>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a64      	ldr	r2, [pc, #400]	; (8005dfc <HAL_DMA_Start_IT+0x4c8>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d009      	beq.n	8005c84 <HAL_DMA_Start_IT+0x350>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a62      	ldr	r2, [pc, #392]	; (8005e00 <HAL_DMA_Start_IT+0x4cc>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d004      	beq.n	8005c84 <HAL_DMA_Start_IT+0x350>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a61      	ldr	r2, [pc, #388]	; (8005e04 <HAL_DMA_Start_IT+0x4d0>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d101      	bne.n	8005c88 <HAL_DMA_Start_IT+0x354>
 8005c84:	2301      	movs	r3, #1
 8005c86:	e000      	b.n	8005c8a <HAL_DMA_Start_IT+0x356>
 8005c88:	2300      	movs	r3, #0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d01a      	beq.n	8005cc4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d007      	beq.n	8005cac <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ca6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005caa:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d007      	beq.n	8005cc4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cc2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a37      	ldr	r2, [pc, #220]	; (8005da8 <HAL_DMA_Start_IT+0x474>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d04a      	beq.n	8005d64 <HAL_DMA_Start_IT+0x430>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a36      	ldr	r2, [pc, #216]	; (8005dac <HAL_DMA_Start_IT+0x478>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d045      	beq.n	8005d64 <HAL_DMA_Start_IT+0x430>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a34      	ldr	r2, [pc, #208]	; (8005db0 <HAL_DMA_Start_IT+0x47c>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d040      	beq.n	8005d64 <HAL_DMA_Start_IT+0x430>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a33      	ldr	r2, [pc, #204]	; (8005db4 <HAL_DMA_Start_IT+0x480>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d03b      	beq.n	8005d64 <HAL_DMA_Start_IT+0x430>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a31      	ldr	r2, [pc, #196]	; (8005db8 <HAL_DMA_Start_IT+0x484>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d036      	beq.n	8005d64 <HAL_DMA_Start_IT+0x430>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a30      	ldr	r2, [pc, #192]	; (8005dbc <HAL_DMA_Start_IT+0x488>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d031      	beq.n	8005d64 <HAL_DMA_Start_IT+0x430>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a2e      	ldr	r2, [pc, #184]	; (8005dc0 <HAL_DMA_Start_IT+0x48c>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d02c      	beq.n	8005d64 <HAL_DMA_Start_IT+0x430>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a2d      	ldr	r2, [pc, #180]	; (8005dc4 <HAL_DMA_Start_IT+0x490>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d027      	beq.n	8005d64 <HAL_DMA_Start_IT+0x430>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a2b      	ldr	r2, [pc, #172]	; (8005dc8 <HAL_DMA_Start_IT+0x494>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d022      	beq.n	8005d64 <HAL_DMA_Start_IT+0x430>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a2a      	ldr	r2, [pc, #168]	; (8005dcc <HAL_DMA_Start_IT+0x498>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d01d      	beq.n	8005d64 <HAL_DMA_Start_IT+0x430>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a28      	ldr	r2, [pc, #160]	; (8005dd0 <HAL_DMA_Start_IT+0x49c>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d018      	beq.n	8005d64 <HAL_DMA_Start_IT+0x430>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a27      	ldr	r2, [pc, #156]	; (8005dd4 <HAL_DMA_Start_IT+0x4a0>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d013      	beq.n	8005d64 <HAL_DMA_Start_IT+0x430>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a25      	ldr	r2, [pc, #148]	; (8005dd8 <HAL_DMA_Start_IT+0x4a4>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d00e      	beq.n	8005d64 <HAL_DMA_Start_IT+0x430>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a24      	ldr	r2, [pc, #144]	; (8005ddc <HAL_DMA_Start_IT+0x4a8>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d009      	beq.n	8005d64 <HAL_DMA_Start_IT+0x430>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a22      	ldr	r2, [pc, #136]	; (8005de0 <HAL_DMA_Start_IT+0x4ac>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d004      	beq.n	8005d64 <HAL_DMA_Start_IT+0x430>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a21      	ldr	r2, [pc, #132]	; (8005de4 <HAL_DMA_Start_IT+0x4b0>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d108      	bne.n	8005d76 <HAL_DMA_Start_IT+0x442>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f042 0201 	orr.w	r2, r2, #1
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	e012      	b.n	8005d9c <HAL_DMA_Start_IT+0x468>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f042 0201 	orr.w	r2, r2, #1
 8005d84:	601a      	str	r2, [r3, #0]
 8005d86:	e009      	b.n	8005d9c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d8e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3718      	adds	r7, #24
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	40020010 	.word	0x40020010
 8005dac:	40020028 	.word	0x40020028
 8005db0:	40020040 	.word	0x40020040
 8005db4:	40020058 	.word	0x40020058
 8005db8:	40020070 	.word	0x40020070
 8005dbc:	40020088 	.word	0x40020088
 8005dc0:	400200a0 	.word	0x400200a0
 8005dc4:	400200b8 	.word	0x400200b8
 8005dc8:	40020410 	.word	0x40020410
 8005dcc:	40020428 	.word	0x40020428
 8005dd0:	40020440 	.word	0x40020440
 8005dd4:	40020458 	.word	0x40020458
 8005dd8:	40020470 	.word	0x40020470
 8005ddc:	40020488 	.word	0x40020488
 8005de0:	400204a0 	.word	0x400204a0
 8005de4:	400204b8 	.word	0x400204b8
 8005de8:	58025408 	.word	0x58025408
 8005dec:	5802541c 	.word	0x5802541c
 8005df0:	58025430 	.word	0x58025430
 8005df4:	58025444 	.word	0x58025444
 8005df8:	58025458 	.word	0x58025458
 8005dfc:	5802546c 	.word	0x5802546c
 8005e00:	58025480 	.word	0x58025480
 8005e04:	58025494 	.word	0x58025494

08005e08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005e10:	f7fc fca2 	bl	8002758 <HAL_GetTick>
 8005e14:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d101      	bne.n	8005e20 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e2dc      	b.n	80063da <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d008      	beq.n	8005e3e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2280      	movs	r2, #128	; 0x80
 8005e30:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e2cd      	b.n	80063da <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a76      	ldr	r2, [pc, #472]	; (800601c <HAL_DMA_Abort+0x214>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d04a      	beq.n	8005ede <HAL_DMA_Abort+0xd6>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a74      	ldr	r2, [pc, #464]	; (8006020 <HAL_DMA_Abort+0x218>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d045      	beq.n	8005ede <HAL_DMA_Abort+0xd6>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a73      	ldr	r2, [pc, #460]	; (8006024 <HAL_DMA_Abort+0x21c>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d040      	beq.n	8005ede <HAL_DMA_Abort+0xd6>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a71      	ldr	r2, [pc, #452]	; (8006028 <HAL_DMA_Abort+0x220>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d03b      	beq.n	8005ede <HAL_DMA_Abort+0xd6>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a70      	ldr	r2, [pc, #448]	; (800602c <HAL_DMA_Abort+0x224>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d036      	beq.n	8005ede <HAL_DMA_Abort+0xd6>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a6e      	ldr	r2, [pc, #440]	; (8006030 <HAL_DMA_Abort+0x228>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d031      	beq.n	8005ede <HAL_DMA_Abort+0xd6>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a6d      	ldr	r2, [pc, #436]	; (8006034 <HAL_DMA_Abort+0x22c>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d02c      	beq.n	8005ede <HAL_DMA_Abort+0xd6>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a6b      	ldr	r2, [pc, #428]	; (8006038 <HAL_DMA_Abort+0x230>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d027      	beq.n	8005ede <HAL_DMA_Abort+0xd6>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a6a      	ldr	r2, [pc, #424]	; (800603c <HAL_DMA_Abort+0x234>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d022      	beq.n	8005ede <HAL_DMA_Abort+0xd6>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a68      	ldr	r2, [pc, #416]	; (8006040 <HAL_DMA_Abort+0x238>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d01d      	beq.n	8005ede <HAL_DMA_Abort+0xd6>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a67      	ldr	r2, [pc, #412]	; (8006044 <HAL_DMA_Abort+0x23c>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d018      	beq.n	8005ede <HAL_DMA_Abort+0xd6>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a65      	ldr	r2, [pc, #404]	; (8006048 <HAL_DMA_Abort+0x240>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d013      	beq.n	8005ede <HAL_DMA_Abort+0xd6>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a64      	ldr	r2, [pc, #400]	; (800604c <HAL_DMA_Abort+0x244>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d00e      	beq.n	8005ede <HAL_DMA_Abort+0xd6>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a62      	ldr	r2, [pc, #392]	; (8006050 <HAL_DMA_Abort+0x248>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d009      	beq.n	8005ede <HAL_DMA_Abort+0xd6>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a61      	ldr	r2, [pc, #388]	; (8006054 <HAL_DMA_Abort+0x24c>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d004      	beq.n	8005ede <HAL_DMA_Abort+0xd6>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a5f      	ldr	r2, [pc, #380]	; (8006058 <HAL_DMA_Abort+0x250>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d101      	bne.n	8005ee2 <HAL_DMA_Abort+0xda>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e000      	b.n	8005ee4 <HAL_DMA_Abort+0xdc>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d013      	beq.n	8005f10 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f022 021e 	bic.w	r2, r2, #30
 8005ef6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	695a      	ldr	r2, [r3, #20]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f06:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	617b      	str	r3, [r7, #20]
 8005f0e:	e00a      	b.n	8005f26 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 020e 	bic.w	r2, r2, #14
 8005f1e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a3c      	ldr	r2, [pc, #240]	; (800601c <HAL_DMA_Abort+0x214>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d072      	beq.n	8006016 <HAL_DMA_Abort+0x20e>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a3a      	ldr	r2, [pc, #232]	; (8006020 <HAL_DMA_Abort+0x218>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d06d      	beq.n	8006016 <HAL_DMA_Abort+0x20e>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a39      	ldr	r2, [pc, #228]	; (8006024 <HAL_DMA_Abort+0x21c>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d068      	beq.n	8006016 <HAL_DMA_Abort+0x20e>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a37      	ldr	r2, [pc, #220]	; (8006028 <HAL_DMA_Abort+0x220>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d063      	beq.n	8006016 <HAL_DMA_Abort+0x20e>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a36      	ldr	r2, [pc, #216]	; (800602c <HAL_DMA_Abort+0x224>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d05e      	beq.n	8006016 <HAL_DMA_Abort+0x20e>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a34      	ldr	r2, [pc, #208]	; (8006030 <HAL_DMA_Abort+0x228>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d059      	beq.n	8006016 <HAL_DMA_Abort+0x20e>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a33      	ldr	r2, [pc, #204]	; (8006034 <HAL_DMA_Abort+0x22c>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d054      	beq.n	8006016 <HAL_DMA_Abort+0x20e>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a31      	ldr	r2, [pc, #196]	; (8006038 <HAL_DMA_Abort+0x230>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d04f      	beq.n	8006016 <HAL_DMA_Abort+0x20e>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a30      	ldr	r2, [pc, #192]	; (800603c <HAL_DMA_Abort+0x234>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d04a      	beq.n	8006016 <HAL_DMA_Abort+0x20e>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a2e      	ldr	r2, [pc, #184]	; (8006040 <HAL_DMA_Abort+0x238>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d045      	beq.n	8006016 <HAL_DMA_Abort+0x20e>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a2d      	ldr	r2, [pc, #180]	; (8006044 <HAL_DMA_Abort+0x23c>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d040      	beq.n	8006016 <HAL_DMA_Abort+0x20e>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a2b      	ldr	r2, [pc, #172]	; (8006048 <HAL_DMA_Abort+0x240>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d03b      	beq.n	8006016 <HAL_DMA_Abort+0x20e>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a2a      	ldr	r2, [pc, #168]	; (800604c <HAL_DMA_Abort+0x244>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d036      	beq.n	8006016 <HAL_DMA_Abort+0x20e>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a28      	ldr	r2, [pc, #160]	; (8006050 <HAL_DMA_Abort+0x248>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d031      	beq.n	8006016 <HAL_DMA_Abort+0x20e>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a27      	ldr	r2, [pc, #156]	; (8006054 <HAL_DMA_Abort+0x24c>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d02c      	beq.n	8006016 <HAL_DMA_Abort+0x20e>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a25      	ldr	r2, [pc, #148]	; (8006058 <HAL_DMA_Abort+0x250>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d027      	beq.n	8006016 <HAL_DMA_Abort+0x20e>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a24      	ldr	r2, [pc, #144]	; (800605c <HAL_DMA_Abort+0x254>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d022      	beq.n	8006016 <HAL_DMA_Abort+0x20e>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a22      	ldr	r2, [pc, #136]	; (8006060 <HAL_DMA_Abort+0x258>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d01d      	beq.n	8006016 <HAL_DMA_Abort+0x20e>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a21      	ldr	r2, [pc, #132]	; (8006064 <HAL_DMA_Abort+0x25c>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d018      	beq.n	8006016 <HAL_DMA_Abort+0x20e>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a1f      	ldr	r2, [pc, #124]	; (8006068 <HAL_DMA_Abort+0x260>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d013      	beq.n	8006016 <HAL_DMA_Abort+0x20e>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a1e      	ldr	r2, [pc, #120]	; (800606c <HAL_DMA_Abort+0x264>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d00e      	beq.n	8006016 <HAL_DMA_Abort+0x20e>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a1c      	ldr	r2, [pc, #112]	; (8006070 <HAL_DMA_Abort+0x268>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d009      	beq.n	8006016 <HAL_DMA_Abort+0x20e>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a1b      	ldr	r2, [pc, #108]	; (8006074 <HAL_DMA_Abort+0x26c>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d004      	beq.n	8006016 <HAL_DMA_Abort+0x20e>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a19      	ldr	r2, [pc, #100]	; (8006078 <HAL_DMA_Abort+0x270>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d132      	bne.n	800607c <HAL_DMA_Abort+0x274>
 8006016:	2301      	movs	r3, #1
 8006018:	e031      	b.n	800607e <HAL_DMA_Abort+0x276>
 800601a:	bf00      	nop
 800601c:	40020010 	.word	0x40020010
 8006020:	40020028 	.word	0x40020028
 8006024:	40020040 	.word	0x40020040
 8006028:	40020058 	.word	0x40020058
 800602c:	40020070 	.word	0x40020070
 8006030:	40020088 	.word	0x40020088
 8006034:	400200a0 	.word	0x400200a0
 8006038:	400200b8 	.word	0x400200b8
 800603c:	40020410 	.word	0x40020410
 8006040:	40020428 	.word	0x40020428
 8006044:	40020440 	.word	0x40020440
 8006048:	40020458 	.word	0x40020458
 800604c:	40020470 	.word	0x40020470
 8006050:	40020488 	.word	0x40020488
 8006054:	400204a0 	.word	0x400204a0
 8006058:	400204b8 	.word	0x400204b8
 800605c:	58025408 	.word	0x58025408
 8006060:	5802541c 	.word	0x5802541c
 8006064:	58025430 	.word	0x58025430
 8006068:	58025444 	.word	0x58025444
 800606c:	58025458 	.word	0x58025458
 8006070:	5802546c 	.word	0x5802546c
 8006074:	58025480 	.word	0x58025480
 8006078:	58025494 	.word	0x58025494
 800607c:	2300      	movs	r3, #0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d007      	beq.n	8006092 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800608c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006090:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a6d      	ldr	r2, [pc, #436]	; (800624c <HAL_DMA_Abort+0x444>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d04a      	beq.n	8006132 <HAL_DMA_Abort+0x32a>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a6b      	ldr	r2, [pc, #428]	; (8006250 <HAL_DMA_Abort+0x448>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d045      	beq.n	8006132 <HAL_DMA_Abort+0x32a>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a6a      	ldr	r2, [pc, #424]	; (8006254 <HAL_DMA_Abort+0x44c>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d040      	beq.n	8006132 <HAL_DMA_Abort+0x32a>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a68      	ldr	r2, [pc, #416]	; (8006258 <HAL_DMA_Abort+0x450>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d03b      	beq.n	8006132 <HAL_DMA_Abort+0x32a>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a67      	ldr	r2, [pc, #412]	; (800625c <HAL_DMA_Abort+0x454>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d036      	beq.n	8006132 <HAL_DMA_Abort+0x32a>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a65      	ldr	r2, [pc, #404]	; (8006260 <HAL_DMA_Abort+0x458>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d031      	beq.n	8006132 <HAL_DMA_Abort+0x32a>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a64      	ldr	r2, [pc, #400]	; (8006264 <HAL_DMA_Abort+0x45c>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d02c      	beq.n	8006132 <HAL_DMA_Abort+0x32a>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a62      	ldr	r2, [pc, #392]	; (8006268 <HAL_DMA_Abort+0x460>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d027      	beq.n	8006132 <HAL_DMA_Abort+0x32a>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a61      	ldr	r2, [pc, #388]	; (800626c <HAL_DMA_Abort+0x464>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d022      	beq.n	8006132 <HAL_DMA_Abort+0x32a>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a5f      	ldr	r2, [pc, #380]	; (8006270 <HAL_DMA_Abort+0x468>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d01d      	beq.n	8006132 <HAL_DMA_Abort+0x32a>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a5e      	ldr	r2, [pc, #376]	; (8006274 <HAL_DMA_Abort+0x46c>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d018      	beq.n	8006132 <HAL_DMA_Abort+0x32a>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a5c      	ldr	r2, [pc, #368]	; (8006278 <HAL_DMA_Abort+0x470>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d013      	beq.n	8006132 <HAL_DMA_Abort+0x32a>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a5b      	ldr	r2, [pc, #364]	; (800627c <HAL_DMA_Abort+0x474>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d00e      	beq.n	8006132 <HAL_DMA_Abort+0x32a>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a59      	ldr	r2, [pc, #356]	; (8006280 <HAL_DMA_Abort+0x478>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d009      	beq.n	8006132 <HAL_DMA_Abort+0x32a>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a58      	ldr	r2, [pc, #352]	; (8006284 <HAL_DMA_Abort+0x47c>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d004      	beq.n	8006132 <HAL_DMA_Abort+0x32a>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a56      	ldr	r2, [pc, #344]	; (8006288 <HAL_DMA_Abort+0x480>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d108      	bne.n	8006144 <HAL_DMA_Abort+0x33c>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f022 0201 	bic.w	r2, r2, #1
 8006140:	601a      	str	r2, [r3, #0]
 8006142:	e007      	b.n	8006154 <HAL_DMA_Abort+0x34c>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f022 0201 	bic.w	r2, r2, #1
 8006152:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006154:	e013      	b.n	800617e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006156:	f7fc faff 	bl	8002758 <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	2b05      	cmp	r3, #5
 8006162:	d90c      	bls.n	800617e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2220      	movs	r2, #32
 8006168:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2203      	movs	r2, #3
 800616e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e12d      	b.n	80063da <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1e5      	bne.n	8006156 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a2f      	ldr	r2, [pc, #188]	; (800624c <HAL_DMA_Abort+0x444>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d04a      	beq.n	800622a <HAL_DMA_Abort+0x422>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a2d      	ldr	r2, [pc, #180]	; (8006250 <HAL_DMA_Abort+0x448>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d045      	beq.n	800622a <HAL_DMA_Abort+0x422>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a2c      	ldr	r2, [pc, #176]	; (8006254 <HAL_DMA_Abort+0x44c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d040      	beq.n	800622a <HAL_DMA_Abort+0x422>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a2a      	ldr	r2, [pc, #168]	; (8006258 <HAL_DMA_Abort+0x450>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d03b      	beq.n	800622a <HAL_DMA_Abort+0x422>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a29      	ldr	r2, [pc, #164]	; (800625c <HAL_DMA_Abort+0x454>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d036      	beq.n	800622a <HAL_DMA_Abort+0x422>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a27      	ldr	r2, [pc, #156]	; (8006260 <HAL_DMA_Abort+0x458>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d031      	beq.n	800622a <HAL_DMA_Abort+0x422>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a26      	ldr	r2, [pc, #152]	; (8006264 <HAL_DMA_Abort+0x45c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d02c      	beq.n	800622a <HAL_DMA_Abort+0x422>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a24      	ldr	r2, [pc, #144]	; (8006268 <HAL_DMA_Abort+0x460>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d027      	beq.n	800622a <HAL_DMA_Abort+0x422>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a23      	ldr	r2, [pc, #140]	; (800626c <HAL_DMA_Abort+0x464>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d022      	beq.n	800622a <HAL_DMA_Abort+0x422>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a21      	ldr	r2, [pc, #132]	; (8006270 <HAL_DMA_Abort+0x468>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d01d      	beq.n	800622a <HAL_DMA_Abort+0x422>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a20      	ldr	r2, [pc, #128]	; (8006274 <HAL_DMA_Abort+0x46c>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d018      	beq.n	800622a <HAL_DMA_Abort+0x422>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a1e      	ldr	r2, [pc, #120]	; (8006278 <HAL_DMA_Abort+0x470>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d013      	beq.n	800622a <HAL_DMA_Abort+0x422>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a1d      	ldr	r2, [pc, #116]	; (800627c <HAL_DMA_Abort+0x474>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d00e      	beq.n	800622a <HAL_DMA_Abort+0x422>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a1b      	ldr	r2, [pc, #108]	; (8006280 <HAL_DMA_Abort+0x478>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d009      	beq.n	800622a <HAL_DMA_Abort+0x422>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a1a      	ldr	r2, [pc, #104]	; (8006284 <HAL_DMA_Abort+0x47c>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d004      	beq.n	800622a <HAL_DMA_Abort+0x422>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a18      	ldr	r2, [pc, #96]	; (8006288 <HAL_DMA_Abort+0x480>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d101      	bne.n	800622e <HAL_DMA_Abort+0x426>
 800622a:	2301      	movs	r3, #1
 800622c:	e000      	b.n	8006230 <HAL_DMA_Abort+0x428>
 800622e:	2300      	movs	r3, #0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d02b      	beq.n	800628c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006238:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800623e:	f003 031f 	and.w	r3, r3, #31
 8006242:	223f      	movs	r2, #63	; 0x3f
 8006244:	409a      	lsls	r2, r3
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	609a      	str	r2, [r3, #8]
 800624a:	e02a      	b.n	80062a2 <HAL_DMA_Abort+0x49a>
 800624c:	40020010 	.word	0x40020010
 8006250:	40020028 	.word	0x40020028
 8006254:	40020040 	.word	0x40020040
 8006258:	40020058 	.word	0x40020058
 800625c:	40020070 	.word	0x40020070
 8006260:	40020088 	.word	0x40020088
 8006264:	400200a0 	.word	0x400200a0
 8006268:	400200b8 	.word	0x400200b8
 800626c:	40020410 	.word	0x40020410
 8006270:	40020428 	.word	0x40020428
 8006274:	40020440 	.word	0x40020440
 8006278:	40020458 	.word	0x40020458
 800627c:	40020470 	.word	0x40020470
 8006280:	40020488 	.word	0x40020488
 8006284:	400204a0 	.word	0x400204a0
 8006288:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006290:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006296:	f003 031f 	and.w	r3, r3, #31
 800629a:	2201      	movs	r2, #1
 800629c:	409a      	lsls	r2, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a4f      	ldr	r2, [pc, #316]	; (80063e4 <HAL_DMA_Abort+0x5dc>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d072      	beq.n	8006392 <HAL_DMA_Abort+0x58a>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a4d      	ldr	r2, [pc, #308]	; (80063e8 <HAL_DMA_Abort+0x5e0>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d06d      	beq.n	8006392 <HAL_DMA_Abort+0x58a>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a4c      	ldr	r2, [pc, #304]	; (80063ec <HAL_DMA_Abort+0x5e4>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d068      	beq.n	8006392 <HAL_DMA_Abort+0x58a>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a4a      	ldr	r2, [pc, #296]	; (80063f0 <HAL_DMA_Abort+0x5e8>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d063      	beq.n	8006392 <HAL_DMA_Abort+0x58a>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a49      	ldr	r2, [pc, #292]	; (80063f4 <HAL_DMA_Abort+0x5ec>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d05e      	beq.n	8006392 <HAL_DMA_Abort+0x58a>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a47      	ldr	r2, [pc, #284]	; (80063f8 <HAL_DMA_Abort+0x5f0>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d059      	beq.n	8006392 <HAL_DMA_Abort+0x58a>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a46      	ldr	r2, [pc, #280]	; (80063fc <HAL_DMA_Abort+0x5f4>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d054      	beq.n	8006392 <HAL_DMA_Abort+0x58a>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a44      	ldr	r2, [pc, #272]	; (8006400 <HAL_DMA_Abort+0x5f8>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d04f      	beq.n	8006392 <HAL_DMA_Abort+0x58a>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a43      	ldr	r2, [pc, #268]	; (8006404 <HAL_DMA_Abort+0x5fc>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d04a      	beq.n	8006392 <HAL_DMA_Abort+0x58a>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a41      	ldr	r2, [pc, #260]	; (8006408 <HAL_DMA_Abort+0x600>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d045      	beq.n	8006392 <HAL_DMA_Abort+0x58a>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a40      	ldr	r2, [pc, #256]	; (800640c <HAL_DMA_Abort+0x604>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d040      	beq.n	8006392 <HAL_DMA_Abort+0x58a>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a3e      	ldr	r2, [pc, #248]	; (8006410 <HAL_DMA_Abort+0x608>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d03b      	beq.n	8006392 <HAL_DMA_Abort+0x58a>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a3d      	ldr	r2, [pc, #244]	; (8006414 <HAL_DMA_Abort+0x60c>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d036      	beq.n	8006392 <HAL_DMA_Abort+0x58a>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a3b      	ldr	r2, [pc, #236]	; (8006418 <HAL_DMA_Abort+0x610>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d031      	beq.n	8006392 <HAL_DMA_Abort+0x58a>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a3a      	ldr	r2, [pc, #232]	; (800641c <HAL_DMA_Abort+0x614>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d02c      	beq.n	8006392 <HAL_DMA_Abort+0x58a>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a38      	ldr	r2, [pc, #224]	; (8006420 <HAL_DMA_Abort+0x618>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d027      	beq.n	8006392 <HAL_DMA_Abort+0x58a>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a37      	ldr	r2, [pc, #220]	; (8006424 <HAL_DMA_Abort+0x61c>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d022      	beq.n	8006392 <HAL_DMA_Abort+0x58a>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a35      	ldr	r2, [pc, #212]	; (8006428 <HAL_DMA_Abort+0x620>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d01d      	beq.n	8006392 <HAL_DMA_Abort+0x58a>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a34      	ldr	r2, [pc, #208]	; (800642c <HAL_DMA_Abort+0x624>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d018      	beq.n	8006392 <HAL_DMA_Abort+0x58a>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a32      	ldr	r2, [pc, #200]	; (8006430 <HAL_DMA_Abort+0x628>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d013      	beq.n	8006392 <HAL_DMA_Abort+0x58a>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a31      	ldr	r2, [pc, #196]	; (8006434 <HAL_DMA_Abort+0x62c>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d00e      	beq.n	8006392 <HAL_DMA_Abort+0x58a>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a2f      	ldr	r2, [pc, #188]	; (8006438 <HAL_DMA_Abort+0x630>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d009      	beq.n	8006392 <HAL_DMA_Abort+0x58a>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a2e      	ldr	r2, [pc, #184]	; (800643c <HAL_DMA_Abort+0x634>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d004      	beq.n	8006392 <HAL_DMA_Abort+0x58a>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a2c      	ldr	r2, [pc, #176]	; (8006440 <HAL_DMA_Abort+0x638>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d101      	bne.n	8006396 <HAL_DMA_Abort+0x58e>
 8006392:	2301      	movs	r3, #1
 8006394:	e000      	b.n	8006398 <HAL_DMA_Abort+0x590>
 8006396:	2300      	movs	r3, #0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d015      	beq.n	80063c8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80063a4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00c      	beq.n	80063c8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063bc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80063c6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3718      	adds	r7, #24
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	40020010 	.word	0x40020010
 80063e8:	40020028 	.word	0x40020028
 80063ec:	40020040 	.word	0x40020040
 80063f0:	40020058 	.word	0x40020058
 80063f4:	40020070 	.word	0x40020070
 80063f8:	40020088 	.word	0x40020088
 80063fc:	400200a0 	.word	0x400200a0
 8006400:	400200b8 	.word	0x400200b8
 8006404:	40020410 	.word	0x40020410
 8006408:	40020428 	.word	0x40020428
 800640c:	40020440 	.word	0x40020440
 8006410:	40020458 	.word	0x40020458
 8006414:	40020470 	.word	0x40020470
 8006418:	40020488 	.word	0x40020488
 800641c:	400204a0 	.word	0x400204a0
 8006420:	400204b8 	.word	0x400204b8
 8006424:	58025408 	.word	0x58025408
 8006428:	5802541c 	.word	0x5802541c
 800642c:	58025430 	.word	0x58025430
 8006430:	58025444 	.word	0x58025444
 8006434:	58025458 	.word	0x58025458
 8006438:	5802546c 	.word	0x5802546c
 800643c:	58025480 	.word	0x58025480
 8006440:	58025494 	.word	0x58025494

08006444 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b08a      	sub	sp, #40	; 0x28
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800644c:	2300      	movs	r3, #0
 800644e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006450:	4b67      	ldr	r3, [pc, #412]	; (80065f0 <HAL_DMA_IRQHandler+0x1ac>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a67      	ldr	r2, [pc, #412]	; (80065f4 <HAL_DMA_IRQHandler+0x1b0>)
 8006456:	fba2 2303 	umull	r2, r3, r2, r3
 800645a:	0a9b      	lsrs	r3, r3, #10
 800645c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006462:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006468:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800646a:	6a3b      	ldr	r3, [r7, #32]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a5f      	ldr	r2, [pc, #380]	; (80065f8 <HAL_DMA_IRQHandler+0x1b4>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d04a      	beq.n	8006516 <HAL_DMA_IRQHandler+0xd2>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a5d      	ldr	r2, [pc, #372]	; (80065fc <HAL_DMA_IRQHandler+0x1b8>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d045      	beq.n	8006516 <HAL_DMA_IRQHandler+0xd2>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a5c      	ldr	r2, [pc, #368]	; (8006600 <HAL_DMA_IRQHandler+0x1bc>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d040      	beq.n	8006516 <HAL_DMA_IRQHandler+0xd2>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a5a      	ldr	r2, [pc, #360]	; (8006604 <HAL_DMA_IRQHandler+0x1c0>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d03b      	beq.n	8006516 <HAL_DMA_IRQHandler+0xd2>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a59      	ldr	r2, [pc, #356]	; (8006608 <HAL_DMA_IRQHandler+0x1c4>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d036      	beq.n	8006516 <HAL_DMA_IRQHandler+0xd2>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a57      	ldr	r2, [pc, #348]	; (800660c <HAL_DMA_IRQHandler+0x1c8>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d031      	beq.n	8006516 <HAL_DMA_IRQHandler+0xd2>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a56      	ldr	r2, [pc, #344]	; (8006610 <HAL_DMA_IRQHandler+0x1cc>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d02c      	beq.n	8006516 <HAL_DMA_IRQHandler+0xd2>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a54      	ldr	r2, [pc, #336]	; (8006614 <HAL_DMA_IRQHandler+0x1d0>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d027      	beq.n	8006516 <HAL_DMA_IRQHandler+0xd2>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a53      	ldr	r2, [pc, #332]	; (8006618 <HAL_DMA_IRQHandler+0x1d4>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d022      	beq.n	8006516 <HAL_DMA_IRQHandler+0xd2>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a51      	ldr	r2, [pc, #324]	; (800661c <HAL_DMA_IRQHandler+0x1d8>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d01d      	beq.n	8006516 <HAL_DMA_IRQHandler+0xd2>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a50      	ldr	r2, [pc, #320]	; (8006620 <HAL_DMA_IRQHandler+0x1dc>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d018      	beq.n	8006516 <HAL_DMA_IRQHandler+0xd2>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a4e      	ldr	r2, [pc, #312]	; (8006624 <HAL_DMA_IRQHandler+0x1e0>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d013      	beq.n	8006516 <HAL_DMA_IRQHandler+0xd2>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a4d      	ldr	r2, [pc, #308]	; (8006628 <HAL_DMA_IRQHandler+0x1e4>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d00e      	beq.n	8006516 <HAL_DMA_IRQHandler+0xd2>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a4b      	ldr	r2, [pc, #300]	; (800662c <HAL_DMA_IRQHandler+0x1e8>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d009      	beq.n	8006516 <HAL_DMA_IRQHandler+0xd2>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a4a      	ldr	r2, [pc, #296]	; (8006630 <HAL_DMA_IRQHandler+0x1ec>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d004      	beq.n	8006516 <HAL_DMA_IRQHandler+0xd2>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a48      	ldr	r2, [pc, #288]	; (8006634 <HAL_DMA_IRQHandler+0x1f0>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d101      	bne.n	800651a <HAL_DMA_IRQHandler+0xd6>
 8006516:	2301      	movs	r3, #1
 8006518:	e000      	b.n	800651c <HAL_DMA_IRQHandler+0xd8>
 800651a:	2300      	movs	r3, #0
 800651c:	2b00      	cmp	r3, #0
 800651e:	f000 842b 	beq.w	8006d78 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006526:	f003 031f 	and.w	r3, r3, #31
 800652a:	2208      	movs	r2, #8
 800652c:	409a      	lsls	r2, r3
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	4013      	ands	r3, r2
 8006532:	2b00      	cmp	r3, #0
 8006534:	f000 80a2 	beq.w	800667c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a2e      	ldr	r2, [pc, #184]	; (80065f8 <HAL_DMA_IRQHandler+0x1b4>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d04a      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x194>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a2d      	ldr	r2, [pc, #180]	; (80065fc <HAL_DMA_IRQHandler+0x1b8>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d045      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x194>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a2b      	ldr	r2, [pc, #172]	; (8006600 <HAL_DMA_IRQHandler+0x1bc>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d040      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x194>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a2a      	ldr	r2, [pc, #168]	; (8006604 <HAL_DMA_IRQHandler+0x1c0>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d03b      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x194>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a28      	ldr	r2, [pc, #160]	; (8006608 <HAL_DMA_IRQHandler+0x1c4>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d036      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x194>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a27      	ldr	r2, [pc, #156]	; (800660c <HAL_DMA_IRQHandler+0x1c8>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d031      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x194>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a25      	ldr	r2, [pc, #148]	; (8006610 <HAL_DMA_IRQHandler+0x1cc>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d02c      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x194>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a24      	ldr	r2, [pc, #144]	; (8006614 <HAL_DMA_IRQHandler+0x1d0>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d027      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x194>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a22      	ldr	r2, [pc, #136]	; (8006618 <HAL_DMA_IRQHandler+0x1d4>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d022      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x194>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a21      	ldr	r2, [pc, #132]	; (800661c <HAL_DMA_IRQHandler+0x1d8>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d01d      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x194>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a1f      	ldr	r2, [pc, #124]	; (8006620 <HAL_DMA_IRQHandler+0x1dc>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d018      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x194>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a1e      	ldr	r2, [pc, #120]	; (8006624 <HAL_DMA_IRQHandler+0x1e0>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d013      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x194>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a1c      	ldr	r2, [pc, #112]	; (8006628 <HAL_DMA_IRQHandler+0x1e4>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d00e      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x194>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a1b      	ldr	r2, [pc, #108]	; (800662c <HAL_DMA_IRQHandler+0x1e8>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d009      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x194>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a19      	ldr	r2, [pc, #100]	; (8006630 <HAL_DMA_IRQHandler+0x1ec>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d004      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x194>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a18      	ldr	r2, [pc, #96]	; (8006634 <HAL_DMA_IRQHandler+0x1f0>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d12f      	bne.n	8006638 <HAL_DMA_IRQHandler+0x1f4>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0304 	and.w	r3, r3, #4
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	bf14      	ite	ne
 80065e6:	2301      	movne	r3, #1
 80065e8:	2300      	moveq	r3, #0
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	e02e      	b.n	800664c <HAL_DMA_IRQHandler+0x208>
 80065ee:	bf00      	nop
 80065f0:	24000000 	.word	0x24000000
 80065f4:	1b4e81b5 	.word	0x1b4e81b5
 80065f8:	40020010 	.word	0x40020010
 80065fc:	40020028 	.word	0x40020028
 8006600:	40020040 	.word	0x40020040
 8006604:	40020058 	.word	0x40020058
 8006608:	40020070 	.word	0x40020070
 800660c:	40020088 	.word	0x40020088
 8006610:	400200a0 	.word	0x400200a0
 8006614:	400200b8 	.word	0x400200b8
 8006618:	40020410 	.word	0x40020410
 800661c:	40020428 	.word	0x40020428
 8006620:	40020440 	.word	0x40020440
 8006624:	40020458 	.word	0x40020458
 8006628:	40020470 	.word	0x40020470
 800662c:	40020488 	.word	0x40020488
 8006630:	400204a0 	.word	0x400204a0
 8006634:	400204b8 	.word	0x400204b8
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 0308 	and.w	r3, r3, #8
 8006642:	2b00      	cmp	r3, #0
 8006644:	bf14      	ite	ne
 8006646:	2301      	movne	r3, #1
 8006648:	2300      	moveq	r3, #0
 800664a:	b2db      	uxtb	r3, r3
 800664c:	2b00      	cmp	r3, #0
 800664e:	d015      	beq.n	800667c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f022 0204 	bic.w	r2, r2, #4
 800665e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006664:	f003 031f 	and.w	r3, r3, #31
 8006668:	2208      	movs	r2, #8
 800666a:	409a      	lsls	r2, r3
 800666c:	6a3b      	ldr	r3, [r7, #32]
 800666e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006674:	f043 0201 	orr.w	r2, r3, #1
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006680:	f003 031f 	and.w	r3, r3, #31
 8006684:	69ba      	ldr	r2, [r7, #24]
 8006686:	fa22 f303 	lsr.w	r3, r2, r3
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	2b00      	cmp	r3, #0
 8006690:	d06e      	beq.n	8006770 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a69      	ldr	r2, [pc, #420]	; (800683c <HAL_DMA_IRQHandler+0x3f8>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d04a      	beq.n	8006732 <HAL_DMA_IRQHandler+0x2ee>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a67      	ldr	r2, [pc, #412]	; (8006840 <HAL_DMA_IRQHandler+0x3fc>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d045      	beq.n	8006732 <HAL_DMA_IRQHandler+0x2ee>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a66      	ldr	r2, [pc, #408]	; (8006844 <HAL_DMA_IRQHandler+0x400>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d040      	beq.n	8006732 <HAL_DMA_IRQHandler+0x2ee>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a64      	ldr	r2, [pc, #400]	; (8006848 <HAL_DMA_IRQHandler+0x404>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d03b      	beq.n	8006732 <HAL_DMA_IRQHandler+0x2ee>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a63      	ldr	r2, [pc, #396]	; (800684c <HAL_DMA_IRQHandler+0x408>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d036      	beq.n	8006732 <HAL_DMA_IRQHandler+0x2ee>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a61      	ldr	r2, [pc, #388]	; (8006850 <HAL_DMA_IRQHandler+0x40c>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d031      	beq.n	8006732 <HAL_DMA_IRQHandler+0x2ee>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a60      	ldr	r2, [pc, #384]	; (8006854 <HAL_DMA_IRQHandler+0x410>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d02c      	beq.n	8006732 <HAL_DMA_IRQHandler+0x2ee>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a5e      	ldr	r2, [pc, #376]	; (8006858 <HAL_DMA_IRQHandler+0x414>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d027      	beq.n	8006732 <HAL_DMA_IRQHandler+0x2ee>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a5d      	ldr	r2, [pc, #372]	; (800685c <HAL_DMA_IRQHandler+0x418>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d022      	beq.n	8006732 <HAL_DMA_IRQHandler+0x2ee>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a5b      	ldr	r2, [pc, #364]	; (8006860 <HAL_DMA_IRQHandler+0x41c>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d01d      	beq.n	8006732 <HAL_DMA_IRQHandler+0x2ee>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a5a      	ldr	r2, [pc, #360]	; (8006864 <HAL_DMA_IRQHandler+0x420>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d018      	beq.n	8006732 <HAL_DMA_IRQHandler+0x2ee>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a58      	ldr	r2, [pc, #352]	; (8006868 <HAL_DMA_IRQHandler+0x424>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d013      	beq.n	8006732 <HAL_DMA_IRQHandler+0x2ee>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a57      	ldr	r2, [pc, #348]	; (800686c <HAL_DMA_IRQHandler+0x428>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d00e      	beq.n	8006732 <HAL_DMA_IRQHandler+0x2ee>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a55      	ldr	r2, [pc, #340]	; (8006870 <HAL_DMA_IRQHandler+0x42c>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d009      	beq.n	8006732 <HAL_DMA_IRQHandler+0x2ee>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a54      	ldr	r2, [pc, #336]	; (8006874 <HAL_DMA_IRQHandler+0x430>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d004      	beq.n	8006732 <HAL_DMA_IRQHandler+0x2ee>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a52      	ldr	r2, [pc, #328]	; (8006878 <HAL_DMA_IRQHandler+0x434>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d10a      	bne.n	8006748 <HAL_DMA_IRQHandler+0x304>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800673c:	2b00      	cmp	r3, #0
 800673e:	bf14      	ite	ne
 8006740:	2301      	movne	r3, #1
 8006742:	2300      	moveq	r3, #0
 8006744:	b2db      	uxtb	r3, r3
 8006746:	e003      	b.n	8006750 <HAL_DMA_IRQHandler+0x30c>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2300      	movs	r3, #0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00d      	beq.n	8006770 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006758:	f003 031f 	and.w	r3, r3, #31
 800675c:	2201      	movs	r2, #1
 800675e:	409a      	lsls	r2, r3
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006768:	f043 0202 	orr.w	r2, r3, #2
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006774:	f003 031f 	and.w	r3, r3, #31
 8006778:	2204      	movs	r2, #4
 800677a:	409a      	lsls	r2, r3
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	4013      	ands	r3, r2
 8006780:	2b00      	cmp	r3, #0
 8006782:	f000 808f 	beq.w	80068a4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a2c      	ldr	r2, [pc, #176]	; (800683c <HAL_DMA_IRQHandler+0x3f8>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d04a      	beq.n	8006826 <HAL_DMA_IRQHandler+0x3e2>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a2a      	ldr	r2, [pc, #168]	; (8006840 <HAL_DMA_IRQHandler+0x3fc>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d045      	beq.n	8006826 <HAL_DMA_IRQHandler+0x3e2>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a29      	ldr	r2, [pc, #164]	; (8006844 <HAL_DMA_IRQHandler+0x400>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d040      	beq.n	8006826 <HAL_DMA_IRQHandler+0x3e2>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a27      	ldr	r2, [pc, #156]	; (8006848 <HAL_DMA_IRQHandler+0x404>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d03b      	beq.n	8006826 <HAL_DMA_IRQHandler+0x3e2>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a26      	ldr	r2, [pc, #152]	; (800684c <HAL_DMA_IRQHandler+0x408>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d036      	beq.n	8006826 <HAL_DMA_IRQHandler+0x3e2>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a24      	ldr	r2, [pc, #144]	; (8006850 <HAL_DMA_IRQHandler+0x40c>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d031      	beq.n	8006826 <HAL_DMA_IRQHandler+0x3e2>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a23      	ldr	r2, [pc, #140]	; (8006854 <HAL_DMA_IRQHandler+0x410>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d02c      	beq.n	8006826 <HAL_DMA_IRQHandler+0x3e2>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a21      	ldr	r2, [pc, #132]	; (8006858 <HAL_DMA_IRQHandler+0x414>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d027      	beq.n	8006826 <HAL_DMA_IRQHandler+0x3e2>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a20      	ldr	r2, [pc, #128]	; (800685c <HAL_DMA_IRQHandler+0x418>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d022      	beq.n	8006826 <HAL_DMA_IRQHandler+0x3e2>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a1e      	ldr	r2, [pc, #120]	; (8006860 <HAL_DMA_IRQHandler+0x41c>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d01d      	beq.n	8006826 <HAL_DMA_IRQHandler+0x3e2>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a1d      	ldr	r2, [pc, #116]	; (8006864 <HAL_DMA_IRQHandler+0x420>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d018      	beq.n	8006826 <HAL_DMA_IRQHandler+0x3e2>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a1b      	ldr	r2, [pc, #108]	; (8006868 <HAL_DMA_IRQHandler+0x424>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d013      	beq.n	8006826 <HAL_DMA_IRQHandler+0x3e2>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a1a      	ldr	r2, [pc, #104]	; (800686c <HAL_DMA_IRQHandler+0x428>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d00e      	beq.n	8006826 <HAL_DMA_IRQHandler+0x3e2>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a18      	ldr	r2, [pc, #96]	; (8006870 <HAL_DMA_IRQHandler+0x42c>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d009      	beq.n	8006826 <HAL_DMA_IRQHandler+0x3e2>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a17      	ldr	r2, [pc, #92]	; (8006874 <HAL_DMA_IRQHandler+0x430>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d004      	beq.n	8006826 <HAL_DMA_IRQHandler+0x3e2>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a15      	ldr	r2, [pc, #84]	; (8006878 <HAL_DMA_IRQHandler+0x434>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d12a      	bne.n	800687c <HAL_DMA_IRQHandler+0x438>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0302 	and.w	r3, r3, #2
 8006830:	2b00      	cmp	r3, #0
 8006832:	bf14      	ite	ne
 8006834:	2301      	movne	r3, #1
 8006836:	2300      	moveq	r3, #0
 8006838:	b2db      	uxtb	r3, r3
 800683a:	e023      	b.n	8006884 <HAL_DMA_IRQHandler+0x440>
 800683c:	40020010 	.word	0x40020010
 8006840:	40020028 	.word	0x40020028
 8006844:	40020040 	.word	0x40020040
 8006848:	40020058 	.word	0x40020058
 800684c:	40020070 	.word	0x40020070
 8006850:	40020088 	.word	0x40020088
 8006854:	400200a0 	.word	0x400200a0
 8006858:	400200b8 	.word	0x400200b8
 800685c:	40020410 	.word	0x40020410
 8006860:	40020428 	.word	0x40020428
 8006864:	40020440 	.word	0x40020440
 8006868:	40020458 	.word	0x40020458
 800686c:	40020470 	.word	0x40020470
 8006870:	40020488 	.word	0x40020488
 8006874:	400204a0 	.word	0x400204a0
 8006878:	400204b8 	.word	0x400204b8
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2300      	movs	r3, #0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00d      	beq.n	80068a4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800688c:	f003 031f 	and.w	r3, r3, #31
 8006890:	2204      	movs	r2, #4
 8006892:	409a      	lsls	r2, r3
 8006894:	6a3b      	ldr	r3, [r7, #32]
 8006896:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800689c:	f043 0204 	orr.w	r2, r3, #4
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068a8:	f003 031f 	and.w	r3, r3, #31
 80068ac:	2210      	movs	r2, #16
 80068ae:	409a      	lsls	r2, r3
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	4013      	ands	r3, r2
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f000 80a6 	beq.w	8006a06 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a85      	ldr	r2, [pc, #532]	; (8006ad4 <HAL_DMA_IRQHandler+0x690>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d04a      	beq.n	800695a <HAL_DMA_IRQHandler+0x516>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a83      	ldr	r2, [pc, #524]	; (8006ad8 <HAL_DMA_IRQHandler+0x694>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d045      	beq.n	800695a <HAL_DMA_IRQHandler+0x516>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a82      	ldr	r2, [pc, #520]	; (8006adc <HAL_DMA_IRQHandler+0x698>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d040      	beq.n	800695a <HAL_DMA_IRQHandler+0x516>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a80      	ldr	r2, [pc, #512]	; (8006ae0 <HAL_DMA_IRQHandler+0x69c>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d03b      	beq.n	800695a <HAL_DMA_IRQHandler+0x516>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a7f      	ldr	r2, [pc, #508]	; (8006ae4 <HAL_DMA_IRQHandler+0x6a0>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d036      	beq.n	800695a <HAL_DMA_IRQHandler+0x516>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a7d      	ldr	r2, [pc, #500]	; (8006ae8 <HAL_DMA_IRQHandler+0x6a4>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d031      	beq.n	800695a <HAL_DMA_IRQHandler+0x516>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a7c      	ldr	r2, [pc, #496]	; (8006aec <HAL_DMA_IRQHandler+0x6a8>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d02c      	beq.n	800695a <HAL_DMA_IRQHandler+0x516>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a7a      	ldr	r2, [pc, #488]	; (8006af0 <HAL_DMA_IRQHandler+0x6ac>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d027      	beq.n	800695a <HAL_DMA_IRQHandler+0x516>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a79      	ldr	r2, [pc, #484]	; (8006af4 <HAL_DMA_IRQHandler+0x6b0>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d022      	beq.n	800695a <HAL_DMA_IRQHandler+0x516>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a77      	ldr	r2, [pc, #476]	; (8006af8 <HAL_DMA_IRQHandler+0x6b4>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d01d      	beq.n	800695a <HAL_DMA_IRQHandler+0x516>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a76      	ldr	r2, [pc, #472]	; (8006afc <HAL_DMA_IRQHandler+0x6b8>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d018      	beq.n	800695a <HAL_DMA_IRQHandler+0x516>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a74      	ldr	r2, [pc, #464]	; (8006b00 <HAL_DMA_IRQHandler+0x6bc>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d013      	beq.n	800695a <HAL_DMA_IRQHandler+0x516>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a73      	ldr	r2, [pc, #460]	; (8006b04 <HAL_DMA_IRQHandler+0x6c0>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d00e      	beq.n	800695a <HAL_DMA_IRQHandler+0x516>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a71      	ldr	r2, [pc, #452]	; (8006b08 <HAL_DMA_IRQHandler+0x6c4>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d009      	beq.n	800695a <HAL_DMA_IRQHandler+0x516>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a70      	ldr	r2, [pc, #448]	; (8006b0c <HAL_DMA_IRQHandler+0x6c8>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d004      	beq.n	800695a <HAL_DMA_IRQHandler+0x516>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a6e      	ldr	r2, [pc, #440]	; (8006b10 <HAL_DMA_IRQHandler+0x6cc>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d10a      	bne.n	8006970 <HAL_DMA_IRQHandler+0x52c>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0308 	and.w	r3, r3, #8
 8006964:	2b00      	cmp	r3, #0
 8006966:	bf14      	ite	ne
 8006968:	2301      	movne	r3, #1
 800696a:	2300      	moveq	r3, #0
 800696c:	b2db      	uxtb	r3, r3
 800696e:	e009      	b.n	8006984 <HAL_DMA_IRQHandler+0x540>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0304 	and.w	r3, r3, #4
 800697a:	2b00      	cmp	r3, #0
 800697c:	bf14      	ite	ne
 800697e:	2301      	movne	r3, #1
 8006980:	2300      	moveq	r3, #0
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b00      	cmp	r3, #0
 8006986:	d03e      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800698c:	f003 031f 	and.w	r3, r3, #31
 8006990:	2210      	movs	r2, #16
 8006992:	409a      	lsls	r2, r3
 8006994:	6a3b      	ldr	r3, [r7, #32]
 8006996:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d018      	beq.n	80069d8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d108      	bne.n	80069c6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d024      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	4798      	blx	r3
 80069c4:	e01f      	b.n	8006a06 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d01b      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	4798      	blx	r3
 80069d6:	e016      	b.n	8006a06 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d107      	bne.n	80069f6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f022 0208 	bic.w	r2, r2, #8
 80069f4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d003      	beq.n	8006a06 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a0a:	f003 031f 	and.w	r3, r3, #31
 8006a0e:	2220      	movs	r2, #32
 8006a10:	409a      	lsls	r2, r3
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	4013      	ands	r3, r2
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f000 8110 	beq.w	8006c3c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a2c      	ldr	r2, [pc, #176]	; (8006ad4 <HAL_DMA_IRQHandler+0x690>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d04a      	beq.n	8006abc <HAL_DMA_IRQHandler+0x678>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a2b      	ldr	r2, [pc, #172]	; (8006ad8 <HAL_DMA_IRQHandler+0x694>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d045      	beq.n	8006abc <HAL_DMA_IRQHandler+0x678>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a29      	ldr	r2, [pc, #164]	; (8006adc <HAL_DMA_IRQHandler+0x698>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d040      	beq.n	8006abc <HAL_DMA_IRQHandler+0x678>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a28      	ldr	r2, [pc, #160]	; (8006ae0 <HAL_DMA_IRQHandler+0x69c>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d03b      	beq.n	8006abc <HAL_DMA_IRQHandler+0x678>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a26      	ldr	r2, [pc, #152]	; (8006ae4 <HAL_DMA_IRQHandler+0x6a0>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d036      	beq.n	8006abc <HAL_DMA_IRQHandler+0x678>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a25      	ldr	r2, [pc, #148]	; (8006ae8 <HAL_DMA_IRQHandler+0x6a4>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d031      	beq.n	8006abc <HAL_DMA_IRQHandler+0x678>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a23      	ldr	r2, [pc, #140]	; (8006aec <HAL_DMA_IRQHandler+0x6a8>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d02c      	beq.n	8006abc <HAL_DMA_IRQHandler+0x678>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a22      	ldr	r2, [pc, #136]	; (8006af0 <HAL_DMA_IRQHandler+0x6ac>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d027      	beq.n	8006abc <HAL_DMA_IRQHandler+0x678>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a20      	ldr	r2, [pc, #128]	; (8006af4 <HAL_DMA_IRQHandler+0x6b0>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d022      	beq.n	8006abc <HAL_DMA_IRQHandler+0x678>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a1f      	ldr	r2, [pc, #124]	; (8006af8 <HAL_DMA_IRQHandler+0x6b4>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d01d      	beq.n	8006abc <HAL_DMA_IRQHandler+0x678>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a1d      	ldr	r2, [pc, #116]	; (8006afc <HAL_DMA_IRQHandler+0x6b8>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d018      	beq.n	8006abc <HAL_DMA_IRQHandler+0x678>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a1c      	ldr	r2, [pc, #112]	; (8006b00 <HAL_DMA_IRQHandler+0x6bc>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d013      	beq.n	8006abc <HAL_DMA_IRQHandler+0x678>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a1a      	ldr	r2, [pc, #104]	; (8006b04 <HAL_DMA_IRQHandler+0x6c0>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d00e      	beq.n	8006abc <HAL_DMA_IRQHandler+0x678>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a19      	ldr	r2, [pc, #100]	; (8006b08 <HAL_DMA_IRQHandler+0x6c4>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d009      	beq.n	8006abc <HAL_DMA_IRQHandler+0x678>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a17      	ldr	r2, [pc, #92]	; (8006b0c <HAL_DMA_IRQHandler+0x6c8>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d004      	beq.n	8006abc <HAL_DMA_IRQHandler+0x678>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a16      	ldr	r2, [pc, #88]	; (8006b10 <HAL_DMA_IRQHandler+0x6cc>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d12b      	bne.n	8006b14 <HAL_DMA_IRQHandler+0x6d0>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0310 	and.w	r3, r3, #16
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	bf14      	ite	ne
 8006aca:	2301      	movne	r3, #1
 8006acc:	2300      	moveq	r3, #0
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	e02a      	b.n	8006b28 <HAL_DMA_IRQHandler+0x6e4>
 8006ad2:	bf00      	nop
 8006ad4:	40020010 	.word	0x40020010
 8006ad8:	40020028 	.word	0x40020028
 8006adc:	40020040 	.word	0x40020040
 8006ae0:	40020058 	.word	0x40020058
 8006ae4:	40020070 	.word	0x40020070
 8006ae8:	40020088 	.word	0x40020088
 8006aec:	400200a0 	.word	0x400200a0
 8006af0:	400200b8 	.word	0x400200b8
 8006af4:	40020410 	.word	0x40020410
 8006af8:	40020428 	.word	0x40020428
 8006afc:	40020440 	.word	0x40020440
 8006b00:	40020458 	.word	0x40020458
 8006b04:	40020470 	.word	0x40020470
 8006b08:	40020488 	.word	0x40020488
 8006b0c:	400204a0 	.word	0x400204a0
 8006b10:	400204b8 	.word	0x400204b8
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0302 	and.w	r3, r3, #2
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	bf14      	ite	ne
 8006b22:	2301      	movne	r3, #1
 8006b24:	2300      	moveq	r3, #0
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 8087 	beq.w	8006c3c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b32:	f003 031f 	and.w	r3, r3, #31
 8006b36:	2220      	movs	r2, #32
 8006b38:	409a      	lsls	r2, r3
 8006b3a:	6a3b      	ldr	r3, [r7, #32]
 8006b3c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b04      	cmp	r3, #4
 8006b48:	d139      	bne.n	8006bbe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f022 0216 	bic.w	r2, r2, #22
 8006b58:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	695a      	ldr	r2, [r3, #20]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b68:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d103      	bne.n	8006b7a <HAL_DMA_IRQHandler+0x736>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d007      	beq.n	8006b8a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f022 0208 	bic.w	r2, r2, #8
 8006b88:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b8e:	f003 031f 	and.w	r3, r3, #31
 8006b92:	223f      	movs	r2, #63	; 0x3f
 8006b94:	409a      	lsls	r2, r3
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	f000 834a 	beq.w	8007248 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	4798      	blx	r3
          }
          return;
 8006bbc:	e344      	b.n	8007248 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d018      	beq.n	8006bfe <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d108      	bne.n	8006bec <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d02c      	beq.n	8006c3c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	4798      	blx	r3
 8006bea:	e027      	b.n	8006c3c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d023      	beq.n	8006c3c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	4798      	blx	r3
 8006bfc:	e01e      	b.n	8006c3c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d10f      	bne.n	8006c2c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f022 0210 	bic.w	r2, r2, #16
 8006c1a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d003      	beq.n	8006c3c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f000 8306 	beq.w	8007252 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c4a:	f003 0301 	and.w	r3, r3, #1
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f000 8088 	beq.w	8006d64 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2204      	movs	r2, #4
 8006c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a7a      	ldr	r2, [pc, #488]	; (8006e4c <HAL_DMA_IRQHandler+0xa08>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d04a      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x8b8>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a79      	ldr	r2, [pc, #484]	; (8006e50 <HAL_DMA_IRQHandler+0xa0c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d045      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x8b8>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a77      	ldr	r2, [pc, #476]	; (8006e54 <HAL_DMA_IRQHandler+0xa10>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d040      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x8b8>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a76      	ldr	r2, [pc, #472]	; (8006e58 <HAL_DMA_IRQHandler+0xa14>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d03b      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x8b8>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a74      	ldr	r2, [pc, #464]	; (8006e5c <HAL_DMA_IRQHandler+0xa18>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d036      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x8b8>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a73      	ldr	r2, [pc, #460]	; (8006e60 <HAL_DMA_IRQHandler+0xa1c>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d031      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x8b8>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a71      	ldr	r2, [pc, #452]	; (8006e64 <HAL_DMA_IRQHandler+0xa20>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d02c      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x8b8>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a70      	ldr	r2, [pc, #448]	; (8006e68 <HAL_DMA_IRQHandler+0xa24>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d027      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x8b8>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a6e      	ldr	r2, [pc, #440]	; (8006e6c <HAL_DMA_IRQHandler+0xa28>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d022      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x8b8>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a6d      	ldr	r2, [pc, #436]	; (8006e70 <HAL_DMA_IRQHandler+0xa2c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d01d      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x8b8>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a6b      	ldr	r2, [pc, #428]	; (8006e74 <HAL_DMA_IRQHandler+0xa30>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d018      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x8b8>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a6a      	ldr	r2, [pc, #424]	; (8006e78 <HAL_DMA_IRQHandler+0xa34>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d013      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x8b8>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a68      	ldr	r2, [pc, #416]	; (8006e7c <HAL_DMA_IRQHandler+0xa38>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d00e      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x8b8>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a67      	ldr	r2, [pc, #412]	; (8006e80 <HAL_DMA_IRQHandler+0xa3c>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d009      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x8b8>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a65      	ldr	r2, [pc, #404]	; (8006e84 <HAL_DMA_IRQHandler+0xa40>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d004      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x8b8>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a64      	ldr	r2, [pc, #400]	; (8006e88 <HAL_DMA_IRQHandler+0xa44>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d108      	bne.n	8006d0e <HAL_DMA_IRQHandler+0x8ca>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f022 0201 	bic.w	r2, r2, #1
 8006d0a:	601a      	str	r2, [r3, #0]
 8006d0c:	e007      	b.n	8006d1e <HAL_DMA_IRQHandler+0x8da>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f022 0201 	bic.w	r2, r2, #1
 8006d1c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	3301      	adds	r3, #1
 8006d22:	60fb      	str	r3, [r7, #12]
 8006d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d307      	bcc.n	8006d3a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1f2      	bne.n	8006d1e <HAL_DMA_IRQHandler+0x8da>
 8006d38:	e000      	b.n	8006d3c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006d3a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d004      	beq.n	8006d54 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2203      	movs	r2, #3
 8006d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006d52:	e003      	b.n	8006d5c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 8272 	beq.w	8007252 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	4798      	blx	r3
 8006d76:	e26c      	b.n	8007252 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a43      	ldr	r2, [pc, #268]	; (8006e8c <HAL_DMA_IRQHandler+0xa48>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d022      	beq.n	8006dc8 <HAL_DMA_IRQHandler+0x984>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a42      	ldr	r2, [pc, #264]	; (8006e90 <HAL_DMA_IRQHandler+0xa4c>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d01d      	beq.n	8006dc8 <HAL_DMA_IRQHandler+0x984>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a40      	ldr	r2, [pc, #256]	; (8006e94 <HAL_DMA_IRQHandler+0xa50>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d018      	beq.n	8006dc8 <HAL_DMA_IRQHandler+0x984>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a3f      	ldr	r2, [pc, #252]	; (8006e98 <HAL_DMA_IRQHandler+0xa54>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d013      	beq.n	8006dc8 <HAL_DMA_IRQHandler+0x984>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a3d      	ldr	r2, [pc, #244]	; (8006e9c <HAL_DMA_IRQHandler+0xa58>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d00e      	beq.n	8006dc8 <HAL_DMA_IRQHandler+0x984>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a3c      	ldr	r2, [pc, #240]	; (8006ea0 <HAL_DMA_IRQHandler+0xa5c>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d009      	beq.n	8006dc8 <HAL_DMA_IRQHandler+0x984>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a3a      	ldr	r2, [pc, #232]	; (8006ea4 <HAL_DMA_IRQHandler+0xa60>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d004      	beq.n	8006dc8 <HAL_DMA_IRQHandler+0x984>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a39      	ldr	r2, [pc, #228]	; (8006ea8 <HAL_DMA_IRQHandler+0xa64>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d101      	bne.n	8006dcc <HAL_DMA_IRQHandler+0x988>
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e000      	b.n	8006dce <HAL_DMA_IRQHandler+0x98a>
 8006dcc:	2300      	movs	r3, #0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f000 823f 	beq.w	8007252 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006de0:	f003 031f 	and.w	r3, r3, #31
 8006de4:	2204      	movs	r2, #4
 8006de6:	409a      	lsls	r2, r3
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	4013      	ands	r3, r2
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f000 80cd 	beq.w	8006f8c <HAL_DMA_IRQHandler+0xb48>
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	f003 0304 	and.w	r3, r3, #4
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f000 80c7 	beq.w	8006f8c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e02:	f003 031f 	and.w	r3, r3, #31
 8006e06:	2204      	movs	r2, #4
 8006e08:	409a      	lsls	r2, r3
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d049      	beq.n	8006eac <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d109      	bne.n	8006e36 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f000 8210 	beq.w	800724c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e34:	e20a      	b.n	800724c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f000 8206 	beq.w	800724c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e48:	e200      	b.n	800724c <HAL_DMA_IRQHandler+0xe08>
 8006e4a:	bf00      	nop
 8006e4c:	40020010 	.word	0x40020010
 8006e50:	40020028 	.word	0x40020028
 8006e54:	40020040 	.word	0x40020040
 8006e58:	40020058 	.word	0x40020058
 8006e5c:	40020070 	.word	0x40020070
 8006e60:	40020088 	.word	0x40020088
 8006e64:	400200a0 	.word	0x400200a0
 8006e68:	400200b8 	.word	0x400200b8
 8006e6c:	40020410 	.word	0x40020410
 8006e70:	40020428 	.word	0x40020428
 8006e74:	40020440 	.word	0x40020440
 8006e78:	40020458 	.word	0x40020458
 8006e7c:	40020470 	.word	0x40020470
 8006e80:	40020488 	.word	0x40020488
 8006e84:	400204a0 	.word	0x400204a0
 8006e88:	400204b8 	.word	0x400204b8
 8006e8c:	58025408 	.word	0x58025408
 8006e90:	5802541c 	.word	0x5802541c
 8006e94:	58025430 	.word	0x58025430
 8006e98:	58025444 	.word	0x58025444
 8006e9c:	58025458 	.word	0x58025458
 8006ea0:	5802546c 	.word	0x5802546c
 8006ea4:	58025480 	.word	0x58025480
 8006ea8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	f003 0320 	and.w	r3, r3, #32
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d160      	bne.n	8006f78 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a7f      	ldr	r2, [pc, #508]	; (80070b8 <HAL_DMA_IRQHandler+0xc74>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d04a      	beq.n	8006f56 <HAL_DMA_IRQHandler+0xb12>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a7d      	ldr	r2, [pc, #500]	; (80070bc <HAL_DMA_IRQHandler+0xc78>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d045      	beq.n	8006f56 <HAL_DMA_IRQHandler+0xb12>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a7c      	ldr	r2, [pc, #496]	; (80070c0 <HAL_DMA_IRQHandler+0xc7c>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d040      	beq.n	8006f56 <HAL_DMA_IRQHandler+0xb12>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a7a      	ldr	r2, [pc, #488]	; (80070c4 <HAL_DMA_IRQHandler+0xc80>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d03b      	beq.n	8006f56 <HAL_DMA_IRQHandler+0xb12>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a79      	ldr	r2, [pc, #484]	; (80070c8 <HAL_DMA_IRQHandler+0xc84>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d036      	beq.n	8006f56 <HAL_DMA_IRQHandler+0xb12>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a77      	ldr	r2, [pc, #476]	; (80070cc <HAL_DMA_IRQHandler+0xc88>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d031      	beq.n	8006f56 <HAL_DMA_IRQHandler+0xb12>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a76      	ldr	r2, [pc, #472]	; (80070d0 <HAL_DMA_IRQHandler+0xc8c>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d02c      	beq.n	8006f56 <HAL_DMA_IRQHandler+0xb12>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a74      	ldr	r2, [pc, #464]	; (80070d4 <HAL_DMA_IRQHandler+0xc90>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d027      	beq.n	8006f56 <HAL_DMA_IRQHandler+0xb12>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a73      	ldr	r2, [pc, #460]	; (80070d8 <HAL_DMA_IRQHandler+0xc94>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d022      	beq.n	8006f56 <HAL_DMA_IRQHandler+0xb12>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a71      	ldr	r2, [pc, #452]	; (80070dc <HAL_DMA_IRQHandler+0xc98>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d01d      	beq.n	8006f56 <HAL_DMA_IRQHandler+0xb12>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a70      	ldr	r2, [pc, #448]	; (80070e0 <HAL_DMA_IRQHandler+0xc9c>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d018      	beq.n	8006f56 <HAL_DMA_IRQHandler+0xb12>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a6e      	ldr	r2, [pc, #440]	; (80070e4 <HAL_DMA_IRQHandler+0xca0>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d013      	beq.n	8006f56 <HAL_DMA_IRQHandler+0xb12>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a6d      	ldr	r2, [pc, #436]	; (80070e8 <HAL_DMA_IRQHandler+0xca4>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d00e      	beq.n	8006f56 <HAL_DMA_IRQHandler+0xb12>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a6b      	ldr	r2, [pc, #428]	; (80070ec <HAL_DMA_IRQHandler+0xca8>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d009      	beq.n	8006f56 <HAL_DMA_IRQHandler+0xb12>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a6a      	ldr	r2, [pc, #424]	; (80070f0 <HAL_DMA_IRQHandler+0xcac>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d004      	beq.n	8006f56 <HAL_DMA_IRQHandler+0xb12>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a68      	ldr	r2, [pc, #416]	; (80070f4 <HAL_DMA_IRQHandler+0xcb0>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d108      	bne.n	8006f68 <HAL_DMA_IRQHandler+0xb24>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f022 0208 	bic.w	r2, r2, #8
 8006f64:	601a      	str	r2, [r3, #0]
 8006f66:	e007      	b.n	8006f78 <HAL_DMA_IRQHandler+0xb34>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f022 0204 	bic.w	r2, r2, #4
 8006f76:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	f000 8165 	beq.w	800724c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f8a:	e15f      	b.n	800724c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f90:	f003 031f 	and.w	r3, r3, #31
 8006f94:	2202      	movs	r2, #2
 8006f96:	409a      	lsls	r2, r3
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f000 80c5 	beq.w	800712c <HAL_DMA_IRQHandler+0xce8>
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	f003 0302 	and.w	r3, r3, #2
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 80bf 	beq.w	800712c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fb2:	f003 031f 	and.w	r3, r3, #31
 8006fb6:	2202      	movs	r2, #2
 8006fb8:	409a      	lsls	r2, r3
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d018      	beq.n	8006ffa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d109      	bne.n	8006fe6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	f000 813a 	beq.w	8007250 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fe4:	e134      	b.n	8007250 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f000 8130 	beq.w	8007250 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ff8:	e12a      	b.n	8007250 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	f003 0320 	and.w	r3, r3, #32
 8007000:	2b00      	cmp	r3, #0
 8007002:	f040 8089 	bne.w	8007118 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a2b      	ldr	r2, [pc, #172]	; (80070b8 <HAL_DMA_IRQHandler+0xc74>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d04a      	beq.n	80070a6 <HAL_DMA_IRQHandler+0xc62>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a29      	ldr	r2, [pc, #164]	; (80070bc <HAL_DMA_IRQHandler+0xc78>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d045      	beq.n	80070a6 <HAL_DMA_IRQHandler+0xc62>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a28      	ldr	r2, [pc, #160]	; (80070c0 <HAL_DMA_IRQHandler+0xc7c>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d040      	beq.n	80070a6 <HAL_DMA_IRQHandler+0xc62>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a26      	ldr	r2, [pc, #152]	; (80070c4 <HAL_DMA_IRQHandler+0xc80>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d03b      	beq.n	80070a6 <HAL_DMA_IRQHandler+0xc62>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a25      	ldr	r2, [pc, #148]	; (80070c8 <HAL_DMA_IRQHandler+0xc84>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d036      	beq.n	80070a6 <HAL_DMA_IRQHandler+0xc62>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a23      	ldr	r2, [pc, #140]	; (80070cc <HAL_DMA_IRQHandler+0xc88>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d031      	beq.n	80070a6 <HAL_DMA_IRQHandler+0xc62>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a22      	ldr	r2, [pc, #136]	; (80070d0 <HAL_DMA_IRQHandler+0xc8c>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d02c      	beq.n	80070a6 <HAL_DMA_IRQHandler+0xc62>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a20      	ldr	r2, [pc, #128]	; (80070d4 <HAL_DMA_IRQHandler+0xc90>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d027      	beq.n	80070a6 <HAL_DMA_IRQHandler+0xc62>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a1f      	ldr	r2, [pc, #124]	; (80070d8 <HAL_DMA_IRQHandler+0xc94>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d022      	beq.n	80070a6 <HAL_DMA_IRQHandler+0xc62>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a1d      	ldr	r2, [pc, #116]	; (80070dc <HAL_DMA_IRQHandler+0xc98>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d01d      	beq.n	80070a6 <HAL_DMA_IRQHandler+0xc62>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a1c      	ldr	r2, [pc, #112]	; (80070e0 <HAL_DMA_IRQHandler+0xc9c>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d018      	beq.n	80070a6 <HAL_DMA_IRQHandler+0xc62>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a1a      	ldr	r2, [pc, #104]	; (80070e4 <HAL_DMA_IRQHandler+0xca0>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d013      	beq.n	80070a6 <HAL_DMA_IRQHandler+0xc62>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a19      	ldr	r2, [pc, #100]	; (80070e8 <HAL_DMA_IRQHandler+0xca4>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d00e      	beq.n	80070a6 <HAL_DMA_IRQHandler+0xc62>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a17      	ldr	r2, [pc, #92]	; (80070ec <HAL_DMA_IRQHandler+0xca8>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d009      	beq.n	80070a6 <HAL_DMA_IRQHandler+0xc62>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a16      	ldr	r2, [pc, #88]	; (80070f0 <HAL_DMA_IRQHandler+0xcac>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d004      	beq.n	80070a6 <HAL_DMA_IRQHandler+0xc62>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a14      	ldr	r2, [pc, #80]	; (80070f4 <HAL_DMA_IRQHandler+0xcb0>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d128      	bne.n	80070f8 <HAL_DMA_IRQHandler+0xcb4>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f022 0214 	bic.w	r2, r2, #20
 80070b4:	601a      	str	r2, [r3, #0]
 80070b6:	e027      	b.n	8007108 <HAL_DMA_IRQHandler+0xcc4>
 80070b8:	40020010 	.word	0x40020010
 80070bc:	40020028 	.word	0x40020028
 80070c0:	40020040 	.word	0x40020040
 80070c4:	40020058 	.word	0x40020058
 80070c8:	40020070 	.word	0x40020070
 80070cc:	40020088 	.word	0x40020088
 80070d0:	400200a0 	.word	0x400200a0
 80070d4:	400200b8 	.word	0x400200b8
 80070d8:	40020410 	.word	0x40020410
 80070dc:	40020428 	.word	0x40020428
 80070e0:	40020440 	.word	0x40020440
 80070e4:	40020458 	.word	0x40020458
 80070e8:	40020470 	.word	0x40020470
 80070ec:	40020488 	.word	0x40020488
 80070f0:	400204a0 	.word	0x400204a0
 80070f4:	400204b8 	.word	0x400204b8
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f022 020a 	bic.w	r2, r2, #10
 8007106:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800711c:	2b00      	cmp	r3, #0
 800711e:	f000 8097 	beq.w	8007250 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800712a:	e091      	b.n	8007250 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007130:	f003 031f 	and.w	r3, r3, #31
 8007134:	2208      	movs	r2, #8
 8007136:	409a      	lsls	r2, r3
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	4013      	ands	r3, r2
 800713c:	2b00      	cmp	r3, #0
 800713e:	f000 8088 	beq.w	8007252 <HAL_DMA_IRQHandler+0xe0e>
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	f003 0308 	and.w	r3, r3, #8
 8007148:	2b00      	cmp	r3, #0
 800714a:	f000 8082 	beq.w	8007252 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a41      	ldr	r2, [pc, #260]	; (8007258 <HAL_DMA_IRQHandler+0xe14>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d04a      	beq.n	80071ee <HAL_DMA_IRQHandler+0xdaa>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a3f      	ldr	r2, [pc, #252]	; (800725c <HAL_DMA_IRQHandler+0xe18>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d045      	beq.n	80071ee <HAL_DMA_IRQHandler+0xdaa>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a3e      	ldr	r2, [pc, #248]	; (8007260 <HAL_DMA_IRQHandler+0xe1c>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d040      	beq.n	80071ee <HAL_DMA_IRQHandler+0xdaa>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a3c      	ldr	r2, [pc, #240]	; (8007264 <HAL_DMA_IRQHandler+0xe20>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d03b      	beq.n	80071ee <HAL_DMA_IRQHandler+0xdaa>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a3b      	ldr	r2, [pc, #236]	; (8007268 <HAL_DMA_IRQHandler+0xe24>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d036      	beq.n	80071ee <HAL_DMA_IRQHandler+0xdaa>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a39      	ldr	r2, [pc, #228]	; (800726c <HAL_DMA_IRQHandler+0xe28>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d031      	beq.n	80071ee <HAL_DMA_IRQHandler+0xdaa>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a38      	ldr	r2, [pc, #224]	; (8007270 <HAL_DMA_IRQHandler+0xe2c>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d02c      	beq.n	80071ee <HAL_DMA_IRQHandler+0xdaa>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a36      	ldr	r2, [pc, #216]	; (8007274 <HAL_DMA_IRQHandler+0xe30>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d027      	beq.n	80071ee <HAL_DMA_IRQHandler+0xdaa>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a35      	ldr	r2, [pc, #212]	; (8007278 <HAL_DMA_IRQHandler+0xe34>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d022      	beq.n	80071ee <HAL_DMA_IRQHandler+0xdaa>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a33      	ldr	r2, [pc, #204]	; (800727c <HAL_DMA_IRQHandler+0xe38>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d01d      	beq.n	80071ee <HAL_DMA_IRQHandler+0xdaa>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a32      	ldr	r2, [pc, #200]	; (8007280 <HAL_DMA_IRQHandler+0xe3c>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d018      	beq.n	80071ee <HAL_DMA_IRQHandler+0xdaa>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a30      	ldr	r2, [pc, #192]	; (8007284 <HAL_DMA_IRQHandler+0xe40>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d013      	beq.n	80071ee <HAL_DMA_IRQHandler+0xdaa>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a2f      	ldr	r2, [pc, #188]	; (8007288 <HAL_DMA_IRQHandler+0xe44>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d00e      	beq.n	80071ee <HAL_DMA_IRQHandler+0xdaa>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a2d      	ldr	r2, [pc, #180]	; (800728c <HAL_DMA_IRQHandler+0xe48>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d009      	beq.n	80071ee <HAL_DMA_IRQHandler+0xdaa>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a2c      	ldr	r2, [pc, #176]	; (8007290 <HAL_DMA_IRQHandler+0xe4c>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d004      	beq.n	80071ee <HAL_DMA_IRQHandler+0xdaa>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a2a      	ldr	r2, [pc, #168]	; (8007294 <HAL_DMA_IRQHandler+0xe50>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d108      	bne.n	8007200 <HAL_DMA_IRQHandler+0xdbc>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f022 021c 	bic.w	r2, r2, #28
 80071fc:	601a      	str	r2, [r3, #0]
 80071fe:	e007      	b.n	8007210 <HAL_DMA_IRQHandler+0xdcc>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f022 020e 	bic.w	r2, r2, #14
 800720e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007214:	f003 031f 	and.w	r3, r3, #31
 8007218:	2201      	movs	r2, #1
 800721a:	409a      	lsls	r2, r3
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2201      	movs	r2, #1
 800722a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800723a:	2b00      	cmp	r3, #0
 800723c:	d009      	beq.n	8007252 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	4798      	blx	r3
 8007246:	e004      	b.n	8007252 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007248:	bf00      	nop
 800724a:	e002      	b.n	8007252 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800724c:	bf00      	nop
 800724e:	e000      	b.n	8007252 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007250:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007252:	3728      	adds	r7, #40	; 0x28
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	40020010 	.word	0x40020010
 800725c:	40020028 	.word	0x40020028
 8007260:	40020040 	.word	0x40020040
 8007264:	40020058 	.word	0x40020058
 8007268:	40020070 	.word	0x40020070
 800726c:	40020088 	.word	0x40020088
 8007270:	400200a0 	.word	0x400200a0
 8007274:	400200b8 	.word	0x400200b8
 8007278:	40020410 	.word	0x40020410
 800727c:	40020428 	.word	0x40020428
 8007280:	40020440 	.word	0x40020440
 8007284:	40020458 	.word	0x40020458
 8007288:	40020470 	.word	0x40020470
 800728c:	40020488 	.word	0x40020488
 8007290:	400204a0 	.word	0x400204a0
 8007294:	400204b8 	.word	0x400204b8

08007298 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007298:	b480      	push	{r7}
 800729a:	b087      	sub	sp, #28
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
 80072a4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072aa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072b0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a7f      	ldr	r2, [pc, #508]	; (80074b4 <DMA_SetConfig+0x21c>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d072      	beq.n	80073a2 <DMA_SetConfig+0x10a>
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a7d      	ldr	r2, [pc, #500]	; (80074b8 <DMA_SetConfig+0x220>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d06d      	beq.n	80073a2 <DMA_SetConfig+0x10a>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a7c      	ldr	r2, [pc, #496]	; (80074bc <DMA_SetConfig+0x224>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d068      	beq.n	80073a2 <DMA_SetConfig+0x10a>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a7a      	ldr	r2, [pc, #488]	; (80074c0 <DMA_SetConfig+0x228>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d063      	beq.n	80073a2 <DMA_SetConfig+0x10a>
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a79      	ldr	r2, [pc, #484]	; (80074c4 <DMA_SetConfig+0x22c>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d05e      	beq.n	80073a2 <DMA_SetConfig+0x10a>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a77      	ldr	r2, [pc, #476]	; (80074c8 <DMA_SetConfig+0x230>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d059      	beq.n	80073a2 <DMA_SetConfig+0x10a>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a76      	ldr	r2, [pc, #472]	; (80074cc <DMA_SetConfig+0x234>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d054      	beq.n	80073a2 <DMA_SetConfig+0x10a>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a74      	ldr	r2, [pc, #464]	; (80074d0 <DMA_SetConfig+0x238>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d04f      	beq.n	80073a2 <DMA_SetConfig+0x10a>
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a73      	ldr	r2, [pc, #460]	; (80074d4 <DMA_SetConfig+0x23c>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d04a      	beq.n	80073a2 <DMA_SetConfig+0x10a>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a71      	ldr	r2, [pc, #452]	; (80074d8 <DMA_SetConfig+0x240>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d045      	beq.n	80073a2 <DMA_SetConfig+0x10a>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a70      	ldr	r2, [pc, #448]	; (80074dc <DMA_SetConfig+0x244>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d040      	beq.n	80073a2 <DMA_SetConfig+0x10a>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a6e      	ldr	r2, [pc, #440]	; (80074e0 <DMA_SetConfig+0x248>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d03b      	beq.n	80073a2 <DMA_SetConfig+0x10a>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a6d      	ldr	r2, [pc, #436]	; (80074e4 <DMA_SetConfig+0x24c>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d036      	beq.n	80073a2 <DMA_SetConfig+0x10a>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a6b      	ldr	r2, [pc, #428]	; (80074e8 <DMA_SetConfig+0x250>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d031      	beq.n	80073a2 <DMA_SetConfig+0x10a>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a6a      	ldr	r2, [pc, #424]	; (80074ec <DMA_SetConfig+0x254>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d02c      	beq.n	80073a2 <DMA_SetConfig+0x10a>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a68      	ldr	r2, [pc, #416]	; (80074f0 <DMA_SetConfig+0x258>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d027      	beq.n	80073a2 <DMA_SetConfig+0x10a>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a67      	ldr	r2, [pc, #412]	; (80074f4 <DMA_SetConfig+0x25c>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d022      	beq.n	80073a2 <DMA_SetConfig+0x10a>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a65      	ldr	r2, [pc, #404]	; (80074f8 <DMA_SetConfig+0x260>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d01d      	beq.n	80073a2 <DMA_SetConfig+0x10a>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a64      	ldr	r2, [pc, #400]	; (80074fc <DMA_SetConfig+0x264>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d018      	beq.n	80073a2 <DMA_SetConfig+0x10a>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a62      	ldr	r2, [pc, #392]	; (8007500 <DMA_SetConfig+0x268>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d013      	beq.n	80073a2 <DMA_SetConfig+0x10a>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a61      	ldr	r2, [pc, #388]	; (8007504 <DMA_SetConfig+0x26c>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d00e      	beq.n	80073a2 <DMA_SetConfig+0x10a>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a5f      	ldr	r2, [pc, #380]	; (8007508 <DMA_SetConfig+0x270>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d009      	beq.n	80073a2 <DMA_SetConfig+0x10a>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a5e      	ldr	r2, [pc, #376]	; (800750c <DMA_SetConfig+0x274>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d004      	beq.n	80073a2 <DMA_SetConfig+0x10a>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a5c      	ldr	r2, [pc, #368]	; (8007510 <DMA_SetConfig+0x278>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d101      	bne.n	80073a6 <DMA_SetConfig+0x10e>
 80073a2:	2301      	movs	r3, #1
 80073a4:	e000      	b.n	80073a8 <DMA_SetConfig+0x110>
 80073a6:	2300      	movs	r3, #0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00d      	beq.n	80073c8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80073b4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d004      	beq.n	80073c8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c2:	68fa      	ldr	r2, [r7, #12]
 80073c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80073c6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a39      	ldr	r2, [pc, #228]	; (80074b4 <DMA_SetConfig+0x21c>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d04a      	beq.n	8007468 <DMA_SetConfig+0x1d0>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a38      	ldr	r2, [pc, #224]	; (80074b8 <DMA_SetConfig+0x220>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d045      	beq.n	8007468 <DMA_SetConfig+0x1d0>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a36      	ldr	r2, [pc, #216]	; (80074bc <DMA_SetConfig+0x224>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d040      	beq.n	8007468 <DMA_SetConfig+0x1d0>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a35      	ldr	r2, [pc, #212]	; (80074c0 <DMA_SetConfig+0x228>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d03b      	beq.n	8007468 <DMA_SetConfig+0x1d0>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a33      	ldr	r2, [pc, #204]	; (80074c4 <DMA_SetConfig+0x22c>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d036      	beq.n	8007468 <DMA_SetConfig+0x1d0>
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a32      	ldr	r2, [pc, #200]	; (80074c8 <DMA_SetConfig+0x230>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d031      	beq.n	8007468 <DMA_SetConfig+0x1d0>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a30      	ldr	r2, [pc, #192]	; (80074cc <DMA_SetConfig+0x234>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d02c      	beq.n	8007468 <DMA_SetConfig+0x1d0>
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a2f      	ldr	r2, [pc, #188]	; (80074d0 <DMA_SetConfig+0x238>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d027      	beq.n	8007468 <DMA_SetConfig+0x1d0>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a2d      	ldr	r2, [pc, #180]	; (80074d4 <DMA_SetConfig+0x23c>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d022      	beq.n	8007468 <DMA_SetConfig+0x1d0>
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a2c      	ldr	r2, [pc, #176]	; (80074d8 <DMA_SetConfig+0x240>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d01d      	beq.n	8007468 <DMA_SetConfig+0x1d0>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a2a      	ldr	r2, [pc, #168]	; (80074dc <DMA_SetConfig+0x244>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d018      	beq.n	8007468 <DMA_SetConfig+0x1d0>
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a29      	ldr	r2, [pc, #164]	; (80074e0 <DMA_SetConfig+0x248>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d013      	beq.n	8007468 <DMA_SetConfig+0x1d0>
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a27      	ldr	r2, [pc, #156]	; (80074e4 <DMA_SetConfig+0x24c>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d00e      	beq.n	8007468 <DMA_SetConfig+0x1d0>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a26      	ldr	r2, [pc, #152]	; (80074e8 <DMA_SetConfig+0x250>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d009      	beq.n	8007468 <DMA_SetConfig+0x1d0>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a24      	ldr	r2, [pc, #144]	; (80074ec <DMA_SetConfig+0x254>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d004      	beq.n	8007468 <DMA_SetConfig+0x1d0>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a23      	ldr	r2, [pc, #140]	; (80074f0 <DMA_SetConfig+0x258>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d101      	bne.n	800746c <DMA_SetConfig+0x1d4>
 8007468:	2301      	movs	r3, #1
 800746a:	e000      	b.n	800746e <DMA_SetConfig+0x1d6>
 800746c:	2300      	movs	r3, #0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d059      	beq.n	8007526 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007476:	f003 031f 	and.w	r3, r3, #31
 800747a:	223f      	movs	r2, #63	; 0x3f
 800747c:	409a      	lsls	r2, r3
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007490:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	683a      	ldr	r2, [r7, #0]
 8007498:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	2b40      	cmp	r3, #64	; 0x40
 80074a0:	d138      	bne.n	8007514 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68ba      	ldr	r2, [r7, #8]
 80074b0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80074b2:	e086      	b.n	80075c2 <DMA_SetConfig+0x32a>
 80074b4:	40020010 	.word	0x40020010
 80074b8:	40020028 	.word	0x40020028
 80074bc:	40020040 	.word	0x40020040
 80074c0:	40020058 	.word	0x40020058
 80074c4:	40020070 	.word	0x40020070
 80074c8:	40020088 	.word	0x40020088
 80074cc:	400200a0 	.word	0x400200a0
 80074d0:	400200b8 	.word	0x400200b8
 80074d4:	40020410 	.word	0x40020410
 80074d8:	40020428 	.word	0x40020428
 80074dc:	40020440 	.word	0x40020440
 80074e0:	40020458 	.word	0x40020458
 80074e4:	40020470 	.word	0x40020470
 80074e8:	40020488 	.word	0x40020488
 80074ec:	400204a0 	.word	0x400204a0
 80074f0:	400204b8 	.word	0x400204b8
 80074f4:	58025408 	.word	0x58025408
 80074f8:	5802541c 	.word	0x5802541c
 80074fc:	58025430 	.word	0x58025430
 8007500:	58025444 	.word	0x58025444
 8007504:	58025458 	.word	0x58025458
 8007508:	5802546c 	.word	0x5802546c
 800750c:	58025480 	.word	0x58025480
 8007510:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	60da      	str	r2, [r3, #12]
}
 8007524:	e04d      	b.n	80075c2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a29      	ldr	r2, [pc, #164]	; (80075d0 <DMA_SetConfig+0x338>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d022      	beq.n	8007576 <DMA_SetConfig+0x2de>
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a27      	ldr	r2, [pc, #156]	; (80075d4 <DMA_SetConfig+0x33c>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d01d      	beq.n	8007576 <DMA_SetConfig+0x2de>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a26      	ldr	r2, [pc, #152]	; (80075d8 <DMA_SetConfig+0x340>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d018      	beq.n	8007576 <DMA_SetConfig+0x2de>
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a24      	ldr	r2, [pc, #144]	; (80075dc <DMA_SetConfig+0x344>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d013      	beq.n	8007576 <DMA_SetConfig+0x2de>
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a23      	ldr	r2, [pc, #140]	; (80075e0 <DMA_SetConfig+0x348>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d00e      	beq.n	8007576 <DMA_SetConfig+0x2de>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a21      	ldr	r2, [pc, #132]	; (80075e4 <DMA_SetConfig+0x34c>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d009      	beq.n	8007576 <DMA_SetConfig+0x2de>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a20      	ldr	r2, [pc, #128]	; (80075e8 <DMA_SetConfig+0x350>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d004      	beq.n	8007576 <DMA_SetConfig+0x2de>
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a1e      	ldr	r2, [pc, #120]	; (80075ec <DMA_SetConfig+0x354>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d101      	bne.n	800757a <DMA_SetConfig+0x2e2>
 8007576:	2301      	movs	r3, #1
 8007578:	e000      	b.n	800757c <DMA_SetConfig+0x2e4>
 800757a:	2300      	movs	r3, #0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d020      	beq.n	80075c2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007584:	f003 031f 	and.w	r3, r3, #31
 8007588:	2201      	movs	r2, #1
 800758a:	409a      	lsls	r2, r3
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	683a      	ldr	r2, [r7, #0]
 8007596:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	2b40      	cmp	r3, #64	; 0x40
 800759e:	d108      	bne.n	80075b2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	60da      	str	r2, [r3, #12]
}
 80075b0:	e007      	b.n	80075c2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68ba      	ldr	r2, [r7, #8]
 80075b8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	60da      	str	r2, [r3, #12]
}
 80075c2:	bf00      	nop
 80075c4:	371c      	adds	r7, #28
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	58025408 	.word	0x58025408
 80075d4:	5802541c 	.word	0x5802541c
 80075d8:	58025430 	.word	0x58025430
 80075dc:	58025444 	.word	0x58025444
 80075e0:	58025458 	.word	0x58025458
 80075e4:	5802546c 	.word	0x5802546c
 80075e8:	58025480 	.word	0x58025480
 80075ec:	58025494 	.word	0x58025494

080075f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a42      	ldr	r2, [pc, #264]	; (8007708 <DMA_CalcBaseAndBitshift+0x118>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d04a      	beq.n	8007698 <DMA_CalcBaseAndBitshift+0xa8>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a41      	ldr	r2, [pc, #260]	; (800770c <DMA_CalcBaseAndBitshift+0x11c>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d045      	beq.n	8007698 <DMA_CalcBaseAndBitshift+0xa8>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a3f      	ldr	r2, [pc, #252]	; (8007710 <DMA_CalcBaseAndBitshift+0x120>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d040      	beq.n	8007698 <DMA_CalcBaseAndBitshift+0xa8>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a3e      	ldr	r2, [pc, #248]	; (8007714 <DMA_CalcBaseAndBitshift+0x124>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d03b      	beq.n	8007698 <DMA_CalcBaseAndBitshift+0xa8>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a3c      	ldr	r2, [pc, #240]	; (8007718 <DMA_CalcBaseAndBitshift+0x128>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d036      	beq.n	8007698 <DMA_CalcBaseAndBitshift+0xa8>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a3b      	ldr	r2, [pc, #236]	; (800771c <DMA_CalcBaseAndBitshift+0x12c>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d031      	beq.n	8007698 <DMA_CalcBaseAndBitshift+0xa8>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a39      	ldr	r2, [pc, #228]	; (8007720 <DMA_CalcBaseAndBitshift+0x130>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d02c      	beq.n	8007698 <DMA_CalcBaseAndBitshift+0xa8>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a38      	ldr	r2, [pc, #224]	; (8007724 <DMA_CalcBaseAndBitshift+0x134>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d027      	beq.n	8007698 <DMA_CalcBaseAndBitshift+0xa8>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a36      	ldr	r2, [pc, #216]	; (8007728 <DMA_CalcBaseAndBitshift+0x138>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d022      	beq.n	8007698 <DMA_CalcBaseAndBitshift+0xa8>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a35      	ldr	r2, [pc, #212]	; (800772c <DMA_CalcBaseAndBitshift+0x13c>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d01d      	beq.n	8007698 <DMA_CalcBaseAndBitshift+0xa8>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a33      	ldr	r2, [pc, #204]	; (8007730 <DMA_CalcBaseAndBitshift+0x140>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d018      	beq.n	8007698 <DMA_CalcBaseAndBitshift+0xa8>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a32      	ldr	r2, [pc, #200]	; (8007734 <DMA_CalcBaseAndBitshift+0x144>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d013      	beq.n	8007698 <DMA_CalcBaseAndBitshift+0xa8>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a30      	ldr	r2, [pc, #192]	; (8007738 <DMA_CalcBaseAndBitshift+0x148>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d00e      	beq.n	8007698 <DMA_CalcBaseAndBitshift+0xa8>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a2f      	ldr	r2, [pc, #188]	; (800773c <DMA_CalcBaseAndBitshift+0x14c>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d009      	beq.n	8007698 <DMA_CalcBaseAndBitshift+0xa8>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a2d      	ldr	r2, [pc, #180]	; (8007740 <DMA_CalcBaseAndBitshift+0x150>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d004      	beq.n	8007698 <DMA_CalcBaseAndBitshift+0xa8>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a2c      	ldr	r2, [pc, #176]	; (8007744 <DMA_CalcBaseAndBitshift+0x154>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d101      	bne.n	800769c <DMA_CalcBaseAndBitshift+0xac>
 8007698:	2301      	movs	r3, #1
 800769a:	e000      	b.n	800769e <DMA_CalcBaseAndBitshift+0xae>
 800769c:	2300      	movs	r3, #0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d024      	beq.n	80076ec <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	3b10      	subs	r3, #16
 80076aa:	4a27      	ldr	r2, [pc, #156]	; (8007748 <DMA_CalcBaseAndBitshift+0x158>)
 80076ac:	fba2 2303 	umull	r2, r3, r2, r3
 80076b0:	091b      	lsrs	r3, r3, #4
 80076b2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f003 0307 	and.w	r3, r3, #7
 80076ba:	4a24      	ldr	r2, [pc, #144]	; (800774c <DMA_CalcBaseAndBitshift+0x15c>)
 80076bc:	5cd3      	ldrb	r3, [r2, r3]
 80076be:	461a      	mov	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2b03      	cmp	r3, #3
 80076c8:	d908      	bls.n	80076dc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	461a      	mov	r2, r3
 80076d0:	4b1f      	ldr	r3, [pc, #124]	; (8007750 <DMA_CalcBaseAndBitshift+0x160>)
 80076d2:	4013      	ands	r3, r2
 80076d4:	1d1a      	adds	r2, r3, #4
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	659a      	str	r2, [r3, #88]	; 0x58
 80076da:	e00d      	b.n	80076f8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	461a      	mov	r2, r3
 80076e2:	4b1b      	ldr	r3, [pc, #108]	; (8007750 <DMA_CalcBaseAndBitshift+0x160>)
 80076e4:	4013      	ands	r3, r2
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	6593      	str	r3, [r2, #88]	; 0x58
 80076ea:	e005      	b.n	80076f8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3714      	adds	r7, #20
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr
 8007708:	40020010 	.word	0x40020010
 800770c:	40020028 	.word	0x40020028
 8007710:	40020040 	.word	0x40020040
 8007714:	40020058 	.word	0x40020058
 8007718:	40020070 	.word	0x40020070
 800771c:	40020088 	.word	0x40020088
 8007720:	400200a0 	.word	0x400200a0
 8007724:	400200b8 	.word	0x400200b8
 8007728:	40020410 	.word	0x40020410
 800772c:	40020428 	.word	0x40020428
 8007730:	40020440 	.word	0x40020440
 8007734:	40020458 	.word	0x40020458
 8007738:	40020470 	.word	0x40020470
 800773c:	40020488 	.word	0x40020488
 8007740:	400204a0 	.word	0x400204a0
 8007744:	400204b8 	.word	0x400204b8
 8007748:	aaaaaaab 	.word	0xaaaaaaab
 800774c:	080131c8 	.word	0x080131c8
 8007750:	fffffc00 	.word	0xfffffc00

08007754 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800775c:	2300      	movs	r3, #0
 800775e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	699b      	ldr	r3, [r3, #24]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d120      	bne.n	80077aa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800776c:	2b03      	cmp	r3, #3
 800776e:	d858      	bhi.n	8007822 <DMA_CheckFifoParam+0xce>
 8007770:	a201      	add	r2, pc, #4	; (adr r2, 8007778 <DMA_CheckFifoParam+0x24>)
 8007772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007776:	bf00      	nop
 8007778:	08007789 	.word	0x08007789
 800777c:	0800779b 	.word	0x0800779b
 8007780:	08007789 	.word	0x08007789
 8007784:	08007823 	.word	0x08007823
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d048      	beq.n	8007826 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007798:	e045      	b.n	8007826 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80077a2:	d142      	bne.n	800782a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80077a8:	e03f      	b.n	800782a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	699b      	ldr	r3, [r3, #24]
 80077ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077b2:	d123      	bne.n	80077fc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b8:	2b03      	cmp	r3, #3
 80077ba:	d838      	bhi.n	800782e <DMA_CheckFifoParam+0xda>
 80077bc:	a201      	add	r2, pc, #4	; (adr r2, 80077c4 <DMA_CheckFifoParam+0x70>)
 80077be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c2:	bf00      	nop
 80077c4:	080077d5 	.word	0x080077d5
 80077c8:	080077db 	.word	0x080077db
 80077cc:	080077d5 	.word	0x080077d5
 80077d0:	080077ed 	.word	0x080077ed
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	73fb      	strb	r3, [r7, #15]
        break;
 80077d8:	e030      	b.n	800783c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d025      	beq.n	8007832 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80077ea:	e022      	b.n	8007832 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80077f4:	d11f      	bne.n	8007836 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80077fa:	e01c      	b.n	8007836 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007800:	2b02      	cmp	r3, #2
 8007802:	d902      	bls.n	800780a <DMA_CheckFifoParam+0xb6>
 8007804:	2b03      	cmp	r3, #3
 8007806:	d003      	beq.n	8007810 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007808:	e018      	b.n	800783c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	73fb      	strb	r3, [r7, #15]
        break;
 800780e:	e015      	b.n	800783c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007814:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00e      	beq.n	800783a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	73fb      	strb	r3, [r7, #15]
    break;
 8007820:	e00b      	b.n	800783a <DMA_CheckFifoParam+0xe6>
        break;
 8007822:	bf00      	nop
 8007824:	e00a      	b.n	800783c <DMA_CheckFifoParam+0xe8>
        break;
 8007826:	bf00      	nop
 8007828:	e008      	b.n	800783c <DMA_CheckFifoParam+0xe8>
        break;
 800782a:	bf00      	nop
 800782c:	e006      	b.n	800783c <DMA_CheckFifoParam+0xe8>
        break;
 800782e:	bf00      	nop
 8007830:	e004      	b.n	800783c <DMA_CheckFifoParam+0xe8>
        break;
 8007832:	bf00      	nop
 8007834:	e002      	b.n	800783c <DMA_CheckFifoParam+0xe8>
        break;
 8007836:	bf00      	nop
 8007838:	e000      	b.n	800783c <DMA_CheckFifoParam+0xe8>
    break;
 800783a:	bf00      	nop
    }
  }

  return status;
 800783c:	7bfb      	ldrb	r3, [r7, #15]
}
 800783e:	4618      	mov	r0, r3
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop

0800784c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a38      	ldr	r2, [pc, #224]	; (8007940 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d022      	beq.n	80078aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a36      	ldr	r2, [pc, #216]	; (8007944 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d01d      	beq.n	80078aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a35      	ldr	r2, [pc, #212]	; (8007948 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d018      	beq.n	80078aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a33      	ldr	r2, [pc, #204]	; (800794c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d013      	beq.n	80078aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a32      	ldr	r2, [pc, #200]	; (8007950 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d00e      	beq.n	80078aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a30      	ldr	r2, [pc, #192]	; (8007954 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d009      	beq.n	80078aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a2f      	ldr	r2, [pc, #188]	; (8007958 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d004      	beq.n	80078aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a2d      	ldr	r2, [pc, #180]	; (800795c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d101      	bne.n	80078ae <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80078aa:	2301      	movs	r3, #1
 80078ac:	e000      	b.n	80078b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80078ae:	2300      	movs	r3, #0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d01a      	beq.n	80078ea <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	3b08      	subs	r3, #8
 80078bc:	4a28      	ldr	r2, [pc, #160]	; (8007960 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80078be:	fba2 2303 	umull	r2, r3, r2, r3
 80078c2:	091b      	lsrs	r3, r3, #4
 80078c4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	4b26      	ldr	r3, [pc, #152]	; (8007964 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80078ca:	4413      	add	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	461a      	mov	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a24      	ldr	r2, [pc, #144]	; (8007968 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80078d8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f003 031f 	and.w	r3, r3, #31
 80078e0:	2201      	movs	r2, #1
 80078e2:	409a      	lsls	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80078e8:	e024      	b.n	8007934 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	3b10      	subs	r3, #16
 80078f2:	4a1e      	ldr	r2, [pc, #120]	; (800796c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80078f4:	fba2 2303 	umull	r2, r3, r2, r3
 80078f8:	091b      	lsrs	r3, r3, #4
 80078fa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	4a1c      	ldr	r2, [pc, #112]	; (8007970 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d806      	bhi.n	8007912 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	4a1b      	ldr	r2, [pc, #108]	; (8007974 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d902      	bls.n	8007912 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	3308      	adds	r3, #8
 8007910:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	4b18      	ldr	r3, [pc, #96]	; (8007978 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007916:	4413      	add	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	461a      	mov	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a16      	ldr	r2, [pc, #88]	; (800797c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007924:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f003 031f 	and.w	r3, r3, #31
 800792c:	2201      	movs	r2, #1
 800792e:	409a      	lsls	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007934:	bf00      	nop
 8007936:	3714      	adds	r7, #20
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr
 8007940:	58025408 	.word	0x58025408
 8007944:	5802541c 	.word	0x5802541c
 8007948:	58025430 	.word	0x58025430
 800794c:	58025444 	.word	0x58025444
 8007950:	58025458 	.word	0x58025458
 8007954:	5802546c 	.word	0x5802546c
 8007958:	58025480 	.word	0x58025480
 800795c:	58025494 	.word	0x58025494
 8007960:	cccccccd 	.word	0xcccccccd
 8007964:	16009600 	.word	0x16009600
 8007968:	58025880 	.word	0x58025880
 800796c:	aaaaaaab 	.word	0xaaaaaaab
 8007970:	400204b8 	.word	0x400204b8
 8007974:	4002040f 	.word	0x4002040f
 8007978:	10008200 	.word	0x10008200
 800797c:	40020880 	.word	0x40020880

08007980 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007980:	b480      	push	{r7}
 8007982:	b085      	sub	sp, #20
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	b2db      	uxtb	r3, r3
 800798e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d04a      	beq.n	8007a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2b08      	cmp	r3, #8
 800799a:	d847      	bhi.n	8007a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a25      	ldr	r2, [pc, #148]	; (8007a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d022      	beq.n	80079ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a24      	ldr	r2, [pc, #144]	; (8007a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d01d      	beq.n	80079ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a22      	ldr	r2, [pc, #136]	; (8007a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d018      	beq.n	80079ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a21      	ldr	r2, [pc, #132]	; (8007a44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d013      	beq.n	80079ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a1f      	ldr	r2, [pc, #124]	; (8007a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d00e      	beq.n	80079ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a1e      	ldr	r2, [pc, #120]	; (8007a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d009      	beq.n	80079ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a1c      	ldr	r2, [pc, #112]	; (8007a50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d004      	beq.n	80079ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a1b      	ldr	r2, [pc, #108]	; (8007a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d101      	bne.n	80079f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80079ec:	2301      	movs	r3, #1
 80079ee:	e000      	b.n	80079f2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80079f0:	2300      	movs	r3, #0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00a      	beq.n	8007a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	4b17      	ldr	r3, [pc, #92]	; (8007a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80079fa:	4413      	add	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	461a      	mov	r2, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a15      	ldr	r2, [pc, #84]	; (8007a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007a08:	671a      	str	r2, [r3, #112]	; 0x70
 8007a0a:	e009      	b.n	8007a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	4b14      	ldr	r3, [pc, #80]	; (8007a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007a10:	4413      	add	r3, r2
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	461a      	mov	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a11      	ldr	r2, [pc, #68]	; (8007a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007a1e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	3b01      	subs	r3, #1
 8007a24:	2201      	movs	r2, #1
 8007a26:	409a      	lsls	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007a2c:	bf00      	nop
 8007a2e:	3714      	adds	r7, #20
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr
 8007a38:	58025408 	.word	0x58025408
 8007a3c:	5802541c 	.word	0x5802541c
 8007a40:	58025430 	.word	0x58025430
 8007a44:	58025444 	.word	0x58025444
 8007a48:	58025458 	.word	0x58025458
 8007a4c:	5802546c 	.word	0x5802546c
 8007a50:	58025480 	.word	0x58025480
 8007a54:	58025494 	.word	0x58025494
 8007a58:	1600963f 	.word	0x1600963f
 8007a5c:	58025940 	.word	0x58025940
 8007a60:	1000823f 	.word	0x1000823f
 8007a64:	40020940 	.word	0x40020940

08007a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b089      	sub	sp, #36	; 0x24
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007a72:	2300      	movs	r3, #0
 8007a74:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007a76:	4b89      	ldr	r3, [pc, #548]	; (8007c9c <HAL_GPIO_Init+0x234>)
 8007a78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007a7a:	e194      	b.n	8007da6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	2101      	movs	r1, #1
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	fa01 f303 	lsl.w	r3, r1, r3
 8007a88:	4013      	ands	r3, r2
 8007a8a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f000 8186 	beq.w	8007da0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	f003 0303 	and.w	r3, r3, #3
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d005      	beq.n	8007aac <HAL_GPIO_Init+0x44>
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	f003 0303 	and.w	r3, r3, #3
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d130      	bne.n	8007b0e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	005b      	lsls	r3, r3, #1
 8007ab6:	2203      	movs	r2, #3
 8007ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8007abc:	43db      	mvns	r3, r3
 8007abe:	69ba      	ldr	r2, [r7, #24]
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	68da      	ldr	r2, [r3, #12]
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	005b      	lsls	r3, r3, #1
 8007acc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad0:	69ba      	ldr	r2, [r7, #24]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	69ba      	ldr	r2, [r7, #24]
 8007ada:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aea:	43db      	mvns	r3, r3
 8007aec:	69ba      	ldr	r2, [r7, #24]
 8007aee:	4013      	ands	r3, r2
 8007af0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	091b      	lsrs	r3, r3, #4
 8007af8:	f003 0201 	and.w	r2, r3, #1
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	fa02 f303 	lsl.w	r3, r2, r3
 8007b02:	69ba      	ldr	r2, [r7, #24]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	69ba      	ldr	r2, [r7, #24]
 8007b0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	f003 0303 	and.w	r3, r3, #3
 8007b16:	2b03      	cmp	r3, #3
 8007b18:	d017      	beq.n	8007b4a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	005b      	lsls	r3, r3, #1
 8007b24:	2203      	movs	r2, #3
 8007b26:	fa02 f303 	lsl.w	r3, r2, r3
 8007b2a:	43db      	mvns	r3, r3
 8007b2c:	69ba      	ldr	r2, [r7, #24]
 8007b2e:	4013      	ands	r3, r2
 8007b30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	689a      	ldr	r2, [r3, #8]
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	005b      	lsls	r3, r3, #1
 8007b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b3e:	69ba      	ldr	r2, [r7, #24]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	69ba      	ldr	r2, [r7, #24]
 8007b48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	f003 0303 	and.w	r3, r3, #3
 8007b52:	2b02      	cmp	r3, #2
 8007b54:	d123      	bne.n	8007b9e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	08da      	lsrs	r2, r3, #3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	3208      	adds	r2, #8
 8007b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	f003 0307 	and.w	r3, r3, #7
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	220f      	movs	r2, #15
 8007b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b72:	43db      	mvns	r3, r3
 8007b74:	69ba      	ldr	r2, [r7, #24]
 8007b76:	4013      	ands	r3, r2
 8007b78:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	691a      	ldr	r2, [r3, #16]
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	f003 0307 	and.w	r3, r3, #7
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	fa02 f303 	lsl.w	r3, r2, r3
 8007b8a:	69ba      	ldr	r2, [r7, #24]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	08da      	lsrs	r2, r3, #3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	3208      	adds	r2, #8
 8007b98:	69b9      	ldr	r1, [r7, #24]
 8007b9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	005b      	lsls	r3, r3, #1
 8007ba8:	2203      	movs	r2, #3
 8007baa:	fa02 f303 	lsl.w	r3, r2, r3
 8007bae:	43db      	mvns	r3, r3
 8007bb0:	69ba      	ldr	r2, [r7, #24]
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	f003 0203 	and.w	r2, r3, #3
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	005b      	lsls	r3, r3, #1
 8007bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc6:	69ba      	ldr	r2, [r7, #24]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	69ba      	ldr	r2, [r7, #24]
 8007bd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f000 80e0 	beq.w	8007da0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007be0:	4b2f      	ldr	r3, [pc, #188]	; (8007ca0 <HAL_GPIO_Init+0x238>)
 8007be2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007be6:	4a2e      	ldr	r2, [pc, #184]	; (8007ca0 <HAL_GPIO_Init+0x238>)
 8007be8:	f043 0302 	orr.w	r3, r3, #2
 8007bec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007bf0:	4b2b      	ldr	r3, [pc, #172]	; (8007ca0 <HAL_GPIO_Init+0x238>)
 8007bf2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007bf6:	f003 0302 	and.w	r3, r3, #2
 8007bfa:	60fb      	str	r3, [r7, #12]
 8007bfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007bfe:	4a29      	ldr	r2, [pc, #164]	; (8007ca4 <HAL_GPIO_Init+0x23c>)
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	089b      	lsrs	r3, r3, #2
 8007c04:	3302      	adds	r3, #2
 8007c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	f003 0303 	and.w	r3, r3, #3
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	220f      	movs	r2, #15
 8007c16:	fa02 f303 	lsl.w	r3, r2, r3
 8007c1a:	43db      	mvns	r3, r3
 8007c1c:	69ba      	ldr	r2, [r7, #24]
 8007c1e:	4013      	ands	r3, r2
 8007c20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a20      	ldr	r2, [pc, #128]	; (8007ca8 <HAL_GPIO_Init+0x240>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d052      	beq.n	8007cd0 <HAL_GPIO_Init+0x268>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a1f      	ldr	r2, [pc, #124]	; (8007cac <HAL_GPIO_Init+0x244>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d031      	beq.n	8007c96 <HAL_GPIO_Init+0x22e>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a1e      	ldr	r2, [pc, #120]	; (8007cb0 <HAL_GPIO_Init+0x248>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d02b      	beq.n	8007c92 <HAL_GPIO_Init+0x22a>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a1d      	ldr	r2, [pc, #116]	; (8007cb4 <HAL_GPIO_Init+0x24c>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d025      	beq.n	8007c8e <HAL_GPIO_Init+0x226>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a1c      	ldr	r2, [pc, #112]	; (8007cb8 <HAL_GPIO_Init+0x250>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d01f      	beq.n	8007c8a <HAL_GPIO_Init+0x222>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a1b      	ldr	r2, [pc, #108]	; (8007cbc <HAL_GPIO_Init+0x254>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d019      	beq.n	8007c86 <HAL_GPIO_Init+0x21e>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a1a      	ldr	r2, [pc, #104]	; (8007cc0 <HAL_GPIO_Init+0x258>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d013      	beq.n	8007c82 <HAL_GPIO_Init+0x21a>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a19      	ldr	r2, [pc, #100]	; (8007cc4 <HAL_GPIO_Init+0x25c>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d00d      	beq.n	8007c7e <HAL_GPIO_Init+0x216>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a18      	ldr	r2, [pc, #96]	; (8007cc8 <HAL_GPIO_Init+0x260>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d007      	beq.n	8007c7a <HAL_GPIO_Init+0x212>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a17      	ldr	r2, [pc, #92]	; (8007ccc <HAL_GPIO_Init+0x264>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d101      	bne.n	8007c76 <HAL_GPIO_Init+0x20e>
 8007c72:	2309      	movs	r3, #9
 8007c74:	e02d      	b.n	8007cd2 <HAL_GPIO_Init+0x26a>
 8007c76:	230a      	movs	r3, #10
 8007c78:	e02b      	b.n	8007cd2 <HAL_GPIO_Init+0x26a>
 8007c7a:	2308      	movs	r3, #8
 8007c7c:	e029      	b.n	8007cd2 <HAL_GPIO_Init+0x26a>
 8007c7e:	2307      	movs	r3, #7
 8007c80:	e027      	b.n	8007cd2 <HAL_GPIO_Init+0x26a>
 8007c82:	2306      	movs	r3, #6
 8007c84:	e025      	b.n	8007cd2 <HAL_GPIO_Init+0x26a>
 8007c86:	2305      	movs	r3, #5
 8007c88:	e023      	b.n	8007cd2 <HAL_GPIO_Init+0x26a>
 8007c8a:	2304      	movs	r3, #4
 8007c8c:	e021      	b.n	8007cd2 <HAL_GPIO_Init+0x26a>
 8007c8e:	2303      	movs	r3, #3
 8007c90:	e01f      	b.n	8007cd2 <HAL_GPIO_Init+0x26a>
 8007c92:	2302      	movs	r3, #2
 8007c94:	e01d      	b.n	8007cd2 <HAL_GPIO_Init+0x26a>
 8007c96:	2301      	movs	r3, #1
 8007c98:	e01b      	b.n	8007cd2 <HAL_GPIO_Init+0x26a>
 8007c9a:	bf00      	nop
 8007c9c:	58000080 	.word	0x58000080
 8007ca0:	58024400 	.word	0x58024400
 8007ca4:	58000400 	.word	0x58000400
 8007ca8:	58020000 	.word	0x58020000
 8007cac:	58020400 	.word	0x58020400
 8007cb0:	58020800 	.word	0x58020800
 8007cb4:	58020c00 	.word	0x58020c00
 8007cb8:	58021000 	.word	0x58021000
 8007cbc:	58021400 	.word	0x58021400
 8007cc0:	58021800 	.word	0x58021800
 8007cc4:	58021c00 	.word	0x58021c00
 8007cc8:	58022000 	.word	0x58022000
 8007ccc:	58022400 	.word	0x58022400
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	69fa      	ldr	r2, [r7, #28]
 8007cd4:	f002 0203 	and.w	r2, r2, #3
 8007cd8:	0092      	lsls	r2, r2, #2
 8007cda:	4093      	lsls	r3, r2
 8007cdc:	69ba      	ldr	r2, [r7, #24]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ce2:	4938      	ldr	r1, [pc, #224]	; (8007dc4 <HAL_GPIO_Init+0x35c>)
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	089b      	lsrs	r3, r3, #2
 8007ce8:	3302      	adds	r3, #2
 8007cea:	69ba      	ldr	r2, [r7, #24]
 8007cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	43db      	mvns	r3, r3
 8007cfc:	69ba      	ldr	r2, [r7, #24]
 8007cfe:	4013      	ands	r3, r2
 8007d00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d003      	beq.n	8007d16 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007d0e:	69ba      	ldr	r2, [r7, #24]
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007d16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	43db      	mvns	r3, r3
 8007d2a:	69ba      	ldr	r2, [r7, #24]
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d003      	beq.n	8007d44 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007d3c:	69ba      	ldr	r2, [r7, #24]
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007d44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	43db      	mvns	r3, r3
 8007d56:	69ba      	ldr	r2, [r7, #24]
 8007d58:	4013      	ands	r3, r2
 8007d5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d003      	beq.n	8007d70 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007d68:	69ba      	ldr	r2, [r7, #24]
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	69ba      	ldr	r2, [r7, #24]
 8007d74:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	43db      	mvns	r3, r3
 8007d80:	69ba      	ldr	r2, [r7, #24]
 8007d82:	4013      	ands	r3, r2
 8007d84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d003      	beq.n	8007d9a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007d92:	69ba      	ldr	r2, [r7, #24]
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	4313      	orrs	r3, r2
 8007d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	69ba      	ldr	r2, [r7, #24]
 8007d9e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	3301      	adds	r3, #1
 8007da4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	fa22 f303 	lsr.w	r3, r2, r3
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f47f ae63 	bne.w	8007a7c <HAL_GPIO_Init+0x14>
  }
}
 8007db6:	bf00      	nop
 8007db8:	bf00      	nop
 8007dba:	3724      	adds	r7, #36	; 0x24
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr
 8007dc4:	58000400 	.word	0x58000400

08007dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	807b      	strh	r3, [r7, #2]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007dd8:	787b      	ldrb	r3, [r7, #1]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d003      	beq.n	8007de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007dde:	887a      	ldrh	r2, [r7, #2]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007de4:	e003      	b.n	8007dee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007de6:	887b      	ldrh	r3, [r7, #2]
 8007de8:	041a      	lsls	r2, r3, #16
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	619a      	str	r2, [r3, #24]
}
 8007dee:	bf00      	nop
 8007df0:	370c      	adds	r7, #12
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b085      	sub	sp, #20
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
 8007e02:	460b      	mov	r3, r1
 8007e04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007e0c:	887a      	ldrh	r2, [r7, #2]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	4013      	ands	r3, r2
 8007e12:	041a      	lsls	r2, r3, #16
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	43d9      	mvns	r1, r3
 8007e18:	887b      	ldrh	r3, [r7, #2]
 8007e1a:	400b      	ands	r3, r1
 8007e1c:	431a      	orrs	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	619a      	str	r2, [r3, #24]
}
 8007e22:	bf00      	nop
 8007e24:	3714      	adds	r7, #20
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
	...

08007e30 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007e38:	4a08      	ldr	r2, [pc, #32]	; (8007e5c <HAL_HSEM_FastTake+0x2c>)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	3320      	adds	r3, #32
 8007e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e42:	4a07      	ldr	r2, [pc, #28]	; (8007e60 <HAL_HSEM_FastTake+0x30>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d101      	bne.n	8007e4c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	e000      	b.n	8007e4e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	370c      	adds	r7, #12
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	58026400 	.word	0x58026400
 8007e60:	80000300 	.word	0x80000300

08007e64 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8007e6e:	4906      	ldr	r1, [pc, #24]	; (8007e88 <HAL_HSEM_Release+0x24>)
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8007e7c:	bf00      	nop
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr
 8007e88:	58026400 	.word	0x58026400

08007e8c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e8e:	b08f      	sub	sp, #60	; 0x3c
 8007e90:	af0a      	add	r7, sp, #40	; 0x28
 8007e92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d101      	bne.n	8007e9e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e116      	b.n	80080cc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d106      	bne.n	8007ebe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f00a fdbf 	bl	8012a3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2203      	movs	r2, #3
 8007ec2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d102      	bne.n	8007ed8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4618      	mov	r0, r3
 8007ede:	f007 f83e 	bl	800ef5e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	603b      	str	r3, [r7, #0]
 8007ee8:	687e      	ldr	r6, [r7, #4]
 8007eea:	466d      	mov	r5, sp
 8007eec:	f106 0410 	add.w	r4, r6, #16
 8007ef0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007ef2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007ef4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007ef6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007ef8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007efc:	e885 0003 	stmia.w	r5, {r0, r1}
 8007f00:	1d33      	adds	r3, r6, #4
 8007f02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f04:	6838      	ldr	r0, [r7, #0]
 8007f06:	f006 ff09 	bl	800ed1c <USB_CoreInit>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d005      	beq.n	8007f1c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2202      	movs	r2, #2
 8007f14:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e0d7      	b.n	80080cc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2100      	movs	r1, #0
 8007f22:	4618      	mov	r0, r3
 8007f24:	f007 f82c 	bl	800ef80 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f28:	2300      	movs	r3, #0
 8007f2a:	73fb      	strb	r3, [r7, #15]
 8007f2c:	e04a      	b.n	8007fc4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007f2e:	7bfa      	ldrb	r2, [r7, #15]
 8007f30:	6879      	ldr	r1, [r7, #4]
 8007f32:	4613      	mov	r3, r2
 8007f34:	00db      	lsls	r3, r3, #3
 8007f36:	4413      	add	r3, r2
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	440b      	add	r3, r1
 8007f3c:	333d      	adds	r3, #61	; 0x3d
 8007f3e:	2201      	movs	r2, #1
 8007f40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007f42:	7bfa      	ldrb	r2, [r7, #15]
 8007f44:	6879      	ldr	r1, [r7, #4]
 8007f46:	4613      	mov	r3, r2
 8007f48:	00db      	lsls	r3, r3, #3
 8007f4a:	4413      	add	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	440b      	add	r3, r1
 8007f50:	333c      	adds	r3, #60	; 0x3c
 8007f52:	7bfa      	ldrb	r2, [r7, #15]
 8007f54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007f56:	7bfa      	ldrb	r2, [r7, #15]
 8007f58:	7bfb      	ldrb	r3, [r7, #15]
 8007f5a:	b298      	uxth	r0, r3
 8007f5c:	6879      	ldr	r1, [r7, #4]
 8007f5e:	4613      	mov	r3, r2
 8007f60:	00db      	lsls	r3, r3, #3
 8007f62:	4413      	add	r3, r2
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	440b      	add	r3, r1
 8007f68:	3344      	adds	r3, #68	; 0x44
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007f6e:	7bfa      	ldrb	r2, [r7, #15]
 8007f70:	6879      	ldr	r1, [r7, #4]
 8007f72:	4613      	mov	r3, r2
 8007f74:	00db      	lsls	r3, r3, #3
 8007f76:	4413      	add	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	440b      	add	r3, r1
 8007f7c:	3340      	adds	r3, #64	; 0x40
 8007f7e:	2200      	movs	r2, #0
 8007f80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007f82:	7bfa      	ldrb	r2, [r7, #15]
 8007f84:	6879      	ldr	r1, [r7, #4]
 8007f86:	4613      	mov	r3, r2
 8007f88:	00db      	lsls	r3, r3, #3
 8007f8a:	4413      	add	r3, r2
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	440b      	add	r3, r1
 8007f90:	3348      	adds	r3, #72	; 0x48
 8007f92:	2200      	movs	r2, #0
 8007f94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007f96:	7bfa      	ldrb	r2, [r7, #15]
 8007f98:	6879      	ldr	r1, [r7, #4]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	00db      	lsls	r3, r3, #3
 8007f9e:	4413      	add	r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	440b      	add	r3, r1
 8007fa4:	334c      	adds	r3, #76	; 0x4c
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007faa:	7bfa      	ldrb	r2, [r7, #15]
 8007fac:	6879      	ldr	r1, [r7, #4]
 8007fae:	4613      	mov	r3, r2
 8007fb0:	00db      	lsls	r3, r3, #3
 8007fb2:	4413      	add	r3, r2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	440b      	add	r3, r1
 8007fb8:	3354      	adds	r3, #84	; 0x54
 8007fba:	2200      	movs	r2, #0
 8007fbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007fbe:	7bfb      	ldrb	r3, [r7, #15]
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	73fb      	strb	r3, [r7, #15]
 8007fc4:	7bfa      	ldrb	r2, [r7, #15]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d3af      	bcc.n	8007f2e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007fce:	2300      	movs	r3, #0
 8007fd0:	73fb      	strb	r3, [r7, #15]
 8007fd2:	e044      	b.n	800805e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007fd4:	7bfa      	ldrb	r2, [r7, #15]
 8007fd6:	6879      	ldr	r1, [r7, #4]
 8007fd8:	4613      	mov	r3, r2
 8007fda:	00db      	lsls	r3, r3, #3
 8007fdc:	4413      	add	r3, r2
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	440b      	add	r3, r1
 8007fe2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007fea:	7bfa      	ldrb	r2, [r7, #15]
 8007fec:	6879      	ldr	r1, [r7, #4]
 8007fee:	4613      	mov	r3, r2
 8007ff0:	00db      	lsls	r3, r3, #3
 8007ff2:	4413      	add	r3, r2
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	440b      	add	r3, r1
 8007ff8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8007ffc:	7bfa      	ldrb	r2, [r7, #15]
 8007ffe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008000:	7bfa      	ldrb	r2, [r7, #15]
 8008002:	6879      	ldr	r1, [r7, #4]
 8008004:	4613      	mov	r3, r2
 8008006:	00db      	lsls	r3, r3, #3
 8008008:	4413      	add	r3, r2
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	440b      	add	r3, r1
 800800e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008012:	2200      	movs	r2, #0
 8008014:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008016:	7bfa      	ldrb	r2, [r7, #15]
 8008018:	6879      	ldr	r1, [r7, #4]
 800801a:	4613      	mov	r3, r2
 800801c:	00db      	lsls	r3, r3, #3
 800801e:	4413      	add	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	440b      	add	r3, r1
 8008024:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008028:	2200      	movs	r2, #0
 800802a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800802c:	7bfa      	ldrb	r2, [r7, #15]
 800802e:	6879      	ldr	r1, [r7, #4]
 8008030:	4613      	mov	r3, r2
 8008032:	00db      	lsls	r3, r3, #3
 8008034:	4413      	add	r3, r2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	440b      	add	r3, r1
 800803a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800803e:	2200      	movs	r2, #0
 8008040:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008042:	7bfa      	ldrb	r2, [r7, #15]
 8008044:	6879      	ldr	r1, [r7, #4]
 8008046:	4613      	mov	r3, r2
 8008048:	00db      	lsls	r3, r3, #3
 800804a:	4413      	add	r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	440b      	add	r3, r1
 8008050:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008054:	2200      	movs	r2, #0
 8008056:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008058:	7bfb      	ldrb	r3, [r7, #15]
 800805a:	3301      	adds	r3, #1
 800805c:	73fb      	strb	r3, [r7, #15]
 800805e:	7bfa      	ldrb	r2, [r7, #15]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	429a      	cmp	r2, r3
 8008066:	d3b5      	bcc.n	8007fd4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	603b      	str	r3, [r7, #0]
 800806e:	687e      	ldr	r6, [r7, #4]
 8008070:	466d      	mov	r5, sp
 8008072:	f106 0410 	add.w	r4, r6, #16
 8008076:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008078:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800807a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800807c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800807e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008082:	e885 0003 	stmia.w	r5, {r0, r1}
 8008086:	1d33      	adds	r3, r6, #4
 8008088:	cb0e      	ldmia	r3, {r1, r2, r3}
 800808a:	6838      	ldr	r0, [r7, #0]
 800808c:	f006 ffc4 	bl	800f018 <USB_DevInit>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d005      	beq.n	80080a2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2202      	movs	r2, #2
 800809a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	e014      	b.n	80080cc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2201      	movs	r2, #1
 80080ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d102      	bne.n	80080c0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f001 f98c 	bl	80093d8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4618      	mov	r0, r3
 80080c6:	f008 f912 	bl	80102ee <USB_DevDisconnect>

  return HAL_OK;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3714      	adds	r7, #20
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080080d4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d101      	bne.n	80080f0 <HAL_PCD_Start+0x1c>
 80080ec:	2302      	movs	r3, #2
 80080ee:	e020      	b.n	8008132 <HAL_PCD_Start+0x5e>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d109      	bne.n	8008114 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008104:	2b01      	cmp	r3, #1
 8008106:	d005      	beq.n	8008114 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4618      	mov	r0, r3
 800811a:	f006 ff0f 	bl	800ef3c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4618      	mov	r0, r3
 8008124:	f008 f8c2 	bl	80102ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800813a:	b590      	push	{r4, r7, lr}
 800813c:	b08d      	sub	sp, #52	; 0x34
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008148:	6a3b      	ldr	r3, [r7, #32]
 800814a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4618      	mov	r0, r3
 8008152:	f008 f980 	bl	8010456 <USB_GetMode>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	f040 84b7 	bne.w	8008acc <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4618      	mov	r0, r3
 8008164:	f008 f8e4 	bl	8010330 <USB_ReadInterrupts>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	f000 84ad 	beq.w	8008aca <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	0a1b      	lsrs	r3, r3, #8
 800817a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4618      	mov	r0, r3
 800818a:	f008 f8d1 	bl	8010330 <USB_ReadInterrupts>
 800818e:	4603      	mov	r3, r0
 8008190:	f003 0302 	and.w	r3, r3, #2
 8008194:	2b02      	cmp	r3, #2
 8008196:	d107      	bne.n	80081a8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	695a      	ldr	r2, [r3, #20]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f002 0202 	and.w	r2, r2, #2
 80081a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4618      	mov	r0, r3
 80081ae:	f008 f8bf 	bl	8010330 <USB_ReadInterrupts>
 80081b2:	4603      	mov	r3, r0
 80081b4:	f003 0310 	and.w	r3, r3, #16
 80081b8:	2b10      	cmp	r3, #16
 80081ba:	d161      	bne.n	8008280 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	699a      	ldr	r2, [r3, #24]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f022 0210 	bic.w	r2, r2, #16
 80081ca:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80081cc:	6a3b      	ldr	r3, [r7, #32]
 80081ce:	6a1b      	ldr	r3, [r3, #32]
 80081d0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	f003 020f 	and.w	r2, r3, #15
 80081d8:	4613      	mov	r3, r2
 80081da:	00db      	lsls	r3, r3, #3
 80081dc:	4413      	add	r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	4413      	add	r3, r2
 80081e8:	3304      	adds	r3, #4
 80081ea:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	0c5b      	lsrs	r3, r3, #17
 80081f0:	f003 030f 	and.w	r3, r3, #15
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d124      	bne.n	8008242 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80081f8:	69ba      	ldr	r2, [r7, #24]
 80081fa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80081fe:	4013      	ands	r3, r2
 8008200:	2b00      	cmp	r3, #0
 8008202:	d035      	beq.n	8008270 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	091b      	lsrs	r3, r3, #4
 800820c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800820e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008212:	b29b      	uxth	r3, r3
 8008214:	461a      	mov	r2, r3
 8008216:	6a38      	ldr	r0, [r7, #32]
 8008218:	f007 fef6 	bl	8010008 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	691a      	ldr	r2, [r3, #16]
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	091b      	lsrs	r3, r3, #4
 8008224:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008228:	441a      	add	r2, r3
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	6a1a      	ldr	r2, [r3, #32]
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	091b      	lsrs	r3, r3, #4
 8008236:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800823a:	441a      	add	r2, r3
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	621a      	str	r2, [r3, #32]
 8008240:	e016      	b.n	8008270 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	0c5b      	lsrs	r3, r3, #17
 8008246:	f003 030f 	and.w	r3, r3, #15
 800824a:	2b06      	cmp	r3, #6
 800824c:	d110      	bne.n	8008270 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008254:	2208      	movs	r2, #8
 8008256:	4619      	mov	r1, r3
 8008258:	6a38      	ldr	r0, [r7, #32]
 800825a:	f007 fed5 	bl	8010008 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	6a1a      	ldr	r2, [r3, #32]
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	091b      	lsrs	r3, r3, #4
 8008266:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800826a:	441a      	add	r2, r3
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	699a      	ldr	r2, [r3, #24]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f042 0210 	orr.w	r2, r2, #16
 800827e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4618      	mov	r0, r3
 8008286:	f008 f853 	bl	8010330 <USB_ReadInterrupts>
 800828a:	4603      	mov	r3, r0
 800828c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008290:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008294:	f040 80a7 	bne.w	80083e6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008298:	2300      	movs	r3, #0
 800829a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4618      	mov	r0, r3
 80082a2:	f008 f858 	bl	8010356 <USB_ReadDevAllOutEpInterrupt>
 80082a6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80082a8:	e099      	b.n	80083de <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80082aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ac:	f003 0301 	and.w	r3, r3, #1
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f000 808e 	beq.w	80083d2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082bc:	b2d2      	uxtb	r2, r2
 80082be:	4611      	mov	r1, r2
 80082c0:	4618      	mov	r0, r3
 80082c2:	f008 f87c 	bl	80103be <USB_ReadDevOutEPInterrupt>
 80082c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	f003 0301 	and.w	r3, r3, #1
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00c      	beq.n	80082ec <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80082d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d4:	015a      	lsls	r2, r3, #5
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	4413      	add	r3, r2
 80082da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082de:	461a      	mov	r2, r3
 80082e0:	2301      	movs	r3, #1
 80082e2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80082e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fef0 	bl	80090cc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	f003 0308 	and.w	r3, r3, #8
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00c      	beq.n	8008310 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80082f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f8:	015a      	lsls	r2, r3, #5
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	4413      	add	r3, r2
 80082fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008302:	461a      	mov	r2, r3
 8008304:	2308      	movs	r3, #8
 8008306:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008308:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 ffc6 	bl	800929c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	f003 0310 	and.w	r3, r3, #16
 8008316:	2b00      	cmp	r3, #0
 8008318:	d008      	beq.n	800832c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800831a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831c:	015a      	lsls	r2, r3, #5
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	4413      	add	r3, r2
 8008322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008326:	461a      	mov	r2, r3
 8008328:	2310      	movs	r3, #16
 800832a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	f003 0302 	and.w	r3, r3, #2
 8008332:	2b00      	cmp	r3, #0
 8008334:	d030      	beq.n	8008398 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008336:	6a3b      	ldr	r3, [r7, #32]
 8008338:	695b      	ldr	r3, [r3, #20]
 800833a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800833e:	2b80      	cmp	r3, #128	; 0x80
 8008340:	d109      	bne.n	8008356 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	69fa      	ldr	r2, [r7, #28]
 800834c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008350:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008354:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008358:	4613      	mov	r3, r2
 800835a:	00db      	lsls	r3, r3, #3
 800835c:	4413      	add	r3, r2
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	4413      	add	r3, r2
 8008368:	3304      	adds	r3, #4
 800836a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	78db      	ldrb	r3, [r3, #3]
 8008370:	2b01      	cmp	r3, #1
 8008372:	d108      	bne.n	8008386 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	2200      	movs	r2, #0
 8008378:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800837a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837c:	b2db      	uxtb	r3, r3
 800837e:	4619      	mov	r1, r3
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f00a fc9d 	bl	8012cc0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008388:	015a      	lsls	r2, r3, #5
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	4413      	add	r3, r2
 800838e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008392:	461a      	mov	r2, r3
 8008394:	2302      	movs	r3, #2
 8008396:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	f003 0320 	and.w	r3, r3, #32
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d008      	beq.n	80083b4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80083a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a4:	015a      	lsls	r2, r3, #5
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	4413      	add	r3, r2
 80083aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ae:	461a      	mov	r2, r3
 80083b0:	2320      	movs	r3, #32
 80083b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d009      	beq.n	80083d2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80083be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c0:	015a      	lsls	r2, r3, #5
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	4413      	add	r3, r2
 80083c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ca:	461a      	mov	r2, r3
 80083cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80083d0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80083d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d4:	3301      	adds	r3, #1
 80083d6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80083d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083da:	085b      	lsrs	r3, r3, #1
 80083dc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80083de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f47f af62 	bne.w	80082aa <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4618      	mov	r0, r3
 80083ec:	f007 ffa0 	bl	8010330 <USB_ReadInterrupts>
 80083f0:	4603      	mov	r3, r0
 80083f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80083f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80083fa:	f040 80db 	bne.w	80085b4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4618      	mov	r0, r3
 8008404:	f007 ffc1 	bl	801038a <USB_ReadDevAllInEpInterrupt>
 8008408:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800840a:	2300      	movs	r3, #0
 800840c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800840e:	e0cd      	b.n	80085ac <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008412:	f003 0301 	and.w	r3, r3, #1
 8008416:	2b00      	cmp	r3, #0
 8008418:	f000 80c2 	beq.w	80085a0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008422:	b2d2      	uxtb	r2, r2
 8008424:	4611      	mov	r1, r2
 8008426:	4618      	mov	r0, r3
 8008428:	f007 ffe7 	bl	80103fa <USB_ReadDevInEPInterrupt>
 800842c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	f003 0301 	and.w	r3, r3, #1
 8008434:	2b00      	cmp	r3, #0
 8008436:	d057      	beq.n	80084e8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843a:	f003 030f 	and.w	r3, r3, #15
 800843e:	2201      	movs	r2, #1
 8008440:	fa02 f303 	lsl.w	r3, r2, r3
 8008444:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800844c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	43db      	mvns	r3, r3
 8008452:	69f9      	ldr	r1, [r7, #28]
 8008454:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008458:	4013      	ands	r3, r2
 800845a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845e:	015a      	lsls	r2, r3, #5
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	4413      	add	r3, r2
 8008464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008468:	461a      	mov	r2, r3
 800846a:	2301      	movs	r3, #1
 800846c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	2b01      	cmp	r3, #1
 8008474:	d132      	bne.n	80084dc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008476:	6879      	ldr	r1, [r7, #4]
 8008478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800847a:	4613      	mov	r3, r2
 800847c:	00db      	lsls	r3, r3, #3
 800847e:	4413      	add	r3, r2
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	440b      	add	r3, r1
 8008484:	334c      	adds	r3, #76	; 0x4c
 8008486:	6819      	ldr	r1, [r3, #0]
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800848c:	4613      	mov	r3, r2
 800848e:	00db      	lsls	r3, r3, #3
 8008490:	4413      	add	r3, r2
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	4403      	add	r3, r0
 8008496:	3348      	adds	r3, #72	; 0x48
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4419      	add	r1, r3
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084a0:	4613      	mov	r3, r2
 80084a2:	00db      	lsls	r3, r3, #3
 80084a4:	4413      	add	r3, r2
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	4403      	add	r3, r0
 80084aa:	334c      	adds	r3, #76	; 0x4c
 80084ac:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80084ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d113      	bne.n	80084dc <HAL_PCD_IRQHandler+0x3a2>
 80084b4:	6879      	ldr	r1, [r7, #4]
 80084b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084b8:	4613      	mov	r3, r2
 80084ba:	00db      	lsls	r3, r3, #3
 80084bc:	4413      	add	r3, r2
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	440b      	add	r3, r1
 80084c2:	3354      	adds	r3, #84	; 0x54
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d108      	bne.n	80084dc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6818      	ldr	r0, [r3, #0]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80084d4:	461a      	mov	r2, r3
 80084d6:	2101      	movs	r1, #1
 80084d8:	f007 fff0 	bl	80104bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80084dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	4619      	mov	r1, r3
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f00a fb67 	bl	8012bb6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	f003 0308 	and.w	r3, r3, #8
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d008      	beq.n	8008504 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80084f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f4:	015a      	lsls	r2, r3, #5
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	4413      	add	r3, r2
 80084fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084fe:	461a      	mov	r2, r3
 8008500:	2308      	movs	r3, #8
 8008502:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	f003 0310 	and.w	r3, r3, #16
 800850a:	2b00      	cmp	r3, #0
 800850c:	d008      	beq.n	8008520 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800850e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008510:	015a      	lsls	r2, r3, #5
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	4413      	add	r3, r2
 8008516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800851a:	461a      	mov	r2, r3
 800851c:	2310      	movs	r3, #16
 800851e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008526:	2b00      	cmp	r3, #0
 8008528:	d008      	beq.n	800853c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800852a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852c:	015a      	lsls	r2, r3, #5
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	4413      	add	r3, r2
 8008532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008536:	461a      	mov	r2, r3
 8008538:	2340      	movs	r3, #64	; 0x40
 800853a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	f003 0302 	and.w	r3, r3, #2
 8008542:	2b00      	cmp	r3, #0
 8008544:	d023      	beq.n	800858e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008546:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008548:	6a38      	ldr	r0, [r7, #32]
 800854a:	f006 fec3 	bl	800f2d4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800854e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008550:	4613      	mov	r3, r2
 8008552:	00db      	lsls	r3, r3, #3
 8008554:	4413      	add	r3, r2
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	3338      	adds	r3, #56	; 0x38
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	4413      	add	r3, r2
 800855e:	3304      	adds	r3, #4
 8008560:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	78db      	ldrb	r3, [r3, #3]
 8008566:	2b01      	cmp	r3, #1
 8008568:	d108      	bne.n	800857c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	2200      	movs	r2, #0
 800856e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008572:	b2db      	uxtb	r3, r3
 8008574:	4619      	mov	r1, r3
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f00a fbb4 	bl	8012ce4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800857c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857e:	015a      	lsls	r2, r3, #5
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	4413      	add	r3, r2
 8008584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008588:	461a      	mov	r2, r3
 800858a:	2302      	movs	r3, #2
 800858c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008594:	2b00      	cmp	r3, #0
 8008596:	d003      	beq.n	80085a0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008598:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 fd08 	bl	8008fb0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80085a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a2:	3301      	adds	r3, #1
 80085a4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80085a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a8:	085b      	lsrs	r3, r3, #1
 80085aa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80085ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	f47f af2e 	bne.w	8008410 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4618      	mov	r0, r3
 80085ba:	f007 feb9 	bl	8010330 <USB_ReadInterrupts>
 80085be:	4603      	mov	r3, r0
 80085c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085c8:	d122      	bne.n	8008610 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	69fa      	ldr	r2, [r7, #28]
 80085d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085d8:	f023 0301 	bic.w	r3, r3, #1
 80085dc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d108      	bne.n	80085fa <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80085f0:	2100      	movs	r1, #0
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 ff14 	bl	8009420 <HAL_PCDEx_LPM_Callback>
 80085f8:	e002      	b.n	8008600 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f00a fb52 	bl	8012ca4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	695a      	ldr	r2, [r3, #20]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800860e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4618      	mov	r0, r3
 8008616:	f007 fe8b 	bl	8010330 <USB_ReadInterrupts>
 800861a:	4603      	mov	r3, r0
 800861c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008624:	d112      	bne.n	800864c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	f003 0301 	and.w	r3, r3, #1
 8008632:	2b01      	cmp	r3, #1
 8008634:	d102      	bne.n	800863c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f00a fb0e 	bl	8012c58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	695a      	ldr	r2, [r3, #20]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800864a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4618      	mov	r0, r3
 8008652:	f007 fe6d 	bl	8010330 <USB_ReadInterrupts>
 8008656:	4603      	mov	r3, r0
 8008658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800865c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008660:	d121      	bne.n	80086a6 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	695a      	ldr	r2, [r3, #20]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008670:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008678:	2b00      	cmp	r3, #0
 800867a:	d111      	bne.n	80086a0 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800868a:	089b      	lsrs	r3, r3, #2
 800868c:	f003 020f 	and.w	r2, r3, #15
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008696:	2101      	movs	r1, #1
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 fec1 	bl	8009420 <HAL_PCDEx_LPM_Callback>
 800869e:	e002      	b.n	80086a6 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f00a fad9 	bl	8012c58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4618      	mov	r0, r3
 80086ac:	f007 fe40 	bl	8010330 <USB_ReadInterrupts>
 80086b0:	4603      	mov	r3, r0
 80086b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80086b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086ba:	f040 80b7 	bne.w	800882c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	69fa      	ldr	r2, [r7, #28]
 80086c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086cc:	f023 0301 	bic.w	r3, r3, #1
 80086d0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2110      	movs	r1, #16
 80086d8:	4618      	mov	r0, r3
 80086da:	f006 fdfb 	bl	800f2d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80086de:	2300      	movs	r3, #0
 80086e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086e2:	e046      	b.n	8008772 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80086e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e6:	015a      	lsls	r2, r3, #5
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	4413      	add	r3, r2
 80086ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086f0:	461a      	mov	r2, r3
 80086f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80086f6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80086f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086fa:	015a      	lsls	r2, r3, #5
 80086fc:	69fb      	ldr	r3, [r7, #28]
 80086fe:	4413      	add	r3, r2
 8008700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008708:	0151      	lsls	r1, r2, #5
 800870a:	69fa      	ldr	r2, [r7, #28]
 800870c:	440a      	add	r2, r1
 800870e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008712:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008716:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871a:	015a      	lsls	r2, r3, #5
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	4413      	add	r3, r2
 8008720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008724:	461a      	mov	r2, r3
 8008726:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800872a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800872c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800872e:	015a      	lsls	r2, r3, #5
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	4413      	add	r3, r2
 8008734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800873c:	0151      	lsls	r1, r2, #5
 800873e:	69fa      	ldr	r2, [r7, #28]
 8008740:	440a      	add	r2, r1
 8008742:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008746:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800874a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800874c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874e:	015a      	lsls	r2, r3, #5
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	4413      	add	r3, r2
 8008754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800875c:	0151      	lsls	r1, r2, #5
 800875e:	69fa      	ldr	r2, [r7, #28]
 8008760:	440a      	add	r2, r1
 8008762:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008766:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800876a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800876c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876e:	3301      	adds	r3, #1
 8008770:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008778:	429a      	cmp	r2, r3
 800877a:	d3b3      	bcc.n	80086e4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008782:	69db      	ldr	r3, [r3, #28]
 8008784:	69fa      	ldr	r2, [r7, #28]
 8008786:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800878a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800878e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008794:	2b00      	cmp	r3, #0
 8008796:	d016      	beq.n	80087c6 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800879e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087a2:	69fa      	ldr	r2, [r7, #28]
 80087a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087a8:	f043 030b 	orr.w	r3, r3, #11
 80087ac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087b8:	69fa      	ldr	r2, [r7, #28]
 80087ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087be:	f043 030b 	orr.w	r3, r3, #11
 80087c2:	6453      	str	r3, [r2, #68]	; 0x44
 80087c4:	e015      	b.n	80087f2 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087cc:	695a      	ldr	r2, [r3, #20]
 80087ce:	69fb      	ldr	r3, [r7, #28]
 80087d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087d4:	4619      	mov	r1, r3
 80087d6:	f242 032b 	movw	r3, #8235	; 0x202b
 80087da:	4313      	orrs	r3, r2
 80087dc:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80087de:	69fb      	ldr	r3, [r7, #28]
 80087e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	69fa      	ldr	r2, [r7, #28]
 80087e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087ec:	f043 030b 	orr.w	r3, r3, #11
 80087f0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	69fa      	ldr	r2, [r7, #28]
 80087fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008800:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008804:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6818      	ldr	r0, [r3, #0]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	691b      	ldr	r3, [r3, #16]
 800880e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008816:	461a      	mov	r2, r3
 8008818:	f007 fe50 	bl	80104bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	695a      	ldr	r2, [r3, #20]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800882a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4618      	mov	r0, r3
 8008832:	f007 fd7d 	bl	8010330 <USB_ReadInterrupts>
 8008836:	4603      	mov	r3, r0
 8008838:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800883c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008840:	d124      	bne.n	800888c <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4618      	mov	r0, r3
 8008848:	f007 fe14 	bl	8010474 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4618      	mov	r0, r3
 8008852:	f006 fdbc 	bl	800f3ce <USB_GetDevSpeed>
 8008856:	4603      	mov	r3, r0
 8008858:	461a      	mov	r2, r3
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681c      	ldr	r4, [r3, #0]
 8008862:	f001 fe1b 	bl	800a49c <HAL_RCC_GetHCLKFreq>
 8008866:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800886c:	b2db      	uxtb	r3, r3
 800886e:	461a      	mov	r2, r3
 8008870:	4620      	mov	r0, r4
 8008872:	f006 fac1 	bl	800edf8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f00a f9c5 	bl	8012c06 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	695a      	ldr	r2, [r3, #20]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800888a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4618      	mov	r0, r3
 8008892:	f007 fd4d 	bl	8010330 <USB_ReadInterrupts>
 8008896:	4603      	mov	r3, r0
 8008898:	f003 0308 	and.w	r3, r3, #8
 800889c:	2b08      	cmp	r3, #8
 800889e:	d10a      	bne.n	80088b6 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f00a f9a2 	bl	8012bea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	695a      	ldr	r2, [r3, #20]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f002 0208 	and.w	r2, r2, #8
 80088b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4618      	mov	r0, r3
 80088bc:	f007 fd38 	bl	8010330 <USB_ReadInterrupts>
 80088c0:	4603      	mov	r3, r0
 80088c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088c6:	2b80      	cmp	r3, #128	; 0x80
 80088c8:	d122      	bne.n	8008910 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80088ca:	6a3b      	ldr	r3, [r7, #32]
 80088cc:	699b      	ldr	r3, [r3, #24]
 80088ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80088d2:	6a3b      	ldr	r3, [r7, #32]
 80088d4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80088d6:	2301      	movs	r3, #1
 80088d8:	627b      	str	r3, [r7, #36]	; 0x24
 80088da:	e014      	b.n	8008906 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80088dc:	6879      	ldr	r1, [r7, #4]
 80088de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088e0:	4613      	mov	r3, r2
 80088e2:	00db      	lsls	r3, r3, #3
 80088e4:	4413      	add	r3, r2
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	440b      	add	r3, r1
 80088ea:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d105      	bne.n	8008900 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80088f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	4619      	mov	r1, r3
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 fb27 	bl	8008f4e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008902:	3301      	adds	r3, #1
 8008904:	627b      	str	r3, [r7, #36]	; 0x24
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800890c:	429a      	cmp	r2, r3
 800890e:	d3e5      	bcc.n	80088dc <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4618      	mov	r0, r3
 8008916:	f007 fd0b 	bl	8010330 <USB_ReadInterrupts>
 800891a:	4603      	mov	r3, r0
 800891c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008920:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008924:	d13b      	bne.n	800899e <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008926:	2301      	movs	r3, #1
 8008928:	627b      	str	r3, [r7, #36]	; 0x24
 800892a:	e02b      	b.n	8008984 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800892c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892e:	015a      	lsls	r2, r3, #5
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	4413      	add	r3, r2
 8008934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800893c:	6879      	ldr	r1, [r7, #4]
 800893e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008940:	4613      	mov	r3, r2
 8008942:	00db      	lsls	r3, r3, #3
 8008944:	4413      	add	r3, r2
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	440b      	add	r3, r1
 800894a:	3340      	adds	r3, #64	; 0x40
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	2b01      	cmp	r3, #1
 8008950:	d115      	bne.n	800897e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008952:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008954:	2b00      	cmp	r3, #0
 8008956:	da12      	bge.n	800897e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008958:	6879      	ldr	r1, [r7, #4]
 800895a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800895c:	4613      	mov	r3, r2
 800895e:	00db      	lsls	r3, r3, #3
 8008960:	4413      	add	r3, r2
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	440b      	add	r3, r1
 8008966:	333f      	adds	r3, #63	; 0x3f
 8008968:	2201      	movs	r2, #1
 800896a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800896c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896e:	b2db      	uxtb	r3, r3
 8008970:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008974:	b2db      	uxtb	r3, r3
 8008976:	4619      	mov	r1, r3
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 fae8 	bl	8008f4e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800897e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008980:	3301      	adds	r3, #1
 8008982:	627b      	str	r3, [r7, #36]	; 0x24
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800898a:	429a      	cmp	r2, r3
 800898c:	d3ce      	bcc.n	800892c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	695a      	ldr	r2, [r3, #20]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800899c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4618      	mov	r0, r3
 80089a4:	f007 fcc4 	bl	8010330 <USB_ReadInterrupts>
 80089a8:	4603      	mov	r3, r0
 80089aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089b2:	d155      	bne.n	8008a60 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80089b4:	2301      	movs	r3, #1
 80089b6:	627b      	str	r3, [r7, #36]	; 0x24
 80089b8:	e045      	b.n	8008a46 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80089ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089bc:	015a      	lsls	r2, r3, #5
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	4413      	add	r3, r2
 80089c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80089ca:	6879      	ldr	r1, [r7, #4]
 80089cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ce:	4613      	mov	r3, r2
 80089d0:	00db      	lsls	r3, r3, #3
 80089d2:	4413      	add	r3, r2
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	440b      	add	r3, r1
 80089d8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d12e      	bne.n	8008a40 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80089e2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	da2b      	bge.n	8008a40 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80089e8:	69bb      	ldr	r3, [r7, #24]
 80089ea:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80089f4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d121      	bne.n	8008a40 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80089fc:	6879      	ldr	r1, [r7, #4]
 80089fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a00:	4613      	mov	r3, r2
 8008a02:	00db      	lsls	r3, r3, #3
 8008a04:	4413      	add	r3, r2
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	440b      	add	r3, r1
 8008a0a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008a0e:	2201      	movs	r2, #1
 8008a10:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008a12:	6a3b      	ldr	r3, [r7, #32]
 8008a14:	699b      	ldr	r3, [r3, #24]
 8008a16:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008a1a:	6a3b      	ldr	r3, [r7, #32]
 8008a1c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008a1e:	6a3b      	ldr	r3, [r7, #32]
 8008a20:	695b      	ldr	r3, [r3, #20]
 8008a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d10a      	bne.n	8008a40 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	69fa      	ldr	r2, [r7, #28]
 8008a34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a3c:	6053      	str	r3, [r2, #4]
            break;
 8008a3e:	e007      	b.n	8008a50 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a42:	3301      	adds	r3, #1
 8008a44:	627b      	str	r3, [r7, #36]	; 0x24
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d3b4      	bcc.n	80089ba <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	695a      	ldr	r2, [r3, #20]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008a5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4618      	mov	r0, r3
 8008a66:	f007 fc63 	bl	8010330 <USB_ReadInterrupts>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a74:	d10a      	bne.n	8008a8c <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f00a f946 	bl	8012d08 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	695a      	ldr	r2, [r3, #20]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008a8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4618      	mov	r0, r3
 8008a92:	f007 fc4d 	bl	8010330 <USB_ReadInterrupts>
 8008a96:	4603      	mov	r3, r0
 8008a98:	f003 0304 	and.w	r3, r3, #4
 8008a9c:	2b04      	cmp	r3, #4
 8008a9e:	d115      	bne.n	8008acc <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	f003 0304 	and.w	r3, r3, #4
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d002      	beq.n	8008ab8 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f00a f936 	bl	8012d24 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	6859      	ldr	r1, [r3, #4]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	69ba      	ldr	r2, [r7, #24]
 8008ac4:	430a      	orrs	r2, r1
 8008ac6:	605a      	str	r2, [r3, #4]
 8008ac8:	e000      	b.n	8008acc <HAL_PCD_IRQHandler+0x992>
      return;
 8008aca:	bf00      	nop
    }
  }
}
 8008acc:	3734      	adds	r7, #52	; 0x34
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd90      	pop	{r4, r7, pc}

08008ad2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	b082      	sub	sp, #8
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
 8008ada:	460b      	mov	r3, r1
 8008adc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d101      	bne.n	8008aec <HAL_PCD_SetAddress+0x1a>
 8008ae8:	2302      	movs	r3, #2
 8008aea:	e013      	b.n	8008b14 <HAL_PCD_SetAddress+0x42>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2201      	movs	r2, #1
 8008af0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	78fa      	ldrb	r2, [r7, #3]
 8008af8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	78fa      	ldrb	r2, [r7, #3]
 8008b02:	4611      	mov	r1, r2
 8008b04:	4618      	mov	r0, r3
 8008b06:	f007 fbab 	bl	8010260 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008b12:	2300      	movs	r3, #0
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3708      	adds	r7, #8
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	4608      	mov	r0, r1
 8008b26:	4611      	mov	r1, r2
 8008b28:	461a      	mov	r2, r3
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	70fb      	strb	r3, [r7, #3]
 8008b2e:	460b      	mov	r3, r1
 8008b30:	803b      	strh	r3, [r7, #0]
 8008b32:	4613      	mov	r3, r2
 8008b34:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008b36:	2300      	movs	r3, #0
 8008b38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008b3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	da0f      	bge.n	8008b62 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b42:	78fb      	ldrb	r3, [r7, #3]
 8008b44:	f003 020f 	and.w	r2, r3, #15
 8008b48:	4613      	mov	r3, r2
 8008b4a:	00db      	lsls	r3, r3, #3
 8008b4c:	4413      	add	r3, r2
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	3338      	adds	r3, #56	; 0x38
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	4413      	add	r3, r2
 8008b56:	3304      	adds	r3, #4
 8008b58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	705a      	strb	r2, [r3, #1]
 8008b60:	e00f      	b.n	8008b82 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b62:	78fb      	ldrb	r3, [r7, #3]
 8008b64:	f003 020f 	and.w	r2, r3, #15
 8008b68:	4613      	mov	r3, r2
 8008b6a:	00db      	lsls	r3, r3, #3
 8008b6c:	4413      	add	r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	4413      	add	r3, r2
 8008b78:	3304      	adds	r3, #4
 8008b7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008b82:	78fb      	ldrb	r3, [r7, #3]
 8008b84:	f003 030f 	and.w	r3, r3, #15
 8008b88:	b2da      	uxtb	r2, r3
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008b8e:	883a      	ldrh	r2, [r7, #0]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	78ba      	ldrb	r2, [r7, #2]
 8008b98:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	785b      	ldrb	r3, [r3, #1]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d004      	beq.n	8008bac <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	b29a      	uxth	r2, r3
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008bac:	78bb      	ldrb	r3, [r7, #2]
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	d102      	bne.n	8008bb8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d101      	bne.n	8008bc6 <HAL_PCD_EP_Open+0xaa>
 8008bc2:	2302      	movs	r3, #2
 8008bc4:	e00e      	b.n	8008be4 <HAL_PCD_EP_Open+0xc8>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68f9      	ldr	r1, [r7, #12]
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f006 fc1f 	bl	800f418 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8008be2:	7afb      	ldrb	r3, [r7, #11]
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3710      	adds	r7, #16
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008bf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	da0f      	bge.n	8008c20 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c00:	78fb      	ldrb	r3, [r7, #3]
 8008c02:	f003 020f 	and.w	r2, r3, #15
 8008c06:	4613      	mov	r3, r2
 8008c08:	00db      	lsls	r3, r3, #3
 8008c0a:	4413      	add	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	3338      	adds	r3, #56	; 0x38
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	4413      	add	r3, r2
 8008c14:	3304      	adds	r3, #4
 8008c16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	705a      	strb	r2, [r3, #1]
 8008c1e:	e00f      	b.n	8008c40 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c20:	78fb      	ldrb	r3, [r7, #3]
 8008c22:	f003 020f 	and.w	r2, r3, #15
 8008c26:	4613      	mov	r3, r2
 8008c28:	00db      	lsls	r3, r3, #3
 8008c2a:	4413      	add	r3, r2
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	4413      	add	r3, r2
 8008c36:	3304      	adds	r3, #4
 8008c38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008c40:	78fb      	ldrb	r3, [r7, #3]
 8008c42:	f003 030f 	and.w	r3, r3, #15
 8008c46:	b2da      	uxtb	r2, r3
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d101      	bne.n	8008c5a <HAL_PCD_EP_Close+0x6e>
 8008c56:	2302      	movs	r3, #2
 8008c58:	e00e      	b.n	8008c78 <HAL_PCD_EP_Close+0x8c>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	68f9      	ldr	r1, [r7, #12]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f006 fc5d 	bl	800f528 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b086      	sub	sp, #24
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	607a      	str	r2, [r7, #4]
 8008c8a:	603b      	str	r3, [r7, #0]
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c90:	7afb      	ldrb	r3, [r7, #11]
 8008c92:	f003 020f 	and.w	r2, r3, #15
 8008c96:	4613      	mov	r3, r2
 8008c98:	00db      	lsls	r3, r3, #3
 8008c9a:	4413      	add	r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	3304      	adds	r3, #4
 8008ca8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	683a      	ldr	r2, [r7, #0]
 8008cb4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008cc2:	7afb      	ldrb	r3, [r7, #11]
 8008cc4:	f003 030f 	and.w	r3, r3, #15
 8008cc8:	b2da      	uxtb	r2, r3
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	691b      	ldr	r3, [r3, #16]
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d102      	bne.n	8008cdc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008cdc:	7afb      	ldrb	r3, [r7, #11]
 8008cde:	f003 030f 	and.w	r3, r3, #15
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d109      	bne.n	8008cfa <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6818      	ldr	r0, [r3, #0]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	6979      	ldr	r1, [r7, #20]
 8008cf4:	f006 ff44 	bl	800fb80 <USB_EP0StartXfer>
 8008cf8:	e008      	b.n	8008d0c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	6818      	ldr	r0, [r3, #0]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	461a      	mov	r2, r3
 8008d06:	6979      	ldr	r1, [r7, #20]
 8008d08:	f006 fcea 	bl	800f6e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3718      	adds	r7, #24
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008d16:	b480      	push	{r7}
 8008d18:	b083      	sub	sp, #12
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
 8008d1e:	460b      	mov	r3, r1
 8008d20:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008d22:	78fb      	ldrb	r3, [r7, #3]
 8008d24:	f003 020f 	and.w	r2, r3, #15
 8008d28:	6879      	ldr	r1, [r7, #4]
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	00db      	lsls	r3, r3, #3
 8008d2e:	4413      	add	r3, r2
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	440b      	add	r3, r1
 8008d34:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8008d38:	681b      	ldr	r3, [r3, #0]
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	370c      	adds	r7, #12
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr

08008d46 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b086      	sub	sp, #24
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	60f8      	str	r0, [r7, #12]
 8008d4e:	607a      	str	r2, [r7, #4]
 8008d50:	603b      	str	r3, [r7, #0]
 8008d52:	460b      	mov	r3, r1
 8008d54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d56:	7afb      	ldrb	r3, [r7, #11]
 8008d58:	f003 020f 	and.w	r2, r3, #15
 8008d5c:	4613      	mov	r3, r2
 8008d5e:	00db      	lsls	r3, r3, #3
 8008d60:	4413      	add	r3, r2
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	3338      	adds	r3, #56	; 0x38
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	4413      	add	r3, r2
 8008d6a:	3304      	adds	r3, #4
 8008d6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	683a      	ldr	r2, [r7, #0]
 8008d78:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	2201      	movs	r2, #1
 8008d84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d86:	7afb      	ldrb	r3, [r7, #11]
 8008d88:	f003 030f 	and.w	r3, r3, #15
 8008d8c:	b2da      	uxtb	r2, r3
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	691b      	ldr	r3, [r3, #16]
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d102      	bne.n	8008da0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008da0:	7afb      	ldrb	r3, [r7, #11]
 8008da2:	f003 030f 	and.w	r3, r3, #15
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d109      	bne.n	8008dbe <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	6818      	ldr	r0, [r3, #0]
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	691b      	ldr	r3, [r3, #16]
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	461a      	mov	r2, r3
 8008db6:	6979      	ldr	r1, [r7, #20]
 8008db8:	f006 fee2 	bl	800fb80 <USB_EP0StartXfer>
 8008dbc:	e008      	b.n	8008dd0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6818      	ldr	r0, [r3, #0]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	691b      	ldr	r3, [r3, #16]
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	461a      	mov	r2, r3
 8008dca:	6979      	ldr	r1, [r7, #20]
 8008dcc:	f006 fc88 	bl	800f6e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3718      	adds	r7, #24
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b084      	sub	sp, #16
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
 8008de2:	460b      	mov	r3, r1
 8008de4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008de6:	78fb      	ldrb	r3, [r7, #3]
 8008de8:	f003 020f 	and.w	r2, r3, #15
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d901      	bls.n	8008df8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	e050      	b.n	8008e9a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008df8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	da0f      	bge.n	8008e20 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e00:	78fb      	ldrb	r3, [r7, #3]
 8008e02:	f003 020f 	and.w	r2, r3, #15
 8008e06:	4613      	mov	r3, r2
 8008e08:	00db      	lsls	r3, r3, #3
 8008e0a:	4413      	add	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	3338      	adds	r3, #56	; 0x38
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	4413      	add	r3, r2
 8008e14:	3304      	adds	r3, #4
 8008e16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	705a      	strb	r2, [r3, #1]
 8008e1e:	e00d      	b.n	8008e3c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008e20:	78fa      	ldrb	r2, [r7, #3]
 8008e22:	4613      	mov	r3, r2
 8008e24:	00db      	lsls	r3, r3, #3
 8008e26:	4413      	add	r3, r2
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	4413      	add	r3, r2
 8008e32:	3304      	adds	r3, #4
 8008e34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008e42:	78fb      	ldrb	r3, [r7, #3]
 8008e44:	f003 030f 	and.w	r3, r3, #15
 8008e48:	b2da      	uxtb	r2, r3
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d101      	bne.n	8008e5c <HAL_PCD_EP_SetStall+0x82>
 8008e58:	2302      	movs	r3, #2
 8008e5a:	e01e      	b.n	8008e9a <HAL_PCD_EP_SetStall+0xc0>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	68f9      	ldr	r1, [r7, #12]
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f007 f924 	bl	80100b8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008e70:	78fb      	ldrb	r3, [r7, #3]
 8008e72:	f003 030f 	and.w	r3, r3, #15
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10a      	bne.n	8008e90 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6818      	ldr	r0, [r3, #0]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	691b      	ldr	r3, [r3, #16]
 8008e82:	b2d9      	uxtb	r1, r3
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	f007 fb16 	bl	80104bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b084      	sub	sp, #16
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
 8008eaa:	460b      	mov	r3, r1
 8008eac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008eae:	78fb      	ldrb	r3, [r7, #3]
 8008eb0:	f003 020f 	and.w	r2, r3, #15
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d901      	bls.n	8008ec0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	e042      	b.n	8008f46 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008ec0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	da0f      	bge.n	8008ee8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008ec8:	78fb      	ldrb	r3, [r7, #3]
 8008eca:	f003 020f 	and.w	r2, r3, #15
 8008ece:	4613      	mov	r3, r2
 8008ed0:	00db      	lsls	r3, r3, #3
 8008ed2:	4413      	add	r3, r2
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	3338      	adds	r3, #56	; 0x38
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	4413      	add	r3, r2
 8008edc:	3304      	adds	r3, #4
 8008ede:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	705a      	strb	r2, [r3, #1]
 8008ee6:	e00f      	b.n	8008f08 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008ee8:	78fb      	ldrb	r3, [r7, #3]
 8008eea:	f003 020f 	and.w	r2, r3, #15
 8008eee:	4613      	mov	r3, r2
 8008ef0:	00db      	lsls	r3, r3, #3
 8008ef2:	4413      	add	r3, r2
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	4413      	add	r3, r2
 8008efe:	3304      	adds	r3, #4
 8008f00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2200      	movs	r2, #0
 8008f06:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008f0e:	78fb      	ldrb	r3, [r7, #3]
 8008f10:	f003 030f 	and.w	r3, r3, #15
 8008f14:	b2da      	uxtb	r2, r3
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d101      	bne.n	8008f28 <HAL_PCD_EP_ClrStall+0x86>
 8008f24:	2302      	movs	r3, #2
 8008f26:	e00e      	b.n	8008f46 <HAL_PCD_EP_ClrStall+0xa4>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68f9      	ldr	r1, [r7, #12]
 8008f36:	4618      	mov	r0, r3
 8008f38:	f007 f92c 	bl	8010194 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b084      	sub	sp, #16
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
 8008f56:	460b      	mov	r3, r1
 8008f58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008f5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	da0c      	bge.n	8008f7c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f62:	78fb      	ldrb	r3, [r7, #3]
 8008f64:	f003 020f 	and.w	r2, r3, #15
 8008f68:	4613      	mov	r3, r2
 8008f6a:	00db      	lsls	r3, r3, #3
 8008f6c:	4413      	add	r3, r2
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	3338      	adds	r3, #56	; 0x38
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	4413      	add	r3, r2
 8008f76:	3304      	adds	r3, #4
 8008f78:	60fb      	str	r3, [r7, #12]
 8008f7a:	e00c      	b.n	8008f96 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f7c:	78fb      	ldrb	r3, [r7, #3]
 8008f7e:	f003 020f 	and.w	r2, r3, #15
 8008f82:	4613      	mov	r3, r2
 8008f84:	00db      	lsls	r3, r3, #3
 8008f86:	4413      	add	r3, r2
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	4413      	add	r3, r2
 8008f92:	3304      	adds	r3, #4
 8008f94:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	68f9      	ldr	r1, [r7, #12]
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f006 ff4b 	bl	800fe38 <USB_EPStopXfer>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008fa6:	7afb      	ldrb	r3, [r7, #11]
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3710      	adds	r7, #16
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b08a      	sub	sp, #40	; 0x28
 8008fb4:	af02      	add	r7, sp, #8
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008fc4:	683a      	ldr	r2, [r7, #0]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	00db      	lsls	r3, r3, #3
 8008fca:	4413      	add	r3, r2
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	3338      	adds	r3, #56	; 0x38
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	4413      	add	r3, r2
 8008fd4:	3304      	adds	r3, #4
 8008fd6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6a1a      	ldr	r2, [r3, #32]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	699b      	ldr	r3, [r3, #24]
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d901      	bls.n	8008fe8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e06c      	b.n	80090c2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	699a      	ldr	r2, [r3, #24]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6a1b      	ldr	r3, [r3, #32]
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	69fa      	ldr	r2, [r7, #28]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d902      	bls.n	8009004 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	3303      	adds	r3, #3
 8009008:	089b      	lsrs	r3, r3, #2
 800900a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800900c:	e02b      	b.n	8009066 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	699a      	ldr	r2, [r3, #24]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6a1b      	ldr	r3, [r3, #32]
 8009016:	1ad3      	subs	r3, r2, r3
 8009018:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	69fa      	ldr	r2, [r7, #28]
 8009020:	429a      	cmp	r2, r3
 8009022:	d902      	bls.n	800902a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	3303      	adds	r3, #3
 800902e:	089b      	lsrs	r3, r3, #2
 8009030:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	6919      	ldr	r1, [r3, #16]
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	b2da      	uxtb	r2, r3
 800903a:	69fb      	ldr	r3, [r7, #28]
 800903c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009042:	b2db      	uxtb	r3, r3
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	4603      	mov	r3, r0
 8009048:	6978      	ldr	r0, [r7, #20]
 800904a:	f006 ff9f 	bl	800ff8c <USB_WritePacket>

    ep->xfer_buff  += len;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	691a      	ldr	r2, [r3, #16]
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	441a      	add	r2, r3
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	6a1a      	ldr	r2, [r3, #32]
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	441a      	add	r2, r3
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	015a      	lsls	r2, r3, #5
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	4413      	add	r3, r2
 800906e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009072:	699b      	ldr	r3, [r3, #24]
 8009074:	b29b      	uxth	r3, r3
 8009076:	69ba      	ldr	r2, [r7, #24]
 8009078:	429a      	cmp	r2, r3
 800907a:	d809      	bhi.n	8009090 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6a1a      	ldr	r2, [r3, #32]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009084:	429a      	cmp	r2, r3
 8009086:	d203      	bcs.n	8009090 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	699b      	ldr	r3, [r3, #24]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d1be      	bne.n	800900e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	699a      	ldr	r2, [r3, #24]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6a1b      	ldr	r3, [r3, #32]
 8009098:	429a      	cmp	r2, r3
 800909a:	d811      	bhi.n	80090c0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	f003 030f 	and.w	r3, r3, #15
 80090a2:	2201      	movs	r2, #1
 80090a4:	fa02 f303 	lsl.w	r3, r2, r3
 80090a8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	43db      	mvns	r3, r3
 80090b6:	6939      	ldr	r1, [r7, #16]
 80090b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090bc:	4013      	ands	r3, r2
 80090be:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3720      	adds	r7, #32
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
	...

080090cc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b088      	sub	sp, #32
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	333c      	adds	r3, #60	; 0x3c
 80090e4:	3304      	adds	r3, #4
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	015a      	lsls	r2, r3, #5
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	4413      	add	r3, r2
 80090f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	691b      	ldr	r3, [r3, #16]
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d17b      	bne.n	80091fa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	f003 0308 	and.w	r3, r3, #8
 8009108:	2b00      	cmp	r3, #0
 800910a:	d015      	beq.n	8009138 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	4a61      	ldr	r2, [pc, #388]	; (8009294 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009110:	4293      	cmp	r3, r2
 8009112:	f240 80b9 	bls.w	8009288 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800911c:	2b00      	cmp	r3, #0
 800911e:	f000 80b3 	beq.w	8009288 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	015a      	lsls	r2, r3, #5
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	4413      	add	r3, r2
 800912a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800912e:	461a      	mov	r2, r3
 8009130:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009134:	6093      	str	r3, [r2, #8]
 8009136:	e0a7      	b.n	8009288 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	f003 0320 	and.w	r3, r3, #32
 800913e:	2b00      	cmp	r3, #0
 8009140:	d009      	beq.n	8009156 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	015a      	lsls	r2, r3, #5
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	4413      	add	r3, r2
 800914a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800914e:	461a      	mov	r2, r3
 8009150:	2320      	movs	r3, #32
 8009152:	6093      	str	r3, [r2, #8]
 8009154:	e098      	b.n	8009288 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800915c:	2b00      	cmp	r3, #0
 800915e:	f040 8093 	bne.w	8009288 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	4a4b      	ldr	r2, [pc, #300]	; (8009294 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d90f      	bls.n	800918a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009170:	2b00      	cmp	r3, #0
 8009172:	d00a      	beq.n	800918a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	015a      	lsls	r2, r3, #5
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	4413      	add	r3, r2
 800917c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009180:	461a      	mov	r2, r3
 8009182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009186:	6093      	str	r3, [r2, #8]
 8009188:	e07e      	b.n	8009288 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800918a:	683a      	ldr	r2, [r7, #0]
 800918c:	4613      	mov	r3, r2
 800918e:	00db      	lsls	r3, r3, #3
 8009190:	4413      	add	r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	4413      	add	r3, r2
 800919c:	3304      	adds	r3, #4
 800919e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	69da      	ldr	r2, [r3, #28]
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	0159      	lsls	r1, r3, #5
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	440b      	add	r3, r1
 80091ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091b0:	691b      	ldr	r3, [r3, #16]
 80091b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091b6:	1ad2      	subs	r2, r2, r3
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d114      	bne.n	80091ec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	699b      	ldr	r3, [r3, #24]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d109      	bne.n	80091de <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6818      	ldr	r0, [r3, #0]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80091d4:	461a      	mov	r2, r3
 80091d6:	2101      	movs	r1, #1
 80091d8:	f007 f970 	bl	80104bc <USB_EP0_OutStart>
 80091dc:	e006      	b.n	80091ec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	691a      	ldr	r2, [r3, #16]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	6a1b      	ldr	r3, [r3, #32]
 80091e6:	441a      	add	r2, r3
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	4619      	mov	r1, r3
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f009 fcc4 	bl	8012b80 <HAL_PCD_DataOutStageCallback>
 80091f8:	e046      	b.n	8009288 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	4a26      	ldr	r2, [pc, #152]	; (8009298 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d124      	bne.n	800924c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009208:	2b00      	cmp	r3, #0
 800920a:	d00a      	beq.n	8009222 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	015a      	lsls	r2, r3, #5
 8009210:	69bb      	ldr	r3, [r7, #24]
 8009212:	4413      	add	r3, r2
 8009214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009218:	461a      	mov	r2, r3
 800921a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800921e:	6093      	str	r3, [r2, #8]
 8009220:	e032      	b.n	8009288 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	f003 0320 	and.w	r3, r3, #32
 8009228:	2b00      	cmp	r3, #0
 800922a:	d008      	beq.n	800923e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	015a      	lsls	r2, r3, #5
 8009230:	69bb      	ldr	r3, [r7, #24]
 8009232:	4413      	add	r3, r2
 8009234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009238:	461a      	mov	r2, r3
 800923a:	2320      	movs	r3, #32
 800923c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	b2db      	uxtb	r3, r3
 8009242:	4619      	mov	r1, r3
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f009 fc9b 	bl	8012b80 <HAL_PCD_DataOutStageCallback>
 800924a:	e01d      	b.n	8009288 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d114      	bne.n	800927c <PCD_EP_OutXfrComplete_int+0x1b0>
 8009252:	6879      	ldr	r1, [r7, #4]
 8009254:	683a      	ldr	r2, [r7, #0]
 8009256:	4613      	mov	r3, r2
 8009258:	00db      	lsls	r3, r3, #3
 800925a:	4413      	add	r3, r2
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	440b      	add	r3, r1
 8009260:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d108      	bne.n	800927c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6818      	ldr	r0, [r3, #0]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009274:	461a      	mov	r2, r3
 8009276:	2100      	movs	r1, #0
 8009278:	f007 f920 	bl	80104bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	b2db      	uxtb	r3, r3
 8009280:	4619      	mov	r1, r3
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f009 fc7c 	bl	8012b80 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009288:	2300      	movs	r3, #0
}
 800928a:	4618      	mov	r0, r3
 800928c:	3720      	adds	r7, #32
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	4f54300a 	.word	0x4f54300a
 8009298:	4f54310a 	.word	0x4f54310a

0800929c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b086      	sub	sp, #24
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	333c      	adds	r3, #60	; 0x3c
 80092b4:	3304      	adds	r3, #4
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	015a      	lsls	r2, r3, #5
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	4413      	add	r3, r2
 80092c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	4a15      	ldr	r2, [pc, #84]	; (8009324 <PCD_EP_OutSetupPacket_int+0x88>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d90e      	bls.n	80092f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d009      	beq.n	80092f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	015a      	lsls	r2, r3, #5
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	4413      	add	r3, r2
 80092e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092e8:	461a      	mov	r2, r3
 80092ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f009 fc33 	bl	8012b5c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	4a0a      	ldr	r2, [pc, #40]	; (8009324 <PCD_EP_OutSetupPacket_int+0x88>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d90c      	bls.n	8009318 <PCD_EP_OutSetupPacket_int+0x7c>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	2b01      	cmp	r3, #1
 8009304:	d108      	bne.n	8009318 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6818      	ldr	r0, [r3, #0]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009310:	461a      	mov	r2, r3
 8009312:	2101      	movs	r1, #1
 8009314:	f007 f8d2 	bl	80104bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009318:	2300      	movs	r3, #0
}
 800931a:	4618      	mov	r0, r3
 800931c:	3718      	adds	r7, #24
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	4f54300a 	.word	0x4f54300a

08009328 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009328:	b480      	push	{r7}
 800932a:	b085      	sub	sp, #20
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	460b      	mov	r3, r1
 8009332:	70fb      	strb	r3, [r7, #3]
 8009334:	4613      	mov	r3, r2
 8009336:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800933e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009340:	78fb      	ldrb	r3, [r7, #3]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d107      	bne.n	8009356 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009346:	883b      	ldrh	r3, [r7, #0]
 8009348:	0419      	lsls	r1, r3, #16
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	68ba      	ldr	r2, [r7, #8]
 8009350:	430a      	orrs	r2, r1
 8009352:	629a      	str	r2, [r3, #40]	; 0x28
 8009354:	e028      	b.n	80093a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800935c:	0c1b      	lsrs	r3, r3, #16
 800935e:	68ba      	ldr	r2, [r7, #8]
 8009360:	4413      	add	r3, r2
 8009362:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009364:	2300      	movs	r3, #0
 8009366:	73fb      	strb	r3, [r7, #15]
 8009368:	e00d      	b.n	8009386 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	7bfb      	ldrb	r3, [r7, #15]
 8009370:	3340      	adds	r3, #64	; 0x40
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	4413      	add	r3, r2
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	0c1b      	lsrs	r3, r3, #16
 800937a:	68ba      	ldr	r2, [r7, #8]
 800937c:	4413      	add	r3, r2
 800937e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009380:	7bfb      	ldrb	r3, [r7, #15]
 8009382:	3301      	adds	r3, #1
 8009384:	73fb      	strb	r3, [r7, #15]
 8009386:	7bfa      	ldrb	r2, [r7, #15]
 8009388:	78fb      	ldrb	r3, [r7, #3]
 800938a:	3b01      	subs	r3, #1
 800938c:	429a      	cmp	r2, r3
 800938e:	d3ec      	bcc.n	800936a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009390:	883b      	ldrh	r3, [r7, #0]
 8009392:	0418      	lsls	r0, r3, #16
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6819      	ldr	r1, [r3, #0]
 8009398:	78fb      	ldrb	r3, [r7, #3]
 800939a:	3b01      	subs	r3, #1
 800939c:	68ba      	ldr	r2, [r7, #8]
 800939e:	4302      	orrs	r2, r0
 80093a0:	3340      	adds	r3, #64	; 0x40
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	440b      	add	r3, r1
 80093a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3714      	adds	r7, #20
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr

080093b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80093b6:	b480      	push	{r7}
 80093b8:	b083      	sub	sp, #12
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
 80093be:	460b      	mov	r3, r1
 80093c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	887a      	ldrh	r2, [r7, #2]
 80093c8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80093ca:	2300      	movs	r3, #0
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	370c      	adds	r7, #12
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80093d8:	b480      	push	{r7}
 80093da:	b085      	sub	sp, #20
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2201      	movs	r2, #1
 80093ea:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2200      	movs	r2, #0
 80093f2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	699b      	ldr	r3, [r3, #24]
 80093fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009406:	4b05      	ldr	r3, [pc, #20]	; (800941c <HAL_PCDEx_ActivateLPM+0x44>)
 8009408:	4313      	orrs	r3, r2
 800940a:	68fa      	ldr	r2, [r7, #12]
 800940c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	3714      	adds	r7, #20
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr
 800941c:	10000003 	.word	0x10000003

08009420 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	460b      	mov	r3, r1
 800942a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800942c:	bf00      	nop
 800942e:	370c      	adds	r7, #12
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr

08009438 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8009440:	4b29      	ldr	r3, [pc, #164]	; (80094e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	f003 0307 	and.w	r3, r3, #7
 8009448:	2b06      	cmp	r3, #6
 800944a:	d00a      	beq.n	8009462 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800944c:	4b26      	ldr	r3, [pc, #152]	; (80094e8 <HAL_PWREx_ConfigSupply+0xb0>)
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	429a      	cmp	r2, r3
 8009458:	d001      	beq.n	800945e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	e040      	b.n	80094e0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800945e:	2300      	movs	r3, #0
 8009460:	e03e      	b.n	80094e0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009462:	4b21      	ldr	r3, [pc, #132]	; (80094e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8009464:	68db      	ldr	r3, [r3, #12]
 8009466:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800946a:	491f      	ldr	r1, [pc, #124]	; (80094e8 <HAL_PWREx_ConfigSupply+0xb0>)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4313      	orrs	r3, r2
 8009470:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009472:	f7f9 f971 	bl	8002758 <HAL_GetTick>
 8009476:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009478:	e009      	b.n	800948e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800947a:	f7f9 f96d 	bl	8002758 <HAL_GetTick>
 800947e:	4602      	mov	r2, r0
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	1ad3      	subs	r3, r2, r3
 8009484:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009488:	d901      	bls.n	800948e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800948a:	2301      	movs	r3, #1
 800948c:	e028      	b.n	80094e0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800948e:	4b16      	ldr	r3, [pc, #88]	; (80094e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800949a:	d1ee      	bne.n	800947a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2b1e      	cmp	r3, #30
 80094a0:	d008      	beq.n	80094b4 <HAL_PWREx_ConfigSupply+0x7c>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2b2e      	cmp	r3, #46	; 0x2e
 80094a6:	d005      	beq.n	80094b4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2b1d      	cmp	r3, #29
 80094ac:	d002      	beq.n	80094b4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2b2d      	cmp	r3, #45	; 0x2d
 80094b2:	d114      	bne.n	80094de <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80094b4:	f7f9 f950 	bl	8002758 <HAL_GetTick>
 80094b8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80094ba:	e009      	b.n	80094d0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80094bc:	f7f9 f94c 	bl	8002758 <HAL_GetTick>
 80094c0:	4602      	mov	r2, r0
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	1ad3      	subs	r3, r2, r3
 80094c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094ca:	d901      	bls.n	80094d0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80094cc:	2301      	movs	r3, #1
 80094ce:	e007      	b.n	80094e0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80094d0:	4b05      	ldr	r3, [pc, #20]	; (80094e8 <HAL_PWREx_ConfigSupply+0xb0>)
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094dc:	d1ee      	bne.n	80094bc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80094de:	2300      	movs	r3, #0
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	58024800 	.word	0x58024800

080094ec <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80094ec:	b480      	push	{r7}
 80094ee:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80094f0:	4b05      	ldr	r3, [pc, #20]	; (8009508 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	4a04      	ldr	r2, [pc, #16]	; (8009508 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80094f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80094fa:	60d3      	str	r3, [r2, #12]
}
 80094fc:	bf00      	nop
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr
 8009506:	bf00      	nop
 8009508:	58024800 	.word	0x58024800

0800950c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b08c      	sub	sp, #48	; 0x30
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d102      	bne.n	8009520 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800951a:	2301      	movs	r3, #1
 800951c:	f000 bc1d 	b.w	8009d5a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f003 0301 	and.w	r3, r3, #1
 8009528:	2b00      	cmp	r3, #0
 800952a:	f000 8087 	beq.w	800963c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800952e:	4b99      	ldr	r3, [pc, #612]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 8009530:	691b      	ldr	r3, [r3, #16]
 8009532:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009536:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009538:	4b96      	ldr	r3, [pc, #600]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 800953a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800953c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800953e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009540:	2b10      	cmp	r3, #16
 8009542:	d007      	beq.n	8009554 <HAL_RCC_OscConfig+0x48>
 8009544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009546:	2b18      	cmp	r3, #24
 8009548:	d110      	bne.n	800956c <HAL_RCC_OscConfig+0x60>
 800954a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800954c:	f003 0303 	and.w	r3, r3, #3
 8009550:	2b02      	cmp	r3, #2
 8009552:	d10b      	bne.n	800956c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009554:	4b8f      	ldr	r3, [pc, #572]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800955c:	2b00      	cmp	r3, #0
 800955e:	d06c      	beq.n	800963a <HAL_RCC_OscConfig+0x12e>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d168      	bne.n	800963a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8009568:	2301      	movs	r3, #1
 800956a:	e3f6      	b.n	8009d5a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009574:	d106      	bne.n	8009584 <HAL_RCC_OscConfig+0x78>
 8009576:	4b87      	ldr	r3, [pc, #540]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4a86      	ldr	r2, [pc, #536]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 800957c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009580:	6013      	str	r3, [r2, #0]
 8009582:	e02e      	b.n	80095e2 <HAL_RCC_OscConfig+0xd6>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d10c      	bne.n	80095a6 <HAL_RCC_OscConfig+0x9a>
 800958c:	4b81      	ldr	r3, [pc, #516]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a80      	ldr	r2, [pc, #512]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 8009592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009596:	6013      	str	r3, [r2, #0]
 8009598:	4b7e      	ldr	r3, [pc, #504]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a7d      	ldr	r2, [pc, #500]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 800959e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80095a2:	6013      	str	r3, [r2, #0]
 80095a4:	e01d      	b.n	80095e2 <HAL_RCC_OscConfig+0xd6>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80095ae:	d10c      	bne.n	80095ca <HAL_RCC_OscConfig+0xbe>
 80095b0:	4b78      	ldr	r3, [pc, #480]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a77      	ldr	r2, [pc, #476]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 80095b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80095ba:	6013      	str	r3, [r2, #0]
 80095bc:	4b75      	ldr	r3, [pc, #468]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a74      	ldr	r2, [pc, #464]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 80095c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095c6:	6013      	str	r3, [r2, #0]
 80095c8:	e00b      	b.n	80095e2 <HAL_RCC_OscConfig+0xd6>
 80095ca:	4b72      	ldr	r3, [pc, #456]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a71      	ldr	r2, [pc, #452]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 80095d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095d4:	6013      	str	r3, [r2, #0]
 80095d6:	4b6f      	ldr	r3, [pc, #444]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a6e      	ldr	r2, [pc, #440]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 80095dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80095e0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d013      	beq.n	8009612 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095ea:	f7f9 f8b5 	bl	8002758 <HAL_GetTick>
 80095ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80095f0:	e008      	b.n	8009604 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80095f2:	f7f9 f8b1 	bl	8002758 <HAL_GetTick>
 80095f6:	4602      	mov	r2, r0
 80095f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fa:	1ad3      	subs	r3, r2, r3
 80095fc:	2b64      	cmp	r3, #100	; 0x64
 80095fe:	d901      	bls.n	8009604 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8009600:	2303      	movs	r3, #3
 8009602:	e3aa      	b.n	8009d5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009604:	4b63      	ldr	r3, [pc, #396]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800960c:	2b00      	cmp	r3, #0
 800960e:	d0f0      	beq.n	80095f2 <HAL_RCC_OscConfig+0xe6>
 8009610:	e014      	b.n	800963c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009612:	f7f9 f8a1 	bl	8002758 <HAL_GetTick>
 8009616:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009618:	e008      	b.n	800962c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800961a:	f7f9 f89d 	bl	8002758 <HAL_GetTick>
 800961e:	4602      	mov	r2, r0
 8009620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009622:	1ad3      	subs	r3, r2, r3
 8009624:	2b64      	cmp	r3, #100	; 0x64
 8009626:	d901      	bls.n	800962c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8009628:	2303      	movs	r3, #3
 800962a:	e396      	b.n	8009d5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800962c:	4b59      	ldr	r3, [pc, #356]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009634:	2b00      	cmp	r3, #0
 8009636:	d1f0      	bne.n	800961a <HAL_RCC_OscConfig+0x10e>
 8009638:	e000      	b.n	800963c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800963a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f003 0302 	and.w	r3, r3, #2
 8009644:	2b00      	cmp	r3, #0
 8009646:	f000 80cb 	beq.w	80097e0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800964a:	4b52      	ldr	r3, [pc, #328]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009652:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009654:	4b4f      	ldr	r3, [pc, #316]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 8009656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009658:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800965a:	6a3b      	ldr	r3, [r7, #32]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d007      	beq.n	8009670 <HAL_RCC_OscConfig+0x164>
 8009660:	6a3b      	ldr	r3, [r7, #32]
 8009662:	2b18      	cmp	r3, #24
 8009664:	d156      	bne.n	8009714 <HAL_RCC_OscConfig+0x208>
 8009666:	69fb      	ldr	r3, [r7, #28]
 8009668:	f003 0303 	and.w	r3, r3, #3
 800966c:	2b00      	cmp	r3, #0
 800966e:	d151      	bne.n	8009714 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009670:	4b48      	ldr	r3, [pc, #288]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f003 0304 	and.w	r3, r3, #4
 8009678:	2b00      	cmp	r3, #0
 800967a:	d005      	beq.n	8009688 <HAL_RCC_OscConfig+0x17c>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d101      	bne.n	8009688 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8009684:	2301      	movs	r3, #1
 8009686:	e368      	b.n	8009d5a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009688:	4b42      	ldr	r3, [pc, #264]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f023 0219 	bic.w	r2, r3, #25
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	493f      	ldr	r1, [pc, #252]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 8009696:	4313      	orrs	r3, r2
 8009698:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800969a:	f7f9 f85d 	bl	8002758 <HAL_GetTick>
 800969e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80096a0:	e008      	b.n	80096b4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80096a2:	f7f9 f859 	bl	8002758 <HAL_GetTick>
 80096a6:	4602      	mov	r2, r0
 80096a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096aa:	1ad3      	subs	r3, r2, r3
 80096ac:	2b02      	cmp	r3, #2
 80096ae:	d901      	bls.n	80096b4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80096b0:	2303      	movs	r3, #3
 80096b2:	e352      	b.n	8009d5a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80096b4:	4b37      	ldr	r3, [pc, #220]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f003 0304 	and.w	r3, r3, #4
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d0f0      	beq.n	80096a2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80096c0:	f7f9 f87a 	bl	80027b8 <HAL_GetREVID>
 80096c4:	4603      	mov	r3, r0
 80096c6:	f241 0203 	movw	r2, #4099	; 0x1003
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d817      	bhi.n	80096fe <HAL_RCC_OscConfig+0x1f2>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	691b      	ldr	r3, [r3, #16]
 80096d2:	2b40      	cmp	r3, #64	; 0x40
 80096d4:	d108      	bne.n	80096e8 <HAL_RCC_OscConfig+0x1dc>
 80096d6:	4b2f      	ldr	r3, [pc, #188]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80096de:	4a2d      	ldr	r2, [pc, #180]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 80096e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096e4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80096e6:	e07b      	b.n	80097e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80096e8:	4b2a      	ldr	r3, [pc, #168]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	691b      	ldr	r3, [r3, #16]
 80096f4:	031b      	lsls	r3, r3, #12
 80096f6:	4927      	ldr	r1, [pc, #156]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 80096f8:	4313      	orrs	r3, r2
 80096fa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80096fc:	e070      	b.n	80097e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80096fe:	4b25      	ldr	r3, [pc, #148]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	691b      	ldr	r3, [r3, #16]
 800970a:	061b      	lsls	r3, r3, #24
 800970c:	4921      	ldr	r1, [pc, #132]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 800970e:	4313      	orrs	r3, r2
 8009710:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009712:	e065      	b.n	80097e0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d048      	beq.n	80097ae <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800971c:	4b1d      	ldr	r3, [pc, #116]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f023 0219 	bic.w	r2, r3, #25
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	68db      	ldr	r3, [r3, #12]
 8009728:	491a      	ldr	r1, [pc, #104]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 800972a:	4313      	orrs	r3, r2
 800972c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800972e:	f7f9 f813 	bl	8002758 <HAL_GetTick>
 8009732:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009734:	e008      	b.n	8009748 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009736:	f7f9 f80f 	bl	8002758 <HAL_GetTick>
 800973a:	4602      	mov	r2, r0
 800973c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973e:	1ad3      	subs	r3, r2, r3
 8009740:	2b02      	cmp	r3, #2
 8009742:	d901      	bls.n	8009748 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8009744:	2303      	movs	r3, #3
 8009746:	e308      	b.n	8009d5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009748:	4b12      	ldr	r3, [pc, #72]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f003 0304 	and.w	r3, r3, #4
 8009750:	2b00      	cmp	r3, #0
 8009752:	d0f0      	beq.n	8009736 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009754:	f7f9 f830 	bl	80027b8 <HAL_GetREVID>
 8009758:	4603      	mov	r3, r0
 800975a:	f241 0203 	movw	r2, #4099	; 0x1003
 800975e:	4293      	cmp	r3, r2
 8009760:	d81a      	bhi.n	8009798 <HAL_RCC_OscConfig+0x28c>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	691b      	ldr	r3, [r3, #16]
 8009766:	2b40      	cmp	r3, #64	; 0x40
 8009768:	d108      	bne.n	800977c <HAL_RCC_OscConfig+0x270>
 800976a:	4b0a      	ldr	r3, [pc, #40]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009772:	4a08      	ldr	r2, [pc, #32]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 8009774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009778:	6053      	str	r3, [r2, #4]
 800977a:	e031      	b.n	80097e0 <HAL_RCC_OscConfig+0x2d4>
 800977c:	4b05      	ldr	r3, [pc, #20]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	691b      	ldr	r3, [r3, #16]
 8009788:	031b      	lsls	r3, r3, #12
 800978a:	4902      	ldr	r1, [pc, #8]	; (8009794 <HAL_RCC_OscConfig+0x288>)
 800978c:	4313      	orrs	r3, r2
 800978e:	604b      	str	r3, [r1, #4]
 8009790:	e026      	b.n	80097e0 <HAL_RCC_OscConfig+0x2d4>
 8009792:	bf00      	nop
 8009794:	58024400 	.word	0x58024400
 8009798:	4b9a      	ldr	r3, [pc, #616]	; (8009a04 <HAL_RCC_OscConfig+0x4f8>)
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	691b      	ldr	r3, [r3, #16]
 80097a4:	061b      	lsls	r3, r3, #24
 80097a6:	4997      	ldr	r1, [pc, #604]	; (8009a04 <HAL_RCC_OscConfig+0x4f8>)
 80097a8:	4313      	orrs	r3, r2
 80097aa:	604b      	str	r3, [r1, #4]
 80097ac:	e018      	b.n	80097e0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80097ae:	4b95      	ldr	r3, [pc, #596]	; (8009a04 <HAL_RCC_OscConfig+0x4f8>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a94      	ldr	r2, [pc, #592]	; (8009a04 <HAL_RCC_OscConfig+0x4f8>)
 80097b4:	f023 0301 	bic.w	r3, r3, #1
 80097b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097ba:	f7f8 ffcd 	bl	8002758 <HAL_GetTick>
 80097be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80097c0:	e008      	b.n	80097d4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80097c2:	f7f8 ffc9 	bl	8002758 <HAL_GetTick>
 80097c6:	4602      	mov	r2, r0
 80097c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ca:	1ad3      	subs	r3, r2, r3
 80097cc:	2b02      	cmp	r3, #2
 80097ce:	d901      	bls.n	80097d4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80097d0:	2303      	movs	r3, #3
 80097d2:	e2c2      	b.n	8009d5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80097d4:	4b8b      	ldr	r3, [pc, #556]	; (8009a04 <HAL_RCC_OscConfig+0x4f8>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f003 0304 	and.w	r3, r3, #4
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d1f0      	bne.n	80097c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f003 0310 	and.w	r3, r3, #16
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	f000 80a9 	beq.w	8009940 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80097ee:	4b85      	ldr	r3, [pc, #532]	; (8009a04 <HAL_RCC_OscConfig+0x4f8>)
 80097f0:	691b      	ldr	r3, [r3, #16]
 80097f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097f6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80097f8:	4b82      	ldr	r3, [pc, #520]	; (8009a04 <HAL_RCC_OscConfig+0x4f8>)
 80097fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097fc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	2b08      	cmp	r3, #8
 8009802:	d007      	beq.n	8009814 <HAL_RCC_OscConfig+0x308>
 8009804:	69bb      	ldr	r3, [r7, #24]
 8009806:	2b18      	cmp	r3, #24
 8009808:	d13a      	bne.n	8009880 <HAL_RCC_OscConfig+0x374>
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	f003 0303 	and.w	r3, r3, #3
 8009810:	2b01      	cmp	r3, #1
 8009812:	d135      	bne.n	8009880 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009814:	4b7b      	ldr	r3, [pc, #492]	; (8009a04 <HAL_RCC_OscConfig+0x4f8>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800981c:	2b00      	cmp	r3, #0
 800981e:	d005      	beq.n	800982c <HAL_RCC_OscConfig+0x320>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	69db      	ldr	r3, [r3, #28]
 8009824:	2b80      	cmp	r3, #128	; 0x80
 8009826:	d001      	beq.n	800982c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009828:	2301      	movs	r3, #1
 800982a:	e296      	b.n	8009d5a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800982c:	f7f8 ffc4 	bl	80027b8 <HAL_GetREVID>
 8009830:	4603      	mov	r3, r0
 8009832:	f241 0203 	movw	r2, #4099	; 0x1003
 8009836:	4293      	cmp	r3, r2
 8009838:	d817      	bhi.n	800986a <HAL_RCC_OscConfig+0x35e>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6a1b      	ldr	r3, [r3, #32]
 800983e:	2b20      	cmp	r3, #32
 8009840:	d108      	bne.n	8009854 <HAL_RCC_OscConfig+0x348>
 8009842:	4b70      	ldr	r3, [pc, #448]	; (8009a04 <HAL_RCC_OscConfig+0x4f8>)
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800984a:	4a6e      	ldr	r2, [pc, #440]	; (8009a04 <HAL_RCC_OscConfig+0x4f8>)
 800984c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009850:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009852:	e075      	b.n	8009940 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009854:	4b6b      	ldr	r3, [pc, #428]	; (8009a04 <HAL_RCC_OscConfig+0x4f8>)
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6a1b      	ldr	r3, [r3, #32]
 8009860:	069b      	lsls	r3, r3, #26
 8009862:	4968      	ldr	r1, [pc, #416]	; (8009a04 <HAL_RCC_OscConfig+0x4f8>)
 8009864:	4313      	orrs	r3, r2
 8009866:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009868:	e06a      	b.n	8009940 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800986a:	4b66      	ldr	r3, [pc, #408]	; (8009a04 <HAL_RCC_OscConfig+0x4f8>)
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6a1b      	ldr	r3, [r3, #32]
 8009876:	061b      	lsls	r3, r3, #24
 8009878:	4962      	ldr	r1, [pc, #392]	; (8009a04 <HAL_RCC_OscConfig+0x4f8>)
 800987a:	4313      	orrs	r3, r2
 800987c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800987e:	e05f      	b.n	8009940 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	69db      	ldr	r3, [r3, #28]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d042      	beq.n	800990e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009888:	4b5e      	ldr	r3, [pc, #376]	; (8009a04 <HAL_RCC_OscConfig+0x4f8>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a5d      	ldr	r2, [pc, #372]	; (8009a04 <HAL_RCC_OscConfig+0x4f8>)
 800988e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009894:	f7f8 ff60 	bl	8002758 <HAL_GetTick>
 8009898:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800989a:	e008      	b.n	80098ae <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800989c:	f7f8 ff5c 	bl	8002758 <HAL_GetTick>
 80098a0:	4602      	mov	r2, r0
 80098a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a4:	1ad3      	subs	r3, r2, r3
 80098a6:	2b02      	cmp	r3, #2
 80098a8:	d901      	bls.n	80098ae <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80098aa:	2303      	movs	r3, #3
 80098ac:	e255      	b.n	8009d5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80098ae:	4b55      	ldr	r3, [pc, #340]	; (8009a04 <HAL_RCC_OscConfig+0x4f8>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d0f0      	beq.n	800989c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80098ba:	f7f8 ff7d 	bl	80027b8 <HAL_GetREVID>
 80098be:	4603      	mov	r3, r0
 80098c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d817      	bhi.n	80098f8 <HAL_RCC_OscConfig+0x3ec>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6a1b      	ldr	r3, [r3, #32]
 80098cc:	2b20      	cmp	r3, #32
 80098ce:	d108      	bne.n	80098e2 <HAL_RCC_OscConfig+0x3d6>
 80098d0:	4b4c      	ldr	r3, [pc, #304]	; (8009a04 <HAL_RCC_OscConfig+0x4f8>)
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80098d8:	4a4a      	ldr	r2, [pc, #296]	; (8009a04 <HAL_RCC_OscConfig+0x4f8>)
 80098da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80098de:	6053      	str	r3, [r2, #4]
 80098e0:	e02e      	b.n	8009940 <HAL_RCC_OscConfig+0x434>
 80098e2:	4b48      	ldr	r3, [pc, #288]	; (8009a04 <HAL_RCC_OscConfig+0x4f8>)
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6a1b      	ldr	r3, [r3, #32]
 80098ee:	069b      	lsls	r3, r3, #26
 80098f0:	4944      	ldr	r1, [pc, #272]	; (8009a04 <HAL_RCC_OscConfig+0x4f8>)
 80098f2:	4313      	orrs	r3, r2
 80098f4:	604b      	str	r3, [r1, #4]
 80098f6:	e023      	b.n	8009940 <HAL_RCC_OscConfig+0x434>
 80098f8:	4b42      	ldr	r3, [pc, #264]	; (8009a04 <HAL_RCC_OscConfig+0x4f8>)
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6a1b      	ldr	r3, [r3, #32]
 8009904:	061b      	lsls	r3, r3, #24
 8009906:	493f      	ldr	r1, [pc, #252]	; (8009a04 <HAL_RCC_OscConfig+0x4f8>)
 8009908:	4313      	orrs	r3, r2
 800990a:	60cb      	str	r3, [r1, #12]
 800990c:	e018      	b.n	8009940 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800990e:	4b3d      	ldr	r3, [pc, #244]	; (8009a04 <HAL_RCC_OscConfig+0x4f8>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a3c      	ldr	r2, [pc, #240]	; (8009a04 <HAL_RCC_OscConfig+0x4f8>)
 8009914:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800991a:	f7f8 ff1d 	bl	8002758 <HAL_GetTick>
 800991e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009920:	e008      	b.n	8009934 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009922:	f7f8 ff19 	bl	8002758 <HAL_GetTick>
 8009926:	4602      	mov	r2, r0
 8009928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992a:	1ad3      	subs	r3, r2, r3
 800992c:	2b02      	cmp	r3, #2
 800992e:	d901      	bls.n	8009934 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009930:	2303      	movs	r3, #3
 8009932:	e212      	b.n	8009d5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009934:	4b33      	ldr	r3, [pc, #204]	; (8009a04 <HAL_RCC_OscConfig+0x4f8>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800993c:	2b00      	cmp	r3, #0
 800993e:	d1f0      	bne.n	8009922 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f003 0308 	and.w	r3, r3, #8
 8009948:	2b00      	cmp	r3, #0
 800994a:	d036      	beq.n	80099ba <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	695b      	ldr	r3, [r3, #20]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d019      	beq.n	8009988 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009954:	4b2b      	ldr	r3, [pc, #172]	; (8009a04 <HAL_RCC_OscConfig+0x4f8>)
 8009956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009958:	4a2a      	ldr	r2, [pc, #168]	; (8009a04 <HAL_RCC_OscConfig+0x4f8>)
 800995a:	f043 0301 	orr.w	r3, r3, #1
 800995e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009960:	f7f8 fefa 	bl	8002758 <HAL_GetTick>
 8009964:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009966:	e008      	b.n	800997a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009968:	f7f8 fef6 	bl	8002758 <HAL_GetTick>
 800996c:	4602      	mov	r2, r0
 800996e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009970:	1ad3      	subs	r3, r2, r3
 8009972:	2b02      	cmp	r3, #2
 8009974:	d901      	bls.n	800997a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009976:	2303      	movs	r3, #3
 8009978:	e1ef      	b.n	8009d5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800997a:	4b22      	ldr	r3, [pc, #136]	; (8009a04 <HAL_RCC_OscConfig+0x4f8>)
 800997c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800997e:	f003 0302 	and.w	r3, r3, #2
 8009982:	2b00      	cmp	r3, #0
 8009984:	d0f0      	beq.n	8009968 <HAL_RCC_OscConfig+0x45c>
 8009986:	e018      	b.n	80099ba <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009988:	4b1e      	ldr	r3, [pc, #120]	; (8009a04 <HAL_RCC_OscConfig+0x4f8>)
 800998a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800998c:	4a1d      	ldr	r2, [pc, #116]	; (8009a04 <HAL_RCC_OscConfig+0x4f8>)
 800998e:	f023 0301 	bic.w	r3, r3, #1
 8009992:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009994:	f7f8 fee0 	bl	8002758 <HAL_GetTick>
 8009998:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800999a:	e008      	b.n	80099ae <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800999c:	f7f8 fedc 	bl	8002758 <HAL_GetTick>
 80099a0:	4602      	mov	r2, r0
 80099a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a4:	1ad3      	subs	r3, r2, r3
 80099a6:	2b02      	cmp	r3, #2
 80099a8:	d901      	bls.n	80099ae <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80099aa:	2303      	movs	r3, #3
 80099ac:	e1d5      	b.n	8009d5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80099ae:	4b15      	ldr	r3, [pc, #84]	; (8009a04 <HAL_RCC_OscConfig+0x4f8>)
 80099b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099b2:	f003 0302 	and.w	r3, r3, #2
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d1f0      	bne.n	800999c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f003 0320 	and.w	r3, r3, #32
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d039      	beq.n	8009a3a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	699b      	ldr	r3, [r3, #24]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d01c      	beq.n	8009a08 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80099ce:	4b0d      	ldr	r3, [pc, #52]	; (8009a04 <HAL_RCC_OscConfig+0x4f8>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a0c      	ldr	r2, [pc, #48]	; (8009a04 <HAL_RCC_OscConfig+0x4f8>)
 80099d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80099d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80099da:	f7f8 febd 	bl	8002758 <HAL_GetTick>
 80099de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80099e0:	e008      	b.n	80099f4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80099e2:	f7f8 feb9 	bl	8002758 <HAL_GetTick>
 80099e6:	4602      	mov	r2, r0
 80099e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ea:	1ad3      	subs	r3, r2, r3
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	d901      	bls.n	80099f4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80099f0:	2303      	movs	r3, #3
 80099f2:	e1b2      	b.n	8009d5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80099f4:	4b03      	ldr	r3, [pc, #12]	; (8009a04 <HAL_RCC_OscConfig+0x4f8>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d0f0      	beq.n	80099e2 <HAL_RCC_OscConfig+0x4d6>
 8009a00:	e01b      	b.n	8009a3a <HAL_RCC_OscConfig+0x52e>
 8009a02:	bf00      	nop
 8009a04:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009a08:	4b9b      	ldr	r3, [pc, #620]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a9a      	ldr	r2, [pc, #616]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009a0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a12:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009a14:	f7f8 fea0 	bl	8002758 <HAL_GetTick>
 8009a18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009a1a:	e008      	b.n	8009a2e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009a1c:	f7f8 fe9c 	bl	8002758 <HAL_GetTick>
 8009a20:	4602      	mov	r2, r0
 8009a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a24:	1ad3      	subs	r3, r2, r3
 8009a26:	2b02      	cmp	r3, #2
 8009a28:	d901      	bls.n	8009a2e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	e195      	b.n	8009d5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009a2e:	4b92      	ldr	r3, [pc, #584]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d1f0      	bne.n	8009a1c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f003 0304 	and.w	r3, r3, #4
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	f000 8081 	beq.w	8009b4a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009a48:	4b8c      	ldr	r3, [pc, #560]	; (8009c7c <HAL_RCC_OscConfig+0x770>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a8b      	ldr	r2, [pc, #556]	; (8009c7c <HAL_RCC_OscConfig+0x770>)
 8009a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009a54:	f7f8 fe80 	bl	8002758 <HAL_GetTick>
 8009a58:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a5a:	e008      	b.n	8009a6e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009a5c:	f7f8 fe7c 	bl	8002758 <HAL_GetTick>
 8009a60:	4602      	mov	r2, r0
 8009a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a64:	1ad3      	subs	r3, r2, r3
 8009a66:	2b64      	cmp	r3, #100	; 0x64
 8009a68:	d901      	bls.n	8009a6e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009a6a:	2303      	movs	r3, #3
 8009a6c:	e175      	b.n	8009d5a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a6e:	4b83      	ldr	r3, [pc, #524]	; (8009c7c <HAL_RCC_OscConfig+0x770>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d0f0      	beq.n	8009a5c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d106      	bne.n	8009a90 <HAL_RCC_OscConfig+0x584>
 8009a82:	4b7d      	ldr	r3, [pc, #500]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a86:	4a7c      	ldr	r2, [pc, #496]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009a88:	f043 0301 	orr.w	r3, r3, #1
 8009a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8009a8e:	e02d      	b.n	8009aec <HAL_RCC_OscConfig+0x5e0>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d10c      	bne.n	8009ab2 <HAL_RCC_OscConfig+0x5a6>
 8009a98:	4b77      	ldr	r3, [pc, #476]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a9c:	4a76      	ldr	r2, [pc, #472]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009a9e:	f023 0301 	bic.w	r3, r3, #1
 8009aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8009aa4:	4b74      	ldr	r3, [pc, #464]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aa8:	4a73      	ldr	r2, [pc, #460]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009aaa:	f023 0304 	bic.w	r3, r3, #4
 8009aae:	6713      	str	r3, [r2, #112]	; 0x70
 8009ab0:	e01c      	b.n	8009aec <HAL_RCC_OscConfig+0x5e0>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	2b05      	cmp	r3, #5
 8009ab8:	d10c      	bne.n	8009ad4 <HAL_RCC_OscConfig+0x5c8>
 8009aba:	4b6f      	ldr	r3, [pc, #444]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009abe:	4a6e      	ldr	r2, [pc, #440]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009ac0:	f043 0304 	orr.w	r3, r3, #4
 8009ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8009ac6:	4b6c      	ldr	r3, [pc, #432]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aca:	4a6b      	ldr	r2, [pc, #428]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009acc:	f043 0301 	orr.w	r3, r3, #1
 8009ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8009ad2:	e00b      	b.n	8009aec <HAL_RCC_OscConfig+0x5e0>
 8009ad4:	4b68      	ldr	r3, [pc, #416]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ad8:	4a67      	ldr	r2, [pc, #412]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009ada:	f023 0301 	bic.w	r3, r3, #1
 8009ade:	6713      	str	r3, [r2, #112]	; 0x70
 8009ae0:	4b65      	ldr	r3, [pc, #404]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ae4:	4a64      	ldr	r2, [pc, #400]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009ae6:	f023 0304 	bic.w	r3, r3, #4
 8009aea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d015      	beq.n	8009b20 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009af4:	f7f8 fe30 	bl	8002758 <HAL_GetTick>
 8009af8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009afa:	e00a      	b.n	8009b12 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009afc:	f7f8 fe2c 	bl	8002758 <HAL_GetTick>
 8009b00:	4602      	mov	r2, r0
 8009b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b04:	1ad3      	subs	r3, r2, r3
 8009b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d901      	bls.n	8009b12 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8009b0e:	2303      	movs	r3, #3
 8009b10:	e123      	b.n	8009d5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009b12:	4b59      	ldr	r3, [pc, #356]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b16:	f003 0302 	and.w	r3, r3, #2
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d0ee      	beq.n	8009afc <HAL_RCC_OscConfig+0x5f0>
 8009b1e:	e014      	b.n	8009b4a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b20:	f7f8 fe1a 	bl	8002758 <HAL_GetTick>
 8009b24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009b26:	e00a      	b.n	8009b3e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b28:	f7f8 fe16 	bl	8002758 <HAL_GetTick>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b30:	1ad3      	subs	r3, r2, r3
 8009b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d901      	bls.n	8009b3e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009b3a:	2303      	movs	r3, #3
 8009b3c:	e10d      	b.n	8009d5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009b3e:	4b4e      	ldr	r3, [pc, #312]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b42:	f003 0302 	and.w	r3, r3, #2
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d1ee      	bne.n	8009b28 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	f000 8102 	beq.w	8009d58 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009b54:	4b48      	ldr	r3, [pc, #288]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009b56:	691b      	ldr	r3, [r3, #16]
 8009b58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b5c:	2b18      	cmp	r3, #24
 8009b5e:	f000 80bd 	beq.w	8009cdc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b66:	2b02      	cmp	r3, #2
 8009b68:	f040 809e 	bne.w	8009ca8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b6c:	4b42      	ldr	r3, [pc, #264]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a41      	ldr	r2, [pc, #260]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009b72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b78:	f7f8 fdee 	bl	8002758 <HAL_GetTick>
 8009b7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b7e:	e008      	b.n	8009b92 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b80:	f7f8 fdea 	bl	8002758 <HAL_GetTick>
 8009b84:	4602      	mov	r2, r0
 8009b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	2b02      	cmp	r3, #2
 8009b8c:	d901      	bls.n	8009b92 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009b8e:	2303      	movs	r3, #3
 8009b90:	e0e3      	b.n	8009d5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b92:	4b39      	ldr	r3, [pc, #228]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d1f0      	bne.n	8009b80 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009b9e:	4b36      	ldr	r3, [pc, #216]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009ba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ba2:	4b37      	ldr	r3, [pc, #220]	; (8009c80 <HAL_RCC_OscConfig+0x774>)
 8009ba4:	4013      	ands	r3, r2
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009bae:	0112      	lsls	r2, r2, #4
 8009bb0:	430a      	orrs	r2, r1
 8009bb2:	4931      	ldr	r1, [pc, #196]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	628b      	str	r3, [r1, #40]	; 0x28
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bbc:	3b01      	subs	r3, #1
 8009bbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bc6:	3b01      	subs	r3, #1
 8009bc8:	025b      	lsls	r3, r3, #9
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	431a      	orrs	r2, r3
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd2:	3b01      	subs	r3, #1
 8009bd4:	041b      	lsls	r3, r3, #16
 8009bd6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009bda:	431a      	orrs	r2, r3
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009be0:	3b01      	subs	r3, #1
 8009be2:	061b      	lsls	r3, r3, #24
 8009be4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009be8:	4923      	ldr	r1, [pc, #140]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009bea:	4313      	orrs	r3, r2
 8009bec:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009bee:	4b22      	ldr	r3, [pc, #136]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf2:	4a21      	ldr	r2, [pc, #132]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009bf4:	f023 0301 	bic.w	r3, r3, #1
 8009bf8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009bfa:	4b1f      	ldr	r3, [pc, #124]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009bfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bfe:	4b21      	ldr	r3, [pc, #132]	; (8009c84 <HAL_RCC_OscConfig+0x778>)
 8009c00:	4013      	ands	r3, r2
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009c06:	00d2      	lsls	r2, r2, #3
 8009c08:	491b      	ldr	r1, [pc, #108]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009c0e:	4b1a      	ldr	r3, [pc, #104]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c12:	f023 020c 	bic.w	r2, r3, #12
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c1a:	4917      	ldr	r1, [pc, #92]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009c1c:	4313      	orrs	r3, r2
 8009c1e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009c20:	4b15      	ldr	r3, [pc, #84]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c24:	f023 0202 	bic.w	r2, r3, #2
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c2c:	4912      	ldr	r1, [pc, #72]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009c32:	4b11      	ldr	r3, [pc, #68]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c36:	4a10      	ldr	r2, [pc, #64]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c3e:	4b0e      	ldr	r3, [pc, #56]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c42:	4a0d      	ldr	r2, [pc, #52]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009c4a:	4b0b      	ldr	r3, [pc, #44]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c4e:	4a0a      	ldr	r2, [pc, #40]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009c54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009c56:	4b08      	ldr	r3, [pc, #32]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c5a:	4a07      	ldr	r2, [pc, #28]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009c5c:	f043 0301 	orr.w	r3, r3, #1
 8009c60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009c62:	4b05      	ldr	r3, [pc, #20]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a04      	ldr	r2, [pc, #16]	; (8009c78 <HAL_RCC_OscConfig+0x76c>)
 8009c68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c6e:	f7f8 fd73 	bl	8002758 <HAL_GetTick>
 8009c72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009c74:	e011      	b.n	8009c9a <HAL_RCC_OscConfig+0x78e>
 8009c76:	bf00      	nop
 8009c78:	58024400 	.word	0x58024400
 8009c7c:	58024800 	.word	0x58024800
 8009c80:	fffffc0c 	.word	0xfffffc0c
 8009c84:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c88:	f7f8 fd66 	bl	8002758 <HAL_GetTick>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c90:	1ad3      	subs	r3, r2, r3
 8009c92:	2b02      	cmp	r3, #2
 8009c94:	d901      	bls.n	8009c9a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009c96:	2303      	movs	r3, #3
 8009c98:	e05f      	b.n	8009d5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009c9a:	4b32      	ldr	r3, [pc, #200]	; (8009d64 <HAL_RCC_OscConfig+0x858>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d0f0      	beq.n	8009c88 <HAL_RCC_OscConfig+0x77c>
 8009ca6:	e057      	b.n	8009d58 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ca8:	4b2e      	ldr	r3, [pc, #184]	; (8009d64 <HAL_RCC_OscConfig+0x858>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a2d      	ldr	r2, [pc, #180]	; (8009d64 <HAL_RCC_OscConfig+0x858>)
 8009cae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cb4:	f7f8 fd50 	bl	8002758 <HAL_GetTick>
 8009cb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009cba:	e008      	b.n	8009cce <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009cbc:	f7f8 fd4c 	bl	8002758 <HAL_GetTick>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc4:	1ad3      	subs	r3, r2, r3
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	d901      	bls.n	8009cce <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8009cca:	2303      	movs	r3, #3
 8009ccc:	e045      	b.n	8009d5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009cce:	4b25      	ldr	r3, [pc, #148]	; (8009d64 <HAL_RCC_OscConfig+0x858>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d1f0      	bne.n	8009cbc <HAL_RCC_OscConfig+0x7b0>
 8009cda:	e03d      	b.n	8009d58 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009cdc:	4b21      	ldr	r3, [pc, #132]	; (8009d64 <HAL_RCC_OscConfig+0x858>)
 8009cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ce0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009ce2:	4b20      	ldr	r3, [pc, #128]	; (8009d64 <HAL_RCC_OscConfig+0x858>)
 8009ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ce6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d031      	beq.n	8009d54 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	f003 0203 	and.w	r2, r3, #3
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d12a      	bne.n	8009d54 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	091b      	lsrs	r3, r3, #4
 8009d02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d122      	bne.n	8009d54 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d18:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d11a      	bne.n	8009d54 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	0a5b      	lsrs	r3, r3, #9
 8009d22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d2a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d111      	bne.n	8009d54 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	0c1b      	lsrs	r3, r3, #16
 8009d34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d3c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d108      	bne.n	8009d54 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	0e1b      	lsrs	r3, r3, #24
 8009d46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d4e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d001      	beq.n	8009d58 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009d54:	2301      	movs	r3, #1
 8009d56:	e000      	b.n	8009d5a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8009d58:	2300      	movs	r3, #0
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3730      	adds	r7, #48	; 0x30
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	58024400 	.word	0x58024400

08009d68 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b086      	sub	sp, #24
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d101      	bne.n	8009d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009d78:	2301      	movs	r3, #1
 8009d7a:	e19c      	b.n	800a0b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009d7c:	4b8a      	ldr	r3, [pc, #552]	; (8009fa8 <HAL_RCC_ClockConfig+0x240>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f003 030f 	and.w	r3, r3, #15
 8009d84:	683a      	ldr	r2, [r7, #0]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d910      	bls.n	8009dac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d8a:	4b87      	ldr	r3, [pc, #540]	; (8009fa8 <HAL_RCC_ClockConfig+0x240>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f023 020f 	bic.w	r2, r3, #15
 8009d92:	4985      	ldr	r1, [pc, #532]	; (8009fa8 <HAL_RCC_ClockConfig+0x240>)
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	4313      	orrs	r3, r2
 8009d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d9a:	4b83      	ldr	r3, [pc, #524]	; (8009fa8 <HAL_RCC_ClockConfig+0x240>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f003 030f 	and.w	r3, r3, #15
 8009da2:	683a      	ldr	r2, [r7, #0]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d001      	beq.n	8009dac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009da8:	2301      	movs	r3, #1
 8009daa:	e184      	b.n	800a0b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 0304 	and.w	r3, r3, #4
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d010      	beq.n	8009dda <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	691a      	ldr	r2, [r3, #16]
 8009dbc:	4b7b      	ldr	r3, [pc, #492]	; (8009fac <HAL_RCC_ClockConfig+0x244>)
 8009dbe:	699b      	ldr	r3, [r3, #24]
 8009dc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d908      	bls.n	8009dda <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009dc8:	4b78      	ldr	r3, [pc, #480]	; (8009fac <HAL_RCC_ClockConfig+0x244>)
 8009dca:	699b      	ldr	r3, [r3, #24]
 8009dcc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	691b      	ldr	r3, [r3, #16]
 8009dd4:	4975      	ldr	r1, [pc, #468]	; (8009fac <HAL_RCC_ClockConfig+0x244>)
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f003 0308 	and.w	r3, r3, #8
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d010      	beq.n	8009e08 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	695a      	ldr	r2, [r3, #20]
 8009dea:	4b70      	ldr	r3, [pc, #448]	; (8009fac <HAL_RCC_ClockConfig+0x244>)
 8009dec:	69db      	ldr	r3, [r3, #28]
 8009dee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d908      	bls.n	8009e08 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009df6:	4b6d      	ldr	r3, [pc, #436]	; (8009fac <HAL_RCC_ClockConfig+0x244>)
 8009df8:	69db      	ldr	r3, [r3, #28]
 8009dfa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	695b      	ldr	r3, [r3, #20]
 8009e02:	496a      	ldr	r1, [pc, #424]	; (8009fac <HAL_RCC_ClockConfig+0x244>)
 8009e04:	4313      	orrs	r3, r2
 8009e06:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f003 0310 	and.w	r3, r3, #16
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d010      	beq.n	8009e36 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	699a      	ldr	r2, [r3, #24]
 8009e18:	4b64      	ldr	r3, [pc, #400]	; (8009fac <HAL_RCC_ClockConfig+0x244>)
 8009e1a:	69db      	ldr	r3, [r3, #28]
 8009e1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d908      	bls.n	8009e36 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009e24:	4b61      	ldr	r3, [pc, #388]	; (8009fac <HAL_RCC_ClockConfig+0x244>)
 8009e26:	69db      	ldr	r3, [r3, #28]
 8009e28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	699b      	ldr	r3, [r3, #24]
 8009e30:	495e      	ldr	r1, [pc, #376]	; (8009fac <HAL_RCC_ClockConfig+0x244>)
 8009e32:	4313      	orrs	r3, r2
 8009e34:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f003 0320 	and.w	r3, r3, #32
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d010      	beq.n	8009e64 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	69da      	ldr	r2, [r3, #28]
 8009e46:	4b59      	ldr	r3, [pc, #356]	; (8009fac <HAL_RCC_ClockConfig+0x244>)
 8009e48:	6a1b      	ldr	r3, [r3, #32]
 8009e4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d908      	bls.n	8009e64 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009e52:	4b56      	ldr	r3, [pc, #344]	; (8009fac <HAL_RCC_ClockConfig+0x244>)
 8009e54:	6a1b      	ldr	r3, [r3, #32]
 8009e56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	69db      	ldr	r3, [r3, #28]
 8009e5e:	4953      	ldr	r1, [pc, #332]	; (8009fac <HAL_RCC_ClockConfig+0x244>)
 8009e60:	4313      	orrs	r3, r2
 8009e62:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f003 0302 	and.w	r3, r3, #2
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d010      	beq.n	8009e92 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	68da      	ldr	r2, [r3, #12]
 8009e74:	4b4d      	ldr	r3, [pc, #308]	; (8009fac <HAL_RCC_ClockConfig+0x244>)
 8009e76:	699b      	ldr	r3, [r3, #24]
 8009e78:	f003 030f 	and.w	r3, r3, #15
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d908      	bls.n	8009e92 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e80:	4b4a      	ldr	r3, [pc, #296]	; (8009fac <HAL_RCC_ClockConfig+0x244>)
 8009e82:	699b      	ldr	r3, [r3, #24]
 8009e84:	f023 020f 	bic.w	r2, r3, #15
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	4947      	ldr	r1, [pc, #284]	; (8009fac <HAL_RCC_ClockConfig+0x244>)
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f003 0301 	and.w	r3, r3, #1
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d055      	beq.n	8009f4a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009e9e:	4b43      	ldr	r3, [pc, #268]	; (8009fac <HAL_RCC_ClockConfig+0x244>)
 8009ea0:	699b      	ldr	r3, [r3, #24]
 8009ea2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	689b      	ldr	r3, [r3, #8]
 8009eaa:	4940      	ldr	r1, [pc, #256]	; (8009fac <HAL_RCC_ClockConfig+0x244>)
 8009eac:	4313      	orrs	r3, r2
 8009eae:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	2b02      	cmp	r3, #2
 8009eb6:	d107      	bne.n	8009ec8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009eb8:	4b3c      	ldr	r3, [pc, #240]	; (8009fac <HAL_RCC_ClockConfig+0x244>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d121      	bne.n	8009f08 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	e0f6      	b.n	800a0b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	2b03      	cmp	r3, #3
 8009ece:	d107      	bne.n	8009ee0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009ed0:	4b36      	ldr	r3, [pc, #216]	; (8009fac <HAL_RCC_ClockConfig+0x244>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d115      	bne.n	8009f08 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009edc:	2301      	movs	r3, #1
 8009ede:	e0ea      	b.n	800a0b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d107      	bne.n	8009ef8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009ee8:	4b30      	ldr	r3, [pc, #192]	; (8009fac <HAL_RCC_ClockConfig+0x244>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d109      	bne.n	8009f08 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	e0de      	b.n	800a0b6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ef8:	4b2c      	ldr	r3, [pc, #176]	; (8009fac <HAL_RCC_ClockConfig+0x244>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f003 0304 	and.w	r3, r3, #4
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d101      	bne.n	8009f08 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009f04:	2301      	movs	r3, #1
 8009f06:	e0d6      	b.n	800a0b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009f08:	4b28      	ldr	r3, [pc, #160]	; (8009fac <HAL_RCC_ClockConfig+0x244>)
 8009f0a:	691b      	ldr	r3, [r3, #16]
 8009f0c:	f023 0207 	bic.w	r2, r3, #7
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	4925      	ldr	r1, [pc, #148]	; (8009fac <HAL_RCC_ClockConfig+0x244>)
 8009f16:	4313      	orrs	r3, r2
 8009f18:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f1a:	f7f8 fc1d 	bl	8002758 <HAL_GetTick>
 8009f1e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f20:	e00a      	b.n	8009f38 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f22:	f7f8 fc19 	bl	8002758 <HAL_GetTick>
 8009f26:	4602      	mov	r2, r0
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	1ad3      	subs	r3, r2, r3
 8009f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d901      	bls.n	8009f38 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009f34:	2303      	movs	r3, #3
 8009f36:	e0be      	b.n	800a0b6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f38:	4b1c      	ldr	r3, [pc, #112]	; (8009fac <HAL_RCC_ClockConfig+0x244>)
 8009f3a:	691b      	ldr	r3, [r3, #16]
 8009f3c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	00db      	lsls	r3, r3, #3
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d1eb      	bne.n	8009f22 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f003 0302 	and.w	r3, r3, #2
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d010      	beq.n	8009f78 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	68da      	ldr	r2, [r3, #12]
 8009f5a:	4b14      	ldr	r3, [pc, #80]	; (8009fac <HAL_RCC_ClockConfig+0x244>)
 8009f5c:	699b      	ldr	r3, [r3, #24]
 8009f5e:	f003 030f 	and.w	r3, r3, #15
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d208      	bcs.n	8009f78 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f66:	4b11      	ldr	r3, [pc, #68]	; (8009fac <HAL_RCC_ClockConfig+0x244>)
 8009f68:	699b      	ldr	r3, [r3, #24]
 8009f6a:	f023 020f 	bic.w	r2, r3, #15
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	490e      	ldr	r1, [pc, #56]	; (8009fac <HAL_RCC_ClockConfig+0x244>)
 8009f74:	4313      	orrs	r3, r2
 8009f76:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009f78:	4b0b      	ldr	r3, [pc, #44]	; (8009fa8 <HAL_RCC_ClockConfig+0x240>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f003 030f 	and.w	r3, r3, #15
 8009f80:	683a      	ldr	r2, [r7, #0]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d214      	bcs.n	8009fb0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f86:	4b08      	ldr	r3, [pc, #32]	; (8009fa8 <HAL_RCC_ClockConfig+0x240>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f023 020f 	bic.w	r2, r3, #15
 8009f8e:	4906      	ldr	r1, [pc, #24]	; (8009fa8 <HAL_RCC_ClockConfig+0x240>)
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	4313      	orrs	r3, r2
 8009f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f96:	4b04      	ldr	r3, [pc, #16]	; (8009fa8 <HAL_RCC_ClockConfig+0x240>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f003 030f 	and.w	r3, r3, #15
 8009f9e:	683a      	ldr	r2, [r7, #0]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d005      	beq.n	8009fb0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	e086      	b.n	800a0b6 <HAL_RCC_ClockConfig+0x34e>
 8009fa8:	52002000 	.word	0x52002000
 8009fac:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f003 0304 	and.w	r3, r3, #4
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d010      	beq.n	8009fde <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	691a      	ldr	r2, [r3, #16]
 8009fc0:	4b3f      	ldr	r3, [pc, #252]	; (800a0c0 <HAL_RCC_ClockConfig+0x358>)
 8009fc2:	699b      	ldr	r3, [r3, #24]
 8009fc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d208      	bcs.n	8009fde <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009fcc:	4b3c      	ldr	r3, [pc, #240]	; (800a0c0 <HAL_RCC_ClockConfig+0x358>)
 8009fce:	699b      	ldr	r3, [r3, #24]
 8009fd0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	691b      	ldr	r3, [r3, #16]
 8009fd8:	4939      	ldr	r1, [pc, #228]	; (800a0c0 <HAL_RCC_ClockConfig+0x358>)
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f003 0308 	and.w	r3, r3, #8
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d010      	beq.n	800a00c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	695a      	ldr	r2, [r3, #20]
 8009fee:	4b34      	ldr	r3, [pc, #208]	; (800a0c0 <HAL_RCC_ClockConfig+0x358>)
 8009ff0:	69db      	ldr	r3, [r3, #28]
 8009ff2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d208      	bcs.n	800a00c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009ffa:	4b31      	ldr	r3, [pc, #196]	; (800a0c0 <HAL_RCC_ClockConfig+0x358>)
 8009ffc:	69db      	ldr	r3, [r3, #28]
 8009ffe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	695b      	ldr	r3, [r3, #20]
 800a006:	492e      	ldr	r1, [pc, #184]	; (800a0c0 <HAL_RCC_ClockConfig+0x358>)
 800a008:	4313      	orrs	r3, r2
 800a00a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f003 0310 	and.w	r3, r3, #16
 800a014:	2b00      	cmp	r3, #0
 800a016:	d010      	beq.n	800a03a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	699a      	ldr	r2, [r3, #24]
 800a01c:	4b28      	ldr	r3, [pc, #160]	; (800a0c0 <HAL_RCC_ClockConfig+0x358>)
 800a01e:	69db      	ldr	r3, [r3, #28]
 800a020:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a024:	429a      	cmp	r2, r3
 800a026:	d208      	bcs.n	800a03a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a028:	4b25      	ldr	r3, [pc, #148]	; (800a0c0 <HAL_RCC_ClockConfig+0x358>)
 800a02a:	69db      	ldr	r3, [r3, #28]
 800a02c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	699b      	ldr	r3, [r3, #24]
 800a034:	4922      	ldr	r1, [pc, #136]	; (800a0c0 <HAL_RCC_ClockConfig+0x358>)
 800a036:	4313      	orrs	r3, r2
 800a038:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f003 0320 	and.w	r3, r3, #32
 800a042:	2b00      	cmp	r3, #0
 800a044:	d010      	beq.n	800a068 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	69da      	ldr	r2, [r3, #28]
 800a04a:	4b1d      	ldr	r3, [pc, #116]	; (800a0c0 <HAL_RCC_ClockConfig+0x358>)
 800a04c:	6a1b      	ldr	r3, [r3, #32]
 800a04e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a052:	429a      	cmp	r2, r3
 800a054:	d208      	bcs.n	800a068 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a056:	4b1a      	ldr	r3, [pc, #104]	; (800a0c0 <HAL_RCC_ClockConfig+0x358>)
 800a058:	6a1b      	ldr	r3, [r3, #32]
 800a05a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	69db      	ldr	r3, [r3, #28]
 800a062:	4917      	ldr	r1, [pc, #92]	; (800a0c0 <HAL_RCC_ClockConfig+0x358>)
 800a064:	4313      	orrs	r3, r2
 800a066:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a068:	f000 f89e 	bl	800a1a8 <HAL_RCC_GetSysClockFreq>
 800a06c:	4602      	mov	r2, r0
 800a06e:	4b14      	ldr	r3, [pc, #80]	; (800a0c0 <HAL_RCC_ClockConfig+0x358>)
 800a070:	699b      	ldr	r3, [r3, #24]
 800a072:	0a1b      	lsrs	r3, r3, #8
 800a074:	f003 030f 	and.w	r3, r3, #15
 800a078:	4912      	ldr	r1, [pc, #72]	; (800a0c4 <HAL_RCC_ClockConfig+0x35c>)
 800a07a:	5ccb      	ldrb	r3, [r1, r3]
 800a07c:	f003 031f 	and.w	r3, r3, #31
 800a080:	fa22 f303 	lsr.w	r3, r2, r3
 800a084:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a086:	4b0e      	ldr	r3, [pc, #56]	; (800a0c0 <HAL_RCC_ClockConfig+0x358>)
 800a088:	699b      	ldr	r3, [r3, #24]
 800a08a:	f003 030f 	and.w	r3, r3, #15
 800a08e:	4a0d      	ldr	r2, [pc, #52]	; (800a0c4 <HAL_RCC_ClockConfig+0x35c>)
 800a090:	5cd3      	ldrb	r3, [r2, r3]
 800a092:	f003 031f 	and.w	r3, r3, #31
 800a096:	693a      	ldr	r2, [r7, #16]
 800a098:	fa22 f303 	lsr.w	r3, r2, r3
 800a09c:	4a0a      	ldr	r2, [pc, #40]	; (800a0c8 <HAL_RCC_ClockConfig+0x360>)
 800a09e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a0a0:	4a0a      	ldr	r2, [pc, #40]	; (800a0cc <HAL_RCC_ClockConfig+0x364>)
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a0a6:	4b0a      	ldr	r3, [pc, #40]	; (800a0d0 <HAL_RCC_ClockConfig+0x368>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7f8 fb0a 	bl	80026c4 <HAL_InitTick>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a0b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3718      	adds	r7, #24
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	58024400 	.word	0x58024400
 800a0c4:	080131b8 	.word	0x080131b8
 800a0c8:	24000004 	.word	0x24000004
 800a0cc:	24000000 	.word	0x24000000
 800a0d0:	24000008 	.word	0x24000008

0800a0d4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b08c      	sub	sp, #48	; 0x30
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d12a      	bne.n	800a13c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a0e6:	4b2d      	ldr	r3, [pc, #180]	; (800a19c <HAL_RCC_MCOConfig+0xc8>)
 800a0e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a0ec:	4a2b      	ldr	r2, [pc, #172]	; (800a19c <HAL_RCC_MCOConfig+0xc8>)
 800a0ee:	f043 0301 	orr.w	r3, r3, #1
 800a0f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a0f6:	4b29      	ldr	r3, [pc, #164]	; (800a19c <HAL_RCC_MCOConfig+0xc8>)
 800a0f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a0fc:	f003 0301 	and.w	r3, r3, #1
 800a100:	61bb      	str	r3, [r7, #24]
 800a102:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a104:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a10a:	2302      	movs	r3, #2
 800a10c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a10e:	2303      	movs	r3, #3
 800a110:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a112:	2300      	movs	r3, #0
 800a114:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a116:	2300      	movs	r3, #0
 800a118:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a11a:	f107 031c 	add.w	r3, r7, #28
 800a11e:	4619      	mov	r1, r3
 800a120:	481f      	ldr	r0, [pc, #124]	; (800a1a0 <HAL_RCC_MCOConfig+0xcc>)
 800a122:	f7fd fca1 	bl	8007a68 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a126:	4b1d      	ldr	r3, [pc, #116]	; (800a19c <HAL_RCC_MCOConfig+0xc8>)
 800a128:	691b      	ldr	r3, [r3, #16]
 800a12a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800a12e:	68b9      	ldr	r1, [r7, #8]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	430b      	orrs	r3, r1
 800a134:	4919      	ldr	r1, [pc, #100]	; (800a19c <HAL_RCC_MCOConfig+0xc8>)
 800a136:	4313      	orrs	r3, r2
 800a138:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800a13a:	e02a      	b.n	800a192 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800a13c:	4b17      	ldr	r3, [pc, #92]	; (800a19c <HAL_RCC_MCOConfig+0xc8>)
 800a13e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a142:	4a16      	ldr	r2, [pc, #88]	; (800a19c <HAL_RCC_MCOConfig+0xc8>)
 800a144:	f043 0304 	orr.w	r3, r3, #4
 800a148:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a14c:	4b13      	ldr	r3, [pc, #76]	; (800a19c <HAL_RCC_MCOConfig+0xc8>)
 800a14e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a152:	f003 0304 	and.w	r3, r3, #4
 800a156:	617b      	str	r3, [r7, #20]
 800a158:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a15a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a15e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a160:	2302      	movs	r3, #2
 800a162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a164:	2303      	movs	r3, #3
 800a166:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a168:	2300      	movs	r3, #0
 800a16a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a16c:	2300      	movs	r3, #0
 800a16e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a170:	f107 031c 	add.w	r3, r7, #28
 800a174:	4619      	mov	r1, r3
 800a176:	480b      	ldr	r0, [pc, #44]	; (800a1a4 <HAL_RCC_MCOConfig+0xd0>)
 800a178:	f7fd fc76 	bl	8007a68 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a17c:	4b07      	ldr	r3, [pc, #28]	; (800a19c <HAL_RCC_MCOConfig+0xc8>)
 800a17e:	691b      	ldr	r3, [r3, #16]
 800a180:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	01d9      	lsls	r1, r3, #7
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	430b      	orrs	r3, r1
 800a18c:	4903      	ldr	r1, [pc, #12]	; (800a19c <HAL_RCC_MCOConfig+0xc8>)
 800a18e:	4313      	orrs	r3, r2
 800a190:	610b      	str	r3, [r1, #16]
}
 800a192:	bf00      	nop
 800a194:	3730      	adds	r7, #48	; 0x30
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	58024400 	.word	0x58024400
 800a1a0:	58020000 	.word	0x58020000
 800a1a4:	58020800 	.word	0x58020800

0800a1a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b089      	sub	sp, #36	; 0x24
 800a1ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a1ae:	4bb3      	ldr	r3, [pc, #716]	; (800a47c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1b0:	691b      	ldr	r3, [r3, #16]
 800a1b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1b6:	2b18      	cmp	r3, #24
 800a1b8:	f200 8155 	bhi.w	800a466 <HAL_RCC_GetSysClockFreq+0x2be>
 800a1bc:	a201      	add	r2, pc, #4	; (adr r2, 800a1c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a1be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c2:	bf00      	nop
 800a1c4:	0800a229 	.word	0x0800a229
 800a1c8:	0800a467 	.word	0x0800a467
 800a1cc:	0800a467 	.word	0x0800a467
 800a1d0:	0800a467 	.word	0x0800a467
 800a1d4:	0800a467 	.word	0x0800a467
 800a1d8:	0800a467 	.word	0x0800a467
 800a1dc:	0800a467 	.word	0x0800a467
 800a1e0:	0800a467 	.word	0x0800a467
 800a1e4:	0800a24f 	.word	0x0800a24f
 800a1e8:	0800a467 	.word	0x0800a467
 800a1ec:	0800a467 	.word	0x0800a467
 800a1f0:	0800a467 	.word	0x0800a467
 800a1f4:	0800a467 	.word	0x0800a467
 800a1f8:	0800a467 	.word	0x0800a467
 800a1fc:	0800a467 	.word	0x0800a467
 800a200:	0800a467 	.word	0x0800a467
 800a204:	0800a255 	.word	0x0800a255
 800a208:	0800a467 	.word	0x0800a467
 800a20c:	0800a467 	.word	0x0800a467
 800a210:	0800a467 	.word	0x0800a467
 800a214:	0800a467 	.word	0x0800a467
 800a218:	0800a467 	.word	0x0800a467
 800a21c:	0800a467 	.word	0x0800a467
 800a220:	0800a467 	.word	0x0800a467
 800a224:	0800a25b 	.word	0x0800a25b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a228:	4b94      	ldr	r3, [pc, #592]	; (800a47c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f003 0320 	and.w	r3, r3, #32
 800a230:	2b00      	cmp	r3, #0
 800a232:	d009      	beq.n	800a248 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a234:	4b91      	ldr	r3, [pc, #580]	; (800a47c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	08db      	lsrs	r3, r3, #3
 800a23a:	f003 0303 	and.w	r3, r3, #3
 800a23e:	4a90      	ldr	r2, [pc, #576]	; (800a480 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a240:	fa22 f303 	lsr.w	r3, r2, r3
 800a244:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a246:	e111      	b.n	800a46c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a248:	4b8d      	ldr	r3, [pc, #564]	; (800a480 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a24a:	61bb      	str	r3, [r7, #24]
    break;
 800a24c:	e10e      	b.n	800a46c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a24e:	4b8d      	ldr	r3, [pc, #564]	; (800a484 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a250:	61bb      	str	r3, [r7, #24]
    break;
 800a252:	e10b      	b.n	800a46c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a254:	4b8c      	ldr	r3, [pc, #560]	; (800a488 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a256:	61bb      	str	r3, [r7, #24]
    break;
 800a258:	e108      	b.n	800a46c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a25a:	4b88      	ldr	r3, [pc, #544]	; (800a47c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a25c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a25e:	f003 0303 	and.w	r3, r3, #3
 800a262:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a264:	4b85      	ldr	r3, [pc, #532]	; (800a47c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a268:	091b      	lsrs	r3, r3, #4
 800a26a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a26e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a270:	4b82      	ldr	r3, [pc, #520]	; (800a47c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a274:	f003 0301 	and.w	r3, r3, #1
 800a278:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a27a:	4b80      	ldr	r3, [pc, #512]	; (800a47c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a27c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a27e:	08db      	lsrs	r3, r3, #3
 800a280:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a284:	68fa      	ldr	r2, [r7, #12]
 800a286:	fb02 f303 	mul.w	r3, r2, r3
 800a28a:	ee07 3a90 	vmov	s15, r3
 800a28e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a292:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	f000 80e1 	beq.w	800a460 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	2b02      	cmp	r3, #2
 800a2a2:	f000 8083 	beq.w	800a3ac <HAL_RCC_GetSysClockFreq+0x204>
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	2b02      	cmp	r3, #2
 800a2aa:	f200 80a1 	bhi.w	800a3f0 <HAL_RCC_GetSysClockFreq+0x248>
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d003      	beq.n	800a2bc <HAL_RCC_GetSysClockFreq+0x114>
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d056      	beq.n	800a368 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a2ba:	e099      	b.n	800a3f0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2bc:	4b6f      	ldr	r3, [pc, #444]	; (800a47c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f003 0320 	and.w	r3, r3, #32
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d02d      	beq.n	800a324 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a2c8:	4b6c      	ldr	r3, [pc, #432]	; (800a47c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	08db      	lsrs	r3, r3, #3
 800a2ce:	f003 0303 	and.w	r3, r3, #3
 800a2d2:	4a6b      	ldr	r2, [pc, #428]	; (800a480 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a2d4:	fa22 f303 	lsr.w	r3, r2, r3
 800a2d8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	ee07 3a90 	vmov	s15, r3
 800a2e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	ee07 3a90 	vmov	s15, r3
 800a2ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2f2:	4b62      	ldr	r3, [pc, #392]	; (800a47c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2fa:	ee07 3a90 	vmov	s15, r3
 800a2fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a302:	ed97 6a02 	vldr	s12, [r7, #8]
 800a306:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a48c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a30a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a30e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a312:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a31a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a31e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a322:	e087      	b.n	800a434 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	ee07 3a90 	vmov	s15, r3
 800a32a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a32e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a490 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a336:	4b51      	ldr	r3, [pc, #324]	; (800a47c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a33a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a33e:	ee07 3a90 	vmov	s15, r3
 800a342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a346:	ed97 6a02 	vldr	s12, [r7, #8]
 800a34a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a48c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a34e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a356:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a35a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a35e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a362:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a366:	e065      	b.n	800a434 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	ee07 3a90 	vmov	s15, r3
 800a36e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a372:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a494 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a37a:	4b40      	ldr	r3, [pc, #256]	; (800a47c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a37c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a37e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a382:	ee07 3a90 	vmov	s15, r3
 800a386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a38a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a38e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a48c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a39a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a39e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3aa:	e043      	b.n	800a434 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	ee07 3a90 	vmov	s15, r3
 800a3b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3b6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a498 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a3ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3be:	4b2f      	ldr	r3, [pc, #188]	; (800a47c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3c6:	ee07 3a90 	vmov	s15, r3
 800a3ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3ce:	ed97 6a02 	vldr	s12, [r7, #8]
 800a3d2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a48c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a3d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3ee:	e021      	b.n	800a434 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	ee07 3a90 	vmov	s15, r3
 800a3f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3fa:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a494 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a3fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a402:	4b1e      	ldr	r3, [pc, #120]	; (800a47c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a40a:	ee07 3a90 	vmov	s15, r3
 800a40e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a412:	ed97 6a02 	vldr	s12, [r7, #8]
 800a416:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a48c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a41a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a41e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a42a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a42e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a432:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a434:	4b11      	ldr	r3, [pc, #68]	; (800a47c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a438:	0a5b      	lsrs	r3, r3, #9
 800a43a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a43e:	3301      	adds	r3, #1
 800a440:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	ee07 3a90 	vmov	s15, r3
 800a448:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a44c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a454:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a458:	ee17 3a90 	vmov	r3, s15
 800a45c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800a45e:	e005      	b.n	800a46c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800a460:	2300      	movs	r3, #0
 800a462:	61bb      	str	r3, [r7, #24]
    break;
 800a464:	e002      	b.n	800a46c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800a466:	4b07      	ldr	r3, [pc, #28]	; (800a484 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a468:	61bb      	str	r3, [r7, #24]
    break;
 800a46a:	bf00      	nop
  }

  return sysclockfreq;
 800a46c:	69bb      	ldr	r3, [r7, #24]
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3724      	adds	r7, #36	; 0x24
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr
 800a47a:	bf00      	nop
 800a47c:	58024400 	.word	0x58024400
 800a480:	03d09000 	.word	0x03d09000
 800a484:	003d0900 	.word	0x003d0900
 800a488:	007a1200 	.word	0x007a1200
 800a48c:	46000000 	.word	0x46000000
 800a490:	4c742400 	.word	0x4c742400
 800a494:	4a742400 	.word	0x4a742400
 800a498:	4af42400 	.word	0x4af42400

0800a49c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b082      	sub	sp, #8
 800a4a0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a4a2:	f7ff fe81 	bl	800a1a8 <HAL_RCC_GetSysClockFreq>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	4b10      	ldr	r3, [pc, #64]	; (800a4ec <HAL_RCC_GetHCLKFreq+0x50>)
 800a4aa:	699b      	ldr	r3, [r3, #24]
 800a4ac:	0a1b      	lsrs	r3, r3, #8
 800a4ae:	f003 030f 	and.w	r3, r3, #15
 800a4b2:	490f      	ldr	r1, [pc, #60]	; (800a4f0 <HAL_RCC_GetHCLKFreq+0x54>)
 800a4b4:	5ccb      	ldrb	r3, [r1, r3]
 800a4b6:	f003 031f 	and.w	r3, r3, #31
 800a4ba:	fa22 f303 	lsr.w	r3, r2, r3
 800a4be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a4c0:	4b0a      	ldr	r3, [pc, #40]	; (800a4ec <HAL_RCC_GetHCLKFreq+0x50>)
 800a4c2:	699b      	ldr	r3, [r3, #24]
 800a4c4:	f003 030f 	and.w	r3, r3, #15
 800a4c8:	4a09      	ldr	r2, [pc, #36]	; (800a4f0 <HAL_RCC_GetHCLKFreq+0x54>)
 800a4ca:	5cd3      	ldrb	r3, [r2, r3]
 800a4cc:	f003 031f 	and.w	r3, r3, #31
 800a4d0:	687a      	ldr	r2, [r7, #4]
 800a4d2:	fa22 f303 	lsr.w	r3, r2, r3
 800a4d6:	4a07      	ldr	r2, [pc, #28]	; (800a4f4 <HAL_RCC_GetHCLKFreq+0x58>)
 800a4d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a4da:	4a07      	ldr	r2, [pc, #28]	; (800a4f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a4e0:	4b04      	ldr	r3, [pc, #16]	; (800a4f4 <HAL_RCC_GetHCLKFreq+0x58>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3708      	adds	r7, #8
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}
 800a4ec:	58024400 	.word	0x58024400
 800a4f0:	080131b8 	.word	0x080131b8
 800a4f4:	24000004 	.word	0x24000004
 800a4f8:	24000000 	.word	0x24000000

0800a4fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a500:	f7ff ffcc 	bl	800a49c <HAL_RCC_GetHCLKFreq>
 800a504:	4602      	mov	r2, r0
 800a506:	4b06      	ldr	r3, [pc, #24]	; (800a520 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a508:	69db      	ldr	r3, [r3, #28]
 800a50a:	091b      	lsrs	r3, r3, #4
 800a50c:	f003 0307 	and.w	r3, r3, #7
 800a510:	4904      	ldr	r1, [pc, #16]	; (800a524 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a512:	5ccb      	ldrb	r3, [r1, r3]
 800a514:	f003 031f 	and.w	r3, r3, #31
 800a518:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	bd80      	pop	{r7, pc}
 800a520:	58024400 	.word	0x58024400
 800a524:	080131b8 	.word	0x080131b8

0800a528 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a52c:	f7ff ffb6 	bl	800a49c <HAL_RCC_GetHCLKFreq>
 800a530:	4602      	mov	r2, r0
 800a532:	4b06      	ldr	r3, [pc, #24]	; (800a54c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a534:	69db      	ldr	r3, [r3, #28]
 800a536:	0a1b      	lsrs	r3, r3, #8
 800a538:	f003 0307 	and.w	r3, r3, #7
 800a53c:	4904      	ldr	r1, [pc, #16]	; (800a550 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a53e:	5ccb      	ldrb	r3, [r1, r3]
 800a540:	f003 031f 	and.w	r3, r3, #31
 800a544:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a548:	4618      	mov	r0, r3
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	58024400 	.word	0x58024400
 800a550:	080131b8 	.word	0x080131b8

0800a554 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b086      	sub	sp, #24
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a55c:	2300      	movs	r3, #0
 800a55e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a560:	2300      	movs	r3, #0
 800a562:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d03f      	beq.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a574:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a578:	d02a      	beq.n	800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a57a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a57e:	d824      	bhi.n	800a5ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a580:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a584:	d018      	beq.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a586:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a58a:	d81e      	bhi.n	800a5ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d003      	beq.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a590:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a594:	d007      	beq.n	800a5a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a596:	e018      	b.n	800a5ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a598:	4ba3      	ldr	r3, [pc, #652]	; (800a828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a59a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a59c:	4aa2      	ldr	r2, [pc, #648]	; (800a828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a59e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a5a4:	e015      	b.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	3304      	adds	r3, #4
 800a5aa:	2102      	movs	r1, #2
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f001 fff9 	bl	800c5a4 <RCCEx_PLL2_Config>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a5b6:	e00c      	b.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	3324      	adds	r3, #36	; 0x24
 800a5bc:	2102      	movs	r1, #2
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f002 f8a2 	bl	800c708 <RCCEx_PLL3_Config>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a5c8:	e003      	b.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	75fb      	strb	r3, [r7, #23]
      break;
 800a5ce:	e000      	b.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a5d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5d2:	7dfb      	ldrb	r3, [r7, #23]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d109      	bne.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a5d8:	4b93      	ldr	r3, [pc, #588]	; (800a828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a5da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5e4:	4990      	ldr	r1, [pc, #576]	; (800a828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	650b      	str	r3, [r1, #80]	; 0x50
 800a5ea:	e001      	b.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5ec:	7dfb      	ldrb	r3, [r7, #23]
 800a5ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d03d      	beq.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a600:	2b04      	cmp	r3, #4
 800a602:	d826      	bhi.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a604:	a201      	add	r2, pc, #4	; (adr r2, 800a60c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800a606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a60a:	bf00      	nop
 800a60c:	0800a621 	.word	0x0800a621
 800a610:	0800a62f 	.word	0x0800a62f
 800a614:	0800a641 	.word	0x0800a641
 800a618:	0800a659 	.word	0x0800a659
 800a61c:	0800a659 	.word	0x0800a659
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a620:	4b81      	ldr	r3, [pc, #516]	; (800a828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a624:	4a80      	ldr	r2, [pc, #512]	; (800a828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a626:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a62a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a62c:	e015      	b.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	3304      	adds	r3, #4
 800a632:	2100      	movs	r1, #0
 800a634:	4618      	mov	r0, r3
 800a636:	f001 ffb5 	bl	800c5a4 <RCCEx_PLL2_Config>
 800a63a:	4603      	mov	r3, r0
 800a63c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a63e:	e00c      	b.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	3324      	adds	r3, #36	; 0x24
 800a644:	2100      	movs	r1, #0
 800a646:	4618      	mov	r0, r3
 800a648:	f002 f85e 	bl	800c708 <RCCEx_PLL3_Config>
 800a64c:	4603      	mov	r3, r0
 800a64e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a650:	e003      	b.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a652:	2301      	movs	r3, #1
 800a654:	75fb      	strb	r3, [r7, #23]
      break;
 800a656:	e000      	b.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800a658:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a65a:	7dfb      	ldrb	r3, [r7, #23]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d109      	bne.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a660:	4b71      	ldr	r3, [pc, #452]	; (800a828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a664:	f023 0207 	bic.w	r2, r3, #7
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a66c:	496e      	ldr	r1, [pc, #440]	; (800a828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a66e:	4313      	orrs	r3, r2
 800a670:	650b      	str	r3, [r1, #80]	; 0x50
 800a672:	e001      	b.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a674:	7dfb      	ldrb	r3, [r7, #23]
 800a676:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a680:	2b00      	cmp	r3, #0
 800a682:	d042      	beq.n	800a70a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a688:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a68c:	d02b      	beq.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800a68e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a692:	d825      	bhi.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a694:	2bc0      	cmp	r3, #192	; 0xc0
 800a696:	d028      	beq.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a698:	2bc0      	cmp	r3, #192	; 0xc0
 800a69a:	d821      	bhi.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a69c:	2b80      	cmp	r3, #128	; 0x80
 800a69e:	d016      	beq.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800a6a0:	2b80      	cmp	r3, #128	; 0x80
 800a6a2:	d81d      	bhi.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d002      	beq.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800a6a8:	2b40      	cmp	r3, #64	; 0x40
 800a6aa:	d007      	beq.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x168>
 800a6ac:	e018      	b.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6ae:	4b5e      	ldr	r3, [pc, #376]	; (800a828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a6b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6b2:	4a5d      	ldr	r2, [pc, #372]	; (800a828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a6b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a6ba:	e017      	b.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	3304      	adds	r3, #4
 800a6c0:	2100      	movs	r1, #0
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f001 ff6e 	bl	800c5a4 <RCCEx_PLL2_Config>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a6cc:	e00e      	b.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	3324      	adds	r3, #36	; 0x24
 800a6d2:	2100      	movs	r1, #0
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f002 f817 	bl	800c708 <RCCEx_PLL3_Config>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a6de:	e005      	b.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	75fb      	strb	r3, [r7, #23]
      break;
 800a6e4:	e002      	b.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a6e6:	bf00      	nop
 800a6e8:	e000      	b.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a6ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a6ec:	7dfb      	ldrb	r3, [r7, #23]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d109      	bne.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a6f2:	4b4d      	ldr	r3, [pc, #308]	; (800a828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a6f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6f6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6fe:	494a      	ldr	r1, [pc, #296]	; (800a828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a700:	4313      	orrs	r3, r2
 800a702:	650b      	str	r3, [r1, #80]	; 0x50
 800a704:	e001      	b.n	800a70a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a706:	7dfb      	ldrb	r3, [r7, #23]
 800a708:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a712:	2b00      	cmp	r3, #0
 800a714:	d049      	beq.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a71c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a720:	d030      	beq.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800a722:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a726:	d82a      	bhi.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a728:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a72c:	d02c      	beq.n	800a788 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800a72e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a732:	d824      	bhi.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a734:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a738:	d018      	beq.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800a73a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a73e:	d81e      	bhi.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a740:	2b00      	cmp	r3, #0
 800a742:	d003      	beq.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800a744:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a748:	d007      	beq.n	800a75a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a74a:	e018      	b.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a74c:	4b36      	ldr	r3, [pc, #216]	; (800a828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a750:	4a35      	ldr	r2, [pc, #212]	; (800a828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a752:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a756:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a758:	e017      	b.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	3304      	adds	r3, #4
 800a75e:	2100      	movs	r1, #0
 800a760:	4618      	mov	r0, r3
 800a762:	f001 ff1f 	bl	800c5a4 <RCCEx_PLL2_Config>
 800a766:	4603      	mov	r3, r0
 800a768:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a76a:	e00e      	b.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	3324      	adds	r3, #36	; 0x24
 800a770:	2100      	movs	r1, #0
 800a772:	4618      	mov	r0, r3
 800a774:	f001 ffc8 	bl	800c708 <RCCEx_PLL3_Config>
 800a778:	4603      	mov	r3, r0
 800a77a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a77c:	e005      	b.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a77e:	2301      	movs	r3, #1
 800a780:	75fb      	strb	r3, [r7, #23]
      break;
 800a782:	e002      	b.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a784:	bf00      	nop
 800a786:	e000      	b.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a788:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a78a:	7dfb      	ldrb	r3, [r7, #23]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d10a      	bne.n	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a790:	4b25      	ldr	r3, [pc, #148]	; (800a828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a794:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a79e:	4922      	ldr	r1, [pc, #136]	; (800a828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	658b      	str	r3, [r1, #88]	; 0x58
 800a7a4:	e001      	b.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7a6:	7dfb      	ldrb	r3, [r7, #23]
 800a7a8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d04b      	beq.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a7bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a7c0:	d030      	beq.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800a7c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a7c6:	d82a      	bhi.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a7c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a7cc:	d02e      	beq.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800a7ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a7d2:	d824      	bhi.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a7d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7d8:	d018      	beq.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800a7da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7de:	d81e      	bhi.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d003      	beq.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a7e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a7e8:	d007      	beq.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a7ea:	e018      	b.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7ec:	4b0e      	ldr	r3, [pc, #56]	; (800a828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f0:	4a0d      	ldr	r2, [pc, #52]	; (800a828 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a7f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a7f8:	e019      	b.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	3304      	adds	r3, #4
 800a7fe:	2100      	movs	r1, #0
 800a800:	4618      	mov	r0, r3
 800a802:	f001 fecf 	bl	800c5a4 <RCCEx_PLL2_Config>
 800a806:	4603      	mov	r3, r0
 800a808:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a80a:	e010      	b.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	3324      	adds	r3, #36	; 0x24
 800a810:	2100      	movs	r1, #0
 800a812:	4618      	mov	r0, r3
 800a814:	f001 ff78 	bl	800c708 <RCCEx_PLL3_Config>
 800a818:	4603      	mov	r3, r0
 800a81a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a81c:	e007      	b.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a81e:	2301      	movs	r3, #1
 800a820:	75fb      	strb	r3, [r7, #23]
      break;
 800a822:	e004      	b.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800a824:	bf00      	nop
 800a826:	e002      	b.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a828:	58024400 	.word	0x58024400
      break;
 800a82c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a82e:	7dfb      	ldrb	r3, [r7, #23]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d10a      	bne.n	800a84a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a834:	4b99      	ldr	r3, [pc, #612]	; (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a838:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a842:	4996      	ldr	r1, [pc, #600]	; (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a844:	4313      	orrs	r3, r2
 800a846:	658b      	str	r3, [r1, #88]	; 0x58
 800a848:	e001      	b.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a84a:	7dfb      	ldrb	r3, [r7, #23]
 800a84c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a856:	2b00      	cmp	r3, #0
 800a858:	d032      	beq.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a85e:	2b30      	cmp	r3, #48	; 0x30
 800a860:	d01c      	beq.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0x348>
 800a862:	2b30      	cmp	r3, #48	; 0x30
 800a864:	d817      	bhi.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a866:	2b20      	cmp	r3, #32
 800a868:	d00c      	beq.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800a86a:	2b20      	cmp	r3, #32
 800a86c:	d813      	bhi.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d016      	beq.n	800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800a872:	2b10      	cmp	r3, #16
 800a874:	d10f      	bne.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a876:	4b89      	ldr	r3, [pc, #548]	; (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a87a:	4a88      	ldr	r2, [pc, #544]	; (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a87c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a880:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a882:	e00e      	b.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	3304      	adds	r3, #4
 800a888:	2102      	movs	r1, #2
 800a88a:	4618      	mov	r0, r3
 800a88c:	f001 fe8a 	bl	800c5a4 <RCCEx_PLL2_Config>
 800a890:	4603      	mov	r3, r0
 800a892:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a894:	e005      	b.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a896:	2301      	movs	r3, #1
 800a898:	75fb      	strb	r3, [r7, #23]
      break;
 800a89a:	e002      	b.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800a89c:	bf00      	nop
 800a89e:	e000      	b.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800a8a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a8a2:	7dfb      	ldrb	r3, [r7, #23]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d109      	bne.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a8a8:	4b7c      	ldr	r3, [pc, #496]	; (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a8aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8b4:	4979      	ldr	r1, [pc, #484]	; (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a8ba:	e001      	b.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8bc:	7dfb      	ldrb	r3, [r7, #23]
 800a8be:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d047      	beq.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8d4:	d030      	beq.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800a8d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8da:	d82a      	bhi.n	800a932 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800a8dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a8e0:	d02c      	beq.n	800a93c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800a8e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a8e6:	d824      	bhi.n	800a932 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800a8e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8ec:	d018      	beq.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800a8ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8f2:	d81e      	bhi.n	800a932 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d003      	beq.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800a8f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8fc:	d007      	beq.n	800a90e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800a8fe:	e018      	b.n	800a932 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a900:	4b66      	ldr	r3, [pc, #408]	; (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a904:	4a65      	ldr	r2, [pc, #404]	; (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a90a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a90c:	e017      	b.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	3304      	adds	r3, #4
 800a912:	2100      	movs	r1, #0
 800a914:	4618      	mov	r0, r3
 800a916:	f001 fe45 	bl	800c5a4 <RCCEx_PLL2_Config>
 800a91a:	4603      	mov	r3, r0
 800a91c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a91e:	e00e      	b.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	3324      	adds	r3, #36	; 0x24
 800a924:	2100      	movs	r1, #0
 800a926:	4618      	mov	r0, r3
 800a928:	f001 feee 	bl	800c708 <RCCEx_PLL3_Config>
 800a92c:	4603      	mov	r3, r0
 800a92e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a930:	e005      	b.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a932:	2301      	movs	r3, #1
 800a934:	75fb      	strb	r3, [r7, #23]
      break;
 800a936:	e002      	b.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800a938:	bf00      	nop
 800a93a:	e000      	b.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800a93c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a93e:	7dfb      	ldrb	r3, [r7, #23]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d109      	bne.n	800a958 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a944:	4b55      	ldr	r3, [pc, #340]	; (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a948:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a950:	4952      	ldr	r1, [pc, #328]	; (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a952:	4313      	orrs	r3, r2
 800a954:	650b      	str	r3, [r1, #80]	; 0x50
 800a956:	e001      	b.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a958:	7dfb      	ldrb	r3, [r7, #23]
 800a95a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a964:	2b00      	cmp	r3, #0
 800a966:	d049      	beq.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a96c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a970:	d02e      	beq.n	800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800a972:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a976:	d828      	bhi.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x476>
 800a978:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a97c:	d02a      	beq.n	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800a97e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a982:	d822      	bhi.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x476>
 800a984:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a988:	d026      	beq.n	800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800a98a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a98e:	d81c      	bhi.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x476>
 800a990:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a994:	d010      	beq.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800a996:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a99a:	d816      	bhi.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x476>
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d01d      	beq.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0x488>
 800a9a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9a4:	d111      	bne.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	3304      	adds	r3, #4
 800a9aa:	2101      	movs	r1, #1
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f001 fdf9 	bl	800c5a4 <RCCEx_PLL2_Config>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a9b6:	e012      	b.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	3324      	adds	r3, #36	; 0x24
 800a9bc:	2101      	movs	r1, #1
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f001 fea2 	bl	800c708 <RCCEx_PLL3_Config>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a9c8:	e009      	b.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	75fb      	strb	r3, [r7, #23]
      break;
 800a9ce:	e006      	b.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800a9d0:	bf00      	nop
 800a9d2:	e004      	b.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800a9d4:	bf00      	nop
 800a9d6:	e002      	b.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800a9d8:	bf00      	nop
 800a9da:	e000      	b.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800a9dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a9de:	7dfb      	ldrb	r3, [r7, #23]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d109      	bne.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a9e4:	4b2d      	ldr	r3, [pc, #180]	; (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a9e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9e8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9f0:	492a      	ldr	r1, [pc, #168]	; (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	650b      	str	r3, [r1, #80]	; 0x50
 800a9f6:	e001      	b.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9f8:	7dfb      	ldrb	r3, [r7, #23]
 800a9fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d04d      	beq.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800aa0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa12:	d02e      	beq.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800aa14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa18:	d828      	bhi.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800aa1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa1e:	d02a      	beq.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800aa20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa24:	d822      	bhi.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800aa26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aa2a:	d026      	beq.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0x526>
 800aa2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aa30:	d81c      	bhi.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800aa32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa36:	d010      	beq.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800aa38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa3c:	d816      	bhi.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d01d      	beq.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800aa42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa46:	d111      	bne.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	3304      	adds	r3, #4
 800aa4c:	2101      	movs	r1, #1
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f001 fda8 	bl	800c5a4 <RCCEx_PLL2_Config>
 800aa54:	4603      	mov	r3, r0
 800aa56:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800aa58:	e012      	b.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	3324      	adds	r3, #36	; 0x24
 800aa5e:	2101      	movs	r1, #1
 800aa60:	4618      	mov	r0, r3
 800aa62:	f001 fe51 	bl	800c708 <RCCEx_PLL3_Config>
 800aa66:	4603      	mov	r3, r0
 800aa68:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800aa6a:	e009      	b.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	75fb      	strb	r3, [r7, #23]
      break;
 800aa70:	e006      	b.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800aa72:	bf00      	nop
 800aa74:	e004      	b.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800aa76:	bf00      	nop
 800aa78:	e002      	b.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800aa7a:	bf00      	nop
 800aa7c:	e000      	b.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800aa7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa80:	7dfb      	ldrb	r3, [r7, #23]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d10c      	bne.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800aa86:	4b05      	ldr	r3, [pc, #20]	; (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800aa88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa8a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800aa94:	4901      	ldr	r1, [pc, #4]	; (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800aa96:	4313      	orrs	r3, r2
 800aa98:	658b      	str	r3, [r1, #88]	; 0x58
 800aa9a:	e003      	b.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800aa9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaa0:	7dfb      	ldrb	r3, [r7, #23]
 800aaa2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d02f      	beq.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aab8:	d00e      	beq.n	800aad8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800aaba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aabe:	d814      	bhi.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0x596>
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d015      	beq.n	800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800aac4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aac8:	d10f      	bne.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aaca:	4baf      	ldr	r3, [pc, #700]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800aacc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aace:	4aae      	ldr	r2, [pc, #696]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800aad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aad4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800aad6:	e00c      	b.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	3304      	adds	r3, #4
 800aadc:	2101      	movs	r1, #1
 800aade:	4618      	mov	r0, r3
 800aae0:	f001 fd60 	bl	800c5a4 <RCCEx_PLL2_Config>
 800aae4:	4603      	mov	r3, r0
 800aae6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800aae8:	e003      	b.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aaea:	2301      	movs	r3, #1
 800aaec:	75fb      	strb	r3, [r7, #23]
      break;
 800aaee:	e000      	b.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800aaf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aaf2:	7dfb      	ldrb	r3, [r7, #23]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d109      	bne.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800aaf8:	4ba3      	ldr	r3, [pc, #652]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800aafa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aafc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab04:	49a0      	ldr	r1, [pc, #640]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ab06:	4313      	orrs	r3, r2
 800ab08:	650b      	str	r3, [r1, #80]	; 0x50
 800ab0a:	e001      	b.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab0c:	7dfb      	ldrb	r3, [r7, #23]
 800ab0e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d032      	beq.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab20:	2b03      	cmp	r3, #3
 800ab22:	d81b      	bhi.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0x608>
 800ab24:	a201      	add	r2, pc, #4	; (adr r2, 800ab2c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800ab26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab2a:	bf00      	nop
 800ab2c:	0800ab63 	.word	0x0800ab63
 800ab30:	0800ab3d 	.word	0x0800ab3d
 800ab34:	0800ab4b 	.word	0x0800ab4b
 800ab38:	0800ab63 	.word	0x0800ab63
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab3c:	4b92      	ldr	r3, [pc, #584]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ab3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab40:	4a91      	ldr	r2, [pc, #580]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ab42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ab48:	e00c      	b.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	3304      	adds	r3, #4
 800ab4e:	2102      	movs	r1, #2
 800ab50:	4618      	mov	r0, r3
 800ab52:	f001 fd27 	bl	800c5a4 <RCCEx_PLL2_Config>
 800ab56:	4603      	mov	r3, r0
 800ab58:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ab5a:	e003      	b.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	75fb      	strb	r3, [r7, #23]
      break;
 800ab60:	e000      	b.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800ab62:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab64:	7dfb      	ldrb	r3, [r7, #23]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d109      	bne.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ab6a:	4b87      	ldr	r3, [pc, #540]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ab6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab6e:	f023 0203 	bic.w	r2, r3, #3
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab76:	4984      	ldr	r1, [pc, #528]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ab7c:	e001      	b.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab7e:	7dfb      	ldrb	r3, [r7, #23]
 800ab80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	f000 8086 	beq.w	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ab90:	4b7e      	ldr	r3, [pc, #504]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a7d      	ldr	r2, [pc, #500]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800ab96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ab9c:	f7f7 fddc 	bl	8002758 <HAL_GetTick>
 800aba0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aba2:	e009      	b.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aba4:	f7f7 fdd8 	bl	8002758 <HAL_GetTick>
 800aba8:	4602      	mov	r2, r0
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	1ad3      	subs	r3, r2, r3
 800abae:	2b64      	cmp	r3, #100	; 0x64
 800abb0:	d902      	bls.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800abb2:	2303      	movs	r3, #3
 800abb4:	75fb      	strb	r3, [r7, #23]
        break;
 800abb6:	e005      	b.n	800abc4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800abb8:	4b74      	ldr	r3, [pc, #464]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d0ef      	beq.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800abc4:	7dfb      	ldrb	r3, [r7, #23]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d166      	bne.n	800ac98 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800abca:	4b6f      	ldr	r3, [pc, #444]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800abcc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800abd4:	4053      	eors	r3, r2
 800abd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d013      	beq.n	800ac06 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800abde:	4b6a      	ldr	r3, [pc, #424]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800abe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abe6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800abe8:	4b67      	ldr	r3, [pc, #412]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800abea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abec:	4a66      	ldr	r2, [pc, #408]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800abee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800abf2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800abf4:	4b64      	ldr	r3, [pc, #400]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800abf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abf8:	4a63      	ldr	r2, [pc, #396]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800abfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800abfe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ac00:	4a61      	ldr	r2, [pc, #388]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ac0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac10:	d115      	bne.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac12:	f7f7 fda1 	bl	8002758 <HAL_GetTick>
 800ac16:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac18:	e00b      	b.n	800ac32 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac1a:	f7f7 fd9d 	bl	8002758 <HAL_GetTick>
 800ac1e:	4602      	mov	r2, r0
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	1ad3      	subs	r3, r2, r3
 800ac24:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d902      	bls.n	800ac32 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800ac2c:	2303      	movs	r3, #3
 800ac2e:	75fb      	strb	r3, [r7, #23]
            break;
 800ac30:	e005      	b.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac32:	4b55      	ldr	r3, [pc, #340]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ac34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac36:	f003 0302 	and.w	r3, r3, #2
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d0ed      	beq.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800ac3e:	7dfb      	ldrb	r3, [r7, #23]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d126      	bne.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ac4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac52:	d10d      	bne.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800ac54:	4b4c      	ldr	r3, [pc, #304]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ac56:	691b      	ldr	r3, [r3, #16]
 800ac58:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ac62:	0919      	lsrs	r1, r3, #4
 800ac64:	4b4a      	ldr	r3, [pc, #296]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800ac66:	400b      	ands	r3, r1
 800ac68:	4947      	ldr	r1, [pc, #284]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	610b      	str	r3, [r1, #16]
 800ac6e:	e005      	b.n	800ac7c <HAL_RCCEx_PeriphCLKConfig+0x728>
 800ac70:	4b45      	ldr	r3, [pc, #276]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ac72:	691b      	ldr	r3, [r3, #16]
 800ac74:	4a44      	ldr	r2, [pc, #272]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ac76:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ac7a:	6113      	str	r3, [r2, #16]
 800ac7c:	4b42      	ldr	r3, [pc, #264]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ac7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ac86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac8a:	493f      	ldr	r1, [pc, #252]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	670b      	str	r3, [r1, #112]	; 0x70
 800ac90:	e004      	b.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ac92:	7dfb      	ldrb	r3, [r7, #23]
 800ac94:	75bb      	strb	r3, [r7, #22]
 800ac96:	e001      	b.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac98:	7dfb      	ldrb	r3, [r7, #23]
 800ac9a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f003 0301 	and.w	r3, r3, #1
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	f000 8085 	beq.w	800adb4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acae:	2b28      	cmp	r3, #40	; 0x28
 800acb0:	d866      	bhi.n	800ad80 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800acb2:	a201      	add	r2, pc, #4	; (adr r2, 800acb8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800acb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb8:	0800ad95 	.word	0x0800ad95
 800acbc:	0800ad81 	.word	0x0800ad81
 800acc0:	0800ad81 	.word	0x0800ad81
 800acc4:	0800ad81 	.word	0x0800ad81
 800acc8:	0800ad81 	.word	0x0800ad81
 800accc:	0800ad81 	.word	0x0800ad81
 800acd0:	0800ad81 	.word	0x0800ad81
 800acd4:	0800ad81 	.word	0x0800ad81
 800acd8:	0800ad5d 	.word	0x0800ad5d
 800acdc:	0800ad81 	.word	0x0800ad81
 800ace0:	0800ad81 	.word	0x0800ad81
 800ace4:	0800ad81 	.word	0x0800ad81
 800ace8:	0800ad81 	.word	0x0800ad81
 800acec:	0800ad81 	.word	0x0800ad81
 800acf0:	0800ad81 	.word	0x0800ad81
 800acf4:	0800ad81 	.word	0x0800ad81
 800acf8:	0800ad6f 	.word	0x0800ad6f
 800acfc:	0800ad81 	.word	0x0800ad81
 800ad00:	0800ad81 	.word	0x0800ad81
 800ad04:	0800ad81 	.word	0x0800ad81
 800ad08:	0800ad81 	.word	0x0800ad81
 800ad0c:	0800ad81 	.word	0x0800ad81
 800ad10:	0800ad81 	.word	0x0800ad81
 800ad14:	0800ad81 	.word	0x0800ad81
 800ad18:	0800ad95 	.word	0x0800ad95
 800ad1c:	0800ad81 	.word	0x0800ad81
 800ad20:	0800ad81 	.word	0x0800ad81
 800ad24:	0800ad81 	.word	0x0800ad81
 800ad28:	0800ad81 	.word	0x0800ad81
 800ad2c:	0800ad81 	.word	0x0800ad81
 800ad30:	0800ad81 	.word	0x0800ad81
 800ad34:	0800ad81 	.word	0x0800ad81
 800ad38:	0800ad95 	.word	0x0800ad95
 800ad3c:	0800ad81 	.word	0x0800ad81
 800ad40:	0800ad81 	.word	0x0800ad81
 800ad44:	0800ad81 	.word	0x0800ad81
 800ad48:	0800ad81 	.word	0x0800ad81
 800ad4c:	0800ad81 	.word	0x0800ad81
 800ad50:	0800ad81 	.word	0x0800ad81
 800ad54:	0800ad81 	.word	0x0800ad81
 800ad58:	0800ad95 	.word	0x0800ad95
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	3304      	adds	r3, #4
 800ad60:	2101      	movs	r1, #1
 800ad62:	4618      	mov	r0, r3
 800ad64:	f001 fc1e 	bl	800c5a4 <RCCEx_PLL2_Config>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ad6c:	e013      	b.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	3324      	adds	r3, #36	; 0x24
 800ad72:	2101      	movs	r1, #1
 800ad74:	4618      	mov	r0, r3
 800ad76:	f001 fcc7 	bl	800c708 <RCCEx_PLL3_Config>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ad7e:	e00a      	b.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ad80:	2301      	movs	r3, #1
 800ad82:	75fb      	strb	r3, [r7, #23]
      break;
 800ad84:	e007      	b.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800ad86:	bf00      	nop
 800ad88:	58024400 	.word	0x58024400
 800ad8c:	58024800 	.word	0x58024800
 800ad90:	00ffffcf 	.word	0x00ffffcf
      break;
 800ad94:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad96:	7dfb      	ldrb	r3, [r7, #23]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d109      	bne.n	800adb0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ad9c:	4b96      	ldr	r3, [pc, #600]	; (800aff8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ad9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ada0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ada8:	4993      	ldr	r1, [pc, #588]	; (800aff8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800adaa:	4313      	orrs	r3, r2
 800adac:	654b      	str	r3, [r1, #84]	; 0x54
 800adae:	e001      	b.n	800adb4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adb0:	7dfb      	ldrb	r3, [r7, #23]
 800adb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f003 0302 	and.w	r3, r3, #2
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d038      	beq.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adc4:	2b05      	cmp	r3, #5
 800adc6:	d821      	bhi.n	800ae0c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800adc8:	a201      	add	r2, pc, #4	; (adr r2, 800add0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800adca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adce:	bf00      	nop
 800add0:	0800ae13 	.word	0x0800ae13
 800add4:	0800ade9 	.word	0x0800ade9
 800add8:	0800adfb 	.word	0x0800adfb
 800addc:	0800ae13 	.word	0x0800ae13
 800ade0:	0800ae13 	.word	0x0800ae13
 800ade4:	0800ae13 	.word	0x0800ae13
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	3304      	adds	r3, #4
 800adec:	2101      	movs	r1, #1
 800adee:	4618      	mov	r0, r3
 800adf0:	f001 fbd8 	bl	800c5a4 <RCCEx_PLL2_Config>
 800adf4:	4603      	mov	r3, r0
 800adf6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800adf8:	e00c      	b.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	3324      	adds	r3, #36	; 0x24
 800adfe:	2101      	movs	r1, #1
 800ae00:	4618      	mov	r0, r3
 800ae02:	f001 fc81 	bl	800c708 <RCCEx_PLL3_Config>
 800ae06:	4603      	mov	r3, r0
 800ae08:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ae0a:	e003      	b.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	75fb      	strb	r3, [r7, #23]
      break;
 800ae10:	e000      	b.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800ae12:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae14:	7dfb      	ldrb	r3, [r7, #23]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d109      	bne.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ae1a:	4b77      	ldr	r3, [pc, #476]	; (800aff8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ae1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae1e:	f023 0207 	bic.w	r2, r3, #7
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae26:	4974      	ldr	r1, [pc, #464]	; (800aff8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	654b      	str	r3, [r1, #84]	; 0x54
 800ae2c:	e001      	b.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae2e:	7dfb      	ldrb	r3, [r7, #23]
 800ae30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f003 0304 	and.w	r3, r3, #4
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d03a      	beq.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae44:	2b05      	cmp	r3, #5
 800ae46:	d821      	bhi.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x938>
 800ae48:	a201      	add	r2, pc, #4	; (adr r2, 800ae50 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800ae4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae4e:	bf00      	nop
 800ae50:	0800ae93 	.word	0x0800ae93
 800ae54:	0800ae69 	.word	0x0800ae69
 800ae58:	0800ae7b 	.word	0x0800ae7b
 800ae5c:	0800ae93 	.word	0x0800ae93
 800ae60:	0800ae93 	.word	0x0800ae93
 800ae64:	0800ae93 	.word	0x0800ae93
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	3304      	adds	r3, #4
 800ae6c:	2101      	movs	r1, #1
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f001 fb98 	bl	800c5a4 <RCCEx_PLL2_Config>
 800ae74:	4603      	mov	r3, r0
 800ae76:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800ae78:	e00c      	b.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	3324      	adds	r3, #36	; 0x24
 800ae7e:	2101      	movs	r1, #1
 800ae80:	4618      	mov	r0, r3
 800ae82:	f001 fc41 	bl	800c708 <RCCEx_PLL3_Config>
 800ae86:	4603      	mov	r3, r0
 800ae88:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800ae8a:	e003      	b.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	75fb      	strb	r3, [r7, #23]
      break;
 800ae90:	e000      	b.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800ae92:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae94:	7dfb      	ldrb	r3, [r7, #23]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d10a      	bne.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ae9a:	4b57      	ldr	r3, [pc, #348]	; (800aff8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ae9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae9e:	f023 0207 	bic.w	r2, r3, #7
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aea8:	4953      	ldr	r1, [pc, #332]	; (800aff8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	658b      	str	r3, [r1, #88]	; 0x58
 800aeae:	e001      	b.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeb0:	7dfb      	ldrb	r3, [r7, #23]
 800aeb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f003 0320 	and.w	r3, r3, #32
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d04b      	beq.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aec6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aeca:	d02e      	beq.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800aecc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aed0:	d828      	bhi.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800aed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aed6:	d02a      	beq.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800aed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aedc:	d822      	bhi.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800aede:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aee2:	d026      	beq.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800aee4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aee8:	d81c      	bhi.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800aeea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aeee:	d010      	beq.n	800af12 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800aef0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aef4:	d816      	bhi.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d01d      	beq.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800aefa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aefe:	d111      	bne.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	3304      	adds	r3, #4
 800af04:	2100      	movs	r1, #0
 800af06:	4618      	mov	r0, r3
 800af08:	f001 fb4c 	bl	800c5a4 <RCCEx_PLL2_Config>
 800af0c:	4603      	mov	r3, r0
 800af0e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800af10:	e012      	b.n	800af38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	3324      	adds	r3, #36	; 0x24
 800af16:	2102      	movs	r1, #2
 800af18:	4618      	mov	r0, r3
 800af1a:	f001 fbf5 	bl	800c708 <RCCEx_PLL3_Config>
 800af1e:	4603      	mov	r3, r0
 800af20:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800af22:	e009      	b.n	800af38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800af24:	2301      	movs	r3, #1
 800af26:	75fb      	strb	r3, [r7, #23]
      break;
 800af28:	e006      	b.n	800af38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800af2a:	bf00      	nop
 800af2c:	e004      	b.n	800af38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800af2e:	bf00      	nop
 800af30:	e002      	b.n	800af38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800af32:	bf00      	nop
 800af34:	e000      	b.n	800af38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800af36:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af38:	7dfb      	ldrb	r3, [r7, #23]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d10a      	bne.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800af3e:	4b2e      	ldr	r3, [pc, #184]	; (800aff8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800af40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af42:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af4c:	492a      	ldr	r1, [pc, #168]	; (800aff8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800af4e:	4313      	orrs	r3, r2
 800af50:	654b      	str	r3, [r1, #84]	; 0x54
 800af52:	e001      	b.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af54:	7dfb      	ldrb	r3, [r7, #23]
 800af56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af60:	2b00      	cmp	r3, #0
 800af62:	d04d      	beq.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800af6a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800af6e:	d02e      	beq.n	800afce <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800af70:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800af74:	d828      	bhi.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800af76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af7a:	d02a      	beq.n	800afd2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800af7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af80:	d822      	bhi.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800af82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800af86:	d026      	beq.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800af88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800af8c:	d81c      	bhi.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800af8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af92:	d010      	beq.n	800afb6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800af94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af98:	d816      	bhi.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d01d      	beq.n	800afda <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800af9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afa2:	d111      	bne.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	3304      	adds	r3, #4
 800afa8:	2100      	movs	r1, #0
 800afaa:	4618      	mov	r0, r3
 800afac:	f001 fafa 	bl	800c5a4 <RCCEx_PLL2_Config>
 800afb0:	4603      	mov	r3, r0
 800afb2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800afb4:	e012      	b.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	3324      	adds	r3, #36	; 0x24
 800afba:	2102      	movs	r1, #2
 800afbc:	4618      	mov	r0, r3
 800afbe:	f001 fba3 	bl	800c708 <RCCEx_PLL3_Config>
 800afc2:	4603      	mov	r3, r0
 800afc4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800afc6:	e009      	b.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800afc8:	2301      	movs	r3, #1
 800afca:	75fb      	strb	r3, [r7, #23]
      break;
 800afcc:	e006      	b.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800afce:	bf00      	nop
 800afd0:	e004      	b.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800afd2:	bf00      	nop
 800afd4:	e002      	b.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800afd6:	bf00      	nop
 800afd8:	e000      	b.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800afda:	bf00      	nop
    }

    if(ret == HAL_OK)
 800afdc:	7dfb      	ldrb	r3, [r7, #23]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d10c      	bne.n	800affc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800afe2:	4b05      	ldr	r3, [pc, #20]	; (800aff8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800afe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afe6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aff0:	4901      	ldr	r1, [pc, #4]	; (800aff8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800aff2:	4313      	orrs	r3, r2
 800aff4:	658b      	str	r3, [r1, #88]	; 0x58
 800aff6:	e003      	b.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800aff8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800affc:	7dfb      	ldrb	r3, [r7, #23]
 800affe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d04b      	beq.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b012:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b016:	d02e      	beq.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800b018:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b01c:	d828      	bhi.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b01e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b022:	d02a      	beq.n	800b07a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800b024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b028:	d822      	bhi.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b02a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b02e:	d026      	beq.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800b030:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b034:	d81c      	bhi.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b036:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b03a:	d010      	beq.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800b03c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b040:	d816      	bhi.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b042:	2b00      	cmp	r3, #0
 800b044:	d01d      	beq.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800b046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b04a:	d111      	bne.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	3304      	adds	r3, #4
 800b050:	2100      	movs	r1, #0
 800b052:	4618      	mov	r0, r3
 800b054:	f001 faa6 	bl	800c5a4 <RCCEx_PLL2_Config>
 800b058:	4603      	mov	r3, r0
 800b05a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b05c:	e012      	b.n	800b084 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	3324      	adds	r3, #36	; 0x24
 800b062:	2102      	movs	r1, #2
 800b064:	4618      	mov	r0, r3
 800b066:	f001 fb4f 	bl	800c708 <RCCEx_PLL3_Config>
 800b06a:	4603      	mov	r3, r0
 800b06c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b06e:	e009      	b.n	800b084 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b070:	2301      	movs	r3, #1
 800b072:	75fb      	strb	r3, [r7, #23]
      break;
 800b074:	e006      	b.n	800b084 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b076:	bf00      	nop
 800b078:	e004      	b.n	800b084 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b07a:	bf00      	nop
 800b07c:	e002      	b.n	800b084 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b07e:	bf00      	nop
 800b080:	e000      	b.n	800b084 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b082:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b084:	7dfb      	ldrb	r3, [r7, #23]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d10a      	bne.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b08a:	4b9d      	ldr	r3, [pc, #628]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b08c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b08e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b098:	4999      	ldr	r1, [pc, #612]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b09a:	4313      	orrs	r3, r2
 800b09c:	658b      	str	r3, [r1, #88]	; 0x58
 800b09e:	e001      	b.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0a0:	7dfb      	ldrb	r3, [r7, #23]
 800b0a2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f003 0308 	and.w	r3, r3, #8
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d01a      	beq.n	800b0e6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0ba:	d10a      	bne.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	3324      	adds	r3, #36	; 0x24
 800b0c0:	2102      	movs	r1, #2
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f001 fb20 	bl	800c708 <RCCEx_PLL3_Config>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d001      	beq.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b0d2:	4b8b      	ldr	r3, [pc, #556]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b0d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0e0:	4987      	ldr	r1, [pc, #540]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f003 0310 	and.w	r3, r3, #16
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d01a      	beq.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b0f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0fc:	d10a      	bne.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	3324      	adds	r3, #36	; 0x24
 800b102:	2102      	movs	r1, #2
 800b104:	4618      	mov	r0, r3
 800b106:	f001 faff 	bl	800c708 <RCCEx_PLL3_Config>
 800b10a:	4603      	mov	r3, r0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d001      	beq.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800b110:	2301      	movs	r3, #1
 800b112:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b114:	4b7a      	ldr	r3, [pc, #488]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b118:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b122:	4977      	ldr	r1, [pc, #476]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b124:	4313      	orrs	r3, r2
 800b126:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b130:	2b00      	cmp	r3, #0
 800b132:	d034      	beq.n	800b19e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b13a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b13e:	d01d      	beq.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800b140:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b144:	d817      	bhi.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800b146:	2b00      	cmp	r3, #0
 800b148:	d003      	beq.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800b14a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b14e:	d009      	beq.n	800b164 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800b150:	e011      	b.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	3304      	adds	r3, #4
 800b156:	2100      	movs	r1, #0
 800b158:	4618      	mov	r0, r3
 800b15a:	f001 fa23 	bl	800c5a4 <RCCEx_PLL2_Config>
 800b15e:	4603      	mov	r3, r0
 800b160:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b162:	e00c      	b.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	3324      	adds	r3, #36	; 0x24
 800b168:	2102      	movs	r1, #2
 800b16a:	4618      	mov	r0, r3
 800b16c:	f001 facc 	bl	800c708 <RCCEx_PLL3_Config>
 800b170:	4603      	mov	r3, r0
 800b172:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b174:	e003      	b.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b176:	2301      	movs	r3, #1
 800b178:	75fb      	strb	r3, [r7, #23]
      break;
 800b17a:	e000      	b.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800b17c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b17e:	7dfb      	ldrb	r3, [r7, #23]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d10a      	bne.n	800b19a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b184:	4b5e      	ldr	r3, [pc, #376]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b188:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b192:	495b      	ldr	r1, [pc, #364]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b194:	4313      	orrs	r3, r2
 800b196:	658b      	str	r3, [r1, #88]	; 0x58
 800b198:	e001      	b.n	800b19e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b19a:	7dfb      	ldrb	r3, [r7, #23]
 800b19c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d033      	beq.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b1b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b1b4:	d01c      	beq.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800b1b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b1ba:	d816      	bhi.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800b1bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1c0:	d003      	beq.n	800b1ca <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800b1c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b1c6:	d007      	beq.n	800b1d8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800b1c8:	e00f      	b.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1ca:	4b4d      	ldr	r3, [pc, #308]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ce:	4a4c      	ldr	r2, [pc, #304]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b1d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b1d6:	e00c      	b.n	800b1f2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	3324      	adds	r3, #36	; 0x24
 800b1dc:	2101      	movs	r1, #1
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f001 fa92 	bl	800c708 <RCCEx_PLL3_Config>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b1e8:	e003      	b.n	800b1f2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	75fb      	strb	r3, [r7, #23]
      break;
 800b1ee:	e000      	b.n	800b1f2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800b1f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b1f2:	7dfb      	ldrb	r3, [r7, #23]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d10a      	bne.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b1f8:	4b41      	ldr	r3, [pc, #260]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b1fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b206:	493e      	ldr	r1, [pc, #248]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b208:	4313      	orrs	r3, r2
 800b20a:	654b      	str	r3, [r1, #84]	; 0x54
 800b20c:	e001      	b.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b20e:	7dfb      	ldrb	r3, [r7, #23]
 800b210:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d029      	beq.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b222:	2b00      	cmp	r3, #0
 800b224:	d003      	beq.n	800b22e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800b226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b22a:	d007      	beq.n	800b23c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800b22c:	e00f      	b.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b22e:	4b34      	ldr	r3, [pc, #208]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b232:	4a33      	ldr	r2, [pc, #204]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b238:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b23a:	e00b      	b.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	3304      	adds	r3, #4
 800b240:	2102      	movs	r1, #2
 800b242:	4618      	mov	r0, r3
 800b244:	f001 f9ae 	bl	800c5a4 <RCCEx_PLL2_Config>
 800b248:	4603      	mov	r3, r0
 800b24a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b24c:	e002      	b.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800b24e:	2301      	movs	r3, #1
 800b250:	75fb      	strb	r3, [r7, #23]
      break;
 800b252:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b254:	7dfb      	ldrb	r3, [r7, #23]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d109      	bne.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b25a:	4b29      	ldr	r3, [pc, #164]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b25c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b25e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b266:	4926      	ldr	r1, [pc, #152]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b268:	4313      	orrs	r3, r2
 800b26a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b26c:	e001      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b26e:	7dfb      	ldrb	r3, [r7, #23]
 800b270:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d00a      	beq.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	3324      	adds	r3, #36	; 0x24
 800b282:	2102      	movs	r1, #2
 800b284:	4618      	mov	r0, r3
 800b286:	f001 fa3f 	bl	800c708 <RCCEx_PLL3_Config>
 800b28a:	4603      	mov	r3, r0
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d001      	beq.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800b290:	2301      	movs	r3, #1
 800b292:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d033      	beq.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b2a8:	d017      	beq.n	800b2da <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800b2aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b2ae:	d811      	bhi.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800b2b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2b4:	d013      	beq.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800b2b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2ba:	d80b      	bhi.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d010      	beq.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800b2c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2c4:	d106      	bne.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2c6:	4b0e      	ldr	r3, [pc, #56]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b2c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ca:	4a0d      	ldr	r2, [pc, #52]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b2cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b2d2:	e007      	b.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	75fb      	strb	r3, [r7, #23]
      break;
 800b2d8:	e004      	b.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800b2da:	bf00      	nop
 800b2dc:	e002      	b.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800b2de:	bf00      	nop
 800b2e0:	e000      	b.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800b2e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b2e4:	7dfb      	ldrb	r3, [r7, #23]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d10c      	bne.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b2ea:	4b05      	ldr	r3, [pc, #20]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b2ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2f6:	4902      	ldr	r1, [pc, #8]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	654b      	str	r3, [r1, #84]	; 0x54
 800b2fc:	e004      	b.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800b2fe:	bf00      	nop
 800b300:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b304:	7dfb      	ldrb	r3, [r7, #23]
 800b306:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b310:	2b00      	cmp	r3, #0
 800b312:	d008      	beq.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b314:	4b31      	ldr	r3, [pc, #196]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b318:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b320:	492e      	ldr	r1, [pc, #184]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b322:	4313      	orrs	r3, r2
 800b324:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d009      	beq.n	800b346 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b332:	4b2a      	ldr	r3, [pc, #168]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b334:	691b      	ldr	r3, [r3, #16]
 800b336:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b340:	4926      	ldr	r1, [pc, #152]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b342:	4313      	orrs	r3, r2
 800b344:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d008      	beq.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b352:	4b22      	ldr	r3, [pc, #136]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b356:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b35e:	491f      	ldr	r1, [pc, #124]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b360:	4313      	orrs	r3, r2
 800b362:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d00d      	beq.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b370:	4b1a      	ldr	r3, [pc, #104]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b372:	691b      	ldr	r3, [r3, #16]
 800b374:	4a19      	ldr	r2, [pc, #100]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b376:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b37a:	6113      	str	r3, [r2, #16]
 800b37c:	4b17      	ldr	r3, [pc, #92]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b37e:	691a      	ldr	r2, [r3, #16]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b386:	4915      	ldr	r1, [pc, #84]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b388:	4313      	orrs	r3, r2
 800b38a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	2b00      	cmp	r3, #0
 800b392:	da08      	bge.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b394:	4b11      	ldr	r3, [pc, #68]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b398:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3a0:	490e      	ldr	r1, [pc, #56]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d009      	beq.n	800b3c6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b3b2:	4b0a      	ldr	r3, [pc, #40]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b3b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3c0:	4906      	ldr	r1, [pc, #24]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800b3c6:	7dbb      	ldrb	r3, [r7, #22]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d101      	bne.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	e000      	b.n	800b3d2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800b3d0:	2301      	movs	r3, #1
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3718      	adds	r7, #24
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	58024400 	.word	0x58024400

0800b3e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b090      	sub	sp, #64	; 0x40
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3ee:	f040 8095 	bne.w	800b51c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800b3f2:	4b97      	ldr	r3, [pc, #604]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b3f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3f6:	f003 0307 	and.w	r3, r3, #7
 800b3fa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fe:	2b04      	cmp	r3, #4
 800b400:	f200 8088 	bhi.w	800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800b404:	a201      	add	r2, pc, #4	; (adr r2, 800b40c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800b406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b40a:	bf00      	nop
 800b40c:	0800b421 	.word	0x0800b421
 800b410:	0800b449 	.word	0x0800b449
 800b414:	0800b471 	.word	0x0800b471
 800b418:	0800b50d 	.word	0x0800b50d
 800b41c:	0800b499 	.word	0x0800b499
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b420:	4b8b      	ldr	r3, [pc, #556]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b428:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b42c:	d108      	bne.n	800b440 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b42e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b432:	4618      	mov	r0, r3
 800b434:	f000 ff64 	bl	800c300 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800b438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b43a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b43c:	f000 bc94 	b.w	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b440:	2300      	movs	r3, #0
 800b442:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b444:	f000 bc90 	b.w	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b448:	4b81      	ldr	r3, [pc, #516]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b450:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b454:	d108      	bne.n	800b468 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b456:	f107 0318 	add.w	r3, r7, #24
 800b45a:	4618      	mov	r0, r3
 800b45c:	f000 fca8 	bl	800bdb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b460:	69bb      	ldr	r3, [r7, #24]
 800b462:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b464:	f000 bc80 	b.w	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b468:	2300      	movs	r3, #0
 800b46a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b46c:	f000 bc7c 	b.w	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b470:	4b77      	ldr	r3, [pc, #476]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b478:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b47c:	d108      	bne.n	800b490 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b47e:	f107 030c 	add.w	r3, r7, #12
 800b482:	4618      	mov	r0, r3
 800b484:	f000 fde8 	bl	800c058 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b48c:	f000 bc6c 	b.w	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b490:	2300      	movs	r3, #0
 800b492:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b494:	f000 bc68 	b.w	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b498:	4b6d      	ldr	r3, [pc, #436]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b49a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b49c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b4a0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b4a2:	4b6b      	ldr	r3, [pc, #428]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f003 0304 	and.w	r3, r3, #4
 800b4aa:	2b04      	cmp	r3, #4
 800b4ac:	d10c      	bne.n	800b4c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800b4ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d109      	bne.n	800b4c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b4b4:	4b66      	ldr	r3, [pc, #408]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	08db      	lsrs	r3, r3, #3
 800b4ba:	f003 0303 	and.w	r3, r3, #3
 800b4be:	4a65      	ldr	r2, [pc, #404]	; (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b4c0:	fa22 f303 	lsr.w	r3, r2, r3
 800b4c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4c6:	e01f      	b.n	800b508 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b4c8:	4b61      	ldr	r3, [pc, #388]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4d4:	d106      	bne.n	800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800b4d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4dc:	d102      	bne.n	800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b4de:	4b5e      	ldr	r3, [pc, #376]	; (800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b4e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4e2:	e011      	b.n	800b508 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b4e4:	4b5a      	ldr	r3, [pc, #360]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4f0:	d106      	bne.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800b4f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4f8:	d102      	bne.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b4fa:	4b58      	ldr	r3, [pc, #352]	; (800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b4fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4fe:	e003      	b.n	800b508 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b500:	2300      	movs	r3, #0
 800b502:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b504:	f000 bc30 	b.w	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b508:	f000 bc2e 	b.w	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b50c:	4b54      	ldr	r3, [pc, #336]	; (800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800b50e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b510:	f000 bc2a 	b.w	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800b514:	2300      	movs	r3, #0
 800b516:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b518:	f000 bc26 	b.w	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b522:	f040 809f 	bne.w	800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800b526:	4b4a      	ldr	r3, [pc, #296]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b52a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b52e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b536:	d04d      	beq.n	800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800b538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b53e:	f200 8084 	bhi.w	800b64a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800b542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b544:	2bc0      	cmp	r3, #192	; 0xc0
 800b546:	d07d      	beq.n	800b644 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800b548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b54a:	2bc0      	cmp	r3, #192	; 0xc0
 800b54c:	d87d      	bhi.n	800b64a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800b54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b550:	2b80      	cmp	r3, #128	; 0x80
 800b552:	d02d      	beq.n	800b5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800b554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b556:	2b80      	cmp	r3, #128	; 0x80
 800b558:	d877      	bhi.n	800b64a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800b55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d003      	beq.n	800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800b560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b562:	2b40      	cmp	r3, #64	; 0x40
 800b564:	d012      	beq.n	800b58c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800b566:	e070      	b.n	800b64a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b568:	4b39      	ldr	r3, [pc, #228]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b570:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b574:	d107      	bne.n	800b586 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b57a:	4618      	mov	r0, r3
 800b57c:	f000 fec0 	bl	800c300 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b582:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b584:	e3f0      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b586:	2300      	movs	r3, #0
 800b588:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b58a:	e3ed      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b58c:	4b30      	ldr	r3, [pc, #192]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b594:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b598:	d107      	bne.n	800b5aa <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b59a:	f107 0318 	add.w	r3, r7, #24
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f000 fc06 	bl	800bdb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b5a4:	69bb      	ldr	r3, [r7, #24]
 800b5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b5a8:	e3de      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5ae:	e3db      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b5b0:	4b27      	ldr	r3, [pc, #156]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5bc:	d107      	bne.n	800b5ce <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5be:	f107 030c 	add.w	r3, r7, #12
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f000 fd48 	bl	800c058 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b5cc:	e3cc      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5d2:	e3c9      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b5d4:	4b1e      	ldr	r3, [pc, #120]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b5d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b5dc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b5de:	4b1c      	ldr	r3, [pc, #112]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f003 0304 	and.w	r3, r3, #4
 800b5e6:	2b04      	cmp	r3, #4
 800b5e8:	d10c      	bne.n	800b604 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800b5ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d109      	bne.n	800b604 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b5f0:	4b17      	ldr	r3, [pc, #92]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	08db      	lsrs	r3, r3, #3
 800b5f6:	f003 0303 	and.w	r3, r3, #3
 800b5fa:	4a16      	ldr	r2, [pc, #88]	; (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b5fc:	fa22 f303 	lsr.w	r3, r2, r3
 800b600:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b602:	e01e      	b.n	800b642 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b604:	4b12      	ldr	r3, [pc, #72]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b60c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b610:	d106      	bne.n	800b620 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800b612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b614:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b618:	d102      	bne.n	800b620 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b61a:	4b0f      	ldr	r3, [pc, #60]	; (800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b61c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b61e:	e010      	b.n	800b642 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b620:	4b0b      	ldr	r3, [pc, #44]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b628:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b62c:	d106      	bne.n	800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800b62e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b630:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b634:	d102      	bne.n	800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b636:	4b09      	ldr	r3, [pc, #36]	; (800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b638:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b63a:	e002      	b.n	800b642 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b63c:	2300      	movs	r3, #0
 800b63e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b640:	e392      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b642:	e391      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b644:	4b06      	ldr	r3, [pc, #24]	; (800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800b646:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b648:	e38e      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800b64a:	2300      	movs	r3, #0
 800b64c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b64e:	e38b      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b650:	58024400 	.word	0x58024400
 800b654:	03d09000 	.word	0x03d09000
 800b658:	003d0900 	.word	0x003d0900
 800b65c:	007a1200 	.word	0x007a1200
 800b660:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b66a:	f040 809c 	bne.w	800b7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800b66e:	4b9d      	ldr	r3, [pc, #628]	; (800b8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b672:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b676:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b67e:	d054      	beq.n	800b72a <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800b680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b682:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b686:	f200 808b 	bhi.w	800b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800b68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b690:	f000 8083 	beq.w	800b79a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800b694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b696:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b69a:	f200 8081 	bhi.w	800b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800b69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b6a4:	d02f      	beq.n	800b706 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800b6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b6ac:	d878      	bhi.n	800b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800b6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d004      	beq.n	800b6be <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800b6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b6ba:	d012      	beq.n	800b6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800b6bc:	e070      	b.n	800b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b6be:	4b89      	ldr	r3, [pc, #548]	; (800b8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6ca:	d107      	bne.n	800b6dc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b6cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f000 fe15 	bl	800c300 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b6da:	e345      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6e0:	e342      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b6e2:	4b80      	ldr	r3, [pc, #512]	; (800b8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b6ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b6ee:	d107      	bne.n	800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6f0:	f107 0318 	add.w	r3, r7, #24
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f000 fb5b 	bl	800bdb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b6fa:	69bb      	ldr	r3, [r7, #24]
 800b6fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b6fe:	e333      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b700:	2300      	movs	r3, #0
 800b702:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b704:	e330      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b706:	4b77      	ldr	r3, [pc, #476]	; (800b8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b70e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b712:	d107      	bne.n	800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b714:	f107 030c 	add.w	r3, r7, #12
 800b718:	4618      	mov	r0, r3
 800b71a:	f000 fc9d 	bl	800c058 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b722:	e321      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b724:	2300      	movs	r3, #0
 800b726:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b728:	e31e      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b72a:	4b6e      	ldr	r3, [pc, #440]	; (800b8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b72c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b72e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b732:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b734:	4b6b      	ldr	r3, [pc, #428]	; (800b8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f003 0304 	and.w	r3, r3, #4
 800b73c:	2b04      	cmp	r3, #4
 800b73e:	d10c      	bne.n	800b75a <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800b740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b742:	2b00      	cmp	r3, #0
 800b744:	d109      	bne.n	800b75a <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b746:	4b67      	ldr	r3, [pc, #412]	; (800b8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	08db      	lsrs	r3, r3, #3
 800b74c:	f003 0303 	and.w	r3, r3, #3
 800b750:	4a65      	ldr	r2, [pc, #404]	; (800b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800b752:	fa22 f303 	lsr.w	r3, r2, r3
 800b756:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b758:	e01e      	b.n	800b798 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b75a:	4b62      	ldr	r3, [pc, #392]	; (800b8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b766:	d106      	bne.n	800b776 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800b768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b76a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b76e:	d102      	bne.n	800b776 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b770:	4b5e      	ldr	r3, [pc, #376]	; (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800b772:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b774:	e010      	b.n	800b798 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b776:	4b5b      	ldr	r3, [pc, #364]	; (800b8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b77e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b782:	d106      	bne.n	800b792 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b786:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b78a:	d102      	bne.n	800b792 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b78c:	4b58      	ldr	r3, [pc, #352]	; (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800b78e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b790:	e002      	b.n	800b798 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b792:	2300      	movs	r3, #0
 800b794:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b796:	e2e7      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b798:	e2e6      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b79a:	4b56      	ldr	r3, [pc, #344]	; (800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800b79c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b79e:	e2e3      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7a4:	e2e0      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7ac:	f040 80a7 	bne.w	800b8fe <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800b7b0:	4b4c      	ldr	r3, [pc, #304]	; (800b8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b7b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7b4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b7b8:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b7c0:	d055      	beq.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800b7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b7c8:	f200 8096 	bhi.w	800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800b7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b7d2:	f000 8084 	beq.w	800b8de <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800b7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b7dc:	f200 808c 	bhi.w	800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800b7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b7e6:	d030      	beq.n	800b84a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800b7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b7ee:	f200 8083 	bhi.w	800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800b7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d004      	beq.n	800b802 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800b7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b7fe:	d012      	beq.n	800b826 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800b800:	e07a      	b.n	800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b802:	4b38      	ldr	r3, [pc, #224]	; (800b8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b80a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b80e:	d107      	bne.n	800b820 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b814:	4618      	mov	r0, r3
 800b816:	f000 fd73 	bl	800c300 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b81c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b81e:	e2a3      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b820:	2300      	movs	r3, #0
 800b822:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b824:	e2a0      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b826:	4b2f      	ldr	r3, [pc, #188]	; (800b8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b82e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b832:	d107      	bne.n	800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b834:	f107 0318 	add.w	r3, r7, #24
 800b838:	4618      	mov	r0, r3
 800b83a:	f000 fab9 	bl	800bdb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b83e:	69bb      	ldr	r3, [r7, #24]
 800b840:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800b842:	e291      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b844:	2300      	movs	r3, #0
 800b846:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b848:	e28e      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b84a:	4b26      	ldr	r3, [pc, #152]	; (800b8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b852:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b856:	d107      	bne.n	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b858:	f107 030c 	add.w	r3, r7, #12
 800b85c:	4618      	mov	r0, r3
 800b85e:	f000 fbfb 	bl	800c058 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b866:	e27f      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b868:	2300      	movs	r3, #0
 800b86a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b86c:	e27c      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b86e:	4b1d      	ldr	r3, [pc, #116]	; (800b8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b872:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b876:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b878:	4b1a      	ldr	r3, [pc, #104]	; (800b8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f003 0304 	and.w	r3, r3, #4
 800b880:	2b04      	cmp	r3, #4
 800b882:	d10c      	bne.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800b884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b886:	2b00      	cmp	r3, #0
 800b888:	d109      	bne.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b88a:	4b16      	ldr	r3, [pc, #88]	; (800b8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	08db      	lsrs	r3, r3, #3
 800b890:	f003 0303 	and.w	r3, r3, #3
 800b894:	4a14      	ldr	r2, [pc, #80]	; (800b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800b896:	fa22 f303 	lsr.w	r3, r2, r3
 800b89a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b89c:	e01e      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b89e:	4b11      	ldr	r3, [pc, #68]	; (800b8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8aa:	d106      	bne.n	800b8ba <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800b8ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8b2:	d102      	bne.n	800b8ba <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b8b4:	4b0d      	ldr	r3, [pc, #52]	; (800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800b8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8b8:	e010      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b8ba:	4b0a      	ldr	r3, [pc, #40]	; (800b8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8c6:	d106      	bne.n	800b8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800b8c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8ce:	d102      	bne.n	800b8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b8d0:	4b07      	ldr	r3, [pc, #28]	; (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800b8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8d4:	e002      	b.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b8da:	e245      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b8dc:	e244      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b8de:	4b05      	ldr	r3, [pc, #20]	; (800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800b8e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8e2:	e241      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b8e4:	58024400 	.word	0x58024400
 800b8e8:	03d09000 	.word	0x03d09000
 800b8ec:	003d0900 	.word	0x003d0900
 800b8f0:	007a1200 	.word	0x007a1200
 800b8f4:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8fc:	e234      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b904:	f040 809c 	bne.w	800ba40 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800b908:	4b9b      	ldr	r3, [pc, #620]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b90a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b90c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b910:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b914:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b918:	d054      	beq.n	800b9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800b91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b920:	f200 808b 	bhi.w	800ba3a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800b924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b926:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b92a:	f000 8083 	beq.w	800ba34 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800b92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b930:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b934:	f200 8081 	bhi.w	800ba3a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800b938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b93a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b93e:	d02f      	beq.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800b940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b946:	d878      	bhi.n	800ba3a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800b948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d004      	beq.n	800b958 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800b94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b954:	d012      	beq.n	800b97c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800b956:	e070      	b.n	800ba3a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b958:	4b87      	ldr	r3, [pc, #540]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b960:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b964:	d107      	bne.n	800b976 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b96a:	4618      	mov	r0, r3
 800b96c:	f000 fcc8 	bl	800c300 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b972:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b974:	e1f8      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b976:	2300      	movs	r3, #0
 800b978:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b97a:	e1f5      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b97c:	4b7e      	ldr	r3, [pc, #504]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b984:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b988:	d107      	bne.n	800b99a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b98a:	f107 0318 	add.w	r3, r7, #24
 800b98e:	4618      	mov	r0, r3
 800b990:	f000 fa0e 	bl	800bdb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b994:	69bb      	ldr	r3, [r7, #24]
 800b996:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b998:	e1e6      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b99a:	2300      	movs	r3, #0
 800b99c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b99e:	e1e3      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b9a0:	4b75      	ldr	r3, [pc, #468]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b9a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9ac:	d107      	bne.n	800b9be <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9ae:	f107 030c 	add.w	r3, r7, #12
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f000 fb50 	bl	800c058 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b9bc:	e1d4      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b9c2:	e1d1      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b9c4:	4b6c      	ldr	r3, [pc, #432]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b9c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b9cc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b9ce:	4b6a      	ldr	r3, [pc, #424]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f003 0304 	and.w	r3, r3, #4
 800b9d6:	2b04      	cmp	r3, #4
 800b9d8:	d10c      	bne.n	800b9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b9da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d109      	bne.n	800b9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b9e0:	4b65      	ldr	r3, [pc, #404]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	08db      	lsrs	r3, r3, #3
 800b9e6:	f003 0303 	and.w	r3, r3, #3
 800b9ea:	4a64      	ldr	r2, [pc, #400]	; (800bb7c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800b9ec:	fa22 f303 	lsr.w	r3, r2, r3
 800b9f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9f2:	e01e      	b.n	800ba32 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b9f4:	4b60      	ldr	r3, [pc, #384]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba00:	d106      	bne.n	800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800ba02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba08:	d102      	bne.n	800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ba0a:	4b5d      	ldr	r3, [pc, #372]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800ba0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba0e:	e010      	b.n	800ba32 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ba10:	4b59      	ldr	r3, [pc, #356]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba1c:	d106      	bne.n	800ba2c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800ba1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba24:	d102      	bne.n	800ba2c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ba26:	4b57      	ldr	r3, [pc, #348]	; (800bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800ba28:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba2a:	e002      	b.n	800ba32 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ba30:	e19a      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800ba32:	e199      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ba34:	4b54      	ldr	r3, [pc, #336]	; (800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ba36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba38:	e196      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba3e:	e193      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ba46:	d173      	bne.n	800bb30 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800ba48:	4b4b      	ldr	r3, [pc, #300]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ba4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ba50:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ba52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba58:	d02f      	beq.n	800baba <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800ba5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba60:	d863      	bhi.n	800bb2a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800ba62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d004      	beq.n	800ba72 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800ba68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba6e:	d012      	beq.n	800ba96 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800ba70:	e05b      	b.n	800bb2a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba72:	4b41      	ldr	r3, [pc, #260]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba7e:	d107      	bne.n	800ba90 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba80:	f107 0318 	add.w	r3, r7, #24
 800ba84:	4618      	mov	r0, r3
 800ba86:	f000 f993 	bl	800bdb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ba8a:	69bb      	ldr	r3, [r7, #24]
 800ba8c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ba8e:	e16b      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ba90:	2300      	movs	r3, #0
 800ba92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba94:	e168      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ba96:	4b38      	ldr	r3, [pc, #224]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800baa2:	d107      	bne.n	800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800baa4:	f107 030c 	add.w	r3, r7, #12
 800baa8:	4618      	mov	r0, r3
 800baaa:	f000 fad5 	bl	800c058 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bab2:	e159      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800bab4:	2300      	movs	r3, #0
 800bab6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bab8:	e156      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800baba:	4b2f      	ldr	r3, [pc, #188]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800babc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800babe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bac2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bac4:	4b2c      	ldr	r3, [pc, #176]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f003 0304 	and.w	r3, r3, #4
 800bacc:	2b04      	cmp	r3, #4
 800bace:	d10c      	bne.n	800baea <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800bad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d109      	bne.n	800baea <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bad6:	4b28      	ldr	r3, [pc, #160]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	08db      	lsrs	r3, r3, #3
 800badc:	f003 0303 	and.w	r3, r3, #3
 800bae0:	4a26      	ldr	r2, [pc, #152]	; (800bb7c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800bae2:	fa22 f303 	lsr.w	r3, r2, r3
 800bae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bae8:	e01e      	b.n	800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800baea:	4b23      	ldr	r3, [pc, #140]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800baf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800baf6:	d106      	bne.n	800bb06 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800baf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bafa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bafe:	d102      	bne.n	800bb06 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800bb00:	4b1f      	ldr	r3, [pc, #124]	; (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800bb02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb04:	e010      	b.n	800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bb06:	4b1c      	ldr	r3, [pc, #112]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb12:	d106      	bne.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800bb14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb1a:	d102      	bne.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800bb1c:	4b19      	ldr	r3, [pc, #100]	; (800bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800bb1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb20:	e002      	b.n	800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800bb22:	2300      	movs	r3, #0
 800bb24:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800bb26:	e11f      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800bb28:	e11e      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb2e:	e11b      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb36:	d13e      	bne.n	800bbb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800bb38:	4b0f      	ldr	r3, [pc, #60]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800bb3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb40:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bb42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d004      	beq.n	800bb52 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800bb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb4e:	d01d      	beq.n	800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800bb50:	e02e      	b.n	800bbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bb52:	4b09      	ldr	r3, [pc, #36]	; (800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb5e:	d107      	bne.n	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb64:	4618      	mov	r0, r3
 800bb66:	f000 fbcb 	bl	800c300 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bb6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb6c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bb6e:	e0fb      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800bb70:	2300      	movs	r3, #0
 800bb72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb74:	e0f8      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800bb76:	bf00      	nop
 800bb78:	58024400 	.word	0x58024400
 800bb7c:	03d09000 	.word	0x03d09000
 800bb80:	003d0900 	.word	0x003d0900
 800bb84:	007a1200 	.word	0x007a1200
 800bb88:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb8c:	4b79      	ldr	r3, [pc, #484]	; (800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb98:	d107      	bne.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb9a:	f107 0318 	add.w	r3, r7, #24
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f000 f906 	bl	800bdb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800bba4:	6a3b      	ldr	r3, [r7, #32]
 800bba6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bba8:	e0de      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bbae:	e0db      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bbb4:	e0d8      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbbc:	f040 8085 	bne.w	800bcca <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800bbc0:	4b6c      	ldr	r3, [pc, #432]	; (800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bbc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbc4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800bbc8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bbca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bbd0:	d06b      	beq.n	800bcaa <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800bbd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bbd8:	d874      	bhi.n	800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800bbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbe0:	d056      	beq.n	800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800bbe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbe8:	d86c      	bhi.n	800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800bbea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bbf0:	d03b      	beq.n	800bc6a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800bbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bbf8:	d864      	bhi.n	800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800bbfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc00:	d021      	beq.n	800bc46 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800bc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc08:	d85c      	bhi.n	800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800bc0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d004      	beq.n	800bc1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800bc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc16:	d004      	beq.n	800bc22 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800bc18:	e054      	b.n	800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800bc1a:	f000 f8b3 	bl	800bd84 <HAL_RCCEx_GetD3PCLK1Freq>
 800bc1e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800bc20:	e0a2      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc22:	4b54      	ldr	r3, [pc, #336]	; (800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc2e:	d107      	bne.n	800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc30:	f107 0318 	add.w	r3, r7, #24
 800bc34:	4618      	mov	r0, r3
 800bc36:	f000 f8bb 	bl	800bdb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bc3a:	69fb      	ldr	r3, [r7, #28]
 800bc3c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bc3e:	e093      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800bc40:	2300      	movs	r3, #0
 800bc42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bc44:	e090      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bc46:	4b4b      	ldr	r3, [pc, #300]	; (800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc52:	d107      	bne.n	800bc64 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc54:	f107 030c 	add.w	r3, r7, #12
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f000 f9fd 	bl	800c058 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bc62:	e081      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800bc64:	2300      	movs	r3, #0
 800bc66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bc68:	e07e      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bc6a:	4b42      	ldr	r3, [pc, #264]	; (800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f003 0304 	and.w	r3, r3, #4
 800bc72:	2b04      	cmp	r3, #4
 800bc74:	d109      	bne.n	800bc8a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bc76:	4b3f      	ldr	r3, [pc, #252]	; (800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	08db      	lsrs	r3, r3, #3
 800bc7c:	f003 0303 	and.w	r3, r3, #3
 800bc80:	4a3d      	ldr	r2, [pc, #244]	; (800bd78 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800bc82:	fa22 f303 	lsr.w	r3, r2, r3
 800bc86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bc88:	e06e      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bc8e:	e06b      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bc90:	4b38      	ldr	r3, [pc, #224]	; (800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc9c:	d102      	bne.n	800bca4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800bc9e:	4b37      	ldr	r3, [pc, #220]	; (800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800bca0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bca2:	e061      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800bca4:	2300      	movs	r3, #0
 800bca6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bca8:	e05e      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bcaa:	4b32      	ldr	r3, [pc, #200]	; (800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bcb6:	d102      	bne.n	800bcbe <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800bcb8:	4b31      	ldr	r3, [pc, #196]	; (800bd80 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800bcba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bcbc:	e054      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bcc2:	e051      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bcc8:	e04e      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcd0:	d148      	bne.n	800bd64 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800bcd2:	4b28      	ldr	r3, [pc, #160]	; (800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bcd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcd6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bcda:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bcdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bce2:	d02a      	beq.n	800bd3a <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800bce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcea:	d838      	bhi.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800bcec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d004      	beq.n	800bcfc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800bcf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcf8:	d00d      	beq.n	800bd16 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800bcfa:	e030      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bcfc:	4b1d      	ldr	r3, [pc, #116]	; (800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd08:	d102      	bne.n	800bd10 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800bd0a:	4b1d      	ldr	r3, [pc, #116]	; (800bd80 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800bd0c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bd0e:	e02b      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800bd10:	2300      	movs	r3, #0
 800bd12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd14:	e028      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bd16:	4b17      	ldr	r3, [pc, #92]	; (800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd22:	d107      	bne.n	800bd34 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f000 fae9 	bl	800c300 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd30:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bd32:	e019      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800bd34:	2300      	movs	r3, #0
 800bd36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd38:	e016      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd3a:	4b0e      	ldr	r3, [pc, #56]	; (800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd46:	d107      	bne.n	800bd58 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd48:	f107 0318 	add.w	r3, r7, #24
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f000 f82f 	bl	800bdb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bd52:	69fb      	ldr	r3, [r7, #28]
 800bd54:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bd56:	e007      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd5c:	e004      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd62:	e001      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800bd64:	2300      	movs	r3, #0
 800bd66:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800bd68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3740      	adds	r7, #64	; 0x40
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
 800bd72:	bf00      	nop
 800bd74:	58024400 	.word	0x58024400
 800bd78:	03d09000 	.word	0x03d09000
 800bd7c:	003d0900 	.word	0x003d0900
 800bd80:	007a1200 	.word	0x007a1200

0800bd84 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bd88:	f7fe fb88 	bl	800a49c <HAL_RCC_GetHCLKFreq>
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	4b06      	ldr	r3, [pc, #24]	; (800bda8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bd90:	6a1b      	ldr	r3, [r3, #32]
 800bd92:	091b      	lsrs	r3, r3, #4
 800bd94:	f003 0307 	and.w	r3, r3, #7
 800bd98:	4904      	ldr	r1, [pc, #16]	; (800bdac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bd9a:	5ccb      	ldrb	r3, [r1, r3]
 800bd9c:	f003 031f 	and.w	r3, r3, #31
 800bda0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	bd80      	pop	{r7, pc}
 800bda8:	58024400 	.word	0x58024400
 800bdac:	080131b8 	.word	0x080131b8

0800bdb0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b089      	sub	sp, #36	; 0x24
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bdb8:	4ba1      	ldr	r3, [pc, #644]	; (800c040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdbc:	f003 0303 	and.w	r3, r3, #3
 800bdc0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800bdc2:	4b9f      	ldr	r3, [pc, #636]	; (800c040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdc6:	0b1b      	lsrs	r3, r3, #12
 800bdc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bdcc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bdce:	4b9c      	ldr	r3, [pc, #624]	; (800c040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdd2:	091b      	lsrs	r3, r3, #4
 800bdd4:	f003 0301 	and.w	r3, r3, #1
 800bdd8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800bdda:	4b99      	ldr	r3, [pc, #612]	; (800c040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdde:	08db      	lsrs	r3, r3, #3
 800bde0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bde4:	693a      	ldr	r2, [r7, #16]
 800bde6:	fb02 f303 	mul.w	r3, r2, r3
 800bdea:	ee07 3a90 	vmov	s15, r3
 800bdee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdf2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	f000 8111 	beq.w	800c020 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bdfe:	69bb      	ldr	r3, [r7, #24]
 800be00:	2b02      	cmp	r3, #2
 800be02:	f000 8083 	beq.w	800bf0c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800be06:	69bb      	ldr	r3, [r7, #24]
 800be08:	2b02      	cmp	r3, #2
 800be0a:	f200 80a1 	bhi.w	800bf50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800be0e:	69bb      	ldr	r3, [r7, #24]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d003      	beq.n	800be1c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800be14:	69bb      	ldr	r3, [r7, #24]
 800be16:	2b01      	cmp	r3, #1
 800be18:	d056      	beq.n	800bec8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800be1a:	e099      	b.n	800bf50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be1c:	4b88      	ldr	r3, [pc, #544]	; (800c040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f003 0320 	and.w	r3, r3, #32
 800be24:	2b00      	cmp	r3, #0
 800be26:	d02d      	beq.n	800be84 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800be28:	4b85      	ldr	r3, [pc, #532]	; (800c040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	08db      	lsrs	r3, r3, #3
 800be2e:	f003 0303 	and.w	r3, r3, #3
 800be32:	4a84      	ldr	r2, [pc, #528]	; (800c044 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800be34:	fa22 f303 	lsr.w	r3, r2, r3
 800be38:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	ee07 3a90 	vmov	s15, r3
 800be40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	ee07 3a90 	vmov	s15, r3
 800be4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be52:	4b7b      	ldr	r3, [pc, #492]	; (800c040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be5a:	ee07 3a90 	vmov	s15, r3
 800be5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be62:	ed97 6a03 	vldr	s12, [r7, #12]
 800be66:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c048 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800be6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be7e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800be82:	e087      	b.n	800bf94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800be84:	697b      	ldr	r3, [r7, #20]
 800be86:	ee07 3a90 	vmov	s15, r3
 800be8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be8e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c04c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800be92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be96:	4b6a      	ldr	r3, [pc, #424]	; (800c040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be9e:	ee07 3a90 	vmov	s15, r3
 800bea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bea6:	ed97 6a03 	vldr	s12, [r7, #12]
 800beaa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c048 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800beae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800beb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800beb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800beba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bec2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bec6:	e065      	b.n	800bf94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	ee07 3a90 	vmov	s15, r3
 800bece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bed2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c050 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800beda:	4b59      	ldr	r3, [pc, #356]	; (800c040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bedc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bee2:	ee07 3a90 	vmov	s15, r3
 800bee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800beea:	ed97 6a03 	vldr	s12, [r7, #12]
 800beee:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c048 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800befa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800befe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bf0a:	e043      	b.n	800bf94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	ee07 3a90 	vmov	s15, r3
 800bf12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c054 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bf1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf1e:	4b48      	ldr	r3, [pc, #288]	; (800c040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf26:	ee07 3a90 	vmov	s15, r3
 800bf2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf32:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c048 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bf36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bf4e:	e021      	b.n	800bf94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	ee07 3a90 	vmov	s15, r3
 800bf56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c050 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bf5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf62:	4b37      	ldr	r3, [pc, #220]	; (800c040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf6a:	ee07 3a90 	vmov	s15, r3
 800bf6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf72:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf76:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c048 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bf7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bf92:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800bf94:	4b2a      	ldr	r3, [pc, #168]	; (800c040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf98:	0a5b      	lsrs	r3, r3, #9
 800bf9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf9e:	ee07 3a90 	vmov	s15, r3
 800bfa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfa6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bfaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfae:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfba:	ee17 2a90 	vmov	r2, s15
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800bfc2:	4b1f      	ldr	r3, [pc, #124]	; (800c040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bfc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfc6:	0c1b      	lsrs	r3, r3, #16
 800bfc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfcc:	ee07 3a90 	vmov	s15, r3
 800bfd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bfd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfdc:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfe8:	ee17 2a90 	vmov	r2, s15
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800bff0:	4b13      	ldr	r3, [pc, #76]	; (800c040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bff4:	0e1b      	lsrs	r3, r3, #24
 800bff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bffa:	ee07 3a90 	vmov	s15, r3
 800bffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c002:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c006:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c00a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c00e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c012:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c016:	ee17 2a90 	vmov	r2, s15
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c01e:	e008      	b.n	800c032 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2200      	movs	r2, #0
 800c024:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2200      	movs	r2, #0
 800c02a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2200      	movs	r2, #0
 800c030:	609a      	str	r2, [r3, #8]
}
 800c032:	bf00      	nop
 800c034:	3724      	adds	r7, #36	; 0x24
 800c036:	46bd      	mov	sp, r7
 800c038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03c:	4770      	bx	lr
 800c03e:	bf00      	nop
 800c040:	58024400 	.word	0x58024400
 800c044:	03d09000 	.word	0x03d09000
 800c048:	46000000 	.word	0x46000000
 800c04c:	4c742400 	.word	0x4c742400
 800c050:	4a742400 	.word	0x4a742400
 800c054:	4af42400 	.word	0x4af42400

0800c058 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800c058:	b480      	push	{r7}
 800c05a:	b089      	sub	sp, #36	; 0x24
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c060:	4ba1      	ldr	r3, [pc, #644]	; (800c2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c064:	f003 0303 	and.w	r3, r3, #3
 800c068:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800c06a:	4b9f      	ldr	r3, [pc, #636]	; (800c2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c06c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c06e:	0d1b      	lsrs	r3, r3, #20
 800c070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c074:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c076:	4b9c      	ldr	r3, [pc, #624]	; (800c2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c07a:	0a1b      	lsrs	r3, r3, #8
 800c07c:	f003 0301 	and.w	r3, r3, #1
 800c080:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800c082:	4b99      	ldr	r3, [pc, #612]	; (800c2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c086:	08db      	lsrs	r3, r3, #3
 800c088:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c08c:	693a      	ldr	r2, [r7, #16]
 800c08e:	fb02 f303 	mul.w	r3, r2, r3
 800c092:	ee07 3a90 	vmov	s15, r3
 800c096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c09a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	f000 8111 	beq.w	800c2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c0a6:	69bb      	ldr	r3, [r7, #24]
 800c0a8:	2b02      	cmp	r3, #2
 800c0aa:	f000 8083 	beq.w	800c1b4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c0ae:	69bb      	ldr	r3, [r7, #24]
 800c0b0:	2b02      	cmp	r3, #2
 800c0b2:	f200 80a1 	bhi.w	800c1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c0b6:	69bb      	ldr	r3, [r7, #24]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d003      	beq.n	800c0c4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c0bc:	69bb      	ldr	r3, [r7, #24]
 800c0be:	2b01      	cmp	r3, #1
 800c0c0:	d056      	beq.n	800c170 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c0c2:	e099      	b.n	800c1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0c4:	4b88      	ldr	r3, [pc, #544]	; (800c2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f003 0320 	and.w	r3, r3, #32
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d02d      	beq.n	800c12c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c0d0:	4b85      	ldr	r3, [pc, #532]	; (800c2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	08db      	lsrs	r3, r3, #3
 800c0d6:	f003 0303 	and.w	r3, r3, #3
 800c0da:	4a84      	ldr	r2, [pc, #528]	; (800c2ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c0dc:	fa22 f303 	lsr.w	r3, r2, r3
 800c0e0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	ee07 3a90 	vmov	s15, r3
 800c0e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	ee07 3a90 	vmov	s15, r3
 800c0f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0fa:	4b7b      	ldr	r3, [pc, #492]	; (800c2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c102:	ee07 3a90 	vmov	s15, r3
 800c106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c10a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c10e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c11a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c11e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c122:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c126:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c12a:	e087      	b.n	800c23c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	ee07 3a90 	vmov	s15, r3
 800c132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c136:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c13a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c13e:	4b6a      	ldr	r3, [pc, #424]	; (800c2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c146:	ee07 3a90 	vmov	s15, r3
 800c14a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c14e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c152:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c15a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c15e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c16a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c16e:	e065      	b.n	800c23c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	ee07 3a90 	vmov	s15, r3
 800c176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c17a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c17e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c182:	4b59      	ldr	r3, [pc, #356]	; (800c2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c18a:	ee07 3a90 	vmov	s15, r3
 800c18e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c192:	ed97 6a03 	vldr	s12, [r7, #12]
 800c196:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c19a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c19e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c1b2:	e043      	b.n	800c23c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	ee07 3a90 	vmov	s15, r3
 800c1ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c2fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c1c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1c6:	4b48      	ldr	r3, [pc, #288]	; (800c2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1ce:	ee07 3a90 	vmov	s15, r3
 800c1d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1da:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c1de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c1f6:	e021      	b.n	800c23c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	ee07 3a90 	vmov	s15, r3
 800c1fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c202:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c20a:	4b37      	ldr	r3, [pc, #220]	; (800c2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c20e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c212:	ee07 3a90 	vmov	s15, r3
 800c216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c21a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c21e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c22a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c22e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c232:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c236:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c23a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800c23c:	4b2a      	ldr	r3, [pc, #168]	; (800c2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c240:	0a5b      	lsrs	r3, r3, #9
 800c242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c246:	ee07 3a90 	vmov	s15, r3
 800c24a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c24e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c252:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c256:	edd7 6a07 	vldr	s13, [r7, #28]
 800c25a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c25e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c262:	ee17 2a90 	vmov	r2, s15
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c26a:	4b1f      	ldr	r3, [pc, #124]	; (800c2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c26e:	0c1b      	lsrs	r3, r3, #16
 800c270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c274:	ee07 3a90 	vmov	s15, r3
 800c278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c27c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c280:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c284:	edd7 6a07 	vldr	s13, [r7, #28]
 800c288:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c28c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c290:	ee17 2a90 	vmov	r2, s15
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c298:	4b13      	ldr	r3, [pc, #76]	; (800c2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c29a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c29c:	0e1b      	lsrs	r3, r3, #24
 800c29e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2a2:	ee07 3a90 	vmov	s15, r3
 800c2a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c2ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2be:	ee17 2a90 	vmov	r2, s15
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c2c6:	e008      	b.n	800c2da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	609a      	str	r2, [r3, #8]
}
 800c2da:	bf00      	nop
 800c2dc:	3724      	adds	r7, #36	; 0x24
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e4:	4770      	bx	lr
 800c2e6:	bf00      	nop
 800c2e8:	58024400 	.word	0x58024400
 800c2ec:	03d09000 	.word	0x03d09000
 800c2f0:	46000000 	.word	0x46000000
 800c2f4:	4c742400 	.word	0x4c742400
 800c2f8:	4a742400 	.word	0x4a742400
 800c2fc:	4af42400 	.word	0x4af42400

0800c300 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800c300:	b480      	push	{r7}
 800c302:	b089      	sub	sp, #36	; 0x24
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c308:	4ba0      	ldr	r3, [pc, #640]	; (800c58c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c30a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c30c:	f003 0303 	and.w	r3, r3, #3
 800c310:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800c312:	4b9e      	ldr	r3, [pc, #632]	; (800c58c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c316:	091b      	lsrs	r3, r3, #4
 800c318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c31c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c31e:	4b9b      	ldr	r3, [pc, #620]	; (800c58c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c322:	f003 0301 	and.w	r3, r3, #1
 800c326:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800c328:	4b98      	ldr	r3, [pc, #608]	; (800c58c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c32a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c32c:	08db      	lsrs	r3, r3, #3
 800c32e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c332:	693a      	ldr	r2, [r7, #16]
 800c334:	fb02 f303 	mul.w	r3, r2, r3
 800c338:	ee07 3a90 	vmov	s15, r3
 800c33c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c340:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	2b00      	cmp	r3, #0
 800c348:	f000 8111 	beq.w	800c56e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c34c:	69bb      	ldr	r3, [r7, #24]
 800c34e:	2b02      	cmp	r3, #2
 800c350:	f000 8083 	beq.w	800c45a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c354:	69bb      	ldr	r3, [r7, #24]
 800c356:	2b02      	cmp	r3, #2
 800c358:	f200 80a1 	bhi.w	800c49e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c35c:	69bb      	ldr	r3, [r7, #24]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d003      	beq.n	800c36a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c362:	69bb      	ldr	r3, [r7, #24]
 800c364:	2b01      	cmp	r3, #1
 800c366:	d056      	beq.n	800c416 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c368:	e099      	b.n	800c49e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c36a:	4b88      	ldr	r3, [pc, #544]	; (800c58c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f003 0320 	and.w	r3, r3, #32
 800c372:	2b00      	cmp	r3, #0
 800c374:	d02d      	beq.n	800c3d2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c376:	4b85      	ldr	r3, [pc, #532]	; (800c58c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	08db      	lsrs	r3, r3, #3
 800c37c:	f003 0303 	and.w	r3, r3, #3
 800c380:	4a83      	ldr	r2, [pc, #524]	; (800c590 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c382:	fa22 f303 	lsr.w	r3, r2, r3
 800c386:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	ee07 3a90 	vmov	s15, r3
 800c38e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	ee07 3a90 	vmov	s15, r3
 800c398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c39c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3a0:	4b7a      	ldr	r3, [pc, #488]	; (800c58c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c3a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3a8:	ee07 3a90 	vmov	s15, r3
 800c3ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3b4:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c594 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c3b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3cc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c3d0:	e087      	b.n	800c4e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	ee07 3a90 	vmov	s15, r3
 800c3d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3dc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c598 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c3e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3e4:	4b69      	ldr	r3, [pc, #420]	; (800c58c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c3e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3ec:	ee07 3a90 	vmov	s15, r3
 800c3f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3f8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c594 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c3fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c400:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c404:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c408:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c40c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c410:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c414:	e065      	b.n	800c4e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	ee07 3a90 	vmov	s15, r3
 800c41c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c420:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c59c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c424:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c428:	4b58      	ldr	r3, [pc, #352]	; (800c58c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c42a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c42c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c430:	ee07 3a90 	vmov	s15, r3
 800c434:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c438:	ed97 6a03 	vldr	s12, [r7, #12]
 800c43c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c594 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c440:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c444:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c448:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c44c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c450:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c454:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c458:	e043      	b.n	800c4e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c45a:	697b      	ldr	r3, [r7, #20]
 800c45c:	ee07 3a90 	vmov	s15, r3
 800c460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c464:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c5a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c468:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c46c:	4b47      	ldr	r3, [pc, #284]	; (800c58c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c46e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c474:	ee07 3a90 	vmov	s15, r3
 800c478:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c47c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c480:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c594 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c484:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c488:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c48c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c490:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c494:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c498:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c49c:	e021      	b.n	800c4e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	ee07 3a90 	vmov	s15, r3
 800c4a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4a8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c598 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c4ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4b0:	4b36      	ldr	r3, [pc, #216]	; (800c58c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c4b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4b8:	ee07 3a90 	vmov	s15, r3
 800c4bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4c0:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4c4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c594 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c4c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c4e0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800c4e2:	4b2a      	ldr	r3, [pc, #168]	; (800c58c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c4e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4e6:	0a5b      	lsrs	r3, r3, #9
 800c4e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4ec:	ee07 3a90 	vmov	s15, r3
 800c4f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c4f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c4fc:	edd7 6a07 	vldr	s13, [r7, #28]
 800c500:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c508:	ee17 2a90 	vmov	r2, s15
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800c510:	4b1e      	ldr	r3, [pc, #120]	; (800c58c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c514:	0c1b      	lsrs	r3, r3, #16
 800c516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c51a:	ee07 3a90 	vmov	s15, r3
 800c51e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c522:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c526:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c52a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c52e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c536:	ee17 2a90 	vmov	r2, s15
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800c53e:	4b13      	ldr	r3, [pc, #76]	; (800c58c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c542:	0e1b      	lsrs	r3, r3, #24
 800c544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c548:	ee07 3a90 	vmov	s15, r3
 800c54c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c550:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c554:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c558:	edd7 6a07 	vldr	s13, [r7, #28]
 800c55c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c560:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c564:	ee17 2a90 	vmov	r2, s15
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c56c:	e008      	b.n	800c580 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2200      	movs	r2, #0
 800c572:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2200      	movs	r2, #0
 800c578:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2200      	movs	r2, #0
 800c57e:	609a      	str	r2, [r3, #8]
}
 800c580:	bf00      	nop
 800c582:	3724      	adds	r7, #36	; 0x24
 800c584:	46bd      	mov	sp, r7
 800c586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58a:	4770      	bx	lr
 800c58c:	58024400 	.word	0x58024400
 800c590:	03d09000 	.word	0x03d09000
 800c594:	46000000 	.word	0x46000000
 800c598:	4c742400 	.word	0x4c742400
 800c59c:	4a742400 	.word	0x4a742400
 800c5a0:	4af42400 	.word	0x4af42400

0800c5a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b084      	sub	sp, #16
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c5b2:	4b53      	ldr	r3, [pc, #332]	; (800c700 <RCCEx_PLL2_Config+0x15c>)
 800c5b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5b6:	f003 0303 	and.w	r3, r3, #3
 800c5ba:	2b03      	cmp	r3, #3
 800c5bc:	d101      	bne.n	800c5c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c5be:	2301      	movs	r3, #1
 800c5c0:	e099      	b.n	800c6f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c5c2:	4b4f      	ldr	r3, [pc, #316]	; (800c700 <RCCEx_PLL2_Config+0x15c>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	4a4e      	ldr	r2, [pc, #312]	; (800c700 <RCCEx_PLL2_Config+0x15c>)
 800c5c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c5cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c5ce:	f7f6 f8c3 	bl	8002758 <HAL_GetTick>
 800c5d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c5d4:	e008      	b.n	800c5e8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c5d6:	f7f6 f8bf 	bl	8002758 <HAL_GetTick>
 800c5da:	4602      	mov	r2, r0
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	1ad3      	subs	r3, r2, r3
 800c5e0:	2b02      	cmp	r3, #2
 800c5e2:	d901      	bls.n	800c5e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c5e4:	2303      	movs	r3, #3
 800c5e6:	e086      	b.n	800c6f6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c5e8:	4b45      	ldr	r3, [pc, #276]	; (800c700 <RCCEx_PLL2_Config+0x15c>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d1f0      	bne.n	800c5d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c5f4:	4b42      	ldr	r3, [pc, #264]	; (800c700 <RCCEx_PLL2_Config+0x15c>)
 800c5f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	031b      	lsls	r3, r3, #12
 800c602:	493f      	ldr	r1, [pc, #252]	; (800c700 <RCCEx_PLL2_Config+0x15c>)
 800c604:	4313      	orrs	r3, r2
 800c606:	628b      	str	r3, [r1, #40]	; 0x28
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	685b      	ldr	r3, [r3, #4]
 800c60c:	3b01      	subs	r3, #1
 800c60e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	689b      	ldr	r3, [r3, #8]
 800c616:	3b01      	subs	r3, #1
 800c618:	025b      	lsls	r3, r3, #9
 800c61a:	b29b      	uxth	r3, r3
 800c61c:	431a      	orrs	r2, r3
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	68db      	ldr	r3, [r3, #12]
 800c622:	3b01      	subs	r3, #1
 800c624:	041b      	lsls	r3, r3, #16
 800c626:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c62a:	431a      	orrs	r2, r3
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	691b      	ldr	r3, [r3, #16]
 800c630:	3b01      	subs	r3, #1
 800c632:	061b      	lsls	r3, r3, #24
 800c634:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c638:	4931      	ldr	r1, [pc, #196]	; (800c700 <RCCEx_PLL2_Config+0x15c>)
 800c63a:	4313      	orrs	r3, r2
 800c63c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c63e:	4b30      	ldr	r3, [pc, #192]	; (800c700 <RCCEx_PLL2_Config+0x15c>)
 800c640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c642:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	695b      	ldr	r3, [r3, #20]
 800c64a:	492d      	ldr	r1, [pc, #180]	; (800c700 <RCCEx_PLL2_Config+0x15c>)
 800c64c:	4313      	orrs	r3, r2
 800c64e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c650:	4b2b      	ldr	r3, [pc, #172]	; (800c700 <RCCEx_PLL2_Config+0x15c>)
 800c652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c654:	f023 0220 	bic.w	r2, r3, #32
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	699b      	ldr	r3, [r3, #24]
 800c65c:	4928      	ldr	r1, [pc, #160]	; (800c700 <RCCEx_PLL2_Config+0x15c>)
 800c65e:	4313      	orrs	r3, r2
 800c660:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c662:	4b27      	ldr	r3, [pc, #156]	; (800c700 <RCCEx_PLL2_Config+0x15c>)
 800c664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c666:	4a26      	ldr	r2, [pc, #152]	; (800c700 <RCCEx_PLL2_Config+0x15c>)
 800c668:	f023 0310 	bic.w	r3, r3, #16
 800c66c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c66e:	4b24      	ldr	r3, [pc, #144]	; (800c700 <RCCEx_PLL2_Config+0x15c>)
 800c670:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c672:	4b24      	ldr	r3, [pc, #144]	; (800c704 <RCCEx_PLL2_Config+0x160>)
 800c674:	4013      	ands	r3, r2
 800c676:	687a      	ldr	r2, [r7, #4]
 800c678:	69d2      	ldr	r2, [r2, #28]
 800c67a:	00d2      	lsls	r2, r2, #3
 800c67c:	4920      	ldr	r1, [pc, #128]	; (800c700 <RCCEx_PLL2_Config+0x15c>)
 800c67e:	4313      	orrs	r3, r2
 800c680:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c682:	4b1f      	ldr	r3, [pc, #124]	; (800c700 <RCCEx_PLL2_Config+0x15c>)
 800c684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c686:	4a1e      	ldr	r2, [pc, #120]	; (800c700 <RCCEx_PLL2_Config+0x15c>)
 800c688:	f043 0310 	orr.w	r3, r3, #16
 800c68c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d106      	bne.n	800c6a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c694:	4b1a      	ldr	r3, [pc, #104]	; (800c700 <RCCEx_PLL2_Config+0x15c>)
 800c696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c698:	4a19      	ldr	r2, [pc, #100]	; (800c700 <RCCEx_PLL2_Config+0x15c>)
 800c69a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c69e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c6a0:	e00f      	b.n	800c6c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	2b01      	cmp	r3, #1
 800c6a6:	d106      	bne.n	800c6b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c6a8:	4b15      	ldr	r3, [pc, #84]	; (800c700 <RCCEx_PLL2_Config+0x15c>)
 800c6aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ac:	4a14      	ldr	r2, [pc, #80]	; (800c700 <RCCEx_PLL2_Config+0x15c>)
 800c6ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c6b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c6b4:	e005      	b.n	800c6c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c6b6:	4b12      	ldr	r3, [pc, #72]	; (800c700 <RCCEx_PLL2_Config+0x15c>)
 800c6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ba:	4a11      	ldr	r2, [pc, #68]	; (800c700 <RCCEx_PLL2_Config+0x15c>)
 800c6bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c6c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c6c2:	4b0f      	ldr	r3, [pc, #60]	; (800c700 <RCCEx_PLL2_Config+0x15c>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	4a0e      	ldr	r2, [pc, #56]	; (800c700 <RCCEx_PLL2_Config+0x15c>)
 800c6c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c6cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c6ce:	f7f6 f843 	bl	8002758 <HAL_GetTick>
 800c6d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c6d4:	e008      	b.n	800c6e8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c6d6:	f7f6 f83f 	bl	8002758 <HAL_GetTick>
 800c6da:	4602      	mov	r2, r0
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	1ad3      	subs	r3, r2, r3
 800c6e0:	2b02      	cmp	r3, #2
 800c6e2:	d901      	bls.n	800c6e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c6e4:	2303      	movs	r3, #3
 800c6e6:	e006      	b.n	800c6f6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c6e8:	4b05      	ldr	r3, [pc, #20]	; (800c700 <RCCEx_PLL2_Config+0x15c>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d0f0      	beq.n	800c6d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c6f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3710      	adds	r7, #16
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	58024400 	.word	0x58024400
 800c704:	ffff0007 	.word	0xffff0007

0800c708 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
 800c710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c712:	2300      	movs	r3, #0
 800c714:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c716:	4b53      	ldr	r3, [pc, #332]	; (800c864 <RCCEx_PLL3_Config+0x15c>)
 800c718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c71a:	f003 0303 	and.w	r3, r3, #3
 800c71e:	2b03      	cmp	r3, #3
 800c720:	d101      	bne.n	800c726 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c722:	2301      	movs	r3, #1
 800c724:	e099      	b.n	800c85a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c726:	4b4f      	ldr	r3, [pc, #316]	; (800c864 <RCCEx_PLL3_Config+0x15c>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	4a4e      	ldr	r2, [pc, #312]	; (800c864 <RCCEx_PLL3_Config+0x15c>)
 800c72c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c730:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c732:	f7f6 f811 	bl	8002758 <HAL_GetTick>
 800c736:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c738:	e008      	b.n	800c74c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c73a:	f7f6 f80d 	bl	8002758 <HAL_GetTick>
 800c73e:	4602      	mov	r2, r0
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	1ad3      	subs	r3, r2, r3
 800c744:	2b02      	cmp	r3, #2
 800c746:	d901      	bls.n	800c74c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c748:	2303      	movs	r3, #3
 800c74a:	e086      	b.n	800c85a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c74c:	4b45      	ldr	r3, [pc, #276]	; (800c864 <RCCEx_PLL3_Config+0x15c>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c754:	2b00      	cmp	r3, #0
 800c756:	d1f0      	bne.n	800c73a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c758:	4b42      	ldr	r3, [pc, #264]	; (800c864 <RCCEx_PLL3_Config+0x15c>)
 800c75a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c75c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	051b      	lsls	r3, r3, #20
 800c766:	493f      	ldr	r1, [pc, #252]	; (800c864 <RCCEx_PLL3_Config+0x15c>)
 800c768:	4313      	orrs	r3, r2
 800c76a:	628b      	str	r3, [r1, #40]	; 0x28
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	3b01      	subs	r3, #1
 800c772:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	689b      	ldr	r3, [r3, #8]
 800c77a:	3b01      	subs	r3, #1
 800c77c:	025b      	lsls	r3, r3, #9
 800c77e:	b29b      	uxth	r3, r3
 800c780:	431a      	orrs	r2, r3
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	68db      	ldr	r3, [r3, #12]
 800c786:	3b01      	subs	r3, #1
 800c788:	041b      	lsls	r3, r3, #16
 800c78a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c78e:	431a      	orrs	r2, r3
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	691b      	ldr	r3, [r3, #16]
 800c794:	3b01      	subs	r3, #1
 800c796:	061b      	lsls	r3, r3, #24
 800c798:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c79c:	4931      	ldr	r1, [pc, #196]	; (800c864 <RCCEx_PLL3_Config+0x15c>)
 800c79e:	4313      	orrs	r3, r2
 800c7a0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c7a2:	4b30      	ldr	r3, [pc, #192]	; (800c864 <RCCEx_PLL3_Config+0x15c>)
 800c7a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	695b      	ldr	r3, [r3, #20]
 800c7ae:	492d      	ldr	r1, [pc, #180]	; (800c864 <RCCEx_PLL3_Config+0x15c>)
 800c7b0:	4313      	orrs	r3, r2
 800c7b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c7b4:	4b2b      	ldr	r3, [pc, #172]	; (800c864 <RCCEx_PLL3_Config+0x15c>)
 800c7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	699b      	ldr	r3, [r3, #24]
 800c7c0:	4928      	ldr	r1, [pc, #160]	; (800c864 <RCCEx_PLL3_Config+0x15c>)
 800c7c2:	4313      	orrs	r3, r2
 800c7c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c7c6:	4b27      	ldr	r3, [pc, #156]	; (800c864 <RCCEx_PLL3_Config+0x15c>)
 800c7c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ca:	4a26      	ldr	r2, [pc, #152]	; (800c864 <RCCEx_PLL3_Config+0x15c>)
 800c7cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c7d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c7d2:	4b24      	ldr	r3, [pc, #144]	; (800c864 <RCCEx_PLL3_Config+0x15c>)
 800c7d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c7d6:	4b24      	ldr	r3, [pc, #144]	; (800c868 <RCCEx_PLL3_Config+0x160>)
 800c7d8:	4013      	ands	r3, r2
 800c7da:	687a      	ldr	r2, [r7, #4]
 800c7dc:	69d2      	ldr	r2, [r2, #28]
 800c7de:	00d2      	lsls	r2, r2, #3
 800c7e0:	4920      	ldr	r1, [pc, #128]	; (800c864 <RCCEx_PLL3_Config+0x15c>)
 800c7e2:	4313      	orrs	r3, r2
 800c7e4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c7e6:	4b1f      	ldr	r3, [pc, #124]	; (800c864 <RCCEx_PLL3_Config+0x15c>)
 800c7e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ea:	4a1e      	ldr	r2, [pc, #120]	; (800c864 <RCCEx_PLL3_Config+0x15c>)
 800c7ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c7f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d106      	bne.n	800c806 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c7f8:	4b1a      	ldr	r3, [pc, #104]	; (800c864 <RCCEx_PLL3_Config+0x15c>)
 800c7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7fc:	4a19      	ldr	r2, [pc, #100]	; (800c864 <RCCEx_PLL3_Config+0x15c>)
 800c7fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c802:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c804:	e00f      	b.n	800c826 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	2b01      	cmp	r3, #1
 800c80a:	d106      	bne.n	800c81a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c80c:	4b15      	ldr	r3, [pc, #84]	; (800c864 <RCCEx_PLL3_Config+0x15c>)
 800c80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c810:	4a14      	ldr	r2, [pc, #80]	; (800c864 <RCCEx_PLL3_Config+0x15c>)
 800c812:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c816:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c818:	e005      	b.n	800c826 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c81a:	4b12      	ldr	r3, [pc, #72]	; (800c864 <RCCEx_PLL3_Config+0x15c>)
 800c81c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c81e:	4a11      	ldr	r2, [pc, #68]	; (800c864 <RCCEx_PLL3_Config+0x15c>)
 800c820:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c824:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c826:	4b0f      	ldr	r3, [pc, #60]	; (800c864 <RCCEx_PLL3_Config+0x15c>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	4a0e      	ldr	r2, [pc, #56]	; (800c864 <RCCEx_PLL3_Config+0x15c>)
 800c82c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c830:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c832:	f7f5 ff91 	bl	8002758 <HAL_GetTick>
 800c836:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c838:	e008      	b.n	800c84c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c83a:	f7f5 ff8d 	bl	8002758 <HAL_GetTick>
 800c83e:	4602      	mov	r2, r0
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	1ad3      	subs	r3, r2, r3
 800c844:	2b02      	cmp	r3, #2
 800c846:	d901      	bls.n	800c84c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c848:	2303      	movs	r3, #3
 800c84a:	e006      	b.n	800c85a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c84c:	4b05      	ldr	r3, [pc, #20]	; (800c864 <RCCEx_PLL3_Config+0x15c>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c854:	2b00      	cmp	r3, #0
 800c856:	d0f0      	beq.n	800c83a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c858:	7bfb      	ldrb	r3, [r7, #15]
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3710      	adds	r7, #16
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}
 800c862:	bf00      	nop
 800c864:	58024400 	.word	0x58024400
 800c868:	ffff0007 	.word	0xffff0007

0800c86c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d101      	bne.n	800c87e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c87a:	2301      	movs	r3, #1
 800c87c:	e049      	b.n	800c912 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c884:	b2db      	uxtb	r3, r3
 800c886:	2b00      	cmp	r3, #0
 800c888:	d106      	bne.n	800c898 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2200      	movs	r2, #0
 800c88e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f7f5 fd82 	bl	800239c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2202      	movs	r2, #2
 800c89c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681a      	ldr	r2, [r3, #0]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	3304      	adds	r3, #4
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	4610      	mov	r0, r2
 800c8ac:	f000 fd06 	bl	800d2bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2201      	movs	r2, #1
 800c8c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2201      	movs	r2, #1
 800c8dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2201      	movs	r2, #1
 800c8f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2201      	movs	r2, #1
 800c904:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2201      	movs	r2, #1
 800c90c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c910:	2300      	movs	r3, #0
}
 800c912:	4618      	mov	r0, r3
 800c914:	3708      	adds	r7, #8
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}
	...

0800c91c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c91c:	b480      	push	{r7}
 800c91e:	b085      	sub	sp, #20
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c92a:	b2db      	uxtb	r3, r3
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d001      	beq.n	800c934 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c930:	2301      	movs	r3, #1
 800c932:	e054      	b.n	800c9de <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2202      	movs	r2, #2
 800c938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	68da      	ldr	r2, [r3, #12]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f042 0201 	orr.w	r2, r2, #1
 800c94a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4a26      	ldr	r2, [pc, #152]	; (800c9ec <HAL_TIM_Base_Start_IT+0xd0>)
 800c952:	4293      	cmp	r3, r2
 800c954:	d022      	beq.n	800c99c <HAL_TIM_Base_Start_IT+0x80>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c95e:	d01d      	beq.n	800c99c <HAL_TIM_Base_Start_IT+0x80>
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4a22      	ldr	r2, [pc, #136]	; (800c9f0 <HAL_TIM_Base_Start_IT+0xd4>)
 800c966:	4293      	cmp	r3, r2
 800c968:	d018      	beq.n	800c99c <HAL_TIM_Base_Start_IT+0x80>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	4a21      	ldr	r2, [pc, #132]	; (800c9f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800c970:	4293      	cmp	r3, r2
 800c972:	d013      	beq.n	800c99c <HAL_TIM_Base_Start_IT+0x80>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	4a1f      	ldr	r2, [pc, #124]	; (800c9f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d00e      	beq.n	800c99c <HAL_TIM_Base_Start_IT+0x80>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	4a1e      	ldr	r2, [pc, #120]	; (800c9fc <HAL_TIM_Base_Start_IT+0xe0>)
 800c984:	4293      	cmp	r3, r2
 800c986:	d009      	beq.n	800c99c <HAL_TIM_Base_Start_IT+0x80>
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	4a1c      	ldr	r2, [pc, #112]	; (800ca00 <HAL_TIM_Base_Start_IT+0xe4>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d004      	beq.n	800c99c <HAL_TIM_Base_Start_IT+0x80>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	4a1b      	ldr	r2, [pc, #108]	; (800ca04 <HAL_TIM_Base_Start_IT+0xe8>)
 800c998:	4293      	cmp	r3, r2
 800c99a:	d115      	bne.n	800c9c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	689a      	ldr	r2, [r3, #8]
 800c9a2:	4b19      	ldr	r3, [pc, #100]	; (800ca08 <HAL_TIM_Base_Start_IT+0xec>)
 800c9a4:	4013      	ands	r3, r2
 800c9a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	2b06      	cmp	r3, #6
 800c9ac:	d015      	beq.n	800c9da <HAL_TIM_Base_Start_IT+0xbe>
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9b4:	d011      	beq.n	800c9da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	681a      	ldr	r2, [r3, #0]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	f042 0201 	orr.w	r2, r2, #1
 800c9c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9c6:	e008      	b.n	800c9da <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	681a      	ldr	r2, [r3, #0]
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f042 0201 	orr.w	r2, r2, #1
 800c9d6:	601a      	str	r2, [r3, #0]
 800c9d8:	e000      	b.n	800c9dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c9dc:	2300      	movs	r3, #0
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3714      	adds	r7, #20
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e8:	4770      	bx	lr
 800c9ea:	bf00      	nop
 800c9ec:	40010000 	.word	0x40010000
 800c9f0:	40000400 	.word	0x40000400
 800c9f4:	40000800 	.word	0x40000800
 800c9f8:	40000c00 	.word	0x40000c00
 800c9fc:	40010400 	.word	0x40010400
 800ca00:	40001800 	.word	0x40001800
 800ca04:	40014000 	.word	0x40014000
 800ca08:	00010007 	.word	0x00010007

0800ca0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b082      	sub	sp, #8
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d101      	bne.n	800ca1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	e049      	b.n	800cab2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca24:	b2db      	uxtb	r3, r3
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d106      	bne.n	800ca38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f7f5 fc90 	bl	8002358 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2202      	movs	r2, #2
 800ca3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681a      	ldr	r2, [r3, #0]
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	3304      	adds	r3, #4
 800ca48:	4619      	mov	r1, r3
 800ca4a:	4610      	mov	r0, r2
 800ca4c:	f000 fc36 	bl	800d2bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2201      	movs	r2, #1
 800ca54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2201      	movs	r2, #1
 800ca5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2201      	movs	r2, #1
 800ca64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2201      	movs	r2, #1
 800ca74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2201      	movs	r2, #1
 800ca84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2201      	movs	r2, #1
 800ca94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2201      	movs	r2, #1
 800caa4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2201      	movs	r2, #1
 800caac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cab0:	2300      	movs	r3, #0
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	3708      	adds	r7, #8
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}
	...

0800cabc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b084      	sub	sp, #16
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
 800cac4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d109      	bne.n	800cae0 <HAL_TIM_PWM_Start+0x24>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cad2:	b2db      	uxtb	r3, r3
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	bf14      	ite	ne
 800cad8:	2301      	movne	r3, #1
 800cada:	2300      	moveq	r3, #0
 800cadc:	b2db      	uxtb	r3, r3
 800cade:	e03c      	b.n	800cb5a <HAL_TIM_PWM_Start+0x9e>
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	2b04      	cmp	r3, #4
 800cae4:	d109      	bne.n	800cafa <HAL_TIM_PWM_Start+0x3e>
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800caec:	b2db      	uxtb	r3, r3
 800caee:	2b01      	cmp	r3, #1
 800caf0:	bf14      	ite	ne
 800caf2:	2301      	movne	r3, #1
 800caf4:	2300      	moveq	r3, #0
 800caf6:	b2db      	uxtb	r3, r3
 800caf8:	e02f      	b.n	800cb5a <HAL_TIM_PWM_Start+0x9e>
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	2b08      	cmp	r3, #8
 800cafe:	d109      	bne.n	800cb14 <HAL_TIM_PWM_Start+0x58>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cb06:	b2db      	uxtb	r3, r3
 800cb08:	2b01      	cmp	r3, #1
 800cb0a:	bf14      	ite	ne
 800cb0c:	2301      	movne	r3, #1
 800cb0e:	2300      	moveq	r3, #0
 800cb10:	b2db      	uxtb	r3, r3
 800cb12:	e022      	b.n	800cb5a <HAL_TIM_PWM_Start+0x9e>
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	2b0c      	cmp	r3, #12
 800cb18:	d109      	bne.n	800cb2e <HAL_TIM_PWM_Start+0x72>
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb20:	b2db      	uxtb	r3, r3
 800cb22:	2b01      	cmp	r3, #1
 800cb24:	bf14      	ite	ne
 800cb26:	2301      	movne	r3, #1
 800cb28:	2300      	moveq	r3, #0
 800cb2a:	b2db      	uxtb	r3, r3
 800cb2c:	e015      	b.n	800cb5a <HAL_TIM_PWM_Start+0x9e>
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	2b10      	cmp	r3, #16
 800cb32:	d109      	bne.n	800cb48 <HAL_TIM_PWM_Start+0x8c>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cb3a:	b2db      	uxtb	r3, r3
 800cb3c:	2b01      	cmp	r3, #1
 800cb3e:	bf14      	ite	ne
 800cb40:	2301      	movne	r3, #1
 800cb42:	2300      	moveq	r3, #0
 800cb44:	b2db      	uxtb	r3, r3
 800cb46:	e008      	b.n	800cb5a <HAL_TIM_PWM_Start+0x9e>
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cb4e:	b2db      	uxtb	r3, r3
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	bf14      	ite	ne
 800cb54:	2301      	movne	r3, #1
 800cb56:	2300      	moveq	r3, #0
 800cb58:	b2db      	uxtb	r3, r3
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d001      	beq.n	800cb62 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800cb5e:	2301      	movs	r3, #1
 800cb60:	e0a1      	b.n	800cca6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d104      	bne.n	800cb72 <HAL_TIM_PWM_Start+0xb6>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2202      	movs	r2, #2
 800cb6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cb70:	e023      	b.n	800cbba <HAL_TIM_PWM_Start+0xfe>
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	2b04      	cmp	r3, #4
 800cb76:	d104      	bne.n	800cb82 <HAL_TIM_PWM_Start+0xc6>
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2202      	movs	r2, #2
 800cb7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cb80:	e01b      	b.n	800cbba <HAL_TIM_PWM_Start+0xfe>
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	2b08      	cmp	r3, #8
 800cb86:	d104      	bne.n	800cb92 <HAL_TIM_PWM_Start+0xd6>
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2202      	movs	r2, #2
 800cb8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cb90:	e013      	b.n	800cbba <HAL_TIM_PWM_Start+0xfe>
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	2b0c      	cmp	r3, #12
 800cb96:	d104      	bne.n	800cba2 <HAL_TIM_PWM_Start+0xe6>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2202      	movs	r2, #2
 800cb9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cba0:	e00b      	b.n	800cbba <HAL_TIM_PWM_Start+0xfe>
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	2b10      	cmp	r3, #16
 800cba6:	d104      	bne.n	800cbb2 <HAL_TIM_PWM_Start+0xf6>
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2202      	movs	r2, #2
 800cbac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cbb0:	e003      	b.n	800cbba <HAL_TIM_PWM_Start+0xfe>
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2202      	movs	r2, #2
 800cbb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	2201      	movs	r2, #1
 800cbc0:	6839      	ldr	r1, [r7, #0]
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f000 feea 	bl	800d99c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	4a38      	ldr	r2, [pc, #224]	; (800ccb0 <HAL_TIM_PWM_Start+0x1f4>)
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	d013      	beq.n	800cbfa <HAL_TIM_PWM_Start+0x13e>
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	4a37      	ldr	r2, [pc, #220]	; (800ccb4 <HAL_TIM_PWM_Start+0x1f8>)
 800cbd8:	4293      	cmp	r3, r2
 800cbda:	d00e      	beq.n	800cbfa <HAL_TIM_PWM_Start+0x13e>
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	4a35      	ldr	r2, [pc, #212]	; (800ccb8 <HAL_TIM_PWM_Start+0x1fc>)
 800cbe2:	4293      	cmp	r3, r2
 800cbe4:	d009      	beq.n	800cbfa <HAL_TIM_PWM_Start+0x13e>
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	4a34      	ldr	r2, [pc, #208]	; (800ccbc <HAL_TIM_PWM_Start+0x200>)
 800cbec:	4293      	cmp	r3, r2
 800cbee:	d004      	beq.n	800cbfa <HAL_TIM_PWM_Start+0x13e>
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	4a32      	ldr	r2, [pc, #200]	; (800ccc0 <HAL_TIM_PWM_Start+0x204>)
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	d101      	bne.n	800cbfe <HAL_TIM_PWM_Start+0x142>
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	e000      	b.n	800cc00 <HAL_TIM_PWM_Start+0x144>
 800cbfe:	2300      	movs	r3, #0
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d007      	beq.n	800cc14 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cc12:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	4a25      	ldr	r2, [pc, #148]	; (800ccb0 <HAL_TIM_PWM_Start+0x1f4>)
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d022      	beq.n	800cc64 <HAL_TIM_PWM_Start+0x1a8>
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc26:	d01d      	beq.n	800cc64 <HAL_TIM_PWM_Start+0x1a8>
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	4a25      	ldr	r2, [pc, #148]	; (800ccc4 <HAL_TIM_PWM_Start+0x208>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d018      	beq.n	800cc64 <HAL_TIM_PWM_Start+0x1a8>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	4a24      	ldr	r2, [pc, #144]	; (800ccc8 <HAL_TIM_PWM_Start+0x20c>)
 800cc38:	4293      	cmp	r3, r2
 800cc3a:	d013      	beq.n	800cc64 <HAL_TIM_PWM_Start+0x1a8>
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4a22      	ldr	r2, [pc, #136]	; (800cccc <HAL_TIM_PWM_Start+0x210>)
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d00e      	beq.n	800cc64 <HAL_TIM_PWM_Start+0x1a8>
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	4a1a      	ldr	r2, [pc, #104]	; (800ccb4 <HAL_TIM_PWM_Start+0x1f8>)
 800cc4c:	4293      	cmp	r3, r2
 800cc4e:	d009      	beq.n	800cc64 <HAL_TIM_PWM_Start+0x1a8>
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	4a1e      	ldr	r2, [pc, #120]	; (800ccd0 <HAL_TIM_PWM_Start+0x214>)
 800cc56:	4293      	cmp	r3, r2
 800cc58:	d004      	beq.n	800cc64 <HAL_TIM_PWM_Start+0x1a8>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	4a16      	ldr	r2, [pc, #88]	; (800ccb8 <HAL_TIM_PWM_Start+0x1fc>)
 800cc60:	4293      	cmp	r3, r2
 800cc62:	d115      	bne.n	800cc90 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	689a      	ldr	r2, [r3, #8]
 800cc6a:	4b1a      	ldr	r3, [pc, #104]	; (800ccd4 <HAL_TIM_PWM_Start+0x218>)
 800cc6c:	4013      	ands	r3, r2
 800cc6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	2b06      	cmp	r3, #6
 800cc74:	d015      	beq.n	800cca2 <HAL_TIM_PWM_Start+0x1e6>
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc7c:	d011      	beq.n	800cca2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	681a      	ldr	r2, [r3, #0]
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f042 0201 	orr.w	r2, r2, #1
 800cc8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc8e:	e008      	b.n	800cca2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	681a      	ldr	r2, [r3, #0]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f042 0201 	orr.w	r2, r2, #1
 800cc9e:	601a      	str	r2, [r3, #0]
 800cca0:	e000      	b.n	800cca4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cca2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cca4:	2300      	movs	r3, #0
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	3710      	adds	r7, #16
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}
 800ccae:	bf00      	nop
 800ccb0:	40010000 	.word	0x40010000
 800ccb4:	40010400 	.word	0x40010400
 800ccb8:	40014000 	.word	0x40014000
 800ccbc:	40014400 	.word	0x40014400
 800ccc0:	40014800 	.word	0x40014800
 800ccc4:	40000400 	.word	0x40000400
 800ccc8:	40000800 	.word	0x40000800
 800cccc:	40000c00 	.word	0x40000c00
 800ccd0:	40001800 	.word	0x40001800
 800ccd4:	00010007 	.word	0x00010007

0800ccd8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b082      	sub	sp, #8
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	2200      	movs	r2, #0
 800cce8:	6839      	ldr	r1, [r7, #0]
 800ccea:	4618      	mov	r0, r3
 800ccec:	f000 fe56 	bl	800d99c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4a3e      	ldr	r2, [pc, #248]	; (800cdf0 <HAL_TIM_PWM_Stop+0x118>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d013      	beq.n	800cd22 <HAL_TIM_PWM_Stop+0x4a>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	4a3d      	ldr	r2, [pc, #244]	; (800cdf4 <HAL_TIM_PWM_Stop+0x11c>)
 800cd00:	4293      	cmp	r3, r2
 800cd02:	d00e      	beq.n	800cd22 <HAL_TIM_PWM_Stop+0x4a>
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	4a3b      	ldr	r2, [pc, #236]	; (800cdf8 <HAL_TIM_PWM_Stop+0x120>)
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	d009      	beq.n	800cd22 <HAL_TIM_PWM_Stop+0x4a>
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	4a3a      	ldr	r2, [pc, #232]	; (800cdfc <HAL_TIM_PWM_Stop+0x124>)
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d004      	beq.n	800cd22 <HAL_TIM_PWM_Stop+0x4a>
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	4a38      	ldr	r2, [pc, #224]	; (800ce00 <HAL_TIM_PWM_Stop+0x128>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d101      	bne.n	800cd26 <HAL_TIM_PWM_Stop+0x4e>
 800cd22:	2301      	movs	r3, #1
 800cd24:	e000      	b.n	800cd28 <HAL_TIM_PWM_Stop+0x50>
 800cd26:	2300      	movs	r3, #0
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d017      	beq.n	800cd5c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	6a1a      	ldr	r2, [r3, #32]
 800cd32:	f241 1311 	movw	r3, #4369	; 0x1111
 800cd36:	4013      	ands	r3, r2
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d10f      	bne.n	800cd5c <HAL_TIM_PWM_Stop+0x84>
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	6a1a      	ldr	r2, [r3, #32]
 800cd42:	f240 4344 	movw	r3, #1092	; 0x444
 800cd46:	4013      	ands	r3, r2
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d107      	bne.n	800cd5c <HAL_TIM_PWM_Stop+0x84>
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cd5a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	6a1a      	ldr	r2, [r3, #32]
 800cd62:	f241 1311 	movw	r3, #4369	; 0x1111
 800cd66:	4013      	ands	r3, r2
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d10f      	bne.n	800cd8c <HAL_TIM_PWM_Stop+0xb4>
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	6a1a      	ldr	r2, [r3, #32]
 800cd72:	f240 4344 	movw	r3, #1092	; 0x444
 800cd76:	4013      	ands	r3, r2
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d107      	bne.n	800cd8c <HAL_TIM_PWM_Stop+0xb4>
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	681a      	ldr	r2, [r3, #0]
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	f022 0201 	bic.w	r2, r2, #1
 800cd8a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d104      	bne.n	800cd9c <HAL_TIM_PWM_Stop+0xc4>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2201      	movs	r2, #1
 800cd96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cd9a:	e023      	b.n	800cde4 <HAL_TIM_PWM_Stop+0x10c>
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	2b04      	cmp	r3, #4
 800cda0:	d104      	bne.n	800cdac <HAL_TIM_PWM_Stop+0xd4>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2201      	movs	r2, #1
 800cda6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cdaa:	e01b      	b.n	800cde4 <HAL_TIM_PWM_Stop+0x10c>
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	2b08      	cmp	r3, #8
 800cdb0:	d104      	bne.n	800cdbc <HAL_TIM_PWM_Stop+0xe4>
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2201      	movs	r2, #1
 800cdb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cdba:	e013      	b.n	800cde4 <HAL_TIM_PWM_Stop+0x10c>
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	2b0c      	cmp	r3, #12
 800cdc0:	d104      	bne.n	800cdcc <HAL_TIM_PWM_Stop+0xf4>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2201      	movs	r2, #1
 800cdc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cdca:	e00b      	b.n	800cde4 <HAL_TIM_PWM_Stop+0x10c>
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	2b10      	cmp	r3, #16
 800cdd0:	d104      	bne.n	800cddc <HAL_TIM_PWM_Stop+0x104>
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2201      	movs	r2, #1
 800cdd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cdda:	e003      	b.n	800cde4 <HAL_TIM_PWM_Stop+0x10c>
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2201      	movs	r2, #1
 800cde0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800cde4:	2300      	movs	r3, #0
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3708      	adds	r7, #8
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
 800cdee:	bf00      	nop
 800cdf0:	40010000 	.word	0x40010000
 800cdf4:	40010400 	.word	0x40010400
 800cdf8:	40014000 	.word	0x40014000
 800cdfc:	40014400 	.word	0x40014400
 800ce00:	40014800 	.word	0x40014800

0800ce04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b082      	sub	sp, #8
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	691b      	ldr	r3, [r3, #16]
 800ce12:	f003 0302 	and.w	r3, r3, #2
 800ce16:	2b02      	cmp	r3, #2
 800ce18:	d122      	bne.n	800ce60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	68db      	ldr	r3, [r3, #12]
 800ce20:	f003 0302 	and.w	r3, r3, #2
 800ce24:	2b02      	cmp	r3, #2
 800ce26:	d11b      	bne.n	800ce60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f06f 0202 	mvn.w	r2, #2
 800ce30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2201      	movs	r2, #1
 800ce36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	699b      	ldr	r3, [r3, #24]
 800ce3e:	f003 0303 	and.w	r3, r3, #3
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d003      	beq.n	800ce4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f000 fa1a 	bl	800d280 <HAL_TIM_IC_CaptureCallback>
 800ce4c:	e005      	b.n	800ce5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f000 fa0c 	bl	800d26c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f000 fa1d 	bl	800d294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	691b      	ldr	r3, [r3, #16]
 800ce66:	f003 0304 	and.w	r3, r3, #4
 800ce6a:	2b04      	cmp	r3, #4
 800ce6c:	d122      	bne.n	800ceb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	68db      	ldr	r3, [r3, #12]
 800ce74:	f003 0304 	and.w	r3, r3, #4
 800ce78:	2b04      	cmp	r3, #4
 800ce7a:	d11b      	bne.n	800ceb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f06f 0204 	mvn.w	r2, #4
 800ce84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2202      	movs	r2, #2
 800ce8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	699b      	ldr	r3, [r3, #24]
 800ce92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d003      	beq.n	800cea2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f000 f9f0 	bl	800d280 <HAL_TIM_IC_CaptureCallback>
 800cea0:	e005      	b.n	800ceae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f000 f9e2 	bl	800d26c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f000 f9f3 	bl	800d294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	691b      	ldr	r3, [r3, #16]
 800ceba:	f003 0308 	and.w	r3, r3, #8
 800cebe:	2b08      	cmp	r3, #8
 800cec0:	d122      	bne.n	800cf08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	68db      	ldr	r3, [r3, #12]
 800cec8:	f003 0308 	and.w	r3, r3, #8
 800cecc:	2b08      	cmp	r3, #8
 800cece:	d11b      	bne.n	800cf08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	f06f 0208 	mvn.w	r2, #8
 800ced8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2204      	movs	r2, #4
 800cede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	69db      	ldr	r3, [r3, #28]
 800cee6:	f003 0303 	and.w	r3, r3, #3
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d003      	beq.n	800cef6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f000 f9c6 	bl	800d280 <HAL_TIM_IC_CaptureCallback>
 800cef4:	e005      	b.n	800cf02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f000 f9b8 	bl	800d26c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f000 f9c9 	bl	800d294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2200      	movs	r2, #0
 800cf06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	691b      	ldr	r3, [r3, #16]
 800cf0e:	f003 0310 	and.w	r3, r3, #16
 800cf12:	2b10      	cmp	r3, #16
 800cf14:	d122      	bne.n	800cf5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	68db      	ldr	r3, [r3, #12]
 800cf1c:	f003 0310 	and.w	r3, r3, #16
 800cf20:	2b10      	cmp	r3, #16
 800cf22:	d11b      	bne.n	800cf5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f06f 0210 	mvn.w	r2, #16
 800cf2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2208      	movs	r2, #8
 800cf32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	69db      	ldr	r3, [r3, #28]
 800cf3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d003      	beq.n	800cf4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f000 f99c 	bl	800d280 <HAL_TIM_IC_CaptureCallback>
 800cf48:	e005      	b.n	800cf56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f000 f98e 	bl	800d26c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f000 f99f 	bl	800d294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	691b      	ldr	r3, [r3, #16]
 800cf62:	f003 0301 	and.w	r3, r3, #1
 800cf66:	2b01      	cmp	r3, #1
 800cf68:	d10e      	bne.n	800cf88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	68db      	ldr	r3, [r3, #12]
 800cf70:	f003 0301 	and.w	r3, r3, #1
 800cf74:	2b01      	cmp	r3, #1
 800cf76:	d107      	bne.n	800cf88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f06f 0201 	mvn.w	r2, #1
 800cf80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f7f4 fb0e 	bl	80015a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	691b      	ldr	r3, [r3, #16]
 800cf8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf92:	2b80      	cmp	r3, #128	; 0x80
 800cf94:	d10e      	bne.n	800cfb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	68db      	ldr	r3, [r3, #12]
 800cf9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfa0:	2b80      	cmp	r3, #128	; 0x80
 800cfa2:	d107      	bne.n	800cfb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cfac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f000 fe30 	bl	800dc14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	691b      	ldr	r3, [r3, #16]
 800cfba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cfc2:	d10e      	bne.n	800cfe2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	68db      	ldr	r3, [r3, #12]
 800cfca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfce:	2b80      	cmp	r3, #128	; 0x80
 800cfd0:	d107      	bne.n	800cfe2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cfda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f000 fe23 	bl	800dc28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	691b      	ldr	r3, [r3, #16]
 800cfe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfec:	2b40      	cmp	r3, #64	; 0x40
 800cfee:	d10e      	bne.n	800d00e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	68db      	ldr	r3, [r3, #12]
 800cff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cffa:	2b40      	cmp	r3, #64	; 0x40
 800cffc:	d107      	bne.n	800d00e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f000 f94d 	bl	800d2a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	691b      	ldr	r3, [r3, #16]
 800d014:	f003 0320 	and.w	r3, r3, #32
 800d018:	2b20      	cmp	r3, #32
 800d01a:	d10e      	bne.n	800d03a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	68db      	ldr	r3, [r3, #12]
 800d022:	f003 0320 	and.w	r3, r3, #32
 800d026:	2b20      	cmp	r3, #32
 800d028:	d107      	bne.n	800d03a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	f06f 0220 	mvn.w	r2, #32
 800d032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f000 fde3 	bl	800dc00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d03a:	bf00      	nop
 800d03c:	3708      	adds	r7, #8
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
	...

0800d044 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b086      	sub	sp, #24
 800d048:	af00      	add	r7, sp, #0
 800d04a:	60f8      	str	r0, [r7, #12]
 800d04c:	60b9      	str	r1, [r7, #8]
 800d04e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d050:	2300      	movs	r3, #0
 800d052:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d05a:	2b01      	cmp	r3, #1
 800d05c:	d101      	bne.n	800d062 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d05e:	2302      	movs	r3, #2
 800d060:	e0ff      	b.n	800d262 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	2201      	movs	r2, #1
 800d066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2b14      	cmp	r3, #20
 800d06e:	f200 80f0 	bhi.w	800d252 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d072:	a201      	add	r2, pc, #4	; (adr r2, 800d078 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d078:	0800d0cd 	.word	0x0800d0cd
 800d07c:	0800d253 	.word	0x0800d253
 800d080:	0800d253 	.word	0x0800d253
 800d084:	0800d253 	.word	0x0800d253
 800d088:	0800d10d 	.word	0x0800d10d
 800d08c:	0800d253 	.word	0x0800d253
 800d090:	0800d253 	.word	0x0800d253
 800d094:	0800d253 	.word	0x0800d253
 800d098:	0800d14f 	.word	0x0800d14f
 800d09c:	0800d253 	.word	0x0800d253
 800d0a0:	0800d253 	.word	0x0800d253
 800d0a4:	0800d253 	.word	0x0800d253
 800d0a8:	0800d18f 	.word	0x0800d18f
 800d0ac:	0800d253 	.word	0x0800d253
 800d0b0:	0800d253 	.word	0x0800d253
 800d0b4:	0800d253 	.word	0x0800d253
 800d0b8:	0800d1d1 	.word	0x0800d1d1
 800d0bc:	0800d253 	.word	0x0800d253
 800d0c0:	0800d253 	.word	0x0800d253
 800d0c4:	0800d253 	.word	0x0800d253
 800d0c8:	0800d211 	.word	0x0800d211
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	68b9      	ldr	r1, [r7, #8]
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f000 f98c 	bl	800d3f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	699a      	ldr	r2, [r3, #24]
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	f042 0208 	orr.w	r2, r2, #8
 800d0e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	699a      	ldr	r2, [r3, #24]
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	f022 0204 	bic.w	r2, r2, #4
 800d0f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	6999      	ldr	r1, [r3, #24]
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	691a      	ldr	r2, [r3, #16]
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	430a      	orrs	r2, r1
 800d108:	619a      	str	r2, [r3, #24]
      break;
 800d10a:	e0a5      	b.n	800d258 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	68b9      	ldr	r1, [r7, #8]
 800d112:	4618      	mov	r0, r3
 800d114:	f000 f9fc 	bl	800d510 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	699a      	ldr	r2, [r3, #24]
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	699a      	ldr	r2, [r3, #24]
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	6999      	ldr	r1, [r3, #24]
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	691b      	ldr	r3, [r3, #16]
 800d142:	021a      	lsls	r2, r3, #8
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	430a      	orrs	r2, r1
 800d14a:	619a      	str	r2, [r3, #24]
      break;
 800d14c:	e084      	b.n	800d258 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	68b9      	ldr	r1, [r7, #8]
 800d154:	4618      	mov	r0, r3
 800d156:	f000 fa65 	bl	800d624 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	69da      	ldr	r2, [r3, #28]
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	f042 0208 	orr.w	r2, r2, #8
 800d168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	69da      	ldr	r2, [r3, #28]
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	f022 0204 	bic.w	r2, r2, #4
 800d178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	69d9      	ldr	r1, [r3, #28]
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	691a      	ldr	r2, [r3, #16]
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	430a      	orrs	r2, r1
 800d18a:	61da      	str	r2, [r3, #28]
      break;
 800d18c:	e064      	b.n	800d258 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	68b9      	ldr	r1, [r7, #8]
 800d194:	4618      	mov	r0, r3
 800d196:	f000 facd 	bl	800d734 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	69da      	ldr	r2, [r3, #28]
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d1a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	69da      	ldr	r2, [r3, #28]
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d1b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	69d9      	ldr	r1, [r3, #28]
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	691b      	ldr	r3, [r3, #16]
 800d1c4:	021a      	lsls	r2, r3, #8
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	430a      	orrs	r2, r1
 800d1cc:	61da      	str	r2, [r3, #28]
      break;
 800d1ce:	e043      	b.n	800d258 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	68b9      	ldr	r1, [r7, #8]
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f000 fb16 	bl	800d808 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	f042 0208 	orr.w	r2, r2, #8
 800d1ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	f022 0204 	bic.w	r2, r2, #4
 800d1fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	691a      	ldr	r2, [r3, #16]
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	430a      	orrs	r2, r1
 800d20c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d20e:	e023      	b.n	800d258 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	68b9      	ldr	r1, [r7, #8]
 800d216:	4618      	mov	r0, r3
 800d218:	f000 fb5a 	bl	800d8d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d22a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d23a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	691b      	ldr	r3, [r3, #16]
 800d246:	021a      	lsls	r2, r3, #8
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	430a      	orrs	r2, r1
 800d24e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d250:	e002      	b.n	800d258 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d252:	2301      	movs	r3, #1
 800d254:	75fb      	strb	r3, [r7, #23]
      break;
 800d256:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	2200      	movs	r2, #0
 800d25c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d260:	7dfb      	ldrb	r3, [r7, #23]
}
 800d262:	4618      	mov	r0, r3
 800d264:	3718      	adds	r7, #24
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}
 800d26a:	bf00      	nop

0800d26c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d26c:	b480      	push	{r7}
 800d26e:	b083      	sub	sp, #12
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d274:	bf00      	nop
 800d276:	370c      	adds	r7, #12
 800d278:	46bd      	mov	sp, r7
 800d27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27e:	4770      	bx	lr

0800d280 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d280:	b480      	push	{r7}
 800d282:	b083      	sub	sp, #12
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d288:	bf00      	nop
 800d28a:	370c      	adds	r7, #12
 800d28c:	46bd      	mov	sp, r7
 800d28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d292:	4770      	bx	lr

0800d294 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d294:	b480      	push	{r7}
 800d296:	b083      	sub	sp, #12
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d29c:	bf00      	nop
 800d29e:	370c      	adds	r7, #12
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a6:	4770      	bx	lr

0800d2a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b083      	sub	sp, #12
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d2b0:	bf00      	nop
 800d2b2:	370c      	adds	r7, #12
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ba:	4770      	bx	lr

0800d2bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b085      	sub	sp, #20
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
 800d2c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	4a40      	ldr	r2, [pc, #256]	; (800d3d0 <TIM_Base_SetConfig+0x114>)
 800d2d0:	4293      	cmp	r3, r2
 800d2d2:	d013      	beq.n	800d2fc <TIM_Base_SetConfig+0x40>
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2da:	d00f      	beq.n	800d2fc <TIM_Base_SetConfig+0x40>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	4a3d      	ldr	r2, [pc, #244]	; (800d3d4 <TIM_Base_SetConfig+0x118>)
 800d2e0:	4293      	cmp	r3, r2
 800d2e2:	d00b      	beq.n	800d2fc <TIM_Base_SetConfig+0x40>
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	4a3c      	ldr	r2, [pc, #240]	; (800d3d8 <TIM_Base_SetConfig+0x11c>)
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	d007      	beq.n	800d2fc <TIM_Base_SetConfig+0x40>
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	4a3b      	ldr	r2, [pc, #236]	; (800d3dc <TIM_Base_SetConfig+0x120>)
 800d2f0:	4293      	cmp	r3, r2
 800d2f2:	d003      	beq.n	800d2fc <TIM_Base_SetConfig+0x40>
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	4a3a      	ldr	r2, [pc, #232]	; (800d3e0 <TIM_Base_SetConfig+0x124>)
 800d2f8:	4293      	cmp	r3, r2
 800d2fa:	d108      	bne.n	800d30e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d302:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	685b      	ldr	r3, [r3, #4]
 800d308:	68fa      	ldr	r2, [r7, #12]
 800d30a:	4313      	orrs	r3, r2
 800d30c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	4a2f      	ldr	r2, [pc, #188]	; (800d3d0 <TIM_Base_SetConfig+0x114>)
 800d312:	4293      	cmp	r3, r2
 800d314:	d01f      	beq.n	800d356 <TIM_Base_SetConfig+0x9a>
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d31c:	d01b      	beq.n	800d356 <TIM_Base_SetConfig+0x9a>
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	4a2c      	ldr	r2, [pc, #176]	; (800d3d4 <TIM_Base_SetConfig+0x118>)
 800d322:	4293      	cmp	r3, r2
 800d324:	d017      	beq.n	800d356 <TIM_Base_SetConfig+0x9a>
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	4a2b      	ldr	r2, [pc, #172]	; (800d3d8 <TIM_Base_SetConfig+0x11c>)
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d013      	beq.n	800d356 <TIM_Base_SetConfig+0x9a>
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	4a2a      	ldr	r2, [pc, #168]	; (800d3dc <TIM_Base_SetConfig+0x120>)
 800d332:	4293      	cmp	r3, r2
 800d334:	d00f      	beq.n	800d356 <TIM_Base_SetConfig+0x9a>
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	4a29      	ldr	r2, [pc, #164]	; (800d3e0 <TIM_Base_SetConfig+0x124>)
 800d33a:	4293      	cmp	r3, r2
 800d33c:	d00b      	beq.n	800d356 <TIM_Base_SetConfig+0x9a>
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	4a28      	ldr	r2, [pc, #160]	; (800d3e4 <TIM_Base_SetConfig+0x128>)
 800d342:	4293      	cmp	r3, r2
 800d344:	d007      	beq.n	800d356 <TIM_Base_SetConfig+0x9a>
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	4a27      	ldr	r2, [pc, #156]	; (800d3e8 <TIM_Base_SetConfig+0x12c>)
 800d34a:	4293      	cmp	r3, r2
 800d34c:	d003      	beq.n	800d356 <TIM_Base_SetConfig+0x9a>
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	4a26      	ldr	r2, [pc, #152]	; (800d3ec <TIM_Base_SetConfig+0x130>)
 800d352:	4293      	cmp	r3, r2
 800d354:	d108      	bne.n	800d368 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d35c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	68db      	ldr	r3, [r3, #12]
 800d362:	68fa      	ldr	r2, [r7, #12]
 800d364:	4313      	orrs	r3, r2
 800d366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	695b      	ldr	r3, [r3, #20]
 800d372:	4313      	orrs	r3, r2
 800d374:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	68fa      	ldr	r2, [r7, #12]
 800d37a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	689a      	ldr	r2, [r3, #8]
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	681a      	ldr	r2, [r3, #0]
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	4a10      	ldr	r2, [pc, #64]	; (800d3d0 <TIM_Base_SetConfig+0x114>)
 800d390:	4293      	cmp	r3, r2
 800d392:	d00f      	beq.n	800d3b4 <TIM_Base_SetConfig+0xf8>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	4a12      	ldr	r2, [pc, #72]	; (800d3e0 <TIM_Base_SetConfig+0x124>)
 800d398:	4293      	cmp	r3, r2
 800d39a:	d00b      	beq.n	800d3b4 <TIM_Base_SetConfig+0xf8>
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	4a11      	ldr	r2, [pc, #68]	; (800d3e4 <TIM_Base_SetConfig+0x128>)
 800d3a0:	4293      	cmp	r3, r2
 800d3a2:	d007      	beq.n	800d3b4 <TIM_Base_SetConfig+0xf8>
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	4a10      	ldr	r2, [pc, #64]	; (800d3e8 <TIM_Base_SetConfig+0x12c>)
 800d3a8:	4293      	cmp	r3, r2
 800d3aa:	d003      	beq.n	800d3b4 <TIM_Base_SetConfig+0xf8>
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	4a0f      	ldr	r2, [pc, #60]	; (800d3ec <TIM_Base_SetConfig+0x130>)
 800d3b0:	4293      	cmp	r3, r2
 800d3b2:	d103      	bne.n	800d3bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	691a      	ldr	r2, [r3, #16]
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2201      	movs	r2, #1
 800d3c0:	615a      	str	r2, [r3, #20]
}
 800d3c2:	bf00      	nop
 800d3c4:	3714      	adds	r7, #20
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3cc:	4770      	bx	lr
 800d3ce:	bf00      	nop
 800d3d0:	40010000 	.word	0x40010000
 800d3d4:	40000400 	.word	0x40000400
 800d3d8:	40000800 	.word	0x40000800
 800d3dc:	40000c00 	.word	0x40000c00
 800d3e0:	40010400 	.word	0x40010400
 800d3e4:	40014000 	.word	0x40014000
 800d3e8:	40014400 	.word	0x40014400
 800d3ec:	40014800 	.word	0x40014800

0800d3f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	b087      	sub	sp, #28
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6a1b      	ldr	r3, [r3, #32]
 800d3fe:	f023 0201 	bic.w	r2, r3, #1
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6a1b      	ldr	r3, [r3, #32]
 800d40a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	685b      	ldr	r3, [r3, #4]
 800d410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	699b      	ldr	r3, [r3, #24]
 800d416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d418:	68fa      	ldr	r2, [r7, #12]
 800d41a:	4b37      	ldr	r3, [pc, #220]	; (800d4f8 <TIM_OC1_SetConfig+0x108>)
 800d41c:	4013      	ands	r3, r2
 800d41e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	f023 0303 	bic.w	r3, r3, #3
 800d426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	68fa      	ldr	r2, [r7, #12]
 800d42e:	4313      	orrs	r3, r2
 800d430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d432:	697b      	ldr	r3, [r7, #20]
 800d434:	f023 0302 	bic.w	r3, r3, #2
 800d438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	689b      	ldr	r3, [r3, #8]
 800d43e:	697a      	ldr	r2, [r7, #20]
 800d440:	4313      	orrs	r3, r2
 800d442:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	4a2d      	ldr	r2, [pc, #180]	; (800d4fc <TIM_OC1_SetConfig+0x10c>)
 800d448:	4293      	cmp	r3, r2
 800d44a:	d00f      	beq.n	800d46c <TIM_OC1_SetConfig+0x7c>
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	4a2c      	ldr	r2, [pc, #176]	; (800d500 <TIM_OC1_SetConfig+0x110>)
 800d450:	4293      	cmp	r3, r2
 800d452:	d00b      	beq.n	800d46c <TIM_OC1_SetConfig+0x7c>
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	4a2b      	ldr	r2, [pc, #172]	; (800d504 <TIM_OC1_SetConfig+0x114>)
 800d458:	4293      	cmp	r3, r2
 800d45a:	d007      	beq.n	800d46c <TIM_OC1_SetConfig+0x7c>
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	4a2a      	ldr	r2, [pc, #168]	; (800d508 <TIM_OC1_SetConfig+0x118>)
 800d460:	4293      	cmp	r3, r2
 800d462:	d003      	beq.n	800d46c <TIM_OC1_SetConfig+0x7c>
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	4a29      	ldr	r2, [pc, #164]	; (800d50c <TIM_OC1_SetConfig+0x11c>)
 800d468:	4293      	cmp	r3, r2
 800d46a:	d10c      	bne.n	800d486 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	f023 0308 	bic.w	r3, r3, #8
 800d472:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	68db      	ldr	r3, [r3, #12]
 800d478:	697a      	ldr	r2, [r7, #20]
 800d47a:	4313      	orrs	r3, r2
 800d47c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d47e:	697b      	ldr	r3, [r7, #20]
 800d480:	f023 0304 	bic.w	r3, r3, #4
 800d484:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	4a1c      	ldr	r2, [pc, #112]	; (800d4fc <TIM_OC1_SetConfig+0x10c>)
 800d48a:	4293      	cmp	r3, r2
 800d48c:	d00f      	beq.n	800d4ae <TIM_OC1_SetConfig+0xbe>
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	4a1b      	ldr	r2, [pc, #108]	; (800d500 <TIM_OC1_SetConfig+0x110>)
 800d492:	4293      	cmp	r3, r2
 800d494:	d00b      	beq.n	800d4ae <TIM_OC1_SetConfig+0xbe>
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	4a1a      	ldr	r2, [pc, #104]	; (800d504 <TIM_OC1_SetConfig+0x114>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d007      	beq.n	800d4ae <TIM_OC1_SetConfig+0xbe>
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	4a19      	ldr	r2, [pc, #100]	; (800d508 <TIM_OC1_SetConfig+0x118>)
 800d4a2:	4293      	cmp	r3, r2
 800d4a4:	d003      	beq.n	800d4ae <TIM_OC1_SetConfig+0xbe>
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	4a18      	ldr	r2, [pc, #96]	; (800d50c <TIM_OC1_SetConfig+0x11c>)
 800d4aa:	4293      	cmp	r3, r2
 800d4ac:	d111      	bne.n	800d4d2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d4b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d4b6:	693b      	ldr	r3, [r7, #16]
 800d4b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d4bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	695b      	ldr	r3, [r3, #20]
 800d4c2:	693a      	ldr	r2, [r7, #16]
 800d4c4:	4313      	orrs	r3, r2
 800d4c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	699b      	ldr	r3, [r3, #24]
 800d4cc:	693a      	ldr	r2, [r7, #16]
 800d4ce:	4313      	orrs	r3, r2
 800d4d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	693a      	ldr	r2, [r7, #16]
 800d4d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	68fa      	ldr	r2, [r7, #12]
 800d4dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	685a      	ldr	r2, [r3, #4]
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	697a      	ldr	r2, [r7, #20]
 800d4ea:	621a      	str	r2, [r3, #32]
}
 800d4ec:	bf00      	nop
 800d4ee:	371c      	adds	r7, #28
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f6:	4770      	bx	lr
 800d4f8:	fffeff8f 	.word	0xfffeff8f
 800d4fc:	40010000 	.word	0x40010000
 800d500:	40010400 	.word	0x40010400
 800d504:	40014000 	.word	0x40014000
 800d508:	40014400 	.word	0x40014400
 800d50c:	40014800 	.word	0x40014800

0800d510 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d510:	b480      	push	{r7}
 800d512:	b087      	sub	sp, #28
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
 800d518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6a1b      	ldr	r3, [r3, #32]
 800d51e:	f023 0210 	bic.w	r2, r3, #16
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	6a1b      	ldr	r3, [r3, #32]
 800d52a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	685b      	ldr	r3, [r3, #4]
 800d530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	699b      	ldr	r3, [r3, #24]
 800d536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d538:	68fa      	ldr	r2, [r7, #12]
 800d53a:	4b34      	ldr	r3, [pc, #208]	; (800d60c <TIM_OC2_SetConfig+0xfc>)
 800d53c:	4013      	ands	r3, r2
 800d53e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d546:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	021b      	lsls	r3, r3, #8
 800d54e:	68fa      	ldr	r2, [r7, #12]
 800d550:	4313      	orrs	r3, r2
 800d552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d554:	697b      	ldr	r3, [r7, #20]
 800d556:	f023 0320 	bic.w	r3, r3, #32
 800d55a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	689b      	ldr	r3, [r3, #8]
 800d560:	011b      	lsls	r3, r3, #4
 800d562:	697a      	ldr	r2, [r7, #20]
 800d564:	4313      	orrs	r3, r2
 800d566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	4a29      	ldr	r2, [pc, #164]	; (800d610 <TIM_OC2_SetConfig+0x100>)
 800d56c:	4293      	cmp	r3, r2
 800d56e:	d003      	beq.n	800d578 <TIM_OC2_SetConfig+0x68>
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	4a28      	ldr	r2, [pc, #160]	; (800d614 <TIM_OC2_SetConfig+0x104>)
 800d574:	4293      	cmp	r3, r2
 800d576:	d10d      	bne.n	800d594 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d57e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	68db      	ldr	r3, [r3, #12]
 800d584:	011b      	lsls	r3, r3, #4
 800d586:	697a      	ldr	r2, [r7, #20]
 800d588:	4313      	orrs	r3, r2
 800d58a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d592:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	4a1e      	ldr	r2, [pc, #120]	; (800d610 <TIM_OC2_SetConfig+0x100>)
 800d598:	4293      	cmp	r3, r2
 800d59a:	d00f      	beq.n	800d5bc <TIM_OC2_SetConfig+0xac>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	4a1d      	ldr	r2, [pc, #116]	; (800d614 <TIM_OC2_SetConfig+0x104>)
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	d00b      	beq.n	800d5bc <TIM_OC2_SetConfig+0xac>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	4a1c      	ldr	r2, [pc, #112]	; (800d618 <TIM_OC2_SetConfig+0x108>)
 800d5a8:	4293      	cmp	r3, r2
 800d5aa:	d007      	beq.n	800d5bc <TIM_OC2_SetConfig+0xac>
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	4a1b      	ldr	r2, [pc, #108]	; (800d61c <TIM_OC2_SetConfig+0x10c>)
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	d003      	beq.n	800d5bc <TIM_OC2_SetConfig+0xac>
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	4a1a      	ldr	r2, [pc, #104]	; (800d620 <TIM_OC2_SetConfig+0x110>)
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	d113      	bne.n	800d5e4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d5c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d5c4:	693b      	ldr	r3, [r7, #16]
 800d5c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d5ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	695b      	ldr	r3, [r3, #20]
 800d5d0:	009b      	lsls	r3, r3, #2
 800d5d2:	693a      	ldr	r2, [r7, #16]
 800d5d4:	4313      	orrs	r3, r2
 800d5d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	699b      	ldr	r3, [r3, #24]
 800d5dc:	009b      	lsls	r3, r3, #2
 800d5de:	693a      	ldr	r2, [r7, #16]
 800d5e0:	4313      	orrs	r3, r2
 800d5e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	693a      	ldr	r2, [r7, #16]
 800d5e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	68fa      	ldr	r2, [r7, #12]
 800d5ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	685a      	ldr	r2, [r3, #4]
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	697a      	ldr	r2, [r7, #20]
 800d5fc:	621a      	str	r2, [r3, #32]
}
 800d5fe:	bf00      	nop
 800d600:	371c      	adds	r7, #28
 800d602:	46bd      	mov	sp, r7
 800d604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d608:	4770      	bx	lr
 800d60a:	bf00      	nop
 800d60c:	feff8fff 	.word	0xfeff8fff
 800d610:	40010000 	.word	0x40010000
 800d614:	40010400 	.word	0x40010400
 800d618:	40014000 	.word	0x40014000
 800d61c:	40014400 	.word	0x40014400
 800d620:	40014800 	.word	0x40014800

0800d624 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d624:	b480      	push	{r7}
 800d626:	b087      	sub	sp, #28
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6a1b      	ldr	r3, [r3, #32]
 800d632:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6a1b      	ldr	r3, [r3, #32]
 800d63e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	685b      	ldr	r3, [r3, #4]
 800d644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	69db      	ldr	r3, [r3, #28]
 800d64a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d64c:	68fa      	ldr	r2, [r7, #12]
 800d64e:	4b33      	ldr	r3, [pc, #204]	; (800d71c <TIM_OC3_SetConfig+0xf8>)
 800d650:	4013      	ands	r3, r2
 800d652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	f023 0303 	bic.w	r3, r3, #3
 800d65a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	68fa      	ldr	r2, [r7, #12]
 800d662:	4313      	orrs	r3, r2
 800d664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d66c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	689b      	ldr	r3, [r3, #8]
 800d672:	021b      	lsls	r3, r3, #8
 800d674:	697a      	ldr	r2, [r7, #20]
 800d676:	4313      	orrs	r3, r2
 800d678:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	4a28      	ldr	r2, [pc, #160]	; (800d720 <TIM_OC3_SetConfig+0xfc>)
 800d67e:	4293      	cmp	r3, r2
 800d680:	d003      	beq.n	800d68a <TIM_OC3_SetConfig+0x66>
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	4a27      	ldr	r2, [pc, #156]	; (800d724 <TIM_OC3_SetConfig+0x100>)
 800d686:	4293      	cmp	r3, r2
 800d688:	d10d      	bne.n	800d6a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d68a:	697b      	ldr	r3, [r7, #20]
 800d68c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d690:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	68db      	ldr	r3, [r3, #12]
 800d696:	021b      	lsls	r3, r3, #8
 800d698:	697a      	ldr	r2, [r7, #20]
 800d69a:	4313      	orrs	r3, r2
 800d69c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d69e:	697b      	ldr	r3, [r7, #20]
 800d6a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d6a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	4a1d      	ldr	r2, [pc, #116]	; (800d720 <TIM_OC3_SetConfig+0xfc>)
 800d6aa:	4293      	cmp	r3, r2
 800d6ac:	d00f      	beq.n	800d6ce <TIM_OC3_SetConfig+0xaa>
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	4a1c      	ldr	r2, [pc, #112]	; (800d724 <TIM_OC3_SetConfig+0x100>)
 800d6b2:	4293      	cmp	r3, r2
 800d6b4:	d00b      	beq.n	800d6ce <TIM_OC3_SetConfig+0xaa>
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	4a1b      	ldr	r2, [pc, #108]	; (800d728 <TIM_OC3_SetConfig+0x104>)
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d007      	beq.n	800d6ce <TIM_OC3_SetConfig+0xaa>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	4a1a      	ldr	r2, [pc, #104]	; (800d72c <TIM_OC3_SetConfig+0x108>)
 800d6c2:	4293      	cmp	r3, r2
 800d6c4:	d003      	beq.n	800d6ce <TIM_OC3_SetConfig+0xaa>
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	4a19      	ldr	r2, [pc, #100]	; (800d730 <TIM_OC3_SetConfig+0x10c>)
 800d6ca:	4293      	cmp	r3, r2
 800d6cc:	d113      	bne.n	800d6f6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d6d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d6d6:	693b      	ldr	r3, [r7, #16]
 800d6d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d6dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	695b      	ldr	r3, [r3, #20]
 800d6e2:	011b      	lsls	r3, r3, #4
 800d6e4:	693a      	ldr	r2, [r7, #16]
 800d6e6:	4313      	orrs	r3, r2
 800d6e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	699b      	ldr	r3, [r3, #24]
 800d6ee:	011b      	lsls	r3, r3, #4
 800d6f0:	693a      	ldr	r2, [r7, #16]
 800d6f2:	4313      	orrs	r3, r2
 800d6f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	693a      	ldr	r2, [r7, #16]
 800d6fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	68fa      	ldr	r2, [r7, #12]
 800d700:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	685a      	ldr	r2, [r3, #4]
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	697a      	ldr	r2, [r7, #20]
 800d70e:	621a      	str	r2, [r3, #32]
}
 800d710:	bf00      	nop
 800d712:	371c      	adds	r7, #28
 800d714:	46bd      	mov	sp, r7
 800d716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71a:	4770      	bx	lr
 800d71c:	fffeff8f 	.word	0xfffeff8f
 800d720:	40010000 	.word	0x40010000
 800d724:	40010400 	.word	0x40010400
 800d728:	40014000 	.word	0x40014000
 800d72c:	40014400 	.word	0x40014400
 800d730:	40014800 	.word	0x40014800

0800d734 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d734:	b480      	push	{r7}
 800d736:	b087      	sub	sp, #28
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6a1b      	ldr	r3, [r3, #32]
 800d742:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6a1b      	ldr	r3, [r3, #32]
 800d74e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	685b      	ldr	r3, [r3, #4]
 800d754:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	69db      	ldr	r3, [r3, #28]
 800d75a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d75c:	68fa      	ldr	r2, [r7, #12]
 800d75e:	4b24      	ldr	r3, [pc, #144]	; (800d7f0 <TIM_OC4_SetConfig+0xbc>)
 800d760:	4013      	ands	r3, r2
 800d762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d76a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	021b      	lsls	r3, r3, #8
 800d772:	68fa      	ldr	r2, [r7, #12]
 800d774:	4313      	orrs	r3, r2
 800d776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d778:	693b      	ldr	r3, [r7, #16]
 800d77a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d77e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	689b      	ldr	r3, [r3, #8]
 800d784:	031b      	lsls	r3, r3, #12
 800d786:	693a      	ldr	r2, [r7, #16]
 800d788:	4313      	orrs	r3, r2
 800d78a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	4a19      	ldr	r2, [pc, #100]	; (800d7f4 <TIM_OC4_SetConfig+0xc0>)
 800d790:	4293      	cmp	r3, r2
 800d792:	d00f      	beq.n	800d7b4 <TIM_OC4_SetConfig+0x80>
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	4a18      	ldr	r2, [pc, #96]	; (800d7f8 <TIM_OC4_SetConfig+0xc4>)
 800d798:	4293      	cmp	r3, r2
 800d79a:	d00b      	beq.n	800d7b4 <TIM_OC4_SetConfig+0x80>
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	4a17      	ldr	r2, [pc, #92]	; (800d7fc <TIM_OC4_SetConfig+0xc8>)
 800d7a0:	4293      	cmp	r3, r2
 800d7a2:	d007      	beq.n	800d7b4 <TIM_OC4_SetConfig+0x80>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	4a16      	ldr	r2, [pc, #88]	; (800d800 <TIM_OC4_SetConfig+0xcc>)
 800d7a8:	4293      	cmp	r3, r2
 800d7aa:	d003      	beq.n	800d7b4 <TIM_OC4_SetConfig+0x80>
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	4a15      	ldr	r2, [pc, #84]	; (800d804 <TIM_OC4_SetConfig+0xd0>)
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	d109      	bne.n	800d7c8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d7b4:	697b      	ldr	r3, [r7, #20]
 800d7b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d7ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	695b      	ldr	r3, [r3, #20]
 800d7c0:	019b      	lsls	r3, r3, #6
 800d7c2:	697a      	ldr	r2, [r7, #20]
 800d7c4:	4313      	orrs	r3, r2
 800d7c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	697a      	ldr	r2, [r7, #20]
 800d7cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	68fa      	ldr	r2, [r7, #12]
 800d7d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	685a      	ldr	r2, [r3, #4]
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	693a      	ldr	r2, [r7, #16]
 800d7e0:	621a      	str	r2, [r3, #32]
}
 800d7e2:	bf00      	nop
 800d7e4:	371c      	adds	r7, #28
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ec:	4770      	bx	lr
 800d7ee:	bf00      	nop
 800d7f0:	feff8fff 	.word	0xfeff8fff
 800d7f4:	40010000 	.word	0x40010000
 800d7f8:	40010400 	.word	0x40010400
 800d7fc:	40014000 	.word	0x40014000
 800d800:	40014400 	.word	0x40014400
 800d804:	40014800 	.word	0x40014800

0800d808 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d808:	b480      	push	{r7}
 800d80a:	b087      	sub	sp, #28
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6a1b      	ldr	r3, [r3, #32]
 800d816:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6a1b      	ldr	r3, [r3, #32]
 800d822:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	685b      	ldr	r3, [r3, #4]
 800d828:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d82e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d830:	68fa      	ldr	r2, [r7, #12]
 800d832:	4b21      	ldr	r3, [pc, #132]	; (800d8b8 <TIM_OC5_SetConfig+0xb0>)
 800d834:	4013      	ands	r3, r2
 800d836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	68fa      	ldr	r2, [r7, #12]
 800d83e:	4313      	orrs	r3, r2
 800d840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d842:	693b      	ldr	r3, [r7, #16]
 800d844:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d848:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	689b      	ldr	r3, [r3, #8]
 800d84e:	041b      	lsls	r3, r3, #16
 800d850:	693a      	ldr	r2, [r7, #16]
 800d852:	4313      	orrs	r3, r2
 800d854:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	4a18      	ldr	r2, [pc, #96]	; (800d8bc <TIM_OC5_SetConfig+0xb4>)
 800d85a:	4293      	cmp	r3, r2
 800d85c:	d00f      	beq.n	800d87e <TIM_OC5_SetConfig+0x76>
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	4a17      	ldr	r2, [pc, #92]	; (800d8c0 <TIM_OC5_SetConfig+0xb8>)
 800d862:	4293      	cmp	r3, r2
 800d864:	d00b      	beq.n	800d87e <TIM_OC5_SetConfig+0x76>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	4a16      	ldr	r2, [pc, #88]	; (800d8c4 <TIM_OC5_SetConfig+0xbc>)
 800d86a:	4293      	cmp	r3, r2
 800d86c:	d007      	beq.n	800d87e <TIM_OC5_SetConfig+0x76>
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	4a15      	ldr	r2, [pc, #84]	; (800d8c8 <TIM_OC5_SetConfig+0xc0>)
 800d872:	4293      	cmp	r3, r2
 800d874:	d003      	beq.n	800d87e <TIM_OC5_SetConfig+0x76>
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	4a14      	ldr	r2, [pc, #80]	; (800d8cc <TIM_OC5_SetConfig+0xc4>)
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d109      	bne.n	800d892 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d87e:	697b      	ldr	r3, [r7, #20]
 800d880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d884:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	695b      	ldr	r3, [r3, #20]
 800d88a:	021b      	lsls	r3, r3, #8
 800d88c:	697a      	ldr	r2, [r7, #20]
 800d88e:	4313      	orrs	r3, r2
 800d890:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	697a      	ldr	r2, [r7, #20]
 800d896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	68fa      	ldr	r2, [r7, #12]
 800d89c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	685a      	ldr	r2, [r3, #4]
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	693a      	ldr	r2, [r7, #16]
 800d8aa:	621a      	str	r2, [r3, #32]
}
 800d8ac:	bf00      	nop
 800d8ae:	371c      	adds	r7, #28
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b6:	4770      	bx	lr
 800d8b8:	fffeff8f 	.word	0xfffeff8f
 800d8bc:	40010000 	.word	0x40010000
 800d8c0:	40010400 	.word	0x40010400
 800d8c4:	40014000 	.word	0x40014000
 800d8c8:	40014400 	.word	0x40014400
 800d8cc:	40014800 	.word	0x40014800

0800d8d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b087      	sub	sp, #28
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
 800d8d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6a1b      	ldr	r3, [r3, #32]
 800d8de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6a1b      	ldr	r3, [r3, #32]
 800d8ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	685b      	ldr	r3, [r3, #4]
 800d8f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d8f8:	68fa      	ldr	r2, [r7, #12]
 800d8fa:	4b22      	ldr	r3, [pc, #136]	; (800d984 <TIM_OC6_SetConfig+0xb4>)
 800d8fc:	4013      	ands	r3, r2
 800d8fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	021b      	lsls	r3, r3, #8
 800d906:	68fa      	ldr	r2, [r7, #12]
 800d908:	4313      	orrs	r3, r2
 800d90a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d90c:	693b      	ldr	r3, [r7, #16]
 800d90e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d912:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	689b      	ldr	r3, [r3, #8]
 800d918:	051b      	lsls	r3, r3, #20
 800d91a:	693a      	ldr	r2, [r7, #16]
 800d91c:	4313      	orrs	r3, r2
 800d91e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	4a19      	ldr	r2, [pc, #100]	; (800d988 <TIM_OC6_SetConfig+0xb8>)
 800d924:	4293      	cmp	r3, r2
 800d926:	d00f      	beq.n	800d948 <TIM_OC6_SetConfig+0x78>
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	4a18      	ldr	r2, [pc, #96]	; (800d98c <TIM_OC6_SetConfig+0xbc>)
 800d92c:	4293      	cmp	r3, r2
 800d92e:	d00b      	beq.n	800d948 <TIM_OC6_SetConfig+0x78>
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	4a17      	ldr	r2, [pc, #92]	; (800d990 <TIM_OC6_SetConfig+0xc0>)
 800d934:	4293      	cmp	r3, r2
 800d936:	d007      	beq.n	800d948 <TIM_OC6_SetConfig+0x78>
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	4a16      	ldr	r2, [pc, #88]	; (800d994 <TIM_OC6_SetConfig+0xc4>)
 800d93c:	4293      	cmp	r3, r2
 800d93e:	d003      	beq.n	800d948 <TIM_OC6_SetConfig+0x78>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	4a15      	ldr	r2, [pc, #84]	; (800d998 <TIM_OC6_SetConfig+0xc8>)
 800d944:	4293      	cmp	r3, r2
 800d946:	d109      	bne.n	800d95c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d94e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	695b      	ldr	r3, [r3, #20]
 800d954:	029b      	lsls	r3, r3, #10
 800d956:	697a      	ldr	r2, [r7, #20]
 800d958:	4313      	orrs	r3, r2
 800d95a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	697a      	ldr	r2, [r7, #20]
 800d960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	68fa      	ldr	r2, [r7, #12]
 800d966:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	685a      	ldr	r2, [r3, #4]
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	693a      	ldr	r2, [r7, #16]
 800d974:	621a      	str	r2, [r3, #32]
}
 800d976:	bf00      	nop
 800d978:	371c      	adds	r7, #28
 800d97a:	46bd      	mov	sp, r7
 800d97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d980:	4770      	bx	lr
 800d982:	bf00      	nop
 800d984:	feff8fff 	.word	0xfeff8fff
 800d988:	40010000 	.word	0x40010000
 800d98c:	40010400 	.word	0x40010400
 800d990:	40014000 	.word	0x40014000
 800d994:	40014400 	.word	0x40014400
 800d998:	40014800 	.word	0x40014800

0800d99c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d99c:	b480      	push	{r7}
 800d99e:	b087      	sub	sp, #28
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	60f8      	str	r0, [r7, #12]
 800d9a4:	60b9      	str	r1, [r7, #8]
 800d9a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	f003 031f 	and.w	r3, r3, #31
 800d9ae:	2201      	movs	r2, #1
 800d9b0:	fa02 f303 	lsl.w	r3, r2, r3
 800d9b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	6a1a      	ldr	r2, [r3, #32]
 800d9ba:	697b      	ldr	r3, [r7, #20]
 800d9bc:	43db      	mvns	r3, r3
 800d9be:	401a      	ands	r2, r3
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	6a1a      	ldr	r2, [r3, #32]
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	f003 031f 	and.w	r3, r3, #31
 800d9ce:	6879      	ldr	r1, [r7, #4]
 800d9d0:	fa01 f303 	lsl.w	r3, r1, r3
 800d9d4:	431a      	orrs	r2, r3
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	621a      	str	r2, [r3, #32]
}
 800d9da:	bf00      	nop
 800d9dc:	371c      	adds	r7, #28
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e4:	4770      	bx	lr
	...

0800d9e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d9e8:	b480      	push	{r7}
 800d9ea:	b085      	sub	sp, #20
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
 800d9f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d9f8:	2b01      	cmp	r3, #1
 800d9fa:	d101      	bne.n	800da00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d9fc:	2302      	movs	r3, #2
 800d9fe:	e06d      	b.n	800dadc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2201      	movs	r2, #1
 800da04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2202      	movs	r2, #2
 800da0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	685b      	ldr	r3, [r3, #4]
 800da16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	689b      	ldr	r3, [r3, #8]
 800da1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	4a30      	ldr	r2, [pc, #192]	; (800dae8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800da26:	4293      	cmp	r3, r2
 800da28:	d004      	beq.n	800da34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	4a2f      	ldr	r2, [pc, #188]	; (800daec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800da30:	4293      	cmp	r3, r2
 800da32:	d108      	bne.n	800da46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800da3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	685b      	ldr	r3, [r3, #4]
 800da40:	68fa      	ldr	r2, [r7, #12]
 800da42:	4313      	orrs	r3, r2
 800da44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	68fa      	ldr	r2, [r7, #12]
 800da54:	4313      	orrs	r3, r2
 800da56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	68fa      	ldr	r2, [r7, #12]
 800da5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	4a20      	ldr	r2, [pc, #128]	; (800dae8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800da66:	4293      	cmp	r3, r2
 800da68:	d022      	beq.n	800dab0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da72:	d01d      	beq.n	800dab0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	4a1d      	ldr	r2, [pc, #116]	; (800daf0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800da7a:	4293      	cmp	r3, r2
 800da7c:	d018      	beq.n	800dab0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	4a1c      	ldr	r2, [pc, #112]	; (800daf4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800da84:	4293      	cmp	r3, r2
 800da86:	d013      	beq.n	800dab0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	4a1a      	ldr	r2, [pc, #104]	; (800daf8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800da8e:	4293      	cmp	r3, r2
 800da90:	d00e      	beq.n	800dab0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	4a15      	ldr	r2, [pc, #84]	; (800daec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800da98:	4293      	cmp	r3, r2
 800da9a:	d009      	beq.n	800dab0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	4a16      	ldr	r2, [pc, #88]	; (800dafc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800daa2:	4293      	cmp	r3, r2
 800daa4:	d004      	beq.n	800dab0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	4a15      	ldr	r2, [pc, #84]	; (800db00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800daac:	4293      	cmp	r3, r2
 800daae:	d10c      	bne.n	800daca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dab0:	68bb      	ldr	r3, [r7, #8]
 800dab2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dab6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	689b      	ldr	r3, [r3, #8]
 800dabc:	68ba      	ldr	r2, [r7, #8]
 800dabe:	4313      	orrs	r3, r2
 800dac0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	68ba      	ldr	r2, [r7, #8]
 800dac8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2201      	movs	r2, #1
 800dace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2200      	movs	r2, #0
 800dad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dada:	2300      	movs	r3, #0
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3714      	adds	r7, #20
 800dae0:	46bd      	mov	sp, r7
 800dae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae6:	4770      	bx	lr
 800dae8:	40010000 	.word	0x40010000
 800daec:	40010400 	.word	0x40010400
 800daf0:	40000400 	.word	0x40000400
 800daf4:	40000800 	.word	0x40000800
 800daf8:	40000c00 	.word	0x40000c00
 800dafc:	40001800 	.word	0x40001800
 800db00:	40014000 	.word	0x40014000

0800db04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800db04:	b480      	push	{r7}
 800db06:	b085      	sub	sp, #20
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
 800db0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800db0e:	2300      	movs	r3, #0
 800db10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db18:	2b01      	cmp	r3, #1
 800db1a:	d101      	bne.n	800db20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800db1c:	2302      	movs	r3, #2
 800db1e:	e065      	b.n	800dbec <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2201      	movs	r2, #1
 800db24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	68db      	ldr	r3, [r3, #12]
 800db32:	4313      	orrs	r3, r2
 800db34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	689b      	ldr	r3, [r3, #8]
 800db40:	4313      	orrs	r3, r2
 800db42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	685b      	ldr	r3, [r3, #4]
 800db4e:	4313      	orrs	r3, r2
 800db50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	4313      	orrs	r3, r2
 800db5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	691b      	ldr	r3, [r3, #16]
 800db6a:	4313      	orrs	r3, r2
 800db6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	695b      	ldr	r3, [r3, #20]
 800db78:	4313      	orrs	r3, r2
 800db7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db86:	4313      	orrs	r3, r2
 800db88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	699b      	ldr	r3, [r3, #24]
 800db94:	041b      	lsls	r3, r3, #16
 800db96:	4313      	orrs	r3, r2
 800db98:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	4a16      	ldr	r2, [pc, #88]	; (800dbf8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800dba0:	4293      	cmp	r3, r2
 800dba2:	d004      	beq.n	800dbae <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	4a14      	ldr	r2, [pc, #80]	; (800dbfc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800dbaa:	4293      	cmp	r3, r2
 800dbac:	d115      	bne.n	800dbda <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbb8:	051b      	lsls	r3, r3, #20
 800dbba:	4313      	orrs	r3, r2
 800dbbc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	69db      	ldr	r3, [r3, #28]
 800dbc8:	4313      	orrs	r3, r2
 800dbca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	6a1b      	ldr	r3, [r3, #32]
 800dbd6:	4313      	orrs	r3, r2
 800dbd8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	68fa      	ldr	r2, [r7, #12]
 800dbe0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dbea:	2300      	movs	r3, #0
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3714      	adds	r7, #20
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf6:	4770      	bx	lr
 800dbf8:	40010000 	.word	0x40010000
 800dbfc:	40010400 	.word	0x40010400

0800dc00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dc00:	b480      	push	{r7}
 800dc02:	b083      	sub	sp, #12
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dc08:	bf00      	nop
 800dc0a:	370c      	adds	r7, #12
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc12:	4770      	bx	lr

0800dc14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dc14:	b480      	push	{r7}
 800dc16:	b083      	sub	sp, #12
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dc1c:	bf00      	nop
 800dc1e:	370c      	adds	r7, #12
 800dc20:	46bd      	mov	sp, r7
 800dc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc26:	4770      	bx	lr

0800dc28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dc28:	b480      	push	{r7}
 800dc2a:	b083      	sub	sp, #12
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dc30:	bf00      	nop
 800dc32:	370c      	adds	r7, #12
 800dc34:	46bd      	mov	sp, r7
 800dc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3a:	4770      	bx	lr

0800dc3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b082      	sub	sp, #8
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d101      	bne.n	800dc4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dc4a:	2301      	movs	r3, #1
 800dc4c:	e042      	b.n	800dcd4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d106      	bne.n	800dc66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f7f4 fbc3 	bl	80023ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2224      	movs	r2, #36	; 0x24
 800dc6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	681a      	ldr	r2, [r3, #0]
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	f022 0201 	bic.w	r2, r2, #1
 800dc7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	f000 f82c 	bl	800dcdc <UART_SetConfig>
 800dc84:	4603      	mov	r3, r0
 800dc86:	2b01      	cmp	r3, #1
 800dc88:	d101      	bne.n	800dc8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	e022      	b.n	800dcd4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d002      	beq.n	800dc9c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f000 fd88 	bl	800e7ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	685a      	ldr	r2, [r3, #4]
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dcaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	689a      	ldr	r2, [r3, #8]
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dcba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	681a      	ldr	r2, [r3, #0]
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	f042 0201 	orr.w	r2, r2, #1
 800dcca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f000 fe0f 	bl	800e8f0 <UART_CheckIdleState>
 800dcd2:	4603      	mov	r3, r0
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3708      	adds	r7, #8
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}

0800dcdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dcdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dce0:	b092      	sub	sp, #72	; 0x48
 800dce2:	af00      	add	r7, sp, #0
 800dce4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dce6:	2300      	movs	r3, #0
 800dce8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	689a      	ldr	r2, [r3, #8]
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	691b      	ldr	r3, [r3, #16]
 800dcf4:	431a      	orrs	r2, r3
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	695b      	ldr	r3, [r3, #20]
 800dcfa:	431a      	orrs	r2, r3
 800dcfc:	697b      	ldr	r3, [r7, #20]
 800dcfe:	69db      	ldr	r3, [r3, #28]
 800dd00:	4313      	orrs	r3, r2
 800dd02:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	681a      	ldr	r2, [r3, #0]
 800dd0a:	4bbe      	ldr	r3, [pc, #760]	; (800e004 <UART_SetConfig+0x328>)
 800dd0c:	4013      	ands	r3, r2
 800dd0e:	697a      	ldr	r2, [r7, #20]
 800dd10:	6812      	ldr	r2, [r2, #0]
 800dd12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dd14:	430b      	orrs	r3, r1
 800dd16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	685b      	ldr	r3, [r3, #4]
 800dd1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	68da      	ldr	r2, [r3, #12]
 800dd26:	697b      	ldr	r3, [r7, #20]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	430a      	orrs	r2, r1
 800dd2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	699b      	ldr	r3, [r3, #24]
 800dd32:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dd34:	697b      	ldr	r3, [r7, #20]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	4ab3      	ldr	r2, [pc, #716]	; (800e008 <UART_SetConfig+0x32c>)
 800dd3a:	4293      	cmp	r3, r2
 800dd3c:	d004      	beq.n	800dd48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dd3e:	697b      	ldr	r3, [r7, #20]
 800dd40:	6a1b      	ldr	r3, [r3, #32]
 800dd42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd44:	4313      	orrs	r3, r2
 800dd46:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dd48:	697b      	ldr	r3, [r7, #20]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	689a      	ldr	r2, [r3, #8]
 800dd4e:	4baf      	ldr	r3, [pc, #700]	; (800e00c <UART_SetConfig+0x330>)
 800dd50:	4013      	ands	r3, r2
 800dd52:	697a      	ldr	r2, [r7, #20]
 800dd54:	6812      	ldr	r2, [r2, #0]
 800dd56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dd58:	430b      	orrs	r3, r1
 800dd5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd62:	f023 010f 	bic.w	r1, r3, #15
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd6a:	697b      	ldr	r3, [r7, #20]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	430a      	orrs	r2, r1
 800dd70:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dd72:	697b      	ldr	r3, [r7, #20]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	4aa6      	ldr	r2, [pc, #664]	; (800e010 <UART_SetConfig+0x334>)
 800dd78:	4293      	cmp	r3, r2
 800dd7a:	d177      	bne.n	800de6c <UART_SetConfig+0x190>
 800dd7c:	4ba5      	ldr	r3, [pc, #660]	; (800e014 <UART_SetConfig+0x338>)
 800dd7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dd84:	2b28      	cmp	r3, #40	; 0x28
 800dd86:	d86d      	bhi.n	800de64 <UART_SetConfig+0x188>
 800dd88:	a201      	add	r2, pc, #4	; (adr r2, 800dd90 <UART_SetConfig+0xb4>)
 800dd8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd8e:	bf00      	nop
 800dd90:	0800de35 	.word	0x0800de35
 800dd94:	0800de65 	.word	0x0800de65
 800dd98:	0800de65 	.word	0x0800de65
 800dd9c:	0800de65 	.word	0x0800de65
 800dda0:	0800de65 	.word	0x0800de65
 800dda4:	0800de65 	.word	0x0800de65
 800dda8:	0800de65 	.word	0x0800de65
 800ddac:	0800de65 	.word	0x0800de65
 800ddb0:	0800de3d 	.word	0x0800de3d
 800ddb4:	0800de65 	.word	0x0800de65
 800ddb8:	0800de65 	.word	0x0800de65
 800ddbc:	0800de65 	.word	0x0800de65
 800ddc0:	0800de65 	.word	0x0800de65
 800ddc4:	0800de65 	.word	0x0800de65
 800ddc8:	0800de65 	.word	0x0800de65
 800ddcc:	0800de65 	.word	0x0800de65
 800ddd0:	0800de45 	.word	0x0800de45
 800ddd4:	0800de65 	.word	0x0800de65
 800ddd8:	0800de65 	.word	0x0800de65
 800dddc:	0800de65 	.word	0x0800de65
 800dde0:	0800de65 	.word	0x0800de65
 800dde4:	0800de65 	.word	0x0800de65
 800dde8:	0800de65 	.word	0x0800de65
 800ddec:	0800de65 	.word	0x0800de65
 800ddf0:	0800de4d 	.word	0x0800de4d
 800ddf4:	0800de65 	.word	0x0800de65
 800ddf8:	0800de65 	.word	0x0800de65
 800ddfc:	0800de65 	.word	0x0800de65
 800de00:	0800de65 	.word	0x0800de65
 800de04:	0800de65 	.word	0x0800de65
 800de08:	0800de65 	.word	0x0800de65
 800de0c:	0800de65 	.word	0x0800de65
 800de10:	0800de55 	.word	0x0800de55
 800de14:	0800de65 	.word	0x0800de65
 800de18:	0800de65 	.word	0x0800de65
 800de1c:	0800de65 	.word	0x0800de65
 800de20:	0800de65 	.word	0x0800de65
 800de24:	0800de65 	.word	0x0800de65
 800de28:	0800de65 	.word	0x0800de65
 800de2c:	0800de65 	.word	0x0800de65
 800de30:	0800de5d 	.word	0x0800de5d
 800de34:	2301      	movs	r3, #1
 800de36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de3a:	e222      	b.n	800e282 <UART_SetConfig+0x5a6>
 800de3c:	2304      	movs	r3, #4
 800de3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de42:	e21e      	b.n	800e282 <UART_SetConfig+0x5a6>
 800de44:	2308      	movs	r3, #8
 800de46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de4a:	e21a      	b.n	800e282 <UART_SetConfig+0x5a6>
 800de4c:	2310      	movs	r3, #16
 800de4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de52:	e216      	b.n	800e282 <UART_SetConfig+0x5a6>
 800de54:	2320      	movs	r3, #32
 800de56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de5a:	e212      	b.n	800e282 <UART_SetConfig+0x5a6>
 800de5c:	2340      	movs	r3, #64	; 0x40
 800de5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de62:	e20e      	b.n	800e282 <UART_SetConfig+0x5a6>
 800de64:	2380      	movs	r3, #128	; 0x80
 800de66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de6a:	e20a      	b.n	800e282 <UART_SetConfig+0x5a6>
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	4a69      	ldr	r2, [pc, #420]	; (800e018 <UART_SetConfig+0x33c>)
 800de72:	4293      	cmp	r3, r2
 800de74:	d130      	bne.n	800ded8 <UART_SetConfig+0x1fc>
 800de76:	4b67      	ldr	r3, [pc, #412]	; (800e014 <UART_SetConfig+0x338>)
 800de78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de7a:	f003 0307 	and.w	r3, r3, #7
 800de7e:	2b05      	cmp	r3, #5
 800de80:	d826      	bhi.n	800ded0 <UART_SetConfig+0x1f4>
 800de82:	a201      	add	r2, pc, #4	; (adr r2, 800de88 <UART_SetConfig+0x1ac>)
 800de84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de88:	0800dea1 	.word	0x0800dea1
 800de8c:	0800dea9 	.word	0x0800dea9
 800de90:	0800deb1 	.word	0x0800deb1
 800de94:	0800deb9 	.word	0x0800deb9
 800de98:	0800dec1 	.word	0x0800dec1
 800de9c:	0800dec9 	.word	0x0800dec9
 800dea0:	2300      	movs	r3, #0
 800dea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dea6:	e1ec      	b.n	800e282 <UART_SetConfig+0x5a6>
 800dea8:	2304      	movs	r3, #4
 800deaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deae:	e1e8      	b.n	800e282 <UART_SetConfig+0x5a6>
 800deb0:	2308      	movs	r3, #8
 800deb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deb6:	e1e4      	b.n	800e282 <UART_SetConfig+0x5a6>
 800deb8:	2310      	movs	r3, #16
 800deba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800debe:	e1e0      	b.n	800e282 <UART_SetConfig+0x5a6>
 800dec0:	2320      	movs	r3, #32
 800dec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dec6:	e1dc      	b.n	800e282 <UART_SetConfig+0x5a6>
 800dec8:	2340      	movs	r3, #64	; 0x40
 800deca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dece:	e1d8      	b.n	800e282 <UART_SetConfig+0x5a6>
 800ded0:	2380      	movs	r3, #128	; 0x80
 800ded2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ded6:	e1d4      	b.n	800e282 <UART_SetConfig+0x5a6>
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	4a4f      	ldr	r2, [pc, #316]	; (800e01c <UART_SetConfig+0x340>)
 800dede:	4293      	cmp	r3, r2
 800dee0:	d130      	bne.n	800df44 <UART_SetConfig+0x268>
 800dee2:	4b4c      	ldr	r3, [pc, #304]	; (800e014 <UART_SetConfig+0x338>)
 800dee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dee6:	f003 0307 	and.w	r3, r3, #7
 800deea:	2b05      	cmp	r3, #5
 800deec:	d826      	bhi.n	800df3c <UART_SetConfig+0x260>
 800deee:	a201      	add	r2, pc, #4	; (adr r2, 800def4 <UART_SetConfig+0x218>)
 800def0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800def4:	0800df0d 	.word	0x0800df0d
 800def8:	0800df15 	.word	0x0800df15
 800defc:	0800df1d 	.word	0x0800df1d
 800df00:	0800df25 	.word	0x0800df25
 800df04:	0800df2d 	.word	0x0800df2d
 800df08:	0800df35 	.word	0x0800df35
 800df0c:	2300      	movs	r3, #0
 800df0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df12:	e1b6      	b.n	800e282 <UART_SetConfig+0x5a6>
 800df14:	2304      	movs	r3, #4
 800df16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df1a:	e1b2      	b.n	800e282 <UART_SetConfig+0x5a6>
 800df1c:	2308      	movs	r3, #8
 800df1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df22:	e1ae      	b.n	800e282 <UART_SetConfig+0x5a6>
 800df24:	2310      	movs	r3, #16
 800df26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df2a:	e1aa      	b.n	800e282 <UART_SetConfig+0x5a6>
 800df2c:	2320      	movs	r3, #32
 800df2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df32:	e1a6      	b.n	800e282 <UART_SetConfig+0x5a6>
 800df34:	2340      	movs	r3, #64	; 0x40
 800df36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df3a:	e1a2      	b.n	800e282 <UART_SetConfig+0x5a6>
 800df3c:	2380      	movs	r3, #128	; 0x80
 800df3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df42:	e19e      	b.n	800e282 <UART_SetConfig+0x5a6>
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	4a35      	ldr	r2, [pc, #212]	; (800e020 <UART_SetConfig+0x344>)
 800df4a:	4293      	cmp	r3, r2
 800df4c:	d130      	bne.n	800dfb0 <UART_SetConfig+0x2d4>
 800df4e:	4b31      	ldr	r3, [pc, #196]	; (800e014 <UART_SetConfig+0x338>)
 800df50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df52:	f003 0307 	and.w	r3, r3, #7
 800df56:	2b05      	cmp	r3, #5
 800df58:	d826      	bhi.n	800dfa8 <UART_SetConfig+0x2cc>
 800df5a:	a201      	add	r2, pc, #4	; (adr r2, 800df60 <UART_SetConfig+0x284>)
 800df5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df60:	0800df79 	.word	0x0800df79
 800df64:	0800df81 	.word	0x0800df81
 800df68:	0800df89 	.word	0x0800df89
 800df6c:	0800df91 	.word	0x0800df91
 800df70:	0800df99 	.word	0x0800df99
 800df74:	0800dfa1 	.word	0x0800dfa1
 800df78:	2300      	movs	r3, #0
 800df7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df7e:	e180      	b.n	800e282 <UART_SetConfig+0x5a6>
 800df80:	2304      	movs	r3, #4
 800df82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df86:	e17c      	b.n	800e282 <UART_SetConfig+0x5a6>
 800df88:	2308      	movs	r3, #8
 800df8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df8e:	e178      	b.n	800e282 <UART_SetConfig+0x5a6>
 800df90:	2310      	movs	r3, #16
 800df92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df96:	e174      	b.n	800e282 <UART_SetConfig+0x5a6>
 800df98:	2320      	movs	r3, #32
 800df9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df9e:	e170      	b.n	800e282 <UART_SetConfig+0x5a6>
 800dfa0:	2340      	movs	r3, #64	; 0x40
 800dfa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfa6:	e16c      	b.n	800e282 <UART_SetConfig+0x5a6>
 800dfa8:	2380      	movs	r3, #128	; 0x80
 800dfaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfae:	e168      	b.n	800e282 <UART_SetConfig+0x5a6>
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	4a1b      	ldr	r2, [pc, #108]	; (800e024 <UART_SetConfig+0x348>)
 800dfb6:	4293      	cmp	r3, r2
 800dfb8:	d142      	bne.n	800e040 <UART_SetConfig+0x364>
 800dfba:	4b16      	ldr	r3, [pc, #88]	; (800e014 <UART_SetConfig+0x338>)
 800dfbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfbe:	f003 0307 	and.w	r3, r3, #7
 800dfc2:	2b05      	cmp	r3, #5
 800dfc4:	d838      	bhi.n	800e038 <UART_SetConfig+0x35c>
 800dfc6:	a201      	add	r2, pc, #4	; (adr r2, 800dfcc <UART_SetConfig+0x2f0>)
 800dfc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfcc:	0800dfe5 	.word	0x0800dfe5
 800dfd0:	0800dfed 	.word	0x0800dfed
 800dfd4:	0800dff5 	.word	0x0800dff5
 800dfd8:	0800dffd 	.word	0x0800dffd
 800dfdc:	0800e029 	.word	0x0800e029
 800dfe0:	0800e031 	.word	0x0800e031
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfea:	e14a      	b.n	800e282 <UART_SetConfig+0x5a6>
 800dfec:	2304      	movs	r3, #4
 800dfee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dff2:	e146      	b.n	800e282 <UART_SetConfig+0x5a6>
 800dff4:	2308      	movs	r3, #8
 800dff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dffa:	e142      	b.n	800e282 <UART_SetConfig+0x5a6>
 800dffc:	2310      	movs	r3, #16
 800dffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e002:	e13e      	b.n	800e282 <UART_SetConfig+0x5a6>
 800e004:	cfff69f3 	.word	0xcfff69f3
 800e008:	58000c00 	.word	0x58000c00
 800e00c:	11fff4ff 	.word	0x11fff4ff
 800e010:	40011000 	.word	0x40011000
 800e014:	58024400 	.word	0x58024400
 800e018:	40004400 	.word	0x40004400
 800e01c:	40004800 	.word	0x40004800
 800e020:	40004c00 	.word	0x40004c00
 800e024:	40005000 	.word	0x40005000
 800e028:	2320      	movs	r3, #32
 800e02a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e02e:	e128      	b.n	800e282 <UART_SetConfig+0x5a6>
 800e030:	2340      	movs	r3, #64	; 0x40
 800e032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e036:	e124      	b.n	800e282 <UART_SetConfig+0x5a6>
 800e038:	2380      	movs	r3, #128	; 0x80
 800e03a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e03e:	e120      	b.n	800e282 <UART_SetConfig+0x5a6>
 800e040:	697b      	ldr	r3, [r7, #20]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	4acb      	ldr	r2, [pc, #812]	; (800e374 <UART_SetConfig+0x698>)
 800e046:	4293      	cmp	r3, r2
 800e048:	d176      	bne.n	800e138 <UART_SetConfig+0x45c>
 800e04a:	4bcb      	ldr	r3, [pc, #812]	; (800e378 <UART_SetConfig+0x69c>)
 800e04c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e04e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e052:	2b28      	cmp	r3, #40	; 0x28
 800e054:	d86c      	bhi.n	800e130 <UART_SetConfig+0x454>
 800e056:	a201      	add	r2, pc, #4	; (adr r2, 800e05c <UART_SetConfig+0x380>)
 800e058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e05c:	0800e101 	.word	0x0800e101
 800e060:	0800e131 	.word	0x0800e131
 800e064:	0800e131 	.word	0x0800e131
 800e068:	0800e131 	.word	0x0800e131
 800e06c:	0800e131 	.word	0x0800e131
 800e070:	0800e131 	.word	0x0800e131
 800e074:	0800e131 	.word	0x0800e131
 800e078:	0800e131 	.word	0x0800e131
 800e07c:	0800e109 	.word	0x0800e109
 800e080:	0800e131 	.word	0x0800e131
 800e084:	0800e131 	.word	0x0800e131
 800e088:	0800e131 	.word	0x0800e131
 800e08c:	0800e131 	.word	0x0800e131
 800e090:	0800e131 	.word	0x0800e131
 800e094:	0800e131 	.word	0x0800e131
 800e098:	0800e131 	.word	0x0800e131
 800e09c:	0800e111 	.word	0x0800e111
 800e0a0:	0800e131 	.word	0x0800e131
 800e0a4:	0800e131 	.word	0x0800e131
 800e0a8:	0800e131 	.word	0x0800e131
 800e0ac:	0800e131 	.word	0x0800e131
 800e0b0:	0800e131 	.word	0x0800e131
 800e0b4:	0800e131 	.word	0x0800e131
 800e0b8:	0800e131 	.word	0x0800e131
 800e0bc:	0800e119 	.word	0x0800e119
 800e0c0:	0800e131 	.word	0x0800e131
 800e0c4:	0800e131 	.word	0x0800e131
 800e0c8:	0800e131 	.word	0x0800e131
 800e0cc:	0800e131 	.word	0x0800e131
 800e0d0:	0800e131 	.word	0x0800e131
 800e0d4:	0800e131 	.word	0x0800e131
 800e0d8:	0800e131 	.word	0x0800e131
 800e0dc:	0800e121 	.word	0x0800e121
 800e0e0:	0800e131 	.word	0x0800e131
 800e0e4:	0800e131 	.word	0x0800e131
 800e0e8:	0800e131 	.word	0x0800e131
 800e0ec:	0800e131 	.word	0x0800e131
 800e0f0:	0800e131 	.word	0x0800e131
 800e0f4:	0800e131 	.word	0x0800e131
 800e0f8:	0800e131 	.word	0x0800e131
 800e0fc:	0800e129 	.word	0x0800e129
 800e100:	2301      	movs	r3, #1
 800e102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e106:	e0bc      	b.n	800e282 <UART_SetConfig+0x5a6>
 800e108:	2304      	movs	r3, #4
 800e10a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e10e:	e0b8      	b.n	800e282 <UART_SetConfig+0x5a6>
 800e110:	2308      	movs	r3, #8
 800e112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e116:	e0b4      	b.n	800e282 <UART_SetConfig+0x5a6>
 800e118:	2310      	movs	r3, #16
 800e11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e11e:	e0b0      	b.n	800e282 <UART_SetConfig+0x5a6>
 800e120:	2320      	movs	r3, #32
 800e122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e126:	e0ac      	b.n	800e282 <UART_SetConfig+0x5a6>
 800e128:	2340      	movs	r3, #64	; 0x40
 800e12a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e12e:	e0a8      	b.n	800e282 <UART_SetConfig+0x5a6>
 800e130:	2380      	movs	r3, #128	; 0x80
 800e132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e136:	e0a4      	b.n	800e282 <UART_SetConfig+0x5a6>
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	4a8f      	ldr	r2, [pc, #572]	; (800e37c <UART_SetConfig+0x6a0>)
 800e13e:	4293      	cmp	r3, r2
 800e140:	d130      	bne.n	800e1a4 <UART_SetConfig+0x4c8>
 800e142:	4b8d      	ldr	r3, [pc, #564]	; (800e378 <UART_SetConfig+0x69c>)
 800e144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e146:	f003 0307 	and.w	r3, r3, #7
 800e14a:	2b05      	cmp	r3, #5
 800e14c:	d826      	bhi.n	800e19c <UART_SetConfig+0x4c0>
 800e14e:	a201      	add	r2, pc, #4	; (adr r2, 800e154 <UART_SetConfig+0x478>)
 800e150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e154:	0800e16d 	.word	0x0800e16d
 800e158:	0800e175 	.word	0x0800e175
 800e15c:	0800e17d 	.word	0x0800e17d
 800e160:	0800e185 	.word	0x0800e185
 800e164:	0800e18d 	.word	0x0800e18d
 800e168:	0800e195 	.word	0x0800e195
 800e16c:	2300      	movs	r3, #0
 800e16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e172:	e086      	b.n	800e282 <UART_SetConfig+0x5a6>
 800e174:	2304      	movs	r3, #4
 800e176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e17a:	e082      	b.n	800e282 <UART_SetConfig+0x5a6>
 800e17c:	2308      	movs	r3, #8
 800e17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e182:	e07e      	b.n	800e282 <UART_SetConfig+0x5a6>
 800e184:	2310      	movs	r3, #16
 800e186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e18a:	e07a      	b.n	800e282 <UART_SetConfig+0x5a6>
 800e18c:	2320      	movs	r3, #32
 800e18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e192:	e076      	b.n	800e282 <UART_SetConfig+0x5a6>
 800e194:	2340      	movs	r3, #64	; 0x40
 800e196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e19a:	e072      	b.n	800e282 <UART_SetConfig+0x5a6>
 800e19c:	2380      	movs	r3, #128	; 0x80
 800e19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1a2:	e06e      	b.n	800e282 <UART_SetConfig+0x5a6>
 800e1a4:	697b      	ldr	r3, [r7, #20]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	4a75      	ldr	r2, [pc, #468]	; (800e380 <UART_SetConfig+0x6a4>)
 800e1aa:	4293      	cmp	r3, r2
 800e1ac:	d130      	bne.n	800e210 <UART_SetConfig+0x534>
 800e1ae:	4b72      	ldr	r3, [pc, #456]	; (800e378 <UART_SetConfig+0x69c>)
 800e1b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1b2:	f003 0307 	and.w	r3, r3, #7
 800e1b6:	2b05      	cmp	r3, #5
 800e1b8:	d826      	bhi.n	800e208 <UART_SetConfig+0x52c>
 800e1ba:	a201      	add	r2, pc, #4	; (adr r2, 800e1c0 <UART_SetConfig+0x4e4>)
 800e1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1c0:	0800e1d9 	.word	0x0800e1d9
 800e1c4:	0800e1e1 	.word	0x0800e1e1
 800e1c8:	0800e1e9 	.word	0x0800e1e9
 800e1cc:	0800e1f1 	.word	0x0800e1f1
 800e1d0:	0800e1f9 	.word	0x0800e1f9
 800e1d4:	0800e201 	.word	0x0800e201
 800e1d8:	2300      	movs	r3, #0
 800e1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1de:	e050      	b.n	800e282 <UART_SetConfig+0x5a6>
 800e1e0:	2304      	movs	r3, #4
 800e1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1e6:	e04c      	b.n	800e282 <UART_SetConfig+0x5a6>
 800e1e8:	2308      	movs	r3, #8
 800e1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ee:	e048      	b.n	800e282 <UART_SetConfig+0x5a6>
 800e1f0:	2310      	movs	r3, #16
 800e1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1f6:	e044      	b.n	800e282 <UART_SetConfig+0x5a6>
 800e1f8:	2320      	movs	r3, #32
 800e1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1fe:	e040      	b.n	800e282 <UART_SetConfig+0x5a6>
 800e200:	2340      	movs	r3, #64	; 0x40
 800e202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e206:	e03c      	b.n	800e282 <UART_SetConfig+0x5a6>
 800e208:	2380      	movs	r3, #128	; 0x80
 800e20a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e20e:	e038      	b.n	800e282 <UART_SetConfig+0x5a6>
 800e210:	697b      	ldr	r3, [r7, #20]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	4a5b      	ldr	r2, [pc, #364]	; (800e384 <UART_SetConfig+0x6a8>)
 800e216:	4293      	cmp	r3, r2
 800e218:	d130      	bne.n	800e27c <UART_SetConfig+0x5a0>
 800e21a:	4b57      	ldr	r3, [pc, #348]	; (800e378 <UART_SetConfig+0x69c>)
 800e21c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e21e:	f003 0307 	and.w	r3, r3, #7
 800e222:	2b05      	cmp	r3, #5
 800e224:	d826      	bhi.n	800e274 <UART_SetConfig+0x598>
 800e226:	a201      	add	r2, pc, #4	; (adr r2, 800e22c <UART_SetConfig+0x550>)
 800e228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e22c:	0800e245 	.word	0x0800e245
 800e230:	0800e24d 	.word	0x0800e24d
 800e234:	0800e255 	.word	0x0800e255
 800e238:	0800e25d 	.word	0x0800e25d
 800e23c:	0800e265 	.word	0x0800e265
 800e240:	0800e26d 	.word	0x0800e26d
 800e244:	2302      	movs	r3, #2
 800e246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e24a:	e01a      	b.n	800e282 <UART_SetConfig+0x5a6>
 800e24c:	2304      	movs	r3, #4
 800e24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e252:	e016      	b.n	800e282 <UART_SetConfig+0x5a6>
 800e254:	2308      	movs	r3, #8
 800e256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e25a:	e012      	b.n	800e282 <UART_SetConfig+0x5a6>
 800e25c:	2310      	movs	r3, #16
 800e25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e262:	e00e      	b.n	800e282 <UART_SetConfig+0x5a6>
 800e264:	2320      	movs	r3, #32
 800e266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e26a:	e00a      	b.n	800e282 <UART_SetConfig+0x5a6>
 800e26c:	2340      	movs	r3, #64	; 0x40
 800e26e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e272:	e006      	b.n	800e282 <UART_SetConfig+0x5a6>
 800e274:	2380      	movs	r3, #128	; 0x80
 800e276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e27a:	e002      	b.n	800e282 <UART_SetConfig+0x5a6>
 800e27c:	2380      	movs	r3, #128	; 0x80
 800e27e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	4a3f      	ldr	r2, [pc, #252]	; (800e384 <UART_SetConfig+0x6a8>)
 800e288:	4293      	cmp	r3, r2
 800e28a:	f040 80f8 	bne.w	800e47e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e28e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e292:	2b20      	cmp	r3, #32
 800e294:	dc46      	bgt.n	800e324 <UART_SetConfig+0x648>
 800e296:	2b02      	cmp	r3, #2
 800e298:	f2c0 8082 	blt.w	800e3a0 <UART_SetConfig+0x6c4>
 800e29c:	3b02      	subs	r3, #2
 800e29e:	2b1e      	cmp	r3, #30
 800e2a0:	d87e      	bhi.n	800e3a0 <UART_SetConfig+0x6c4>
 800e2a2:	a201      	add	r2, pc, #4	; (adr r2, 800e2a8 <UART_SetConfig+0x5cc>)
 800e2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2a8:	0800e32b 	.word	0x0800e32b
 800e2ac:	0800e3a1 	.word	0x0800e3a1
 800e2b0:	0800e333 	.word	0x0800e333
 800e2b4:	0800e3a1 	.word	0x0800e3a1
 800e2b8:	0800e3a1 	.word	0x0800e3a1
 800e2bc:	0800e3a1 	.word	0x0800e3a1
 800e2c0:	0800e343 	.word	0x0800e343
 800e2c4:	0800e3a1 	.word	0x0800e3a1
 800e2c8:	0800e3a1 	.word	0x0800e3a1
 800e2cc:	0800e3a1 	.word	0x0800e3a1
 800e2d0:	0800e3a1 	.word	0x0800e3a1
 800e2d4:	0800e3a1 	.word	0x0800e3a1
 800e2d8:	0800e3a1 	.word	0x0800e3a1
 800e2dc:	0800e3a1 	.word	0x0800e3a1
 800e2e0:	0800e353 	.word	0x0800e353
 800e2e4:	0800e3a1 	.word	0x0800e3a1
 800e2e8:	0800e3a1 	.word	0x0800e3a1
 800e2ec:	0800e3a1 	.word	0x0800e3a1
 800e2f0:	0800e3a1 	.word	0x0800e3a1
 800e2f4:	0800e3a1 	.word	0x0800e3a1
 800e2f8:	0800e3a1 	.word	0x0800e3a1
 800e2fc:	0800e3a1 	.word	0x0800e3a1
 800e300:	0800e3a1 	.word	0x0800e3a1
 800e304:	0800e3a1 	.word	0x0800e3a1
 800e308:	0800e3a1 	.word	0x0800e3a1
 800e30c:	0800e3a1 	.word	0x0800e3a1
 800e310:	0800e3a1 	.word	0x0800e3a1
 800e314:	0800e3a1 	.word	0x0800e3a1
 800e318:	0800e3a1 	.word	0x0800e3a1
 800e31c:	0800e3a1 	.word	0x0800e3a1
 800e320:	0800e393 	.word	0x0800e393
 800e324:	2b40      	cmp	r3, #64	; 0x40
 800e326:	d037      	beq.n	800e398 <UART_SetConfig+0x6bc>
 800e328:	e03a      	b.n	800e3a0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e32a:	f7fd fd2b 	bl	800bd84 <HAL_RCCEx_GetD3PCLK1Freq>
 800e32e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e330:	e03c      	b.n	800e3ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e336:	4618      	mov	r0, r3
 800e338:	f7fd fd3a 	bl	800bdb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e33e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e340:	e034      	b.n	800e3ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e342:	f107 0318 	add.w	r3, r7, #24
 800e346:	4618      	mov	r0, r3
 800e348:	f7fd fe86 	bl	800c058 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e34c:	69fb      	ldr	r3, [r7, #28]
 800e34e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e350:	e02c      	b.n	800e3ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e352:	4b09      	ldr	r3, [pc, #36]	; (800e378 <UART_SetConfig+0x69c>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	f003 0320 	and.w	r3, r3, #32
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d016      	beq.n	800e38c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e35e:	4b06      	ldr	r3, [pc, #24]	; (800e378 <UART_SetConfig+0x69c>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	08db      	lsrs	r3, r3, #3
 800e364:	f003 0303 	and.w	r3, r3, #3
 800e368:	4a07      	ldr	r2, [pc, #28]	; (800e388 <UART_SetConfig+0x6ac>)
 800e36a:	fa22 f303 	lsr.w	r3, r2, r3
 800e36e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e370:	e01c      	b.n	800e3ac <UART_SetConfig+0x6d0>
 800e372:	bf00      	nop
 800e374:	40011400 	.word	0x40011400
 800e378:	58024400 	.word	0x58024400
 800e37c:	40007800 	.word	0x40007800
 800e380:	40007c00 	.word	0x40007c00
 800e384:	58000c00 	.word	0x58000c00
 800e388:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e38c:	4b9d      	ldr	r3, [pc, #628]	; (800e604 <UART_SetConfig+0x928>)
 800e38e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e390:	e00c      	b.n	800e3ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e392:	4b9d      	ldr	r3, [pc, #628]	; (800e608 <UART_SetConfig+0x92c>)
 800e394:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e396:	e009      	b.n	800e3ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e398:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e39c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e39e:	e005      	b.n	800e3ac <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e3aa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e3ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	f000 81de 	beq.w	800e770 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e3b4:	697b      	ldr	r3, [r7, #20]
 800e3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3b8:	4a94      	ldr	r2, [pc, #592]	; (800e60c <UART_SetConfig+0x930>)
 800e3ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e3be:	461a      	mov	r2, r3
 800e3c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800e3c6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e3c8:	697b      	ldr	r3, [r7, #20]
 800e3ca:	685a      	ldr	r2, [r3, #4]
 800e3cc:	4613      	mov	r3, r2
 800e3ce:	005b      	lsls	r3, r3, #1
 800e3d0:	4413      	add	r3, r2
 800e3d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3d4:	429a      	cmp	r2, r3
 800e3d6:	d305      	bcc.n	800e3e4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	685b      	ldr	r3, [r3, #4]
 800e3dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e3de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d903      	bls.n	800e3ec <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e3ea:	e1c1      	b.n	800e770 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e3ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	60bb      	str	r3, [r7, #8]
 800e3f2:	60fa      	str	r2, [r7, #12]
 800e3f4:	697b      	ldr	r3, [r7, #20]
 800e3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3f8:	4a84      	ldr	r2, [pc, #528]	; (800e60c <UART_SetConfig+0x930>)
 800e3fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e3fe:	b29b      	uxth	r3, r3
 800e400:	2200      	movs	r2, #0
 800e402:	603b      	str	r3, [r7, #0]
 800e404:	607a      	str	r2, [r7, #4]
 800e406:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e40a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e40e:	f7f1 ff63 	bl	80002d8 <__aeabi_uldivmod>
 800e412:	4602      	mov	r2, r0
 800e414:	460b      	mov	r3, r1
 800e416:	4610      	mov	r0, r2
 800e418:	4619      	mov	r1, r3
 800e41a:	f04f 0200 	mov.w	r2, #0
 800e41e:	f04f 0300 	mov.w	r3, #0
 800e422:	020b      	lsls	r3, r1, #8
 800e424:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e428:	0202      	lsls	r2, r0, #8
 800e42a:	6979      	ldr	r1, [r7, #20]
 800e42c:	6849      	ldr	r1, [r1, #4]
 800e42e:	0849      	lsrs	r1, r1, #1
 800e430:	2000      	movs	r0, #0
 800e432:	460c      	mov	r4, r1
 800e434:	4605      	mov	r5, r0
 800e436:	eb12 0804 	adds.w	r8, r2, r4
 800e43a:	eb43 0905 	adc.w	r9, r3, r5
 800e43e:	697b      	ldr	r3, [r7, #20]
 800e440:	685b      	ldr	r3, [r3, #4]
 800e442:	2200      	movs	r2, #0
 800e444:	469a      	mov	sl, r3
 800e446:	4693      	mov	fp, r2
 800e448:	4652      	mov	r2, sl
 800e44a:	465b      	mov	r3, fp
 800e44c:	4640      	mov	r0, r8
 800e44e:	4649      	mov	r1, r9
 800e450:	f7f1 ff42 	bl	80002d8 <__aeabi_uldivmod>
 800e454:	4602      	mov	r2, r0
 800e456:	460b      	mov	r3, r1
 800e458:	4613      	mov	r3, r2
 800e45a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e45e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e462:	d308      	bcc.n	800e476 <UART_SetConfig+0x79a>
 800e464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e466:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e46a:	d204      	bcs.n	800e476 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e46c:	697b      	ldr	r3, [r7, #20]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e472:	60da      	str	r2, [r3, #12]
 800e474:	e17c      	b.n	800e770 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e476:	2301      	movs	r3, #1
 800e478:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e47c:	e178      	b.n	800e770 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e47e:	697b      	ldr	r3, [r7, #20]
 800e480:	69db      	ldr	r3, [r3, #28]
 800e482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e486:	f040 80c5 	bne.w	800e614 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e48a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e48e:	2b20      	cmp	r3, #32
 800e490:	dc48      	bgt.n	800e524 <UART_SetConfig+0x848>
 800e492:	2b00      	cmp	r3, #0
 800e494:	db7b      	blt.n	800e58e <UART_SetConfig+0x8b2>
 800e496:	2b20      	cmp	r3, #32
 800e498:	d879      	bhi.n	800e58e <UART_SetConfig+0x8b2>
 800e49a:	a201      	add	r2, pc, #4	; (adr r2, 800e4a0 <UART_SetConfig+0x7c4>)
 800e49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4a0:	0800e52b 	.word	0x0800e52b
 800e4a4:	0800e533 	.word	0x0800e533
 800e4a8:	0800e58f 	.word	0x0800e58f
 800e4ac:	0800e58f 	.word	0x0800e58f
 800e4b0:	0800e53b 	.word	0x0800e53b
 800e4b4:	0800e58f 	.word	0x0800e58f
 800e4b8:	0800e58f 	.word	0x0800e58f
 800e4bc:	0800e58f 	.word	0x0800e58f
 800e4c0:	0800e54b 	.word	0x0800e54b
 800e4c4:	0800e58f 	.word	0x0800e58f
 800e4c8:	0800e58f 	.word	0x0800e58f
 800e4cc:	0800e58f 	.word	0x0800e58f
 800e4d0:	0800e58f 	.word	0x0800e58f
 800e4d4:	0800e58f 	.word	0x0800e58f
 800e4d8:	0800e58f 	.word	0x0800e58f
 800e4dc:	0800e58f 	.word	0x0800e58f
 800e4e0:	0800e55b 	.word	0x0800e55b
 800e4e4:	0800e58f 	.word	0x0800e58f
 800e4e8:	0800e58f 	.word	0x0800e58f
 800e4ec:	0800e58f 	.word	0x0800e58f
 800e4f0:	0800e58f 	.word	0x0800e58f
 800e4f4:	0800e58f 	.word	0x0800e58f
 800e4f8:	0800e58f 	.word	0x0800e58f
 800e4fc:	0800e58f 	.word	0x0800e58f
 800e500:	0800e58f 	.word	0x0800e58f
 800e504:	0800e58f 	.word	0x0800e58f
 800e508:	0800e58f 	.word	0x0800e58f
 800e50c:	0800e58f 	.word	0x0800e58f
 800e510:	0800e58f 	.word	0x0800e58f
 800e514:	0800e58f 	.word	0x0800e58f
 800e518:	0800e58f 	.word	0x0800e58f
 800e51c:	0800e58f 	.word	0x0800e58f
 800e520:	0800e581 	.word	0x0800e581
 800e524:	2b40      	cmp	r3, #64	; 0x40
 800e526:	d02e      	beq.n	800e586 <UART_SetConfig+0x8aa>
 800e528:	e031      	b.n	800e58e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e52a:	f7fb ffe7 	bl	800a4fc <HAL_RCC_GetPCLK1Freq>
 800e52e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e530:	e033      	b.n	800e59a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e532:	f7fb fff9 	bl	800a528 <HAL_RCC_GetPCLK2Freq>
 800e536:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e538:	e02f      	b.n	800e59a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e53a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e53e:	4618      	mov	r0, r3
 800e540:	f7fd fc36 	bl	800bdb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e546:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e548:	e027      	b.n	800e59a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e54a:	f107 0318 	add.w	r3, r7, #24
 800e54e:	4618      	mov	r0, r3
 800e550:	f7fd fd82 	bl	800c058 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e554:	69fb      	ldr	r3, [r7, #28]
 800e556:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e558:	e01f      	b.n	800e59a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e55a:	4b2d      	ldr	r3, [pc, #180]	; (800e610 <UART_SetConfig+0x934>)
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	f003 0320 	and.w	r3, r3, #32
 800e562:	2b00      	cmp	r3, #0
 800e564:	d009      	beq.n	800e57a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e566:	4b2a      	ldr	r3, [pc, #168]	; (800e610 <UART_SetConfig+0x934>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	08db      	lsrs	r3, r3, #3
 800e56c:	f003 0303 	and.w	r3, r3, #3
 800e570:	4a24      	ldr	r2, [pc, #144]	; (800e604 <UART_SetConfig+0x928>)
 800e572:	fa22 f303 	lsr.w	r3, r2, r3
 800e576:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e578:	e00f      	b.n	800e59a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e57a:	4b22      	ldr	r3, [pc, #136]	; (800e604 <UART_SetConfig+0x928>)
 800e57c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e57e:	e00c      	b.n	800e59a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e580:	4b21      	ldr	r3, [pc, #132]	; (800e608 <UART_SetConfig+0x92c>)
 800e582:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e584:	e009      	b.n	800e59a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e58a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e58c:	e005      	b.n	800e59a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e58e:	2300      	movs	r3, #0
 800e590:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e592:	2301      	movs	r3, #1
 800e594:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e598:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e59a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	f000 80e7 	beq.w	800e770 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e5a2:	697b      	ldr	r3, [r7, #20]
 800e5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5a6:	4a19      	ldr	r2, [pc, #100]	; (800e60c <UART_SetConfig+0x930>)
 800e5a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e5ac:	461a      	mov	r2, r3
 800e5ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800e5b4:	005a      	lsls	r2, r3, #1
 800e5b6:	697b      	ldr	r3, [r7, #20]
 800e5b8:	685b      	ldr	r3, [r3, #4]
 800e5ba:	085b      	lsrs	r3, r3, #1
 800e5bc:	441a      	add	r2, r3
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	685b      	ldr	r3, [r3, #4]
 800e5c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5c6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ca:	2b0f      	cmp	r3, #15
 800e5cc:	d916      	bls.n	800e5fc <UART_SetConfig+0x920>
 800e5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5d4:	d212      	bcs.n	800e5fc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d8:	b29b      	uxth	r3, r3
 800e5da:	f023 030f 	bic.w	r3, r3, #15
 800e5de:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e2:	085b      	lsrs	r3, r3, #1
 800e5e4:	b29b      	uxth	r3, r3
 800e5e6:	f003 0307 	and.w	r3, r3, #7
 800e5ea:	b29a      	uxth	r2, r3
 800e5ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e5ee:	4313      	orrs	r3, r2
 800e5f0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e5f2:	697b      	ldr	r3, [r7, #20]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e5f8:	60da      	str	r2, [r3, #12]
 800e5fa:	e0b9      	b.n	800e770 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e602:	e0b5      	b.n	800e770 <UART_SetConfig+0xa94>
 800e604:	03d09000 	.word	0x03d09000
 800e608:	003d0900 	.word	0x003d0900
 800e60c:	080131d0 	.word	0x080131d0
 800e610:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e614:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e618:	2b20      	cmp	r3, #32
 800e61a:	dc49      	bgt.n	800e6b0 <UART_SetConfig+0x9d4>
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	db7c      	blt.n	800e71a <UART_SetConfig+0xa3e>
 800e620:	2b20      	cmp	r3, #32
 800e622:	d87a      	bhi.n	800e71a <UART_SetConfig+0xa3e>
 800e624:	a201      	add	r2, pc, #4	; (adr r2, 800e62c <UART_SetConfig+0x950>)
 800e626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e62a:	bf00      	nop
 800e62c:	0800e6b7 	.word	0x0800e6b7
 800e630:	0800e6bf 	.word	0x0800e6bf
 800e634:	0800e71b 	.word	0x0800e71b
 800e638:	0800e71b 	.word	0x0800e71b
 800e63c:	0800e6c7 	.word	0x0800e6c7
 800e640:	0800e71b 	.word	0x0800e71b
 800e644:	0800e71b 	.word	0x0800e71b
 800e648:	0800e71b 	.word	0x0800e71b
 800e64c:	0800e6d7 	.word	0x0800e6d7
 800e650:	0800e71b 	.word	0x0800e71b
 800e654:	0800e71b 	.word	0x0800e71b
 800e658:	0800e71b 	.word	0x0800e71b
 800e65c:	0800e71b 	.word	0x0800e71b
 800e660:	0800e71b 	.word	0x0800e71b
 800e664:	0800e71b 	.word	0x0800e71b
 800e668:	0800e71b 	.word	0x0800e71b
 800e66c:	0800e6e7 	.word	0x0800e6e7
 800e670:	0800e71b 	.word	0x0800e71b
 800e674:	0800e71b 	.word	0x0800e71b
 800e678:	0800e71b 	.word	0x0800e71b
 800e67c:	0800e71b 	.word	0x0800e71b
 800e680:	0800e71b 	.word	0x0800e71b
 800e684:	0800e71b 	.word	0x0800e71b
 800e688:	0800e71b 	.word	0x0800e71b
 800e68c:	0800e71b 	.word	0x0800e71b
 800e690:	0800e71b 	.word	0x0800e71b
 800e694:	0800e71b 	.word	0x0800e71b
 800e698:	0800e71b 	.word	0x0800e71b
 800e69c:	0800e71b 	.word	0x0800e71b
 800e6a0:	0800e71b 	.word	0x0800e71b
 800e6a4:	0800e71b 	.word	0x0800e71b
 800e6a8:	0800e71b 	.word	0x0800e71b
 800e6ac:	0800e70d 	.word	0x0800e70d
 800e6b0:	2b40      	cmp	r3, #64	; 0x40
 800e6b2:	d02e      	beq.n	800e712 <UART_SetConfig+0xa36>
 800e6b4:	e031      	b.n	800e71a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e6b6:	f7fb ff21 	bl	800a4fc <HAL_RCC_GetPCLK1Freq>
 800e6ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e6bc:	e033      	b.n	800e726 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e6be:	f7fb ff33 	bl	800a528 <HAL_RCC_GetPCLK2Freq>
 800e6c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e6c4:	e02f      	b.n	800e726 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e6c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f7fd fb70 	bl	800bdb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6d4:	e027      	b.n	800e726 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e6d6:	f107 0318 	add.w	r3, r7, #24
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f7fd fcbc 	bl	800c058 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e6e0:	69fb      	ldr	r3, [r7, #28]
 800e6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6e4:	e01f      	b.n	800e726 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e6e6:	4b2d      	ldr	r3, [pc, #180]	; (800e79c <UART_SetConfig+0xac0>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	f003 0320 	and.w	r3, r3, #32
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d009      	beq.n	800e706 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e6f2:	4b2a      	ldr	r3, [pc, #168]	; (800e79c <UART_SetConfig+0xac0>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	08db      	lsrs	r3, r3, #3
 800e6f8:	f003 0303 	and.w	r3, r3, #3
 800e6fc:	4a28      	ldr	r2, [pc, #160]	; (800e7a0 <UART_SetConfig+0xac4>)
 800e6fe:	fa22 f303 	lsr.w	r3, r2, r3
 800e702:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e704:	e00f      	b.n	800e726 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e706:	4b26      	ldr	r3, [pc, #152]	; (800e7a0 <UART_SetConfig+0xac4>)
 800e708:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e70a:	e00c      	b.n	800e726 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e70c:	4b25      	ldr	r3, [pc, #148]	; (800e7a4 <UART_SetConfig+0xac8>)
 800e70e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e710:	e009      	b.n	800e726 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e718:	e005      	b.n	800e726 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e71a:	2300      	movs	r3, #0
 800e71c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e71e:	2301      	movs	r3, #1
 800e720:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e724:	bf00      	nop
    }

    if (pclk != 0U)
 800e726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d021      	beq.n	800e770 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e730:	4a1d      	ldr	r2, [pc, #116]	; (800e7a8 <UART_SetConfig+0xacc>)
 800e732:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e736:	461a      	mov	r2, r3
 800e738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e73a:	fbb3 f2f2 	udiv	r2, r3, r2
 800e73e:	697b      	ldr	r3, [r7, #20]
 800e740:	685b      	ldr	r3, [r3, #4]
 800e742:	085b      	lsrs	r3, r3, #1
 800e744:	441a      	add	r2, r3
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	685b      	ldr	r3, [r3, #4]
 800e74a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e74e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e752:	2b0f      	cmp	r3, #15
 800e754:	d909      	bls.n	800e76a <UART_SetConfig+0xa8e>
 800e756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e75c:	d205      	bcs.n	800e76a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e760:	b29a      	uxth	r2, r3
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	60da      	str	r2, [r3, #12]
 800e768:	e002      	b.n	800e770 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e76a:	2301      	movs	r3, #1
 800e76c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e770:	697b      	ldr	r3, [r7, #20]
 800e772:	2201      	movs	r2, #1
 800e774:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e778:	697b      	ldr	r3, [r7, #20]
 800e77a:	2201      	movs	r2, #1
 800e77c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	2200      	movs	r2, #0
 800e784:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	2200      	movs	r2, #0
 800e78a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e78c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e790:	4618      	mov	r0, r3
 800e792:	3748      	adds	r7, #72	; 0x48
 800e794:	46bd      	mov	sp, r7
 800e796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e79a:	bf00      	nop
 800e79c:	58024400 	.word	0x58024400
 800e7a0:	03d09000 	.word	0x03d09000
 800e7a4:	003d0900 	.word	0x003d0900
 800e7a8:	080131d0 	.word	0x080131d0

0800e7ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e7ac:	b480      	push	{r7}
 800e7ae:	b083      	sub	sp, #12
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7b8:	f003 0301 	and.w	r3, r3, #1
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d00a      	beq.n	800e7d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	685b      	ldr	r3, [r3, #4]
 800e7c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	430a      	orrs	r2, r1
 800e7d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7da:	f003 0302 	and.w	r3, r3, #2
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d00a      	beq.n	800e7f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	685b      	ldr	r3, [r3, #4]
 800e7e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	430a      	orrs	r2, r1
 800e7f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7fc:	f003 0304 	and.w	r3, r3, #4
 800e800:	2b00      	cmp	r3, #0
 800e802:	d00a      	beq.n	800e81a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	685b      	ldr	r3, [r3, #4]
 800e80a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	430a      	orrs	r2, r1
 800e818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e81e:	f003 0308 	and.w	r3, r3, #8
 800e822:	2b00      	cmp	r3, #0
 800e824:	d00a      	beq.n	800e83c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	685b      	ldr	r3, [r3, #4]
 800e82c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	430a      	orrs	r2, r1
 800e83a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e840:	f003 0310 	and.w	r3, r3, #16
 800e844:	2b00      	cmp	r3, #0
 800e846:	d00a      	beq.n	800e85e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	689b      	ldr	r3, [r3, #8]
 800e84e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	430a      	orrs	r2, r1
 800e85c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e862:	f003 0320 	and.w	r3, r3, #32
 800e866:	2b00      	cmp	r3, #0
 800e868:	d00a      	beq.n	800e880 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	689b      	ldr	r3, [r3, #8]
 800e870:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	430a      	orrs	r2, r1
 800e87e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d01a      	beq.n	800e8c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	685b      	ldr	r3, [r3, #4]
 800e892:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	430a      	orrs	r2, r1
 800e8a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e8aa:	d10a      	bne.n	800e8c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	685b      	ldr	r3, [r3, #4]
 800e8b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	430a      	orrs	r2, r1
 800e8c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d00a      	beq.n	800e8e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	685b      	ldr	r3, [r3, #4]
 800e8d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	430a      	orrs	r2, r1
 800e8e2:	605a      	str	r2, [r3, #4]
  }
}
 800e8e4:	bf00      	nop
 800e8e6:	370c      	adds	r7, #12
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ee:	4770      	bx	lr

0800e8f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b086      	sub	sp, #24
 800e8f4:	af02      	add	r7, sp, #8
 800e8f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e900:	f7f3 ff2a 	bl	8002758 <HAL_GetTick>
 800e904:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	f003 0308 	and.w	r3, r3, #8
 800e910:	2b08      	cmp	r3, #8
 800e912:	d10e      	bne.n	800e932 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e914:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e918:	9300      	str	r3, [sp, #0]
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	2200      	movs	r2, #0
 800e91e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	f000 f82f 	bl	800e986 <UART_WaitOnFlagUntilTimeout>
 800e928:	4603      	mov	r3, r0
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d001      	beq.n	800e932 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e92e:	2303      	movs	r3, #3
 800e930:	e025      	b.n	800e97e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	f003 0304 	and.w	r3, r3, #4
 800e93c:	2b04      	cmp	r3, #4
 800e93e:	d10e      	bne.n	800e95e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e940:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e944:	9300      	str	r3, [sp, #0]
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	2200      	movs	r2, #0
 800e94a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e94e:	6878      	ldr	r0, [r7, #4]
 800e950:	f000 f819 	bl	800e986 <UART_WaitOnFlagUntilTimeout>
 800e954:	4603      	mov	r3, r0
 800e956:	2b00      	cmp	r3, #0
 800e958:	d001      	beq.n	800e95e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e95a:	2303      	movs	r3, #3
 800e95c:	e00f      	b.n	800e97e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2220      	movs	r2, #32
 800e962:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2220      	movs	r2, #32
 800e96a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	2200      	movs	r2, #0
 800e972:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2200      	movs	r2, #0
 800e978:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e97c:	2300      	movs	r3, #0
}
 800e97e:	4618      	mov	r0, r3
 800e980:	3710      	adds	r7, #16
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}

0800e986 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e986:	b580      	push	{r7, lr}
 800e988:	b09c      	sub	sp, #112	; 0x70
 800e98a:	af00      	add	r7, sp, #0
 800e98c:	60f8      	str	r0, [r7, #12]
 800e98e:	60b9      	str	r1, [r7, #8]
 800e990:	603b      	str	r3, [r7, #0]
 800e992:	4613      	mov	r3, r2
 800e994:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e996:	e0a9      	b.n	800eaec <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e998:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e99a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e99e:	f000 80a5 	beq.w	800eaec <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e9a2:	f7f3 fed9 	bl	8002758 <HAL_GetTick>
 800e9a6:	4602      	mov	r2, r0
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	1ad3      	subs	r3, r2, r3
 800e9ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e9ae:	429a      	cmp	r2, r3
 800e9b0:	d302      	bcc.n	800e9b8 <UART_WaitOnFlagUntilTimeout+0x32>
 800e9b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d140      	bne.n	800ea3a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9c0:	e853 3f00 	ldrex	r3, [r3]
 800e9c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e9c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e9cc:	667b      	str	r3, [r7, #100]	; 0x64
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	461a      	mov	r2, r3
 800e9d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e9d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e9d8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e9dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e9de:	e841 2300 	strex	r3, r2, [r1]
 800e9e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e9e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d1e6      	bne.n	800e9b8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	3308      	adds	r3, #8
 800e9f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9f4:	e853 3f00 	ldrex	r3, [r3]
 800e9f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9fc:	f023 0301 	bic.w	r3, r3, #1
 800ea00:	663b      	str	r3, [r7, #96]	; 0x60
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	3308      	adds	r3, #8
 800ea08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ea0a:	64ba      	str	r2, [r7, #72]	; 0x48
 800ea0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ea10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea12:	e841 2300 	strex	r3, r2, [r1]
 800ea16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ea18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d1e5      	bne.n	800e9ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	2220      	movs	r2, #32
 800ea22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	2220      	movs	r2, #32
 800ea2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	2200      	movs	r2, #0
 800ea32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ea36:	2303      	movs	r3, #3
 800ea38:	e069      	b.n	800eb0e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	f003 0304 	and.w	r3, r3, #4
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d051      	beq.n	800eaec <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	69db      	ldr	r3, [r3, #28]
 800ea4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ea52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ea56:	d149      	bne.n	800eaec <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ea60:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea6a:	e853 3f00 	ldrex	r3, [r3]
 800ea6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ea70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ea76:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	461a      	mov	r2, r3
 800ea7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea80:	637b      	str	r3, [r7, #52]	; 0x34
 800ea82:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ea86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea88:	e841 2300 	strex	r3, r2, [r1]
 800ea8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ea8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d1e6      	bne.n	800ea62 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	3308      	adds	r3, #8
 800ea9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea9c:	697b      	ldr	r3, [r7, #20]
 800ea9e:	e853 3f00 	ldrex	r3, [r3]
 800eaa2:	613b      	str	r3, [r7, #16]
   return(result);
 800eaa4:	693b      	ldr	r3, [r7, #16]
 800eaa6:	f023 0301 	bic.w	r3, r3, #1
 800eaaa:	66bb      	str	r3, [r7, #104]	; 0x68
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	3308      	adds	r3, #8
 800eab2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800eab4:	623a      	str	r2, [r7, #32]
 800eab6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eab8:	69f9      	ldr	r1, [r7, #28]
 800eaba:	6a3a      	ldr	r2, [r7, #32]
 800eabc:	e841 2300 	strex	r3, r2, [r1]
 800eac0:	61bb      	str	r3, [r7, #24]
   return(result);
 800eac2:	69bb      	ldr	r3, [r7, #24]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d1e5      	bne.n	800ea94 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	2220      	movs	r2, #32
 800eacc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	2220      	movs	r2, #32
 800ead4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	2220      	movs	r2, #32
 800eadc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	2200      	movs	r2, #0
 800eae4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800eae8:	2303      	movs	r3, #3
 800eaea:	e010      	b.n	800eb0e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	69da      	ldr	r2, [r3, #28]
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	4013      	ands	r3, r2
 800eaf6:	68ba      	ldr	r2, [r7, #8]
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	bf0c      	ite	eq
 800eafc:	2301      	moveq	r3, #1
 800eafe:	2300      	movne	r3, #0
 800eb00:	b2db      	uxtb	r3, r3
 800eb02:	461a      	mov	r2, r3
 800eb04:	79fb      	ldrb	r3, [r7, #7]
 800eb06:	429a      	cmp	r2, r3
 800eb08:	f43f af46 	beq.w	800e998 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800eb0c:	2300      	movs	r3, #0
}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	3770      	adds	r7, #112	; 0x70
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}

0800eb16 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800eb16:	b480      	push	{r7}
 800eb18:	b085      	sub	sp, #20
 800eb1a:	af00      	add	r7, sp, #0
 800eb1c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eb24:	2b01      	cmp	r3, #1
 800eb26:	d101      	bne.n	800eb2c <HAL_UARTEx_DisableFifoMode+0x16>
 800eb28:	2302      	movs	r3, #2
 800eb2a:	e027      	b.n	800eb7c <HAL_UARTEx_DisableFifoMode+0x66>
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2201      	movs	r2, #1
 800eb30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2224      	movs	r2, #36	; 0x24
 800eb38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	681a      	ldr	r2, [r3, #0]
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	f022 0201 	bic.w	r2, r2, #1
 800eb52:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800eb5a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2200      	movs	r2, #0
 800eb60:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	68fa      	ldr	r2, [r7, #12]
 800eb68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2220      	movs	r2, #32
 800eb6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2200      	movs	r2, #0
 800eb76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eb7a:	2300      	movs	r3, #0
}
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	3714      	adds	r7, #20
 800eb80:	46bd      	mov	sp, r7
 800eb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb86:	4770      	bx	lr

0800eb88 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b084      	sub	sp, #16
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
 800eb90:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eb98:	2b01      	cmp	r3, #1
 800eb9a:	d101      	bne.n	800eba0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800eb9c:	2302      	movs	r3, #2
 800eb9e:	e02d      	b.n	800ebfc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	2201      	movs	r2, #1
 800eba4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2224      	movs	r2, #36	; 0x24
 800ebac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	681a      	ldr	r2, [r3, #0]
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	f022 0201 	bic.w	r2, r2, #1
 800ebc6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	689b      	ldr	r3, [r3, #8]
 800ebce:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	683a      	ldr	r2, [r7, #0]
 800ebd8:	430a      	orrs	r2, r1
 800ebda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f000 f84f 	bl	800ec80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	68fa      	ldr	r2, [r7, #12]
 800ebe8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	2220      	movs	r2, #32
 800ebee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ebfa:	2300      	movs	r3, #0
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	3710      	adds	r7, #16
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}

0800ec04 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b084      	sub	sp, #16
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
 800ec0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ec14:	2b01      	cmp	r3, #1
 800ec16:	d101      	bne.n	800ec1c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ec18:	2302      	movs	r3, #2
 800ec1a:	e02d      	b.n	800ec78 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2201      	movs	r2, #1
 800ec20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2224      	movs	r2, #36	; 0x24
 800ec28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	681a      	ldr	r2, [r3, #0]
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	f022 0201 	bic.w	r2, r2, #1
 800ec42:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	689b      	ldr	r3, [r3, #8]
 800ec4a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	683a      	ldr	r2, [r7, #0]
 800ec54:	430a      	orrs	r2, r1
 800ec56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ec58:	6878      	ldr	r0, [r7, #4]
 800ec5a:	f000 f811 	bl	800ec80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	68fa      	ldr	r2, [r7, #12]
 800ec64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2220      	movs	r2, #32
 800ec6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	2200      	movs	r2, #0
 800ec72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ec76:	2300      	movs	r3, #0
}
 800ec78:	4618      	mov	r0, r3
 800ec7a:	3710      	adds	r7, #16
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd80      	pop	{r7, pc}

0800ec80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ec80:	b480      	push	{r7}
 800ec82:	b085      	sub	sp, #20
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d108      	bne.n	800eca2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2201      	movs	r2, #1
 800ec94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2201      	movs	r2, #1
 800ec9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800eca0:	e031      	b.n	800ed06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800eca2:	2310      	movs	r3, #16
 800eca4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800eca6:	2310      	movs	r3, #16
 800eca8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	689b      	ldr	r3, [r3, #8]
 800ecb0:	0e5b      	lsrs	r3, r3, #25
 800ecb2:	b2db      	uxtb	r3, r3
 800ecb4:	f003 0307 	and.w	r3, r3, #7
 800ecb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	689b      	ldr	r3, [r3, #8]
 800ecc0:	0f5b      	lsrs	r3, r3, #29
 800ecc2:	b2db      	uxtb	r3, r3
 800ecc4:	f003 0307 	and.w	r3, r3, #7
 800ecc8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ecca:	7bbb      	ldrb	r3, [r7, #14]
 800eccc:	7b3a      	ldrb	r2, [r7, #12]
 800ecce:	4911      	ldr	r1, [pc, #68]	; (800ed14 <UARTEx_SetNbDataToProcess+0x94>)
 800ecd0:	5c8a      	ldrb	r2, [r1, r2]
 800ecd2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ecd6:	7b3a      	ldrb	r2, [r7, #12]
 800ecd8:	490f      	ldr	r1, [pc, #60]	; (800ed18 <UARTEx_SetNbDataToProcess+0x98>)
 800ecda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ecdc:	fb93 f3f2 	sdiv	r3, r3, r2
 800ece0:	b29a      	uxth	r2, r3
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ece8:	7bfb      	ldrb	r3, [r7, #15]
 800ecea:	7b7a      	ldrb	r2, [r7, #13]
 800ecec:	4909      	ldr	r1, [pc, #36]	; (800ed14 <UARTEx_SetNbDataToProcess+0x94>)
 800ecee:	5c8a      	ldrb	r2, [r1, r2]
 800ecf0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ecf4:	7b7a      	ldrb	r2, [r7, #13]
 800ecf6:	4908      	ldr	r1, [pc, #32]	; (800ed18 <UARTEx_SetNbDataToProcess+0x98>)
 800ecf8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ecfa:	fb93 f3f2 	sdiv	r3, r3, r2
 800ecfe:	b29a      	uxth	r2, r3
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ed06:	bf00      	nop
 800ed08:	3714      	adds	r7, #20
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed10:	4770      	bx	lr
 800ed12:	bf00      	nop
 800ed14:	080131e8 	.word	0x080131e8
 800ed18:	080131f0 	.word	0x080131f0

0800ed1c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ed1c:	b084      	sub	sp, #16
 800ed1e:	b580      	push	{r7, lr}
 800ed20:	b084      	sub	sp, #16
 800ed22:	af00      	add	r7, sp, #0
 800ed24:	6078      	str	r0, [r7, #4]
 800ed26:	f107 001c 	add.w	r0, r7, #28
 800ed2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ed2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed30:	2b01      	cmp	r3, #1
 800ed32:	d120      	bne.n	800ed76 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	68da      	ldr	r2, [r3, #12]
 800ed44:	4b2a      	ldr	r3, [pc, #168]	; (800edf0 <USB_CoreInit+0xd4>)
 800ed46:	4013      	ands	r3, r2
 800ed48:	687a      	ldr	r2, [r7, #4]
 800ed4a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	68db      	ldr	r3, [r3, #12]
 800ed50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ed58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed5a:	2b01      	cmp	r3, #1
 800ed5c:	d105      	bne.n	800ed6a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	68db      	ldr	r3, [r3, #12]
 800ed62:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ed6a:	6878      	ldr	r0, [r7, #4]
 800ed6c:	f001 fc04 	bl	8010578 <USB_CoreReset>
 800ed70:	4603      	mov	r3, r0
 800ed72:	73fb      	strb	r3, [r7, #15]
 800ed74:	e01a      	b.n	800edac <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	68db      	ldr	r3, [r3, #12]
 800ed7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ed82:	6878      	ldr	r0, [r7, #4]
 800ed84:	f001 fbf8 	bl	8010578 <USB_CoreReset>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ed8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d106      	bne.n	800eda0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	639a      	str	r2, [r3, #56]	; 0x38
 800ed9e:	e005      	b.n	800edac <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eda4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800edac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edae:	2b01      	cmp	r3, #1
 800edb0:	d116      	bne.n	800ede0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800edb6:	b29a      	uxth	r2, r3
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800edc0:	4b0c      	ldr	r3, [pc, #48]	; (800edf4 <USB_CoreInit+0xd8>)
 800edc2:	4313      	orrs	r3, r2
 800edc4:	687a      	ldr	r2, [r7, #4]
 800edc6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	689b      	ldr	r3, [r3, #8]
 800edcc:	f043 0206 	orr.w	r2, r3, #6
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	689b      	ldr	r3, [r3, #8]
 800edd8:	f043 0220 	orr.w	r2, r3, #32
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ede0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ede2:	4618      	mov	r0, r3
 800ede4:	3710      	adds	r7, #16
 800ede6:	46bd      	mov	sp, r7
 800ede8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800edec:	b004      	add	sp, #16
 800edee:	4770      	bx	lr
 800edf0:	ffbdffbf 	.word	0xffbdffbf
 800edf4:	03ee0000 	.word	0x03ee0000

0800edf8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800edf8:	b480      	push	{r7}
 800edfa:	b087      	sub	sp, #28
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	60f8      	str	r0, [r7, #12]
 800ee00:	60b9      	str	r1, [r7, #8]
 800ee02:	4613      	mov	r3, r2
 800ee04:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ee06:	79fb      	ldrb	r3, [r7, #7]
 800ee08:	2b02      	cmp	r3, #2
 800ee0a:	d165      	bne.n	800eed8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	4a41      	ldr	r2, [pc, #260]	; (800ef14 <USB_SetTurnaroundTime+0x11c>)
 800ee10:	4293      	cmp	r3, r2
 800ee12:	d906      	bls.n	800ee22 <USB_SetTurnaroundTime+0x2a>
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	4a40      	ldr	r2, [pc, #256]	; (800ef18 <USB_SetTurnaroundTime+0x120>)
 800ee18:	4293      	cmp	r3, r2
 800ee1a:	d202      	bcs.n	800ee22 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ee1c:	230f      	movs	r3, #15
 800ee1e:	617b      	str	r3, [r7, #20]
 800ee20:	e062      	b.n	800eee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	4a3c      	ldr	r2, [pc, #240]	; (800ef18 <USB_SetTurnaroundTime+0x120>)
 800ee26:	4293      	cmp	r3, r2
 800ee28:	d306      	bcc.n	800ee38 <USB_SetTurnaroundTime+0x40>
 800ee2a:	68bb      	ldr	r3, [r7, #8]
 800ee2c:	4a3b      	ldr	r2, [pc, #236]	; (800ef1c <USB_SetTurnaroundTime+0x124>)
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	d202      	bcs.n	800ee38 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ee32:	230e      	movs	r3, #14
 800ee34:	617b      	str	r3, [r7, #20]
 800ee36:	e057      	b.n	800eee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ee38:	68bb      	ldr	r3, [r7, #8]
 800ee3a:	4a38      	ldr	r2, [pc, #224]	; (800ef1c <USB_SetTurnaroundTime+0x124>)
 800ee3c:	4293      	cmp	r3, r2
 800ee3e:	d306      	bcc.n	800ee4e <USB_SetTurnaroundTime+0x56>
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	4a37      	ldr	r2, [pc, #220]	; (800ef20 <USB_SetTurnaroundTime+0x128>)
 800ee44:	4293      	cmp	r3, r2
 800ee46:	d202      	bcs.n	800ee4e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ee48:	230d      	movs	r3, #13
 800ee4a:	617b      	str	r3, [r7, #20]
 800ee4c:	e04c      	b.n	800eee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	4a33      	ldr	r2, [pc, #204]	; (800ef20 <USB_SetTurnaroundTime+0x128>)
 800ee52:	4293      	cmp	r3, r2
 800ee54:	d306      	bcc.n	800ee64 <USB_SetTurnaroundTime+0x6c>
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	4a32      	ldr	r2, [pc, #200]	; (800ef24 <USB_SetTurnaroundTime+0x12c>)
 800ee5a:	4293      	cmp	r3, r2
 800ee5c:	d802      	bhi.n	800ee64 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ee5e:	230c      	movs	r3, #12
 800ee60:	617b      	str	r3, [r7, #20]
 800ee62:	e041      	b.n	800eee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ee64:	68bb      	ldr	r3, [r7, #8]
 800ee66:	4a2f      	ldr	r2, [pc, #188]	; (800ef24 <USB_SetTurnaroundTime+0x12c>)
 800ee68:	4293      	cmp	r3, r2
 800ee6a:	d906      	bls.n	800ee7a <USB_SetTurnaroundTime+0x82>
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	4a2e      	ldr	r2, [pc, #184]	; (800ef28 <USB_SetTurnaroundTime+0x130>)
 800ee70:	4293      	cmp	r3, r2
 800ee72:	d802      	bhi.n	800ee7a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ee74:	230b      	movs	r3, #11
 800ee76:	617b      	str	r3, [r7, #20]
 800ee78:	e036      	b.n	800eee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ee7a:	68bb      	ldr	r3, [r7, #8]
 800ee7c:	4a2a      	ldr	r2, [pc, #168]	; (800ef28 <USB_SetTurnaroundTime+0x130>)
 800ee7e:	4293      	cmp	r3, r2
 800ee80:	d906      	bls.n	800ee90 <USB_SetTurnaroundTime+0x98>
 800ee82:	68bb      	ldr	r3, [r7, #8]
 800ee84:	4a29      	ldr	r2, [pc, #164]	; (800ef2c <USB_SetTurnaroundTime+0x134>)
 800ee86:	4293      	cmp	r3, r2
 800ee88:	d802      	bhi.n	800ee90 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ee8a:	230a      	movs	r3, #10
 800ee8c:	617b      	str	r3, [r7, #20]
 800ee8e:	e02b      	b.n	800eee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	4a26      	ldr	r2, [pc, #152]	; (800ef2c <USB_SetTurnaroundTime+0x134>)
 800ee94:	4293      	cmp	r3, r2
 800ee96:	d906      	bls.n	800eea6 <USB_SetTurnaroundTime+0xae>
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	4a25      	ldr	r2, [pc, #148]	; (800ef30 <USB_SetTurnaroundTime+0x138>)
 800ee9c:	4293      	cmp	r3, r2
 800ee9e:	d202      	bcs.n	800eea6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800eea0:	2309      	movs	r3, #9
 800eea2:	617b      	str	r3, [r7, #20]
 800eea4:	e020      	b.n	800eee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800eea6:	68bb      	ldr	r3, [r7, #8]
 800eea8:	4a21      	ldr	r2, [pc, #132]	; (800ef30 <USB_SetTurnaroundTime+0x138>)
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	d306      	bcc.n	800eebc <USB_SetTurnaroundTime+0xc4>
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	4a20      	ldr	r2, [pc, #128]	; (800ef34 <USB_SetTurnaroundTime+0x13c>)
 800eeb2:	4293      	cmp	r3, r2
 800eeb4:	d802      	bhi.n	800eebc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800eeb6:	2308      	movs	r3, #8
 800eeb8:	617b      	str	r3, [r7, #20]
 800eeba:	e015      	b.n	800eee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	4a1d      	ldr	r2, [pc, #116]	; (800ef34 <USB_SetTurnaroundTime+0x13c>)
 800eec0:	4293      	cmp	r3, r2
 800eec2:	d906      	bls.n	800eed2 <USB_SetTurnaroundTime+0xda>
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	4a1c      	ldr	r2, [pc, #112]	; (800ef38 <USB_SetTurnaroundTime+0x140>)
 800eec8:	4293      	cmp	r3, r2
 800eeca:	d202      	bcs.n	800eed2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800eecc:	2307      	movs	r3, #7
 800eece:	617b      	str	r3, [r7, #20]
 800eed0:	e00a      	b.n	800eee8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800eed2:	2306      	movs	r3, #6
 800eed4:	617b      	str	r3, [r7, #20]
 800eed6:	e007      	b.n	800eee8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800eed8:	79fb      	ldrb	r3, [r7, #7]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d102      	bne.n	800eee4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800eede:	2309      	movs	r3, #9
 800eee0:	617b      	str	r3, [r7, #20]
 800eee2:	e001      	b.n	800eee8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800eee4:	2309      	movs	r3, #9
 800eee6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	68db      	ldr	r3, [r3, #12]
 800eeec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	68da      	ldr	r2, [r3, #12]
 800eef8:	697b      	ldr	r3, [r7, #20]
 800eefa:	029b      	lsls	r3, r3, #10
 800eefc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ef00:	431a      	orrs	r2, r3
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ef06:	2300      	movs	r3, #0
}
 800ef08:	4618      	mov	r0, r3
 800ef0a:	371c      	adds	r7, #28
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef12:	4770      	bx	lr
 800ef14:	00d8acbf 	.word	0x00d8acbf
 800ef18:	00e4e1c0 	.word	0x00e4e1c0
 800ef1c:	00f42400 	.word	0x00f42400
 800ef20:	01067380 	.word	0x01067380
 800ef24:	011a499f 	.word	0x011a499f
 800ef28:	01312cff 	.word	0x01312cff
 800ef2c:	014ca43f 	.word	0x014ca43f
 800ef30:	016e3600 	.word	0x016e3600
 800ef34:	01a6ab1f 	.word	0x01a6ab1f
 800ef38:	01e84800 	.word	0x01e84800

0800ef3c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ef3c:	b480      	push	{r7}
 800ef3e:	b083      	sub	sp, #12
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	689b      	ldr	r3, [r3, #8]
 800ef48:	f043 0201 	orr.w	r2, r3, #1
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ef50:	2300      	movs	r3, #0
}
 800ef52:	4618      	mov	r0, r3
 800ef54:	370c      	adds	r7, #12
 800ef56:	46bd      	mov	sp, r7
 800ef58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5c:	4770      	bx	lr

0800ef5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ef5e:	b480      	push	{r7}
 800ef60:	b083      	sub	sp, #12
 800ef62:	af00      	add	r7, sp, #0
 800ef64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	689b      	ldr	r3, [r3, #8]
 800ef6a:	f023 0201 	bic.w	r2, r3, #1
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ef72:	2300      	movs	r3, #0
}
 800ef74:	4618      	mov	r0, r3
 800ef76:	370c      	adds	r7, #12
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7e:	4770      	bx	lr

0800ef80 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b084      	sub	sp, #16
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
 800ef88:	460b      	mov	r3, r1
 800ef8a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	68db      	ldr	r3, [r3, #12]
 800ef94:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ef9c:	78fb      	ldrb	r3, [r7, #3]
 800ef9e:	2b01      	cmp	r3, #1
 800efa0:	d115      	bne.n	800efce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	68db      	ldr	r3, [r3, #12]
 800efa6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800efae:	2001      	movs	r0, #1
 800efb0:	f7f3 fbde 	bl	8002770 <HAL_Delay>
      ms++;
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	3301      	adds	r3, #1
 800efb8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800efba:	6878      	ldr	r0, [r7, #4]
 800efbc:	f001 fa4b 	bl	8010456 <USB_GetMode>
 800efc0:	4603      	mov	r3, r0
 800efc2:	2b01      	cmp	r3, #1
 800efc4:	d01e      	beq.n	800f004 <USB_SetCurrentMode+0x84>
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	2b31      	cmp	r3, #49	; 0x31
 800efca:	d9f0      	bls.n	800efae <USB_SetCurrentMode+0x2e>
 800efcc:	e01a      	b.n	800f004 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800efce:	78fb      	ldrb	r3, [r7, #3]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d115      	bne.n	800f000 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	68db      	ldr	r3, [r3, #12]
 800efd8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800efe0:	2001      	movs	r0, #1
 800efe2:	f7f3 fbc5 	bl	8002770 <HAL_Delay>
      ms++;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	3301      	adds	r3, #1
 800efea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800efec:	6878      	ldr	r0, [r7, #4]
 800efee:	f001 fa32 	bl	8010456 <USB_GetMode>
 800eff2:	4603      	mov	r3, r0
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d005      	beq.n	800f004 <USB_SetCurrentMode+0x84>
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	2b31      	cmp	r3, #49	; 0x31
 800effc:	d9f0      	bls.n	800efe0 <USB_SetCurrentMode+0x60>
 800effe:	e001      	b.n	800f004 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f000:	2301      	movs	r3, #1
 800f002:	e005      	b.n	800f010 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	2b32      	cmp	r3, #50	; 0x32
 800f008:	d101      	bne.n	800f00e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f00a:	2301      	movs	r3, #1
 800f00c:	e000      	b.n	800f010 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f00e:	2300      	movs	r3, #0
}
 800f010:	4618      	mov	r0, r3
 800f012:	3710      	adds	r7, #16
 800f014:	46bd      	mov	sp, r7
 800f016:	bd80      	pop	{r7, pc}

0800f018 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f018:	b084      	sub	sp, #16
 800f01a:	b580      	push	{r7, lr}
 800f01c:	b086      	sub	sp, #24
 800f01e:	af00      	add	r7, sp, #0
 800f020:	6078      	str	r0, [r7, #4]
 800f022:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f026:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f02a:	2300      	movs	r3, #0
 800f02c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f032:	2300      	movs	r3, #0
 800f034:	613b      	str	r3, [r7, #16]
 800f036:	e009      	b.n	800f04c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f038:	687a      	ldr	r2, [r7, #4]
 800f03a:	693b      	ldr	r3, [r7, #16]
 800f03c:	3340      	adds	r3, #64	; 0x40
 800f03e:	009b      	lsls	r3, r3, #2
 800f040:	4413      	add	r3, r2
 800f042:	2200      	movs	r2, #0
 800f044:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f046:	693b      	ldr	r3, [r7, #16]
 800f048:	3301      	adds	r3, #1
 800f04a:	613b      	str	r3, [r7, #16]
 800f04c:	693b      	ldr	r3, [r7, #16]
 800f04e:	2b0e      	cmp	r3, #14
 800f050:	d9f2      	bls.n	800f038 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f054:	2b00      	cmp	r3, #0
 800f056:	d11c      	bne.n	800f092 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f05e:	685b      	ldr	r3, [r3, #4]
 800f060:	68fa      	ldr	r2, [r7, #12]
 800f062:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f066:	f043 0302 	orr.w	r3, r3, #2
 800f06a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f070:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	601a      	str	r2, [r3, #0]
 800f090:	e005      	b.n	800f09e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f096:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f0a4:	461a      	mov	r2, r3
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0b0:	4619      	mov	r1, r3
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0b8:	461a      	mov	r2, r3
 800f0ba:	680b      	ldr	r3, [r1, #0]
 800f0bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0c0:	2b01      	cmp	r3, #1
 800f0c2:	d10c      	bne.n	800f0de <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d104      	bne.n	800f0d4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f0ca:	2100      	movs	r1, #0
 800f0cc:	6878      	ldr	r0, [r7, #4]
 800f0ce:	f000 f965 	bl	800f39c <USB_SetDevSpeed>
 800f0d2:	e008      	b.n	800f0e6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f0d4:	2101      	movs	r1, #1
 800f0d6:	6878      	ldr	r0, [r7, #4]
 800f0d8:	f000 f960 	bl	800f39c <USB_SetDevSpeed>
 800f0dc:	e003      	b.n	800f0e6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f0de:	2103      	movs	r1, #3
 800f0e0:	6878      	ldr	r0, [r7, #4]
 800f0e2:	f000 f95b 	bl	800f39c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f0e6:	2110      	movs	r1, #16
 800f0e8:	6878      	ldr	r0, [r7, #4]
 800f0ea:	f000 f8f3 	bl	800f2d4 <USB_FlushTxFifo>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d001      	beq.n	800f0f8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800f0f4:	2301      	movs	r3, #1
 800f0f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f0f8:	6878      	ldr	r0, [r7, #4]
 800f0fa:	f000 f91f 	bl	800f33c <USB_FlushRxFifo>
 800f0fe:	4603      	mov	r3, r0
 800f100:	2b00      	cmp	r3, #0
 800f102:	d001      	beq.n	800f108 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800f104:	2301      	movs	r3, #1
 800f106:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f10e:	461a      	mov	r2, r3
 800f110:	2300      	movs	r3, #0
 800f112:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f11a:	461a      	mov	r2, r3
 800f11c:	2300      	movs	r3, #0
 800f11e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f126:	461a      	mov	r2, r3
 800f128:	2300      	movs	r3, #0
 800f12a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f12c:	2300      	movs	r3, #0
 800f12e:	613b      	str	r3, [r7, #16]
 800f130:	e043      	b.n	800f1ba <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f132:	693b      	ldr	r3, [r7, #16]
 800f134:	015a      	lsls	r2, r3, #5
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	4413      	add	r3, r2
 800f13a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f144:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f148:	d118      	bne.n	800f17c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800f14a:	693b      	ldr	r3, [r7, #16]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d10a      	bne.n	800f166 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f150:	693b      	ldr	r3, [r7, #16]
 800f152:	015a      	lsls	r2, r3, #5
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	4413      	add	r3, r2
 800f158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f15c:	461a      	mov	r2, r3
 800f15e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f162:	6013      	str	r3, [r2, #0]
 800f164:	e013      	b.n	800f18e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f166:	693b      	ldr	r3, [r7, #16]
 800f168:	015a      	lsls	r2, r3, #5
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	4413      	add	r3, r2
 800f16e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f172:	461a      	mov	r2, r3
 800f174:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f178:	6013      	str	r3, [r2, #0]
 800f17a:	e008      	b.n	800f18e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f17c:	693b      	ldr	r3, [r7, #16]
 800f17e:	015a      	lsls	r2, r3, #5
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	4413      	add	r3, r2
 800f184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f188:	461a      	mov	r2, r3
 800f18a:	2300      	movs	r3, #0
 800f18c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f18e:	693b      	ldr	r3, [r7, #16]
 800f190:	015a      	lsls	r2, r3, #5
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	4413      	add	r3, r2
 800f196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f19a:	461a      	mov	r2, r3
 800f19c:	2300      	movs	r3, #0
 800f19e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f1a0:	693b      	ldr	r3, [r7, #16]
 800f1a2:	015a      	lsls	r2, r3, #5
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	4413      	add	r3, r2
 800f1a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1ac:	461a      	mov	r2, r3
 800f1ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f1b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f1b4:	693b      	ldr	r3, [r7, #16]
 800f1b6:	3301      	adds	r3, #1
 800f1b8:	613b      	str	r3, [r7, #16]
 800f1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1bc:	693a      	ldr	r2, [r7, #16]
 800f1be:	429a      	cmp	r2, r3
 800f1c0:	d3b7      	bcc.n	800f132 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	613b      	str	r3, [r7, #16]
 800f1c6:	e043      	b.n	800f250 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f1c8:	693b      	ldr	r3, [r7, #16]
 800f1ca:	015a      	lsls	r2, r3, #5
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	4413      	add	r3, r2
 800f1d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f1da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f1de:	d118      	bne.n	800f212 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800f1e0:	693b      	ldr	r3, [r7, #16]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d10a      	bne.n	800f1fc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f1e6:	693b      	ldr	r3, [r7, #16]
 800f1e8:	015a      	lsls	r2, r3, #5
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	4413      	add	r3, r2
 800f1ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1f2:	461a      	mov	r2, r3
 800f1f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f1f8:	6013      	str	r3, [r2, #0]
 800f1fa:	e013      	b.n	800f224 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f1fc:	693b      	ldr	r3, [r7, #16]
 800f1fe:	015a      	lsls	r2, r3, #5
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	4413      	add	r3, r2
 800f204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f208:	461a      	mov	r2, r3
 800f20a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f20e:	6013      	str	r3, [r2, #0]
 800f210:	e008      	b.n	800f224 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f212:	693b      	ldr	r3, [r7, #16]
 800f214:	015a      	lsls	r2, r3, #5
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	4413      	add	r3, r2
 800f21a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f21e:	461a      	mov	r2, r3
 800f220:	2300      	movs	r3, #0
 800f222:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f224:	693b      	ldr	r3, [r7, #16]
 800f226:	015a      	lsls	r2, r3, #5
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	4413      	add	r3, r2
 800f22c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f230:	461a      	mov	r2, r3
 800f232:	2300      	movs	r3, #0
 800f234:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f236:	693b      	ldr	r3, [r7, #16]
 800f238:	015a      	lsls	r2, r3, #5
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	4413      	add	r3, r2
 800f23e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f242:	461a      	mov	r2, r3
 800f244:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f248:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f24a:	693b      	ldr	r3, [r7, #16]
 800f24c:	3301      	adds	r3, #1
 800f24e:	613b      	str	r3, [r7, #16]
 800f250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f252:	693a      	ldr	r2, [r7, #16]
 800f254:	429a      	cmp	r2, r3
 800f256:	d3b7      	bcc.n	800f1c8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f25e:	691b      	ldr	r3, [r3, #16]
 800f260:	68fa      	ldr	r2, [r7, #12]
 800f262:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f266:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f26a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2200      	movs	r2, #0
 800f270:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f278:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d105      	bne.n	800f28c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	699b      	ldr	r3, [r3, #24]
 800f284:	f043 0210 	orr.w	r2, r3, #16
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	699a      	ldr	r2, [r3, #24]
 800f290:	4b0e      	ldr	r3, [pc, #56]	; (800f2cc <USB_DevInit+0x2b4>)
 800f292:	4313      	orrs	r3, r2
 800f294:	687a      	ldr	r2, [r7, #4]
 800f296:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d005      	beq.n	800f2aa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	699b      	ldr	r3, [r3, #24]
 800f2a2:	f043 0208 	orr.w	r2, r3, #8
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f2aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f2ac:	2b01      	cmp	r3, #1
 800f2ae:	d105      	bne.n	800f2bc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	699a      	ldr	r2, [r3, #24]
 800f2b4:	4b06      	ldr	r3, [pc, #24]	; (800f2d0 <USB_DevInit+0x2b8>)
 800f2b6:	4313      	orrs	r3, r2
 800f2b8:	687a      	ldr	r2, [r7, #4]
 800f2ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f2bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2be:	4618      	mov	r0, r3
 800f2c0:	3718      	adds	r7, #24
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f2c8:	b004      	add	sp, #16
 800f2ca:	4770      	bx	lr
 800f2cc:	803c3800 	.word	0x803c3800
 800f2d0:	40000004 	.word	0x40000004

0800f2d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f2d4:	b480      	push	{r7}
 800f2d6:	b085      	sub	sp, #20
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
 800f2dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	3301      	adds	r3, #1
 800f2e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	4a13      	ldr	r2, [pc, #76]	; (800f338 <USB_FlushTxFifo+0x64>)
 800f2ec:	4293      	cmp	r3, r2
 800f2ee:	d901      	bls.n	800f2f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f2f0:	2303      	movs	r3, #3
 800f2f2:	e01b      	b.n	800f32c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	691b      	ldr	r3, [r3, #16]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	daf2      	bge.n	800f2e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	019b      	lsls	r3, r3, #6
 800f304:	f043 0220 	orr.w	r2, r3, #32
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	3301      	adds	r3, #1
 800f310:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	4a08      	ldr	r2, [pc, #32]	; (800f338 <USB_FlushTxFifo+0x64>)
 800f316:	4293      	cmp	r3, r2
 800f318:	d901      	bls.n	800f31e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800f31a:	2303      	movs	r3, #3
 800f31c:	e006      	b.n	800f32c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	691b      	ldr	r3, [r3, #16]
 800f322:	f003 0320 	and.w	r3, r3, #32
 800f326:	2b20      	cmp	r3, #32
 800f328:	d0f0      	beq.n	800f30c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800f32a:	2300      	movs	r3, #0
}
 800f32c:	4618      	mov	r0, r3
 800f32e:	3714      	adds	r7, #20
 800f330:	46bd      	mov	sp, r7
 800f332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f336:	4770      	bx	lr
 800f338:	00030d40 	.word	0x00030d40

0800f33c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f33c:	b480      	push	{r7}
 800f33e:	b085      	sub	sp, #20
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f344:	2300      	movs	r3, #0
 800f346:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	3301      	adds	r3, #1
 800f34c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	4a11      	ldr	r2, [pc, #68]	; (800f398 <USB_FlushRxFifo+0x5c>)
 800f352:	4293      	cmp	r3, r2
 800f354:	d901      	bls.n	800f35a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800f356:	2303      	movs	r3, #3
 800f358:	e018      	b.n	800f38c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	691b      	ldr	r3, [r3, #16]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	daf2      	bge.n	800f348 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800f362:	2300      	movs	r3, #0
 800f364:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	2210      	movs	r2, #16
 800f36a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	3301      	adds	r3, #1
 800f370:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	4a08      	ldr	r2, [pc, #32]	; (800f398 <USB_FlushRxFifo+0x5c>)
 800f376:	4293      	cmp	r3, r2
 800f378:	d901      	bls.n	800f37e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800f37a:	2303      	movs	r3, #3
 800f37c:	e006      	b.n	800f38c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	691b      	ldr	r3, [r3, #16]
 800f382:	f003 0310 	and.w	r3, r3, #16
 800f386:	2b10      	cmp	r3, #16
 800f388:	d0f0      	beq.n	800f36c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800f38a:	2300      	movs	r3, #0
}
 800f38c:	4618      	mov	r0, r3
 800f38e:	3714      	adds	r7, #20
 800f390:	46bd      	mov	sp, r7
 800f392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f396:	4770      	bx	lr
 800f398:	00030d40 	.word	0x00030d40

0800f39c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f39c:	b480      	push	{r7}
 800f39e:	b085      	sub	sp, #20
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
 800f3a4:	460b      	mov	r3, r1
 800f3a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3b2:	681a      	ldr	r2, [r3, #0]
 800f3b4:	78fb      	ldrb	r3, [r7, #3]
 800f3b6:	68f9      	ldr	r1, [r7, #12]
 800f3b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f3bc:	4313      	orrs	r3, r2
 800f3be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f3c0:	2300      	movs	r3, #0
}
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	3714      	adds	r7, #20
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3cc:	4770      	bx	lr

0800f3ce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800f3ce:	b480      	push	{r7}
 800f3d0:	b087      	sub	sp, #28
 800f3d2:	af00      	add	r7, sp, #0
 800f3d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f3da:	693b      	ldr	r3, [r7, #16]
 800f3dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3e0:	689b      	ldr	r3, [r3, #8]
 800f3e2:	f003 0306 	and.w	r3, r3, #6
 800f3e6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d102      	bne.n	800f3f4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	75fb      	strb	r3, [r7, #23]
 800f3f2:	e00a      	b.n	800f40a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	2b02      	cmp	r3, #2
 800f3f8:	d002      	beq.n	800f400 <USB_GetDevSpeed+0x32>
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	2b06      	cmp	r3, #6
 800f3fe:	d102      	bne.n	800f406 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800f400:	2302      	movs	r3, #2
 800f402:	75fb      	strb	r3, [r7, #23]
 800f404:	e001      	b.n	800f40a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800f406:	230f      	movs	r3, #15
 800f408:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800f40a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f40c:	4618      	mov	r0, r3
 800f40e:	371c      	adds	r7, #28
 800f410:	46bd      	mov	sp, r7
 800f412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f416:	4770      	bx	lr

0800f418 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f418:	b480      	push	{r7}
 800f41a:	b085      	sub	sp, #20
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
 800f420:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f426:	683b      	ldr	r3, [r7, #0]
 800f428:	781b      	ldrb	r3, [r3, #0]
 800f42a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f42c:	683b      	ldr	r3, [r7, #0]
 800f42e:	785b      	ldrb	r3, [r3, #1]
 800f430:	2b01      	cmp	r3, #1
 800f432:	d139      	bne.n	800f4a8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f43a:	69da      	ldr	r2, [r3, #28]
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	781b      	ldrb	r3, [r3, #0]
 800f440:	f003 030f 	and.w	r3, r3, #15
 800f444:	2101      	movs	r1, #1
 800f446:	fa01 f303 	lsl.w	r3, r1, r3
 800f44a:	b29b      	uxth	r3, r3
 800f44c:	68f9      	ldr	r1, [r7, #12]
 800f44e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f452:	4313      	orrs	r3, r2
 800f454:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f456:	68bb      	ldr	r3, [r7, #8]
 800f458:	015a      	lsls	r2, r3, #5
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	4413      	add	r3, r2
 800f45e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d153      	bne.n	800f514 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f46c:	68bb      	ldr	r3, [r7, #8]
 800f46e:	015a      	lsls	r2, r3, #5
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	4413      	add	r3, r2
 800f474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f478:	681a      	ldr	r2, [r3, #0]
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	68db      	ldr	r3, [r3, #12]
 800f47e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	791b      	ldrb	r3, [r3, #4]
 800f486:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f488:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f48a:	68bb      	ldr	r3, [r7, #8]
 800f48c:	059b      	lsls	r3, r3, #22
 800f48e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f490:	431a      	orrs	r2, r3
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	0159      	lsls	r1, r3, #5
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	440b      	add	r3, r1
 800f49a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f49e:	4619      	mov	r1, r3
 800f4a0:	4b20      	ldr	r3, [pc, #128]	; (800f524 <USB_ActivateEndpoint+0x10c>)
 800f4a2:	4313      	orrs	r3, r2
 800f4a4:	600b      	str	r3, [r1, #0]
 800f4a6:	e035      	b.n	800f514 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4ae:	69da      	ldr	r2, [r3, #28]
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	781b      	ldrb	r3, [r3, #0]
 800f4b4:	f003 030f 	and.w	r3, r3, #15
 800f4b8:	2101      	movs	r1, #1
 800f4ba:	fa01 f303 	lsl.w	r3, r1, r3
 800f4be:	041b      	lsls	r3, r3, #16
 800f4c0:	68f9      	ldr	r1, [r7, #12]
 800f4c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f4c6:	4313      	orrs	r3, r2
 800f4c8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	015a      	lsls	r2, r3, #5
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	4413      	add	r3, r2
 800f4d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d119      	bne.n	800f514 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f4e0:	68bb      	ldr	r3, [r7, #8]
 800f4e2:	015a      	lsls	r2, r3, #5
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	4413      	add	r3, r2
 800f4e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4ec:	681a      	ldr	r2, [r3, #0]
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	68db      	ldr	r3, [r3, #12]
 800f4f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	791b      	ldrb	r3, [r3, #4]
 800f4fa:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f4fc:	430b      	orrs	r3, r1
 800f4fe:	431a      	orrs	r2, r3
 800f500:	68bb      	ldr	r3, [r7, #8]
 800f502:	0159      	lsls	r1, r3, #5
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	440b      	add	r3, r1
 800f508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f50c:	4619      	mov	r1, r3
 800f50e:	4b05      	ldr	r3, [pc, #20]	; (800f524 <USB_ActivateEndpoint+0x10c>)
 800f510:	4313      	orrs	r3, r2
 800f512:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f514:	2300      	movs	r3, #0
}
 800f516:	4618      	mov	r0, r3
 800f518:	3714      	adds	r7, #20
 800f51a:	46bd      	mov	sp, r7
 800f51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f520:	4770      	bx	lr
 800f522:	bf00      	nop
 800f524:	10008000 	.word	0x10008000

0800f528 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f528:	b480      	push	{r7}
 800f52a:	b085      	sub	sp, #20
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
 800f530:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	781b      	ldrb	r3, [r3, #0]
 800f53a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	785b      	ldrb	r3, [r3, #1]
 800f540:	2b01      	cmp	r3, #1
 800f542:	d161      	bne.n	800f608 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f544:	68bb      	ldr	r3, [r7, #8]
 800f546:	015a      	lsls	r2, r3, #5
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	4413      	add	r3, r2
 800f54c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f556:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f55a:	d11f      	bne.n	800f59c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f55c:	68bb      	ldr	r3, [r7, #8]
 800f55e:	015a      	lsls	r2, r3, #5
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	4413      	add	r3, r2
 800f564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	68ba      	ldr	r2, [r7, #8]
 800f56c:	0151      	lsls	r1, r2, #5
 800f56e:	68fa      	ldr	r2, [r7, #12]
 800f570:	440a      	add	r2, r1
 800f572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f576:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f57a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f57c:	68bb      	ldr	r3, [r7, #8]
 800f57e:	015a      	lsls	r2, r3, #5
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	4413      	add	r3, r2
 800f584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	68ba      	ldr	r2, [r7, #8]
 800f58c:	0151      	lsls	r1, r2, #5
 800f58e:	68fa      	ldr	r2, [r7, #12]
 800f590:	440a      	add	r2, r1
 800f592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f596:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f59a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	781b      	ldrb	r3, [r3, #0]
 800f5a8:	f003 030f 	and.w	r3, r3, #15
 800f5ac:	2101      	movs	r1, #1
 800f5ae:	fa01 f303 	lsl.w	r3, r1, r3
 800f5b2:	b29b      	uxth	r3, r3
 800f5b4:	43db      	mvns	r3, r3
 800f5b6:	68f9      	ldr	r1, [r7, #12]
 800f5b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f5bc:	4013      	ands	r3, r2
 800f5be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5c6:	69da      	ldr	r2, [r3, #28]
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	781b      	ldrb	r3, [r3, #0]
 800f5cc:	f003 030f 	and.w	r3, r3, #15
 800f5d0:	2101      	movs	r1, #1
 800f5d2:	fa01 f303 	lsl.w	r3, r1, r3
 800f5d6:	b29b      	uxth	r3, r3
 800f5d8:	43db      	mvns	r3, r3
 800f5da:	68f9      	ldr	r1, [r7, #12]
 800f5dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f5e0:	4013      	ands	r3, r2
 800f5e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f5e4:	68bb      	ldr	r3, [r7, #8]
 800f5e6:	015a      	lsls	r2, r3, #5
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	4413      	add	r3, r2
 800f5ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5f0:	681a      	ldr	r2, [r3, #0]
 800f5f2:	68bb      	ldr	r3, [r7, #8]
 800f5f4:	0159      	lsls	r1, r3, #5
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	440b      	add	r3, r1
 800f5fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5fe:	4619      	mov	r1, r3
 800f600:	4b35      	ldr	r3, [pc, #212]	; (800f6d8 <USB_DeactivateEndpoint+0x1b0>)
 800f602:	4013      	ands	r3, r2
 800f604:	600b      	str	r3, [r1, #0]
 800f606:	e060      	b.n	800f6ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f608:	68bb      	ldr	r3, [r7, #8]
 800f60a:	015a      	lsls	r2, r3, #5
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	4413      	add	r3, r2
 800f610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f61a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f61e:	d11f      	bne.n	800f660 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f620:	68bb      	ldr	r3, [r7, #8]
 800f622:	015a      	lsls	r2, r3, #5
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	4413      	add	r3, r2
 800f628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	68ba      	ldr	r2, [r7, #8]
 800f630:	0151      	lsls	r1, r2, #5
 800f632:	68fa      	ldr	r2, [r7, #12]
 800f634:	440a      	add	r2, r1
 800f636:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f63a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f63e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f640:	68bb      	ldr	r3, [r7, #8]
 800f642:	015a      	lsls	r2, r3, #5
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	4413      	add	r3, r2
 800f648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	68ba      	ldr	r2, [r7, #8]
 800f650:	0151      	lsls	r1, r2, #5
 800f652:	68fa      	ldr	r2, [r7, #12]
 800f654:	440a      	add	r2, r1
 800f656:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f65a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f65e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f666:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	781b      	ldrb	r3, [r3, #0]
 800f66c:	f003 030f 	and.w	r3, r3, #15
 800f670:	2101      	movs	r1, #1
 800f672:	fa01 f303 	lsl.w	r3, r1, r3
 800f676:	041b      	lsls	r3, r3, #16
 800f678:	43db      	mvns	r3, r3
 800f67a:	68f9      	ldr	r1, [r7, #12]
 800f67c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f680:	4013      	ands	r3, r2
 800f682:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f68a:	69da      	ldr	r2, [r3, #28]
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	781b      	ldrb	r3, [r3, #0]
 800f690:	f003 030f 	and.w	r3, r3, #15
 800f694:	2101      	movs	r1, #1
 800f696:	fa01 f303 	lsl.w	r3, r1, r3
 800f69a:	041b      	lsls	r3, r3, #16
 800f69c:	43db      	mvns	r3, r3
 800f69e:	68f9      	ldr	r1, [r7, #12]
 800f6a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f6a4:	4013      	ands	r3, r2
 800f6a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f6a8:	68bb      	ldr	r3, [r7, #8]
 800f6aa:	015a      	lsls	r2, r3, #5
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	4413      	add	r3, r2
 800f6b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6b4:	681a      	ldr	r2, [r3, #0]
 800f6b6:	68bb      	ldr	r3, [r7, #8]
 800f6b8:	0159      	lsls	r1, r3, #5
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	440b      	add	r3, r1
 800f6be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6c2:	4619      	mov	r1, r3
 800f6c4:	4b05      	ldr	r3, [pc, #20]	; (800f6dc <USB_DeactivateEndpoint+0x1b4>)
 800f6c6:	4013      	ands	r3, r2
 800f6c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f6ca:	2300      	movs	r3, #0
}
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	3714      	adds	r7, #20
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d6:	4770      	bx	lr
 800f6d8:	ec337800 	.word	0xec337800
 800f6dc:	eff37800 	.word	0xeff37800

0800f6e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b08a      	sub	sp, #40	; 0x28
 800f6e4:	af02      	add	r7, sp, #8
 800f6e6:	60f8      	str	r0, [r7, #12]
 800f6e8:	60b9      	str	r1, [r7, #8]
 800f6ea:	4613      	mov	r3, r2
 800f6ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f6f2:	68bb      	ldr	r3, [r7, #8]
 800f6f4:	781b      	ldrb	r3, [r3, #0]
 800f6f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f6f8:	68bb      	ldr	r3, [r7, #8]
 800f6fa:	785b      	ldrb	r3, [r3, #1]
 800f6fc:	2b01      	cmp	r3, #1
 800f6fe:	f040 8163 	bne.w	800f9c8 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f702:	68bb      	ldr	r3, [r7, #8]
 800f704:	699b      	ldr	r3, [r3, #24]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d132      	bne.n	800f770 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f70a:	69bb      	ldr	r3, [r7, #24]
 800f70c:	015a      	lsls	r2, r3, #5
 800f70e:	69fb      	ldr	r3, [r7, #28]
 800f710:	4413      	add	r3, r2
 800f712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f716:	691a      	ldr	r2, [r3, #16]
 800f718:	69bb      	ldr	r3, [r7, #24]
 800f71a:	0159      	lsls	r1, r3, #5
 800f71c:	69fb      	ldr	r3, [r7, #28]
 800f71e:	440b      	add	r3, r1
 800f720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f724:	4619      	mov	r1, r3
 800f726:	4ba5      	ldr	r3, [pc, #660]	; (800f9bc <USB_EPStartXfer+0x2dc>)
 800f728:	4013      	ands	r3, r2
 800f72a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f72c:	69bb      	ldr	r3, [r7, #24]
 800f72e:	015a      	lsls	r2, r3, #5
 800f730:	69fb      	ldr	r3, [r7, #28]
 800f732:	4413      	add	r3, r2
 800f734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f738:	691b      	ldr	r3, [r3, #16]
 800f73a:	69ba      	ldr	r2, [r7, #24]
 800f73c:	0151      	lsls	r1, r2, #5
 800f73e:	69fa      	ldr	r2, [r7, #28]
 800f740:	440a      	add	r2, r1
 800f742:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f746:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f74a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f74c:	69bb      	ldr	r3, [r7, #24]
 800f74e:	015a      	lsls	r2, r3, #5
 800f750:	69fb      	ldr	r3, [r7, #28]
 800f752:	4413      	add	r3, r2
 800f754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f758:	691a      	ldr	r2, [r3, #16]
 800f75a:	69bb      	ldr	r3, [r7, #24]
 800f75c:	0159      	lsls	r1, r3, #5
 800f75e:	69fb      	ldr	r3, [r7, #28]
 800f760:	440b      	add	r3, r1
 800f762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f766:	4619      	mov	r1, r3
 800f768:	4b95      	ldr	r3, [pc, #596]	; (800f9c0 <USB_EPStartXfer+0x2e0>)
 800f76a:	4013      	ands	r3, r2
 800f76c:	610b      	str	r3, [r1, #16]
 800f76e:	e074      	b.n	800f85a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f770:	69bb      	ldr	r3, [r7, #24]
 800f772:	015a      	lsls	r2, r3, #5
 800f774:	69fb      	ldr	r3, [r7, #28]
 800f776:	4413      	add	r3, r2
 800f778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f77c:	691a      	ldr	r2, [r3, #16]
 800f77e:	69bb      	ldr	r3, [r7, #24]
 800f780:	0159      	lsls	r1, r3, #5
 800f782:	69fb      	ldr	r3, [r7, #28]
 800f784:	440b      	add	r3, r1
 800f786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f78a:	4619      	mov	r1, r3
 800f78c:	4b8c      	ldr	r3, [pc, #560]	; (800f9c0 <USB_EPStartXfer+0x2e0>)
 800f78e:	4013      	ands	r3, r2
 800f790:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f792:	69bb      	ldr	r3, [r7, #24]
 800f794:	015a      	lsls	r2, r3, #5
 800f796:	69fb      	ldr	r3, [r7, #28]
 800f798:	4413      	add	r3, r2
 800f79a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f79e:	691a      	ldr	r2, [r3, #16]
 800f7a0:	69bb      	ldr	r3, [r7, #24]
 800f7a2:	0159      	lsls	r1, r3, #5
 800f7a4:	69fb      	ldr	r3, [r7, #28]
 800f7a6:	440b      	add	r3, r1
 800f7a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7ac:	4619      	mov	r1, r3
 800f7ae:	4b83      	ldr	r3, [pc, #524]	; (800f9bc <USB_EPStartXfer+0x2dc>)
 800f7b0:	4013      	ands	r3, r2
 800f7b2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f7b4:	69bb      	ldr	r3, [r7, #24]
 800f7b6:	015a      	lsls	r2, r3, #5
 800f7b8:	69fb      	ldr	r3, [r7, #28]
 800f7ba:	4413      	add	r3, r2
 800f7bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7c0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f7c2:	68bb      	ldr	r3, [r7, #8]
 800f7c4:	6999      	ldr	r1, [r3, #24]
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	68db      	ldr	r3, [r3, #12]
 800f7ca:	440b      	add	r3, r1
 800f7cc:	1e59      	subs	r1, r3, #1
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	68db      	ldr	r3, [r3, #12]
 800f7d2:	fbb1 f3f3 	udiv	r3, r1, r3
 800f7d6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f7d8:	4b7a      	ldr	r3, [pc, #488]	; (800f9c4 <USB_EPStartXfer+0x2e4>)
 800f7da:	400b      	ands	r3, r1
 800f7dc:	69b9      	ldr	r1, [r7, #24]
 800f7de:	0148      	lsls	r0, r1, #5
 800f7e0:	69f9      	ldr	r1, [r7, #28]
 800f7e2:	4401      	add	r1, r0
 800f7e4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f7e8:	4313      	orrs	r3, r2
 800f7ea:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f7ec:	69bb      	ldr	r3, [r7, #24]
 800f7ee:	015a      	lsls	r2, r3, #5
 800f7f0:	69fb      	ldr	r3, [r7, #28]
 800f7f2:	4413      	add	r3, r2
 800f7f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7f8:	691a      	ldr	r2, [r3, #16]
 800f7fa:	68bb      	ldr	r3, [r7, #8]
 800f7fc:	699b      	ldr	r3, [r3, #24]
 800f7fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f802:	69b9      	ldr	r1, [r7, #24]
 800f804:	0148      	lsls	r0, r1, #5
 800f806:	69f9      	ldr	r1, [r7, #28]
 800f808:	4401      	add	r1, r0
 800f80a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f80e:	4313      	orrs	r3, r2
 800f810:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f812:	68bb      	ldr	r3, [r7, #8]
 800f814:	791b      	ldrb	r3, [r3, #4]
 800f816:	2b01      	cmp	r3, #1
 800f818:	d11f      	bne.n	800f85a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f81a:	69bb      	ldr	r3, [r7, #24]
 800f81c:	015a      	lsls	r2, r3, #5
 800f81e:	69fb      	ldr	r3, [r7, #28]
 800f820:	4413      	add	r3, r2
 800f822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f826:	691b      	ldr	r3, [r3, #16]
 800f828:	69ba      	ldr	r2, [r7, #24]
 800f82a:	0151      	lsls	r1, r2, #5
 800f82c:	69fa      	ldr	r2, [r7, #28]
 800f82e:	440a      	add	r2, r1
 800f830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f834:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f838:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f83a:	69bb      	ldr	r3, [r7, #24]
 800f83c:	015a      	lsls	r2, r3, #5
 800f83e:	69fb      	ldr	r3, [r7, #28]
 800f840:	4413      	add	r3, r2
 800f842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f846:	691b      	ldr	r3, [r3, #16]
 800f848:	69ba      	ldr	r2, [r7, #24]
 800f84a:	0151      	lsls	r1, r2, #5
 800f84c:	69fa      	ldr	r2, [r7, #28]
 800f84e:	440a      	add	r2, r1
 800f850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f854:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f858:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800f85a:	79fb      	ldrb	r3, [r7, #7]
 800f85c:	2b01      	cmp	r3, #1
 800f85e:	d14b      	bne.n	800f8f8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f860:	68bb      	ldr	r3, [r7, #8]
 800f862:	695b      	ldr	r3, [r3, #20]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d009      	beq.n	800f87c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f868:	69bb      	ldr	r3, [r7, #24]
 800f86a:	015a      	lsls	r2, r3, #5
 800f86c:	69fb      	ldr	r3, [r7, #28]
 800f86e:	4413      	add	r3, r2
 800f870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f874:	461a      	mov	r2, r3
 800f876:	68bb      	ldr	r3, [r7, #8]
 800f878:	695b      	ldr	r3, [r3, #20]
 800f87a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f87c:	68bb      	ldr	r3, [r7, #8]
 800f87e:	791b      	ldrb	r3, [r3, #4]
 800f880:	2b01      	cmp	r3, #1
 800f882:	d128      	bne.n	800f8d6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f884:	69fb      	ldr	r3, [r7, #28]
 800f886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f88a:	689b      	ldr	r3, [r3, #8]
 800f88c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f890:	2b00      	cmp	r3, #0
 800f892:	d110      	bne.n	800f8b6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f894:	69bb      	ldr	r3, [r7, #24]
 800f896:	015a      	lsls	r2, r3, #5
 800f898:	69fb      	ldr	r3, [r7, #28]
 800f89a:	4413      	add	r3, r2
 800f89c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	69ba      	ldr	r2, [r7, #24]
 800f8a4:	0151      	lsls	r1, r2, #5
 800f8a6:	69fa      	ldr	r2, [r7, #28]
 800f8a8:	440a      	add	r2, r1
 800f8aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f8ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f8b2:	6013      	str	r3, [r2, #0]
 800f8b4:	e00f      	b.n	800f8d6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f8b6:	69bb      	ldr	r3, [r7, #24]
 800f8b8:	015a      	lsls	r2, r3, #5
 800f8ba:	69fb      	ldr	r3, [r7, #28]
 800f8bc:	4413      	add	r3, r2
 800f8be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	69ba      	ldr	r2, [r7, #24]
 800f8c6:	0151      	lsls	r1, r2, #5
 800f8c8:	69fa      	ldr	r2, [r7, #28]
 800f8ca:	440a      	add	r2, r1
 800f8cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f8d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f8d4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f8d6:	69bb      	ldr	r3, [r7, #24]
 800f8d8:	015a      	lsls	r2, r3, #5
 800f8da:	69fb      	ldr	r3, [r7, #28]
 800f8dc:	4413      	add	r3, r2
 800f8de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	69ba      	ldr	r2, [r7, #24]
 800f8e6:	0151      	lsls	r1, r2, #5
 800f8e8:	69fa      	ldr	r2, [r7, #28]
 800f8ea:	440a      	add	r2, r1
 800f8ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f8f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f8f4:	6013      	str	r3, [r2, #0]
 800f8f6:	e137      	b.n	800fb68 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f8f8:	69bb      	ldr	r3, [r7, #24]
 800f8fa:	015a      	lsls	r2, r3, #5
 800f8fc:	69fb      	ldr	r3, [r7, #28]
 800f8fe:	4413      	add	r3, r2
 800f900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	69ba      	ldr	r2, [r7, #24]
 800f908:	0151      	lsls	r1, r2, #5
 800f90a:	69fa      	ldr	r2, [r7, #28]
 800f90c:	440a      	add	r2, r1
 800f90e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f912:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f916:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f918:	68bb      	ldr	r3, [r7, #8]
 800f91a:	791b      	ldrb	r3, [r3, #4]
 800f91c:	2b01      	cmp	r3, #1
 800f91e:	d015      	beq.n	800f94c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	699b      	ldr	r3, [r3, #24]
 800f924:	2b00      	cmp	r3, #0
 800f926:	f000 811f 	beq.w	800fb68 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f92a:	69fb      	ldr	r3, [r7, #28]
 800f92c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f932:	68bb      	ldr	r3, [r7, #8]
 800f934:	781b      	ldrb	r3, [r3, #0]
 800f936:	f003 030f 	and.w	r3, r3, #15
 800f93a:	2101      	movs	r1, #1
 800f93c:	fa01 f303 	lsl.w	r3, r1, r3
 800f940:	69f9      	ldr	r1, [r7, #28]
 800f942:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f946:	4313      	orrs	r3, r2
 800f948:	634b      	str	r3, [r1, #52]	; 0x34
 800f94a:	e10d      	b.n	800fb68 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f94c:	69fb      	ldr	r3, [r7, #28]
 800f94e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f952:	689b      	ldr	r3, [r3, #8]
 800f954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d110      	bne.n	800f97e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f95c:	69bb      	ldr	r3, [r7, #24]
 800f95e:	015a      	lsls	r2, r3, #5
 800f960:	69fb      	ldr	r3, [r7, #28]
 800f962:	4413      	add	r3, r2
 800f964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	69ba      	ldr	r2, [r7, #24]
 800f96c:	0151      	lsls	r1, r2, #5
 800f96e:	69fa      	ldr	r2, [r7, #28]
 800f970:	440a      	add	r2, r1
 800f972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f976:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f97a:	6013      	str	r3, [r2, #0]
 800f97c:	e00f      	b.n	800f99e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f97e:	69bb      	ldr	r3, [r7, #24]
 800f980:	015a      	lsls	r2, r3, #5
 800f982:	69fb      	ldr	r3, [r7, #28]
 800f984:	4413      	add	r3, r2
 800f986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	69ba      	ldr	r2, [r7, #24]
 800f98e:	0151      	lsls	r1, r2, #5
 800f990:	69fa      	ldr	r2, [r7, #28]
 800f992:	440a      	add	r2, r1
 800f994:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f99c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f99e:	68bb      	ldr	r3, [r7, #8]
 800f9a0:	6919      	ldr	r1, [r3, #16]
 800f9a2:	68bb      	ldr	r3, [r7, #8]
 800f9a4:	781a      	ldrb	r2, [r3, #0]
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	699b      	ldr	r3, [r3, #24]
 800f9aa:	b298      	uxth	r0, r3
 800f9ac:	79fb      	ldrb	r3, [r7, #7]
 800f9ae:	9300      	str	r3, [sp, #0]
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	68f8      	ldr	r0, [r7, #12]
 800f9b4:	f000 faea 	bl	800ff8c <USB_WritePacket>
 800f9b8:	e0d6      	b.n	800fb68 <USB_EPStartXfer+0x488>
 800f9ba:	bf00      	nop
 800f9bc:	e007ffff 	.word	0xe007ffff
 800f9c0:	fff80000 	.word	0xfff80000
 800f9c4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f9c8:	69bb      	ldr	r3, [r7, #24]
 800f9ca:	015a      	lsls	r2, r3, #5
 800f9cc:	69fb      	ldr	r3, [r7, #28]
 800f9ce:	4413      	add	r3, r2
 800f9d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9d4:	691a      	ldr	r2, [r3, #16]
 800f9d6:	69bb      	ldr	r3, [r7, #24]
 800f9d8:	0159      	lsls	r1, r3, #5
 800f9da:	69fb      	ldr	r3, [r7, #28]
 800f9dc:	440b      	add	r3, r1
 800f9de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9e2:	4619      	mov	r1, r3
 800f9e4:	4b63      	ldr	r3, [pc, #396]	; (800fb74 <USB_EPStartXfer+0x494>)
 800f9e6:	4013      	ands	r3, r2
 800f9e8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f9ea:	69bb      	ldr	r3, [r7, #24]
 800f9ec:	015a      	lsls	r2, r3, #5
 800f9ee:	69fb      	ldr	r3, [r7, #28]
 800f9f0:	4413      	add	r3, r2
 800f9f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9f6:	691a      	ldr	r2, [r3, #16]
 800f9f8:	69bb      	ldr	r3, [r7, #24]
 800f9fa:	0159      	lsls	r1, r3, #5
 800f9fc:	69fb      	ldr	r3, [r7, #28]
 800f9fe:	440b      	add	r3, r1
 800fa00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa04:	4619      	mov	r1, r3
 800fa06:	4b5c      	ldr	r3, [pc, #368]	; (800fb78 <USB_EPStartXfer+0x498>)
 800fa08:	4013      	ands	r3, r2
 800fa0a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	699b      	ldr	r3, [r3, #24]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d123      	bne.n	800fa5c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800fa14:	69bb      	ldr	r3, [r7, #24]
 800fa16:	015a      	lsls	r2, r3, #5
 800fa18:	69fb      	ldr	r3, [r7, #28]
 800fa1a:	4413      	add	r3, r2
 800fa1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa20:	691a      	ldr	r2, [r3, #16]
 800fa22:	68bb      	ldr	r3, [r7, #8]
 800fa24:	68db      	ldr	r3, [r3, #12]
 800fa26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fa2a:	69b9      	ldr	r1, [r7, #24]
 800fa2c:	0148      	lsls	r0, r1, #5
 800fa2e:	69f9      	ldr	r1, [r7, #28]
 800fa30:	4401      	add	r1, r0
 800fa32:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fa36:	4313      	orrs	r3, r2
 800fa38:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fa3a:	69bb      	ldr	r3, [r7, #24]
 800fa3c:	015a      	lsls	r2, r3, #5
 800fa3e:	69fb      	ldr	r3, [r7, #28]
 800fa40:	4413      	add	r3, r2
 800fa42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa46:	691b      	ldr	r3, [r3, #16]
 800fa48:	69ba      	ldr	r2, [r7, #24]
 800fa4a:	0151      	lsls	r1, r2, #5
 800fa4c:	69fa      	ldr	r2, [r7, #28]
 800fa4e:	440a      	add	r2, r1
 800fa50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fa54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fa58:	6113      	str	r3, [r2, #16]
 800fa5a:	e037      	b.n	800facc <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	699a      	ldr	r2, [r3, #24]
 800fa60:	68bb      	ldr	r3, [r7, #8]
 800fa62:	68db      	ldr	r3, [r3, #12]
 800fa64:	4413      	add	r3, r2
 800fa66:	1e5a      	subs	r2, r3, #1
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	68db      	ldr	r3, [r3, #12]
 800fa6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa70:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800fa72:	68bb      	ldr	r3, [r7, #8]
 800fa74:	68db      	ldr	r3, [r3, #12]
 800fa76:	8afa      	ldrh	r2, [r7, #22]
 800fa78:	fb03 f202 	mul.w	r2, r3, r2
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800fa80:	69bb      	ldr	r3, [r7, #24]
 800fa82:	015a      	lsls	r2, r3, #5
 800fa84:	69fb      	ldr	r3, [r7, #28]
 800fa86:	4413      	add	r3, r2
 800fa88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa8c:	691a      	ldr	r2, [r3, #16]
 800fa8e:	8afb      	ldrh	r3, [r7, #22]
 800fa90:	04d9      	lsls	r1, r3, #19
 800fa92:	4b3a      	ldr	r3, [pc, #232]	; (800fb7c <USB_EPStartXfer+0x49c>)
 800fa94:	400b      	ands	r3, r1
 800fa96:	69b9      	ldr	r1, [r7, #24]
 800fa98:	0148      	lsls	r0, r1, #5
 800fa9a:	69f9      	ldr	r1, [r7, #28]
 800fa9c:	4401      	add	r1, r0
 800fa9e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800faa2:	4313      	orrs	r3, r2
 800faa4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800faa6:	69bb      	ldr	r3, [r7, #24]
 800faa8:	015a      	lsls	r2, r3, #5
 800faaa:	69fb      	ldr	r3, [r7, #28]
 800faac:	4413      	add	r3, r2
 800faae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fab2:	691a      	ldr	r2, [r3, #16]
 800fab4:	68bb      	ldr	r3, [r7, #8]
 800fab6:	69db      	ldr	r3, [r3, #28]
 800fab8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fabc:	69b9      	ldr	r1, [r7, #24]
 800fabe:	0148      	lsls	r0, r1, #5
 800fac0:	69f9      	ldr	r1, [r7, #28]
 800fac2:	4401      	add	r1, r0
 800fac4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fac8:	4313      	orrs	r3, r2
 800faca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800facc:	79fb      	ldrb	r3, [r7, #7]
 800face:	2b01      	cmp	r3, #1
 800fad0:	d10d      	bne.n	800faee <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800fad2:	68bb      	ldr	r3, [r7, #8]
 800fad4:	691b      	ldr	r3, [r3, #16]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d009      	beq.n	800faee <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800fada:	68bb      	ldr	r3, [r7, #8]
 800fadc:	6919      	ldr	r1, [r3, #16]
 800fade:	69bb      	ldr	r3, [r7, #24]
 800fae0:	015a      	lsls	r2, r3, #5
 800fae2:	69fb      	ldr	r3, [r7, #28]
 800fae4:	4413      	add	r3, r2
 800fae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800faea:	460a      	mov	r2, r1
 800faec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800faee:	68bb      	ldr	r3, [r7, #8]
 800faf0:	791b      	ldrb	r3, [r3, #4]
 800faf2:	2b01      	cmp	r3, #1
 800faf4:	d128      	bne.n	800fb48 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800faf6:	69fb      	ldr	r3, [r7, #28]
 800faf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fafc:	689b      	ldr	r3, [r3, #8]
 800fafe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d110      	bne.n	800fb28 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800fb06:	69bb      	ldr	r3, [r7, #24]
 800fb08:	015a      	lsls	r2, r3, #5
 800fb0a:	69fb      	ldr	r3, [r7, #28]
 800fb0c:	4413      	add	r3, r2
 800fb0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	69ba      	ldr	r2, [r7, #24]
 800fb16:	0151      	lsls	r1, r2, #5
 800fb18:	69fa      	ldr	r2, [r7, #28]
 800fb1a:	440a      	add	r2, r1
 800fb1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fb24:	6013      	str	r3, [r2, #0]
 800fb26:	e00f      	b.n	800fb48 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800fb28:	69bb      	ldr	r3, [r7, #24]
 800fb2a:	015a      	lsls	r2, r3, #5
 800fb2c:	69fb      	ldr	r3, [r7, #28]
 800fb2e:	4413      	add	r3, r2
 800fb30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	69ba      	ldr	r2, [r7, #24]
 800fb38:	0151      	lsls	r1, r2, #5
 800fb3a:	69fa      	ldr	r2, [r7, #28]
 800fb3c:	440a      	add	r2, r1
 800fb3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fb46:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800fb48:	69bb      	ldr	r3, [r7, #24]
 800fb4a:	015a      	lsls	r2, r3, #5
 800fb4c:	69fb      	ldr	r3, [r7, #28]
 800fb4e:	4413      	add	r3, r2
 800fb50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	69ba      	ldr	r2, [r7, #24]
 800fb58:	0151      	lsls	r1, r2, #5
 800fb5a:	69fa      	ldr	r2, [r7, #28]
 800fb5c:	440a      	add	r2, r1
 800fb5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fb66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fb68:	2300      	movs	r3, #0
}
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	3720      	adds	r7, #32
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	bd80      	pop	{r7, pc}
 800fb72:	bf00      	nop
 800fb74:	fff80000 	.word	0xfff80000
 800fb78:	e007ffff 	.word	0xe007ffff
 800fb7c:	1ff80000 	.word	0x1ff80000

0800fb80 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800fb80:	b480      	push	{r7}
 800fb82:	b087      	sub	sp, #28
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	60f8      	str	r0, [r7, #12]
 800fb88:	60b9      	str	r1, [r7, #8]
 800fb8a:	4613      	mov	r3, r2
 800fb8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800fb92:	68bb      	ldr	r3, [r7, #8]
 800fb94:	781b      	ldrb	r3, [r3, #0]
 800fb96:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fb98:	68bb      	ldr	r3, [r7, #8]
 800fb9a:	785b      	ldrb	r3, [r3, #1]
 800fb9c:	2b01      	cmp	r3, #1
 800fb9e:	f040 80ce 	bne.w	800fd3e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800fba2:	68bb      	ldr	r3, [r7, #8]
 800fba4:	699b      	ldr	r3, [r3, #24]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d132      	bne.n	800fc10 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fbaa:	693b      	ldr	r3, [r7, #16]
 800fbac:	015a      	lsls	r2, r3, #5
 800fbae:	697b      	ldr	r3, [r7, #20]
 800fbb0:	4413      	add	r3, r2
 800fbb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbb6:	691a      	ldr	r2, [r3, #16]
 800fbb8:	693b      	ldr	r3, [r7, #16]
 800fbba:	0159      	lsls	r1, r3, #5
 800fbbc:	697b      	ldr	r3, [r7, #20]
 800fbbe:	440b      	add	r3, r1
 800fbc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbc4:	4619      	mov	r1, r3
 800fbc6:	4b9a      	ldr	r3, [pc, #616]	; (800fe30 <USB_EP0StartXfer+0x2b0>)
 800fbc8:	4013      	ands	r3, r2
 800fbca:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fbcc:	693b      	ldr	r3, [r7, #16]
 800fbce:	015a      	lsls	r2, r3, #5
 800fbd0:	697b      	ldr	r3, [r7, #20]
 800fbd2:	4413      	add	r3, r2
 800fbd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbd8:	691b      	ldr	r3, [r3, #16]
 800fbda:	693a      	ldr	r2, [r7, #16]
 800fbdc:	0151      	lsls	r1, r2, #5
 800fbde:	697a      	ldr	r2, [r7, #20]
 800fbe0:	440a      	add	r2, r1
 800fbe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fbe6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fbea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fbec:	693b      	ldr	r3, [r7, #16]
 800fbee:	015a      	lsls	r2, r3, #5
 800fbf0:	697b      	ldr	r3, [r7, #20]
 800fbf2:	4413      	add	r3, r2
 800fbf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbf8:	691a      	ldr	r2, [r3, #16]
 800fbfa:	693b      	ldr	r3, [r7, #16]
 800fbfc:	0159      	lsls	r1, r3, #5
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	440b      	add	r3, r1
 800fc02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc06:	4619      	mov	r1, r3
 800fc08:	4b8a      	ldr	r3, [pc, #552]	; (800fe34 <USB_EP0StartXfer+0x2b4>)
 800fc0a:	4013      	ands	r3, r2
 800fc0c:	610b      	str	r3, [r1, #16]
 800fc0e:	e04e      	b.n	800fcae <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fc10:	693b      	ldr	r3, [r7, #16]
 800fc12:	015a      	lsls	r2, r3, #5
 800fc14:	697b      	ldr	r3, [r7, #20]
 800fc16:	4413      	add	r3, r2
 800fc18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc1c:	691a      	ldr	r2, [r3, #16]
 800fc1e:	693b      	ldr	r3, [r7, #16]
 800fc20:	0159      	lsls	r1, r3, #5
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	440b      	add	r3, r1
 800fc26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc2a:	4619      	mov	r1, r3
 800fc2c:	4b81      	ldr	r3, [pc, #516]	; (800fe34 <USB_EP0StartXfer+0x2b4>)
 800fc2e:	4013      	ands	r3, r2
 800fc30:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fc32:	693b      	ldr	r3, [r7, #16]
 800fc34:	015a      	lsls	r2, r3, #5
 800fc36:	697b      	ldr	r3, [r7, #20]
 800fc38:	4413      	add	r3, r2
 800fc3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc3e:	691a      	ldr	r2, [r3, #16]
 800fc40:	693b      	ldr	r3, [r7, #16]
 800fc42:	0159      	lsls	r1, r3, #5
 800fc44:	697b      	ldr	r3, [r7, #20]
 800fc46:	440b      	add	r3, r1
 800fc48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc4c:	4619      	mov	r1, r3
 800fc4e:	4b78      	ldr	r3, [pc, #480]	; (800fe30 <USB_EP0StartXfer+0x2b0>)
 800fc50:	4013      	ands	r3, r2
 800fc52:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800fc54:	68bb      	ldr	r3, [r7, #8]
 800fc56:	699a      	ldr	r2, [r3, #24]
 800fc58:	68bb      	ldr	r3, [r7, #8]
 800fc5a:	68db      	ldr	r3, [r3, #12]
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	d903      	bls.n	800fc68 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	68da      	ldr	r2, [r3, #12]
 800fc64:	68bb      	ldr	r3, [r7, #8]
 800fc66:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fc68:	693b      	ldr	r3, [r7, #16]
 800fc6a:	015a      	lsls	r2, r3, #5
 800fc6c:	697b      	ldr	r3, [r7, #20]
 800fc6e:	4413      	add	r3, r2
 800fc70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc74:	691b      	ldr	r3, [r3, #16]
 800fc76:	693a      	ldr	r2, [r7, #16]
 800fc78:	0151      	lsls	r1, r2, #5
 800fc7a:	697a      	ldr	r2, [r7, #20]
 800fc7c:	440a      	add	r2, r1
 800fc7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fc86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fc88:	693b      	ldr	r3, [r7, #16]
 800fc8a:	015a      	lsls	r2, r3, #5
 800fc8c:	697b      	ldr	r3, [r7, #20]
 800fc8e:	4413      	add	r3, r2
 800fc90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc94:	691a      	ldr	r2, [r3, #16]
 800fc96:	68bb      	ldr	r3, [r7, #8]
 800fc98:	699b      	ldr	r3, [r3, #24]
 800fc9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fc9e:	6939      	ldr	r1, [r7, #16]
 800fca0:	0148      	lsls	r0, r1, #5
 800fca2:	6979      	ldr	r1, [r7, #20]
 800fca4:	4401      	add	r1, r0
 800fca6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fcaa:	4313      	orrs	r3, r2
 800fcac:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800fcae:	79fb      	ldrb	r3, [r7, #7]
 800fcb0:	2b01      	cmp	r3, #1
 800fcb2:	d11e      	bne.n	800fcf2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800fcb4:	68bb      	ldr	r3, [r7, #8]
 800fcb6:	695b      	ldr	r3, [r3, #20]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d009      	beq.n	800fcd0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800fcbc:	693b      	ldr	r3, [r7, #16]
 800fcbe:	015a      	lsls	r2, r3, #5
 800fcc0:	697b      	ldr	r3, [r7, #20]
 800fcc2:	4413      	add	r3, r2
 800fcc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcc8:	461a      	mov	r2, r3
 800fcca:	68bb      	ldr	r3, [r7, #8]
 800fccc:	695b      	ldr	r3, [r3, #20]
 800fcce:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fcd0:	693b      	ldr	r3, [r7, #16]
 800fcd2:	015a      	lsls	r2, r3, #5
 800fcd4:	697b      	ldr	r3, [r7, #20]
 800fcd6:	4413      	add	r3, r2
 800fcd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	693a      	ldr	r2, [r7, #16]
 800fce0:	0151      	lsls	r1, r2, #5
 800fce2:	697a      	ldr	r2, [r7, #20]
 800fce4:	440a      	add	r2, r1
 800fce6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fcea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fcee:	6013      	str	r3, [r2, #0]
 800fcf0:	e097      	b.n	800fe22 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fcf2:	693b      	ldr	r3, [r7, #16]
 800fcf4:	015a      	lsls	r2, r3, #5
 800fcf6:	697b      	ldr	r3, [r7, #20]
 800fcf8:	4413      	add	r3, r2
 800fcfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	693a      	ldr	r2, [r7, #16]
 800fd02:	0151      	lsls	r1, r2, #5
 800fd04:	697a      	ldr	r2, [r7, #20]
 800fd06:	440a      	add	r2, r1
 800fd08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fd10:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	699b      	ldr	r3, [r3, #24]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	f000 8083 	beq.w	800fe22 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800fd1c:	697b      	ldr	r3, [r7, #20]
 800fd1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fd24:	68bb      	ldr	r3, [r7, #8]
 800fd26:	781b      	ldrb	r3, [r3, #0]
 800fd28:	f003 030f 	and.w	r3, r3, #15
 800fd2c:	2101      	movs	r1, #1
 800fd2e:	fa01 f303 	lsl.w	r3, r1, r3
 800fd32:	6979      	ldr	r1, [r7, #20]
 800fd34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fd38:	4313      	orrs	r3, r2
 800fd3a:	634b      	str	r3, [r1, #52]	; 0x34
 800fd3c:	e071      	b.n	800fe22 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fd3e:	693b      	ldr	r3, [r7, #16]
 800fd40:	015a      	lsls	r2, r3, #5
 800fd42:	697b      	ldr	r3, [r7, #20]
 800fd44:	4413      	add	r3, r2
 800fd46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd4a:	691a      	ldr	r2, [r3, #16]
 800fd4c:	693b      	ldr	r3, [r7, #16]
 800fd4e:	0159      	lsls	r1, r3, #5
 800fd50:	697b      	ldr	r3, [r7, #20]
 800fd52:	440b      	add	r3, r1
 800fd54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd58:	4619      	mov	r1, r3
 800fd5a:	4b36      	ldr	r3, [pc, #216]	; (800fe34 <USB_EP0StartXfer+0x2b4>)
 800fd5c:	4013      	ands	r3, r2
 800fd5e:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800fd60:	693b      	ldr	r3, [r7, #16]
 800fd62:	015a      	lsls	r2, r3, #5
 800fd64:	697b      	ldr	r3, [r7, #20]
 800fd66:	4413      	add	r3, r2
 800fd68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd6c:	691a      	ldr	r2, [r3, #16]
 800fd6e:	693b      	ldr	r3, [r7, #16]
 800fd70:	0159      	lsls	r1, r3, #5
 800fd72:	697b      	ldr	r3, [r7, #20]
 800fd74:	440b      	add	r3, r1
 800fd76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd7a:	4619      	mov	r1, r3
 800fd7c:	4b2c      	ldr	r3, [pc, #176]	; (800fe30 <USB_EP0StartXfer+0x2b0>)
 800fd7e:	4013      	ands	r3, r2
 800fd80:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	699b      	ldr	r3, [r3, #24]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d003      	beq.n	800fd92 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800fd8a:	68bb      	ldr	r3, [r7, #8]
 800fd8c:	68da      	ldr	r2, [r3, #12]
 800fd8e:	68bb      	ldr	r3, [r7, #8]
 800fd90:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800fd92:	68bb      	ldr	r3, [r7, #8]
 800fd94:	68da      	ldr	r2, [r3, #12]
 800fd96:	68bb      	ldr	r3, [r7, #8]
 800fd98:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fd9a:	693b      	ldr	r3, [r7, #16]
 800fd9c:	015a      	lsls	r2, r3, #5
 800fd9e:	697b      	ldr	r3, [r7, #20]
 800fda0:	4413      	add	r3, r2
 800fda2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fda6:	691b      	ldr	r3, [r3, #16]
 800fda8:	693a      	ldr	r2, [r7, #16]
 800fdaa:	0151      	lsls	r1, r2, #5
 800fdac:	697a      	ldr	r2, [r7, #20]
 800fdae:	440a      	add	r2, r1
 800fdb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fdb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fdb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800fdba:	693b      	ldr	r3, [r7, #16]
 800fdbc:	015a      	lsls	r2, r3, #5
 800fdbe:	697b      	ldr	r3, [r7, #20]
 800fdc0:	4413      	add	r3, r2
 800fdc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdc6:	691a      	ldr	r2, [r3, #16]
 800fdc8:	68bb      	ldr	r3, [r7, #8]
 800fdca:	69db      	ldr	r3, [r3, #28]
 800fdcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fdd0:	6939      	ldr	r1, [r7, #16]
 800fdd2:	0148      	lsls	r0, r1, #5
 800fdd4:	6979      	ldr	r1, [r7, #20]
 800fdd6:	4401      	add	r1, r0
 800fdd8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fddc:	4313      	orrs	r3, r2
 800fdde:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800fde0:	79fb      	ldrb	r3, [r7, #7]
 800fde2:	2b01      	cmp	r3, #1
 800fde4:	d10d      	bne.n	800fe02 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800fde6:	68bb      	ldr	r3, [r7, #8]
 800fde8:	691b      	ldr	r3, [r3, #16]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d009      	beq.n	800fe02 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800fdee:	68bb      	ldr	r3, [r7, #8]
 800fdf0:	6919      	ldr	r1, [r3, #16]
 800fdf2:	693b      	ldr	r3, [r7, #16]
 800fdf4:	015a      	lsls	r2, r3, #5
 800fdf6:	697b      	ldr	r3, [r7, #20]
 800fdf8:	4413      	add	r3, r2
 800fdfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdfe:	460a      	mov	r2, r1
 800fe00:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800fe02:	693b      	ldr	r3, [r7, #16]
 800fe04:	015a      	lsls	r2, r3, #5
 800fe06:	697b      	ldr	r3, [r7, #20]
 800fe08:	4413      	add	r3, r2
 800fe0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	693a      	ldr	r2, [r7, #16]
 800fe12:	0151      	lsls	r1, r2, #5
 800fe14:	697a      	ldr	r2, [r7, #20]
 800fe16:	440a      	add	r2, r1
 800fe18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fe20:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fe22:	2300      	movs	r3, #0
}
 800fe24:	4618      	mov	r0, r3
 800fe26:	371c      	adds	r7, #28
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2e:	4770      	bx	lr
 800fe30:	e007ffff 	.word	0xe007ffff
 800fe34:	fff80000 	.word	0xfff80000

0800fe38 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fe38:	b480      	push	{r7}
 800fe3a:	b087      	sub	sp, #28
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
 800fe40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800fe42:	2300      	movs	r3, #0
 800fe44:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800fe46:	2300      	movs	r3, #0
 800fe48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	785b      	ldrb	r3, [r3, #1]
 800fe52:	2b01      	cmp	r3, #1
 800fe54:	d14a      	bne.n	800feec <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	781b      	ldrb	r3, [r3, #0]
 800fe5a:	015a      	lsls	r2, r3, #5
 800fe5c:	693b      	ldr	r3, [r7, #16]
 800fe5e:	4413      	add	r3, r2
 800fe60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fe6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fe6e:	f040 8086 	bne.w	800ff7e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	781b      	ldrb	r3, [r3, #0]
 800fe76:	015a      	lsls	r2, r3, #5
 800fe78:	693b      	ldr	r3, [r7, #16]
 800fe7a:	4413      	add	r3, r2
 800fe7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	683a      	ldr	r2, [r7, #0]
 800fe84:	7812      	ldrb	r2, [r2, #0]
 800fe86:	0151      	lsls	r1, r2, #5
 800fe88:	693a      	ldr	r2, [r7, #16]
 800fe8a:	440a      	add	r2, r1
 800fe8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fe94:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	781b      	ldrb	r3, [r3, #0]
 800fe9a:	015a      	lsls	r2, r3, #5
 800fe9c:	693b      	ldr	r3, [r7, #16]
 800fe9e:	4413      	add	r3, r2
 800fea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	683a      	ldr	r2, [r7, #0]
 800fea8:	7812      	ldrb	r2, [r2, #0]
 800feaa:	0151      	lsls	r1, r2, #5
 800feac:	693a      	ldr	r2, [r7, #16]
 800feae:	440a      	add	r2, r1
 800feb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800feb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800feb8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	3301      	adds	r3, #1
 800febe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	f242 7210 	movw	r2, #10000	; 0x2710
 800fec6:	4293      	cmp	r3, r2
 800fec8:	d902      	bls.n	800fed0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800feca:	2301      	movs	r3, #1
 800fecc:	75fb      	strb	r3, [r7, #23]
          break;
 800fece:	e056      	b.n	800ff7e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800fed0:	683b      	ldr	r3, [r7, #0]
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	015a      	lsls	r2, r3, #5
 800fed6:	693b      	ldr	r3, [r7, #16]
 800fed8:	4413      	add	r3, r2
 800feda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fee4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fee8:	d0e7      	beq.n	800feba <USB_EPStopXfer+0x82>
 800feea:	e048      	b.n	800ff7e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	781b      	ldrb	r3, [r3, #0]
 800fef0:	015a      	lsls	r2, r3, #5
 800fef2:	693b      	ldr	r3, [r7, #16]
 800fef4:	4413      	add	r3, r2
 800fef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ff00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ff04:	d13b      	bne.n	800ff7e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	781b      	ldrb	r3, [r3, #0]
 800ff0a:	015a      	lsls	r2, r3, #5
 800ff0c:	693b      	ldr	r3, [r7, #16]
 800ff0e:	4413      	add	r3, r2
 800ff10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	683a      	ldr	r2, [r7, #0]
 800ff18:	7812      	ldrb	r2, [r2, #0]
 800ff1a:	0151      	lsls	r1, r2, #5
 800ff1c:	693a      	ldr	r2, [r7, #16]
 800ff1e:	440a      	add	r2, r1
 800ff20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ff28:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ff2a:	683b      	ldr	r3, [r7, #0]
 800ff2c:	781b      	ldrb	r3, [r3, #0]
 800ff2e:	015a      	lsls	r2, r3, #5
 800ff30:	693b      	ldr	r3, [r7, #16]
 800ff32:	4413      	add	r3, r2
 800ff34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	683a      	ldr	r2, [r7, #0]
 800ff3c:	7812      	ldrb	r2, [r2, #0]
 800ff3e:	0151      	lsls	r1, r2, #5
 800ff40:	693a      	ldr	r2, [r7, #16]
 800ff42:	440a      	add	r2, r1
 800ff44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ff4c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	3301      	adds	r3, #1
 800ff52:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	f242 7210 	movw	r2, #10000	; 0x2710
 800ff5a:	4293      	cmp	r3, r2
 800ff5c:	d902      	bls.n	800ff64 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ff5e:	2301      	movs	r3, #1
 800ff60:	75fb      	strb	r3, [r7, #23]
          break;
 800ff62:	e00c      	b.n	800ff7e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ff64:	683b      	ldr	r3, [r7, #0]
 800ff66:	781b      	ldrb	r3, [r3, #0]
 800ff68:	015a      	lsls	r2, r3, #5
 800ff6a:	693b      	ldr	r3, [r7, #16]
 800ff6c:	4413      	add	r3, r2
 800ff6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ff78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ff7c:	d0e7      	beq.n	800ff4e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ff7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff80:	4618      	mov	r0, r3
 800ff82:	371c      	adds	r7, #28
 800ff84:	46bd      	mov	sp, r7
 800ff86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8a:	4770      	bx	lr

0800ff8c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ff8c:	b480      	push	{r7}
 800ff8e:	b089      	sub	sp, #36	; 0x24
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	60f8      	str	r0, [r7, #12]
 800ff94:	60b9      	str	r1, [r7, #8]
 800ff96:	4611      	mov	r1, r2
 800ff98:	461a      	mov	r2, r3
 800ff9a:	460b      	mov	r3, r1
 800ff9c:	71fb      	strb	r3, [r7, #7]
 800ff9e:	4613      	mov	r3, r2
 800ffa0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ffa6:	68bb      	ldr	r3, [r7, #8]
 800ffa8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ffaa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d123      	bne.n	800fffa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ffb2:	88bb      	ldrh	r3, [r7, #4]
 800ffb4:	3303      	adds	r3, #3
 800ffb6:	089b      	lsrs	r3, r3, #2
 800ffb8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ffba:	2300      	movs	r3, #0
 800ffbc:	61bb      	str	r3, [r7, #24]
 800ffbe:	e018      	b.n	800fff2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ffc0:	79fb      	ldrb	r3, [r7, #7]
 800ffc2:	031a      	lsls	r2, r3, #12
 800ffc4:	697b      	ldr	r3, [r7, #20]
 800ffc6:	4413      	add	r3, r2
 800ffc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ffcc:	461a      	mov	r2, r3
 800ffce:	69fb      	ldr	r3, [r7, #28]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ffd4:	69fb      	ldr	r3, [r7, #28]
 800ffd6:	3301      	adds	r3, #1
 800ffd8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ffda:	69fb      	ldr	r3, [r7, #28]
 800ffdc:	3301      	adds	r3, #1
 800ffde:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ffe0:	69fb      	ldr	r3, [r7, #28]
 800ffe2:	3301      	adds	r3, #1
 800ffe4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ffe6:	69fb      	ldr	r3, [r7, #28]
 800ffe8:	3301      	adds	r3, #1
 800ffea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ffec:	69bb      	ldr	r3, [r7, #24]
 800ffee:	3301      	adds	r3, #1
 800fff0:	61bb      	str	r3, [r7, #24]
 800fff2:	69ba      	ldr	r2, [r7, #24]
 800fff4:	693b      	ldr	r3, [r7, #16]
 800fff6:	429a      	cmp	r2, r3
 800fff8:	d3e2      	bcc.n	800ffc0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800fffa:	2300      	movs	r3, #0
}
 800fffc:	4618      	mov	r0, r3
 800fffe:	3724      	adds	r7, #36	; 0x24
 8010000:	46bd      	mov	sp, r7
 8010002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010006:	4770      	bx	lr

08010008 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010008:	b480      	push	{r7}
 801000a:	b08b      	sub	sp, #44	; 0x2c
 801000c:	af00      	add	r7, sp, #0
 801000e:	60f8      	str	r0, [r7, #12]
 8010010:	60b9      	str	r1, [r7, #8]
 8010012:	4613      	mov	r3, r2
 8010014:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801001a:	68bb      	ldr	r3, [r7, #8]
 801001c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801001e:	88fb      	ldrh	r3, [r7, #6]
 8010020:	089b      	lsrs	r3, r3, #2
 8010022:	b29b      	uxth	r3, r3
 8010024:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8010026:	88fb      	ldrh	r3, [r7, #6]
 8010028:	f003 0303 	and.w	r3, r3, #3
 801002c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801002e:	2300      	movs	r3, #0
 8010030:	623b      	str	r3, [r7, #32]
 8010032:	e014      	b.n	801005e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010034:	69bb      	ldr	r3, [r7, #24]
 8010036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801003a:	681a      	ldr	r2, [r3, #0]
 801003c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801003e:	601a      	str	r2, [r3, #0]
    pDest++;
 8010040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010042:	3301      	adds	r3, #1
 8010044:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010048:	3301      	adds	r3, #1
 801004a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801004c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801004e:	3301      	adds	r3, #1
 8010050:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010054:	3301      	adds	r3, #1
 8010056:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8010058:	6a3b      	ldr	r3, [r7, #32]
 801005a:	3301      	adds	r3, #1
 801005c:	623b      	str	r3, [r7, #32]
 801005e:	6a3a      	ldr	r2, [r7, #32]
 8010060:	697b      	ldr	r3, [r7, #20]
 8010062:	429a      	cmp	r2, r3
 8010064:	d3e6      	bcc.n	8010034 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8010066:	8bfb      	ldrh	r3, [r7, #30]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d01e      	beq.n	80100aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801006c:	2300      	movs	r3, #0
 801006e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8010070:	69bb      	ldr	r3, [r7, #24]
 8010072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010076:	461a      	mov	r2, r3
 8010078:	f107 0310 	add.w	r3, r7, #16
 801007c:	6812      	ldr	r2, [r2, #0]
 801007e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8010080:	693a      	ldr	r2, [r7, #16]
 8010082:	6a3b      	ldr	r3, [r7, #32]
 8010084:	b2db      	uxtb	r3, r3
 8010086:	00db      	lsls	r3, r3, #3
 8010088:	fa22 f303 	lsr.w	r3, r2, r3
 801008c:	b2da      	uxtb	r2, r3
 801008e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010090:	701a      	strb	r2, [r3, #0]
      i++;
 8010092:	6a3b      	ldr	r3, [r7, #32]
 8010094:	3301      	adds	r3, #1
 8010096:	623b      	str	r3, [r7, #32]
      pDest++;
 8010098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801009a:	3301      	adds	r3, #1
 801009c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801009e:	8bfb      	ldrh	r3, [r7, #30]
 80100a0:	3b01      	subs	r3, #1
 80100a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80100a4:	8bfb      	ldrh	r3, [r7, #30]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d1ea      	bne.n	8010080 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80100aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80100ac:	4618      	mov	r0, r3
 80100ae:	372c      	adds	r7, #44	; 0x2c
 80100b0:	46bd      	mov	sp, r7
 80100b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b6:	4770      	bx	lr

080100b8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80100b8:	b480      	push	{r7}
 80100ba:	b085      	sub	sp, #20
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
 80100c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80100c6:	683b      	ldr	r3, [r7, #0]
 80100c8:	781b      	ldrb	r3, [r3, #0]
 80100ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	785b      	ldrb	r3, [r3, #1]
 80100d0:	2b01      	cmp	r3, #1
 80100d2:	d12c      	bne.n	801012e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80100d4:	68bb      	ldr	r3, [r7, #8]
 80100d6:	015a      	lsls	r2, r3, #5
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	4413      	add	r3, r2
 80100dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	db12      	blt.n	801010c <USB_EPSetStall+0x54>
 80100e6:	68bb      	ldr	r3, [r7, #8]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d00f      	beq.n	801010c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80100ec:	68bb      	ldr	r3, [r7, #8]
 80100ee:	015a      	lsls	r2, r3, #5
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	4413      	add	r3, r2
 80100f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	68ba      	ldr	r2, [r7, #8]
 80100fc:	0151      	lsls	r1, r2, #5
 80100fe:	68fa      	ldr	r2, [r7, #12]
 8010100:	440a      	add	r2, r1
 8010102:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010106:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801010a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801010c:	68bb      	ldr	r3, [r7, #8]
 801010e:	015a      	lsls	r2, r3, #5
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	4413      	add	r3, r2
 8010114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	68ba      	ldr	r2, [r7, #8]
 801011c:	0151      	lsls	r1, r2, #5
 801011e:	68fa      	ldr	r2, [r7, #12]
 8010120:	440a      	add	r2, r1
 8010122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010126:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801012a:	6013      	str	r3, [r2, #0]
 801012c:	e02b      	b.n	8010186 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	015a      	lsls	r2, r3, #5
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	4413      	add	r3, r2
 8010136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	2b00      	cmp	r3, #0
 801013e:	db12      	blt.n	8010166 <USB_EPSetStall+0xae>
 8010140:	68bb      	ldr	r3, [r7, #8]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d00f      	beq.n	8010166 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010146:	68bb      	ldr	r3, [r7, #8]
 8010148:	015a      	lsls	r2, r3, #5
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	4413      	add	r3, r2
 801014e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	68ba      	ldr	r2, [r7, #8]
 8010156:	0151      	lsls	r1, r2, #5
 8010158:	68fa      	ldr	r2, [r7, #12]
 801015a:	440a      	add	r2, r1
 801015c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010160:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010164:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010166:	68bb      	ldr	r3, [r7, #8]
 8010168:	015a      	lsls	r2, r3, #5
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	4413      	add	r3, r2
 801016e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	68ba      	ldr	r2, [r7, #8]
 8010176:	0151      	lsls	r1, r2, #5
 8010178:	68fa      	ldr	r2, [r7, #12]
 801017a:	440a      	add	r2, r1
 801017c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010180:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010184:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010186:	2300      	movs	r3, #0
}
 8010188:	4618      	mov	r0, r3
 801018a:	3714      	adds	r7, #20
 801018c:	46bd      	mov	sp, r7
 801018e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010192:	4770      	bx	lr

08010194 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010194:	b480      	push	{r7}
 8010196:	b085      	sub	sp, #20
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
 801019c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80101a2:	683b      	ldr	r3, [r7, #0]
 80101a4:	781b      	ldrb	r3, [r3, #0]
 80101a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80101a8:	683b      	ldr	r3, [r7, #0]
 80101aa:	785b      	ldrb	r3, [r3, #1]
 80101ac:	2b01      	cmp	r3, #1
 80101ae:	d128      	bne.n	8010202 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80101b0:	68bb      	ldr	r3, [r7, #8]
 80101b2:	015a      	lsls	r2, r3, #5
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	4413      	add	r3, r2
 80101b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	68ba      	ldr	r2, [r7, #8]
 80101c0:	0151      	lsls	r1, r2, #5
 80101c2:	68fa      	ldr	r2, [r7, #12]
 80101c4:	440a      	add	r2, r1
 80101c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80101ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80101d0:	683b      	ldr	r3, [r7, #0]
 80101d2:	791b      	ldrb	r3, [r3, #4]
 80101d4:	2b03      	cmp	r3, #3
 80101d6:	d003      	beq.n	80101e0 <USB_EPClearStall+0x4c>
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	791b      	ldrb	r3, [r3, #4]
 80101dc:	2b02      	cmp	r3, #2
 80101de:	d138      	bne.n	8010252 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80101e0:	68bb      	ldr	r3, [r7, #8]
 80101e2:	015a      	lsls	r2, r3, #5
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	4413      	add	r3, r2
 80101e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	68ba      	ldr	r2, [r7, #8]
 80101f0:	0151      	lsls	r1, r2, #5
 80101f2:	68fa      	ldr	r2, [r7, #12]
 80101f4:	440a      	add	r2, r1
 80101f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80101fe:	6013      	str	r3, [r2, #0]
 8010200:	e027      	b.n	8010252 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010202:	68bb      	ldr	r3, [r7, #8]
 8010204:	015a      	lsls	r2, r3, #5
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	4413      	add	r3, r2
 801020a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	68ba      	ldr	r2, [r7, #8]
 8010212:	0151      	lsls	r1, r2, #5
 8010214:	68fa      	ldr	r2, [r7, #12]
 8010216:	440a      	add	r2, r1
 8010218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801021c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010220:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010222:	683b      	ldr	r3, [r7, #0]
 8010224:	791b      	ldrb	r3, [r3, #4]
 8010226:	2b03      	cmp	r3, #3
 8010228:	d003      	beq.n	8010232 <USB_EPClearStall+0x9e>
 801022a:	683b      	ldr	r3, [r7, #0]
 801022c:	791b      	ldrb	r3, [r3, #4]
 801022e:	2b02      	cmp	r3, #2
 8010230:	d10f      	bne.n	8010252 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010232:	68bb      	ldr	r3, [r7, #8]
 8010234:	015a      	lsls	r2, r3, #5
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	4413      	add	r3, r2
 801023a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	68ba      	ldr	r2, [r7, #8]
 8010242:	0151      	lsls	r1, r2, #5
 8010244:	68fa      	ldr	r2, [r7, #12]
 8010246:	440a      	add	r2, r1
 8010248:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801024c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010250:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010252:	2300      	movs	r3, #0
}
 8010254:	4618      	mov	r0, r3
 8010256:	3714      	adds	r7, #20
 8010258:	46bd      	mov	sp, r7
 801025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025e:	4770      	bx	lr

08010260 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010260:	b480      	push	{r7}
 8010262:	b085      	sub	sp, #20
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
 8010268:	460b      	mov	r3, r1
 801026a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	68fa      	ldr	r2, [r7, #12]
 801027a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801027e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010282:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801028a:	681a      	ldr	r2, [r3, #0]
 801028c:	78fb      	ldrb	r3, [r7, #3]
 801028e:	011b      	lsls	r3, r3, #4
 8010290:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010294:	68f9      	ldr	r1, [r7, #12]
 8010296:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801029a:	4313      	orrs	r3, r2
 801029c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801029e:	2300      	movs	r3, #0
}
 80102a0:	4618      	mov	r0, r3
 80102a2:	3714      	adds	r7, #20
 80102a4:	46bd      	mov	sp, r7
 80102a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102aa:	4770      	bx	lr

080102ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80102ac:	b480      	push	{r7}
 80102ae:	b085      	sub	sp, #20
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	68fa      	ldr	r2, [r7, #12]
 80102c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80102c6:	f023 0303 	bic.w	r3, r3, #3
 80102ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102d2:	685b      	ldr	r3, [r3, #4]
 80102d4:	68fa      	ldr	r2, [r7, #12]
 80102d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80102da:	f023 0302 	bic.w	r3, r3, #2
 80102de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80102e0:	2300      	movs	r3, #0
}
 80102e2:	4618      	mov	r0, r3
 80102e4:	3714      	adds	r7, #20
 80102e6:	46bd      	mov	sp, r7
 80102e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ec:	4770      	bx	lr

080102ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80102ee:	b480      	push	{r7}
 80102f0:	b085      	sub	sp, #20
 80102f2:	af00      	add	r7, sp, #0
 80102f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	68fa      	ldr	r2, [r7, #12]
 8010304:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010308:	f023 0303 	bic.w	r3, r3, #3
 801030c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010314:	685b      	ldr	r3, [r3, #4]
 8010316:	68fa      	ldr	r2, [r7, #12]
 8010318:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801031c:	f043 0302 	orr.w	r3, r3, #2
 8010320:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010322:	2300      	movs	r3, #0
}
 8010324:	4618      	mov	r0, r3
 8010326:	3714      	adds	r7, #20
 8010328:	46bd      	mov	sp, r7
 801032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032e:	4770      	bx	lr

08010330 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8010330:	b480      	push	{r7}
 8010332:	b085      	sub	sp, #20
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	695b      	ldr	r3, [r3, #20]
 801033c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	699b      	ldr	r3, [r3, #24]
 8010342:	68fa      	ldr	r2, [r7, #12]
 8010344:	4013      	ands	r3, r2
 8010346:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010348:	68fb      	ldr	r3, [r7, #12]
}
 801034a:	4618      	mov	r0, r3
 801034c:	3714      	adds	r7, #20
 801034e:	46bd      	mov	sp, r7
 8010350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010354:	4770      	bx	lr

08010356 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010356:	b480      	push	{r7}
 8010358:	b085      	sub	sp, #20
 801035a:	af00      	add	r7, sp, #0
 801035c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010368:	699b      	ldr	r3, [r3, #24]
 801036a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010372:	69db      	ldr	r3, [r3, #28]
 8010374:	68ba      	ldr	r2, [r7, #8]
 8010376:	4013      	ands	r3, r2
 8010378:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801037a:	68bb      	ldr	r3, [r7, #8]
 801037c:	0c1b      	lsrs	r3, r3, #16
}
 801037e:	4618      	mov	r0, r3
 8010380:	3714      	adds	r7, #20
 8010382:	46bd      	mov	sp, r7
 8010384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010388:	4770      	bx	lr

0801038a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801038a:	b480      	push	{r7}
 801038c:	b085      	sub	sp, #20
 801038e:	af00      	add	r7, sp, #0
 8010390:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801039c:	699b      	ldr	r3, [r3, #24]
 801039e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103a6:	69db      	ldr	r3, [r3, #28]
 80103a8:	68ba      	ldr	r2, [r7, #8]
 80103aa:	4013      	ands	r3, r2
 80103ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80103ae:	68bb      	ldr	r3, [r7, #8]
 80103b0:	b29b      	uxth	r3, r3
}
 80103b2:	4618      	mov	r0, r3
 80103b4:	3714      	adds	r7, #20
 80103b6:	46bd      	mov	sp, r7
 80103b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103bc:	4770      	bx	lr

080103be <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80103be:	b480      	push	{r7}
 80103c0:	b085      	sub	sp, #20
 80103c2:	af00      	add	r7, sp, #0
 80103c4:	6078      	str	r0, [r7, #4]
 80103c6:	460b      	mov	r3, r1
 80103c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80103ce:	78fb      	ldrb	r3, [r7, #3]
 80103d0:	015a      	lsls	r2, r3, #5
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	4413      	add	r3, r2
 80103d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103da:	689b      	ldr	r3, [r3, #8]
 80103dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103e4:	695b      	ldr	r3, [r3, #20]
 80103e6:	68ba      	ldr	r2, [r7, #8]
 80103e8:	4013      	ands	r3, r2
 80103ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80103ec:	68bb      	ldr	r3, [r7, #8]
}
 80103ee:	4618      	mov	r0, r3
 80103f0:	3714      	adds	r7, #20
 80103f2:	46bd      	mov	sp, r7
 80103f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f8:	4770      	bx	lr

080103fa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80103fa:	b480      	push	{r7}
 80103fc:	b087      	sub	sp, #28
 80103fe:	af00      	add	r7, sp, #0
 8010400:	6078      	str	r0, [r7, #4]
 8010402:	460b      	mov	r3, r1
 8010404:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801040a:	697b      	ldr	r3, [r7, #20]
 801040c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010410:	691b      	ldr	r3, [r3, #16]
 8010412:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010414:	697b      	ldr	r3, [r7, #20]
 8010416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801041a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801041c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801041e:	78fb      	ldrb	r3, [r7, #3]
 8010420:	f003 030f 	and.w	r3, r3, #15
 8010424:	68fa      	ldr	r2, [r7, #12]
 8010426:	fa22 f303 	lsr.w	r3, r2, r3
 801042a:	01db      	lsls	r3, r3, #7
 801042c:	b2db      	uxtb	r3, r3
 801042e:	693a      	ldr	r2, [r7, #16]
 8010430:	4313      	orrs	r3, r2
 8010432:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010434:	78fb      	ldrb	r3, [r7, #3]
 8010436:	015a      	lsls	r2, r3, #5
 8010438:	697b      	ldr	r3, [r7, #20]
 801043a:	4413      	add	r3, r2
 801043c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010440:	689b      	ldr	r3, [r3, #8]
 8010442:	693a      	ldr	r2, [r7, #16]
 8010444:	4013      	ands	r3, r2
 8010446:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010448:	68bb      	ldr	r3, [r7, #8]
}
 801044a:	4618      	mov	r0, r3
 801044c:	371c      	adds	r7, #28
 801044e:	46bd      	mov	sp, r7
 8010450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010454:	4770      	bx	lr

08010456 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010456:	b480      	push	{r7}
 8010458:	b083      	sub	sp, #12
 801045a:	af00      	add	r7, sp, #0
 801045c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	695b      	ldr	r3, [r3, #20]
 8010462:	f003 0301 	and.w	r3, r3, #1
}
 8010466:	4618      	mov	r0, r3
 8010468:	370c      	adds	r7, #12
 801046a:	46bd      	mov	sp, r7
 801046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010470:	4770      	bx	lr
	...

08010474 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010474:	b480      	push	{r7}
 8010476:	b085      	sub	sp, #20
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010486:	681a      	ldr	r2, [r3, #0]
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801048e:	4619      	mov	r1, r3
 8010490:	4b09      	ldr	r3, [pc, #36]	; (80104b8 <USB_ActivateSetup+0x44>)
 8010492:	4013      	ands	r3, r2
 8010494:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801049c:	685b      	ldr	r3, [r3, #4]
 801049e:	68fa      	ldr	r2, [r7, #12]
 80104a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80104a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80104a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80104aa:	2300      	movs	r3, #0
}
 80104ac:	4618      	mov	r0, r3
 80104ae:	3714      	adds	r7, #20
 80104b0:	46bd      	mov	sp, r7
 80104b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b6:	4770      	bx	lr
 80104b8:	fffff800 	.word	0xfffff800

080104bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80104bc:	b480      	push	{r7}
 80104be:	b087      	sub	sp, #28
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	60f8      	str	r0, [r7, #12]
 80104c4:	460b      	mov	r3, r1
 80104c6:	607a      	str	r2, [r7, #4]
 80104c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	333c      	adds	r3, #60	; 0x3c
 80104d2:	3304      	adds	r3, #4
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80104d8:	693b      	ldr	r3, [r7, #16]
 80104da:	4a26      	ldr	r2, [pc, #152]	; (8010574 <USB_EP0_OutStart+0xb8>)
 80104dc:	4293      	cmp	r3, r2
 80104de:	d90a      	bls.n	80104f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80104e0:	697b      	ldr	r3, [r7, #20]
 80104e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80104ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80104f0:	d101      	bne.n	80104f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80104f2:	2300      	movs	r3, #0
 80104f4:	e037      	b.n	8010566 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80104f6:	697b      	ldr	r3, [r7, #20]
 80104f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104fc:	461a      	mov	r2, r3
 80104fe:	2300      	movs	r3, #0
 8010500:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010502:	697b      	ldr	r3, [r7, #20]
 8010504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010508:	691b      	ldr	r3, [r3, #16]
 801050a:	697a      	ldr	r2, [r7, #20]
 801050c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010510:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010514:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010516:	697b      	ldr	r3, [r7, #20]
 8010518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801051c:	691b      	ldr	r3, [r3, #16]
 801051e:	697a      	ldr	r2, [r7, #20]
 8010520:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010524:	f043 0318 	orr.w	r3, r3, #24
 8010528:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801052a:	697b      	ldr	r3, [r7, #20]
 801052c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010530:	691b      	ldr	r3, [r3, #16]
 8010532:	697a      	ldr	r2, [r7, #20]
 8010534:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010538:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801053c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801053e:	7afb      	ldrb	r3, [r7, #11]
 8010540:	2b01      	cmp	r3, #1
 8010542:	d10f      	bne.n	8010564 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010544:	697b      	ldr	r3, [r7, #20]
 8010546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801054a:	461a      	mov	r2, r3
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010550:	697b      	ldr	r3, [r7, #20]
 8010552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	697a      	ldr	r2, [r7, #20]
 801055a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801055e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010562:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010564:	2300      	movs	r3, #0
}
 8010566:	4618      	mov	r0, r3
 8010568:	371c      	adds	r7, #28
 801056a:	46bd      	mov	sp, r7
 801056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010570:	4770      	bx	lr
 8010572:	bf00      	nop
 8010574:	4f54300a 	.word	0x4f54300a

08010578 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010578:	b480      	push	{r7}
 801057a:	b085      	sub	sp, #20
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010580:	2300      	movs	r3, #0
 8010582:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	3301      	adds	r3, #1
 8010588:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	4a13      	ldr	r2, [pc, #76]	; (80105dc <USB_CoreReset+0x64>)
 801058e:	4293      	cmp	r3, r2
 8010590:	d901      	bls.n	8010596 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010592:	2303      	movs	r3, #3
 8010594:	e01b      	b.n	80105ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	691b      	ldr	r3, [r3, #16]
 801059a:	2b00      	cmp	r3, #0
 801059c:	daf2      	bge.n	8010584 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801059e:	2300      	movs	r3, #0
 80105a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	691b      	ldr	r3, [r3, #16]
 80105a6:	f043 0201 	orr.w	r2, r3, #1
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	3301      	adds	r3, #1
 80105b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	4a09      	ldr	r2, [pc, #36]	; (80105dc <USB_CoreReset+0x64>)
 80105b8:	4293      	cmp	r3, r2
 80105ba:	d901      	bls.n	80105c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80105bc:	2303      	movs	r3, #3
 80105be:	e006      	b.n	80105ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	691b      	ldr	r3, [r3, #16]
 80105c4:	f003 0301 	and.w	r3, r3, #1
 80105c8:	2b01      	cmp	r3, #1
 80105ca:	d0f0      	beq.n	80105ae <USB_CoreReset+0x36>

  return HAL_OK;
 80105cc:	2300      	movs	r3, #0
}
 80105ce:	4618      	mov	r0, r3
 80105d0:	3714      	adds	r7, #20
 80105d2:	46bd      	mov	sp, r7
 80105d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d8:	4770      	bx	lr
 80105da:	bf00      	nop
 80105dc:	00030d40 	.word	0x00030d40

080105e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b084      	sub	sp, #16
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
 80105e8:	460b      	mov	r3, r1
 80105ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80105ec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80105f0:	f002 fd34 	bl	801305c <USBD_static_malloc>
 80105f4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d109      	bne.n	8010610 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	32b0      	adds	r2, #176	; 0xb0
 8010606:	2100      	movs	r1, #0
 8010608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801060c:	2302      	movs	r3, #2
 801060e:	e0d4      	b.n	80107ba <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8010610:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8010614:	2100      	movs	r1, #0
 8010616:	68f8      	ldr	r0, [r7, #12]
 8010618:	f002 fd96 	bl	8013148 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	32b0      	adds	r2, #176	; 0xb0
 8010626:	68f9      	ldr	r1, [r7, #12]
 8010628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	32b0      	adds	r2, #176	; 0xb0
 8010636:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	7c1b      	ldrb	r3, [r3, #16]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d138      	bne.n	80106ba <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010648:	4b5e      	ldr	r3, [pc, #376]	; (80107c4 <USBD_CDC_Init+0x1e4>)
 801064a:	7819      	ldrb	r1, [r3, #0]
 801064c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010650:	2202      	movs	r2, #2
 8010652:	6878      	ldr	r0, [r7, #4]
 8010654:	f002 fbdf 	bl	8012e16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010658:	4b5a      	ldr	r3, [pc, #360]	; (80107c4 <USBD_CDC_Init+0x1e4>)
 801065a:	781b      	ldrb	r3, [r3, #0]
 801065c:	f003 020f 	and.w	r2, r3, #15
 8010660:	6879      	ldr	r1, [r7, #4]
 8010662:	4613      	mov	r3, r2
 8010664:	009b      	lsls	r3, r3, #2
 8010666:	4413      	add	r3, r2
 8010668:	009b      	lsls	r3, r3, #2
 801066a:	440b      	add	r3, r1
 801066c:	3324      	adds	r3, #36	; 0x24
 801066e:	2201      	movs	r2, #1
 8010670:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8010672:	4b55      	ldr	r3, [pc, #340]	; (80107c8 <USBD_CDC_Init+0x1e8>)
 8010674:	7819      	ldrb	r1, [r3, #0]
 8010676:	f44f 7300 	mov.w	r3, #512	; 0x200
 801067a:	2202      	movs	r2, #2
 801067c:	6878      	ldr	r0, [r7, #4]
 801067e:	f002 fbca 	bl	8012e16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010682:	4b51      	ldr	r3, [pc, #324]	; (80107c8 <USBD_CDC_Init+0x1e8>)
 8010684:	781b      	ldrb	r3, [r3, #0]
 8010686:	f003 020f 	and.w	r2, r3, #15
 801068a:	6879      	ldr	r1, [r7, #4]
 801068c:	4613      	mov	r3, r2
 801068e:	009b      	lsls	r3, r3, #2
 8010690:	4413      	add	r3, r2
 8010692:	009b      	lsls	r3, r3, #2
 8010694:	440b      	add	r3, r1
 8010696:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801069a:	2201      	movs	r2, #1
 801069c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801069e:	4b4b      	ldr	r3, [pc, #300]	; (80107cc <USBD_CDC_Init+0x1ec>)
 80106a0:	781b      	ldrb	r3, [r3, #0]
 80106a2:	f003 020f 	and.w	r2, r3, #15
 80106a6:	6879      	ldr	r1, [r7, #4]
 80106a8:	4613      	mov	r3, r2
 80106aa:	009b      	lsls	r3, r3, #2
 80106ac:	4413      	add	r3, r2
 80106ae:	009b      	lsls	r3, r3, #2
 80106b0:	440b      	add	r3, r1
 80106b2:	3326      	adds	r3, #38	; 0x26
 80106b4:	2210      	movs	r2, #16
 80106b6:	801a      	strh	r2, [r3, #0]
 80106b8:	e035      	b.n	8010726 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80106ba:	4b42      	ldr	r3, [pc, #264]	; (80107c4 <USBD_CDC_Init+0x1e4>)
 80106bc:	7819      	ldrb	r1, [r3, #0]
 80106be:	2340      	movs	r3, #64	; 0x40
 80106c0:	2202      	movs	r2, #2
 80106c2:	6878      	ldr	r0, [r7, #4]
 80106c4:	f002 fba7 	bl	8012e16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80106c8:	4b3e      	ldr	r3, [pc, #248]	; (80107c4 <USBD_CDC_Init+0x1e4>)
 80106ca:	781b      	ldrb	r3, [r3, #0]
 80106cc:	f003 020f 	and.w	r2, r3, #15
 80106d0:	6879      	ldr	r1, [r7, #4]
 80106d2:	4613      	mov	r3, r2
 80106d4:	009b      	lsls	r3, r3, #2
 80106d6:	4413      	add	r3, r2
 80106d8:	009b      	lsls	r3, r3, #2
 80106da:	440b      	add	r3, r1
 80106dc:	3324      	adds	r3, #36	; 0x24
 80106de:	2201      	movs	r2, #1
 80106e0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80106e2:	4b39      	ldr	r3, [pc, #228]	; (80107c8 <USBD_CDC_Init+0x1e8>)
 80106e4:	7819      	ldrb	r1, [r3, #0]
 80106e6:	2340      	movs	r3, #64	; 0x40
 80106e8:	2202      	movs	r2, #2
 80106ea:	6878      	ldr	r0, [r7, #4]
 80106ec:	f002 fb93 	bl	8012e16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80106f0:	4b35      	ldr	r3, [pc, #212]	; (80107c8 <USBD_CDC_Init+0x1e8>)
 80106f2:	781b      	ldrb	r3, [r3, #0]
 80106f4:	f003 020f 	and.w	r2, r3, #15
 80106f8:	6879      	ldr	r1, [r7, #4]
 80106fa:	4613      	mov	r3, r2
 80106fc:	009b      	lsls	r3, r3, #2
 80106fe:	4413      	add	r3, r2
 8010700:	009b      	lsls	r3, r3, #2
 8010702:	440b      	add	r3, r1
 8010704:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010708:	2201      	movs	r2, #1
 801070a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801070c:	4b2f      	ldr	r3, [pc, #188]	; (80107cc <USBD_CDC_Init+0x1ec>)
 801070e:	781b      	ldrb	r3, [r3, #0]
 8010710:	f003 020f 	and.w	r2, r3, #15
 8010714:	6879      	ldr	r1, [r7, #4]
 8010716:	4613      	mov	r3, r2
 8010718:	009b      	lsls	r3, r3, #2
 801071a:	4413      	add	r3, r2
 801071c:	009b      	lsls	r3, r3, #2
 801071e:	440b      	add	r3, r1
 8010720:	3326      	adds	r3, #38	; 0x26
 8010722:	2210      	movs	r2, #16
 8010724:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010726:	4b29      	ldr	r3, [pc, #164]	; (80107cc <USBD_CDC_Init+0x1ec>)
 8010728:	7819      	ldrb	r1, [r3, #0]
 801072a:	2308      	movs	r3, #8
 801072c:	2203      	movs	r2, #3
 801072e:	6878      	ldr	r0, [r7, #4]
 8010730:	f002 fb71 	bl	8012e16 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8010734:	4b25      	ldr	r3, [pc, #148]	; (80107cc <USBD_CDC_Init+0x1ec>)
 8010736:	781b      	ldrb	r3, [r3, #0]
 8010738:	f003 020f 	and.w	r2, r3, #15
 801073c:	6879      	ldr	r1, [r7, #4]
 801073e:	4613      	mov	r3, r2
 8010740:	009b      	lsls	r3, r3, #2
 8010742:	4413      	add	r3, r2
 8010744:	009b      	lsls	r3, r3, #2
 8010746:	440b      	add	r3, r1
 8010748:	3324      	adds	r3, #36	; 0x24
 801074a:	2201      	movs	r2, #1
 801074c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	2200      	movs	r2, #0
 8010752:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801075c:	687a      	ldr	r2, [r7, #4]
 801075e:	33b0      	adds	r3, #176	; 0xb0
 8010760:	009b      	lsls	r3, r3, #2
 8010762:	4413      	add	r3, r2
 8010764:	685b      	ldr	r3, [r3, #4]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	2200      	movs	r2, #0
 801076e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	2200      	movs	r2, #0
 8010776:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8010780:	2b00      	cmp	r3, #0
 8010782:	d101      	bne.n	8010788 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8010784:	2302      	movs	r3, #2
 8010786:	e018      	b.n	80107ba <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	7c1b      	ldrb	r3, [r3, #16]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d10a      	bne.n	80107a6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010790:	4b0d      	ldr	r3, [pc, #52]	; (80107c8 <USBD_CDC_Init+0x1e8>)
 8010792:	7819      	ldrb	r1, [r3, #0]
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801079a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801079e:	6878      	ldr	r0, [r7, #4]
 80107a0:	f002 fc28 	bl	8012ff4 <USBD_LL_PrepareReceive>
 80107a4:	e008      	b.n	80107b8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80107a6:	4b08      	ldr	r3, [pc, #32]	; (80107c8 <USBD_CDC_Init+0x1e8>)
 80107a8:	7819      	ldrb	r1, [r3, #0]
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80107b0:	2340      	movs	r3, #64	; 0x40
 80107b2:	6878      	ldr	r0, [r7, #4]
 80107b4:	f002 fc1e 	bl	8012ff4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80107b8:	2300      	movs	r3, #0
}
 80107ba:	4618      	mov	r0, r3
 80107bc:	3710      	adds	r7, #16
 80107be:	46bd      	mov	sp, r7
 80107c0:	bd80      	pop	{r7, pc}
 80107c2:	bf00      	nop
 80107c4:	24000097 	.word	0x24000097
 80107c8:	24000098 	.word	0x24000098
 80107cc:	24000099 	.word	0x24000099

080107d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b082      	sub	sp, #8
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
 80107d8:	460b      	mov	r3, r1
 80107da:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80107dc:	4b3a      	ldr	r3, [pc, #232]	; (80108c8 <USBD_CDC_DeInit+0xf8>)
 80107de:	781b      	ldrb	r3, [r3, #0]
 80107e0:	4619      	mov	r1, r3
 80107e2:	6878      	ldr	r0, [r7, #4]
 80107e4:	f002 fb3d 	bl	8012e62 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80107e8:	4b37      	ldr	r3, [pc, #220]	; (80108c8 <USBD_CDC_DeInit+0xf8>)
 80107ea:	781b      	ldrb	r3, [r3, #0]
 80107ec:	f003 020f 	and.w	r2, r3, #15
 80107f0:	6879      	ldr	r1, [r7, #4]
 80107f2:	4613      	mov	r3, r2
 80107f4:	009b      	lsls	r3, r3, #2
 80107f6:	4413      	add	r3, r2
 80107f8:	009b      	lsls	r3, r3, #2
 80107fa:	440b      	add	r3, r1
 80107fc:	3324      	adds	r3, #36	; 0x24
 80107fe:	2200      	movs	r2, #0
 8010800:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8010802:	4b32      	ldr	r3, [pc, #200]	; (80108cc <USBD_CDC_DeInit+0xfc>)
 8010804:	781b      	ldrb	r3, [r3, #0]
 8010806:	4619      	mov	r1, r3
 8010808:	6878      	ldr	r0, [r7, #4]
 801080a:	f002 fb2a 	bl	8012e62 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801080e:	4b2f      	ldr	r3, [pc, #188]	; (80108cc <USBD_CDC_DeInit+0xfc>)
 8010810:	781b      	ldrb	r3, [r3, #0]
 8010812:	f003 020f 	and.w	r2, r3, #15
 8010816:	6879      	ldr	r1, [r7, #4]
 8010818:	4613      	mov	r3, r2
 801081a:	009b      	lsls	r3, r3, #2
 801081c:	4413      	add	r3, r2
 801081e:	009b      	lsls	r3, r3, #2
 8010820:	440b      	add	r3, r1
 8010822:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010826:	2200      	movs	r2, #0
 8010828:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801082a:	4b29      	ldr	r3, [pc, #164]	; (80108d0 <USBD_CDC_DeInit+0x100>)
 801082c:	781b      	ldrb	r3, [r3, #0]
 801082e:	4619      	mov	r1, r3
 8010830:	6878      	ldr	r0, [r7, #4]
 8010832:	f002 fb16 	bl	8012e62 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8010836:	4b26      	ldr	r3, [pc, #152]	; (80108d0 <USBD_CDC_DeInit+0x100>)
 8010838:	781b      	ldrb	r3, [r3, #0]
 801083a:	f003 020f 	and.w	r2, r3, #15
 801083e:	6879      	ldr	r1, [r7, #4]
 8010840:	4613      	mov	r3, r2
 8010842:	009b      	lsls	r3, r3, #2
 8010844:	4413      	add	r3, r2
 8010846:	009b      	lsls	r3, r3, #2
 8010848:	440b      	add	r3, r1
 801084a:	3324      	adds	r3, #36	; 0x24
 801084c:	2200      	movs	r2, #0
 801084e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8010850:	4b1f      	ldr	r3, [pc, #124]	; (80108d0 <USBD_CDC_DeInit+0x100>)
 8010852:	781b      	ldrb	r3, [r3, #0]
 8010854:	f003 020f 	and.w	r2, r3, #15
 8010858:	6879      	ldr	r1, [r7, #4]
 801085a:	4613      	mov	r3, r2
 801085c:	009b      	lsls	r3, r3, #2
 801085e:	4413      	add	r3, r2
 8010860:	009b      	lsls	r3, r3, #2
 8010862:	440b      	add	r3, r1
 8010864:	3326      	adds	r3, #38	; 0x26
 8010866:	2200      	movs	r2, #0
 8010868:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	32b0      	adds	r2, #176	; 0xb0
 8010874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d01f      	beq.n	80108bc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010882:	687a      	ldr	r2, [r7, #4]
 8010884:	33b0      	adds	r3, #176	; 0xb0
 8010886:	009b      	lsls	r3, r3, #2
 8010888:	4413      	add	r3, r2
 801088a:	685b      	ldr	r3, [r3, #4]
 801088c:	685b      	ldr	r3, [r3, #4]
 801088e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	32b0      	adds	r2, #176	; 0xb0
 801089a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801089e:	4618      	mov	r0, r3
 80108a0:	f002 fbea 	bl	8013078 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	32b0      	adds	r2, #176	; 0xb0
 80108ae:	2100      	movs	r1, #0
 80108b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	2200      	movs	r2, #0
 80108b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80108bc:	2300      	movs	r3, #0
}
 80108be:	4618      	mov	r0, r3
 80108c0:	3708      	adds	r7, #8
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}
 80108c6:	bf00      	nop
 80108c8:	24000097 	.word	0x24000097
 80108cc:	24000098 	.word	0x24000098
 80108d0:	24000099 	.word	0x24000099

080108d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b086      	sub	sp, #24
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
 80108dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	32b0      	adds	r2, #176	; 0xb0
 80108e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108ec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80108ee:	2300      	movs	r3, #0
 80108f0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80108f2:	2300      	movs	r3, #0
 80108f4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80108f6:	2300      	movs	r3, #0
 80108f8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80108fa:	693b      	ldr	r3, [r7, #16]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d101      	bne.n	8010904 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8010900:	2303      	movs	r3, #3
 8010902:	e0bf      	b.n	8010a84 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	781b      	ldrb	r3, [r3, #0]
 8010908:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801090c:	2b00      	cmp	r3, #0
 801090e:	d050      	beq.n	80109b2 <USBD_CDC_Setup+0xde>
 8010910:	2b20      	cmp	r3, #32
 8010912:	f040 80af 	bne.w	8010a74 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8010916:	683b      	ldr	r3, [r7, #0]
 8010918:	88db      	ldrh	r3, [r3, #6]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d03a      	beq.n	8010994 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801091e:	683b      	ldr	r3, [r7, #0]
 8010920:	781b      	ldrb	r3, [r3, #0]
 8010922:	b25b      	sxtb	r3, r3
 8010924:	2b00      	cmp	r3, #0
 8010926:	da1b      	bge.n	8010960 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801092e:	687a      	ldr	r2, [r7, #4]
 8010930:	33b0      	adds	r3, #176	; 0xb0
 8010932:	009b      	lsls	r3, r3, #2
 8010934:	4413      	add	r3, r2
 8010936:	685b      	ldr	r3, [r3, #4]
 8010938:	689b      	ldr	r3, [r3, #8]
 801093a:	683a      	ldr	r2, [r7, #0]
 801093c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801093e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010940:	683a      	ldr	r2, [r7, #0]
 8010942:	88d2      	ldrh	r2, [r2, #6]
 8010944:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8010946:	683b      	ldr	r3, [r7, #0]
 8010948:	88db      	ldrh	r3, [r3, #6]
 801094a:	2b07      	cmp	r3, #7
 801094c:	bf28      	it	cs
 801094e:	2307      	movcs	r3, #7
 8010950:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8010952:	693b      	ldr	r3, [r7, #16]
 8010954:	89fa      	ldrh	r2, [r7, #14]
 8010956:	4619      	mov	r1, r3
 8010958:	6878      	ldr	r0, [r7, #4]
 801095a:	f001 fd89 	bl	8012470 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801095e:	e090      	b.n	8010a82 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8010960:	683b      	ldr	r3, [r7, #0]
 8010962:	785a      	ldrb	r2, [r3, #1]
 8010964:	693b      	ldr	r3, [r7, #16]
 8010966:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801096a:	683b      	ldr	r3, [r7, #0]
 801096c:	88db      	ldrh	r3, [r3, #6]
 801096e:	2b3f      	cmp	r3, #63	; 0x3f
 8010970:	d803      	bhi.n	801097a <USBD_CDC_Setup+0xa6>
 8010972:	683b      	ldr	r3, [r7, #0]
 8010974:	88db      	ldrh	r3, [r3, #6]
 8010976:	b2da      	uxtb	r2, r3
 8010978:	e000      	b.n	801097c <USBD_CDC_Setup+0xa8>
 801097a:	2240      	movs	r2, #64	; 0x40
 801097c:	693b      	ldr	r3, [r7, #16]
 801097e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8010982:	6939      	ldr	r1, [r7, #16]
 8010984:	693b      	ldr	r3, [r7, #16]
 8010986:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801098a:	461a      	mov	r2, r3
 801098c:	6878      	ldr	r0, [r7, #4]
 801098e:	f001 fd9b 	bl	80124c8 <USBD_CtlPrepareRx>
      break;
 8010992:	e076      	b.n	8010a82 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801099a:	687a      	ldr	r2, [r7, #4]
 801099c:	33b0      	adds	r3, #176	; 0xb0
 801099e:	009b      	lsls	r3, r3, #2
 80109a0:	4413      	add	r3, r2
 80109a2:	685b      	ldr	r3, [r3, #4]
 80109a4:	689b      	ldr	r3, [r3, #8]
 80109a6:	683a      	ldr	r2, [r7, #0]
 80109a8:	7850      	ldrb	r0, [r2, #1]
 80109aa:	2200      	movs	r2, #0
 80109ac:	6839      	ldr	r1, [r7, #0]
 80109ae:	4798      	blx	r3
      break;
 80109b0:	e067      	b.n	8010a82 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80109b2:	683b      	ldr	r3, [r7, #0]
 80109b4:	785b      	ldrb	r3, [r3, #1]
 80109b6:	2b0b      	cmp	r3, #11
 80109b8:	d851      	bhi.n	8010a5e <USBD_CDC_Setup+0x18a>
 80109ba:	a201      	add	r2, pc, #4	; (adr r2, 80109c0 <USBD_CDC_Setup+0xec>)
 80109bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109c0:	080109f1 	.word	0x080109f1
 80109c4:	08010a6d 	.word	0x08010a6d
 80109c8:	08010a5f 	.word	0x08010a5f
 80109cc:	08010a5f 	.word	0x08010a5f
 80109d0:	08010a5f 	.word	0x08010a5f
 80109d4:	08010a5f 	.word	0x08010a5f
 80109d8:	08010a5f 	.word	0x08010a5f
 80109dc:	08010a5f 	.word	0x08010a5f
 80109e0:	08010a5f 	.word	0x08010a5f
 80109e4:	08010a5f 	.word	0x08010a5f
 80109e8:	08010a1b 	.word	0x08010a1b
 80109ec:	08010a45 	.word	0x08010a45
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80109f6:	b2db      	uxtb	r3, r3
 80109f8:	2b03      	cmp	r3, #3
 80109fa:	d107      	bne.n	8010a0c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80109fc:	f107 030a 	add.w	r3, r7, #10
 8010a00:	2202      	movs	r2, #2
 8010a02:	4619      	mov	r1, r3
 8010a04:	6878      	ldr	r0, [r7, #4]
 8010a06:	f001 fd33 	bl	8012470 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010a0a:	e032      	b.n	8010a72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010a0c:	6839      	ldr	r1, [r7, #0]
 8010a0e:	6878      	ldr	r0, [r7, #4]
 8010a10:	f001 fcbd 	bl	801238e <USBD_CtlError>
            ret = USBD_FAIL;
 8010a14:	2303      	movs	r3, #3
 8010a16:	75fb      	strb	r3, [r7, #23]
          break;
 8010a18:	e02b      	b.n	8010a72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a20:	b2db      	uxtb	r3, r3
 8010a22:	2b03      	cmp	r3, #3
 8010a24:	d107      	bne.n	8010a36 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010a26:	f107 030d 	add.w	r3, r7, #13
 8010a2a:	2201      	movs	r2, #1
 8010a2c:	4619      	mov	r1, r3
 8010a2e:	6878      	ldr	r0, [r7, #4]
 8010a30:	f001 fd1e 	bl	8012470 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010a34:	e01d      	b.n	8010a72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010a36:	6839      	ldr	r1, [r7, #0]
 8010a38:	6878      	ldr	r0, [r7, #4]
 8010a3a:	f001 fca8 	bl	801238e <USBD_CtlError>
            ret = USBD_FAIL;
 8010a3e:	2303      	movs	r3, #3
 8010a40:	75fb      	strb	r3, [r7, #23]
          break;
 8010a42:	e016      	b.n	8010a72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a4a:	b2db      	uxtb	r3, r3
 8010a4c:	2b03      	cmp	r3, #3
 8010a4e:	d00f      	beq.n	8010a70 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8010a50:	6839      	ldr	r1, [r7, #0]
 8010a52:	6878      	ldr	r0, [r7, #4]
 8010a54:	f001 fc9b 	bl	801238e <USBD_CtlError>
            ret = USBD_FAIL;
 8010a58:	2303      	movs	r3, #3
 8010a5a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010a5c:	e008      	b.n	8010a70 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010a5e:	6839      	ldr	r1, [r7, #0]
 8010a60:	6878      	ldr	r0, [r7, #4]
 8010a62:	f001 fc94 	bl	801238e <USBD_CtlError>
          ret = USBD_FAIL;
 8010a66:	2303      	movs	r3, #3
 8010a68:	75fb      	strb	r3, [r7, #23]
          break;
 8010a6a:	e002      	b.n	8010a72 <USBD_CDC_Setup+0x19e>
          break;
 8010a6c:	bf00      	nop
 8010a6e:	e008      	b.n	8010a82 <USBD_CDC_Setup+0x1ae>
          break;
 8010a70:	bf00      	nop
      }
      break;
 8010a72:	e006      	b.n	8010a82 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8010a74:	6839      	ldr	r1, [r7, #0]
 8010a76:	6878      	ldr	r0, [r7, #4]
 8010a78:	f001 fc89 	bl	801238e <USBD_CtlError>
      ret = USBD_FAIL;
 8010a7c:	2303      	movs	r3, #3
 8010a7e:	75fb      	strb	r3, [r7, #23]
      break;
 8010a80:	bf00      	nop
  }

  return (uint8_t)ret;
 8010a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a84:	4618      	mov	r0, r3
 8010a86:	3718      	adds	r7, #24
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	bd80      	pop	{r7, pc}

08010a8c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b084      	sub	sp, #16
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
 8010a94:	460b      	mov	r3, r1
 8010a96:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010a9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	32b0      	adds	r2, #176	; 0xb0
 8010aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d101      	bne.n	8010ab6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8010ab2:	2303      	movs	r3, #3
 8010ab4:	e065      	b.n	8010b82 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	32b0      	adds	r2, #176	; 0xb0
 8010ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ac4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010ac6:	78fb      	ldrb	r3, [r7, #3]
 8010ac8:	f003 020f 	and.w	r2, r3, #15
 8010acc:	6879      	ldr	r1, [r7, #4]
 8010ace:	4613      	mov	r3, r2
 8010ad0:	009b      	lsls	r3, r3, #2
 8010ad2:	4413      	add	r3, r2
 8010ad4:	009b      	lsls	r3, r3, #2
 8010ad6:	440b      	add	r3, r1
 8010ad8:	3318      	adds	r3, #24
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d02f      	beq.n	8010b40 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8010ae0:	78fb      	ldrb	r3, [r7, #3]
 8010ae2:	f003 020f 	and.w	r2, r3, #15
 8010ae6:	6879      	ldr	r1, [r7, #4]
 8010ae8:	4613      	mov	r3, r2
 8010aea:	009b      	lsls	r3, r3, #2
 8010aec:	4413      	add	r3, r2
 8010aee:	009b      	lsls	r3, r3, #2
 8010af0:	440b      	add	r3, r1
 8010af2:	3318      	adds	r3, #24
 8010af4:	681a      	ldr	r2, [r3, #0]
 8010af6:	78fb      	ldrb	r3, [r7, #3]
 8010af8:	f003 010f 	and.w	r1, r3, #15
 8010afc:	68f8      	ldr	r0, [r7, #12]
 8010afe:	460b      	mov	r3, r1
 8010b00:	00db      	lsls	r3, r3, #3
 8010b02:	440b      	add	r3, r1
 8010b04:	009b      	lsls	r3, r3, #2
 8010b06:	4403      	add	r3, r0
 8010b08:	3348      	adds	r3, #72	; 0x48
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	fbb2 f1f3 	udiv	r1, r2, r3
 8010b10:	fb01 f303 	mul.w	r3, r1, r3
 8010b14:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d112      	bne.n	8010b40 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8010b1a:	78fb      	ldrb	r3, [r7, #3]
 8010b1c:	f003 020f 	and.w	r2, r3, #15
 8010b20:	6879      	ldr	r1, [r7, #4]
 8010b22:	4613      	mov	r3, r2
 8010b24:	009b      	lsls	r3, r3, #2
 8010b26:	4413      	add	r3, r2
 8010b28:	009b      	lsls	r3, r3, #2
 8010b2a:	440b      	add	r3, r1
 8010b2c:	3318      	adds	r3, #24
 8010b2e:	2200      	movs	r2, #0
 8010b30:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010b32:	78f9      	ldrb	r1, [r7, #3]
 8010b34:	2300      	movs	r3, #0
 8010b36:	2200      	movs	r2, #0
 8010b38:	6878      	ldr	r0, [r7, #4]
 8010b3a:	f002 fa3a 	bl	8012fb2 <USBD_LL_Transmit>
 8010b3e:	e01f      	b.n	8010b80 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8010b40:	68bb      	ldr	r3, [r7, #8]
 8010b42:	2200      	movs	r2, #0
 8010b44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010b4e:	687a      	ldr	r2, [r7, #4]
 8010b50:	33b0      	adds	r3, #176	; 0xb0
 8010b52:	009b      	lsls	r3, r3, #2
 8010b54:	4413      	add	r3, r2
 8010b56:	685b      	ldr	r3, [r3, #4]
 8010b58:	691b      	ldr	r3, [r3, #16]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d010      	beq.n	8010b80 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010b64:	687a      	ldr	r2, [r7, #4]
 8010b66:	33b0      	adds	r3, #176	; 0xb0
 8010b68:	009b      	lsls	r3, r3, #2
 8010b6a:	4413      	add	r3, r2
 8010b6c:	685b      	ldr	r3, [r3, #4]
 8010b6e:	691b      	ldr	r3, [r3, #16]
 8010b70:	68ba      	ldr	r2, [r7, #8]
 8010b72:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8010b76:	68ba      	ldr	r2, [r7, #8]
 8010b78:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8010b7c:	78fa      	ldrb	r2, [r7, #3]
 8010b7e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010b80:	2300      	movs	r3, #0
}
 8010b82:	4618      	mov	r0, r3
 8010b84:	3710      	adds	r7, #16
 8010b86:	46bd      	mov	sp, r7
 8010b88:	bd80      	pop	{r7, pc}

08010b8a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010b8a:	b580      	push	{r7, lr}
 8010b8c:	b084      	sub	sp, #16
 8010b8e:	af00      	add	r7, sp, #0
 8010b90:	6078      	str	r0, [r7, #4]
 8010b92:	460b      	mov	r3, r1
 8010b94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	32b0      	adds	r2, #176	; 0xb0
 8010ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ba4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	32b0      	adds	r2, #176	; 0xb0
 8010bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d101      	bne.n	8010bbc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8010bb8:	2303      	movs	r3, #3
 8010bba:	e01a      	b.n	8010bf2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010bbc:	78fb      	ldrb	r3, [r7, #3]
 8010bbe:	4619      	mov	r1, r3
 8010bc0:	6878      	ldr	r0, [r7, #4]
 8010bc2:	f002 fa38 	bl	8013036 <USBD_LL_GetRxDataSize>
 8010bc6:	4602      	mov	r2, r0
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010bd4:	687a      	ldr	r2, [r7, #4]
 8010bd6:	33b0      	adds	r3, #176	; 0xb0
 8010bd8:	009b      	lsls	r3, r3, #2
 8010bda:	4413      	add	r3, r2
 8010bdc:	685b      	ldr	r3, [r3, #4]
 8010bde:	68db      	ldr	r3, [r3, #12]
 8010be0:	68fa      	ldr	r2, [r7, #12]
 8010be2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8010be6:	68fa      	ldr	r2, [r7, #12]
 8010be8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8010bec:	4611      	mov	r1, r2
 8010bee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010bf0:	2300      	movs	r3, #0
}
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	3710      	adds	r7, #16
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	bd80      	pop	{r7, pc}

08010bfa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010bfa:	b580      	push	{r7, lr}
 8010bfc:	b084      	sub	sp, #16
 8010bfe:	af00      	add	r7, sp, #0
 8010c00:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	32b0      	adds	r2, #176	; 0xb0
 8010c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c10:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d101      	bne.n	8010c1c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010c18:	2303      	movs	r3, #3
 8010c1a:	e025      	b.n	8010c68 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010c22:	687a      	ldr	r2, [r7, #4]
 8010c24:	33b0      	adds	r3, #176	; 0xb0
 8010c26:	009b      	lsls	r3, r3, #2
 8010c28:	4413      	add	r3, r2
 8010c2a:	685b      	ldr	r3, [r3, #4]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d01a      	beq.n	8010c66 <USBD_CDC_EP0_RxReady+0x6c>
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010c36:	2bff      	cmp	r3, #255	; 0xff
 8010c38:	d015      	beq.n	8010c66 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010c40:	687a      	ldr	r2, [r7, #4]
 8010c42:	33b0      	adds	r3, #176	; 0xb0
 8010c44:	009b      	lsls	r3, r3, #2
 8010c46:	4413      	add	r3, r2
 8010c48:	685b      	ldr	r3, [r3, #4]
 8010c4a:	689b      	ldr	r3, [r3, #8]
 8010c4c:	68fa      	ldr	r2, [r7, #12]
 8010c4e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8010c52:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8010c54:	68fa      	ldr	r2, [r7, #12]
 8010c56:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010c5a:	b292      	uxth	r2, r2
 8010c5c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	22ff      	movs	r2, #255	; 0xff
 8010c62:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8010c66:	2300      	movs	r3, #0
}
 8010c68:	4618      	mov	r0, r3
 8010c6a:	3710      	adds	r7, #16
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	bd80      	pop	{r7, pc}

08010c70 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b086      	sub	sp, #24
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010c78:	2182      	movs	r1, #130	; 0x82
 8010c7a:	4818      	ldr	r0, [pc, #96]	; (8010cdc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010c7c:	f000 fd4f 	bl	801171e <USBD_GetEpDesc>
 8010c80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010c82:	2101      	movs	r1, #1
 8010c84:	4815      	ldr	r0, [pc, #84]	; (8010cdc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010c86:	f000 fd4a 	bl	801171e <USBD_GetEpDesc>
 8010c8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010c8c:	2181      	movs	r1, #129	; 0x81
 8010c8e:	4813      	ldr	r0, [pc, #76]	; (8010cdc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010c90:	f000 fd45 	bl	801171e <USBD_GetEpDesc>
 8010c94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010c96:	697b      	ldr	r3, [r7, #20]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d002      	beq.n	8010ca2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010c9c:	697b      	ldr	r3, [r7, #20]
 8010c9e:	2210      	movs	r2, #16
 8010ca0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010ca2:	693b      	ldr	r3, [r7, #16]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d006      	beq.n	8010cb6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010ca8:	693b      	ldr	r3, [r7, #16]
 8010caa:	2200      	movs	r2, #0
 8010cac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010cb0:	711a      	strb	r2, [r3, #4]
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d006      	beq.n	8010cca <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010cc4:	711a      	strb	r2, [r3, #4]
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	2243      	movs	r2, #67	; 0x43
 8010cce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010cd0:	4b02      	ldr	r3, [pc, #8]	; (8010cdc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	3718      	adds	r7, #24
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	bd80      	pop	{r7, pc}
 8010cda:	bf00      	nop
 8010cdc:	24000054 	.word	0x24000054

08010ce0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b086      	sub	sp, #24
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010ce8:	2182      	movs	r1, #130	; 0x82
 8010cea:	4818      	ldr	r0, [pc, #96]	; (8010d4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010cec:	f000 fd17 	bl	801171e <USBD_GetEpDesc>
 8010cf0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010cf2:	2101      	movs	r1, #1
 8010cf4:	4815      	ldr	r0, [pc, #84]	; (8010d4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010cf6:	f000 fd12 	bl	801171e <USBD_GetEpDesc>
 8010cfa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010cfc:	2181      	movs	r1, #129	; 0x81
 8010cfe:	4813      	ldr	r0, [pc, #76]	; (8010d4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010d00:	f000 fd0d 	bl	801171e <USBD_GetEpDesc>
 8010d04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010d06:	697b      	ldr	r3, [r7, #20]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d002      	beq.n	8010d12 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8010d0c:	697b      	ldr	r3, [r7, #20]
 8010d0e:	2210      	movs	r2, #16
 8010d10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010d12:	693b      	ldr	r3, [r7, #16]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d006      	beq.n	8010d26 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010d18:	693b      	ldr	r3, [r7, #16]
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	711a      	strb	r2, [r3, #4]
 8010d1e:	2200      	movs	r2, #0
 8010d20:	f042 0202 	orr.w	r2, r2, #2
 8010d24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d006      	beq.n	8010d3a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	2200      	movs	r2, #0
 8010d30:	711a      	strb	r2, [r3, #4]
 8010d32:	2200      	movs	r2, #0
 8010d34:	f042 0202 	orr.w	r2, r2, #2
 8010d38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	2243      	movs	r2, #67	; 0x43
 8010d3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010d40:	4b02      	ldr	r3, [pc, #8]	; (8010d4c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8010d42:	4618      	mov	r0, r3
 8010d44:	3718      	adds	r7, #24
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd80      	pop	{r7, pc}
 8010d4a:	bf00      	nop
 8010d4c:	24000054 	.word	0x24000054

08010d50 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b086      	sub	sp, #24
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010d58:	2182      	movs	r1, #130	; 0x82
 8010d5a:	4818      	ldr	r0, [pc, #96]	; (8010dbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010d5c:	f000 fcdf 	bl	801171e <USBD_GetEpDesc>
 8010d60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010d62:	2101      	movs	r1, #1
 8010d64:	4815      	ldr	r0, [pc, #84]	; (8010dbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010d66:	f000 fcda 	bl	801171e <USBD_GetEpDesc>
 8010d6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010d6c:	2181      	movs	r1, #129	; 0x81
 8010d6e:	4813      	ldr	r0, [pc, #76]	; (8010dbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010d70:	f000 fcd5 	bl	801171e <USBD_GetEpDesc>
 8010d74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010d76:	697b      	ldr	r3, [r7, #20]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d002      	beq.n	8010d82 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010d7c:	697b      	ldr	r3, [r7, #20]
 8010d7e:	2210      	movs	r2, #16
 8010d80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010d82:	693b      	ldr	r3, [r7, #16]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d006      	beq.n	8010d96 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010d88:	693b      	ldr	r3, [r7, #16]
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010d90:	711a      	strb	r2, [r3, #4]
 8010d92:	2200      	movs	r2, #0
 8010d94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d006      	beq.n	8010daa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	2200      	movs	r2, #0
 8010da0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010da4:	711a      	strb	r2, [r3, #4]
 8010da6:	2200      	movs	r2, #0
 8010da8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	2243      	movs	r2, #67	; 0x43
 8010dae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010db0:	4b02      	ldr	r3, [pc, #8]	; (8010dbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8010db2:	4618      	mov	r0, r3
 8010db4:	3718      	adds	r7, #24
 8010db6:	46bd      	mov	sp, r7
 8010db8:	bd80      	pop	{r7, pc}
 8010dba:	bf00      	nop
 8010dbc:	24000054 	.word	0x24000054

08010dc0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010dc0:	b480      	push	{r7}
 8010dc2:	b083      	sub	sp, #12
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	220a      	movs	r2, #10
 8010dcc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010dce:	4b03      	ldr	r3, [pc, #12]	; (8010ddc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	370c      	adds	r7, #12
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dda:	4770      	bx	lr
 8010ddc:	24000010 	.word	0x24000010

08010de0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010de0:	b480      	push	{r7}
 8010de2:	b083      	sub	sp, #12
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]
 8010de8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010dea:	683b      	ldr	r3, [r7, #0]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d101      	bne.n	8010df4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010df0:	2303      	movs	r3, #3
 8010df2:	e009      	b.n	8010e08 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010dfa:	687a      	ldr	r2, [r7, #4]
 8010dfc:	33b0      	adds	r3, #176	; 0xb0
 8010dfe:	009b      	lsls	r3, r3, #2
 8010e00:	4413      	add	r3, r2
 8010e02:	683a      	ldr	r2, [r7, #0]
 8010e04:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8010e06:	2300      	movs	r3, #0
}
 8010e08:	4618      	mov	r0, r3
 8010e0a:	370c      	adds	r7, #12
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e12:	4770      	bx	lr

08010e14 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010e14:	b480      	push	{r7}
 8010e16:	b087      	sub	sp, #28
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	60f8      	str	r0, [r7, #12]
 8010e1c:	60b9      	str	r1, [r7, #8]
 8010e1e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	32b0      	adds	r2, #176	; 0xb0
 8010e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e2e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8010e30:	697b      	ldr	r3, [r7, #20]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d101      	bne.n	8010e3a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8010e36:	2303      	movs	r3, #3
 8010e38:	e008      	b.n	8010e4c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8010e3a:	697b      	ldr	r3, [r7, #20]
 8010e3c:	68ba      	ldr	r2, [r7, #8]
 8010e3e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8010e42:	697b      	ldr	r3, [r7, #20]
 8010e44:	687a      	ldr	r2, [r7, #4]
 8010e46:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8010e4a:	2300      	movs	r3, #0
}
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	371c      	adds	r7, #28
 8010e50:	46bd      	mov	sp, r7
 8010e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e56:	4770      	bx	lr

08010e58 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010e58:	b480      	push	{r7}
 8010e5a:	b085      	sub	sp, #20
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
 8010e60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	32b0      	adds	r2, #176	; 0xb0
 8010e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d101      	bne.n	8010e7c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8010e78:	2303      	movs	r3, #3
 8010e7a:	e004      	b.n	8010e86 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	683a      	ldr	r2, [r7, #0]
 8010e80:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8010e84:	2300      	movs	r3, #0
}
 8010e86:	4618      	mov	r0, r3
 8010e88:	3714      	adds	r7, #20
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e90:	4770      	bx	lr
	...

08010e94 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b084      	sub	sp, #16
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	32b0      	adds	r2, #176	; 0xb0
 8010ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010eaa:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8010eac:	2301      	movs	r3, #1
 8010eae:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	32b0      	adds	r2, #176	; 0xb0
 8010eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d101      	bne.n	8010ec6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8010ec2:	2303      	movs	r3, #3
 8010ec4:	e025      	b.n	8010f12 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8010ec6:	68bb      	ldr	r3, [r7, #8]
 8010ec8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d11f      	bne.n	8010f10 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8010ed0:	68bb      	ldr	r3, [r7, #8]
 8010ed2:	2201      	movs	r2, #1
 8010ed4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8010ed8:	4b10      	ldr	r3, [pc, #64]	; (8010f1c <USBD_CDC_TransmitPacket+0x88>)
 8010eda:	781b      	ldrb	r3, [r3, #0]
 8010edc:	f003 020f 	and.w	r2, r3, #15
 8010ee0:	68bb      	ldr	r3, [r7, #8]
 8010ee2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8010ee6:	6878      	ldr	r0, [r7, #4]
 8010ee8:	4613      	mov	r3, r2
 8010eea:	009b      	lsls	r3, r3, #2
 8010eec:	4413      	add	r3, r2
 8010eee:	009b      	lsls	r3, r3, #2
 8010ef0:	4403      	add	r3, r0
 8010ef2:	3318      	adds	r3, #24
 8010ef4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8010ef6:	4b09      	ldr	r3, [pc, #36]	; (8010f1c <USBD_CDC_TransmitPacket+0x88>)
 8010ef8:	7819      	ldrb	r1, [r3, #0]
 8010efa:	68bb      	ldr	r3, [r7, #8]
 8010efc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8010f00:	68bb      	ldr	r3, [r7, #8]
 8010f02:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010f06:	6878      	ldr	r0, [r7, #4]
 8010f08:	f002 f853 	bl	8012fb2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8010f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f12:	4618      	mov	r0, r3
 8010f14:	3710      	adds	r7, #16
 8010f16:	46bd      	mov	sp, r7
 8010f18:	bd80      	pop	{r7, pc}
 8010f1a:	bf00      	nop
 8010f1c:	24000097 	.word	0x24000097

08010f20 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b084      	sub	sp, #16
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	32b0      	adds	r2, #176	; 0xb0
 8010f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f36:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	32b0      	adds	r2, #176	; 0xb0
 8010f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d101      	bne.n	8010f4e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8010f4a:	2303      	movs	r3, #3
 8010f4c:	e018      	b.n	8010f80 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	7c1b      	ldrb	r3, [r3, #16]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d10a      	bne.n	8010f6c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010f56:	4b0c      	ldr	r3, [pc, #48]	; (8010f88 <USBD_CDC_ReceivePacket+0x68>)
 8010f58:	7819      	ldrb	r1, [r3, #0]
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010f60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010f64:	6878      	ldr	r0, [r7, #4]
 8010f66:	f002 f845 	bl	8012ff4 <USBD_LL_PrepareReceive>
 8010f6a:	e008      	b.n	8010f7e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010f6c:	4b06      	ldr	r3, [pc, #24]	; (8010f88 <USBD_CDC_ReceivePacket+0x68>)
 8010f6e:	7819      	ldrb	r1, [r3, #0]
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010f76:	2340      	movs	r3, #64	; 0x40
 8010f78:	6878      	ldr	r0, [r7, #4]
 8010f7a:	f002 f83b 	bl	8012ff4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010f7e:	2300      	movs	r3, #0
}
 8010f80:	4618      	mov	r0, r3
 8010f82:	3710      	adds	r7, #16
 8010f84:	46bd      	mov	sp, r7
 8010f86:	bd80      	pop	{r7, pc}
 8010f88:	24000098 	.word	0x24000098

08010f8c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b086      	sub	sp, #24
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	60f8      	str	r0, [r7, #12]
 8010f94:	60b9      	str	r1, [r7, #8]
 8010f96:	4613      	mov	r3, r2
 8010f98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d101      	bne.n	8010fa4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010fa0:	2303      	movs	r3, #3
 8010fa2:	e01f      	b.n	8010fe4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	2200      	movs	r2, #0
 8010fa8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	2200      	movs	r2, #0
 8010fb0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	2200      	movs	r2, #0
 8010fb8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010fbc:	68bb      	ldr	r3, [r7, #8]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d003      	beq.n	8010fca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	68ba      	ldr	r2, [r7, #8]
 8010fc6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	2201      	movs	r2, #1
 8010fce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	79fa      	ldrb	r2, [r7, #7]
 8010fd6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010fd8:	68f8      	ldr	r0, [r7, #12]
 8010fda:	f001 feb1 	bl	8012d40 <USBD_LL_Init>
 8010fde:	4603      	mov	r3, r0
 8010fe0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	3718      	adds	r7, #24
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	bd80      	pop	{r7, pc}

08010fec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b084      	sub	sp, #16
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
 8010ff4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010ffa:	683b      	ldr	r3, [r7, #0]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d101      	bne.n	8011004 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011000:	2303      	movs	r3, #3
 8011002:	e025      	b.n	8011050 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	683a      	ldr	r2, [r7, #0]
 8011008:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	32ae      	adds	r2, #174	; 0xae
 8011016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801101a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801101c:	2b00      	cmp	r3, #0
 801101e:	d00f      	beq.n	8011040 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	32ae      	adds	r2, #174	; 0xae
 801102a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801102e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011030:	f107 020e 	add.w	r2, r7, #14
 8011034:	4610      	mov	r0, r2
 8011036:	4798      	blx	r3
 8011038:	4602      	mov	r2, r0
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8011046:	1c5a      	adds	r2, r3, #1
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 801104e:	2300      	movs	r3, #0
}
 8011050:	4618      	mov	r0, r3
 8011052:	3710      	adds	r7, #16
 8011054:	46bd      	mov	sp, r7
 8011056:	bd80      	pop	{r7, pc}

08011058 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b082      	sub	sp, #8
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011060:	6878      	ldr	r0, [r7, #4]
 8011062:	f001 febd 	bl	8012de0 <USBD_LL_Start>
 8011066:	4603      	mov	r3, r0
}
 8011068:	4618      	mov	r0, r3
 801106a:	3708      	adds	r7, #8
 801106c:	46bd      	mov	sp, r7
 801106e:	bd80      	pop	{r7, pc}

08011070 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8011070:	b480      	push	{r7}
 8011072:	b083      	sub	sp, #12
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011078:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801107a:	4618      	mov	r0, r3
 801107c:	370c      	adds	r7, #12
 801107e:	46bd      	mov	sp, r7
 8011080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011084:	4770      	bx	lr

08011086 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011086:	b580      	push	{r7, lr}
 8011088:	b084      	sub	sp, #16
 801108a:	af00      	add	r7, sp, #0
 801108c:	6078      	str	r0, [r7, #4]
 801108e:	460b      	mov	r3, r1
 8011090:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011092:	2300      	movs	r3, #0
 8011094:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801109c:	2b00      	cmp	r3, #0
 801109e:	d009      	beq.n	80110b4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	78fa      	ldrb	r2, [r7, #3]
 80110aa:	4611      	mov	r1, r2
 80110ac:	6878      	ldr	r0, [r7, #4]
 80110ae:	4798      	blx	r3
 80110b0:	4603      	mov	r3, r0
 80110b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80110b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80110b6:	4618      	mov	r0, r3
 80110b8:	3710      	adds	r7, #16
 80110ba:	46bd      	mov	sp, r7
 80110bc:	bd80      	pop	{r7, pc}

080110be <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80110be:	b580      	push	{r7, lr}
 80110c0:	b084      	sub	sp, #16
 80110c2:	af00      	add	r7, sp, #0
 80110c4:	6078      	str	r0, [r7, #4]
 80110c6:	460b      	mov	r3, r1
 80110c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80110ca:	2300      	movs	r3, #0
 80110cc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80110d4:	685b      	ldr	r3, [r3, #4]
 80110d6:	78fa      	ldrb	r2, [r7, #3]
 80110d8:	4611      	mov	r1, r2
 80110da:	6878      	ldr	r0, [r7, #4]
 80110dc:	4798      	blx	r3
 80110de:	4603      	mov	r3, r0
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d001      	beq.n	80110e8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80110e4:	2303      	movs	r3, #3
 80110e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80110e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80110ea:	4618      	mov	r0, r3
 80110ec:	3710      	adds	r7, #16
 80110ee:	46bd      	mov	sp, r7
 80110f0:	bd80      	pop	{r7, pc}

080110f2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80110f2:	b580      	push	{r7, lr}
 80110f4:	b084      	sub	sp, #16
 80110f6:	af00      	add	r7, sp, #0
 80110f8:	6078      	str	r0, [r7, #4]
 80110fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011102:	6839      	ldr	r1, [r7, #0]
 8011104:	4618      	mov	r0, r3
 8011106:	f001 f908 	bl	801231a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	2201      	movs	r2, #1
 801110e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011118:	461a      	mov	r2, r3
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011126:	f003 031f 	and.w	r3, r3, #31
 801112a:	2b02      	cmp	r3, #2
 801112c:	d01a      	beq.n	8011164 <USBD_LL_SetupStage+0x72>
 801112e:	2b02      	cmp	r3, #2
 8011130:	d822      	bhi.n	8011178 <USBD_LL_SetupStage+0x86>
 8011132:	2b00      	cmp	r3, #0
 8011134:	d002      	beq.n	801113c <USBD_LL_SetupStage+0x4a>
 8011136:	2b01      	cmp	r3, #1
 8011138:	d00a      	beq.n	8011150 <USBD_LL_SetupStage+0x5e>
 801113a:	e01d      	b.n	8011178 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011142:	4619      	mov	r1, r3
 8011144:	6878      	ldr	r0, [r7, #4]
 8011146:	f000 fb5f 	bl	8011808 <USBD_StdDevReq>
 801114a:	4603      	mov	r3, r0
 801114c:	73fb      	strb	r3, [r7, #15]
      break;
 801114e:	e020      	b.n	8011192 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011156:	4619      	mov	r1, r3
 8011158:	6878      	ldr	r0, [r7, #4]
 801115a:	f000 fbc7 	bl	80118ec <USBD_StdItfReq>
 801115e:	4603      	mov	r3, r0
 8011160:	73fb      	strb	r3, [r7, #15]
      break;
 8011162:	e016      	b.n	8011192 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801116a:	4619      	mov	r1, r3
 801116c:	6878      	ldr	r0, [r7, #4]
 801116e:	f000 fc29 	bl	80119c4 <USBD_StdEPReq>
 8011172:	4603      	mov	r3, r0
 8011174:	73fb      	strb	r3, [r7, #15]
      break;
 8011176:	e00c      	b.n	8011192 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801117e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011182:	b2db      	uxtb	r3, r3
 8011184:	4619      	mov	r1, r3
 8011186:	6878      	ldr	r0, [r7, #4]
 8011188:	f001 fe8a 	bl	8012ea0 <USBD_LL_StallEP>
 801118c:	4603      	mov	r3, r0
 801118e:	73fb      	strb	r3, [r7, #15]
      break;
 8011190:	bf00      	nop
  }

  return ret;
 8011192:	7bfb      	ldrb	r3, [r7, #15]
}
 8011194:	4618      	mov	r0, r3
 8011196:	3710      	adds	r7, #16
 8011198:	46bd      	mov	sp, r7
 801119a:	bd80      	pop	{r7, pc}

0801119c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801119c:	b580      	push	{r7, lr}
 801119e:	b086      	sub	sp, #24
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	60f8      	str	r0, [r7, #12]
 80111a4:	460b      	mov	r3, r1
 80111a6:	607a      	str	r2, [r7, #4]
 80111a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80111aa:	2300      	movs	r3, #0
 80111ac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80111ae:	7afb      	ldrb	r3, [r7, #11]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d16e      	bne.n	8011292 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80111ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80111c2:	2b03      	cmp	r3, #3
 80111c4:	f040 8098 	bne.w	80112f8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80111c8:	693b      	ldr	r3, [r7, #16]
 80111ca:	689a      	ldr	r2, [r3, #8]
 80111cc:	693b      	ldr	r3, [r7, #16]
 80111ce:	68db      	ldr	r3, [r3, #12]
 80111d0:	429a      	cmp	r2, r3
 80111d2:	d913      	bls.n	80111fc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80111d4:	693b      	ldr	r3, [r7, #16]
 80111d6:	689a      	ldr	r2, [r3, #8]
 80111d8:	693b      	ldr	r3, [r7, #16]
 80111da:	68db      	ldr	r3, [r3, #12]
 80111dc:	1ad2      	subs	r2, r2, r3
 80111de:	693b      	ldr	r3, [r7, #16]
 80111e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80111e2:	693b      	ldr	r3, [r7, #16]
 80111e4:	68da      	ldr	r2, [r3, #12]
 80111e6:	693b      	ldr	r3, [r7, #16]
 80111e8:	689b      	ldr	r3, [r3, #8]
 80111ea:	4293      	cmp	r3, r2
 80111ec:	bf28      	it	cs
 80111ee:	4613      	movcs	r3, r2
 80111f0:	461a      	mov	r2, r3
 80111f2:	6879      	ldr	r1, [r7, #4]
 80111f4:	68f8      	ldr	r0, [r7, #12]
 80111f6:	f001 f984 	bl	8012502 <USBD_CtlContinueRx>
 80111fa:	e07d      	b.n	80112f8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011202:	f003 031f 	and.w	r3, r3, #31
 8011206:	2b02      	cmp	r3, #2
 8011208:	d014      	beq.n	8011234 <USBD_LL_DataOutStage+0x98>
 801120a:	2b02      	cmp	r3, #2
 801120c:	d81d      	bhi.n	801124a <USBD_LL_DataOutStage+0xae>
 801120e:	2b00      	cmp	r3, #0
 8011210:	d002      	beq.n	8011218 <USBD_LL_DataOutStage+0x7c>
 8011212:	2b01      	cmp	r3, #1
 8011214:	d003      	beq.n	801121e <USBD_LL_DataOutStage+0x82>
 8011216:	e018      	b.n	801124a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8011218:	2300      	movs	r3, #0
 801121a:	75bb      	strb	r3, [r7, #22]
            break;
 801121c:	e018      	b.n	8011250 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8011224:	b2db      	uxtb	r3, r3
 8011226:	4619      	mov	r1, r3
 8011228:	68f8      	ldr	r0, [r7, #12]
 801122a:	f000 fa5e 	bl	80116ea <USBD_CoreFindIF>
 801122e:	4603      	mov	r3, r0
 8011230:	75bb      	strb	r3, [r7, #22]
            break;
 8011232:	e00d      	b.n	8011250 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801123a:	b2db      	uxtb	r3, r3
 801123c:	4619      	mov	r1, r3
 801123e:	68f8      	ldr	r0, [r7, #12]
 8011240:	f000 fa60 	bl	8011704 <USBD_CoreFindEP>
 8011244:	4603      	mov	r3, r0
 8011246:	75bb      	strb	r3, [r7, #22]
            break;
 8011248:	e002      	b.n	8011250 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801124a:	2300      	movs	r3, #0
 801124c:	75bb      	strb	r3, [r7, #22]
            break;
 801124e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8011250:	7dbb      	ldrb	r3, [r7, #22]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d119      	bne.n	801128a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801125c:	b2db      	uxtb	r3, r3
 801125e:	2b03      	cmp	r3, #3
 8011260:	d113      	bne.n	801128a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8011262:	7dba      	ldrb	r2, [r7, #22]
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	32ae      	adds	r2, #174	; 0xae
 8011268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801126c:	691b      	ldr	r3, [r3, #16]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d00b      	beq.n	801128a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8011272:	7dba      	ldrb	r2, [r7, #22]
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801127a:	7dba      	ldrb	r2, [r7, #22]
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	32ae      	adds	r2, #174	; 0xae
 8011280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011284:	691b      	ldr	r3, [r3, #16]
 8011286:	68f8      	ldr	r0, [r7, #12]
 8011288:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801128a:	68f8      	ldr	r0, [r7, #12]
 801128c:	f001 f94a 	bl	8012524 <USBD_CtlSendStatus>
 8011290:	e032      	b.n	80112f8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8011292:	7afb      	ldrb	r3, [r7, #11]
 8011294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011298:	b2db      	uxtb	r3, r3
 801129a:	4619      	mov	r1, r3
 801129c:	68f8      	ldr	r0, [r7, #12]
 801129e:	f000 fa31 	bl	8011704 <USBD_CoreFindEP>
 80112a2:	4603      	mov	r3, r0
 80112a4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80112a6:	7dbb      	ldrb	r3, [r7, #22]
 80112a8:	2bff      	cmp	r3, #255	; 0xff
 80112aa:	d025      	beq.n	80112f8 <USBD_LL_DataOutStage+0x15c>
 80112ac:	7dbb      	ldrb	r3, [r7, #22]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d122      	bne.n	80112f8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80112b8:	b2db      	uxtb	r3, r3
 80112ba:	2b03      	cmp	r3, #3
 80112bc:	d117      	bne.n	80112ee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80112be:	7dba      	ldrb	r2, [r7, #22]
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	32ae      	adds	r2, #174	; 0xae
 80112c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112c8:	699b      	ldr	r3, [r3, #24]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d00f      	beq.n	80112ee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80112ce:	7dba      	ldrb	r2, [r7, #22]
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80112d6:	7dba      	ldrb	r2, [r7, #22]
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	32ae      	adds	r2, #174	; 0xae
 80112dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112e0:	699b      	ldr	r3, [r3, #24]
 80112e2:	7afa      	ldrb	r2, [r7, #11]
 80112e4:	4611      	mov	r1, r2
 80112e6:	68f8      	ldr	r0, [r7, #12]
 80112e8:	4798      	blx	r3
 80112ea:	4603      	mov	r3, r0
 80112ec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80112ee:	7dfb      	ldrb	r3, [r7, #23]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d001      	beq.n	80112f8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80112f4:	7dfb      	ldrb	r3, [r7, #23]
 80112f6:	e000      	b.n	80112fa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80112f8:	2300      	movs	r3, #0
}
 80112fa:	4618      	mov	r0, r3
 80112fc:	3718      	adds	r7, #24
 80112fe:	46bd      	mov	sp, r7
 8011300:	bd80      	pop	{r7, pc}

08011302 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011302:	b580      	push	{r7, lr}
 8011304:	b086      	sub	sp, #24
 8011306:	af00      	add	r7, sp, #0
 8011308:	60f8      	str	r0, [r7, #12]
 801130a:	460b      	mov	r3, r1
 801130c:	607a      	str	r2, [r7, #4]
 801130e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8011310:	7afb      	ldrb	r3, [r7, #11]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d16f      	bne.n	80113f6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	3314      	adds	r3, #20
 801131a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011322:	2b02      	cmp	r3, #2
 8011324:	d15a      	bne.n	80113dc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8011326:	693b      	ldr	r3, [r7, #16]
 8011328:	689a      	ldr	r2, [r3, #8]
 801132a:	693b      	ldr	r3, [r7, #16]
 801132c:	68db      	ldr	r3, [r3, #12]
 801132e:	429a      	cmp	r2, r3
 8011330:	d914      	bls.n	801135c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011332:	693b      	ldr	r3, [r7, #16]
 8011334:	689a      	ldr	r2, [r3, #8]
 8011336:	693b      	ldr	r3, [r7, #16]
 8011338:	68db      	ldr	r3, [r3, #12]
 801133a:	1ad2      	subs	r2, r2, r3
 801133c:	693b      	ldr	r3, [r7, #16]
 801133e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011340:	693b      	ldr	r3, [r7, #16]
 8011342:	689b      	ldr	r3, [r3, #8]
 8011344:	461a      	mov	r2, r3
 8011346:	6879      	ldr	r1, [r7, #4]
 8011348:	68f8      	ldr	r0, [r7, #12]
 801134a:	f001 f8ac 	bl	80124a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801134e:	2300      	movs	r3, #0
 8011350:	2200      	movs	r2, #0
 8011352:	2100      	movs	r1, #0
 8011354:	68f8      	ldr	r0, [r7, #12]
 8011356:	f001 fe4d 	bl	8012ff4 <USBD_LL_PrepareReceive>
 801135a:	e03f      	b.n	80113dc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801135c:	693b      	ldr	r3, [r7, #16]
 801135e:	68da      	ldr	r2, [r3, #12]
 8011360:	693b      	ldr	r3, [r7, #16]
 8011362:	689b      	ldr	r3, [r3, #8]
 8011364:	429a      	cmp	r2, r3
 8011366:	d11c      	bne.n	80113a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011368:	693b      	ldr	r3, [r7, #16]
 801136a:	685a      	ldr	r2, [r3, #4]
 801136c:	693b      	ldr	r3, [r7, #16]
 801136e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011370:	429a      	cmp	r2, r3
 8011372:	d316      	bcc.n	80113a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011374:	693b      	ldr	r3, [r7, #16]
 8011376:	685a      	ldr	r2, [r3, #4]
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801137e:	429a      	cmp	r2, r3
 8011380:	d20f      	bcs.n	80113a2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011382:	2200      	movs	r2, #0
 8011384:	2100      	movs	r1, #0
 8011386:	68f8      	ldr	r0, [r7, #12]
 8011388:	f001 f88d 	bl	80124a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	2200      	movs	r2, #0
 8011390:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011394:	2300      	movs	r3, #0
 8011396:	2200      	movs	r2, #0
 8011398:	2100      	movs	r1, #0
 801139a:	68f8      	ldr	r0, [r7, #12]
 801139c:	f001 fe2a 	bl	8012ff4 <USBD_LL_PrepareReceive>
 80113a0:	e01c      	b.n	80113dc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80113a8:	b2db      	uxtb	r3, r3
 80113aa:	2b03      	cmp	r3, #3
 80113ac:	d10f      	bne.n	80113ce <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113b4:	68db      	ldr	r3, [r3, #12]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d009      	beq.n	80113ce <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	2200      	movs	r2, #0
 80113be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113c8:	68db      	ldr	r3, [r3, #12]
 80113ca:	68f8      	ldr	r0, [r7, #12]
 80113cc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80113ce:	2180      	movs	r1, #128	; 0x80
 80113d0:	68f8      	ldr	r0, [r7, #12]
 80113d2:	f001 fd65 	bl	8012ea0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80113d6:	68f8      	ldr	r0, [r7, #12]
 80113d8:	f001 f8b7 	bl	801254a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d03a      	beq.n	801145c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80113e6:	68f8      	ldr	r0, [r7, #12]
 80113e8:	f7ff fe42 	bl	8011070 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	2200      	movs	r2, #0
 80113f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80113f4:	e032      	b.n	801145c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80113f6:	7afb      	ldrb	r3, [r7, #11]
 80113f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80113fc:	b2db      	uxtb	r3, r3
 80113fe:	4619      	mov	r1, r3
 8011400:	68f8      	ldr	r0, [r7, #12]
 8011402:	f000 f97f 	bl	8011704 <USBD_CoreFindEP>
 8011406:	4603      	mov	r3, r0
 8011408:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801140a:	7dfb      	ldrb	r3, [r7, #23]
 801140c:	2bff      	cmp	r3, #255	; 0xff
 801140e:	d025      	beq.n	801145c <USBD_LL_DataInStage+0x15a>
 8011410:	7dfb      	ldrb	r3, [r7, #23]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d122      	bne.n	801145c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801141c:	b2db      	uxtb	r3, r3
 801141e:	2b03      	cmp	r3, #3
 8011420:	d11c      	bne.n	801145c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8011422:	7dfa      	ldrb	r2, [r7, #23]
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	32ae      	adds	r2, #174	; 0xae
 8011428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801142c:	695b      	ldr	r3, [r3, #20]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d014      	beq.n	801145c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8011432:	7dfa      	ldrb	r2, [r7, #23]
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801143a:	7dfa      	ldrb	r2, [r7, #23]
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	32ae      	adds	r2, #174	; 0xae
 8011440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011444:	695b      	ldr	r3, [r3, #20]
 8011446:	7afa      	ldrb	r2, [r7, #11]
 8011448:	4611      	mov	r1, r2
 801144a:	68f8      	ldr	r0, [r7, #12]
 801144c:	4798      	blx	r3
 801144e:	4603      	mov	r3, r0
 8011450:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8011452:	7dbb      	ldrb	r3, [r7, #22]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d001      	beq.n	801145c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8011458:	7dbb      	ldrb	r3, [r7, #22]
 801145a:	e000      	b.n	801145e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801145c:	2300      	movs	r3, #0
}
 801145e:	4618      	mov	r0, r3
 8011460:	3718      	adds	r7, #24
 8011462:	46bd      	mov	sp, r7
 8011464:	bd80      	pop	{r7, pc}

08011466 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011466:	b580      	push	{r7, lr}
 8011468:	b084      	sub	sp, #16
 801146a:	af00      	add	r7, sp, #0
 801146c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801146e:	2300      	movs	r3, #0
 8011470:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	2201      	movs	r2, #1
 8011476:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	2200      	movs	r2, #0
 801147e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	2200      	movs	r2, #0
 8011486:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	2200      	movs	r2, #0
 801148c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	2200      	movs	r2, #0
 8011494:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d014      	beq.n	80114cc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114a8:	685b      	ldr	r3, [r3, #4]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d00e      	beq.n	80114cc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114b4:	685b      	ldr	r3, [r3, #4]
 80114b6:	687a      	ldr	r2, [r7, #4]
 80114b8:	6852      	ldr	r2, [r2, #4]
 80114ba:	b2d2      	uxtb	r2, r2
 80114bc:	4611      	mov	r1, r2
 80114be:	6878      	ldr	r0, [r7, #4]
 80114c0:	4798      	blx	r3
 80114c2:	4603      	mov	r3, r0
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d001      	beq.n	80114cc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80114c8:	2303      	movs	r3, #3
 80114ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80114cc:	2340      	movs	r3, #64	; 0x40
 80114ce:	2200      	movs	r2, #0
 80114d0:	2100      	movs	r1, #0
 80114d2:	6878      	ldr	r0, [r7, #4]
 80114d4:	f001 fc9f 	bl	8012e16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	2201      	movs	r2, #1
 80114dc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	2240      	movs	r2, #64	; 0x40
 80114e4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80114e8:	2340      	movs	r3, #64	; 0x40
 80114ea:	2200      	movs	r2, #0
 80114ec:	2180      	movs	r1, #128	; 0x80
 80114ee:	6878      	ldr	r0, [r7, #4]
 80114f0:	f001 fc91 	bl	8012e16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	2201      	movs	r2, #1
 80114f8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	2240      	movs	r2, #64	; 0x40
 80114fe:	621a      	str	r2, [r3, #32]

  return ret;
 8011500:	7bfb      	ldrb	r3, [r7, #15]
}
 8011502:	4618      	mov	r0, r3
 8011504:	3710      	adds	r7, #16
 8011506:	46bd      	mov	sp, r7
 8011508:	bd80      	pop	{r7, pc}

0801150a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801150a:	b480      	push	{r7}
 801150c:	b083      	sub	sp, #12
 801150e:	af00      	add	r7, sp, #0
 8011510:	6078      	str	r0, [r7, #4]
 8011512:	460b      	mov	r3, r1
 8011514:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	78fa      	ldrb	r2, [r7, #3]
 801151a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801151c:	2300      	movs	r3, #0
}
 801151e:	4618      	mov	r0, r3
 8011520:	370c      	adds	r7, #12
 8011522:	46bd      	mov	sp, r7
 8011524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011528:	4770      	bx	lr

0801152a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801152a:	b480      	push	{r7}
 801152c:	b083      	sub	sp, #12
 801152e:	af00      	add	r7, sp, #0
 8011530:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011538:	b2da      	uxtb	r2, r3
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	2204      	movs	r2, #4
 8011544:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011548:	2300      	movs	r3, #0
}
 801154a:	4618      	mov	r0, r3
 801154c:	370c      	adds	r7, #12
 801154e:	46bd      	mov	sp, r7
 8011550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011554:	4770      	bx	lr

08011556 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011556:	b480      	push	{r7}
 8011558:	b083      	sub	sp, #12
 801155a:	af00      	add	r7, sp, #0
 801155c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011564:	b2db      	uxtb	r3, r3
 8011566:	2b04      	cmp	r3, #4
 8011568:	d106      	bne.n	8011578 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8011570:	b2da      	uxtb	r2, r3
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011578:	2300      	movs	r3, #0
}
 801157a:	4618      	mov	r0, r3
 801157c:	370c      	adds	r7, #12
 801157e:	46bd      	mov	sp, r7
 8011580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011584:	4770      	bx	lr

08011586 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011586:	b580      	push	{r7, lr}
 8011588:	b082      	sub	sp, #8
 801158a:	af00      	add	r7, sp, #0
 801158c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011594:	b2db      	uxtb	r3, r3
 8011596:	2b03      	cmp	r3, #3
 8011598:	d110      	bne.n	80115bc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d00b      	beq.n	80115bc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115aa:	69db      	ldr	r3, [r3, #28]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d005      	beq.n	80115bc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115b6:	69db      	ldr	r3, [r3, #28]
 80115b8:	6878      	ldr	r0, [r7, #4]
 80115ba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80115bc:	2300      	movs	r3, #0
}
 80115be:	4618      	mov	r0, r3
 80115c0:	3708      	adds	r7, #8
 80115c2:	46bd      	mov	sp, r7
 80115c4:	bd80      	pop	{r7, pc}

080115c6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80115c6:	b580      	push	{r7, lr}
 80115c8:	b082      	sub	sp, #8
 80115ca:	af00      	add	r7, sp, #0
 80115cc:	6078      	str	r0, [r7, #4]
 80115ce:	460b      	mov	r3, r1
 80115d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	32ae      	adds	r2, #174	; 0xae
 80115dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d101      	bne.n	80115e8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80115e4:	2303      	movs	r3, #3
 80115e6:	e01c      	b.n	8011622 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80115ee:	b2db      	uxtb	r3, r3
 80115f0:	2b03      	cmp	r3, #3
 80115f2:	d115      	bne.n	8011620 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	32ae      	adds	r2, #174	; 0xae
 80115fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011602:	6a1b      	ldr	r3, [r3, #32]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d00b      	beq.n	8011620 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	32ae      	adds	r2, #174	; 0xae
 8011612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011616:	6a1b      	ldr	r3, [r3, #32]
 8011618:	78fa      	ldrb	r2, [r7, #3]
 801161a:	4611      	mov	r1, r2
 801161c:	6878      	ldr	r0, [r7, #4]
 801161e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011620:	2300      	movs	r3, #0
}
 8011622:	4618      	mov	r0, r3
 8011624:	3708      	adds	r7, #8
 8011626:	46bd      	mov	sp, r7
 8011628:	bd80      	pop	{r7, pc}

0801162a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801162a:	b580      	push	{r7, lr}
 801162c:	b082      	sub	sp, #8
 801162e:	af00      	add	r7, sp, #0
 8011630:	6078      	str	r0, [r7, #4]
 8011632:	460b      	mov	r3, r1
 8011634:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	32ae      	adds	r2, #174	; 0xae
 8011640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d101      	bne.n	801164c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8011648:	2303      	movs	r3, #3
 801164a:	e01c      	b.n	8011686 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011652:	b2db      	uxtb	r3, r3
 8011654:	2b03      	cmp	r3, #3
 8011656:	d115      	bne.n	8011684 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	32ae      	adds	r2, #174	; 0xae
 8011662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011668:	2b00      	cmp	r3, #0
 801166a:	d00b      	beq.n	8011684 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	32ae      	adds	r2, #174	; 0xae
 8011676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801167a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801167c:	78fa      	ldrb	r2, [r7, #3]
 801167e:	4611      	mov	r1, r2
 8011680:	6878      	ldr	r0, [r7, #4]
 8011682:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011684:	2300      	movs	r3, #0
}
 8011686:	4618      	mov	r0, r3
 8011688:	3708      	adds	r7, #8
 801168a:	46bd      	mov	sp, r7
 801168c:	bd80      	pop	{r7, pc}

0801168e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801168e:	b480      	push	{r7}
 8011690:	b083      	sub	sp, #12
 8011692:	af00      	add	r7, sp, #0
 8011694:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011696:	2300      	movs	r3, #0
}
 8011698:	4618      	mov	r0, r3
 801169a:	370c      	adds	r7, #12
 801169c:	46bd      	mov	sp, r7
 801169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a2:	4770      	bx	lr

080116a4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b084      	sub	sp, #16
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80116ac:	2300      	movs	r3, #0
 80116ae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	2201      	movs	r2, #1
 80116b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d00e      	beq.n	80116e0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116c8:	685b      	ldr	r3, [r3, #4]
 80116ca:	687a      	ldr	r2, [r7, #4]
 80116cc:	6852      	ldr	r2, [r2, #4]
 80116ce:	b2d2      	uxtb	r2, r2
 80116d0:	4611      	mov	r1, r2
 80116d2:	6878      	ldr	r0, [r7, #4]
 80116d4:	4798      	blx	r3
 80116d6:	4603      	mov	r3, r0
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d001      	beq.n	80116e0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80116dc:	2303      	movs	r3, #3
 80116de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80116e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80116e2:	4618      	mov	r0, r3
 80116e4:	3710      	adds	r7, #16
 80116e6:	46bd      	mov	sp, r7
 80116e8:	bd80      	pop	{r7, pc}

080116ea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80116ea:	b480      	push	{r7}
 80116ec:	b083      	sub	sp, #12
 80116ee:	af00      	add	r7, sp, #0
 80116f0:	6078      	str	r0, [r7, #4]
 80116f2:	460b      	mov	r3, r1
 80116f4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80116f6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80116f8:	4618      	mov	r0, r3
 80116fa:	370c      	adds	r7, #12
 80116fc:	46bd      	mov	sp, r7
 80116fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011702:	4770      	bx	lr

08011704 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011704:	b480      	push	{r7}
 8011706:	b083      	sub	sp, #12
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
 801170c:	460b      	mov	r3, r1
 801170e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011710:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011712:	4618      	mov	r0, r3
 8011714:	370c      	adds	r7, #12
 8011716:	46bd      	mov	sp, r7
 8011718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171c:	4770      	bx	lr

0801171e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801171e:	b580      	push	{r7, lr}
 8011720:	b086      	sub	sp, #24
 8011722:	af00      	add	r7, sp, #0
 8011724:	6078      	str	r0, [r7, #4]
 8011726:	460b      	mov	r3, r1
 8011728:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8011732:	2300      	movs	r3, #0
 8011734:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	885b      	ldrh	r3, [r3, #2]
 801173a:	b29a      	uxth	r2, r3
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	781b      	ldrb	r3, [r3, #0]
 8011740:	b29b      	uxth	r3, r3
 8011742:	429a      	cmp	r2, r3
 8011744:	d920      	bls.n	8011788 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	781b      	ldrb	r3, [r3, #0]
 801174a:	b29b      	uxth	r3, r3
 801174c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801174e:	e013      	b.n	8011778 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8011750:	f107 030a 	add.w	r3, r7, #10
 8011754:	4619      	mov	r1, r3
 8011756:	6978      	ldr	r0, [r7, #20]
 8011758:	f000 f81b 	bl	8011792 <USBD_GetNextDesc>
 801175c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801175e:	697b      	ldr	r3, [r7, #20]
 8011760:	785b      	ldrb	r3, [r3, #1]
 8011762:	2b05      	cmp	r3, #5
 8011764:	d108      	bne.n	8011778 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8011766:	697b      	ldr	r3, [r7, #20]
 8011768:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801176a:	693b      	ldr	r3, [r7, #16]
 801176c:	789b      	ldrb	r3, [r3, #2]
 801176e:	78fa      	ldrb	r2, [r7, #3]
 8011770:	429a      	cmp	r2, r3
 8011772:	d008      	beq.n	8011786 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8011774:	2300      	movs	r3, #0
 8011776:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	885b      	ldrh	r3, [r3, #2]
 801177c:	b29a      	uxth	r2, r3
 801177e:	897b      	ldrh	r3, [r7, #10]
 8011780:	429a      	cmp	r2, r3
 8011782:	d8e5      	bhi.n	8011750 <USBD_GetEpDesc+0x32>
 8011784:	e000      	b.n	8011788 <USBD_GetEpDesc+0x6a>
          break;
 8011786:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8011788:	693b      	ldr	r3, [r7, #16]
}
 801178a:	4618      	mov	r0, r3
 801178c:	3718      	adds	r7, #24
 801178e:	46bd      	mov	sp, r7
 8011790:	bd80      	pop	{r7, pc}

08011792 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8011792:	b480      	push	{r7}
 8011794:	b085      	sub	sp, #20
 8011796:	af00      	add	r7, sp, #0
 8011798:	6078      	str	r0, [r7, #4]
 801179a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80117a0:	683b      	ldr	r3, [r7, #0]
 80117a2:	881a      	ldrh	r2, [r3, #0]
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	781b      	ldrb	r3, [r3, #0]
 80117a8:	b29b      	uxth	r3, r3
 80117aa:	4413      	add	r3, r2
 80117ac:	b29a      	uxth	r2, r3
 80117ae:	683b      	ldr	r3, [r7, #0]
 80117b0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	781b      	ldrb	r3, [r3, #0]
 80117b6:	461a      	mov	r2, r3
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	4413      	add	r3, r2
 80117bc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80117be:	68fb      	ldr	r3, [r7, #12]
}
 80117c0:	4618      	mov	r0, r3
 80117c2:	3714      	adds	r7, #20
 80117c4:	46bd      	mov	sp, r7
 80117c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ca:	4770      	bx	lr

080117cc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80117cc:	b480      	push	{r7}
 80117ce:	b087      	sub	sp, #28
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80117d8:	697b      	ldr	r3, [r7, #20]
 80117da:	781b      	ldrb	r3, [r3, #0]
 80117dc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80117de:	697b      	ldr	r3, [r7, #20]
 80117e0:	3301      	adds	r3, #1
 80117e2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80117e4:	697b      	ldr	r3, [r7, #20]
 80117e6:	781b      	ldrb	r3, [r3, #0]
 80117e8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80117ea:	8a3b      	ldrh	r3, [r7, #16]
 80117ec:	021b      	lsls	r3, r3, #8
 80117ee:	b21a      	sxth	r2, r3
 80117f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80117f4:	4313      	orrs	r3, r2
 80117f6:	b21b      	sxth	r3, r3
 80117f8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80117fa:	89fb      	ldrh	r3, [r7, #14]
}
 80117fc:	4618      	mov	r0, r3
 80117fe:	371c      	adds	r7, #28
 8011800:	46bd      	mov	sp, r7
 8011802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011806:	4770      	bx	lr

08011808 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011808:	b580      	push	{r7, lr}
 801180a:	b084      	sub	sp, #16
 801180c:	af00      	add	r7, sp, #0
 801180e:	6078      	str	r0, [r7, #4]
 8011810:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011812:	2300      	movs	r3, #0
 8011814:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011816:	683b      	ldr	r3, [r7, #0]
 8011818:	781b      	ldrb	r3, [r3, #0]
 801181a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801181e:	2b40      	cmp	r3, #64	; 0x40
 8011820:	d005      	beq.n	801182e <USBD_StdDevReq+0x26>
 8011822:	2b40      	cmp	r3, #64	; 0x40
 8011824:	d857      	bhi.n	80118d6 <USBD_StdDevReq+0xce>
 8011826:	2b00      	cmp	r3, #0
 8011828:	d00f      	beq.n	801184a <USBD_StdDevReq+0x42>
 801182a:	2b20      	cmp	r3, #32
 801182c:	d153      	bne.n	80118d6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	32ae      	adds	r2, #174	; 0xae
 8011838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801183c:	689b      	ldr	r3, [r3, #8]
 801183e:	6839      	ldr	r1, [r7, #0]
 8011840:	6878      	ldr	r0, [r7, #4]
 8011842:	4798      	blx	r3
 8011844:	4603      	mov	r3, r0
 8011846:	73fb      	strb	r3, [r7, #15]
      break;
 8011848:	e04a      	b.n	80118e0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801184a:	683b      	ldr	r3, [r7, #0]
 801184c:	785b      	ldrb	r3, [r3, #1]
 801184e:	2b09      	cmp	r3, #9
 8011850:	d83b      	bhi.n	80118ca <USBD_StdDevReq+0xc2>
 8011852:	a201      	add	r2, pc, #4	; (adr r2, 8011858 <USBD_StdDevReq+0x50>)
 8011854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011858:	080118ad 	.word	0x080118ad
 801185c:	080118c1 	.word	0x080118c1
 8011860:	080118cb 	.word	0x080118cb
 8011864:	080118b7 	.word	0x080118b7
 8011868:	080118cb 	.word	0x080118cb
 801186c:	0801188b 	.word	0x0801188b
 8011870:	08011881 	.word	0x08011881
 8011874:	080118cb 	.word	0x080118cb
 8011878:	080118a3 	.word	0x080118a3
 801187c:	08011895 	.word	0x08011895
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011880:	6839      	ldr	r1, [r7, #0]
 8011882:	6878      	ldr	r0, [r7, #4]
 8011884:	f000 fa3c 	bl	8011d00 <USBD_GetDescriptor>
          break;
 8011888:	e024      	b.n	80118d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801188a:	6839      	ldr	r1, [r7, #0]
 801188c:	6878      	ldr	r0, [r7, #4]
 801188e:	f000 fba1 	bl	8011fd4 <USBD_SetAddress>
          break;
 8011892:	e01f      	b.n	80118d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011894:	6839      	ldr	r1, [r7, #0]
 8011896:	6878      	ldr	r0, [r7, #4]
 8011898:	f000 fbe0 	bl	801205c <USBD_SetConfig>
 801189c:	4603      	mov	r3, r0
 801189e:	73fb      	strb	r3, [r7, #15]
          break;
 80118a0:	e018      	b.n	80118d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80118a2:	6839      	ldr	r1, [r7, #0]
 80118a4:	6878      	ldr	r0, [r7, #4]
 80118a6:	f000 fc83 	bl	80121b0 <USBD_GetConfig>
          break;
 80118aa:	e013      	b.n	80118d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80118ac:	6839      	ldr	r1, [r7, #0]
 80118ae:	6878      	ldr	r0, [r7, #4]
 80118b0:	f000 fcb4 	bl	801221c <USBD_GetStatus>
          break;
 80118b4:	e00e      	b.n	80118d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80118b6:	6839      	ldr	r1, [r7, #0]
 80118b8:	6878      	ldr	r0, [r7, #4]
 80118ba:	f000 fce3 	bl	8012284 <USBD_SetFeature>
          break;
 80118be:	e009      	b.n	80118d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80118c0:	6839      	ldr	r1, [r7, #0]
 80118c2:	6878      	ldr	r0, [r7, #4]
 80118c4:	f000 fd07 	bl	80122d6 <USBD_ClrFeature>
          break;
 80118c8:	e004      	b.n	80118d4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80118ca:	6839      	ldr	r1, [r7, #0]
 80118cc:	6878      	ldr	r0, [r7, #4]
 80118ce:	f000 fd5e 	bl	801238e <USBD_CtlError>
          break;
 80118d2:	bf00      	nop
      }
      break;
 80118d4:	e004      	b.n	80118e0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80118d6:	6839      	ldr	r1, [r7, #0]
 80118d8:	6878      	ldr	r0, [r7, #4]
 80118da:	f000 fd58 	bl	801238e <USBD_CtlError>
      break;
 80118de:	bf00      	nop
  }

  return ret;
 80118e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80118e2:	4618      	mov	r0, r3
 80118e4:	3710      	adds	r7, #16
 80118e6:	46bd      	mov	sp, r7
 80118e8:	bd80      	pop	{r7, pc}
 80118ea:	bf00      	nop

080118ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b084      	sub	sp, #16
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
 80118f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80118f6:	2300      	movs	r3, #0
 80118f8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80118fa:	683b      	ldr	r3, [r7, #0]
 80118fc:	781b      	ldrb	r3, [r3, #0]
 80118fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011902:	2b40      	cmp	r3, #64	; 0x40
 8011904:	d005      	beq.n	8011912 <USBD_StdItfReq+0x26>
 8011906:	2b40      	cmp	r3, #64	; 0x40
 8011908:	d852      	bhi.n	80119b0 <USBD_StdItfReq+0xc4>
 801190a:	2b00      	cmp	r3, #0
 801190c:	d001      	beq.n	8011912 <USBD_StdItfReq+0x26>
 801190e:	2b20      	cmp	r3, #32
 8011910:	d14e      	bne.n	80119b0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011918:	b2db      	uxtb	r3, r3
 801191a:	3b01      	subs	r3, #1
 801191c:	2b02      	cmp	r3, #2
 801191e:	d840      	bhi.n	80119a2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011920:	683b      	ldr	r3, [r7, #0]
 8011922:	889b      	ldrh	r3, [r3, #4]
 8011924:	b2db      	uxtb	r3, r3
 8011926:	2b01      	cmp	r3, #1
 8011928:	d836      	bhi.n	8011998 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801192a:	683b      	ldr	r3, [r7, #0]
 801192c:	889b      	ldrh	r3, [r3, #4]
 801192e:	b2db      	uxtb	r3, r3
 8011930:	4619      	mov	r1, r3
 8011932:	6878      	ldr	r0, [r7, #4]
 8011934:	f7ff fed9 	bl	80116ea <USBD_CoreFindIF>
 8011938:	4603      	mov	r3, r0
 801193a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801193c:	7bbb      	ldrb	r3, [r7, #14]
 801193e:	2bff      	cmp	r3, #255	; 0xff
 8011940:	d01d      	beq.n	801197e <USBD_StdItfReq+0x92>
 8011942:	7bbb      	ldrb	r3, [r7, #14]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d11a      	bne.n	801197e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8011948:	7bba      	ldrb	r2, [r7, #14]
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	32ae      	adds	r2, #174	; 0xae
 801194e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011952:	689b      	ldr	r3, [r3, #8]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d00f      	beq.n	8011978 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8011958:	7bba      	ldrb	r2, [r7, #14]
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011960:	7bba      	ldrb	r2, [r7, #14]
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	32ae      	adds	r2, #174	; 0xae
 8011966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801196a:	689b      	ldr	r3, [r3, #8]
 801196c:	6839      	ldr	r1, [r7, #0]
 801196e:	6878      	ldr	r0, [r7, #4]
 8011970:	4798      	blx	r3
 8011972:	4603      	mov	r3, r0
 8011974:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011976:	e004      	b.n	8011982 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8011978:	2303      	movs	r3, #3
 801197a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801197c:	e001      	b.n	8011982 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801197e:	2303      	movs	r3, #3
 8011980:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011982:	683b      	ldr	r3, [r7, #0]
 8011984:	88db      	ldrh	r3, [r3, #6]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d110      	bne.n	80119ac <USBD_StdItfReq+0xc0>
 801198a:	7bfb      	ldrb	r3, [r7, #15]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d10d      	bne.n	80119ac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011990:	6878      	ldr	r0, [r7, #4]
 8011992:	f000 fdc7 	bl	8012524 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011996:	e009      	b.n	80119ac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8011998:	6839      	ldr	r1, [r7, #0]
 801199a:	6878      	ldr	r0, [r7, #4]
 801199c:	f000 fcf7 	bl	801238e <USBD_CtlError>
          break;
 80119a0:	e004      	b.n	80119ac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80119a2:	6839      	ldr	r1, [r7, #0]
 80119a4:	6878      	ldr	r0, [r7, #4]
 80119a6:	f000 fcf2 	bl	801238e <USBD_CtlError>
          break;
 80119aa:	e000      	b.n	80119ae <USBD_StdItfReq+0xc2>
          break;
 80119ac:	bf00      	nop
      }
      break;
 80119ae:	e004      	b.n	80119ba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80119b0:	6839      	ldr	r1, [r7, #0]
 80119b2:	6878      	ldr	r0, [r7, #4]
 80119b4:	f000 fceb 	bl	801238e <USBD_CtlError>
      break;
 80119b8:	bf00      	nop
  }

  return ret;
 80119ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80119bc:	4618      	mov	r0, r3
 80119be:	3710      	adds	r7, #16
 80119c0:	46bd      	mov	sp, r7
 80119c2:	bd80      	pop	{r7, pc}

080119c4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b084      	sub	sp, #16
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
 80119cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80119ce:	2300      	movs	r3, #0
 80119d0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80119d2:	683b      	ldr	r3, [r7, #0]
 80119d4:	889b      	ldrh	r3, [r3, #4]
 80119d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80119d8:	683b      	ldr	r3, [r7, #0]
 80119da:	781b      	ldrb	r3, [r3, #0]
 80119dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80119e0:	2b40      	cmp	r3, #64	; 0x40
 80119e2:	d007      	beq.n	80119f4 <USBD_StdEPReq+0x30>
 80119e4:	2b40      	cmp	r3, #64	; 0x40
 80119e6:	f200 817f 	bhi.w	8011ce8 <USBD_StdEPReq+0x324>
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d02a      	beq.n	8011a44 <USBD_StdEPReq+0x80>
 80119ee:	2b20      	cmp	r3, #32
 80119f0:	f040 817a 	bne.w	8011ce8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80119f4:	7bbb      	ldrb	r3, [r7, #14]
 80119f6:	4619      	mov	r1, r3
 80119f8:	6878      	ldr	r0, [r7, #4]
 80119fa:	f7ff fe83 	bl	8011704 <USBD_CoreFindEP>
 80119fe:	4603      	mov	r3, r0
 8011a00:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011a02:	7b7b      	ldrb	r3, [r7, #13]
 8011a04:	2bff      	cmp	r3, #255	; 0xff
 8011a06:	f000 8174 	beq.w	8011cf2 <USBD_StdEPReq+0x32e>
 8011a0a:	7b7b      	ldrb	r3, [r7, #13]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	f040 8170 	bne.w	8011cf2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8011a12:	7b7a      	ldrb	r2, [r7, #13]
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8011a1a:	7b7a      	ldrb	r2, [r7, #13]
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	32ae      	adds	r2, #174	; 0xae
 8011a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a24:	689b      	ldr	r3, [r3, #8]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	f000 8163 	beq.w	8011cf2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8011a2c:	7b7a      	ldrb	r2, [r7, #13]
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	32ae      	adds	r2, #174	; 0xae
 8011a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a36:	689b      	ldr	r3, [r3, #8]
 8011a38:	6839      	ldr	r1, [r7, #0]
 8011a3a:	6878      	ldr	r0, [r7, #4]
 8011a3c:	4798      	blx	r3
 8011a3e:	4603      	mov	r3, r0
 8011a40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8011a42:	e156      	b.n	8011cf2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011a44:	683b      	ldr	r3, [r7, #0]
 8011a46:	785b      	ldrb	r3, [r3, #1]
 8011a48:	2b03      	cmp	r3, #3
 8011a4a:	d008      	beq.n	8011a5e <USBD_StdEPReq+0x9a>
 8011a4c:	2b03      	cmp	r3, #3
 8011a4e:	f300 8145 	bgt.w	8011cdc <USBD_StdEPReq+0x318>
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	f000 809b 	beq.w	8011b8e <USBD_StdEPReq+0x1ca>
 8011a58:	2b01      	cmp	r3, #1
 8011a5a:	d03c      	beq.n	8011ad6 <USBD_StdEPReq+0x112>
 8011a5c:	e13e      	b.n	8011cdc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a64:	b2db      	uxtb	r3, r3
 8011a66:	2b02      	cmp	r3, #2
 8011a68:	d002      	beq.n	8011a70 <USBD_StdEPReq+0xac>
 8011a6a:	2b03      	cmp	r3, #3
 8011a6c:	d016      	beq.n	8011a9c <USBD_StdEPReq+0xd8>
 8011a6e:	e02c      	b.n	8011aca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011a70:	7bbb      	ldrb	r3, [r7, #14]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d00d      	beq.n	8011a92 <USBD_StdEPReq+0xce>
 8011a76:	7bbb      	ldrb	r3, [r7, #14]
 8011a78:	2b80      	cmp	r3, #128	; 0x80
 8011a7a:	d00a      	beq.n	8011a92 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011a7c:	7bbb      	ldrb	r3, [r7, #14]
 8011a7e:	4619      	mov	r1, r3
 8011a80:	6878      	ldr	r0, [r7, #4]
 8011a82:	f001 fa0d 	bl	8012ea0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011a86:	2180      	movs	r1, #128	; 0x80
 8011a88:	6878      	ldr	r0, [r7, #4]
 8011a8a:	f001 fa09 	bl	8012ea0 <USBD_LL_StallEP>
 8011a8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011a90:	e020      	b.n	8011ad4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8011a92:	6839      	ldr	r1, [r7, #0]
 8011a94:	6878      	ldr	r0, [r7, #4]
 8011a96:	f000 fc7a 	bl	801238e <USBD_CtlError>
              break;
 8011a9a:	e01b      	b.n	8011ad4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011a9c:	683b      	ldr	r3, [r7, #0]
 8011a9e:	885b      	ldrh	r3, [r3, #2]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d10e      	bne.n	8011ac2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011aa4:	7bbb      	ldrb	r3, [r7, #14]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d00b      	beq.n	8011ac2 <USBD_StdEPReq+0xfe>
 8011aaa:	7bbb      	ldrb	r3, [r7, #14]
 8011aac:	2b80      	cmp	r3, #128	; 0x80
 8011aae:	d008      	beq.n	8011ac2 <USBD_StdEPReq+0xfe>
 8011ab0:	683b      	ldr	r3, [r7, #0]
 8011ab2:	88db      	ldrh	r3, [r3, #6]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d104      	bne.n	8011ac2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011ab8:	7bbb      	ldrb	r3, [r7, #14]
 8011aba:	4619      	mov	r1, r3
 8011abc:	6878      	ldr	r0, [r7, #4]
 8011abe:	f001 f9ef 	bl	8012ea0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011ac2:	6878      	ldr	r0, [r7, #4]
 8011ac4:	f000 fd2e 	bl	8012524 <USBD_CtlSendStatus>

              break;
 8011ac8:	e004      	b.n	8011ad4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8011aca:	6839      	ldr	r1, [r7, #0]
 8011acc:	6878      	ldr	r0, [r7, #4]
 8011ace:	f000 fc5e 	bl	801238e <USBD_CtlError>
              break;
 8011ad2:	bf00      	nop
          }
          break;
 8011ad4:	e107      	b.n	8011ce6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011adc:	b2db      	uxtb	r3, r3
 8011ade:	2b02      	cmp	r3, #2
 8011ae0:	d002      	beq.n	8011ae8 <USBD_StdEPReq+0x124>
 8011ae2:	2b03      	cmp	r3, #3
 8011ae4:	d016      	beq.n	8011b14 <USBD_StdEPReq+0x150>
 8011ae6:	e04b      	b.n	8011b80 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011ae8:	7bbb      	ldrb	r3, [r7, #14]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d00d      	beq.n	8011b0a <USBD_StdEPReq+0x146>
 8011aee:	7bbb      	ldrb	r3, [r7, #14]
 8011af0:	2b80      	cmp	r3, #128	; 0x80
 8011af2:	d00a      	beq.n	8011b0a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011af4:	7bbb      	ldrb	r3, [r7, #14]
 8011af6:	4619      	mov	r1, r3
 8011af8:	6878      	ldr	r0, [r7, #4]
 8011afa:	f001 f9d1 	bl	8012ea0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011afe:	2180      	movs	r1, #128	; 0x80
 8011b00:	6878      	ldr	r0, [r7, #4]
 8011b02:	f001 f9cd 	bl	8012ea0 <USBD_LL_StallEP>
 8011b06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011b08:	e040      	b.n	8011b8c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8011b0a:	6839      	ldr	r1, [r7, #0]
 8011b0c:	6878      	ldr	r0, [r7, #4]
 8011b0e:	f000 fc3e 	bl	801238e <USBD_CtlError>
              break;
 8011b12:	e03b      	b.n	8011b8c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011b14:	683b      	ldr	r3, [r7, #0]
 8011b16:	885b      	ldrh	r3, [r3, #2]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d136      	bne.n	8011b8a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011b1c:	7bbb      	ldrb	r3, [r7, #14]
 8011b1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d004      	beq.n	8011b30 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011b26:	7bbb      	ldrb	r3, [r7, #14]
 8011b28:	4619      	mov	r1, r3
 8011b2a:	6878      	ldr	r0, [r7, #4]
 8011b2c:	f001 f9d7 	bl	8012ede <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011b30:	6878      	ldr	r0, [r7, #4]
 8011b32:	f000 fcf7 	bl	8012524 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8011b36:	7bbb      	ldrb	r3, [r7, #14]
 8011b38:	4619      	mov	r1, r3
 8011b3a:	6878      	ldr	r0, [r7, #4]
 8011b3c:	f7ff fde2 	bl	8011704 <USBD_CoreFindEP>
 8011b40:	4603      	mov	r3, r0
 8011b42:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011b44:	7b7b      	ldrb	r3, [r7, #13]
 8011b46:	2bff      	cmp	r3, #255	; 0xff
 8011b48:	d01f      	beq.n	8011b8a <USBD_StdEPReq+0x1c6>
 8011b4a:	7b7b      	ldrb	r3, [r7, #13]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d11c      	bne.n	8011b8a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8011b50:	7b7a      	ldrb	r2, [r7, #13]
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8011b58:	7b7a      	ldrb	r2, [r7, #13]
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	32ae      	adds	r2, #174	; 0xae
 8011b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b62:	689b      	ldr	r3, [r3, #8]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d010      	beq.n	8011b8a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011b68:	7b7a      	ldrb	r2, [r7, #13]
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	32ae      	adds	r2, #174	; 0xae
 8011b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b72:	689b      	ldr	r3, [r3, #8]
 8011b74:	6839      	ldr	r1, [r7, #0]
 8011b76:	6878      	ldr	r0, [r7, #4]
 8011b78:	4798      	blx	r3
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8011b7e:	e004      	b.n	8011b8a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8011b80:	6839      	ldr	r1, [r7, #0]
 8011b82:	6878      	ldr	r0, [r7, #4]
 8011b84:	f000 fc03 	bl	801238e <USBD_CtlError>
              break;
 8011b88:	e000      	b.n	8011b8c <USBD_StdEPReq+0x1c8>
              break;
 8011b8a:	bf00      	nop
          }
          break;
 8011b8c:	e0ab      	b.n	8011ce6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b94:	b2db      	uxtb	r3, r3
 8011b96:	2b02      	cmp	r3, #2
 8011b98:	d002      	beq.n	8011ba0 <USBD_StdEPReq+0x1dc>
 8011b9a:	2b03      	cmp	r3, #3
 8011b9c:	d032      	beq.n	8011c04 <USBD_StdEPReq+0x240>
 8011b9e:	e097      	b.n	8011cd0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011ba0:	7bbb      	ldrb	r3, [r7, #14]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d007      	beq.n	8011bb6 <USBD_StdEPReq+0x1f2>
 8011ba6:	7bbb      	ldrb	r3, [r7, #14]
 8011ba8:	2b80      	cmp	r3, #128	; 0x80
 8011baa:	d004      	beq.n	8011bb6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011bac:	6839      	ldr	r1, [r7, #0]
 8011bae:	6878      	ldr	r0, [r7, #4]
 8011bb0:	f000 fbed 	bl	801238e <USBD_CtlError>
                break;
 8011bb4:	e091      	b.n	8011cda <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011bb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	da0b      	bge.n	8011bd6 <USBD_StdEPReq+0x212>
 8011bbe:	7bbb      	ldrb	r3, [r7, #14]
 8011bc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011bc4:	4613      	mov	r3, r2
 8011bc6:	009b      	lsls	r3, r3, #2
 8011bc8:	4413      	add	r3, r2
 8011bca:	009b      	lsls	r3, r3, #2
 8011bcc:	3310      	adds	r3, #16
 8011bce:	687a      	ldr	r2, [r7, #4]
 8011bd0:	4413      	add	r3, r2
 8011bd2:	3304      	adds	r3, #4
 8011bd4:	e00b      	b.n	8011bee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011bd6:	7bbb      	ldrb	r3, [r7, #14]
 8011bd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011bdc:	4613      	mov	r3, r2
 8011bde:	009b      	lsls	r3, r3, #2
 8011be0:	4413      	add	r3, r2
 8011be2:	009b      	lsls	r3, r3, #2
 8011be4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011be8:	687a      	ldr	r2, [r7, #4]
 8011bea:	4413      	add	r3, r2
 8011bec:	3304      	adds	r3, #4
 8011bee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011bf0:	68bb      	ldr	r3, [r7, #8]
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011bf6:	68bb      	ldr	r3, [r7, #8]
 8011bf8:	2202      	movs	r2, #2
 8011bfa:	4619      	mov	r1, r3
 8011bfc:	6878      	ldr	r0, [r7, #4]
 8011bfe:	f000 fc37 	bl	8012470 <USBD_CtlSendData>
              break;
 8011c02:	e06a      	b.n	8011cda <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011c04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	da11      	bge.n	8011c30 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011c0c:	7bbb      	ldrb	r3, [r7, #14]
 8011c0e:	f003 020f 	and.w	r2, r3, #15
 8011c12:	6879      	ldr	r1, [r7, #4]
 8011c14:	4613      	mov	r3, r2
 8011c16:	009b      	lsls	r3, r3, #2
 8011c18:	4413      	add	r3, r2
 8011c1a:	009b      	lsls	r3, r3, #2
 8011c1c:	440b      	add	r3, r1
 8011c1e:	3324      	adds	r3, #36	; 0x24
 8011c20:	881b      	ldrh	r3, [r3, #0]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d117      	bne.n	8011c56 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011c26:	6839      	ldr	r1, [r7, #0]
 8011c28:	6878      	ldr	r0, [r7, #4]
 8011c2a:	f000 fbb0 	bl	801238e <USBD_CtlError>
                  break;
 8011c2e:	e054      	b.n	8011cda <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011c30:	7bbb      	ldrb	r3, [r7, #14]
 8011c32:	f003 020f 	and.w	r2, r3, #15
 8011c36:	6879      	ldr	r1, [r7, #4]
 8011c38:	4613      	mov	r3, r2
 8011c3a:	009b      	lsls	r3, r3, #2
 8011c3c:	4413      	add	r3, r2
 8011c3e:	009b      	lsls	r3, r3, #2
 8011c40:	440b      	add	r3, r1
 8011c42:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011c46:	881b      	ldrh	r3, [r3, #0]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d104      	bne.n	8011c56 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011c4c:	6839      	ldr	r1, [r7, #0]
 8011c4e:	6878      	ldr	r0, [r7, #4]
 8011c50:	f000 fb9d 	bl	801238e <USBD_CtlError>
                  break;
 8011c54:	e041      	b.n	8011cda <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011c56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	da0b      	bge.n	8011c76 <USBD_StdEPReq+0x2b2>
 8011c5e:	7bbb      	ldrb	r3, [r7, #14]
 8011c60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011c64:	4613      	mov	r3, r2
 8011c66:	009b      	lsls	r3, r3, #2
 8011c68:	4413      	add	r3, r2
 8011c6a:	009b      	lsls	r3, r3, #2
 8011c6c:	3310      	adds	r3, #16
 8011c6e:	687a      	ldr	r2, [r7, #4]
 8011c70:	4413      	add	r3, r2
 8011c72:	3304      	adds	r3, #4
 8011c74:	e00b      	b.n	8011c8e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011c76:	7bbb      	ldrb	r3, [r7, #14]
 8011c78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011c7c:	4613      	mov	r3, r2
 8011c7e:	009b      	lsls	r3, r3, #2
 8011c80:	4413      	add	r3, r2
 8011c82:	009b      	lsls	r3, r3, #2
 8011c84:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011c88:	687a      	ldr	r2, [r7, #4]
 8011c8a:	4413      	add	r3, r2
 8011c8c:	3304      	adds	r3, #4
 8011c8e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011c90:	7bbb      	ldrb	r3, [r7, #14]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d002      	beq.n	8011c9c <USBD_StdEPReq+0x2d8>
 8011c96:	7bbb      	ldrb	r3, [r7, #14]
 8011c98:	2b80      	cmp	r3, #128	; 0x80
 8011c9a:	d103      	bne.n	8011ca4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8011c9c:	68bb      	ldr	r3, [r7, #8]
 8011c9e:	2200      	movs	r2, #0
 8011ca0:	601a      	str	r2, [r3, #0]
 8011ca2:	e00e      	b.n	8011cc2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011ca4:	7bbb      	ldrb	r3, [r7, #14]
 8011ca6:	4619      	mov	r1, r3
 8011ca8:	6878      	ldr	r0, [r7, #4]
 8011caa:	f001 f937 	bl	8012f1c <USBD_LL_IsStallEP>
 8011cae:	4603      	mov	r3, r0
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d003      	beq.n	8011cbc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8011cb4:	68bb      	ldr	r3, [r7, #8]
 8011cb6:	2201      	movs	r2, #1
 8011cb8:	601a      	str	r2, [r3, #0]
 8011cba:	e002      	b.n	8011cc2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8011cbc:	68bb      	ldr	r3, [r7, #8]
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011cc2:	68bb      	ldr	r3, [r7, #8]
 8011cc4:	2202      	movs	r2, #2
 8011cc6:	4619      	mov	r1, r3
 8011cc8:	6878      	ldr	r0, [r7, #4]
 8011cca:	f000 fbd1 	bl	8012470 <USBD_CtlSendData>
              break;
 8011cce:	e004      	b.n	8011cda <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8011cd0:	6839      	ldr	r1, [r7, #0]
 8011cd2:	6878      	ldr	r0, [r7, #4]
 8011cd4:	f000 fb5b 	bl	801238e <USBD_CtlError>
              break;
 8011cd8:	bf00      	nop
          }
          break;
 8011cda:	e004      	b.n	8011ce6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8011cdc:	6839      	ldr	r1, [r7, #0]
 8011cde:	6878      	ldr	r0, [r7, #4]
 8011ce0:	f000 fb55 	bl	801238e <USBD_CtlError>
          break;
 8011ce4:	bf00      	nop
      }
      break;
 8011ce6:	e005      	b.n	8011cf4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8011ce8:	6839      	ldr	r1, [r7, #0]
 8011cea:	6878      	ldr	r0, [r7, #4]
 8011cec:	f000 fb4f 	bl	801238e <USBD_CtlError>
      break;
 8011cf0:	e000      	b.n	8011cf4 <USBD_StdEPReq+0x330>
      break;
 8011cf2:	bf00      	nop
  }

  return ret;
 8011cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	3710      	adds	r7, #16
 8011cfa:	46bd      	mov	sp, r7
 8011cfc:	bd80      	pop	{r7, pc}
	...

08011d00 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b084      	sub	sp, #16
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
 8011d08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011d0e:	2300      	movs	r3, #0
 8011d10:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011d12:	2300      	movs	r3, #0
 8011d14:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011d16:	683b      	ldr	r3, [r7, #0]
 8011d18:	885b      	ldrh	r3, [r3, #2]
 8011d1a:	0a1b      	lsrs	r3, r3, #8
 8011d1c:	b29b      	uxth	r3, r3
 8011d1e:	3b01      	subs	r3, #1
 8011d20:	2b06      	cmp	r3, #6
 8011d22:	f200 8128 	bhi.w	8011f76 <USBD_GetDescriptor+0x276>
 8011d26:	a201      	add	r2, pc, #4	; (adr r2, 8011d2c <USBD_GetDescriptor+0x2c>)
 8011d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d2c:	08011d49 	.word	0x08011d49
 8011d30:	08011d61 	.word	0x08011d61
 8011d34:	08011da1 	.word	0x08011da1
 8011d38:	08011f77 	.word	0x08011f77
 8011d3c:	08011f77 	.word	0x08011f77
 8011d40:	08011f17 	.word	0x08011f17
 8011d44:	08011f43 	.word	0x08011f43
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	687a      	ldr	r2, [r7, #4]
 8011d52:	7c12      	ldrb	r2, [r2, #16]
 8011d54:	f107 0108 	add.w	r1, r7, #8
 8011d58:	4610      	mov	r0, r2
 8011d5a:	4798      	blx	r3
 8011d5c:	60f8      	str	r0, [r7, #12]
      break;
 8011d5e:	e112      	b.n	8011f86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	7c1b      	ldrb	r3, [r3, #16]
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d10d      	bne.n	8011d84 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d70:	f107 0208 	add.w	r2, r7, #8
 8011d74:	4610      	mov	r0, r2
 8011d76:	4798      	blx	r3
 8011d78:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	3301      	adds	r3, #1
 8011d7e:	2202      	movs	r2, #2
 8011d80:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011d82:	e100      	b.n	8011f86 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d8c:	f107 0208 	add.w	r2, r7, #8
 8011d90:	4610      	mov	r0, r2
 8011d92:	4798      	blx	r3
 8011d94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	3301      	adds	r3, #1
 8011d9a:	2202      	movs	r2, #2
 8011d9c:	701a      	strb	r2, [r3, #0]
      break;
 8011d9e:	e0f2      	b.n	8011f86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011da0:	683b      	ldr	r3, [r7, #0]
 8011da2:	885b      	ldrh	r3, [r3, #2]
 8011da4:	b2db      	uxtb	r3, r3
 8011da6:	2b05      	cmp	r3, #5
 8011da8:	f200 80ac 	bhi.w	8011f04 <USBD_GetDescriptor+0x204>
 8011dac:	a201      	add	r2, pc, #4	; (adr r2, 8011db4 <USBD_GetDescriptor+0xb4>)
 8011dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011db2:	bf00      	nop
 8011db4:	08011dcd 	.word	0x08011dcd
 8011db8:	08011e01 	.word	0x08011e01
 8011dbc:	08011e35 	.word	0x08011e35
 8011dc0:	08011e69 	.word	0x08011e69
 8011dc4:	08011e9d 	.word	0x08011e9d
 8011dc8:	08011ed1 	.word	0x08011ed1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011dd2:	685b      	ldr	r3, [r3, #4]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d00b      	beq.n	8011df0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011dde:	685b      	ldr	r3, [r3, #4]
 8011de0:	687a      	ldr	r2, [r7, #4]
 8011de2:	7c12      	ldrb	r2, [r2, #16]
 8011de4:	f107 0108 	add.w	r1, r7, #8
 8011de8:	4610      	mov	r0, r2
 8011dea:	4798      	blx	r3
 8011dec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011dee:	e091      	b.n	8011f14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011df0:	6839      	ldr	r1, [r7, #0]
 8011df2:	6878      	ldr	r0, [r7, #4]
 8011df4:	f000 facb 	bl	801238e <USBD_CtlError>
            err++;
 8011df8:	7afb      	ldrb	r3, [r7, #11]
 8011dfa:	3301      	adds	r3, #1
 8011dfc:	72fb      	strb	r3, [r7, #11]
          break;
 8011dfe:	e089      	b.n	8011f14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e06:	689b      	ldr	r3, [r3, #8]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d00b      	beq.n	8011e24 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e12:	689b      	ldr	r3, [r3, #8]
 8011e14:	687a      	ldr	r2, [r7, #4]
 8011e16:	7c12      	ldrb	r2, [r2, #16]
 8011e18:	f107 0108 	add.w	r1, r7, #8
 8011e1c:	4610      	mov	r0, r2
 8011e1e:	4798      	blx	r3
 8011e20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011e22:	e077      	b.n	8011f14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011e24:	6839      	ldr	r1, [r7, #0]
 8011e26:	6878      	ldr	r0, [r7, #4]
 8011e28:	f000 fab1 	bl	801238e <USBD_CtlError>
            err++;
 8011e2c:	7afb      	ldrb	r3, [r7, #11]
 8011e2e:	3301      	adds	r3, #1
 8011e30:	72fb      	strb	r3, [r7, #11]
          break;
 8011e32:	e06f      	b.n	8011f14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e3a:	68db      	ldr	r3, [r3, #12]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d00b      	beq.n	8011e58 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e46:	68db      	ldr	r3, [r3, #12]
 8011e48:	687a      	ldr	r2, [r7, #4]
 8011e4a:	7c12      	ldrb	r2, [r2, #16]
 8011e4c:	f107 0108 	add.w	r1, r7, #8
 8011e50:	4610      	mov	r0, r2
 8011e52:	4798      	blx	r3
 8011e54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011e56:	e05d      	b.n	8011f14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011e58:	6839      	ldr	r1, [r7, #0]
 8011e5a:	6878      	ldr	r0, [r7, #4]
 8011e5c:	f000 fa97 	bl	801238e <USBD_CtlError>
            err++;
 8011e60:	7afb      	ldrb	r3, [r7, #11]
 8011e62:	3301      	adds	r3, #1
 8011e64:	72fb      	strb	r3, [r7, #11]
          break;
 8011e66:	e055      	b.n	8011f14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e6e:	691b      	ldr	r3, [r3, #16]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d00b      	beq.n	8011e8c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e7a:	691b      	ldr	r3, [r3, #16]
 8011e7c:	687a      	ldr	r2, [r7, #4]
 8011e7e:	7c12      	ldrb	r2, [r2, #16]
 8011e80:	f107 0108 	add.w	r1, r7, #8
 8011e84:	4610      	mov	r0, r2
 8011e86:	4798      	blx	r3
 8011e88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011e8a:	e043      	b.n	8011f14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011e8c:	6839      	ldr	r1, [r7, #0]
 8011e8e:	6878      	ldr	r0, [r7, #4]
 8011e90:	f000 fa7d 	bl	801238e <USBD_CtlError>
            err++;
 8011e94:	7afb      	ldrb	r3, [r7, #11]
 8011e96:	3301      	adds	r3, #1
 8011e98:	72fb      	strb	r3, [r7, #11]
          break;
 8011e9a:	e03b      	b.n	8011f14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ea2:	695b      	ldr	r3, [r3, #20]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d00b      	beq.n	8011ec0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011eae:	695b      	ldr	r3, [r3, #20]
 8011eb0:	687a      	ldr	r2, [r7, #4]
 8011eb2:	7c12      	ldrb	r2, [r2, #16]
 8011eb4:	f107 0108 	add.w	r1, r7, #8
 8011eb8:	4610      	mov	r0, r2
 8011eba:	4798      	blx	r3
 8011ebc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011ebe:	e029      	b.n	8011f14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011ec0:	6839      	ldr	r1, [r7, #0]
 8011ec2:	6878      	ldr	r0, [r7, #4]
 8011ec4:	f000 fa63 	bl	801238e <USBD_CtlError>
            err++;
 8011ec8:	7afb      	ldrb	r3, [r7, #11]
 8011eca:	3301      	adds	r3, #1
 8011ecc:	72fb      	strb	r3, [r7, #11]
          break;
 8011ece:	e021      	b.n	8011f14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ed6:	699b      	ldr	r3, [r3, #24]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d00b      	beq.n	8011ef4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ee2:	699b      	ldr	r3, [r3, #24]
 8011ee4:	687a      	ldr	r2, [r7, #4]
 8011ee6:	7c12      	ldrb	r2, [r2, #16]
 8011ee8:	f107 0108 	add.w	r1, r7, #8
 8011eec:	4610      	mov	r0, r2
 8011eee:	4798      	blx	r3
 8011ef0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011ef2:	e00f      	b.n	8011f14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011ef4:	6839      	ldr	r1, [r7, #0]
 8011ef6:	6878      	ldr	r0, [r7, #4]
 8011ef8:	f000 fa49 	bl	801238e <USBD_CtlError>
            err++;
 8011efc:	7afb      	ldrb	r3, [r7, #11]
 8011efe:	3301      	adds	r3, #1
 8011f00:	72fb      	strb	r3, [r7, #11]
          break;
 8011f02:	e007      	b.n	8011f14 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011f04:	6839      	ldr	r1, [r7, #0]
 8011f06:	6878      	ldr	r0, [r7, #4]
 8011f08:	f000 fa41 	bl	801238e <USBD_CtlError>
          err++;
 8011f0c:	7afb      	ldrb	r3, [r7, #11]
 8011f0e:	3301      	adds	r3, #1
 8011f10:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8011f12:	bf00      	nop
      }
      break;
 8011f14:	e037      	b.n	8011f86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	7c1b      	ldrb	r3, [r3, #16]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d109      	bne.n	8011f32 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f26:	f107 0208 	add.w	r2, r7, #8
 8011f2a:	4610      	mov	r0, r2
 8011f2c:	4798      	blx	r3
 8011f2e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011f30:	e029      	b.n	8011f86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011f32:	6839      	ldr	r1, [r7, #0]
 8011f34:	6878      	ldr	r0, [r7, #4]
 8011f36:	f000 fa2a 	bl	801238e <USBD_CtlError>
        err++;
 8011f3a:	7afb      	ldrb	r3, [r7, #11]
 8011f3c:	3301      	adds	r3, #1
 8011f3e:	72fb      	strb	r3, [r7, #11]
      break;
 8011f40:	e021      	b.n	8011f86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	7c1b      	ldrb	r3, [r3, #16]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d10d      	bne.n	8011f66 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f52:	f107 0208 	add.w	r2, r7, #8
 8011f56:	4610      	mov	r0, r2
 8011f58:	4798      	blx	r3
 8011f5a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	3301      	adds	r3, #1
 8011f60:	2207      	movs	r2, #7
 8011f62:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011f64:	e00f      	b.n	8011f86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011f66:	6839      	ldr	r1, [r7, #0]
 8011f68:	6878      	ldr	r0, [r7, #4]
 8011f6a:	f000 fa10 	bl	801238e <USBD_CtlError>
        err++;
 8011f6e:	7afb      	ldrb	r3, [r7, #11]
 8011f70:	3301      	adds	r3, #1
 8011f72:	72fb      	strb	r3, [r7, #11]
      break;
 8011f74:	e007      	b.n	8011f86 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8011f76:	6839      	ldr	r1, [r7, #0]
 8011f78:	6878      	ldr	r0, [r7, #4]
 8011f7a:	f000 fa08 	bl	801238e <USBD_CtlError>
      err++;
 8011f7e:	7afb      	ldrb	r3, [r7, #11]
 8011f80:	3301      	adds	r3, #1
 8011f82:	72fb      	strb	r3, [r7, #11]
      break;
 8011f84:	bf00      	nop
  }

  if (err != 0U)
 8011f86:	7afb      	ldrb	r3, [r7, #11]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d11e      	bne.n	8011fca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8011f8c:	683b      	ldr	r3, [r7, #0]
 8011f8e:	88db      	ldrh	r3, [r3, #6]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d016      	beq.n	8011fc2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8011f94:	893b      	ldrh	r3, [r7, #8]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d00e      	beq.n	8011fb8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8011f9a:	683b      	ldr	r3, [r7, #0]
 8011f9c:	88da      	ldrh	r2, [r3, #6]
 8011f9e:	893b      	ldrh	r3, [r7, #8]
 8011fa0:	4293      	cmp	r3, r2
 8011fa2:	bf28      	it	cs
 8011fa4:	4613      	movcs	r3, r2
 8011fa6:	b29b      	uxth	r3, r3
 8011fa8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011faa:	893b      	ldrh	r3, [r7, #8]
 8011fac:	461a      	mov	r2, r3
 8011fae:	68f9      	ldr	r1, [r7, #12]
 8011fb0:	6878      	ldr	r0, [r7, #4]
 8011fb2:	f000 fa5d 	bl	8012470 <USBD_CtlSendData>
 8011fb6:	e009      	b.n	8011fcc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011fb8:	6839      	ldr	r1, [r7, #0]
 8011fba:	6878      	ldr	r0, [r7, #4]
 8011fbc:	f000 f9e7 	bl	801238e <USBD_CtlError>
 8011fc0:	e004      	b.n	8011fcc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8011fc2:	6878      	ldr	r0, [r7, #4]
 8011fc4:	f000 faae 	bl	8012524 <USBD_CtlSendStatus>
 8011fc8:	e000      	b.n	8011fcc <USBD_GetDescriptor+0x2cc>
    return;
 8011fca:	bf00      	nop
  }
}
 8011fcc:	3710      	adds	r7, #16
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	bd80      	pop	{r7, pc}
 8011fd2:	bf00      	nop

08011fd4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011fd4:	b580      	push	{r7, lr}
 8011fd6:	b084      	sub	sp, #16
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	6078      	str	r0, [r7, #4]
 8011fdc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011fde:	683b      	ldr	r3, [r7, #0]
 8011fe0:	889b      	ldrh	r3, [r3, #4]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d131      	bne.n	801204a <USBD_SetAddress+0x76>
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	88db      	ldrh	r3, [r3, #6]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d12d      	bne.n	801204a <USBD_SetAddress+0x76>
 8011fee:	683b      	ldr	r3, [r7, #0]
 8011ff0:	885b      	ldrh	r3, [r3, #2]
 8011ff2:	2b7f      	cmp	r3, #127	; 0x7f
 8011ff4:	d829      	bhi.n	801204a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011ff6:	683b      	ldr	r3, [r7, #0]
 8011ff8:	885b      	ldrh	r3, [r3, #2]
 8011ffa:	b2db      	uxtb	r3, r3
 8011ffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012000:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012008:	b2db      	uxtb	r3, r3
 801200a:	2b03      	cmp	r3, #3
 801200c:	d104      	bne.n	8012018 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801200e:	6839      	ldr	r1, [r7, #0]
 8012010:	6878      	ldr	r0, [r7, #4]
 8012012:	f000 f9bc 	bl	801238e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012016:	e01d      	b.n	8012054 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	7bfa      	ldrb	r2, [r7, #15]
 801201c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012020:	7bfb      	ldrb	r3, [r7, #15]
 8012022:	4619      	mov	r1, r3
 8012024:	6878      	ldr	r0, [r7, #4]
 8012026:	f000 ffa5 	bl	8012f74 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801202a:	6878      	ldr	r0, [r7, #4]
 801202c:	f000 fa7a 	bl	8012524 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012030:	7bfb      	ldrb	r3, [r7, #15]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d004      	beq.n	8012040 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	2202      	movs	r2, #2
 801203a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801203e:	e009      	b.n	8012054 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	2201      	movs	r2, #1
 8012044:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012048:	e004      	b.n	8012054 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801204a:	6839      	ldr	r1, [r7, #0]
 801204c:	6878      	ldr	r0, [r7, #4]
 801204e:	f000 f99e 	bl	801238e <USBD_CtlError>
  }
}
 8012052:	bf00      	nop
 8012054:	bf00      	nop
 8012056:	3710      	adds	r7, #16
 8012058:	46bd      	mov	sp, r7
 801205a:	bd80      	pop	{r7, pc}

0801205c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b084      	sub	sp, #16
 8012060:	af00      	add	r7, sp, #0
 8012062:	6078      	str	r0, [r7, #4]
 8012064:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012066:	2300      	movs	r3, #0
 8012068:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801206a:	683b      	ldr	r3, [r7, #0]
 801206c:	885b      	ldrh	r3, [r3, #2]
 801206e:	b2da      	uxtb	r2, r3
 8012070:	4b4e      	ldr	r3, [pc, #312]	; (80121ac <USBD_SetConfig+0x150>)
 8012072:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012074:	4b4d      	ldr	r3, [pc, #308]	; (80121ac <USBD_SetConfig+0x150>)
 8012076:	781b      	ldrb	r3, [r3, #0]
 8012078:	2b01      	cmp	r3, #1
 801207a:	d905      	bls.n	8012088 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801207c:	6839      	ldr	r1, [r7, #0]
 801207e:	6878      	ldr	r0, [r7, #4]
 8012080:	f000 f985 	bl	801238e <USBD_CtlError>
    return USBD_FAIL;
 8012084:	2303      	movs	r3, #3
 8012086:	e08c      	b.n	80121a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801208e:	b2db      	uxtb	r3, r3
 8012090:	2b02      	cmp	r3, #2
 8012092:	d002      	beq.n	801209a <USBD_SetConfig+0x3e>
 8012094:	2b03      	cmp	r3, #3
 8012096:	d029      	beq.n	80120ec <USBD_SetConfig+0x90>
 8012098:	e075      	b.n	8012186 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801209a:	4b44      	ldr	r3, [pc, #272]	; (80121ac <USBD_SetConfig+0x150>)
 801209c:	781b      	ldrb	r3, [r3, #0]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d020      	beq.n	80120e4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80120a2:	4b42      	ldr	r3, [pc, #264]	; (80121ac <USBD_SetConfig+0x150>)
 80120a4:	781b      	ldrb	r3, [r3, #0]
 80120a6:	461a      	mov	r2, r3
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80120ac:	4b3f      	ldr	r3, [pc, #252]	; (80121ac <USBD_SetConfig+0x150>)
 80120ae:	781b      	ldrb	r3, [r3, #0]
 80120b0:	4619      	mov	r1, r3
 80120b2:	6878      	ldr	r0, [r7, #4]
 80120b4:	f7fe ffe7 	bl	8011086 <USBD_SetClassConfig>
 80120b8:	4603      	mov	r3, r0
 80120ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80120bc:	7bfb      	ldrb	r3, [r7, #15]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d008      	beq.n	80120d4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80120c2:	6839      	ldr	r1, [r7, #0]
 80120c4:	6878      	ldr	r0, [r7, #4]
 80120c6:	f000 f962 	bl	801238e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	2202      	movs	r2, #2
 80120ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80120d2:	e065      	b.n	80121a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80120d4:	6878      	ldr	r0, [r7, #4]
 80120d6:	f000 fa25 	bl	8012524 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	2203      	movs	r2, #3
 80120de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80120e2:	e05d      	b.n	80121a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80120e4:	6878      	ldr	r0, [r7, #4]
 80120e6:	f000 fa1d 	bl	8012524 <USBD_CtlSendStatus>
      break;
 80120ea:	e059      	b.n	80121a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80120ec:	4b2f      	ldr	r3, [pc, #188]	; (80121ac <USBD_SetConfig+0x150>)
 80120ee:	781b      	ldrb	r3, [r3, #0]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d112      	bne.n	801211a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	2202      	movs	r2, #2
 80120f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80120fc:	4b2b      	ldr	r3, [pc, #172]	; (80121ac <USBD_SetConfig+0x150>)
 80120fe:	781b      	ldrb	r3, [r3, #0]
 8012100:	461a      	mov	r2, r3
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012106:	4b29      	ldr	r3, [pc, #164]	; (80121ac <USBD_SetConfig+0x150>)
 8012108:	781b      	ldrb	r3, [r3, #0]
 801210a:	4619      	mov	r1, r3
 801210c:	6878      	ldr	r0, [r7, #4]
 801210e:	f7fe ffd6 	bl	80110be <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012112:	6878      	ldr	r0, [r7, #4]
 8012114:	f000 fa06 	bl	8012524 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012118:	e042      	b.n	80121a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801211a:	4b24      	ldr	r3, [pc, #144]	; (80121ac <USBD_SetConfig+0x150>)
 801211c:	781b      	ldrb	r3, [r3, #0]
 801211e:	461a      	mov	r2, r3
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	685b      	ldr	r3, [r3, #4]
 8012124:	429a      	cmp	r2, r3
 8012126:	d02a      	beq.n	801217e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	685b      	ldr	r3, [r3, #4]
 801212c:	b2db      	uxtb	r3, r3
 801212e:	4619      	mov	r1, r3
 8012130:	6878      	ldr	r0, [r7, #4]
 8012132:	f7fe ffc4 	bl	80110be <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012136:	4b1d      	ldr	r3, [pc, #116]	; (80121ac <USBD_SetConfig+0x150>)
 8012138:	781b      	ldrb	r3, [r3, #0]
 801213a:	461a      	mov	r2, r3
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012140:	4b1a      	ldr	r3, [pc, #104]	; (80121ac <USBD_SetConfig+0x150>)
 8012142:	781b      	ldrb	r3, [r3, #0]
 8012144:	4619      	mov	r1, r3
 8012146:	6878      	ldr	r0, [r7, #4]
 8012148:	f7fe ff9d 	bl	8011086 <USBD_SetClassConfig>
 801214c:	4603      	mov	r3, r0
 801214e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012150:	7bfb      	ldrb	r3, [r7, #15]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d00f      	beq.n	8012176 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8012156:	6839      	ldr	r1, [r7, #0]
 8012158:	6878      	ldr	r0, [r7, #4]
 801215a:	f000 f918 	bl	801238e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	685b      	ldr	r3, [r3, #4]
 8012162:	b2db      	uxtb	r3, r3
 8012164:	4619      	mov	r1, r3
 8012166:	6878      	ldr	r0, [r7, #4]
 8012168:	f7fe ffa9 	bl	80110be <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	2202      	movs	r2, #2
 8012170:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012174:	e014      	b.n	80121a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012176:	6878      	ldr	r0, [r7, #4]
 8012178:	f000 f9d4 	bl	8012524 <USBD_CtlSendStatus>
      break;
 801217c:	e010      	b.n	80121a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801217e:	6878      	ldr	r0, [r7, #4]
 8012180:	f000 f9d0 	bl	8012524 <USBD_CtlSendStatus>
      break;
 8012184:	e00c      	b.n	80121a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8012186:	6839      	ldr	r1, [r7, #0]
 8012188:	6878      	ldr	r0, [r7, #4]
 801218a:	f000 f900 	bl	801238e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801218e:	4b07      	ldr	r3, [pc, #28]	; (80121ac <USBD_SetConfig+0x150>)
 8012190:	781b      	ldrb	r3, [r3, #0]
 8012192:	4619      	mov	r1, r3
 8012194:	6878      	ldr	r0, [r7, #4]
 8012196:	f7fe ff92 	bl	80110be <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801219a:	2303      	movs	r3, #3
 801219c:	73fb      	strb	r3, [r7, #15]
      break;
 801219e:	bf00      	nop
  }

  return ret;
 80121a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80121a2:	4618      	mov	r0, r3
 80121a4:	3710      	adds	r7, #16
 80121a6:	46bd      	mov	sp, r7
 80121a8:	bd80      	pop	{r7, pc}
 80121aa:	bf00      	nop
 80121ac:	240345ec 	.word	0x240345ec

080121b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b082      	sub	sp, #8
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
 80121b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80121ba:	683b      	ldr	r3, [r7, #0]
 80121bc:	88db      	ldrh	r3, [r3, #6]
 80121be:	2b01      	cmp	r3, #1
 80121c0:	d004      	beq.n	80121cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80121c2:	6839      	ldr	r1, [r7, #0]
 80121c4:	6878      	ldr	r0, [r7, #4]
 80121c6:	f000 f8e2 	bl	801238e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80121ca:	e023      	b.n	8012214 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80121d2:	b2db      	uxtb	r3, r3
 80121d4:	2b02      	cmp	r3, #2
 80121d6:	dc02      	bgt.n	80121de <USBD_GetConfig+0x2e>
 80121d8:	2b00      	cmp	r3, #0
 80121da:	dc03      	bgt.n	80121e4 <USBD_GetConfig+0x34>
 80121dc:	e015      	b.n	801220a <USBD_GetConfig+0x5a>
 80121de:	2b03      	cmp	r3, #3
 80121e0:	d00b      	beq.n	80121fa <USBD_GetConfig+0x4a>
 80121e2:	e012      	b.n	801220a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	2200      	movs	r2, #0
 80121e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	3308      	adds	r3, #8
 80121ee:	2201      	movs	r2, #1
 80121f0:	4619      	mov	r1, r3
 80121f2:	6878      	ldr	r0, [r7, #4]
 80121f4:	f000 f93c 	bl	8012470 <USBD_CtlSendData>
        break;
 80121f8:	e00c      	b.n	8012214 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	3304      	adds	r3, #4
 80121fe:	2201      	movs	r2, #1
 8012200:	4619      	mov	r1, r3
 8012202:	6878      	ldr	r0, [r7, #4]
 8012204:	f000 f934 	bl	8012470 <USBD_CtlSendData>
        break;
 8012208:	e004      	b.n	8012214 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801220a:	6839      	ldr	r1, [r7, #0]
 801220c:	6878      	ldr	r0, [r7, #4]
 801220e:	f000 f8be 	bl	801238e <USBD_CtlError>
        break;
 8012212:	bf00      	nop
}
 8012214:	bf00      	nop
 8012216:	3708      	adds	r7, #8
 8012218:	46bd      	mov	sp, r7
 801221a:	bd80      	pop	{r7, pc}

0801221c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801221c:	b580      	push	{r7, lr}
 801221e:	b082      	sub	sp, #8
 8012220:	af00      	add	r7, sp, #0
 8012222:	6078      	str	r0, [r7, #4]
 8012224:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801222c:	b2db      	uxtb	r3, r3
 801222e:	3b01      	subs	r3, #1
 8012230:	2b02      	cmp	r3, #2
 8012232:	d81e      	bhi.n	8012272 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012234:	683b      	ldr	r3, [r7, #0]
 8012236:	88db      	ldrh	r3, [r3, #6]
 8012238:	2b02      	cmp	r3, #2
 801223a:	d004      	beq.n	8012246 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801223c:	6839      	ldr	r1, [r7, #0]
 801223e:	6878      	ldr	r0, [r7, #4]
 8012240:	f000 f8a5 	bl	801238e <USBD_CtlError>
        break;
 8012244:	e01a      	b.n	801227c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	2201      	movs	r2, #1
 801224a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012252:	2b00      	cmp	r3, #0
 8012254:	d005      	beq.n	8012262 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	68db      	ldr	r3, [r3, #12]
 801225a:	f043 0202 	orr.w	r2, r3, #2
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	330c      	adds	r3, #12
 8012266:	2202      	movs	r2, #2
 8012268:	4619      	mov	r1, r3
 801226a:	6878      	ldr	r0, [r7, #4]
 801226c:	f000 f900 	bl	8012470 <USBD_CtlSendData>
      break;
 8012270:	e004      	b.n	801227c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8012272:	6839      	ldr	r1, [r7, #0]
 8012274:	6878      	ldr	r0, [r7, #4]
 8012276:	f000 f88a 	bl	801238e <USBD_CtlError>
      break;
 801227a:	bf00      	nop
  }
}
 801227c:	bf00      	nop
 801227e:	3708      	adds	r7, #8
 8012280:	46bd      	mov	sp, r7
 8012282:	bd80      	pop	{r7, pc}

08012284 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012284:	b580      	push	{r7, lr}
 8012286:	b082      	sub	sp, #8
 8012288:	af00      	add	r7, sp, #0
 801228a:	6078      	str	r0, [r7, #4]
 801228c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801228e:	683b      	ldr	r3, [r7, #0]
 8012290:	885b      	ldrh	r3, [r3, #2]
 8012292:	2b01      	cmp	r3, #1
 8012294:	d107      	bne.n	80122a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	2201      	movs	r2, #1
 801229a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801229e:	6878      	ldr	r0, [r7, #4]
 80122a0:	f000 f940 	bl	8012524 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80122a4:	e013      	b.n	80122ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80122a6:	683b      	ldr	r3, [r7, #0]
 80122a8:	885b      	ldrh	r3, [r3, #2]
 80122aa:	2b02      	cmp	r3, #2
 80122ac:	d10b      	bne.n	80122c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80122ae:	683b      	ldr	r3, [r7, #0]
 80122b0:	889b      	ldrh	r3, [r3, #4]
 80122b2:	0a1b      	lsrs	r3, r3, #8
 80122b4:	b29b      	uxth	r3, r3
 80122b6:	b2da      	uxtb	r2, r3
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80122be:	6878      	ldr	r0, [r7, #4]
 80122c0:	f000 f930 	bl	8012524 <USBD_CtlSendStatus>
}
 80122c4:	e003      	b.n	80122ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80122c6:	6839      	ldr	r1, [r7, #0]
 80122c8:	6878      	ldr	r0, [r7, #4]
 80122ca:	f000 f860 	bl	801238e <USBD_CtlError>
}
 80122ce:	bf00      	nop
 80122d0:	3708      	adds	r7, #8
 80122d2:	46bd      	mov	sp, r7
 80122d4:	bd80      	pop	{r7, pc}

080122d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80122d6:	b580      	push	{r7, lr}
 80122d8:	b082      	sub	sp, #8
 80122da:	af00      	add	r7, sp, #0
 80122dc:	6078      	str	r0, [r7, #4]
 80122de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80122e6:	b2db      	uxtb	r3, r3
 80122e8:	3b01      	subs	r3, #1
 80122ea:	2b02      	cmp	r3, #2
 80122ec:	d80b      	bhi.n	8012306 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80122ee:	683b      	ldr	r3, [r7, #0]
 80122f0:	885b      	ldrh	r3, [r3, #2]
 80122f2:	2b01      	cmp	r3, #1
 80122f4:	d10c      	bne.n	8012310 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	2200      	movs	r2, #0
 80122fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80122fe:	6878      	ldr	r0, [r7, #4]
 8012300:	f000 f910 	bl	8012524 <USBD_CtlSendStatus>
      }
      break;
 8012304:	e004      	b.n	8012310 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8012306:	6839      	ldr	r1, [r7, #0]
 8012308:	6878      	ldr	r0, [r7, #4]
 801230a:	f000 f840 	bl	801238e <USBD_CtlError>
      break;
 801230e:	e000      	b.n	8012312 <USBD_ClrFeature+0x3c>
      break;
 8012310:	bf00      	nop
  }
}
 8012312:	bf00      	nop
 8012314:	3708      	adds	r7, #8
 8012316:	46bd      	mov	sp, r7
 8012318:	bd80      	pop	{r7, pc}

0801231a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801231a:	b580      	push	{r7, lr}
 801231c:	b084      	sub	sp, #16
 801231e:	af00      	add	r7, sp, #0
 8012320:	6078      	str	r0, [r7, #4]
 8012322:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012324:	683b      	ldr	r3, [r7, #0]
 8012326:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	781a      	ldrb	r2, [r3, #0]
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	3301      	adds	r3, #1
 8012334:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	781a      	ldrb	r2, [r3, #0]
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	3301      	adds	r3, #1
 8012342:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012344:	68f8      	ldr	r0, [r7, #12]
 8012346:	f7ff fa41 	bl	80117cc <SWAPBYTE>
 801234a:	4603      	mov	r3, r0
 801234c:	461a      	mov	r2, r3
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	3301      	adds	r3, #1
 8012356:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	3301      	adds	r3, #1
 801235c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801235e:	68f8      	ldr	r0, [r7, #12]
 8012360:	f7ff fa34 	bl	80117cc <SWAPBYTE>
 8012364:	4603      	mov	r3, r0
 8012366:	461a      	mov	r2, r3
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	3301      	adds	r3, #1
 8012370:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	3301      	adds	r3, #1
 8012376:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012378:	68f8      	ldr	r0, [r7, #12]
 801237a:	f7ff fa27 	bl	80117cc <SWAPBYTE>
 801237e:	4603      	mov	r3, r0
 8012380:	461a      	mov	r2, r3
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	80da      	strh	r2, [r3, #6]
}
 8012386:	bf00      	nop
 8012388:	3710      	adds	r7, #16
 801238a:	46bd      	mov	sp, r7
 801238c:	bd80      	pop	{r7, pc}

0801238e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801238e:	b580      	push	{r7, lr}
 8012390:	b082      	sub	sp, #8
 8012392:	af00      	add	r7, sp, #0
 8012394:	6078      	str	r0, [r7, #4]
 8012396:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012398:	2180      	movs	r1, #128	; 0x80
 801239a:	6878      	ldr	r0, [r7, #4]
 801239c:	f000 fd80 	bl	8012ea0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80123a0:	2100      	movs	r1, #0
 80123a2:	6878      	ldr	r0, [r7, #4]
 80123a4:	f000 fd7c 	bl	8012ea0 <USBD_LL_StallEP>
}
 80123a8:	bf00      	nop
 80123aa:	3708      	adds	r7, #8
 80123ac:	46bd      	mov	sp, r7
 80123ae:	bd80      	pop	{r7, pc}

080123b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b086      	sub	sp, #24
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	60f8      	str	r0, [r7, #12]
 80123b8:	60b9      	str	r1, [r7, #8]
 80123ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80123bc:	2300      	movs	r3, #0
 80123be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d036      	beq.n	8012434 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80123ca:	6938      	ldr	r0, [r7, #16]
 80123cc:	f000 f836 	bl	801243c <USBD_GetLen>
 80123d0:	4603      	mov	r3, r0
 80123d2:	3301      	adds	r3, #1
 80123d4:	b29b      	uxth	r3, r3
 80123d6:	005b      	lsls	r3, r3, #1
 80123d8:	b29a      	uxth	r2, r3
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80123de:	7dfb      	ldrb	r3, [r7, #23]
 80123e0:	68ba      	ldr	r2, [r7, #8]
 80123e2:	4413      	add	r3, r2
 80123e4:	687a      	ldr	r2, [r7, #4]
 80123e6:	7812      	ldrb	r2, [r2, #0]
 80123e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80123ea:	7dfb      	ldrb	r3, [r7, #23]
 80123ec:	3301      	adds	r3, #1
 80123ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80123f0:	7dfb      	ldrb	r3, [r7, #23]
 80123f2:	68ba      	ldr	r2, [r7, #8]
 80123f4:	4413      	add	r3, r2
 80123f6:	2203      	movs	r2, #3
 80123f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80123fa:	7dfb      	ldrb	r3, [r7, #23]
 80123fc:	3301      	adds	r3, #1
 80123fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012400:	e013      	b.n	801242a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012402:	7dfb      	ldrb	r3, [r7, #23]
 8012404:	68ba      	ldr	r2, [r7, #8]
 8012406:	4413      	add	r3, r2
 8012408:	693a      	ldr	r2, [r7, #16]
 801240a:	7812      	ldrb	r2, [r2, #0]
 801240c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801240e:	693b      	ldr	r3, [r7, #16]
 8012410:	3301      	adds	r3, #1
 8012412:	613b      	str	r3, [r7, #16]
    idx++;
 8012414:	7dfb      	ldrb	r3, [r7, #23]
 8012416:	3301      	adds	r3, #1
 8012418:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801241a:	7dfb      	ldrb	r3, [r7, #23]
 801241c:	68ba      	ldr	r2, [r7, #8]
 801241e:	4413      	add	r3, r2
 8012420:	2200      	movs	r2, #0
 8012422:	701a      	strb	r2, [r3, #0]
    idx++;
 8012424:	7dfb      	ldrb	r3, [r7, #23]
 8012426:	3301      	adds	r3, #1
 8012428:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801242a:	693b      	ldr	r3, [r7, #16]
 801242c:	781b      	ldrb	r3, [r3, #0]
 801242e:	2b00      	cmp	r3, #0
 8012430:	d1e7      	bne.n	8012402 <USBD_GetString+0x52>
 8012432:	e000      	b.n	8012436 <USBD_GetString+0x86>
    return;
 8012434:	bf00      	nop
  }
}
 8012436:	3718      	adds	r7, #24
 8012438:	46bd      	mov	sp, r7
 801243a:	bd80      	pop	{r7, pc}

0801243c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801243c:	b480      	push	{r7}
 801243e:	b085      	sub	sp, #20
 8012440:	af00      	add	r7, sp, #0
 8012442:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012444:	2300      	movs	r3, #0
 8012446:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801244c:	e005      	b.n	801245a <USBD_GetLen+0x1e>
  {
    len++;
 801244e:	7bfb      	ldrb	r3, [r7, #15]
 8012450:	3301      	adds	r3, #1
 8012452:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012454:	68bb      	ldr	r3, [r7, #8]
 8012456:	3301      	adds	r3, #1
 8012458:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801245a:	68bb      	ldr	r3, [r7, #8]
 801245c:	781b      	ldrb	r3, [r3, #0]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d1f5      	bne.n	801244e <USBD_GetLen+0x12>
  }

  return len;
 8012462:	7bfb      	ldrb	r3, [r7, #15]
}
 8012464:	4618      	mov	r0, r3
 8012466:	3714      	adds	r7, #20
 8012468:	46bd      	mov	sp, r7
 801246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801246e:	4770      	bx	lr

08012470 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b084      	sub	sp, #16
 8012474:	af00      	add	r7, sp, #0
 8012476:	60f8      	str	r0, [r7, #12]
 8012478:	60b9      	str	r1, [r7, #8]
 801247a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	2202      	movs	r2, #2
 8012480:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	687a      	ldr	r2, [r7, #4]
 8012488:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	687a      	ldr	r2, [r7, #4]
 801248e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	68ba      	ldr	r2, [r7, #8]
 8012494:	2100      	movs	r1, #0
 8012496:	68f8      	ldr	r0, [r7, #12]
 8012498:	f000 fd8b 	bl	8012fb2 <USBD_LL_Transmit>

  return USBD_OK;
 801249c:	2300      	movs	r3, #0
}
 801249e:	4618      	mov	r0, r3
 80124a0:	3710      	adds	r7, #16
 80124a2:	46bd      	mov	sp, r7
 80124a4:	bd80      	pop	{r7, pc}

080124a6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80124a6:	b580      	push	{r7, lr}
 80124a8:	b084      	sub	sp, #16
 80124aa:	af00      	add	r7, sp, #0
 80124ac:	60f8      	str	r0, [r7, #12]
 80124ae:	60b9      	str	r1, [r7, #8]
 80124b0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	68ba      	ldr	r2, [r7, #8]
 80124b6:	2100      	movs	r1, #0
 80124b8:	68f8      	ldr	r0, [r7, #12]
 80124ba:	f000 fd7a 	bl	8012fb2 <USBD_LL_Transmit>

  return USBD_OK;
 80124be:	2300      	movs	r3, #0
}
 80124c0:	4618      	mov	r0, r3
 80124c2:	3710      	adds	r7, #16
 80124c4:	46bd      	mov	sp, r7
 80124c6:	bd80      	pop	{r7, pc}

080124c8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b084      	sub	sp, #16
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	60f8      	str	r0, [r7, #12]
 80124d0:	60b9      	str	r1, [r7, #8]
 80124d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	2203      	movs	r2, #3
 80124d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	687a      	ldr	r2, [r7, #4]
 80124e0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	687a      	ldr	r2, [r7, #4]
 80124e8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	68ba      	ldr	r2, [r7, #8]
 80124f0:	2100      	movs	r1, #0
 80124f2:	68f8      	ldr	r0, [r7, #12]
 80124f4:	f000 fd7e 	bl	8012ff4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80124f8:	2300      	movs	r3, #0
}
 80124fa:	4618      	mov	r0, r3
 80124fc:	3710      	adds	r7, #16
 80124fe:	46bd      	mov	sp, r7
 8012500:	bd80      	pop	{r7, pc}

08012502 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012502:	b580      	push	{r7, lr}
 8012504:	b084      	sub	sp, #16
 8012506:	af00      	add	r7, sp, #0
 8012508:	60f8      	str	r0, [r7, #12]
 801250a:	60b9      	str	r1, [r7, #8]
 801250c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	68ba      	ldr	r2, [r7, #8]
 8012512:	2100      	movs	r1, #0
 8012514:	68f8      	ldr	r0, [r7, #12]
 8012516:	f000 fd6d 	bl	8012ff4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801251a:	2300      	movs	r3, #0
}
 801251c:	4618      	mov	r0, r3
 801251e:	3710      	adds	r7, #16
 8012520:	46bd      	mov	sp, r7
 8012522:	bd80      	pop	{r7, pc}

08012524 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012524:	b580      	push	{r7, lr}
 8012526:	b082      	sub	sp, #8
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	2204      	movs	r2, #4
 8012530:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012534:	2300      	movs	r3, #0
 8012536:	2200      	movs	r2, #0
 8012538:	2100      	movs	r1, #0
 801253a:	6878      	ldr	r0, [r7, #4]
 801253c:	f000 fd39 	bl	8012fb2 <USBD_LL_Transmit>

  return USBD_OK;
 8012540:	2300      	movs	r3, #0
}
 8012542:	4618      	mov	r0, r3
 8012544:	3708      	adds	r7, #8
 8012546:	46bd      	mov	sp, r7
 8012548:	bd80      	pop	{r7, pc}

0801254a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801254a:	b580      	push	{r7, lr}
 801254c:	b082      	sub	sp, #8
 801254e:	af00      	add	r7, sp, #0
 8012550:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	2205      	movs	r2, #5
 8012556:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801255a:	2300      	movs	r3, #0
 801255c:	2200      	movs	r2, #0
 801255e:	2100      	movs	r1, #0
 8012560:	6878      	ldr	r0, [r7, #4]
 8012562:	f000 fd47 	bl	8012ff4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012566:	2300      	movs	r3, #0
}
 8012568:	4618      	mov	r0, r3
 801256a:	3708      	adds	r7, #8
 801256c:	46bd      	mov	sp, r7
 801256e:	bd80      	pop	{r7, pc}

08012570 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012570:	b580      	push	{r7, lr}
 8012572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012574:	2200      	movs	r2, #0
 8012576:	4913      	ldr	r1, [pc, #76]	; (80125c4 <MX_USB_DEVICE_Init+0x54>)
 8012578:	4813      	ldr	r0, [pc, #76]	; (80125c8 <MX_USB_DEVICE_Init+0x58>)
 801257a:	f7fe fd07 	bl	8010f8c <USBD_Init>
 801257e:	4603      	mov	r3, r0
 8012580:	2b00      	cmp	r3, #0
 8012582:	d001      	beq.n	8012588 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012584:	f7ef fc5e 	bl	8001e44 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012588:	4910      	ldr	r1, [pc, #64]	; (80125cc <MX_USB_DEVICE_Init+0x5c>)
 801258a:	480f      	ldr	r0, [pc, #60]	; (80125c8 <MX_USB_DEVICE_Init+0x58>)
 801258c:	f7fe fd2e 	bl	8010fec <USBD_RegisterClass>
 8012590:	4603      	mov	r3, r0
 8012592:	2b00      	cmp	r3, #0
 8012594:	d001      	beq.n	801259a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8012596:	f7ef fc55 	bl	8001e44 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801259a:	490d      	ldr	r1, [pc, #52]	; (80125d0 <MX_USB_DEVICE_Init+0x60>)
 801259c:	480a      	ldr	r0, [pc, #40]	; (80125c8 <MX_USB_DEVICE_Init+0x58>)
 801259e:	f7fe fc1f 	bl	8010de0 <USBD_CDC_RegisterInterface>
 80125a2:	4603      	mov	r3, r0
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d001      	beq.n	80125ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80125a8:	f7ef fc4c 	bl	8001e44 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80125ac:	4806      	ldr	r0, [pc, #24]	; (80125c8 <MX_USB_DEVICE_Init+0x58>)
 80125ae:	f7fe fd53 	bl	8011058 <USBD_Start>
 80125b2:	4603      	mov	r3, r0
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d001      	beq.n	80125bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80125b8:	f7ef fc44 	bl	8001e44 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80125bc:	f7f6 ff96 	bl	80094ec <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80125c0:	bf00      	nop
 80125c2:	bd80      	pop	{r7, pc}
 80125c4:	240000b0 	.word	0x240000b0
 80125c8:	240345f0 	.word	0x240345f0
 80125cc:	2400001c 	.word	0x2400001c
 80125d0:	2400009c 	.word	0x2400009c

080125d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80125d4:	b580      	push	{r7, lr}
 80125d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80125d8:	2200      	movs	r2, #0
 80125da:	4907      	ldr	r1, [pc, #28]	; (80125f8 <CDC_Init_FS+0x24>)
 80125dc:	4807      	ldr	r0, [pc, #28]	; (80125fc <CDC_Init_FS+0x28>)
 80125de:	f7fe fc19 	bl	8010e14 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80125e2:	4907      	ldr	r1, [pc, #28]	; (8012600 <CDC_Init_FS+0x2c>)
 80125e4:	4805      	ldr	r0, [pc, #20]	; (80125fc <CDC_Init_FS+0x28>)
 80125e6:	f7fe fc37 	bl	8010e58 <USBD_CDC_SetRxBuffer>
  start_flag = 1;
 80125ea:	4b06      	ldr	r3, [pc, #24]	; (8012604 <CDC_Init_FS+0x30>)
 80125ec:	2201      	movs	r2, #1
 80125ee:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 80125f0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80125f2:	4618      	mov	r0, r3
 80125f4:	bd80      	pop	{r7, pc}
 80125f6:	bf00      	nop
 80125f8:	240348e0 	.word	0x240348e0
 80125fc:	240345f0 	.word	0x240345f0
 8012600:	240348d4 	.word	0x240348d4
 8012604:	24033a13 	.word	0x24033a13

08012608 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012608:	b480      	push	{r7}
 801260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801260c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801260e:	4618      	mov	r0, r3
 8012610:	46bd      	mov	sp, r7
 8012612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012616:	4770      	bx	lr

08012618 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012618:	b480      	push	{r7}
 801261a:	b083      	sub	sp, #12
 801261c:	af00      	add	r7, sp, #0
 801261e:	4603      	mov	r3, r0
 8012620:	6039      	str	r1, [r7, #0]
 8012622:	71fb      	strb	r3, [r7, #7]
 8012624:	4613      	mov	r3, r2
 8012626:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012628:	79fb      	ldrb	r3, [r7, #7]
 801262a:	2b23      	cmp	r3, #35	; 0x23
 801262c:	f200 8095 	bhi.w	801275a <CDC_Control_FS+0x142>
 8012630:	a201      	add	r2, pc, #4	; (adr r2, 8012638 <CDC_Control_FS+0x20>)
 8012632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012636:	bf00      	nop
 8012638:	0801275b 	.word	0x0801275b
 801263c:	0801275b 	.word	0x0801275b
 8012640:	0801275b 	.word	0x0801275b
 8012644:	0801275b 	.word	0x0801275b
 8012648:	0801275b 	.word	0x0801275b
 801264c:	0801275b 	.word	0x0801275b
 8012650:	0801275b 	.word	0x0801275b
 8012654:	0801275b 	.word	0x0801275b
 8012658:	0801275b 	.word	0x0801275b
 801265c:	0801275b 	.word	0x0801275b
 8012660:	0801275b 	.word	0x0801275b
 8012664:	0801275b 	.word	0x0801275b
 8012668:	0801275b 	.word	0x0801275b
 801266c:	0801275b 	.word	0x0801275b
 8012670:	0801275b 	.word	0x0801275b
 8012674:	0801275b 	.word	0x0801275b
 8012678:	0801275b 	.word	0x0801275b
 801267c:	0801275b 	.word	0x0801275b
 8012680:	0801275b 	.word	0x0801275b
 8012684:	0801275b 	.word	0x0801275b
 8012688:	0801275b 	.word	0x0801275b
 801268c:	0801275b 	.word	0x0801275b
 8012690:	0801275b 	.word	0x0801275b
 8012694:	0801275b 	.word	0x0801275b
 8012698:	0801275b 	.word	0x0801275b
 801269c:	0801275b 	.word	0x0801275b
 80126a0:	0801275b 	.word	0x0801275b
 80126a4:	0801275b 	.word	0x0801275b
 80126a8:	0801275b 	.word	0x0801275b
 80126ac:	0801275b 	.word	0x0801275b
 80126b0:	0801275b 	.word	0x0801275b
 80126b4:	0801275b 	.word	0x0801275b
 80126b8:	080126c9 	.word	0x080126c9
 80126bc:	0801270b 	.word	0x0801270b
 80126c0:	0801275b 	.word	0x0801275b
 80126c4:	0801275b 	.word	0x0801275b
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	buf[0] = pbuf[0];
 80126c8:	683b      	ldr	r3, [r7, #0]
 80126ca:	781a      	ldrb	r2, [r3, #0]
 80126cc:	4b27      	ldr	r3, [pc, #156]	; (801276c <CDC_Control_FS+0x154>)
 80126ce:	701a      	strb	r2, [r3, #0]
    	buf[1] = pbuf[1];
 80126d0:	683b      	ldr	r3, [r7, #0]
 80126d2:	785a      	ldrb	r2, [r3, #1]
 80126d4:	4b25      	ldr	r3, [pc, #148]	; (801276c <CDC_Control_FS+0x154>)
 80126d6:	705a      	strb	r2, [r3, #1]
    	buf[2] = pbuf[2];
 80126d8:	683b      	ldr	r3, [r7, #0]
 80126da:	789a      	ldrb	r2, [r3, #2]
 80126dc:	4b23      	ldr	r3, [pc, #140]	; (801276c <CDC_Control_FS+0x154>)
 80126de:	709a      	strb	r2, [r3, #2]
    	buf[3] = pbuf[3];
 80126e0:	683b      	ldr	r3, [r7, #0]
 80126e2:	78da      	ldrb	r2, [r3, #3]
 80126e4:	4b21      	ldr	r3, [pc, #132]	; (801276c <CDC_Control_FS+0x154>)
 80126e6:	70da      	strb	r2, [r3, #3]
    	buf[4] = pbuf[4];
 80126e8:	683b      	ldr	r3, [r7, #0]
 80126ea:	791a      	ldrb	r2, [r3, #4]
 80126ec:	4b1f      	ldr	r3, [pc, #124]	; (801276c <CDC_Control_FS+0x154>)
 80126ee:	711a      	strb	r2, [r3, #4]
    	buf[5] = pbuf[5];
 80126f0:	683b      	ldr	r3, [r7, #0]
 80126f2:	795a      	ldrb	r2, [r3, #5]
 80126f4:	4b1d      	ldr	r3, [pc, #116]	; (801276c <CDC_Control_FS+0x154>)
 80126f6:	715a      	strb	r2, [r3, #5]
    	buf[6] = pbuf[6];
 80126f8:	683b      	ldr	r3, [r7, #0]
 80126fa:	799a      	ldrb	r2, [r3, #6]
 80126fc:	4b1b      	ldr	r3, [pc, #108]	; (801276c <CDC_Control_FS+0x154>)
 80126fe:	719a      	strb	r2, [r3, #6]
    	buf[7] = pbuf[7];
 8012700:	683b      	ldr	r3, [r7, #0]
 8012702:	79da      	ldrb	r2, [r3, #7]
 8012704:	4b19      	ldr	r3, [pc, #100]	; (801276c <CDC_Control_FS+0x154>)
 8012706:	71da      	strb	r2, [r3, #7]

    break;
 8012708:	e028      	b.n	801275c <CDC_Control_FS+0x144>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = buf[0];
 801270a:	4b18      	ldr	r3, [pc, #96]	; (801276c <CDC_Control_FS+0x154>)
 801270c:	781a      	ldrb	r2, [r3, #0]
 801270e:	683b      	ldr	r3, [r7, #0]
 8012710:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = buf[1];
 8012712:	683b      	ldr	r3, [r7, #0]
 8012714:	3301      	adds	r3, #1
 8012716:	4a15      	ldr	r2, [pc, #84]	; (801276c <CDC_Control_FS+0x154>)
 8012718:	7852      	ldrb	r2, [r2, #1]
 801271a:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = buf[2];
 801271c:	683b      	ldr	r3, [r7, #0]
 801271e:	3302      	adds	r3, #2
 8012720:	4a12      	ldr	r2, [pc, #72]	; (801276c <CDC_Control_FS+0x154>)
 8012722:	7892      	ldrb	r2, [r2, #2]
 8012724:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = buf[3];
 8012726:	683b      	ldr	r3, [r7, #0]
 8012728:	3303      	adds	r3, #3
 801272a:	4a10      	ldr	r2, [pc, #64]	; (801276c <CDC_Control_FS+0x154>)
 801272c:	78d2      	ldrb	r2, [r2, #3]
 801272e:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = buf[4];
 8012730:	683b      	ldr	r3, [r7, #0]
 8012732:	3304      	adds	r3, #4
 8012734:	4a0d      	ldr	r2, [pc, #52]	; (801276c <CDC_Control_FS+0x154>)
 8012736:	7912      	ldrb	r2, [r2, #4]
 8012738:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = buf[5];
 801273a:	683b      	ldr	r3, [r7, #0]
 801273c:	3305      	adds	r3, #5
 801273e:	4a0b      	ldr	r2, [pc, #44]	; (801276c <CDC_Control_FS+0x154>)
 8012740:	7952      	ldrb	r2, [r2, #5]
 8012742:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = buf[6];
 8012744:	683b      	ldr	r3, [r7, #0]
 8012746:	3306      	adds	r3, #6
 8012748:	4a08      	ldr	r2, [pc, #32]	; (801276c <CDC_Control_FS+0x154>)
 801274a:	7992      	ldrb	r2, [r2, #6]
 801274c:	701a      	strb	r2, [r3, #0]
    	pbuf[7] = buf[7];
 801274e:	683b      	ldr	r3, [r7, #0]
 8012750:	3307      	adds	r3, #7
 8012752:	4a06      	ldr	r2, [pc, #24]	; (801276c <CDC_Control_FS+0x154>)
 8012754:	79d2      	ldrb	r2, [r2, #7]
 8012756:	701a      	strb	r2, [r3, #0]
    break;
 8012758:	e000      	b.n	801275c <CDC_Control_FS+0x144>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801275a:	bf00      	nop
  }

  return (USBD_OK);
 801275c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801275e:	4618      	mov	r0, r3
 8012760:	370c      	adds	r7, #12
 8012762:	46bd      	mov	sp, r7
 8012764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012768:	4770      	bx	lr
 801276a:	bf00      	nop
 801276c:	240348cc 	.word	0x240348cc

08012770 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012770:	b580      	push	{r7, lr}
 8012772:	b082      	sub	sp, #8
 8012774:	af00      	add	r7, sp, #0
 8012776:	6078      	str	r0, [r7, #4]
 8012778:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801277a:	6879      	ldr	r1, [r7, #4]
 801277c:	4809      	ldr	r0, [pc, #36]	; (80127a4 <CDC_Receive_FS+0x34>)
 801277e:	f7fe fb6b 	bl	8010e58 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012782:	4808      	ldr	r0, [pc, #32]	; (80127a4 <CDC_Receive_FS+0x34>)
 8012784:	f7fe fbcc 	bl	8010f20 <USBD_CDC_ReceivePacket>
  memcpy(options, Buf, *Len);
 8012788:	4b07      	ldr	r3, [pc, #28]	; (80127a8 <CDC_Receive_FS+0x38>)
 801278a:	6818      	ldr	r0, [r3, #0]
 801278c:	683b      	ldr	r3, [r7, #0]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	461a      	mov	r2, r3
 8012792:	6879      	ldr	r1, [r7, #4]
 8012794:	f000 fcca 	bl	801312c <memcpy>
  return (USBD_OK);
 8012798:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801279a:	4618      	mov	r0, r3
 801279c:	3708      	adds	r7, #8
 801279e:	46bd      	mov	sp, r7
 80127a0:	bd80      	pop	{r7, pc}
 80127a2:	bf00      	nop
 80127a4:	240345f0 	.word	0x240345f0
 80127a8:	240345dc 	.word	0x240345dc

080127ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b084      	sub	sp, #16
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	6078      	str	r0, [r7, #4]
 80127b4:	460b      	mov	r3, r1
 80127b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80127b8:	2300      	movs	r3, #0
 80127ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80127bc:	4b0d      	ldr	r3, [pc, #52]	; (80127f4 <CDC_Transmit_FS+0x48>)
 80127be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80127c2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80127c4:	68bb      	ldr	r3, [r7, #8]
 80127c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d001      	beq.n	80127d2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80127ce:	2301      	movs	r3, #1
 80127d0:	e00b      	b.n	80127ea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80127d2:	887b      	ldrh	r3, [r7, #2]
 80127d4:	461a      	mov	r2, r3
 80127d6:	6879      	ldr	r1, [r7, #4]
 80127d8:	4806      	ldr	r0, [pc, #24]	; (80127f4 <CDC_Transmit_FS+0x48>)
 80127da:	f7fe fb1b 	bl	8010e14 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80127de:	4805      	ldr	r0, [pc, #20]	; (80127f4 <CDC_Transmit_FS+0x48>)
 80127e0:	f7fe fb58 	bl	8010e94 <USBD_CDC_TransmitPacket>
 80127e4:	4603      	mov	r3, r0
 80127e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80127e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80127ea:	4618      	mov	r0, r3
 80127ec:	3710      	adds	r7, #16
 80127ee:	46bd      	mov	sp, r7
 80127f0:	bd80      	pop	{r7, pc}
 80127f2:	bf00      	nop
 80127f4:	240345f0 	.word	0x240345f0

080127f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80127f8:	b480      	push	{r7}
 80127fa:	b087      	sub	sp, #28
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	60f8      	str	r0, [r7, #12]
 8012800:	60b9      	str	r1, [r7, #8]
 8012802:	4613      	mov	r3, r2
 8012804:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012806:	2300      	movs	r3, #0
 8012808:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801280a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801280e:	4618      	mov	r0, r3
 8012810:	371c      	adds	r7, #28
 8012812:	46bd      	mov	sp, r7
 8012814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012818:	4770      	bx	lr
	...

0801281c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801281c:	b480      	push	{r7}
 801281e:	b083      	sub	sp, #12
 8012820:	af00      	add	r7, sp, #0
 8012822:	4603      	mov	r3, r0
 8012824:	6039      	str	r1, [r7, #0]
 8012826:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012828:	683b      	ldr	r3, [r7, #0]
 801282a:	2212      	movs	r2, #18
 801282c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801282e:	4b03      	ldr	r3, [pc, #12]	; (801283c <USBD_FS_DeviceDescriptor+0x20>)
}
 8012830:	4618      	mov	r0, r3
 8012832:	370c      	adds	r7, #12
 8012834:	46bd      	mov	sp, r7
 8012836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801283a:	4770      	bx	lr
 801283c:	240000cc 	.word	0x240000cc

08012840 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012840:	b480      	push	{r7}
 8012842:	b083      	sub	sp, #12
 8012844:	af00      	add	r7, sp, #0
 8012846:	4603      	mov	r3, r0
 8012848:	6039      	str	r1, [r7, #0]
 801284a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801284c:	683b      	ldr	r3, [r7, #0]
 801284e:	2204      	movs	r2, #4
 8012850:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012852:	4b03      	ldr	r3, [pc, #12]	; (8012860 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012854:	4618      	mov	r0, r3
 8012856:	370c      	adds	r7, #12
 8012858:	46bd      	mov	sp, r7
 801285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801285e:	4770      	bx	lr
 8012860:	240000e0 	.word	0x240000e0

08012864 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012864:	b580      	push	{r7, lr}
 8012866:	b082      	sub	sp, #8
 8012868:	af00      	add	r7, sp, #0
 801286a:	4603      	mov	r3, r0
 801286c:	6039      	str	r1, [r7, #0]
 801286e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012870:	79fb      	ldrb	r3, [r7, #7]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d105      	bne.n	8012882 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012876:	683a      	ldr	r2, [r7, #0]
 8012878:	4907      	ldr	r1, [pc, #28]	; (8012898 <USBD_FS_ProductStrDescriptor+0x34>)
 801287a:	4808      	ldr	r0, [pc, #32]	; (801289c <USBD_FS_ProductStrDescriptor+0x38>)
 801287c:	f7ff fd98 	bl	80123b0 <USBD_GetString>
 8012880:	e004      	b.n	801288c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012882:	683a      	ldr	r2, [r7, #0]
 8012884:	4904      	ldr	r1, [pc, #16]	; (8012898 <USBD_FS_ProductStrDescriptor+0x34>)
 8012886:	4805      	ldr	r0, [pc, #20]	; (801289c <USBD_FS_ProductStrDescriptor+0x38>)
 8012888:	f7ff fd92 	bl	80123b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801288c:	4b02      	ldr	r3, [pc, #8]	; (8012898 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801288e:	4618      	mov	r0, r3
 8012890:	3708      	adds	r7, #8
 8012892:	46bd      	mov	sp, r7
 8012894:	bd80      	pop	{r7, pc}
 8012896:	bf00      	nop
 8012898:	240350e0 	.word	0x240350e0
 801289c:	08013170 	.word	0x08013170

080128a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80128a0:	b580      	push	{r7, lr}
 80128a2:	b082      	sub	sp, #8
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	4603      	mov	r3, r0
 80128a8:	6039      	str	r1, [r7, #0]
 80128aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80128ac:	683a      	ldr	r2, [r7, #0]
 80128ae:	4904      	ldr	r1, [pc, #16]	; (80128c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80128b0:	4804      	ldr	r0, [pc, #16]	; (80128c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80128b2:	f7ff fd7d 	bl	80123b0 <USBD_GetString>
  return USBD_StrDesc;
 80128b6:	4b02      	ldr	r3, [pc, #8]	; (80128c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80128b8:	4618      	mov	r0, r3
 80128ba:	3708      	adds	r7, #8
 80128bc:	46bd      	mov	sp, r7
 80128be:	bd80      	pop	{r7, pc}
 80128c0:	240350e0 	.word	0x240350e0
 80128c4:	08013188 	.word	0x08013188

080128c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80128c8:	b580      	push	{r7, lr}
 80128ca:	b082      	sub	sp, #8
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	4603      	mov	r3, r0
 80128d0:	6039      	str	r1, [r7, #0]
 80128d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80128d4:	683b      	ldr	r3, [r7, #0]
 80128d6:	221a      	movs	r2, #26
 80128d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80128da:	f000 f843 	bl	8012964 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80128de:	4b02      	ldr	r3, [pc, #8]	; (80128e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80128e0:	4618      	mov	r0, r3
 80128e2:	3708      	adds	r7, #8
 80128e4:	46bd      	mov	sp, r7
 80128e6:	bd80      	pop	{r7, pc}
 80128e8:	240000e4 	.word	0x240000e4

080128ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b082      	sub	sp, #8
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	4603      	mov	r3, r0
 80128f4:	6039      	str	r1, [r7, #0]
 80128f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80128f8:	79fb      	ldrb	r3, [r7, #7]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d105      	bne.n	801290a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80128fe:	683a      	ldr	r2, [r7, #0]
 8012900:	4907      	ldr	r1, [pc, #28]	; (8012920 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012902:	4808      	ldr	r0, [pc, #32]	; (8012924 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012904:	f7ff fd54 	bl	80123b0 <USBD_GetString>
 8012908:	e004      	b.n	8012914 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801290a:	683a      	ldr	r2, [r7, #0]
 801290c:	4904      	ldr	r1, [pc, #16]	; (8012920 <USBD_FS_ConfigStrDescriptor+0x34>)
 801290e:	4805      	ldr	r0, [pc, #20]	; (8012924 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012910:	f7ff fd4e 	bl	80123b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012914:	4b02      	ldr	r3, [pc, #8]	; (8012920 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8012916:	4618      	mov	r0, r3
 8012918:	3708      	adds	r7, #8
 801291a:	46bd      	mov	sp, r7
 801291c:	bd80      	pop	{r7, pc}
 801291e:	bf00      	nop
 8012920:	240350e0 	.word	0x240350e0
 8012924:	0801319c 	.word	0x0801319c

08012928 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012928:	b580      	push	{r7, lr}
 801292a:	b082      	sub	sp, #8
 801292c:	af00      	add	r7, sp, #0
 801292e:	4603      	mov	r3, r0
 8012930:	6039      	str	r1, [r7, #0]
 8012932:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012934:	79fb      	ldrb	r3, [r7, #7]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d105      	bne.n	8012946 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801293a:	683a      	ldr	r2, [r7, #0]
 801293c:	4907      	ldr	r1, [pc, #28]	; (801295c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801293e:	4808      	ldr	r0, [pc, #32]	; (8012960 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012940:	f7ff fd36 	bl	80123b0 <USBD_GetString>
 8012944:	e004      	b.n	8012950 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012946:	683a      	ldr	r2, [r7, #0]
 8012948:	4904      	ldr	r1, [pc, #16]	; (801295c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801294a:	4805      	ldr	r0, [pc, #20]	; (8012960 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801294c:	f7ff fd30 	bl	80123b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012950:	4b02      	ldr	r3, [pc, #8]	; (801295c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012952:	4618      	mov	r0, r3
 8012954:	3708      	adds	r7, #8
 8012956:	46bd      	mov	sp, r7
 8012958:	bd80      	pop	{r7, pc}
 801295a:	bf00      	nop
 801295c:	240350e0 	.word	0x240350e0
 8012960:	080131a8 	.word	0x080131a8

08012964 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012964:	b580      	push	{r7, lr}
 8012966:	b084      	sub	sp, #16
 8012968:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801296a:	4b0f      	ldr	r3, [pc, #60]	; (80129a8 <Get_SerialNum+0x44>)
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012970:	4b0e      	ldr	r3, [pc, #56]	; (80129ac <Get_SerialNum+0x48>)
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012976:	4b0e      	ldr	r3, [pc, #56]	; (80129b0 <Get_SerialNum+0x4c>)
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801297c:	68fa      	ldr	r2, [r7, #12]
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	4413      	add	r3, r2
 8012982:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d009      	beq.n	801299e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801298a:	2208      	movs	r2, #8
 801298c:	4909      	ldr	r1, [pc, #36]	; (80129b4 <Get_SerialNum+0x50>)
 801298e:	68f8      	ldr	r0, [r7, #12]
 8012990:	f000 f814 	bl	80129bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012994:	2204      	movs	r2, #4
 8012996:	4908      	ldr	r1, [pc, #32]	; (80129b8 <Get_SerialNum+0x54>)
 8012998:	68b8      	ldr	r0, [r7, #8]
 801299a:	f000 f80f 	bl	80129bc <IntToUnicode>
  }
}
 801299e:	bf00      	nop
 80129a0:	3710      	adds	r7, #16
 80129a2:	46bd      	mov	sp, r7
 80129a4:	bd80      	pop	{r7, pc}
 80129a6:	bf00      	nop
 80129a8:	1ff1e800 	.word	0x1ff1e800
 80129ac:	1ff1e804 	.word	0x1ff1e804
 80129b0:	1ff1e808 	.word	0x1ff1e808
 80129b4:	240000e6 	.word	0x240000e6
 80129b8:	240000f6 	.word	0x240000f6

080129bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80129bc:	b480      	push	{r7}
 80129be:	b087      	sub	sp, #28
 80129c0:	af00      	add	r7, sp, #0
 80129c2:	60f8      	str	r0, [r7, #12]
 80129c4:	60b9      	str	r1, [r7, #8]
 80129c6:	4613      	mov	r3, r2
 80129c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80129ca:	2300      	movs	r3, #0
 80129cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80129ce:	2300      	movs	r3, #0
 80129d0:	75fb      	strb	r3, [r7, #23]
 80129d2:	e027      	b.n	8012a24 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	0f1b      	lsrs	r3, r3, #28
 80129d8:	2b09      	cmp	r3, #9
 80129da:	d80b      	bhi.n	80129f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	0f1b      	lsrs	r3, r3, #28
 80129e0:	b2da      	uxtb	r2, r3
 80129e2:	7dfb      	ldrb	r3, [r7, #23]
 80129e4:	005b      	lsls	r3, r3, #1
 80129e6:	4619      	mov	r1, r3
 80129e8:	68bb      	ldr	r3, [r7, #8]
 80129ea:	440b      	add	r3, r1
 80129ec:	3230      	adds	r2, #48	; 0x30
 80129ee:	b2d2      	uxtb	r2, r2
 80129f0:	701a      	strb	r2, [r3, #0]
 80129f2:	e00a      	b.n	8012a0a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	0f1b      	lsrs	r3, r3, #28
 80129f8:	b2da      	uxtb	r2, r3
 80129fa:	7dfb      	ldrb	r3, [r7, #23]
 80129fc:	005b      	lsls	r3, r3, #1
 80129fe:	4619      	mov	r1, r3
 8012a00:	68bb      	ldr	r3, [r7, #8]
 8012a02:	440b      	add	r3, r1
 8012a04:	3237      	adds	r2, #55	; 0x37
 8012a06:	b2d2      	uxtb	r2, r2
 8012a08:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	011b      	lsls	r3, r3, #4
 8012a0e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012a10:	7dfb      	ldrb	r3, [r7, #23]
 8012a12:	005b      	lsls	r3, r3, #1
 8012a14:	3301      	adds	r3, #1
 8012a16:	68ba      	ldr	r2, [r7, #8]
 8012a18:	4413      	add	r3, r2
 8012a1a:	2200      	movs	r2, #0
 8012a1c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012a1e:	7dfb      	ldrb	r3, [r7, #23]
 8012a20:	3301      	adds	r3, #1
 8012a22:	75fb      	strb	r3, [r7, #23]
 8012a24:	7dfa      	ldrb	r2, [r7, #23]
 8012a26:	79fb      	ldrb	r3, [r7, #7]
 8012a28:	429a      	cmp	r2, r3
 8012a2a:	d3d3      	bcc.n	80129d4 <IntToUnicode+0x18>
  }
}
 8012a2c:	bf00      	nop
 8012a2e:	bf00      	nop
 8012a30:	371c      	adds	r7, #28
 8012a32:	46bd      	mov	sp, r7
 8012a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a38:	4770      	bx	lr
	...

08012a3c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b0b8      	sub	sp, #224	; 0xe0
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012a44:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012a48:	2200      	movs	r2, #0
 8012a4a:	601a      	str	r2, [r3, #0]
 8012a4c:	605a      	str	r2, [r3, #4]
 8012a4e:	609a      	str	r2, [r3, #8]
 8012a50:	60da      	str	r2, [r3, #12]
 8012a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8012a54:	f107 0310 	add.w	r3, r7, #16
 8012a58:	22bc      	movs	r2, #188	; 0xbc
 8012a5a:	2100      	movs	r1, #0
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	f000 fb73 	bl	8013148 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	4a3a      	ldr	r2, [pc, #232]	; (8012b50 <HAL_PCD_MspInit+0x114>)
 8012a68:	4293      	cmp	r3, r2
 8012a6a:	d16d      	bne.n	8012b48 <HAL_PCD_MspInit+0x10c>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012a6c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012a70:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8012a72:	2301      	movs	r3, #1
 8012a74:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 60;
 8012a76:	233c      	movs	r3, #60	; 0x3c
 8012a78:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8012a7a:	2302      	movs	r3, #2
 8012a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 10;
 8012a7e:	230a      	movs	r3, #10
 8012a80:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8012a82:	2302      	movs	r3, #2
 8012a84:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8012a86:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8012a8a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8012a8c:	2300      	movs	r3, #0
 8012a8e:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8012a90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012a94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012a98:	f107 0310 	add.w	r3, r7, #16
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	f7f7 fd59 	bl	800a554 <HAL_RCCEx_PeriphCLKConfig>
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d001      	beq.n	8012aac <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8012aa8:	f7ef f9cc 	bl	8001e44 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8012aac:	f7f6 fd1e 	bl	80094ec <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012ab0:	4b28      	ldr	r3, [pc, #160]	; (8012b54 <HAL_PCD_MspInit+0x118>)
 8012ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012ab6:	4a27      	ldr	r2, [pc, #156]	; (8012b54 <HAL_PCD_MspInit+0x118>)
 8012ab8:	f043 0301 	orr.w	r3, r3, #1
 8012abc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012ac0:	4b24      	ldr	r3, [pc, #144]	; (8012b54 <HAL_PCD_MspInit+0x118>)
 8012ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012ac6:	f003 0301 	and.w	r3, r3, #1
 8012aca:	60fb      	str	r3, [r7, #12]
 8012acc:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012ace:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012ad2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012ad6:	2302      	movs	r3, #2
 8012ad8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012adc:	2300      	movs	r3, #0
 8012ade:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8012ae8:	230a      	movs	r3, #10
 8012aea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012aee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012af2:	4619      	mov	r1, r3
 8012af4:	4818      	ldr	r0, [pc, #96]	; (8012b58 <HAL_PCD_MspInit+0x11c>)
 8012af6:	f7f4 ffb7 	bl	8007a68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012afa:	4b16      	ldr	r3, [pc, #88]	; (8012b54 <HAL_PCD_MspInit+0x118>)
 8012afc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012b00:	4a14      	ldr	r2, [pc, #80]	; (8012b54 <HAL_PCD_MspInit+0x118>)
 8012b02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012b06:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8012b0a:	4b12      	ldr	r3, [pc, #72]	; (8012b54 <HAL_PCD_MspInit+0x118>)
 8012b0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012b10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012b14:	60bb      	str	r3, [r7, #8]
 8012b16:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 8012b18:	2200      	movs	r2, #0
 8012b1a:	2100      	movs	r1, #0
 8012b1c:	2062      	movs	r0, #98	; 0x62
 8012b1e:	f7f2 f99a 	bl	8004e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 8012b22:	2062      	movs	r0, #98	; 0x62
 8012b24:	f7f2 f9b1 	bl	8004e8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_EP1_IN_IRQn, 0, 0);
 8012b28:	2200      	movs	r2, #0
 8012b2a:	2100      	movs	r1, #0
 8012b2c:	2063      	movs	r0, #99	; 0x63
 8012b2e:	f7f2 f992 	bl	8004e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_IN_IRQn);
 8012b32:	2063      	movs	r0, #99	; 0x63
 8012b34:	f7f2 f9a9 	bl	8004e8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8012b38:	2200      	movs	r2, #0
 8012b3a:	2100      	movs	r1, #0
 8012b3c:	2065      	movs	r0, #101	; 0x65
 8012b3e:	f7f2 f98a 	bl	8004e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012b42:	2065      	movs	r0, #101	; 0x65
 8012b44:	f7f2 f9a1 	bl	8004e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012b48:	bf00      	nop
 8012b4a:	37e0      	adds	r7, #224	; 0xe0
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	bd80      	pop	{r7, pc}
 8012b50:	40080000 	.word	0x40080000
 8012b54:	58024400 	.word	0x58024400
 8012b58:	58020000 	.word	0x58020000

08012b5c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	b082      	sub	sp, #8
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8012b70:	4619      	mov	r1, r3
 8012b72:	4610      	mov	r0, r2
 8012b74:	f7fe fabd 	bl	80110f2 <USBD_LL_SetupStage>
}
 8012b78:	bf00      	nop
 8012b7a:	3708      	adds	r7, #8
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	bd80      	pop	{r7, pc}

08012b80 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b80:	b580      	push	{r7, lr}
 8012b82:	b082      	sub	sp, #8
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	6078      	str	r0, [r7, #4]
 8012b88:	460b      	mov	r3, r1
 8012b8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8012b92:	78fa      	ldrb	r2, [r7, #3]
 8012b94:	6879      	ldr	r1, [r7, #4]
 8012b96:	4613      	mov	r3, r2
 8012b98:	00db      	lsls	r3, r3, #3
 8012b9a:	4413      	add	r3, r2
 8012b9c:	009b      	lsls	r3, r3, #2
 8012b9e:	440b      	add	r3, r1
 8012ba0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8012ba4:	681a      	ldr	r2, [r3, #0]
 8012ba6:	78fb      	ldrb	r3, [r7, #3]
 8012ba8:	4619      	mov	r1, r3
 8012baa:	f7fe faf7 	bl	801119c <USBD_LL_DataOutStage>
}
 8012bae:	bf00      	nop
 8012bb0:	3708      	adds	r7, #8
 8012bb2:	46bd      	mov	sp, r7
 8012bb4:	bd80      	pop	{r7, pc}

08012bb6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012bb6:	b580      	push	{r7, lr}
 8012bb8:	b082      	sub	sp, #8
 8012bba:	af00      	add	r7, sp, #0
 8012bbc:	6078      	str	r0, [r7, #4]
 8012bbe:	460b      	mov	r3, r1
 8012bc0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8012bc8:	78fa      	ldrb	r2, [r7, #3]
 8012bca:	6879      	ldr	r1, [r7, #4]
 8012bcc:	4613      	mov	r3, r2
 8012bce:	00db      	lsls	r3, r3, #3
 8012bd0:	4413      	add	r3, r2
 8012bd2:	009b      	lsls	r3, r3, #2
 8012bd4:	440b      	add	r3, r1
 8012bd6:	334c      	adds	r3, #76	; 0x4c
 8012bd8:	681a      	ldr	r2, [r3, #0]
 8012bda:	78fb      	ldrb	r3, [r7, #3]
 8012bdc:	4619      	mov	r1, r3
 8012bde:	f7fe fb90 	bl	8011302 <USBD_LL_DataInStage>
}
 8012be2:	bf00      	nop
 8012be4:	3708      	adds	r7, #8
 8012be6:	46bd      	mov	sp, r7
 8012be8:	bd80      	pop	{r7, pc}

08012bea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012bea:	b580      	push	{r7, lr}
 8012bec:	b082      	sub	sp, #8
 8012bee:	af00      	add	r7, sp, #0
 8012bf0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	f7fe fcc4 	bl	8011586 <USBD_LL_SOF>
}
 8012bfe:	bf00      	nop
 8012c00:	3708      	adds	r7, #8
 8012c02:	46bd      	mov	sp, r7
 8012c04:	bd80      	pop	{r7, pc}

08012c06 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012c06:	b580      	push	{r7, lr}
 8012c08:	b084      	sub	sp, #16
 8012c0a:	af00      	add	r7, sp, #0
 8012c0c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012c0e:	2301      	movs	r3, #1
 8012c10:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	68db      	ldr	r3, [r3, #12]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d102      	bne.n	8012c20 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	73fb      	strb	r3, [r7, #15]
 8012c1e:	e008      	b.n	8012c32 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	68db      	ldr	r3, [r3, #12]
 8012c24:	2b02      	cmp	r3, #2
 8012c26:	d102      	bne.n	8012c2e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8012c28:	2301      	movs	r3, #1
 8012c2a:	73fb      	strb	r3, [r7, #15]
 8012c2c:	e001      	b.n	8012c32 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8012c2e:	f7ef f909 	bl	8001e44 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012c38:	7bfa      	ldrb	r2, [r7, #15]
 8012c3a:	4611      	mov	r1, r2
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	f7fe fc64 	bl	801150a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012c48:	4618      	mov	r0, r3
 8012c4a:	f7fe fc0c 	bl	8011466 <USBD_LL_Reset>
}
 8012c4e:	bf00      	nop
 8012c50:	3710      	adds	r7, #16
 8012c52:	46bd      	mov	sp, r7
 8012c54:	bd80      	pop	{r7, pc}
	...

08012c58 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	b082      	sub	sp, #8
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012c66:	4618      	mov	r0, r3
 8012c68:	f7fe fc5f 	bl	801152a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	687a      	ldr	r2, [r7, #4]
 8012c78:	6812      	ldr	r2, [r2, #0]
 8012c7a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012c7e:	f043 0301 	orr.w	r3, r3, #1
 8012c82:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	6a1b      	ldr	r3, [r3, #32]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d005      	beq.n	8012c98 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012c8c:	4b04      	ldr	r3, [pc, #16]	; (8012ca0 <HAL_PCD_SuspendCallback+0x48>)
 8012c8e:	691b      	ldr	r3, [r3, #16]
 8012c90:	4a03      	ldr	r2, [pc, #12]	; (8012ca0 <HAL_PCD_SuspendCallback+0x48>)
 8012c92:	f043 0306 	orr.w	r3, r3, #6
 8012c96:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012c98:	bf00      	nop
 8012c9a:	3708      	adds	r7, #8
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	bd80      	pop	{r7, pc}
 8012ca0:	e000ed00 	.word	0xe000ed00

08012ca4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b082      	sub	sp, #8
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	f7fe fc4f 	bl	8011556 <USBD_LL_Resume>
}
 8012cb8:	bf00      	nop
 8012cba:	3708      	adds	r7, #8
 8012cbc:	46bd      	mov	sp, r7
 8012cbe:	bd80      	pop	{r7, pc}

08012cc0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012cc0:	b580      	push	{r7, lr}
 8012cc2:	b082      	sub	sp, #8
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	6078      	str	r0, [r7, #4]
 8012cc8:	460b      	mov	r3, r1
 8012cca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012cd2:	78fa      	ldrb	r2, [r7, #3]
 8012cd4:	4611      	mov	r1, r2
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	f7fe fca7 	bl	801162a <USBD_LL_IsoOUTIncomplete>
}
 8012cdc:	bf00      	nop
 8012cde:	3708      	adds	r7, #8
 8012ce0:	46bd      	mov	sp, r7
 8012ce2:	bd80      	pop	{r7, pc}

08012ce4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	b082      	sub	sp, #8
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
 8012cec:	460b      	mov	r3, r1
 8012cee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012cf6:	78fa      	ldrb	r2, [r7, #3]
 8012cf8:	4611      	mov	r1, r2
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	f7fe fc63 	bl	80115c6 <USBD_LL_IsoINIncomplete>
}
 8012d00:	bf00      	nop
 8012d02:	3708      	adds	r7, #8
 8012d04:	46bd      	mov	sp, r7
 8012d06:	bd80      	pop	{r7, pc}

08012d08 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	b082      	sub	sp, #8
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012d16:	4618      	mov	r0, r3
 8012d18:	f7fe fcb9 	bl	801168e <USBD_LL_DevConnected>
}
 8012d1c:	bf00      	nop
 8012d1e:	3708      	adds	r7, #8
 8012d20:	46bd      	mov	sp, r7
 8012d22:	bd80      	pop	{r7, pc}

08012d24 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012d24:	b580      	push	{r7, lr}
 8012d26:	b082      	sub	sp, #8
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012d32:	4618      	mov	r0, r3
 8012d34:	f7fe fcb6 	bl	80116a4 <USBD_LL_DevDisconnected>
}
 8012d38:	bf00      	nop
 8012d3a:	3708      	adds	r7, #8
 8012d3c:	46bd      	mov	sp, r7
 8012d3e:	bd80      	pop	{r7, pc}

08012d40 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012d40:	b580      	push	{r7, lr}
 8012d42:	b082      	sub	sp, #8
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	781b      	ldrb	r3, [r3, #0]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d13e      	bne.n	8012dce <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012d50:	4a21      	ldr	r2, [pc, #132]	; (8012dd8 <USBD_LL_Init+0x98>)
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	4a1f      	ldr	r2, [pc, #124]	; (8012dd8 <USBD_LL_Init+0x98>)
 8012d5c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012d60:	4b1d      	ldr	r3, [pc, #116]	; (8012dd8 <USBD_LL_Init+0x98>)
 8012d62:	4a1e      	ldr	r2, [pc, #120]	; (8012ddc <USBD_LL_Init+0x9c>)
 8012d64:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8012d66:	4b1c      	ldr	r3, [pc, #112]	; (8012dd8 <USBD_LL_Init+0x98>)
 8012d68:	2209      	movs	r2, #9
 8012d6a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8012d6c:	4b1a      	ldr	r3, [pc, #104]	; (8012dd8 <USBD_LL_Init+0x98>)
 8012d6e:	2202      	movs	r2, #2
 8012d70:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012d72:	4b19      	ldr	r3, [pc, #100]	; (8012dd8 <USBD_LL_Init+0x98>)
 8012d74:	2200      	movs	r2, #0
 8012d76:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012d78:	4b17      	ldr	r3, [pc, #92]	; (8012dd8 <USBD_LL_Init+0x98>)
 8012d7a:	2202      	movs	r2, #2
 8012d7c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012d7e:	4b16      	ldr	r3, [pc, #88]	; (8012dd8 <USBD_LL_Init+0x98>)
 8012d80:	2200      	movs	r2, #0
 8012d82:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8012d84:	4b14      	ldr	r3, [pc, #80]	; (8012dd8 <USBD_LL_Init+0x98>)
 8012d86:	2200      	movs	r2, #0
 8012d88:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8012d8a:	4b13      	ldr	r3, [pc, #76]	; (8012dd8 <USBD_LL_Init+0x98>)
 8012d8c:	2200      	movs	r2, #0
 8012d8e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8012d90:	4b11      	ldr	r3, [pc, #68]	; (8012dd8 <USBD_LL_Init+0x98>)
 8012d92:	2200      	movs	r2, #0
 8012d94:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8012d96:	4b10      	ldr	r3, [pc, #64]	; (8012dd8 <USBD_LL_Init+0x98>)
 8012d98:	2200      	movs	r2, #0
 8012d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8012d9c:	4b0e      	ldr	r3, [pc, #56]	; (8012dd8 <USBD_LL_Init+0x98>)
 8012d9e:	2200      	movs	r2, #0
 8012da0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8012da2:	480d      	ldr	r0, [pc, #52]	; (8012dd8 <USBD_LL_Init+0x98>)
 8012da4:	f7f5 f872 	bl	8007e8c <HAL_PCD_Init>
 8012da8:	4603      	mov	r3, r0
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d001      	beq.n	8012db2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8012dae:	f7ef f849 	bl	8001e44 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8012db2:	2180      	movs	r1, #128	; 0x80
 8012db4:	4808      	ldr	r0, [pc, #32]	; (8012dd8 <USBD_LL_Init+0x98>)
 8012db6:	f7f6 fafe 	bl	80093b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8012dba:	2240      	movs	r2, #64	; 0x40
 8012dbc:	2100      	movs	r1, #0
 8012dbe:	4806      	ldr	r0, [pc, #24]	; (8012dd8 <USBD_LL_Init+0x98>)
 8012dc0:	f7f6 fab2 	bl	8009328 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8012dc4:	2280      	movs	r2, #128	; 0x80
 8012dc6:	2101      	movs	r1, #1
 8012dc8:	4803      	ldr	r0, [pc, #12]	; (8012dd8 <USBD_LL_Init+0x98>)
 8012dca:	f7f6 faad 	bl	8009328 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8012dce:	2300      	movs	r3, #0
}
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	3708      	adds	r7, #8
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	bd80      	pop	{r7, pc}
 8012dd8:	24035120 	.word	0x24035120
 8012ddc:	40080000 	.word	0x40080000

08012de0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b084      	sub	sp, #16
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012de8:	2300      	movs	r3, #0
 8012dea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012dec:	2300      	movs	r3, #0
 8012dee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012df6:	4618      	mov	r0, r3
 8012df8:	f7f5 f96c 	bl	80080d4 <HAL_PCD_Start>
 8012dfc:	4603      	mov	r3, r0
 8012dfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012e00:	7bfb      	ldrb	r3, [r7, #15]
 8012e02:	4618      	mov	r0, r3
 8012e04:	f000 f942 	bl	801308c <USBD_Get_USB_Status>
 8012e08:	4603      	mov	r3, r0
 8012e0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012e0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8012e0e:	4618      	mov	r0, r3
 8012e10:	3710      	adds	r7, #16
 8012e12:	46bd      	mov	sp, r7
 8012e14:	bd80      	pop	{r7, pc}

08012e16 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012e16:	b580      	push	{r7, lr}
 8012e18:	b084      	sub	sp, #16
 8012e1a:	af00      	add	r7, sp, #0
 8012e1c:	6078      	str	r0, [r7, #4]
 8012e1e:	4608      	mov	r0, r1
 8012e20:	4611      	mov	r1, r2
 8012e22:	461a      	mov	r2, r3
 8012e24:	4603      	mov	r3, r0
 8012e26:	70fb      	strb	r3, [r7, #3]
 8012e28:	460b      	mov	r3, r1
 8012e2a:	70bb      	strb	r3, [r7, #2]
 8012e2c:	4613      	mov	r3, r2
 8012e2e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012e30:	2300      	movs	r3, #0
 8012e32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012e34:	2300      	movs	r3, #0
 8012e36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012e3e:	78bb      	ldrb	r3, [r7, #2]
 8012e40:	883a      	ldrh	r2, [r7, #0]
 8012e42:	78f9      	ldrb	r1, [r7, #3]
 8012e44:	f7f5 fe6a 	bl	8008b1c <HAL_PCD_EP_Open>
 8012e48:	4603      	mov	r3, r0
 8012e4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012e4c:	7bfb      	ldrb	r3, [r7, #15]
 8012e4e:	4618      	mov	r0, r3
 8012e50:	f000 f91c 	bl	801308c <USBD_Get_USB_Status>
 8012e54:	4603      	mov	r3, r0
 8012e56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012e58:	7bbb      	ldrb	r3, [r7, #14]
}
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	3710      	adds	r7, #16
 8012e5e:	46bd      	mov	sp, r7
 8012e60:	bd80      	pop	{r7, pc}

08012e62 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012e62:	b580      	push	{r7, lr}
 8012e64:	b084      	sub	sp, #16
 8012e66:	af00      	add	r7, sp, #0
 8012e68:	6078      	str	r0, [r7, #4]
 8012e6a:	460b      	mov	r3, r1
 8012e6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012e6e:	2300      	movs	r3, #0
 8012e70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012e72:	2300      	movs	r3, #0
 8012e74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012e7c:	78fa      	ldrb	r2, [r7, #3]
 8012e7e:	4611      	mov	r1, r2
 8012e80:	4618      	mov	r0, r3
 8012e82:	f7f5 feb3 	bl	8008bec <HAL_PCD_EP_Close>
 8012e86:	4603      	mov	r3, r0
 8012e88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012e8a:	7bfb      	ldrb	r3, [r7, #15]
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	f000 f8fd 	bl	801308c <USBD_Get_USB_Status>
 8012e92:	4603      	mov	r3, r0
 8012e94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012e96:	7bbb      	ldrb	r3, [r7, #14]
}
 8012e98:	4618      	mov	r0, r3
 8012e9a:	3710      	adds	r7, #16
 8012e9c:	46bd      	mov	sp, r7
 8012e9e:	bd80      	pop	{r7, pc}

08012ea0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b084      	sub	sp, #16
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	6078      	str	r0, [r7, #4]
 8012ea8:	460b      	mov	r3, r1
 8012eaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012eac:	2300      	movs	r3, #0
 8012eae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012eb0:	2300      	movs	r3, #0
 8012eb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012eba:	78fa      	ldrb	r2, [r7, #3]
 8012ebc:	4611      	mov	r1, r2
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	f7f5 ff8b 	bl	8008dda <HAL_PCD_EP_SetStall>
 8012ec4:	4603      	mov	r3, r0
 8012ec6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012ec8:	7bfb      	ldrb	r3, [r7, #15]
 8012eca:	4618      	mov	r0, r3
 8012ecc:	f000 f8de 	bl	801308c <USBD_Get_USB_Status>
 8012ed0:	4603      	mov	r3, r0
 8012ed2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012ed4:	7bbb      	ldrb	r3, [r7, #14]
}
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	3710      	adds	r7, #16
 8012eda:	46bd      	mov	sp, r7
 8012edc:	bd80      	pop	{r7, pc}

08012ede <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012ede:	b580      	push	{r7, lr}
 8012ee0:	b084      	sub	sp, #16
 8012ee2:	af00      	add	r7, sp, #0
 8012ee4:	6078      	str	r0, [r7, #4]
 8012ee6:	460b      	mov	r3, r1
 8012ee8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012eea:	2300      	movs	r3, #0
 8012eec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012eee:	2300      	movs	r3, #0
 8012ef0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012ef8:	78fa      	ldrb	r2, [r7, #3]
 8012efa:	4611      	mov	r1, r2
 8012efc:	4618      	mov	r0, r3
 8012efe:	f7f5 ffd0 	bl	8008ea2 <HAL_PCD_EP_ClrStall>
 8012f02:	4603      	mov	r3, r0
 8012f04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012f06:	7bfb      	ldrb	r3, [r7, #15]
 8012f08:	4618      	mov	r0, r3
 8012f0a:	f000 f8bf 	bl	801308c <USBD_Get_USB_Status>
 8012f0e:	4603      	mov	r3, r0
 8012f10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012f12:	7bbb      	ldrb	r3, [r7, #14]
}
 8012f14:	4618      	mov	r0, r3
 8012f16:	3710      	adds	r7, #16
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	bd80      	pop	{r7, pc}

08012f1c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012f1c:	b480      	push	{r7}
 8012f1e:	b085      	sub	sp, #20
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	6078      	str	r0, [r7, #4]
 8012f24:	460b      	mov	r3, r1
 8012f26:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012f2e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012f30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	da0b      	bge.n	8012f50 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012f38:	78fb      	ldrb	r3, [r7, #3]
 8012f3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012f3e:	68f9      	ldr	r1, [r7, #12]
 8012f40:	4613      	mov	r3, r2
 8012f42:	00db      	lsls	r3, r3, #3
 8012f44:	4413      	add	r3, r2
 8012f46:	009b      	lsls	r3, r3, #2
 8012f48:	440b      	add	r3, r1
 8012f4a:	333e      	adds	r3, #62	; 0x3e
 8012f4c:	781b      	ldrb	r3, [r3, #0]
 8012f4e:	e00b      	b.n	8012f68 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012f50:	78fb      	ldrb	r3, [r7, #3]
 8012f52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012f56:	68f9      	ldr	r1, [r7, #12]
 8012f58:	4613      	mov	r3, r2
 8012f5a:	00db      	lsls	r3, r3, #3
 8012f5c:	4413      	add	r3, r2
 8012f5e:	009b      	lsls	r3, r3, #2
 8012f60:	440b      	add	r3, r1
 8012f62:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8012f66:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012f68:	4618      	mov	r0, r3
 8012f6a:	3714      	adds	r7, #20
 8012f6c:	46bd      	mov	sp, r7
 8012f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f72:	4770      	bx	lr

08012f74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012f74:	b580      	push	{r7, lr}
 8012f76:	b084      	sub	sp, #16
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	6078      	str	r0, [r7, #4]
 8012f7c:	460b      	mov	r3, r1
 8012f7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012f80:	2300      	movs	r3, #0
 8012f82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012f84:	2300      	movs	r3, #0
 8012f86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012f8e:	78fa      	ldrb	r2, [r7, #3]
 8012f90:	4611      	mov	r1, r2
 8012f92:	4618      	mov	r0, r3
 8012f94:	f7f5 fd9d 	bl	8008ad2 <HAL_PCD_SetAddress>
 8012f98:	4603      	mov	r3, r0
 8012f9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012f9c:	7bfb      	ldrb	r3, [r7, #15]
 8012f9e:	4618      	mov	r0, r3
 8012fa0:	f000 f874 	bl	801308c <USBD_Get_USB_Status>
 8012fa4:	4603      	mov	r3, r0
 8012fa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012fa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8012faa:	4618      	mov	r0, r3
 8012fac:	3710      	adds	r7, #16
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	bd80      	pop	{r7, pc}

08012fb2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012fb2:	b580      	push	{r7, lr}
 8012fb4:	b086      	sub	sp, #24
 8012fb6:	af00      	add	r7, sp, #0
 8012fb8:	60f8      	str	r0, [r7, #12]
 8012fba:	607a      	str	r2, [r7, #4]
 8012fbc:	603b      	str	r3, [r7, #0]
 8012fbe:	460b      	mov	r3, r1
 8012fc0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012fd0:	7af9      	ldrb	r1, [r7, #11]
 8012fd2:	683b      	ldr	r3, [r7, #0]
 8012fd4:	687a      	ldr	r2, [r7, #4]
 8012fd6:	f7f5 feb6 	bl	8008d46 <HAL_PCD_EP_Transmit>
 8012fda:	4603      	mov	r3, r0
 8012fdc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012fde:	7dfb      	ldrb	r3, [r7, #23]
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	f000 f853 	bl	801308c <USBD_Get_USB_Status>
 8012fe6:	4603      	mov	r3, r0
 8012fe8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012fea:	7dbb      	ldrb	r3, [r7, #22]
}
 8012fec:	4618      	mov	r0, r3
 8012fee:	3718      	adds	r7, #24
 8012ff0:	46bd      	mov	sp, r7
 8012ff2:	bd80      	pop	{r7, pc}

08012ff4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	b086      	sub	sp, #24
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	60f8      	str	r0, [r7, #12]
 8012ffc:	607a      	str	r2, [r7, #4]
 8012ffe:	603b      	str	r3, [r7, #0]
 8013000:	460b      	mov	r3, r1
 8013002:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013004:	2300      	movs	r3, #0
 8013006:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013008:	2300      	movs	r3, #0
 801300a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013012:	7af9      	ldrb	r1, [r7, #11]
 8013014:	683b      	ldr	r3, [r7, #0]
 8013016:	687a      	ldr	r2, [r7, #4]
 8013018:	f7f5 fe32 	bl	8008c80 <HAL_PCD_EP_Receive>
 801301c:	4603      	mov	r3, r0
 801301e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013020:	7dfb      	ldrb	r3, [r7, #23]
 8013022:	4618      	mov	r0, r3
 8013024:	f000 f832 	bl	801308c <USBD_Get_USB_Status>
 8013028:	4603      	mov	r3, r0
 801302a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801302c:	7dbb      	ldrb	r3, [r7, #22]
}
 801302e:	4618      	mov	r0, r3
 8013030:	3718      	adds	r7, #24
 8013032:	46bd      	mov	sp, r7
 8013034:	bd80      	pop	{r7, pc}

08013036 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013036:	b580      	push	{r7, lr}
 8013038:	b082      	sub	sp, #8
 801303a:	af00      	add	r7, sp, #0
 801303c:	6078      	str	r0, [r7, #4]
 801303e:	460b      	mov	r3, r1
 8013040:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013048:	78fa      	ldrb	r2, [r7, #3]
 801304a:	4611      	mov	r1, r2
 801304c:	4618      	mov	r0, r3
 801304e:	f7f5 fe62 	bl	8008d16 <HAL_PCD_EP_GetRxCount>
 8013052:	4603      	mov	r3, r0
}
 8013054:	4618      	mov	r0, r3
 8013056:	3708      	adds	r7, #8
 8013058:	46bd      	mov	sp, r7
 801305a:	bd80      	pop	{r7, pc}

0801305c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801305c:	b480      	push	{r7}
 801305e:	b083      	sub	sp, #12
 8013060:	af00      	add	r7, sp, #0
 8013062:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013064:	4b03      	ldr	r3, [pc, #12]	; (8013074 <USBD_static_malloc+0x18>)
}
 8013066:	4618      	mov	r0, r3
 8013068:	370c      	adds	r7, #12
 801306a:	46bd      	mov	sp, r7
 801306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013070:	4770      	bx	lr
 8013072:	bf00      	nop
 8013074:	2403562c 	.word	0x2403562c

08013078 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013078:	b480      	push	{r7}
 801307a:	b083      	sub	sp, #12
 801307c:	af00      	add	r7, sp, #0
 801307e:	6078      	str	r0, [r7, #4]

}
 8013080:	bf00      	nop
 8013082:	370c      	adds	r7, #12
 8013084:	46bd      	mov	sp, r7
 8013086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801308a:	4770      	bx	lr

0801308c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801308c:	b480      	push	{r7}
 801308e:	b085      	sub	sp, #20
 8013090:	af00      	add	r7, sp, #0
 8013092:	4603      	mov	r3, r0
 8013094:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013096:	2300      	movs	r3, #0
 8013098:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801309a:	79fb      	ldrb	r3, [r7, #7]
 801309c:	2b03      	cmp	r3, #3
 801309e:	d817      	bhi.n	80130d0 <USBD_Get_USB_Status+0x44>
 80130a0:	a201      	add	r2, pc, #4	; (adr r2, 80130a8 <USBD_Get_USB_Status+0x1c>)
 80130a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130a6:	bf00      	nop
 80130a8:	080130b9 	.word	0x080130b9
 80130ac:	080130bf 	.word	0x080130bf
 80130b0:	080130c5 	.word	0x080130c5
 80130b4:	080130cb 	.word	0x080130cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80130b8:	2300      	movs	r3, #0
 80130ba:	73fb      	strb	r3, [r7, #15]
    break;
 80130bc:	e00b      	b.n	80130d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80130be:	2303      	movs	r3, #3
 80130c0:	73fb      	strb	r3, [r7, #15]
    break;
 80130c2:	e008      	b.n	80130d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80130c4:	2301      	movs	r3, #1
 80130c6:	73fb      	strb	r3, [r7, #15]
    break;
 80130c8:	e005      	b.n	80130d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80130ca:	2303      	movs	r3, #3
 80130cc:	73fb      	strb	r3, [r7, #15]
    break;
 80130ce:	e002      	b.n	80130d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80130d0:	2303      	movs	r3, #3
 80130d2:	73fb      	strb	r3, [r7, #15]
    break;
 80130d4:	bf00      	nop
  }
  return usb_status;
 80130d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80130d8:	4618      	mov	r0, r3
 80130da:	3714      	adds	r7, #20
 80130dc:	46bd      	mov	sp, r7
 80130de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e2:	4770      	bx	lr

080130e4 <__libc_init_array>:
 80130e4:	b570      	push	{r4, r5, r6, lr}
 80130e6:	4d0d      	ldr	r5, [pc, #52]	; (801311c <__libc_init_array+0x38>)
 80130e8:	4c0d      	ldr	r4, [pc, #52]	; (8013120 <__libc_init_array+0x3c>)
 80130ea:	1b64      	subs	r4, r4, r5
 80130ec:	10a4      	asrs	r4, r4, #2
 80130ee:	2600      	movs	r6, #0
 80130f0:	42a6      	cmp	r6, r4
 80130f2:	d109      	bne.n	8013108 <__libc_init_array+0x24>
 80130f4:	4d0b      	ldr	r5, [pc, #44]	; (8013124 <__libc_init_array+0x40>)
 80130f6:	4c0c      	ldr	r4, [pc, #48]	; (8013128 <__libc_init_array+0x44>)
 80130f8:	f000 f82e 	bl	8013158 <_init>
 80130fc:	1b64      	subs	r4, r4, r5
 80130fe:	10a4      	asrs	r4, r4, #2
 8013100:	2600      	movs	r6, #0
 8013102:	42a6      	cmp	r6, r4
 8013104:	d105      	bne.n	8013112 <__libc_init_array+0x2e>
 8013106:	bd70      	pop	{r4, r5, r6, pc}
 8013108:	f855 3b04 	ldr.w	r3, [r5], #4
 801310c:	4798      	blx	r3
 801310e:	3601      	adds	r6, #1
 8013110:	e7ee      	b.n	80130f0 <__libc_init_array+0xc>
 8013112:	f855 3b04 	ldr.w	r3, [r5], #4
 8013116:	4798      	blx	r3
 8013118:	3601      	adds	r6, #1
 801311a:	e7f2      	b.n	8013102 <__libc_init_array+0x1e>
 801311c:	08013200 	.word	0x08013200
 8013120:	08013200 	.word	0x08013200
 8013124:	08013200 	.word	0x08013200
 8013128:	08013204 	.word	0x08013204

0801312c <memcpy>:
 801312c:	440a      	add	r2, r1
 801312e:	4291      	cmp	r1, r2
 8013130:	f100 33ff 	add.w	r3, r0, #4294967295
 8013134:	d100      	bne.n	8013138 <memcpy+0xc>
 8013136:	4770      	bx	lr
 8013138:	b510      	push	{r4, lr}
 801313a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801313e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013142:	4291      	cmp	r1, r2
 8013144:	d1f9      	bne.n	801313a <memcpy+0xe>
 8013146:	bd10      	pop	{r4, pc}

08013148 <memset>:
 8013148:	4402      	add	r2, r0
 801314a:	4603      	mov	r3, r0
 801314c:	4293      	cmp	r3, r2
 801314e:	d100      	bne.n	8013152 <memset+0xa>
 8013150:	4770      	bx	lr
 8013152:	f803 1b01 	strb.w	r1, [r3], #1
 8013156:	e7f9      	b.n	801314c <memset+0x4>

08013158 <_init>:
 8013158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801315a:	bf00      	nop
 801315c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801315e:	bc08      	pop	{r3}
 8013160:	469e      	mov	lr, r3
 8013162:	4770      	bx	lr

08013164 <_fini>:
 8013164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013166:	bf00      	nop
 8013168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801316a:	bc08      	pop	{r3}
 801316c:	469e      	mov	lr, r3
 801316e:	4770      	bx	lr
